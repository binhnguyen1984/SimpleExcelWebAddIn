(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("FileHandler", [], factory);
	else if(typeof exports === 'object')
		exports["FileHandler"] = factory();
	else
		root["FileHandler"] = factory();
})(global, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./wwwroot/ExcelAddIn/FileHandler.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ts-xlsx/lib/main.js":
/*!******************************************!*\
  !*** ./node_modules/ts-xlsx/lib/main.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	__export(__webpack_require__(1));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", { value: true });
	var xlsx_1 = __webpack_require__(2);
	exports.readFile = xlsx_1.readFile;
	exports.read = xlsx_1.read;
	exports.utils = xlsx_1.utils;
	exports.write = xlsx_1.write;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/* vim: set ts=2: */
	/*jshint -W041 */
	/*jshint funcscope:true, eqnull:true */
	/*exported XLSX */
	/*global exports, module, require:false, process:false, Buffer:false */
	var XLSX = {};
	(function make_xlsx(XLSX){
	XLSX.version = '0.10.1';
	var current_codepage = 1200;
	/*global cptable:true */
	if(true) {
		if(typeof cptable === 'undefined') cptable = __webpack_require__(3);
	}
	function reset_cp() { set_cp(1200); }
	var set_cp = function(cp) { current_codepage = cp; };

	function char_codes(data) { var o = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }
	var debom = function(data) {
		var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
		if(c1 == 0xFF && c2 == 0xFE) return data.substr(2);
		if(c1 == 0xFE && c2 == 0xFF) return data.substr(2);
		if(c1 == 0xFEFF) return data.substr(1);
		return data;
	};

	var _getchar = function _gc1(x) { return String.fromCharCode(x); };
	if(typeof cptable !== 'undefined') {
		set_cp = function(cp) { current_codepage = cp; };
		debom = function(data) {
			if(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return cptable.utils.decode(1200, char_codes(data.substr(2))); }
			return data;
		};
		_getchar = function _gc2(x) {
			if(current_codepage === 1200) return String.fromCharCode(x);
			return cptable.utils.decode(current_codepage, [x&255,x>>8])[0];
		};
	}
	var DENSE = null;
	var DIF_XL = true;
	var Base64 = (function make_b64(){
		var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		return {
			encode: function(input) {
				var o = "";
				var c1, c2, c3, e1, e2, e3, e4;
				for(var i = 0; i < input.length; ) {
					c1 = input.charCodeAt(i++);
					c2 = input.charCodeAt(i++);
					c3 = input.charCodeAt(i++);
					e1 = c1 >> 2;
					e2 = (c1 & 3) << 4 | c2 >> 4;
					e3 = (c2 & 15) << 2 | c3 >> 6;
					e4 = c3 & 63;
					if (isNaN(c2)) { e3 = e4 = 64; }
					else if (isNaN(c3)) { e4 = 64; }
					o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);
				}
				return o;
			},
			decode: function b64_decode(input) {
				var o = "";
				var c1, c2, c3;
				var e1, e2, e3, e4;
				input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
				for(var i = 0; i < input.length;) {
					e1 = map.indexOf(input.charAt(i++));
					e2 = map.indexOf(input.charAt(i++));
					e3 = map.indexOf(input.charAt(i++));
					e4 = map.indexOf(input.charAt(i++));
					c1 = e1 << 2 | e2 >> 4;
					c2 = (e2 & 15) << 4 | e3 >> 2;
					c3 = (e3 & 3) << 6 | e4;
					o += String.fromCharCode(c1);
					if (e3 != 64) { o += String.fromCharCode(c2); }
					if (e4 != 64) { o += String.fromCharCode(c3); }
				}
				return o;
			}
		};
	})();
	var has_buf = (typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && process.versions.node);

	function new_raw_buf(len) {
		/* jshint -W056 */
		return new (has_buf ? Buffer : Array)(len);
		/* jshint +W056 */
	}

	function s2a(s) {
		if(has_buf) return new Buffer(s, "binary");
		return s.split("").map(function(x){ return x.charCodeAt(0) & 0xff; });
	}

	var bconcat = function(bufs) { return [].concat.apply([], bufs); };

	var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/;
	/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/*jshint -W041 */
	var SSF = {};
	var make_ssf = function make_ssf(SSF){
	SSF.version = '0.9.2';
	function _strrev(x) { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
	function fill(c,l) { var o = ""; while(o.length < l) o+=c; return o; }
	function pad0(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad_(v,d){var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
	function rpad_(v,d){var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
	function pad0r1(v,d){var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad0r2(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	var p2_32 = Math.pow(2,32);
	function pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
	function isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
	/* Options */
	var opts_fmt = [
		["date1904", 0],
		["output", ""],
		["WTF", false]
	];
	function fixopts(o){
		for(var y = 0; y != opts_fmt.length; ++y) if(o[opts_fmt[y][0]]===undefined) o[opts_fmt[y][0]]=opts_fmt[y][1];
	}
	SSF.opts = opts_fmt;
	var days = [
		['Sun', 'Sunday'],
		['Mon', 'Monday'],
		['Tue', 'Tuesday'],
		['Wed', 'Wednesday'],
		['Thu', 'Thursday'],
		['Fri', 'Friday'],
		['Sat', 'Saturday']
	];
	var months = [
		['J', 'Jan', 'January'],
		['F', 'Feb', 'February'],
		['M', 'Mar', 'March'],
		['A', 'Apr', 'April'],
		['M', 'May', 'May'],
		['J', 'Jun', 'June'],
		['J', 'Jul', 'July'],
		['A', 'Aug', 'August'],
		['S', 'Sep', 'September'],
		['O', 'Oct', 'October'],
		['N', 'Nov', 'November'],
		['D', 'Dec', 'December']
	];
	function init_table(t) {
		t[0]=  'General';
		t[1]=  '0';
		t[2]=  '0.00';
		t[3]=  '#,##0';
		t[4]=  '#,##0.00';
		t[9]=  '0%';
		t[10]= '0.00%';
		t[11]= '0.00E+00';
		t[12]= '# ?/?';
		t[13]= '# ??/??';
		t[14]= 'm/d/yy';
		t[15]= 'd-mmm-yy';
		t[16]= 'd-mmm';
		t[17]= 'mmm-yy';
		t[18]= 'h:mm AM/PM';
		t[19]= 'h:mm:ss AM/PM';
		t[20]= 'h:mm';
		t[21]= 'h:mm:ss';
		t[22]= 'm/d/yy h:mm';
		t[37]= '#,##0 ;(#,##0)';
		t[38]= '#,##0 ;[Red](#,##0)';
		t[39]= '#,##0.00;(#,##0.00)';
		t[40]= '#,##0.00;[Red](#,##0.00)';
		t[45]= 'mm:ss';
		t[46]= '[h]:mm:ss';
		t[47]= 'mmss.0';
		t[48]= '##0.0E+0';
		t[49]= '@';
		t[56]= '"上午/下午 "hh"時"mm"分"ss"秒 "';
		t[65535]= 'General';
	}

	var table_fmt = {};
	init_table(table_fmt);
	function frac(x, D, mixed) {
		var sgn = x < 0 ? -1 : 1;
		var B = x * sgn;
		var P_2 = 0, P_1 = 1, P = 0;
		var Q_2 = 1, Q_1 = 0, Q = 0;
		var A = Math.floor(B);
		while(Q_1 < D) {
			A = Math.floor(B);
			P = A * P_1 + P_2;
			Q = A * Q_1 + Q_2;
			if((B - A) < 0.00000005) break;
			B = 1 / (B - A);
			P_2 = P_1; P_1 = P;
			Q_2 = Q_1; Q_1 = Q;
		}
		if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
		if(!mixed) return [0, sgn * P, Q];
		var q = Math.floor(sgn * P/Q);
		return [q, sgn*P - q*Q, Q];
	}
	function general_fmt_int(v) { return ""+v; }
	SSF._general_int = general_fmt_int;
	var general_fmt_num = (function make_general_fmt_num() {
	var gnr1 = /\.(\d*[1-9])0+$/, gnr2 = /\.0*$/, gnr4 = /\.(\d*[1-9])0+/, gnr5 = /\.0*[Ee]/, gnr6 = /(E[+-])(\d)$/;
	function gfn2(v) {
		var w = (v<0?12:11);
		var o = gfn5(v.toFixed(12)); if(o.length <= w) return o;
		o = v.toPrecision(10); if(o.length <= w) return o;
		return v.toExponential(5);
	}
	function gfn3(v) {
		var o = v.toFixed(11).replace(gnr1,".$1");
		if(o.length > (v<0?12:11)) o = v.toPrecision(6);
		return o;
	}
	function gfn4(o) {
		for(var i = 0; i != o.length; ++i) if((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4,".$1").replace(gnr5,"E").replace("e","E").replace(gnr6,"$10$2");
		return o;
	}
	function gfn5(o) {
		return o.indexOf(".") > -1 ? o.replace(gnr2,"").replace(gnr1,".$1") : o;
	}
	return function general_fmt_num(v) {
		var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;
		if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
		else if(Math.abs(V) <= 9) o = gfn2(v);
		else if(V === 10) o = v.toFixed(10).substr(0,12);
		else o = gfn3(v);
		return gfn5(gfn4(o));
	};})();
	SSF._general_num = general_fmt_num;
	function general_fmt(v) {
		switch(typeof v) {
			case 'string': return v;
			case 'boolean': return v ? "TRUE" : "FALSE";
			case 'number': return (v|0) === v ? general_fmt_int(v/*, opts*/) : general_fmt_num(v/*, opts*/);
			case 'undefined': return "";
			case 'object': if(v == null) return "";
		}
		throw new Error("unsupported value in General format: " + v);
	}
	SSF._general = general_fmt;
	function fix_hijri(/*date, o*/) { return 0; }
	function parse_date_code(v,opts,b2) {
		if(v > 2958465 || v < 0) return null;
		var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
		var dout=[];
		var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
		if(Math.abs(out.u) < 1e-6) out.u = 0;
		fixopts(opts != null ? opts : (opts=[]));
		if(opts.date1904) date += 1462;
		if(out.u > 0.999) {
			out.u = 0;
			if(++time == 86400) { time = 0; ++date; }
		}
		if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
		else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
		else {
			if(date > 60) --date;
			/* 1 = Jan 1 1900 in Gregorian */
			var d = new Date(1900, 0, 1);
			d.setDate(d.getDate() + date - 1);
			dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
			dow = d.getDay();
			if(date < 60) dow = (dow + 6) % 7;
			if(b2) dow = fix_hijri(d, dout);
		}
		out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
		out.S = time % 60; time = Math.floor(time / 60);
		out.M = time % 60; time = Math.floor(time / 60);
		out.H = time;
		out.q = dow;
		return out;
	}
	SSF.parse_date_code = parse_date_code;
	/*jshint -W086 */
	function write_date(type, fmt, val, ss0) {
		var o="", ss=0, tt=0, y = val.y, out, outl = 0;
		switch(type) {
			case 98: /* 'b' buddhist year */
				y = val.y + 543;
				/* falls through */
			case 121: /* 'y' year */
			switch(fmt.length) {
				case 1: case 2: out = y % 100; outl = 2; break;
				default: out = y % 10000; outl = 4; break;
			} break;
			case 109: /* 'm' month */
			switch(fmt.length) {
				case 1: case 2: out = val.m; outl = fmt.length; break;
				case 3: return months[val.m-1][1];
				case 5: return months[val.m-1][0];
				default: return months[val.m-1][2];
			} break;
			case 100: /* 'd' day */
			switch(fmt.length) {
				case 1: case 2: out = val.d; outl = fmt.length; break;
				case 3: return days[val.q][0];
				default: return days[val.q][1];
			} break;
			case 104: /* 'h' 12-hour */
			switch(fmt.length) {
				case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 72: /* 'H' 24-hour */
			switch(fmt.length) {
				case 1: case 2: out = val.H; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 77: /* 'M' minutes */
			switch(fmt.length) {
				case 1: case 2: out = val.M; outl = fmt.length; break;
				default: throw 'bad minute format: ' + fmt;
			} break;
			case 115: /* 's' seconds */
			if(val.u === 0) switch(fmt) {
				case 's': case 'ss': return pad0(val.S, fmt.length);
				case '.0': case '.00': case '.000':
			}
			switch(fmt) {
				case 's': case 'ss': case '.0': case '.00': case '.000':
	if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
					else tt = ss0 === 1 ? 10 : 1;
					ss = Math.round((tt)*(val.S + val.u));
					if(ss >= 60*tt) ss = 0;
					if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
					o = pad0(ss,2 + ss0);
					if(fmt === 'ss') return o.substr(0,2);
					return "." + o.substr(2,fmt.length-1);
				default: throw 'bad second format: ' + fmt;
			}
			case 90: /* 'Z' absolute time */
			switch(fmt) {
				case '[h]': case '[hh]': out = val.D*24+val.H; break;
				case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
				case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
				default: throw 'bad abstime format: ' + fmt;
			} outl = fmt.length === 3 ? 1 : 2; break;
			case 101: /* 'e' era */
				out = y; outl = 1;
		}
		if(outl > 0) return pad0(out, outl); else return "";
	}
	/*jshint +W086 */
	function commaify(s) {
		if(s.length <= 3) return s;
		var j = (s.length % 3), o = s.substr(0,j);
		for(; j!=s.length; j+=3) o+=(o.length > 0 ? "," : "") + s.substr(j,3);
		return o;
	}
	var write_num = (function make_write_num(){
	var pct1 = /%/g;
	function write_num_pct(type, fmt, val){
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}
	function write_num_cm(type, fmt, val){
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}
	function write_num_exp(fmt, val){
		var o;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(o.indexOf("e") === -1) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				while(o.substr(0,2) === "0.") {
					o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
					o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
				}
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
	function write_num_f1(r, aval, sign) {
		var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
		var myn = (rr - base*den), myd = den;
		return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
	}
	function write_num_f2(r, aval, sign) {
		return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
	}
	var dec1 = /^#*0*\.(0+)/;
	var closeparen = /\).*[0#]/;
	var phone = /\(###\) ###\\?-####/;
	function hashq(str) {
		var o = "", cc;
		for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
			case 35: break;
			case 63: o+= " "; break;
			case 48: o+= "0"; break;
			default: o+= String.fromCharCode(cc);
		}
		return o;
	}
	function rnd(val, d) { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
	function dec(val, d) {
		if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
			return 0;
		}
		return Math.round((val-Math.floor(val))*Math.pow(10,d));
	}
	function carry(val, d) {
		if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
			return 1;
		}
		return 0;
	}
	function flr(val) { if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0)); return ""+Math.floor(val); }
	function write_num_flt(type, fmt, val) {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_flt('n', ffmt, val);
			return '(' + write_num_flt('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = pad0r(val,0); if(o === "0") o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
			o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+r[1]).replace(/\.$/,"."+r[1]).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", r[1].length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_flt(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(r[4].length,7);
			ff = frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", r[1], ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + r[2] + "/" + r[3];
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = pad0r(val, 0);
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			ri = dec(val, r[1].length);
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
		}
		switch(fmt) {
			case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
			case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
			case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
			default:
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	function write_num_cm2(type, fmt, val){
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}
	function write_num_pct2(type, fmt, val){
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}
	function write_num_exp2(fmt, val){
		var o;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp2(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(!o.match(/[Ee]/)) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	function write_num_int(type, fmt, val) {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_int('n', ffmt, val);
			return '(' + write_num_int('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = (""+val); if(val === 0) o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
	o = (""+val).replace(/^([^\.]+)$/,"$1."+r[1]).replace(/\.$/,"."+r[1]);
			o = o.replace(/\.(\d*)$/,function($$, $1) {
	return "." + $1 + fill("0", r[1].length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_int(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(r[4].length,7);
			ff = frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", r[1], ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + r[2] + "/" + r[3];
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = "" + val;
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
		}
		switch(fmt) {
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
			default:
				if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	return function write_num(type, fmt, val) {
		return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
	};})();
	function split_fmt(fmt) {
		var out = [];
		var in_str = false/*, cc*/;
		for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
			case 34: /* '"' */
				in_str = !in_str; break;
			case 95: case 42: case 92: /* '_' '*' '\\' */
				++i; break;
			case 59: /* ';' */
				out[out.length] = fmt.substr(j,i-j);
				j = i+1;
		}
		out[out.length] = fmt.substr(j);
		if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
		return out;
	}
	SSF._split = split_fmt;
	var abstime = /\[[HhMmSs]*\]/;
	function fmt_is_date(fmt) {
		var i = 0, /*cc = 0,*/ c = "", o = "";
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': if(isgeneral(fmt, i)) i+= 6; i++; break;
				case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) ++i; ++i; break;
				case '\\': i+=2; break;
				case '_': i+=2; break;
				case '@': ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
				case 'A':
					if(fmt.substr(i, 3) === "A/P") return true;
					if(fmt.substr(i, 5) === "AM/PM") return true;
					++i; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.match(abstime)) return true;
					break;
				case '.':
					/* falls through */
				case '0': case '#':
					while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
					break;
				case '?': while(fmt.charAt(++i) === c){/* empty */} break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
				case '(': case ')': ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
				case ' ': ++i; break;
				default: ++i; break;
			}
		}
		return false;
	}
	SSF.is_date = fmt_is_date;
	function eval_fmt(fmt, v, opts, flen) {
		var out = [], o = "", i = 0, c = "", lst='t', q, dt, j, cc;
		var hr='H';
		/* Tokenize */
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': /* General */
					if(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
					out[out.length] = {t:'G', v:'General'}; i+=7; break;
				case '"': /* Literal text */
					for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
					out[out.length] = {t:'t', v:o}; ++i; break;
				case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
					out[out.length] = {t:t, v:w}; ++i; break;
				case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
				case '@': /* Text Placeholder */
					out[out.length] = {t:'T', v:v}; ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
						if(dt==null) { dt=parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
						out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
					}
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					c = c.toLowerCase();
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
					if(v < 0) return "";
					if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
					o = c; while(++i<fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
					if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
					if(c === 'h') c = hr;
					out[out.length] = {t:c, v:o}; lst = c; break;
				case 'A':
					q={t:c, v:"A"};
					if(dt==null) dt=parse_date_code(v, opts);
					if(fmt.substr(i, 3) === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
					else if(fmt.substr(i,5) === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
					else { q.t = "t"; ++i; }
					if(dt==null && q.t === 'T') return "";
					out[out.length] = q; lst = c; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
					if(o.match(abstime)) {
						if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
						out[out.length] = {t:'Z', v:o.toLowerCase()};
						lst = o.charAt(1);
					} else if(o.indexOf("$") > -1) {
						o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
						if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
					}
					break;
				/* Numbers */
				case '.':
					if(dt != null) {
						o = c; while((c=fmt.charAt(++i)) === "0") o += c;
						out[out.length] = {t:'s', v:o}; break;
					}
					/* falls through */
				case '0': case '#':
					o = c; while((++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) || (c=='\\' && fmt.charAt(i+1) == "-" && i < fmt.length - 2 && "0#".indexOf(fmt.charAt(i+2))>-1)) o += c;
					out[out.length] = {t:'n', v:o}; break;
				case '?':
					o = c; while(fmt.charAt(++i) === c) o+=c;
					q={t:c, v:o}; out[out.length] = q; lst = c; break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
				case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
					out[out.length] = {t:'D', v:o}; break;
				case ' ': out[out.length] = {t:c, v:c}; ++i; break;
				default:
					if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxz".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
					out[out.length] = {t:'t', v:c}; ++i; break;
			}
		}
		var bt = 0, ss0 = 0, ssm;
		for(i=out.length-1, lst='t'; i >= 0; --i) {
			switch(out[i].t) {
				case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
				case 's':
					if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
					if(bt < 3) bt = 3;
				/* falls through */
				case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
				case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
				case 'X': /*if(out[i].v === "B2");*/
					break;
				case 'Z':
					if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
					if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
					if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
			}
		}
		switch(bt) {
			case 0: break;
			case 1:
	if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				if(dt.M >=  60) { dt.M = 0; ++dt.H; }
				break;
			case 2:
	if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				break;
		}
		/* replace fields */
		var nstr = "", jj;
		for(i=0; i < out.length; ++i) {
			switch(out[i].t) {
				case 't': case 'T': case ' ': case 'D': break;
				case 'X': out[i].v = ""; out[i].t = ";"; break;
				case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
	out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
					out[i].t = 't'; break;
				case 'n': case '(': case '?':
					jj = i+1;
					while(out[jj] != null && (
						(c=out[jj].t) === "?" || c === "D" ||
						((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
						(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
						(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
					)) {
						out[i].v += out[jj].v;
						out[jj] = {v:"", t:";"}; ++jj;
					}
					nstr += out[i].v;
					i = jj-1; break;
				case 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;
			}
		}
		var vv = "", myv, ostr;
		if(nstr.length > 0) {
			if(nstr.charCodeAt(0) == 40) /* '(' */ {
				myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
				ostr = write_num('(', nstr, myv);
			} else {
				myv = (v<0 && flen > 1 ? -v : v);
				ostr = write_num('n', nstr, myv);
				if(myv < 0 && out[0] && out[0].t == 't') {
					ostr = ostr.substr(1);
					out[0].v = "-" + out[0].v;
				}
			}
			jj=ostr.length-1;
			var decpt = out.length;
			for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
			var lasti=out.length;
			if(decpt === out.length && ostr.indexOf("E") === -1) {
				for(i=out.length-1; i>= 0;--i) {
					if(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;
					if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
					else if(jj < 0) out[i].v = "";
					else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
			}
			else if(decpt !== out.length && ostr.indexOf("E") === -1) {
				jj = ostr.indexOf(".")-1;
				for(i=decpt; i>= 0; --i) {
					if(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
					vv = out[i].v.substr(j+1);
					for(; j>=0; --j) {
						if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
				jj = ostr.indexOf(".")+1;
				for(i=decpt; i<out.length; ++i) {
					if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
					vv = out[i].v.substr(0,j);
					for(; j<out[i].v.length; ++j) {
						if(jj<ostr.length) vv += ostr.charAt(jj++);
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
			}
		}
		for(i=0; i<out.length; ++i) if(out[i] != null && 'n(?'.indexOf(out[i].t)>-1) {
			myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
			out[i].v = write_num(out[i].t, out[i].v, myv);
			out[i].t = 't';
		}
		var retval = "";
		for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
		return retval;
	}
	SSF._eval = eval_fmt;
	var cfregex = /\[[=<>]/;
	var cfregex2 = /\[([=<>]*)(-?\d+\.?\d*)\]/;
	function chkcond(v, rr) {
		if(rr == null) return false;
		var thresh = parseFloat(rr[2]);
		switch(rr[1]) {
			case "=":  if(v == thresh) return true; break;
			case ">":  if(v >  thresh) return true; break;
			case "<":  if(v <  thresh) return true; break;
			case "<>": if(v != thresh) return true; break;
			case ">=": if(v >= thresh) return true; break;
			case "<=": if(v <= thresh) return true; break;
		}
		return false;
	}
	function choose_fmt(f, v) {
		var fmt = split_fmt(f);
		var l = fmt.length, lat = fmt[l-1].indexOf("@");
		if(l<4 && lat>-1) --l;
		if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
		if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
		switch(fmt.length) {
			case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
			case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
			case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
			case 4: break;
		}
		var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
		if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
		if(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
			var m1 = fmt[0].match(cfregex2);
			var m2 = fmt[1].match(cfregex2);
			return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
		}
		return [l, ff];
	}
	function format(fmt,v,o) {
		if(o == null) o = {};
		var sfmt = "";
		switch(typeof fmt) {
			case "string":
				if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
				else sfmt = fmt;
				break;
			case "number":
				if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
				else sfmt = (o.table != null ? (o.table) : table_fmt)[fmt];
				break;
		}
		if(isgeneral(sfmt,0)) return general_fmt(v, o);
		var f = choose_fmt(sfmt, v);
		if(isgeneral(f[1])) return general_fmt(v, o);
		if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
		else if(v === "" || v == null) return "";
		return eval_fmt(f[1], v, o, f[0]);
	}
	SSF._table = table_fmt;
	SSF.load = function load_entry(fmt, idx) { table_fmt[idx] = fmt; };
	SSF.format = format;
	SSF.get_table = function get_table() { return table_fmt; };
	SSF.load_table = function load_table(tbl) { for(var i=0; i!=0x0188; ++i) if(tbl[i] !== undefined) SSF.load(tbl[i], i); };
	SSF.init_table = init_table;
	};
	make_ssf(SSF);
	/* map from xlml named formats to SSF TODO: localize */
	var XLMLFormatMap/*{[string]:string}*/ = ({
		"General Number": "General",
		"General Date": SSF._table[22],
		"Long Date": "dddd, mmmm dd, yyyy",
		"Medium Date": SSF._table[15],
		"Short Date": SSF._table[14],
		"Long Time": SSF._table[19],
		"Medium Time": SSF._table[18],
		"Short Time": SSF._table[20],
		"Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
		"Fixed": SSF._table[2],
		"Standard": SSF._table[4],
		"Percent": SSF._table[10],
		"Scientific": SSF._table[11],
		"Yes/No": '"Yes";"Yes";"No";@',
		"True/False": '"True";"True";"False";@',
		"On/Off": '"Yes";"Yes";"No";@'
	});

	var DO_NOT_EXPORT_CFB = true;
	/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/* vim: set ts=2: */
	/*jshint eqnull:true */

	/* [MS-CFB] v20130118 */
	var CFB = (function _CFB(){
	var exports = {};
	exports.version = '0.11.1';
	function parse(file) {
	var mver = 3; // major version
	var ssz = 512; // sector size
	var nmfs = 0; // number of mini FAT sectors
	var ndfs = 0; // number of DIFAT sectors
	var dir_start = 0; // first directory sector location
	var minifat_start = 0; // first mini FAT sector location
	var difat_start = 0; // first mini FAT sector location

	var fat_addrs = []; // locations of FAT sectors

	/* [MS-CFB] 2.2 Compound File Header */
	var blob = file.slice(0,512);
	prep_blob(blob, 0);

	/* major version */
	var mv = check_get_mver(blob);
	mver = mv[0];
	switch(mver) {
		case 3: ssz = 512; break; case 4: ssz = 4096; break;
		default: throw new Error("Major Version: Expected 3 or 4 saw " + mver);
	}

	/* reprocess header */
	if(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }
	/* Save header for final object */
	var header = file.slice(0,ssz);

	check_shifts(blob, mver);

	// Number of Directory Sectors
	var nds = blob.read_shift(4, 'i');
	if(mver === 3 && nds !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + nds);

	// Number of FAT Sectors
	//var nfs = blob.read_shift(4, 'i');
	blob.l += 4;

	// First Directory Sector Location
	dir_start = blob.read_shift(4, 'i');

	// Transaction Signature
	blob.l += 4;

	// Mini Stream Cutoff Size
	blob.chk('00100000', 'Mini Stream Cutoff Size: ');

	// First Mini FAT Sector Location
	minifat_start = blob.read_shift(4, 'i');

	// Number of Mini FAT Sectors
	nmfs = blob.read_shift(4, 'i');

	// First DIFAT sector location
	difat_start = blob.read_shift(4, 'i');

	// Number of DIFAT Sectors
	ndfs = blob.read_shift(4, 'i');

	// Grab FAT Sector Locations
	for(var q, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */
		q = blob.read_shift(4, 'i');
		if(q<0) break;
		fat_addrs[j] = q;
	}

	/** Break the file up into sectors */
	var sectors = sectorify(file, ssz);

	sleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs);

	/** Chains */
	var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);

	sector_list[dir_start].name = "!Directory";
	if(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
	sector_list[fat_addrs[0]].name = "!FAT";
	sector_list.fat_addrs = fat_addrs;
	sector_list.ssz = ssz;

	/* [MS-CFB] 2.6.1 Compound File Directory Entry */
	var files = {}, Paths = [], FileIndex = [], FullPaths = [], FullPathDir = {};
	read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex);

	build_full_paths(FileIndex, FullPathDir, FullPaths, Paths);

	var root_name = Paths.shift();
	Paths.root = root_name;

	/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
	var find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name);

	return {
		raw: {header: header, sectors: sectors},
		FileIndex: FileIndex,
		FullPaths: FullPaths,
		FullPathDir: FullPathDir,
		find: find_path
	};
	} // parse

	/* [MS-CFB] 2.2 Compound File Header -- read up to major version */
	function check_get_mver(blob) {
		// header signature 8
		blob.chk(HEADER_SIGNATURE, 'Header Signature: ');

		// clsid 16
		blob.chk(HEADER_CLSID, 'CLSID: ');

		// minor version 2
		var mver = blob.read_shift(2, 'u');

		return [blob.read_shift(2,'u'), mver];
	}
	function check_shifts(blob, mver) {
		var shift = 0x09;

		// Byte Order
		//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
		blob.l += 2;

		// Sector Shift
		switch((shift = blob.read_shift(2))) {
			case 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;
			case 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;
			default: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
		}

		// Mini Sector Shift
		blob.chk('0600', 'Mini Sector Shift: ');

		// Reserved
		blob.chk('000000000000', 'Reserved: ');
	}

	/** Break the file up into sectors */
	function sectorify(file, ssz) {
		var nsectors = Math.ceil(file.length/ssz)-1;
		var sectors = new Array(nsectors);
		for(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);
		sectors[nsectors-1] = file.slice(nsectors*ssz);
		return sectors;
	}

	/* [MS-CFB] 2.6.4 Red-Black Tree */
	function build_full_paths(FI, FPD, FP, Paths) {
		var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
		var dad = new Array(pl), q = new Array(pl);

		for(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }

		for(; j < q.length; ++j) {
			i = q[j];
			L = FI[i].L; R = FI[i].R; C = FI[i].C;
			if(dad[i] === i) {
				if(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];
				if(R !== -1 && dad[R] !== R) dad[i] = dad[R];
			}
			if(C !== -1 /*NOSTREAM*/) dad[C] = i;
			if(L !== -1) { dad[L] = dad[i]; q.push(L); }
			if(R !== -1) { dad[R] = dad[i]; q.push(R); }
		}
		for(i=1; i !== pl; ++i) if(dad[i] === i) {
			if(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];
			else if(L !== -1 && dad[L] !== L) dad[i] = dad[L];
		}

		for(i=1; i < pl; ++i) {
			if(FI[i].type === 0 /* unknown */) continue;
			j = dad[i];
			if(j === 0) FP[i] = FP[0] + "/" + FP[i];
			else while(j !== 0) {
				FP[i] = FP[j] + "/" + FP[i];
				j = dad[j];
			}
			dad[i] = 0;
		}

		FP[0] += "/";
		for(i=1; i < pl; ++i) {
			if(FI[i].type !== 2 /* stream */) FP[i] += "/";
			FPD[FP[i]] = FI[i];
		}
	}

	/* [MS-CFB] 2.6.4 */
	function make_find_path(FullPaths, Paths, FileIndex, files, root_name) {
		var UCFullPaths = new Array(FullPaths.length);
		var UCPaths = new Array(Paths.length), i;
		for(i = 0; i < FullPaths.length; ++i) UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');
		for(i = 0; i < Paths.length; ++i) UCPaths[i] = Paths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');
		return function find_path(path) {
			var k;
			if(path.charCodeAt(0) === 47 /* "/" */) { k=true; path = root_name + path; }
			else k = path.indexOf("/") !== -1;
			var UCPath = path.toUpperCase().replace(chr0,'').replace(chr1,'!');
			var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
			if(w === -1) return null;
			return k === true ? FileIndex[w] : files[Paths[w]];
		};
	}

	/** Chase down the rest of the DIFAT chain to build a comprehensive list
	    DIFAT chains by storing the next sector number as the last 32 bytes */
	function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
		var q;
		if(idx === ENDOFCHAIN) {
			if(cnt !== 0) throw new Error("DIFAT chain shorter than expected");
		} else if(idx !== -1 /*FREESECT*/) {
			var sector = sectors[idx], m = (ssz>>>2)-1;
			if(!sector) return;
			for(var i = 0; i < m; ++i) {
				if((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;
				fat_addrs.push(q);
			}
			sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);
		}
	}

	/** Follow the linked list of sectors for a given starting point */
	function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
		var sl = sectors.length;
		var buf, buf_chain;
		if(!chkd) chkd = new Array(sl);
		var modulus = ssz - 1, j, jj;
		buf = [];
		buf_chain = [];
		for(j=start; j>=0;) {
			chkd[j] = true;
			buf[buf.length] = j;
			buf_chain.push(sectors[j]);
			var addr = fat_addrs[Math.floor(j*4/ssz)];
			jj = ((j*4) & modulus);
			if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
			if(!sectors[addr]) break;
			j = __readInt32LE(sectors[addr], jj);
		}
		return {nodes: buf, data:__toBuffer([buf_chain])};
	}

	/** Chase down the sector linked lists */
	function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
		var sl = sectors.length, sector_list = new Array(sl);
		var chkd = new Array(sl), buf, buf_chain;
		var modulus = ssz - 1, i, j, k, jj;
		for(i=0; i < sl; ++i) {
			buf = [];
			k = (i + dir_start); if(k >= sl) k-=sl;
			if(chkd[k] === true) continue;
			buf_chain = [];
			for(j=k; j>=0;) {
				chkd[j] = true;
				buf[buf.length] = j;
				buf_chain.push(sectors[j]);
				var addr = fat_addrs[Math.floor(j*4/ssz)];
				jj = ((j*4) & modulus);
				if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
				if(!sectors[addr]) break;
				j = __readInt32LE(sectors[addr], jj);
			}
			sector_list[k] = {nodes: buf, data:__toBuffer([buf_chain])};
		}
		return sector_list;
	}

	/* [MS-CFB] 2.6.1 Compound File Directory Entry */
	function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {
		var blob;
		var minifat_store = 0, pl = (Paths.length?2:0);
		var sector = sector_list[dir_start].data;
		var i = 0, namelen = 0, name, o, ctime, mtime;
		for(; i < sector.length; i+= 128) {
			blob = sector.slice(i, i+128);
			prep_blob(blob, 64);
			namelen = blob.read_shift(2);
			if(namelen === 0) continue;
			name = __utf16le(blob,0,namelen-pl);
			Paths.push(name);
			o = ({
				name:  name,
				type:  blob.read_shift(1),
				color: blob.read_shift(1),
				L:     blob.read_shift(4, 'i'),
				R:     blob.read_shift(4, 'i'),
				C:     blob.read_shift(4, 'i'),
				clsid: blob.read_shift(16),
				state: blob.read_shift(4, 'i')
			});
			ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
			if(ctime !== 0) {
				o.ctime = ctime; o.ct = read_date(blob, blob.l-8);
			}
			mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
			if(mtime !== 0) {
				o.mtime = mtime; o.mt = read_date(blob, blob.l-8);
			}
			o.start = blob.read_shift(4, 'i');
			o.size = blob.read_shift(4, 'i');
			if(o.type === 5) { /* root */
				minifat_store = o.start;
				if(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
				/*minifat_size = o.size;*/
			} else if(o.size >= 4096 /* MSCSZ */) {
				o.storage = 'fat';
				if(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
				sector_list[o.start].name = o.name;
				o.content = sector_list[o.start].data.slice(0,o.size);
				prep_blob(o.content, 0);
			} else {
				o.storage = 'minifat';
				if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) {
					o.content = sector_list[minifat_store].data.slice(o.start*MSSZ,o.start*MSSZ+o.size);
					prep_blob(o.content, 0);
				}
			}
			files[name] = o;
			FileIndex.push(o);
		}
	}

	function read_date(blob, offset) {
		return new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);
	}

	var fs;
	function readFileSync(filename, options) {
		if(fs === undefined) fs = __webpack_require__(4);
		return parse(fs.readFileSync(filename), options);
	}

	function readSync(blob, options) {
		switch(options !== undefined && options.type !== undefined ? options.type : "base64") {
			case "file": return readFileSync(blob, options);
			case "base64": return parse(s2a(Base64.decode(blob)), options);
			case "binary": return parse(s2a(blob), options);
		}
		return parse(blob);
	}

	/** CFB Constants */
	var MSSZ = 64; /* Mini Sector Size = 1<<6 */
	//var MSCSZ = 4096; /* Mini Stream Cutoff Size */
	/* 2.1 Compound File Sector Numbers and Types */
	var ENDOFCHAIN = -2;
	/* 2.2 Compound File Header */
	var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
	var HEADER_CLSID = '00000000000000000000000000000000';
	var consts = {
		/* 2.1 Compund File Sector Numbers and Types */
		MAXREGSECT: -6,
		DIFSECT: -4,
		FATSECT: -3,
		ENDOFCHAIN: ENDOFCHAIN,
		FREESECT: -1,
		/* 2.2 Compound File Header */
		HEADER_SIGNATURE: HEADER_SIGNATURE,
		HEADER_MINOR_VERSION: '3e00',
		MAXREGSID: -6,
		NOSTREAM: -1,
		HEADER_CLSID: HEADER_CLSID,
		/* 2.6.1 Compound File Directory Entry */
		EntryTypes: ['unknown','storage','stream','lockbytes','property','root']
	};

	exports.read = readSync;
	exports.parse = parse;
	exports.utils = {
		ReadShift: ReadShift,
		CheckField: CheckField,
		prep_blob: prep_blob,
		bconcat: bconcat,
		consts: consts
	};

	return exports;
	})();

	if( true && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }
	function isval(x) { return x !== undefined && x !== null; }

	function keys(o) { return Object.keys(o); }

	function evert_key(obj, key) {
		var o = ([]), K = keys(obj);
		for(var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i];
		return o;
	}

	function evert(obj) {
		var o = ([]), K = keys(obj);
		for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
		return o;
	}

	function evert_num(obj) {
		var o = ([]), K = keys(obj);
		for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);
		return o;
	}

	function evert_arr(obj) {
		var o = ([]), K = keys(obj);
		for(var i = 0; i !== K.length; ++i) {
			if(o[obj[K[i]]] == null) o[obj[K[i]]] = [];
			o[obj[K[i]]].push(K[i]);
		}
		return o;
	}

	function datenum(v, date1904) {
		var epoch = v.getTime();
		if(date1904) epoch += 1462*24*60*60*1000;
		return (epoch + 2209161600000) / (24 * 60 * 60 * 1000);
	}
	function numdate(v) {
		var date = SSF.parse_date_code(v);
		var val = new Date();
		if(date == null) throw new Error("Bad Date Code: " + v);
		val.setUTCDate(date.d);
		val.setUTCMonth(date.m-1);
		val.setUTCFullYear(date.y);
		val.setUTCHours(date.H);
		val.setUTCMinutes(date.M);
		val.setUTCSeconds(date.S);
		return val;
	}

	/* ISO 8601 Duration */
	function parse_isodur(s) {
		var sec = 0, mt = 0, time = false;
		var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
		if(!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
		for(var i = 1; i != m.length; ++i) {
			if(!m[i]) continue;
			mt = 1;
			if(i > 3) time = true;
			switch(m[i].substr(m[i].length-1)) {
				case 'Y':
					throw new Error("Unsupported ISO Duration Field: " + m[i].substr(m[i].length-1));
				case 'D': mt *= 24;
					/* falls through */
				case 'H': mt *= 60;
					/* falls through */
				case 'M':
					if(!time) throw new Error("Unsupported ISO Duration Field: M");
					else mt *= 60;
					/* falls through */
				case 'S': break;
			}
			sec += mt * parseInt(m[i], 10);
		}
		return sec;
	}

	var good_pd_date = new Date('2017-02-19T19:06:09.000Z');
	var good_pd = good_pd_date.getFullYear() == 2017;
	function parseDate(str) {
		if(good_pd) return new Date(str);
		if(str instanceof Date) return str;
		var n = str.match(/\d+/g)||["2017","2","19","0","0","0"];
		return new Date(Date.UTC(+n[0], +n[1] - 1, +n[2], +n[3], +n[4], +n[5]));
	}

	function cc2str(arr) {
		var o = "";
		for(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);
		return o;
	}

	function str2cc(str) {
		var o = [];
		for(var i = 0; i != str.length; ++i) o.push(str.charCodeAt(i));
		return o;
	}

	function dup(o) {
		if(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
		if(typeof o != 'object' || o == null) return o;
		var out = {};
		for(var k in o) if(o.hasOwnProperty(k)) out[k] = dup(o[k]);
		return out;
	}

	function fill(c,l) { var o = ""; while(o.length < l) o+=c; return o; }

	/* TODO: stress test */
	function fuzzydate(s) {
		var o = new Date(s), n = new Date(NaN);
		var y = o.getYear(), m = o.getMonth(), d = o.getDate();
		if(isNaN(d)) return n;
		if(y < 0 || y > 8099) return n;
		if((m > 0 || d > 1) && y != 101) return o;
		if(s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) return o;
		if(!s.match(/[a-zA-Z]/)) return o;
		return n;
	}

	function getdatastr(data) {
		if(!data) return null;
		if(data.data) return debom(data.data);
		if(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
		if(data.asBinary) return debom(data.asBinary());
		if(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));
		return null;
	}

	function getdatabin(data) {
		if(!data) return null;
		if(data.data) return char_codes(data.data);
		if(data.asNodeBuffer && has_buf) return data.asNodeBuffer();
		if(data._data && data._data.getContent) {
			var o = data._data.getContent();
			if(typeof o == "string") return str2cc(o);
			return Array.prototype.slice.call(o);
		}
		return null;
	}

	function getdata(data) { return (data && data.name.slice(-4) === ".bin") ? getdatabin(data) : getdatastr(data); }

	/* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */
	/* OASIS does not comment on filename case sensitivity */
	function safegetzipfile(zip, file) {
		var k = keys(zip.files);
		var f = file.toLowerCase(), g = f.replace(/\//g,'\\');
		for(var i=0; i<k.length; ++i) {
			var n = k[i].toLowerCase();
			if(f == n || g == n) return zip.files[k[i]];
		}
		return null;
	}

	function getzipfile(zip, file) {
		var o = safegetzipfile(zip, file);
		if(o == null) throw new Error("Cannot find file " + file + " in zip");
		return o;
	}

	function getzipdata(zip, file, safe) {
		if(!safe) return getdata(getzipfile(zip, file));
		if(!file) return null;
		try { return getzipdata(zip, file); } catch(e) { return null; }
	}

	function getzipstr(zip, file, safe) {
		if(!safe) return getdatastr(getzipfile(zip, file));
		if(!file) return null;
		try { return getzipstr(zip, file); } catch(e) { return null; }
	}

	var _fs, jszip;
	/*global JSZip:true */
	if(typeof JSZip !== 'undefined') jszip = JSZip;
	if (true) {
		if (typeof module !== 'undefined' && module.exports) {
			if(typeof jszip === 'undefined') jszip = __webpack_require__(5);
			_fs = __webpack_require__(4);
		}
	}

	function resolve_path(path, base) {
		var result = base.split('/');
		if(base.slice(-1) != "/") result.pop(); // folder path
		var target = path.split('/');
		while (target.length !== 0) {
			var step = target.shift();
			if (step === '..') result.pop();
			else if (step !== '.') result.push(step);
		}
		return result.join('/');
	}
	var attregexg=/([^"\s?>\/]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
	var tagregex=/<[^>]*>/g;
	var nsregex=/<\w*:/, nsregex2 = /<(\/?)\w+:/;
	function parsexmltag(tag, skip_root) {
		var z = ({});
		var eq = 0, c = 0;
		for(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
		if(!skip_root) z[0] = tag.substr(0, eq);
		if(eq === tag.length) return z;
		var m = tag.match(attregexg), j=0, v="", i=0, q="", cc="", quot = 1;
		if(m) for(i = 0; i != m.length; ++i) {
			cc = m[i];
			for(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;
			q = cc.substr(0,c);
			quot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;
			v = cc.substring(c+1+quot, cc.length-quot);
			for(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;
			if(j===q.length) {
				if(q.indexOf("_") > 0) q = q.substr(0, q.indexOf("_")); // from ods
				z[q] = v;
			}
			else {
				var k = (j===5 && q.substr(0,5)==="xmlns"?"xmlns":"")+q.substr(j+1);
				if(z[k] && q.substr(j-3,3) == "ext") continue; // from ods
				z[k] = v;
			}
		}
		return z;
	}
	function strip_ns(x) { return x.replace(nsregex2, "<$1"); }

	var encodings = {
		'&quot;': '"',
		'&apos;': "'",
		'&gt;': '>',
		'&lt;': '<',
		'&amp;': '&'
	};
	var rencoding = evert(encodings);
	//var rencstr = "&<>'\"".split("");

	// TODO: CP remap (need to read file version to determine OS)
	var unescapexml = (function() {
		/* 22.4.2.4 bstr (Basic String) */
		var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/g, coderegex = /_x([\da-fA-F]{4})_/g;
		return function unescapexml(text) {
			var s = text + '';
			return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf("x")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});
		};
	})();

	var decregex=/[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
	function escapexml(text, xml){
		var s = text + '';
		return s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return "_x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + "_";});
	}
	function escapexmltag(text){ return escapexml(text).replace(/ /g,"_x0020_"); }

	var htmlcharegex = /[\u0000-\u001f]/g;
	function escapehtml(text){
		var s = text + '';
		return s.replace(decregex, function(y) { return rencoding[y]; }).replace(htmlcharegex,function(s) { return "&#x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + ";"; });
	}

	/* TODO: handle codepages */
	var xlml_fixstr = (function() {
		var entregex = /&#(\d+);/g;
		function entrepl($$,$1) { return String.fromCharCode(parseInt($1,10)); }
		return function xlml_fixstr(str) { return str.replace(entregex,entrepl); };
	})();
	var xlml_unfixstr = (function() {
		return function xlml_unfixstr(str) { return str.replace(/(\r\n|[\r\n])/g,"\&#10;"); };
	})();

	function parsexmlbool(value, tag) {
		switch(value) {
			case '1': case 'true': case 'TRUE': return true;
			/* case '0': case 'false': case 'FALSE':*/
			default: return false;
		}
	}

	var utf8read = function utf8reada(orig) {
		var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
		while (i < orig.length) {
			c = orig.charCodeAt(i++);
			if (c < 128) { out += String.fromCharCode(c); continue; }
			d = orig.charCodeAt(i++);
			if (c>191 && c<224) { out += String.fromCharCode(((c & 31) << 6) | (d & 63)); continue; }
			e = orig.charCodeAt(i++);
			if (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }
			f = orig.charCodeAt(i++);
			w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;
			out += String.fromCharCode(0xD800 + ((w>>>10)&1023));
			out += String.fromCharCode(0xDC00 + (w&1023));
		}
		return out;
	};


	if(has_buf) {
		var utf8readb = function utf8readb(data) {
			var out = new Buffer(2*data.length), w, i, j = 1, k = 0, ww=0, c;
			for(i = 0; i < data.length; i+=j) {
				j = 1;
				if((c=data.charCodeAt(i)) < 128) w = c;
				else if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }
				else if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }
				else { j = 4;
					w = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);
					w -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);
				}
				if(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }
				out[k++] = w%256; out[k++] = w>>>8;
			}
			out.length = k;
			return out.toString('ucs2');
		};
		var corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
		if(utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;
		// $FlowIgnore
		var utf8readc = function utf8readc(data) { return Buffer(data, 'binary').toString('utf8'); };
		if(utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;
	}

	// matches <foo>...</foo> extracts content
	var matchtag = (function() {
		var mtcache = ({});
		return function matchtag(f,g) {
			var t = f+"|"+(g||"");
			if(mtcache[t]) return mtcache[t];
			return (mtcache[t] = new RegExp('<(?:\\w+:)?'+f+'(?: xml:space="preserve")?(?:[^>]*)>([^\u2603]*)</(?:\\w+:)?'+f+'>',((g||""))));
		};
	})();

	var vtregex = (function(){ var vt_cache = {};
		return function vt_regex(bt) {
			if(vt_cache[bt] !== undefined) return vt_cache[bt];
			return (vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">(.*?)</(?:vt:)?" + bt + ">", 'g') );
	};})();
	var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>(.*)</;
	function parseVector(data) {
		var h = parsexmltag(data);

		var matches = data.match(vtregex(h.baseType))||[];
		if(matches.length != h.size) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
		var res = [];
		matches.forEach(function(x) {
			var v = x.replace(vtvregex,"").match(vtmregex);
			res.push({v:utf8read(v[2]), t:v[1]});
		});
		return res;
	}

	var wtregex = /(^\s|\s$|\n)/;
	function writetag(f,g) {return '<' + f + (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f + '>';}

	function wxt_helper(h) { return keys(h).map(function(k) { return " " + k + '="' + h[k] + '"';}).join(""); }
	function writextag(f,g,h) { return '<' + f + (isval(h) ? wxt_helper(h) : "") + (isval(g) ? (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';}

	function write_w3cdtf(d, t) { try { return d.toISOString().replace(/\.\d*/,""); } catch(e) { if(t) throw e; } return ""; }

	function write_vt(s) {
		switch(typeof s) {
			case 'string': return writextag('vt:lpwstr', s);
			case 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', String(s));
			case 'boolean': return writextag('vt:bool',s?'true':'false');
		}
		if(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));
		throw new Error("Unable to serialize " + s);
	}

	var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
	var XMLNS = ({
		'dc': 'http://purl.org/dc/elements/1.1/',
		'dcterms': 'http://purl.org/dc/terms/',
		'dcmitype': 'http://purl.org/dc/dcmitype/',
		'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
		'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
		'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
		'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
		'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
		'xsd': 'http://www.w3.org/2001/XMLSchema'
	});

	XMLNS.main = [
		'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
		'http://purl.oclc.org/ooxml/spreadsheetml/main',
		'http://schemas.microsoft.com/office/excel/2006/main',
		'http://schemas.microsoft.com/office/excel/2006/2'
	];

	var XLMLNS = ({
		'o':    'urn:schemas-microsoft-com:office:office',
		'x':    'urn:schemas-microsoft-com:office:excel',
		'ss':   'urn:schemas-microsoft-com:office:spreadsheet',
		'dt':   'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',
		'mv':   'http://macVmlSchemaUri',
		'v':    'urn:schemas-microsoft-com:vml',
		'html': 'http://www.w3.org/TR/REC-html40'
	});
	function read_double_le(b, idx) {
		var s = 1 - 2 * (b[idx + 7] >>> 7);
		var e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);
		var m = (b[idx+6]&0x0f);
		for(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
		if(e == 0x7ff) return m == 0 ? s * Infinity : NaN;
		if(e == 0) e = -1022;
		else { e -= 1023; m += Math.pow(2,52); }
		return s * Math.pow(2, e - 52) * m;
	}

	function write_double_le(b, v, idx) {
		var bs = ((v < 0 || 1/v == -Infinity) ? 1 : 0) << 7, e = 0, m = 0;
		var av = bs ? -v : v;
		if(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }
		else {
			e = Math.floor(Math.log(av) * Math.LOG2E);
			m = v * Math.pow(2, 52 - e);
			if(e <= -1023 && (!isFinite(m) || m < Math.pow(2,52))) { e = -1022; }
			else { m -= Math.pow(2,52); e+=1023; }
		}
		for(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;
		b[idx + 6] = ((e & 0x0f) << 4) | m & 0xf;
		b[idx + 7] = (e >> 4) | bs;
	}

	var __toBuffer, ___toBuffer;
	__toBuffer = ___toBuffer = function toBuffer_(bufs) { var x = []; for(var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]); } return x; };
	var __utf16le, ___utf16le;
	__utf16le = ___utf16le = function utf16le_(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(""); };
	var __hexlify, ___hexlify;
	__hexlify = ___hexlify = function hexlify_(b,s,l) { return b.slice(s,(s+l)).map(function(x){return (x<16?"0":"") + x.toString(16);}).join(""); };
	var __utf8, ___utf8;
	__utf8 = ___utf8 = function(b,s,e) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(""); };
	var __lpstr, ___lpstr;
	__lpstr = ___lpstr = function lpstr_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
	var __lpwstr, ___lpwstr;
	__lpwstr = ___lpwstr = function lpwstr_(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
	var __lpp4, ___lpp4;
	__lpp4 = ___lpp4 = function lpp4_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : "";};
	var __8lpp4, ___8lpp4;
	__8lpp4 = ___8lpp4 = function lpp4_8(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : "";};
	var __double, ___double;
	__double = ___double = function(b, idx) { return read_double_le(b, idx);};

	var is_buf = function is_buf_a(a) { return Array.isArray(a); };
	if(has_buf) {
		__utf16le = function utf16le_b(b,s,e) { if(!Buffer.isBuffer(b)) return ___utf16le(b,s,e); return b.toString('utf16le',s,e); };
		__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };
		__lpstr = function lpstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
		__lpwstr = function lpwstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};
		__lpp4 = function lpp4_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};
		__8lpp4 = function lpp4_8b(b,i) { if(!Buffer.isBuffer(b)) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};
		__utf8 = function utf8_b(b, s,e) { return b.toString('utf8',s,e); };
		__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);};
		bconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs); };
		__double = function double_(b,i) { if(Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b,i); };
		is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a); };
	}

	/* from js-xls */
	if(typeof cptable !== 'undefined') {
		__utf16le = function(b,s,e) { return cptable.utils.decode(1200, b.slice(s,e)); };
		__utf8 = function(b,s,e) { return cptable.utils.decode(65001, b.slice(s,e)); };
		__lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : "";};
		__lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : "";};
		__lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len)) : "";};
		__8lpp4 = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(65001, b.slice(i+4,i+4+len)) : "";};
	}

	var __readUInt8 = function(b, idx) { return b[idx]; };
	var __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };
	var __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };
	var __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };
	var __readInt32LE = function(b, idx) { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };

	var ___unhexlify = function(s) { return s.match(/../g).map(function(x) { return parseInt(x,16);}); };
	var __unhexlify = typeof Buffer !== "undefined" ? function(s) { return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s); } : ___unhexlify;

	function ReadShift(size, t) {
		var o="", oI, oR, oo=[], w, vv, i, loc;
		switch(t) {
			case 'dbcs':
				loc = this.l;
				if(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString("utf16le");
				else for(i = 0; i != size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }
				size *= 2;
				break;

			case 'utf8': o = __utf8(this, this.l, this.l + size); break;
			case 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;

			case 'wstr':
				if(typeof cptable !== 'undefined') o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l+2*size));
				else return ReadShift.call(this, size, 'dbcs');
				size = 2 * size; break;

			/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
			case 'lpstr': o = __lpstr(this, this.l); size = 5 + o.length; break;
			/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
			case 'lpwstr': o = __lpwstr(this, this.l); size = 5 + o.length; if(o[o.length-1] == '\u0000') size += 2; break;
			/* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
			case 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;
			/* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
			case '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;

			case 'cstr': size = 0; o = "";
				while((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));
				o = oo.join(""); break;
			case '_wstr': size = 0; o = "";
				while((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}
				size+=2; o = oo.join(""); break;

			/* sbcs and dbcs support continue records in the SST way TODO codepages */
			case 'dbcs-cont': o = ""; loc = this.l;
				for(i = 0; i != size; ++i) {
					if(this.lens && this.lens.indexOf(loc) !== -1) {
						w = __readUInt8(this, loc);
						this.l = loc + 1;
						vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
						return oo.join("") + vv;
					}
					oo.push(_getchar(__readUInt16LE(this, loc)));
					loc+=2;
				} o = oo.join(""); size *= 2; break;

			case 'sbcs-cont': o = ""; loc = this.l;
				for(i = 0; i != size; ++i) {
					if(this.lens && this.lens.indexOf(loc) !== -1) {
						w = __readUInt8(this, loc);
						this.l = loc + 1;
						vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
						return oo.join("") + vv;
					}
					oo.push(_getchar(__readUInt8(this, loc)));
					loc+=1;
				} o = oo.join(""); break;

			default:
		switch(size) {
			case 1: oI = __readUInt8(this, this.l); this.l++; return oI;
			case 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;
			case 4:
				if(t === 'i' || (this[this.l+3] & 0x80)===0) { oI = __readInt32LE(this, this.l); this.l += 4; return oI; }
				else { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;
			case 8: if(t === 'f') { oR = __double(this, this.l); this.l += 8; return oR; }
			/* falls through */
			case 16: o = __hexlify(this, this.l, size); break;
		}}
		this.l+=size; return o;
	}

	var __writeUInt16LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };
	var __writeUInt32LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };
	var __writeInt32LE  = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };

	function WriteShift(t, val, f) {
		var size = 0, i = 0;
		if(f === 'dbcs') {
	for(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
			size = 2 * val.length;
		} else if(f === 'sbcs') {
	for(i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 0xFF;
			size = val.length;
		} else  switch(t) {
			case  1: size = 1; this[this.l] = val&0xFF; break;
			case  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;
			case  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;
			case  4: size = 4; __writeUInt32LE(this, val, this.l); break;
			case  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }
			/* falls through */
			case 16: break;
			case -4: size = 4; __writeInt32LE(this, val, this.l); break;
		}
		this.l += size; return this;
	}

	function CheckField(hexstr, fld) {
		var m = __hexlify(this,this.l,hexstr.length>>1);
		if(m !== hexstr) throw fld + 'Expected ' + hexstr + ' saw ' + m;
		this.l += hexstr.length>>1;
	}

	function prep_blob(blob, pos) {
		blob.l = pos;
		blob.read_shift = ReadShift;
		blob.chk = CheckField;
		blob.write_shift = WriteShift;
	}

	function parsenoop(blob, length) { blob.l += length; }
	function parsenooplog(blob, length) { if(typeof console != 'undefined') console.log(blob.slice(blob.l, blob.l + length)); blob.l += length; }

	function writenoop(blob, length) { blob.l += length; }

	function new_buf(sz) {
		var o = new_raw_buf(sz);
		prep_blob(o, 0);
		return o;
	}

	/* [MS-XLSB] 2.1.4 Record */
	function recordhopper(data, cb, opts) {
		if(!data) return;
		var tmpbyte, cntbyte, length;
		prep_blob(data, data.l || 0);
		var L = data.length, RT = 0, tgt = 0;
		while(data.l < L) {
			RT = data.read_shift(1);
			if(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);
			var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
			tmpbyte = data.read_shift(1);
			length = tmpbyte & 0x7F;
			for(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);
			tgt = data.l + length;
			var d = R.f(data, length, opts);
			data.l = tgt;
			if(cb(d, R.n, RT)) return;
		}
	}

	/* control buffer usage for fixed-length buffers */
	function buf_array() {
		var bufs = [], blksz = 2048;
		var newblk = function ba_newblk(sz) {
			var o = (new_buf(sz));
			prep_blob(o, 0);
			return o;
		};

		var curbuf = newblk(blksz);

		var endbuf = function ba_endbuf() {
			if(!curbuf) return;
			if(curbuf.length > curbuf.l) curbuf = curbuf.slice(0, curbuf.l);
			if(curbuf.length > 0) bufs.push(curbuf);
			curbuf = null;
		};

		var next = function ba_next(sz) {
			if(curbuf && sz < curbuf.length - curbuf.l) return curbuf;
			endbuf();
			return (curbuf = newblk(Math.max(sz+1, blksz)));
		};

		var end = function ba_end() {
			endbuf();
			return __toBuffer([bufs]);
		};

		var push = function ba_push(buf) { endbuf(); curbuf = buf; next(blksz); };

		return ({ next:next, push:push, end:end, _bufs:bufs });
	}

	function write_record(ba, type, payload, length) {
		var t = Number(evert_RE[type]), l;
		if(isNaN(t)) return; // TODO: throw something here?
		if(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;
		l = 1 + (t >= 0x80 ? 1 : 0) + 1 + length;
		if(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;
		var o = ba.next(l);
		if(t <= 0x7F) o.write_shift(1, t);
		else {
			o.write_shift(1, (t & 0x7F) + 0x80);
			o.write_shift(1, (t >> 7));
		}
		for(var i = 0; i != 4; ++i) {
			if(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }
			else { o.write_shift(1, length); break; }
		}
		if(length > 0 && is_buf(payload)) ba.push(payload);
	}
	/* XLS ranges enforced */
	function shift_cell_xls(cell, tgt, opts) {
		var out = dup(cell);
		if(tgt.s) {
			if(out.cRel) out.c += tgt.s.c;
			if(out.rRel) out.r += tgt.s.r;
		} else {
			out.c += tgt.c;
			out.r += tgt.r;
		}
		if(!opts || opts.biff < 12) {
			while(out.c >= 0x100) out.c -= 0x100;
			while(out.r >= 0x10000) out.r -= 0x10000;
		}
		return out;
	}

	function shift_range_xls(cell, range, opts) {
		var out = dup(cell);
		out.s = shift_cell_xls(out.s, range.s, opts);
		out.e = shift_cell_xls(out.e, range.s, opts);
		return out;
	}

	function encode_cell_xls(c) {
		var s = encode_cell(c);
		if(c.cRel === 0) s = fix_col(s);
		if(c.rRel === 0) s = fix_row(s);
		return s;
	}

	function encode_range_xls(r, opts) {
		if(r.s.r == 0 && !r.s.rRel) {
			if(r.e.r == opts.biff >= 12 ? 0xFFFFF :  true && !r.e.rRel) {
				return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
			}
		}
		if(r.s.c == 0 && !r.s.cRel) {
			if(r.e.c == opts.biff >= 12 ? 0xFFFF :  true && !r.e.cRel) {
				return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
			}
		}
		return encode_cell_xls(r.s) + ":" + encode_cell_xls(r.e);
	}
	var OFFCRYPTO = {};

	var make_offcrypto = function(O, _crypto) {
		var crypto;
		if(typeof _crypto !== 'undefined') crypto = _crypto;
		else if(true) {
			try { crypto = __webpack_require__(6); }
			catch(e) { crypto = null; }
		}

		O.rc4 = function(key, data) {
			var S = new Array(256);
			var c = 0, i = 0, j = 0, t = 0;
			for(i = 0; i != 256; ++i) S[i] = i;
			for(i = 0; i != 256; ++i) {
				j = (j + S[i] + (key[i%key.length]).charCodeAt(0))&255;
				t = S[i]; S[i] = S[j]; S[j] = t;
			}
			// $FlowIgnore
			i = j = 0; var out = Buffer(data.length);
			for(c = 0; c != data.length; ++c) {
				i = (i + 1)&255;
				j = (j + S[i])%256;
				t = S[i]; S[i] = S[j]; S[j] = t;
				out[c] = (data[c] ^ S[(S[i]+S[j])&255]);
			}
			return out;
		};

		O.md5 = function(hex) {
			if(!crypto) throw new Error("Unsupported crypto");
			return crypto.createHash('md5').update(hex).digest('hex');
		};
	};
	/*global crypto:true */
	make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : undefined);

	function decode_row(rowstr) { return parseInt(unfix_row(rowstr),10) - 1; }
	function encode_row(row) { return "" + (row + 1); }
	function fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\d+)$/,"$1$$$2"); }
	function unfix_row(cstr) { return cstr.replace(/\$(\d+)$/,"$1"); }

	function decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }
	function encode_col(col) { var s=""; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }
	function fix_col(cstr) { return cstr.replace(/^([A-Z])/,"$$$1"); }
	function unfix_col(cstr) { return cstr.replace(/^\$([A-Z])/,"$1"); }

	function split_cell(cstr) { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(","); }
	function decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
	function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }
	function fix_cell(cstr) { return fix_col(fix_row(cstr)); }
	function unfix_cell(cstr) { return unfix_col(unfix_row(cstr)); }
	function decode_range(range) { var x =range.split(":").map(decode_cell); return {s:x[0],e:x[x.length-1]}; }
	function encode_range(cs,ce) {
		if(typeof ce === 'undefined' || typeof ce === 'number') {
	return encode_range(cs.s, cs.e);
		}
	if(typeof cs !== 'string') cs = encode_cell((cs));
		if(typeof ce !== 'string') ce = encode_cell((ce));
	return cs == ce ? cs : cs + ":" + ce;
	}

	function safe_decode_range(range) {
		var o = {s:{c:0,r:0},e:{c:0,r:0}};
		var idx = 0, i = 0, cc = 0;
		var len = range.length;
		for(idx = 0; i < len; ++i) {
			if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
			idx = 26*idx + cc;
		}
		o.s.c = --idx;

		for(idx = 0; i < len; ++i) {
			if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
			idx = 10*idx + cc;
		}
		o.s.r = --idx;

		if(i === len || range.charCodeAt(++i) === 58) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }

		for(idx = 0; i != len; ++i) {
			if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
			idx = 26*idx + cc;
		}
		o.e.c = --idx;

		for(idx = 0; i != len; ++i) {
			if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
			idx = 10*idx + cc;
		}
		o.e.r = --idx;
		return o;
	}

	function safe_format_cell(cell, v) {
		var q = (cell.t == 'd' && v instanceof Date);
		if(cell.z != null) try { return (cell.w = SSF.format(cell.z, q ? datenum(v) : v)); } catch(e) { }
		try { return (cell.w = SSF.format((cell.XF||{}).ifmt||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }
	}

	function format_cell(cell, v, o) {
		if(cell == null || cell.t == null || cell.t == 'z') return "";
		if(cell.w !== undefined) return cell.w;
		if(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
		if(v == undefined) return safe_format_cell(cell, cell.v, o);
		return safe_format_cell(cell, v, o);
	}

	function sheet_to_workbook(sheet, opts) {
		var n = opts && opts.sheet ? opts.sheet : "Sheet1";
		var sheets = {}; sheets[n] = sheet;
		return { SheetNames: [n], Sheets: sheets };
	}

	function aoa_to_sheet(data, opts) {
		var o = opts || {};
		if(DENSE != null && o.dense == null) o.dense = DENSE;
		var ws = o.dense ? ([]) : ({});
		var range = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}});
		for(var R = 0; R != data.length; ++R) {
			for(var C = 0; C != data[R].length; ++C) {
				if(typeof data[R][C] === 'undefined') continue;
				var cell = ({v: data[R][C] });
				if(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }
				if(range.s.r > R) range.s.r = R;
				if(range.s.c > C) range.s.c = C;
				if(range.e.r < R) range.e.r = R;
				if(range.e.c < C) range.e.c = C;
				if(cell.v === null) { if(cell.f) cell.t = 'n'; else if(!o.cellStubs) continue; else cell.t = 'z'; }
				else if(typeof cell.v === 'number') cell.t = 'n';
				else if(typeof cell.v === 'boolean') cell.t = 'b';
				else if(cell.v instanceof Date) {
					cell.z = o.dateNF || SSF._table[14];
					if(o.cellDates) { cell.t = 'd'; cell.w = SSF.format(cell.z, datenum(cell.v)); }
					else { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF.format(cell.z, cell.v); }
				}
				else cell.t = 's';
				if(o.dense) {
					if(!ws[R]) ws[R] = [];
					ws[R][C] = cell;
				} else {
					var cell_ref = encode_cell(({c:C,r:R}));
					ws[cell_ref] = cell;
				}
			}
		}
		if(range.s.c < 10000000) ws['!ref'] = encode_range(range);
		return ws;
	}

	function write_UInt32LE(x, o) {
		if(!o) o = new_buf(4);
		o.write_shift(4, x);
		return o;
	}

	/* [MS-XLSB] 2.5.168 */
	function parse_XLWideString(data) {
		var cchCharacters = data.read_shift(4);
		return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
	}
	function write_XLWideString(data, o) {
		var _null = false; if(o == null) { _null = true; o = new_buf(4+2*data.length); }
		o.write_shift(4, data.length);
		if(data.length > 0) o.write_shift(0, data, 'dbcs');
		return _null ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.5.143 */
	function parse_StrRun(data, length) {
		return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
	}
	function write_StrRun(run, o) {
		if(!o) o = new_buf(4);
		o.write_shift(2, run.ich || 0);
		o.write_shift(2, run.ifnt || 0);
		return o;
	}

	/* [MS-XLSB] 2.1.7.121 */
	function parse_RichStr(data, length) {
		var start = data.l;
		var flags = data.read_shift(1);
		var str = parse_XLWideString(data);
		var rgsStrRun = [];
		var z = ({ t: str, h: str });
		if((flags & 1) !== 0) { /* fRichStr */
			/* TODO: formatted string */
			var dwSizeStrRun = data.read_shift(4);
			for(var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
			z.r = rgsStrRun;
		}
		else z.r = [{ich:0, ifnt:0}];
		//if((flags & 2) !== 0) { /* fExtStr */
		//	/* TODO: phonetic string */
		//}
		data.l = start + length;
		return z;
	}
	function write_RichStr(str, o) {
		/* TODO: formatted string */
		var _null = false; if(o == null) { _null = true; o = new_buf(15+4*str.t.length); }
		o.write_shift(1,0);
		write_XLWideString(str.t, o);
		return _null ? o.slice(0, o.l) : o;
	}
	/* [MS-XLSB] 2.4.325 BrtCommentText (RichStr w/1 run) */
	var parse_BrtCommentText = parse_RichStr;
	function write_BrtCommentText(str, o) {
		/* TODO: formatted string */
		var _null = false; if(o == null) { _null = true; o = new_buf(23+4*str.t.length); }
		o.write_shift(1,1);
		write_XLWideString(str.t, o);
		o.write_shift(4,1);
		write_StrRun({ich:0,ifnt:0}, o);
		return _null ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.5.9 */
	function parse_XLSBCell(data) {
		var col = data.read_shift(4);
		var iStyleRef = data.read_shift(2);
		iStyleRef += data.read_shift(1) <<16;
		var fPhShow = data.read_shift(1);
		return { c:col, iStyleRef: iStyleRef };
	}
	function write_XLSBCell(cell, o) {
		if(o == null) o = new_buf(8);
		o.write_shift(-4, cell.c);
		o.write_shift(3, cell.iStyleRef || cell.s);
		o.write_shift(1, 0); /* fPhShow */
		return o;
	}


	/* [MS-XLSB] 2.5.21 */
	var parse_XLSBCodeName = parse_XLWideString;
	var write_XLSBCodeName = write_XLWideString;

	/* [MS-XLSB] 2.5.166 */
	function parse_XLNullableWideString(data) {
		var cchCharacters = data.read_shift(4);
		return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
	}
	function write_XLNullableWideString(data, o) {
		var _null = false; if(o == null) { _null = true; o = new_buf(127); }
		o.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);
		if(data.length > 0) o.write_shift(0, data, 'dbcs');
		return _null ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.5.165 */
	var parse_XLNameWideString = parse_XLWideString;
	var write_XLNameWideString = write_XLWideString;

	/* [MS-XLSB] 2.5.114 */
	var parse_RelID = parse_XLNullableWideString;
	var write_RelID = write_XLNullableWideString;


	/* [MS-XLSB] 2.5.122 */
	/* [MS-XLS] 2.5.217 */
	function parse_RkNumber(data) {
		var b = data.slice(data.l, data.l+4);
		var fX100 = b[0] & 1, fInt = b[0] & 2;
		data.l+=4;
		b[0] &= 0xFC; // b[0] &= ~3;
		var RK = fInt === 0 ? __double([0,0,0,0,b[0],b[1],b[2],b[3]],0) : __readInt32LE(b,0)>>2;
		return fX100 ? RK/100 : RK;
	}
	function write_RkNumber(data, o) {
		if(o == null) o = new_buf(4);
		var fX100 = 0, fInt = 0, d100 = data * 100;
		if(data == (data | 0) && data >= -(1<<29) && data < (1 << 29)) { fInt = 1; }
		else if(d100 == (d100 | 0) && d100 >= -(1<<29) && d100 < (1 << 29)) { fInt = 1; fX100 = 1; }
		if(fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
		else throw new Error("unsupported RkNumber " + data); // TODO
	}


	/* [MS-XLSB] 2.5.117 RfX */
	function parse_RfX(data) {
		var cell = ({s: {}, e: {}});
		cell.s.r = data.read_shift(4);
		cell.e.r = data.read_shift(4);
		cell.s.c = data.read_shift(4);
		cell.e.c = data.read_shift(4);
		return cell;
	}

	function write_RfX(r, o) {
		if(!o) o = new_buf(16);
		o.write_shift(4, r.s.r);
		o.write_shift(4, r.e.r);
		o.write_shift(4, r.s.c);
		o.write_shift(4, r.e.c);
		return o;
	}

	/* [MS-XLSB] 2.5.153 UncheckedRfX */
	var parse_UncheckedRfX = parse_RfX;
	var write_UncheckedRfX = write_RfX;

	/* [MS-XLSB] 2.5.171 */
	/* [MS-XLS] 2.5.342 */
	/* TODO: error checking, NaN and Infinity values are not valid Xnum */
	function parse_Xnum(data, length) { return data.read_shift(8, 'f'); }
	function write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, data, 'f'); }

	/* [MS-XLSB] 2.5.198.2 */
	var BErr = {
	0x00: "#NULL!",
	0x07: "#DIV/0!",
	0x0F: "#VALUE!",
	0x17: "#REF!",
	0x1D: "#NAME?",
	0x24: "#NUM!",
	0x2A: "#N/A",
	0x2B: "#GETTING_DATA",
	0xFF: "#WTF?"
	};
	var RBErr = evert_num(BErr);

	/* [MS-XLSB] 2.4.321 BrtColor */
	function parse_BrtColor(data, length) {
		var out = {};
		var d = data.read_shift(1);

		var fValidRGB = d & 1;
		var xColorType = d >>> 1;

		var index = data.read_shift(1);
		var nTS = data.read_shift(2, 'i');
		var bR = data.read_shift(1);
		var bG = data.read_shift(1);
		var bB = data.read_shift(1);
		var bAlpha = data.read_shift(1);

		switch(xColorType) {
			case 0: out.auto = 1; break;
			case 1:
				out.index = index;
				var icv = XLSIcv[index];
				/* automatic pseudo index 81 */
				if(icv) out.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
				break;
			case 2:
				/* if(!fValidRGB) throw new Error("invalid"); */
				out.rgb = bR.toString(16) + bG.toString(16) + bB.toString(16);
				break;
			case 3: out.theme = index; break;
		}
		if(nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;

		return out;
	}
	function write_BrtColor(color, o) {
		if(!o) o = new_buf(8);
		if(!color||color.auto) { o.write_shift(4, 0); o.write_shift(4, 0); return o; }
		if(color.index) {
			o.write_shift(1, 0x02);
			o.write_shift(1, color.index);
		} else if(color.theme) {
			o.write_shift(1, 0x06);
			o.write_shift(1, color.theme);
		} else {
			o.write_shift(1, 0x05);
			o.write_shift(1, 0);
		}
		var nTS = color.tint || 0;
		if(nTS > 0) nTS *= 32767;
		else if(nTS < 0) nTS *= 32768;
		o.write_shift(2, nTS);
		if(!color.rgb) {
			o.write_shift(2, 0);
			o.write_shift(1, 0);
			o.write_shift(1, 0);
		} else {
			var rgb = (color.rgb || 'FFFFFF');
			o.write_shift(1, parseInt(rgb.substr(0,2),16));
			o.write_shift(1, parseInt(rgb.substr(2,2),16));
			o.write_shift(1, parseInt(rgb.substr(4,2),16));
			o.write_shift(1, 0xFF);
		}
		return o;
	}

	/* [MS-XLSB] 2.5.52 */
	function parse_FontFlags(data, length, opts) {
		var d = data.read_shift(1);
		data.l++;
		var out = {
			/* fBold: d & 0x01 */
			fItalic: d & 0x02,
			/* fUnderline: d & 0x04 */
			fStrikeout: d & 0x08,
			fOutline: d & 0x10,
			fShadow: d & 0x20,
			fCondense: d & 0x40,
			fExtend: d & 0x80
		};
		return out;
	}
	function write_FontFlags(font, o) {
		if(!o) o = new_buf(2);
		var grbit =
			(font.italic   ? 0x02 : 0) |
			(font.strike   ? 0x08 : 0) |
			(font.outline  ? 0x10 : 0) |
			(font.shadow   ? 0x20 : 0) |
			(font.condense ? 0x40 : 0) |
			(font.extend   ? 0x80 : 0);
		o.write_shift(1, grbit);
		o.write_shift(1, 0);
		return o;
	}

	/* [MS-OLEPS] 2.2 PropertyType */
	{
		//var VT_EMPTY    = 0x0000;
		//var VT_NULL     = 0x0001;
		var VT_I2       = 0x0002;
		var VT_I4       = 0x0003;
		//var VT_R4       = 0x0004;
		//var VT_R8       = 0x0005;
		//var VT_CY       = 0x0006;
		//var VT_DATE     = 0x0007;
		//var VT_BSTR     = 0x0008;
		//var VT_ERROR    = 0x000A;
		var VT_BOOL     = 0x000B;
		var VT_VARIANT  = 0x000C;
		//var VT_DECIMAL  = 0x000E;
		//var VT_I1       = 0x0010;
		//var VT_UI1      = 0x0011;
		//var VT_UI2      = 0x0012;
		var VT_UI4      = 0x0013;
		//var VT_I8       = 0x0014;
		var VT_UI8      = 0x0015;
		//var VT_INT      = 0x0016;
		//var VT_UINT     = 0x0017;
		var VT_LPSTR    = 0x001E;
		//var VT_LPWSTR   = 0x001F;
		var VT_FILETIME = 0x0040;
		//var VT_BLOB     = 0x0041;
		//var VT_STREAM   = 0x0042;
		//var VT_STORAGE  = 0x0043;
		//var VT_STREAMED_Object  = 0x0044;
		//var VT_STORED_Object    = 0x0045;
		//var VT_BLOB_Object      = 0x0046;
		var VT_CF       = 0x0047;
		//var VT_CLSID    = 0x0048;
		//var VT_VERSIONED_STREAM = 0x0049;
		var VT_VECTOR   = 0x1000;
		//var VT_ARRAY    = 0x2000;

		var VT_STRING   = 0x0050; // 2.3.3.1.11 VtString
		var VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString
		var VT_CUSTOM   = [VT_STRING, VT_USTR];
	}

	/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
	var DocSummaryPIDDSI = {
	0x01: { n: 'CodePage', t: VT_I2 },
	0x02: { n: 'Category', t: VT_STRING },
	0x03: { n: 'PresentationFormat', t: VT_STRING },
	0x04: { n: 'ByteCount', t: VT_I4 },
	0x05: { n: 'LineCount', t: VT_I4 },
	0x06: { n: 'ParagraphCount', t: VT_I4 },
	0x07: { n: 'SlideCount', t: VT_I4 },
	0x08: { n: 'NoteCount', t: VT_I4 },
	0x09: { n: 'HiddenCount', t: VT_I4 },
	0x0a: { n: 'MultimediaClipCount', t: VT_I4 },
	0x0b: { n: 'Scale', t: VT_BOOL },
	0x0c: { n: 'HeadingPair', t: VT_VECTOR | VT_VARIANT },
	0x0d: { n: 'DocParts', t: VT_VECTOR | VT_LPSTR },
	0x0e: { n: 'Manager', t: VT_STRING },
	0x0f: { n: 'Company', t: VT_STRING },
	0x10: { n: 'LinksDirty', t: VT_BOOL },
	0x11: { n: 'CharacterCount', t: VT_I4 },
	0x13: { n: 'SharedDoc', t: VT_BOOL },
	0x16: { n: 'HLinksChanged', t: VT_BOOL },
	0x17: { n: 'AppVersion', t: VT_I4, p: 'version' },
	0x1A: { n: 'ContentType', t: VT_STRING },
	0x1B: { n: 'ContentStatus', t: VT_STRING },
	0x1C: { n: 'Language', t: VT_STRING },
	0x1D: { n: 'Version', t: VT_STRING },
	0xFF: {}
	};

	/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
	var SummaryPIDSI = {
	0x01: { n: 'CodePage', t: VT_I2 },
	0x02: { n: 'Title', t: VT_STRING },
	0x03: { n: 'Subject', t: VT_STRING },
	0x04: { n: 'Author', t: VT_STRING },
	0x05: { n: 'Keywords', t: VT_STRING },
	0x06: { n: 'Comments', t: VT_STRING },
	0x07: { n: 'Template', t: VT_STRING },
	0x08: { n: 'LastAuthor', t: VT_STRING },
	0x09: { n: 'RevNumber', t: VT_STRING },
	0x0A: { n: 'EditTime', t: VT_FILETIME },
	0x0B: { n: 'LastPrinted', t: VT_FILETIME },
	0x0C: { n: 'CreatedDate', t: VT_FILETIME },
	0x0D: { n: 'ModifiedDate', t: VT_FILETIME },
	0x0E: { n: 'PageCount', t: VT_I4 },
	0x0F: { n: 'WordCount', t: VT_I4 },
	0x10: { n: 'CharCount', t: VT_I4 },
	0x11: { n: 'Thumbnail', t: VT_CF },
	0x12: { n: 'ApplicationName', t: VT_LPSTR },
	0x13: { n: 'DocumentSecurity', t: VT_I4 },
	0xFF: {}
	};

	/* [MS-OLEPS] 2.18 */
	var SpecialProperties = {
	0x80000000: { n: 'Locale', t: VT_UI4 },
	0x80000003: { n: 'Behavior', t: VT_UI4 },
	0x72627262: {}
	};

	(function() {
		for(var y in SpecialProperties) if(SpecialProperties.hasOwnProperty(y))
		DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];
	})();

	/* [MS-XLS] 2.4.63 Country/Region codes */
	var CountryEnum = {
	0x0001: "US", // United States
	0x0002: "CA", // Canada
	0x0003: "", // Latin America (except Brazil)
	0x0007: "RU", // Russia
	0x0014: "EG", // Egypt
	0x001E: "GR", // Greece
	0x001F: "NL", // Netherlands
	0x0020: "BE", // Belgium
	0x0021: "FR", // France
	0x0022: "ES", // Spain
	0x0024: "HU", // Hungary
	0x0027: "IT", // Italy
	0x0029: "CH", // Switzerland
	0x002B: "AT", // Austria
	0x002C: "GB", // United Kingdom
	0x002D: "DK", // Denmark
	0x002E: "SE", // Sweden
	0x002F: "NO", // Norway
	0x0030: "PL", // Poland
	0x0031: "DE", // Germany
	0x0034: "MX", // Mexico
	0x0037: "BR", // Brazil
	0x003d: "AU", // Australia
	0x0040: "NZ", // New Zealand
	0x0042: "TH", // Thailand
	0x0051: "JP", // Japan
	0x0052: "KR", // Korea
	0x0054: "VN", // Viet Nam
	0x0056: "CN", // China
	0x005A: "TR", // Turkey
	0x0069: "JS", // Ramastan
	0x00D5: "DZ", // Algeria
	0x00D8: "MA", // Morocco
	0x00DA: "LY", // Libya
	0x015F: "PT", // Portugal
	0x0162: "IS", // Iceland
	0x0166: "FI", // Finland
	0x01A4: "CZ", // Czech Republic
	0x0376: "TW", // Taiwan
	0x03C1: "LB", // Lebanon
	0x03C2: "JO", // Jordan
	0x03C3: "SY", // Syria
	0x03C4: "IQ", // Iraq
	0x03C5: "KW", // Kuwait
	0x03C6: "SA", // Saudi Arabia
	0x03CB: "AE", // United Arab Emirates
	0x03CC: "IL", // Israel
	0x03CE: "QA", // Qatar
	0x03D5: "IR", // Iran
	0xFFFF: "US"  // United States
	};

	/* [MS-XLS] 2.5.127 */
	var XLSFillPattern = [
		null,
		'solid',
		'mediumGray',
		'darkGray',
		'lightGray',
		'darkHorizontal',
		'darkVertical',
		'darkDown',
		'darkUp',
		'darkGrid',
		'darkTrellis',
		'lightHorizontal',
		'lightVertical',
		'lightDown',
		'lightUp',
		'lightGrid',
		'lightTrellis',
		'gray125',
		'gray0625'
	];

	function rgbify(arr) { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }

	/* [MS-XLS] 2.5.161 */
	/* [MS-XLSB] 2.5.75 */
	var XLSIcv = rgbify([
		/* Color Constants */
		0x000000,
		0xFFFFFF,
		0xFF0000,
		0x00FF00,
		0x0000FF,
		0xFFFF00,
		0xFF00FF,
		0x00FFFF,

		/* Overridable Defaults */
		0x000000,
		0xFFFFFF,
		0xFF0000,
		0x00FF00,
		0x0000FF,
		0xFFFF00,
		0xFF00FF,
		0x00FFFF,

		0x800000,
		0x008000,
		0x000080,
		0x808000,
		0x800080,
		0x008080,
		0xC0C0C0,
		0x808080,
		0x9999FF,
		0x993366,
		0xFFFFCC,
		0xCCFFFF,
		0x660066,
		0xFF8080,
		0x0066CC,
		0xCCCCFF,

		0x000080,
		0xFF00FF,
		0xFFFF00,
		0x00FFFF,
		0x800080,
		0x800000,
		0x008080,
		0x0000FF,
		0x00CCFF,
		0xCCFFFF,
		0xCCFFCC,
		0xFFFF99,
		0x99CCFF,
		0xFF99CC,
		0xCC99FF,
		0xFFCC99,

		0x3366FF,
		0x33CCCC,
		0x99CC00,
		0xFFCC00,
		0xFF9900,
		0xFF6600,
		0x666699,
		0x969696,
		0x003366,
		0x339966,
		0x003300,
		0x333300,
		0x993300,
		0x993366,
		0x333399,
		0x333333,

		/* Other entries to appease BIFF8/12 */
		0xFFFFFF, /* 0x40 icvForeground ?? */
		0x000000, /* 0x41 icvBackground ?? */
		0x000000, /* 0x42 icvFrame ?? */
		0x000000, /* 0x43 icv3D ?? */
		0x000000, /* 0x44 icv3DText ?? */
		0x000000, /* 0x45 icv3DHilite ?? */
		0x000000, /* 0x46 icv3DShadow ?? */
		0x000000, /* 0x47 icvHilite ?? */
		0x000000, /* 0x48 icvCtlText ?? */
		0x000000, /* 0x49 icvCtlScrl ?? */
		0x000000, /* 0x4A icvCtlInv ?? */
		0x000000, /* 0x4B icvCtlBody ?? */
		0x000000, /* 0x4C icvCtlFrame ?? */
		0x000000, /* 0x4D icvCtlFore ?? */
		0x000000, /* 0x4E icvCtlBack ?? */
		0x000000, /* 0x4F icvCtlNeutral */
		0x000000, /* 0x50 icvInfoBk ?? */
		0x000000 /* 0x51 icvInfoText ?? */
	]);

	/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
	/* 12.3 Part Summary <SpreadsheetML> */
	/* 14.2 Part Summary <DrawingML> */
	/* [MS-XLSX] 2.1 Part Enumerations */
	/* [MS-XLSB] 2.1.7 Part Enumeration */
	var ct2type/*{[string]:string}*/ = ({
		/* Workbook */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",

		/* Worksheet */
		"application/vnd.ms-excel.binIndexWs": "TODO", /* Binary Index */

		/* Macrosheet */
		"application/vnd.ms-excel.intlmacrosheet": "TODO",
		"application/vnd.ms-excel.binIndexMs": "TODO", /* Binary Index */

		/* File Properties */
		"application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",

		/* Custom Data Properties */
		"application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",

		/* PivotTable */
		"application/vnd.ms-excel.pivotTable": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",

		/* Chart Colors */
		"application/vnd.ms-office.chartcolorstyle+xml": "TODO",

		/* Chart Style */
		"application/vnd.ms-office.chartstyle+xml": "TODO",

		/* Calculation Chain */
		"application/vnd.ms-excel.calcChain": "calcchains",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",

		/* Printer Settings */
		"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",

		/* ActiveX */
		"application/vnd.ms-office.activeX": "TODO",
		"application/vnd.ms-office.activeX+xml": "TODO",

		/* Custom Toolbars */
		"application/vnd.ms-excel.attachedToolbars": "TODO",

		/* External Data Connections */
		"application/vnd.ms-excel.connections": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",

		/* External Links */
		"application/vnd.ms-excel.externalLink": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "TODO",

		/* Metadata */
		"application/vnd.ms-excel.sheetMetadata": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO",

		/* PivotCache */
		"application/vnd.ms-excel.pivotCacheDefinition": "TODO",
		"application/vnd.ms-excel.pivotCacheRecords": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",

		/* Query Table */
		"application/vnd.ms-excel.queryTable": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",

		/* Shared Workbook */
		"application/vnd.ms-excel.userNames": "TODO",
		"application/vnd.ms-excel.revisionHeaders": "TODO",
		"application/vnd.ms-excel.revisionLog": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",

		/* Single Cell Table */
		"application/vnd.ms-excel.tableSingleCells": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",

		/* Slicer */
		"application/vnd.ms-excel.slicer": "TODO",
		"application/vnd.ms-excel.slicerCache": "TODO",
		"application/vnd.ms-excel.slicer+xml": "TODO",
		"application/vnd.ms-excel.slicerCache+xml": "TODO",

		/* Sort Map */
		"application/vnd.ms-excel.wsSortMap": "TODO",

		/* Table */
		"application/vnd.ms-excel.table": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",

		/* Themes */
		"application/vnd.openxmlformats-officedocument.theme+xml": "themes",

		/* Theme Override */
		"application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",

		/* Timeline */
		"application/vnd.ms-excel.Timeline+xml": "TODO", /* verify */
		"application/vnd.ms-excel.TimelineCache+xml": "TODO", /* verify */

		/* VBA */
		"application/vnd.ms-office.vbaProject": "vba",
		"application/vnd.ms-office.vbaProjectSignature": "vba",

		/* Volatile Dependencies */
		"application/vnd.ms-office.volatileDependencies": "TODO",
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",

		/* Control Properties */
		"application/vnd.ms-excel.controlproperties+xml": "TODO",

		/* Data Model */
		"application/vnd.openxmlformats-officedocument.model+data": "TODO",

		/* Survey */
		"application/vnd.ms-excel.Survey+xml": "TODO",

		/* Drawing */
		"application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
		"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",

		/* VML */
		"application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",

		"application/vnd.openxmlformats-package.relationships+xml": "rels",
		"application/vnd.openxmlformats-officedocument.oleObject": "TODO",

		/* Image */
		"image/png": "TODO",

		"sheet": "js"
	});

	var CT_LIST = (function(){
		var o = {
			workbooks: {
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
				xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
				xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
				xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
			},
			strs: { /* Shared Strings */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
				xlsb: "application/vnd.ms-excel.sharedStrings"
			},
			comments: { /* Comments */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
				xlsb: "application/vnd.ms-excel.comments"
			},
			sheets: { /* Worksheet */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
				xlsb: "application/vnd.ms-excel.worksheet"
			},
			charts: { /* Chartsheet */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
				xlsb: "application/vnd.ms-excel.chartsheet"
			},
			dialogs: { /* Dialogsheet */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
				xlsb: "application/vnd.ms-excel.dialogsheet"
			},
			macros: { /* Macrosheet (Excel 4.0 Macros) */
				xlsx: "application/vnd.ms-excel.macrosheet+xml",
				xlsb: "application/vnd.ms-excel.macrosheet"
			},
			styles: { /* Styles */
				xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
				xlsb: "application/vnd.ms-excel.styles"
			}
		};
		keys(o).forEach(function(k) { if(!o[k].xlsm) o[k].xlsm = o[k].xlsx; });
		keys(o).forEach(function(k){ keys(o[k]).forEach(function(v) { ct2type[o[k][v]] = k; }); });
		return o;
	})();

	var type2ct/*{[string]:Array<string>}*/ = evert_arr(ct2type);

	XMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';

	function parse_ct(data, opts) {
		var ct = ({
			workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
			rels:[], strs:[], comments:[],
			coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
			calcchains:[], vba: [], drawings: [],
			TODO:[], xmlns: "" });
		if(!data || !data.match) return ct;
		var ctext = {};
		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0].replace(nsregex,"<")) {
				case '<?xml': break;
				case '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/)||["",""])[1] ]; break;
				case '<Default': ctext[y.Extension] = y.ContentType; break;
				case '<Override':
					if(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
					break;
			}
		});
		if(ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
		ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
		ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
		ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
		ct.defaults = ctext;
		delete ct.calcchains;
		return ct;
	}

	var CTYPE_XML_ROOT = writextag('Types', null, {
		'xmlns': XMLNS.CT,
		'xmlns:xsd': XMLNS.xsd,
		'xmlns:xsi': XMLNS.xsi
	});

	var CTYPE_DEFAULTS = [
		['xml', 'application/xml'],
		['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],
		['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'],
		/* from test files */
		['bmp', 'image/bmp'],
		['png', 'image/png'],
		['gif', 'image/gif'],
		['emf', 'image/x-emf'],
		['wmf', 'image/x-wmf'],
		['jpg', 'image/jpeg'], ['jpeg', 'image/jpeg'],
		['tif', 'image/tiff'], ['tiff', 'image/tiff'],
		['pdf', 'application/pdf'],
		['rels', type2ct.rels[0]]
	].map(function(x) {
		return writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});
	});

	function write_ct(ct, opts) {
		var o = [], v;
		o[o.length] = (XML_HEADER);
		o[o.length] = (CTYPE_XML_ROOT);
		o = o.concat(CTYPE_DEFAULTS);
		var f1 = function(w) {
			if(ct[w] && ct[w].length > 0) {
				v = ct[w][0];
				o[o.length] = (writextag('Override', null, {
					'PartName': (v[0] == '/' ? "":"/") + v,
					'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
				}));
			}
		};
		var f2 = function(w) {
			(ct[w]||[]).forEach(function(v) {
				o[o.length] = (writextag('Override', null, {
					'PartName': (v[0] == '/' ? "":"/") + v,
					'ContentType': CT_LIST[w][opts.bookType || 'xlsx']
				}));
			});
		};
		var f3 = function(t) {
			(ct[t]||[]).forEach(function(v) {
				o[o.length] = (writextag('Override', null, {
					'PartName': (v[0] == '/' ? "":"/") + v,
					'ContentType': type2ct[t][0]
				}));
			});
		};
		f1('workbooks');
		f2('sheets');
		f2('charts');
		f3('themes');
		['strs', 'styles'].forEach(f1);
		['coreprops', 'extprops', 'custprops'].forEach(f3);
		f3('vba');
		f3('comments');
		f3('drawings');
		if(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* 9.3 Relationships */
	var RELS = ({
		WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
		SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
		HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
		VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
		VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
	});

	/* 9.3.3 Representing Relationships */
	function get_rels_path(file) {
		var n = file.lastIndexOf("/");
		return file.substr(0,n+1) + '_rels/' + file.substr(n+1) + ".rels";
	}

	function parse_rels(data, currentFilePath) {
		if (!data) return data;
		if (currentFilePath.charAt(0) !== '/') {
			currentFilePath = '/'+currentFilePath;
		}
		var rels = {};
		var hash = {};

		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			/* 9.3.2.2 OPC_Relationships */
			if (y[0] === '<Relationship') {
				var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode;
				var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
				rels[canonictarget] = rel;
				hash[y.Id] = rel;
			}
		});
		rels["!id"] = hash;
		return rels;
	}

	XMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';

	var RELS_ROOT = writextag('Relationships', null, {
		//'xmlns:ns0': XMLNS.RELS,
		'xmlns': XMLNS.RELS
	});

	/* TODO */
	function write_rels(rels) {
		var o = [XML_HEADER, RELS_ROOT];
		keys(rels['!id']).forEach(function(rid) {
			o[o.length] = (writextag('Relationship', null, rels['!id'][rid]));
		});
		if(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}

	function add_rels(rels, rId, f, type, relobj) {
		if(!relobj) relobj = {};
		if(!rels['!id']) rels['!id'] = {};
		if(rId < 0) for(rId = 1; rels['!id']['rId' + rId]; ++rId){/* empty */}
		relobj.Id = 'rId' + rId;
		relobj.Type = type;
		relobj.Target = f;
		if(relobj.Type == RELS.HLINK) relobj.TargetMode = "External";
		if(rels['!id'][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
		rels['!id'][relobj.Id] = relobj;
		rels[('/' + relobj.Target).replace("//","/")] = relobj;
		return rId;
	}
	/* Open Document Format for Office Applications (OpenDocument) Version 1.2 */
	/* Part 3 Section 4 Manifest File */
	var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
	function parse_manifest(d, opts) {
		var str = xlml_normalize(d);
		var Rn;
		var FEtag;
		while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
			case 'manifest': break; // 4.2 <manifest:manifest>
			case 'file-entry': // 4.3 <manifest:file-entry>
				FEtag = parsexmltag(Rn[0], false);
				if(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
				break;
			case 'encryption-data': // 4.4 <manifest:encryption-data>
			case 'algorithm': // 4.5 <manifest:algorithm>
			case 'start-key-generation': // 4.6 <manifest:start-key-generation>
			case 'key-derivation': // 4.7 <manifest:key-derivation>
				throw new Error("Unsupported ODS Encryption");
			default: if(opts && opts.WTF) throw Rn;
		}
	}

	function write_manifest(manifest, opts) {
		var o = [XML_HEADER];
		o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
		o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
		for(var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
		o.push('</manifest:manifest>');
		return o.join("");
	}

	/* Part 3 Section 6 Metadata Manifest File */
	function write_rdf_type(file, res, tag) {
		return [
			'  <rdf:Description rdf:about="' + file + '">\n',
			'    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + '#' + res + '"/>\n',
			'  </rdf:Description>\n'
		].join("");
	}
	function write_rdf_has(base, file) {
		return [
			'  <rdf:Description rdf:about="' + base + '">\n',
			'    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
			'  </rdf:Description>\n'
		].join("");
	}
	function write_rdf(rdf, opts) {
		var o = [XML_HEADER];
		o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
		for(var i = 0; i != rdf.length; ++i) {
			o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
			o.push(write_rdf_has("",rdf[i][0]));
		}
		o.push(write_rdf_type("","Document", "pkg"));
		o.push('</rdf:RDF>');
		return o.join("");
	}
	/* TODO: pull properties */
	var write_meta_ods = (function() {
		var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>Sheet' + 'JS ' + XLSX.version + '</meta:generator></office:meta></office:document-meta>';
		return function wmo(wb, opts) {
			return payload;
		};
	})();

	/* ECMA-376 Part II 11.1 Core Properties Part */
	/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
	var CORE_PROPS = [
		["cp:category", "Category"],
		["cp:contentStatus", "ContentStatus"],
		["cp:keywords", "Keywords"],
		["cp:lastModifiedBy", "LastAuthor"],
		["cp:lastPrinted", "LastPrinted"],
		["cp:revision", "RevNumber"],
		["cp:version", "Version"],
		["dc:creator", "Author"],
		["dc:description", "Comments"],
		["dc:identifier", "Identifier"],
		["dc:language", "Language"],
		["dc:subject", "Subject"],
		["dc:title", "Title"],
		["dcterms:created", "CreatedDate", 'date'],
		["dcterms:modified", "ModifiedDate", 'date']
	];

	XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties";
	RELS.CORE_PROPS  = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';

	var CORE_PROPS_REGEX = (function() {
		var r = new Array(CORE_PROPS.length);
		for(var i = 0; i < CORE_PROPS.length; ++i) {
			var f = CORE_PROPS[i];
			var g = "(?:"+ f[0].substr(0,f[0].indexOf(":")) +":)"+ f[0].substr(f[0].indexOf(":")+1);
			r[i] = new RegExp("<" + g + "[^>]*>(.*)<\/" + g + ">");
		}
		return r;
	})();

	function parse_core_props(data) {
		var p = {};

		for(var i = 0; i < CORE_PROPS.length; ++i) {
			var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
			if(cur != null && cur.length > 0) p[f[1]] = cur[1];
			if(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
		}

		return p;
	}

	var CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {
		//'xmlns': XMLNS.CORE_PROPS,
		'xmlns:cp': XMLNS.CORE_PROPS,
		'xmlns:dc': XMLNS.dc,
		'xmlns:dcterms': XMLNS.dcterms,
		'xmlns:dcmitype': XMLNS.dcmitype,
		'xmlns:xsi': XMLNS.xsi
	});

	function cp_doit(f, g, h, o, p) {
		if(p[f] != null || g == null || g === "") return;
		p[f] = g;
		o[o.length] = (h ? writextag(f,g,h) : writetag(f,g));
	}

	function write_core_props(cp, _opts) {
		var opts = _opts || {};
		var o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};
		if(!cp && !opts.Props) return o.join("");

		if(cp) {
			if(cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
			if(cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {"xsi:type":"dcterms:W3CDTF"}, o, p);
		}

		for(var i = 0; i != CORE_PROPS.length; ++i) {
			var f = CORE_PROPS[i];
			var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
			if(v === true) v = "1";
			else if(v === false) v = "0";
			else if(typeof v == "number") v = String(v);
			if(v != null) cp_doit(f[0], v, null, o, p);
		}
		if(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* 15.2.12.3 Extended File Properties Part */
	/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
	var EXT_PROPS = [
		["Application", "Application", "string"],
		["AppVersion", "AppVersion", "string"],
		["Company", "Company", "string"],
		["DocSecurity", "DocSecurity", "string"],
		["Manager", "Manager", "string"],
		["HyperlinksChanged", "HyperlinksChanged", "bool"],
		["SharedDoc", "SharedDoc", "bool"],
		["LinksUpToDate", "LinksUpToDate", "bool"],
		["ScaleCrop", "ScaleCrop", "bool"],
		["HeadingPairs", "HeadingPairs", "raw"],
		["TitlesOfParts", "TitlesOfParts", "raw"]
	];

	XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties";
	RELS.EXT_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';

	function parse_ext_props(data, p) {
		var q = {}; if(!p) p = {};

		EXT_PROPS.forEach(function(f) {
			switch(f[2]) {
				case "string": p[f[1]] = (data.match(matchtag(f[0]))||[])[1]; break;
				case "bool": p[f[1]] = (data.match(matchtag(f[0]))||[])[1] === "true"; break;
				case "raw":
					var cur = data.match(new RegExp("<" + f[0] + "[^>]*>(.*)<\/" + f[0] + ">"));
					if(cur && cur.length > 0) q[f[1]] = cur[1];
					break;
			}
		});

		if(q.HeadingPairs && q.TitlesOfParts) {
			var v = parseVector(q.HeadingPairs);
			var parts = parseVector(q.TitlesOfParts).map(function(x) { return x.v; });
			var idx = 0, len = 0;
			for(var i = 0; i !== v.length; i+=2) {
				len = +(v[i+1].v);
				switch(v[i].v) {
					case "Worksheets":
					case "工作表":
					case "Листы":
					case "ワークシート":
					case "גליונות עבודה":
					case "Arbeitsblätter":
					case "Çalışma Sayfaları":
					case "Feuilles de calcul":
					case "Fogli di lavoro":
					case "Folhas de cálculo":
					case "Planilhas":
					case "Werkbladen":
						p.Worksheets = len;
						p.SheetNames = parts.slice(idx, idx + len);
						break;

					case "Named Ranges":
					case "Benannte Bereiche":
						p.NamedRanges = len;
						p.DefinedNames = parts.slice(idx, idx + len);
						break;

					case "Charts":
					case "Diagramme":
						p.Chartsheets = len;
						p.ChartNames = parts.slice(idx, idx + len);
						break;
				}
				idx += len;
			}
		}

		return p;
	}

	var EXT_PROPS_XML_ROOT = writextag('Properties', null, {
		'xmlns': XMLNS.EXT_PROPS,
		'xmlns:vt': XMLNS.vt
	});

	function write_ext_props(cp, opts) {
		var o = [], p = {}, W = writextag;
		if(!cp) cp = {};
		cp.Application = "SheetJS";
		o[o.length] = (XML_HEADER);
		o[o.length] = (EXT_PROPS_XML_ROOT);

		EXT_PROPS.forEach(function(f) {
			if(cp[f[1]] === undefined) return;
			var v;
			switch(f[2]) {
				case 'string': v = String(cp[f[1]]); break;
				case 'bool': v = cp[f[1]] ? 'true' : 'false'; break;
			}
			if(v !== undefined) o[o.length] = (W(f[0], v));
		});

		/* TODO: HeadingPairs, TitlesOfParts */
		o[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:"variant"})));
		o[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>"; }).join(""), {size: cp.Worksheets, baseType:"lpstr"})));
		if(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* 15.2.12.2 Custom File Properties Part */
	XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties";
	RELS.CUST_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';

	var custregex = /<[^>]+>[^<]*/g;
	function parse_cust_props(data, opts) {
		var p = {}, name = "";
		var m = data.match(custregex);
		if(m) for(var i = 0; i != m.length; ++i) {
			var x = m[i], y = parsexmltag(x);
			switch(y[0]) {
				case '<?xml': break;
				case '<Properties': break;
				case '<property': name = y.name; break;
				case '</property>': name = null; break;
				default: if (x.indexOf('<vt:') === 0) {
					var toks = x.split('>');
					var type = toks[0].substring(4), text = toks[1];
					/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
					switch(type) {
						case 'lpstr': case 'bstr': case 'lpwstr':
							p[name] = unescapexml(text);
							break;
						case 'bool':
							p[name] = parsexmlbool(text, '<vt:bool>');
							break;
						case 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':
							p[name] = parseInt(text, 10);
							break;
						case 'r4': case 'r8': case 'decimal':
							p[name] = parseFloat(text);
							break;
						case 'filetime': case 'date':
							p[name] = parseDate(text);
							break;
						case 'cy': case 'error':
							p[name] = unescapexml(text);
							break;
						default:
							if(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
					}
				} else if(x.substr(0,2) === "</") {/* empty */
				} else if(opts.WTF) throw new Error(x);
			}
		}
		return p;
	}

	var CUST_PROPS_XML_ROOT = writextag('Properties', null, {
		'xmlns': XMLNS.CUST_PROPS,
		'xmlns:vt': XMLNS.vt
	});

	function write_cust_props(cp, opts) {
		var o = [XML_HEADER, CUST_PROPS_XML_ROOT];
		if(!cp) return o.join("");
		var pid = 1;
		keys(cp).forEach(function custprop(k) { ++pid;
			// $FlowIgnore
			o[o.length] = (writextag('property', write_vt(cp[k]), {
				'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
				'pid': pid,
				'name': k
			}));
		});
		if(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* Common Name -> XLML Name */
	var XLMLDocPropsMap = {
		Title: 'Title',
		Subject: 'Subject',
		Author: 'Author',
		Keywords: 'Keywords',
		Comments: 'Description',
		LastAuthor: 'LastAuthor',
		RevNumber: 'Revision',
		Application: 'AppName',
		/* TotalTime: 'TotalTime', */
		LastPrinted: 'LastPrinted',
		CreatedDate: 'Created',
		ModifiedDate: 'LastSaved',
		/* Pages */
		/* Words */
		/* Characters */
		Category: 'Category',
		/* PresentationFormat */
		Manager: 'Manager',
		Company: 'Company',
		/* Guid */
		/* HyperlinkBase */
		/* Bytes */
		/* Lines */
		/* Paragraphs */
		/* CharactersWithSpaces */
		AppVersion: 'Version',

		ContentStatus: 'ContentStatus', /* NOTE: missing from schema */
		Identifier: 'Identifier', /* NOTE: missing from schema */
		Language: 'Language' /* NOTE: missing from schema */
	};
	var evert_XLMLDPM = evert(XLMLDocPropsMap);

	function xlml_set_prop(Props, tag, val) {
		tag = evert_XLMLDPM[tag] || tag;
		Props[tag] = val;
	}

	function xlml_write_docprops(Props, opts) {
		var o = [];
		keys(XLMLDocPropsMap).map(function(m) {
			for(var i = 0; i < CORE_PROPS.length; ++i) if(CORE_PROPS[i][1] == m) return CORE_PROPS[i];
			for(i = 0; i < EXT_PROPS.length; ++i) if(EXT_PROPS[i][1] == m) return EXT_PROPS[i];
			throw m;
		}).forEach(function(p) {
			if(Props[p[1]] == null) return;
			var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
			switch(p[2]) {
				case 'date': m = new Date(m).toISOString().replace(/\.\d*Z/,"Z"); break;
			}
			if(typeof m == 'number') m = String(m);
			else if(m === true || m === false) { m = m ? "1" : "0"; }
			else if(m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/,"");
			o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
		});
		return writextag('DocumentProperties', o.join(""), {xmlns:XLMLNS.o });
	}
	function xlml_write_custprops(Props, Custprops, opts) {
		var BLACKLIST = ["Worksheets","SheetNames"];
		var T = 'CustomDocumentProperties';
		var o = [];
		if(Props) keys(Props).forEach(function(k) {
	if(!Props.hasOwnProperty(k)) return;
			for(var i = 0; i < CORE_PROPS.length; ++i) if(k == CORE_PROPS[i][1]) return;
			for(i = 0; i < EXT_PROPS.length; ++i) if(k == EXT_PROPS[i][1]) return;
			for(i = 0; i < BLACKLIST.length; ++i) if(k == BLACKLIST[i]) return;

			var m = Props[k];
			var t = "string";
			if(typeof m == 'number') { t = "float"; m = String(m); }
			else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
			else m = String(m);
			o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
		});
		if(Custprops) keys(Custprops).forEach(function(k) {
	if(!Custprops.hasOwnProperty(k)) return;
			var m = Custprops[k];
			var t = "string";
			if(typeof m == 'number') { t = "float"; m = String(m); }
			else if(m === true || m === false) { t = "boolean"; m = m ? "1" : "0"; }
			else if(m instanceof Date) { t = "dateTime.tz"; m = m.toISOString(); }
			else m = String(m);
			o.push(writextag(escapexmltag(k), m, {"dt:dt":t}));
		});
		return '<' + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + '</' + T + '>';
	}
	/* [MS-DTYP] 2.3.3 FILETIME */
	/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
	/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
	function parse_FILETIME(blob) {
		var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
		return new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\.000/,"");
	}

	/* [MS-OSHARED] 2.3.3.1.4 Lpstr */
	function parse_lpstr(blob, type, pad) {
		var str = blob.read_shift(0, 'lpstr');
		if(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;
		return str;
	}

	/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
	function parse_lpwstr(blob, type, pad) {
		var str = blob.read_shift(0, 'lpwstr');
		if(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;
		return str;
	}


	/* [MS-OSHARED] 2.3.3.1.11 VtString */
	/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
	function parse_VtStringBase(blob, stringType, pad) {
		if(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);
		return parse_lpstr(blob, stringType, pad);
	}

	function parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }
	function parse_VtUnalignedString(blob, t) { if(!t) throw new Error("dafuq?"); return parse_VtStringBase(blob, t, 0); }

	/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
	function parse_VtVecUnalignedLpstrValue(blob) {
		var length = blob.read_shift(4);
		var ret = [];
		for(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr');
		return ret;
	}

	/* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */
	function parse_VtVecUnalignedLpstr(blob) {
		return parse_VtVecUnalignedLpstrValue(blob);
	}

	/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
	function parse_VtHeadingPair(blob) {
		var headingString = parse_TypedPropertyValue(blob, VT_USTR);
		var headerParts = parse_TypedPropertyValue(blob, VT_I4);
		return [headingString, headerParts];
	}

	/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
	function parse_VtVecHeadingPairValue(blob) {
		var cElements = blob.read_shift(4);
		var out = [];
		for(var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
		return out;
	}

	/* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */
	function parse_VtVecHeadingPair(blob) {
		// NOTE: When invoked, wType & padding were already consumed
		return parse_VtVecHeadingPairValue(blob);
	}

	/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
	function parse_dictionary(blob,CodePage) {
		var cnt = blob.read_shift(4);
		var dict = ({});
		for(var j = 0; j != cnt; ++j) {
			var pid = blob.read_shift(4);
			var len = blob.read_shift(4);
			dict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');
		}
		if(blob.l & 3) blob.l = (blob.l>>2+1)<<2;
		return dict;
	}

	/* [MS-OLEPS] 2.9 BLOB */
	function parse_BLOB(blob) {
		var size = blob.read_shift(4);
		var bytes = blob.slice(blob.l,blob.l+size);
		if((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
		return bytes;
	}

	/* [MS-OLEPS] 2.11 ClipboardData */
	function parse_ClipboardData(blob) {
		// TODO
		var o = {};
		o.Size = blob.read_shift(4);
		//o.Format = blob.read_shift(4);
		blob.l += o.Size;
		return o;
	}

	/* [MS-OLEPS] 2.14 Vector and Array Property Types */
	function parse_VtVector(blob, cb) {
		/* [MS-OLEPS] 2.14.2 VectorHeader */
	/*	var Length = blob.read_shift(4);
		var o = [];
		for(var i = 0; i != Length; ++i) {
			o.push(cb(blob));
		}
		return o;*/
	}

	/* [MS-OLEPS] 2.15 TypedPropertyValue */
	function parse_TypedPropertyValue(blob, type, _opts) {
		var t = blob.read_shift(2), ret, opts = _opts||{};
		blob.l += 2;
		if(type !== VT_VARIANT)
		if(t !== type && VT_CUSTOM.indexOf(type)===-1) throw new Error('Expected type ' + type + ' saw ' + t);
		switch(type === VT_VARIANT ? t : type) {
			case 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;
			case 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;
			case 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;
			case 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;
			case 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');
			case 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);
			case 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);
			case 0x41 /*VT_BLOB*/: return parse_BLOB(blob);
			case 0x47 /*VT_CF*/: return parse_ClipboardData(blob);
			case 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw && 4).replace(chr0,'');
			case 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t, 4).replace(chr0,'');
			case 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPair(blob);
			case 0x101E /*VT_LPSTR*/: return parse_VtVecUnalignedLpstr(blob);
			default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
		}
	}
	/* [MS-OLEPS] 2.14.2 VectorHeader */
	/*function parse_VTVectorVariant(blob) {
		var Length = blob.read_shift(4);

		if(Length & 1 !== 0) throw new Error("VectorHeader Length=" + Length + " must be even");
		var o = [];
		for(var i = 0; i != Length; ++i) {
			o.push(parse_TypedPropertyValue(blob, VT_VARIANT));
		}
		return o;
	}*/

	/* [MS-OLEPS] 2.20 PropertySet */
	function parse_PropertySet(blob, PIDSI) {
		var start_addr = blob.l;
		var size = blob.read_shift(4);
		var NumProps = blob.read_shift(4);
		var Props = [], i = 0;
		var CodePage = 0;
		var Dictionary = -1, DictObj = ({});
		for(i = 0; i != NumProps; ++i) {
			var PropID = blob.read_shift(4);
			var Offset = blob.read_shift(4);
			Props[i] = [PropID, Offset + start_addr];
		}
		var PropH = {};
		for(i = 0; i != NumProps; ++i) {
			if(blob.l !== Props[i][1]) {
				var fail = true;
				if(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {
					case 0x02 /*VT_I2*/: if(blob.l +2 === Props[i][1]) { blob.l+=2; fail = false; } break;
					case 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
					case 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
				}
				if(!PIDSI && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }
				if(fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
			}
			if(PIDSI) {
				var piddsi = PIDSI[Props[i][0]];
				PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});
				if(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + String(PropH[piddsi.n] & 0xFFFF);
				if(piddsi.n == "CodePage") switch(PropH[piddsi.n]) {
					case 0: PropH[piddsi.n] = 1252;
						/* falls through */
					case 874:
					case 932:
					case 936:
					case 949:
					case 950:
					case 1250:
					case 1251:
					case 1253:
					case 1254:
					case 1255:
					case 1256:
					case 1257:
					case 1258:
					case 10000:
					case 1200:
					case 1201:
					case 1252:
					case 65000: case -536:
					case 65001: case -535:
						set_cp(CodePage = PropH[piddsi.n]); break;
					default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
				}
			} else {
				if(Props[i][0] === 0x1) {
					CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
					set_cp(CodePage);
					if(Dictionary !== -1) {
						var oldpos = blob.l;
						blob.l = Props[Dictionary][1];
						DictObj = parse_dictionary(blob,CodePage);
						blob.l = oldpos;
					}
				} else if(Props[i][0] === 0) {
					if(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }
					DictObj = parse_dictionary(blob,CodePage);
				} else {
					var name = DictObj[Props[i][0]];
					var val;
					/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
					switch(blob[blob.l]) {
						case 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;
						case 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;
						case 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;
						case 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;
						case 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;
						case 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;
						case 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;
						case 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;
						default: throw new Error("unparsed value: " + blob[blob.l]);
					}
					PropH[name] = val;
				}
			}
		}
		blob.l = start_addr + size; /* step ahead to skip padding */
		return PropH;
	}

	/* [MS-OLEPS] 2.21 PropertySetStream */
	function parse_PropertySetStream(file, PIDSI) {
		var blob = file.content;
		prep_blob(blob, 0);

		var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
		blob.chk('feff', 'Byte Order: ');

		var vers = blob.read_shift(2); // TODO: check version
		var SystemIdentifier = blob.read_shift(4);
		blob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');
		NumSets = blob.read_shift(4);
		if(NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
		FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);

		if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
		else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
		var PSet0 = parse_PropertySet(blob, PIDSI);

		var rval = ({ SystemIdentifier: SystemIdentifier });
		for(var y in PSet0) rval[y] = PSet0[y];
		//rval.blob = blob;
		rval.FMTID = FMTID0;
		//rval.PSet0 = PSet0;
		if(NumSets === 1) return rval;
		if(blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
		var PSet1;
		try { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}
		for(y in PSet1) rval[y] = PSet1[y];
		rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1
		return rval;
	}


	function parsenoop2(blob, length) { blob.read_shift(length); return null; }

	function parslurp(blob, length, cb) {
		var arr = [], target = blob.l + length;
		while(blob.l < target) arr.push(cb(blob, target - blob.l));
		if(target !== blob.l) throw new Error("Slurp error");
		return arr;
	}

	function parsebool(blob, length) { return blob.read_shift(length) === 0x1; }

	function parseuint16(blob) { return blob.read_shift(2, 'u'); }
	function parseuint16a(blob, length) { return parslurp(blob,length,parseuint16);}

	/* --- 2.5 Structures --- */

	/* [MS-XLS] 2.5.14 Boolean */
	var parse_Boolean = parsebool;

	/* [MS-XLS] 2.5.10 Bes (boolean or error) */
	function parse_Bes(blob) {
		var v = blob.read_shift(1), t = blob.read_shift(1);
		return t === 0x01 ? v : v === 0x01;
	}

	/* [MS-XLS] 2.5.240 ShortXLUnicodeString */
	function parse_ShortXLUnicodeString(blob, length, opts) {
		var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
		var width = 1, encoding = 'sbcs-cont';
		var cp = current_codepage;
		if(opts && opts.biff >= 8) current_codepage = 1200;
		if(!opts || opts.biff == 8 ) {
			var fHighByte = blob.read_shift(1);
			if(fHighByte) { width = 2; encoding = 'dbcs-cont'; }
		} else if(opts.biff == 12) {
			width = 2; encoding = 'wstr';
		}
		var o = cch ? blob.read_shift(cch, encoding) : "";
		current_codepage = cp;
		return o;
	}

	/* 2.5.293 XLUnicodeRichExtendedString */
	function parse_XLUnicodeRichExtendedString(blob) {
		var cp = current_codepage;
		current_codepage = 1200;
		var cch = blob.read_shift(2), flags = blob.read_shift(1);
		var fHighByte = flags & 0x1, fExtSt = flags & 0x4, fRichSt = flags & 0x8;
		var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
		var cRun = 0, cbExtRst;
		var z = {};
		if(fRichSt) cRun = blob.read_shift(2);
		if(fExtSt) cbExtRst = blob.read_shift(4);
		var encoding = (flags & 0x1) ? 'dbcs-cont' : 'sbcs-cont';
		var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
		if(fRichSt) blob.l += 4 * cRun; //TODO: parse this
		if(fExtSt) blob.l += cbExtRst; //TODO: parse this
		z.t = msg;
		if(!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t; }
		current_codepage = cp;
		return z;
	}

	/* 2.5.296 XLUnicodeStringNoCch */
	function parse_XLUnicodeStringNoCch(blob, cch, opts) {
		var retval;
		if(opts) {
			if(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'sbcs-cont');
			if(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
		}
		var fHighByte = blob.read_shift(1);
		if(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }
		else { retval = blob.read_shift(cch, 'dbcs-cont'); }
		return retval;
	}

	/* 2.5.294 XLUnicodeString */
	function parse_XLUnicodeString(blob, length, opts) {
		var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		if(cch === 0) { blob.l++; return ""; }
		return parse_XLUnicodeStringNoCch(blob, cch, opts);
	}
	/* BIFF5 override */
	function parse_XLUnicodeString2(blob, length, opts) {
		if(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
		var cch = blob.read_shift(1);
		if(cch === 0) { blob.l++; return ""; }
		return blob.read_shift(cch, 'sbcs-cont');
	}

	/* [MS-XLS] 2.5.61 ControlInfo */
	var parse_ControlInfo = parsenoop;

	/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
	var parse_URLMoniker = function(blob/*, length, opts*/) {
		var len = blob.read_shift(4), start = blob.l;
		var extra = false;
		if(len > 24) {
			/* look ahead */
			blob.l += len - 24;
			if(blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
			blob.l = start;
		}
		var url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,"");
		if(extra) blob.l += 24;
		return url;
	};

	/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
	var parse_FileMoniker = function(blob, length) {
		var cAnti = blob.read_shift(2);
		var ansiLength = blob.read_shift(4);
		var ansiPath = blob.read_shift(ansiLength, 'cstr');
		var endServer = blob.read_shift(2);
		var versionNumber = blob.read_shift(2);
		var cbUnicodePathSize = blob.read_shift(4);
		if(cbUnicodePathSize === 0) return ansiPath.replace(/\\/g,"/");
		var cbUnicodePathBytes = blob.read_shift(4);
		var usKeyValue = blob.read_shift(2);
		var unicodePath = blob.read_shift(cbUnicodePathBytes>>1, 'utf16le').replace(chr0,"");
		return unicodePath;
	};

	/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
	var parse_HyperlinkMoniker = function(blob, length) {
		var clsid = blob.read_shift(16); length -= 16;
		switch(clsid) {
			case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob, length);
			case "0303000000000000c000000000000046": return parse_FileMoniker(blob, length);
			default: throw new Error("Unsupported Moniker " + clsid);
		}
	};

	/* [MS-OSHARED] 2.3.7.9 HyperlinkString */
	var parse_HyperlinkString = function(blob, length) {
		var len = blob.read_shift(4);
		var o = blob.read_shift(len, 'utf16le').replace(chr0, "");
		return o;
	};

	/* [MS-OSHARED] 2.3.7.1 Hyperlink Object TODO: unify params with XLSX */
	var parse_Hyperlink = function(blob, length) {
		var end = blob.l + length;
		var sVer = blob.read_shift(4);
		if(sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
		var flags = blob.read_shift(2);
		blob.l += 2;
		var displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime;
		if(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
		if(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
		if((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
		if((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
		if(flags & 0x0008) location = parse_HyperlinkString(blob, end - blob.l);
		if(flags & 0x0020) guid = blob.read_shift(16);
		if(flags & 0x0040) fileTime = parse_FILETIME(blob, 8);
		blob.l = end;
		var target = (targetFrameName||moniker||oleMoniker);
		if(location) target+="#"+location;
		return {Target: target};
	};

	/* 2.5.178 LongRGBA */
	function parse_LongRGBA(blob, length) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }

	/* 2.5.177 LongRGB */
	function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x; }


	/* --- MS-XLS --- */

	/* 2.5.19 */
	function parse_XLSCell(blob, length) {
		var rw = blob.read_shift(2); // 0-indexed
		var col = blob.read_shift(2);
		var ixfe = blob.read_shift(2);
		return ({r:rw, c:col, ixfe:ixfe});
	}

	/* 2.5.134 */
	function parse_frtHeader(blob) {
		var rt = blob.read_shift(2);
		var flags = blob.read_shift(2); // TODO: parse these flags
		blob.l += 8;
		return {type: rt, flags: flags};
	}



	function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts); }

	/* 2.5.158 */
	//var HIDEOBJENUM = ['SHOWALL', 'SHOWPLACEHOLDER', 'HIDEALL'];
	var parse_HideObjEnum = parseuint16;

	/* 2.5.344 */
	function parse_XTI(blob, length) {
		var iSupBook = blob.read_shift(2), itabFirst = blob.read_shift(2,'i'), itabLast = blob.read_shift(2,'i');
		return [iSupBook, itabFirst, itabLast];
	}

	/* 2.5.218 */
	function parse_RkRec(blob, length) {
		var ixfe = blob.read_shift(2);
		var RK = parse_RkNumber(blob);
		return [ixfe, RK];
	}

	/* 2.5.1 */
	function parse_AddinUdf(blob, length, opts) {
		blob.l += 4; length -= 4;
		var l = blob.l + length;
		var udfName = parse_ShortXLUnicodeString(blob, length, opts);
		var cb = blob.read_shift(2);
		l -= blob.l;
		if(cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
		blob.l += cb;
		return udfName;
	}

	/* 2.5.209 TODO: Check sizes */
	function parse_Ref8U(blob, length) {
		var rwFirst = blob.read_shift(2);
		var rwLast = blob.read_shift(2);
		var colFirst = blob.read_shift(2);
		var colLast = blob.read_shift(2);
		return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
	}

	/* 2.5.211 */
	function parse_RefU(blob, length) {
		var rwFirst = blob.read_shift(2);
		var rwLast = blob.read_shift(2);
		var colFirst = blob.read_shift(1);
		var colLast = blob.read_shift(1);
		return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
	}

	/* 2.5.207 */
	var parse_Ref = parse_RefU;

	/* 2.5.143 */
	function parse_FtCmo(blob, length) {
		blob.l += 4;
		var ot = blob.read_shift(2);
		var id = blob.read_shift(2);
		var flags = blob.read_shift(2);
		blob.l+=12;
		return [id, ot, flags];
	}

	/* 2.5.149 */
	function parse_FtNts(blob, length) {
		var out = {};
		blob.l += 4;
		blob.l += 16; // GUID TODO
		out.fSharedNote = blob.read_shift(2);
		blob.l += 4;
		return out;
	}

	/* 2.5.142 */
	function parse_FtCf(blob, length) {
		var out = {};
		blob.l += 4;
		blob.cf = blob.read_shift(2);
		return out;
	}

	/* 2.5.140 - 2.5.154 and friends */
	function parse_FtSkip(blob, length) { blob.l += 2; blob.l += blob.read_shift(2); }
	var FtTab = {
	0x00: parse_FtSkip,      /* FtEnd */
	0x04: parse_FtSkip,      /* FtMacro */
	0x05: parse_FtSkip,      /* FtButton */
	0x06: parse_FtSkip,      /* FtGmo */
	0x07: parse_FtCf,        /* FtCf */
	0x08: parse_FtSkip,      /* FtPioGrbit */
	0x09: parse_FtSkip,      /* FtPictFmla */
	0x0A: parse_FtSkip,      /* FtCbls */
	0x0B: parse_FtSkip,      /* FtRbo */
	0x0C: parse_FtSkip,      /* FtSbs */
	0x0D: parse_FtNts,       /* FtNts */
	0x0E: parse_FtSkip,      /* FtSbsFmla */
	0x0F: parse_FtSkip,      /* FtGboData */
	0x10: parse_FtSkip,      /* FtEdoData */
	0x11: parse_FtSkip,      /* FtRboData */
	0x12: parse_FtSkip,      /* FtCblsData */
	0x13: parse_FtSkip,      /* FtLbsData */
	0x14: parse_FtSkip,      /* FtCblsFmla */
	0x15: parse_FtCmo
	};
	function parse_FtArray(blob, length, ot) {
		var tgt = blob.l + length;
		var fts = [];
		while(blob.l < tgt) {
			var ft = blob.read_shift(2);
			blob.l-=2;
			try {
				fts.push(FtTab[ft](blob, tgt - blob.l));
			} catch(e) { blob.l = tgt; return fts; }
		}
		if(blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
		return fts;
	}

	/* 2.5.129 */
	var parse_FontIndex = parseuint16;

	/* --- 2.4 Records --- */

	/* 2.4.21 */
	function parse_BOF(blob, length) {
		var o = {BIFFVer:0, dt:0};
		o.BIFFVer = blob.read_shift(2); length -= 2;
		if(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }
		switch(o.BIFFVer) {
			case 0x0600: /* BIFF8 */
			case 0x0500: /* BIFF5 */
			case 0x0002: case 0x0007: /* BIFF2 */
				break;
			default: if(length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
		}

		blob.read_shift(length);
		return o;
	}


	/* 2.4.146 */
	function parse_InterfaceHdr(blob, length) {
		if(length === 0) return 0x04b0;
		var q;
		if((q=blob.read_shift(2))!==0x04b0){/* empty */}
		return 0x04b0;
	}


	/* 2.4.349 */
	function parse_WriteAccess(blob, length, opts) {
		if(opts.enc) { blob.l += length; return ""; }
		var l = blob.l;
		// TODO: make sure XLUnicodeString doesnt overrun
		var UserName = parse_XLUnicodeString(blob, 0, opts);
		blob.read_shift(length + l - blob.l);
		return UserName;
	}

	/* 2.4.28 */
	function parse_BoundSheet8(blob, length, opts) {
		var pos = blob.read_shift(4);
		var hidden = blob.read_shift(1) & 0x03;
		var dt = blob.read_shift(1);
		switch(dt) {
			case 0: dt = 'Worksheet'; break;
			case 1: dt = 'Macrosheet'; break;
			case 2: dt = 'Chartsheet'; break;
			case 6: dt = 'VBAModule'; break;
		}
		var name = parse_ShortXLUnicodeString(blob, 0, opts);
		if(name.length === 0) name = "Sheet1";
		return { pos:pos, hs:hidden, dt:dt, name:name };
	}

	/* 2.4.265 TODO */
	function parse_SST(blob, length) {
		var cnt = blob.read_shift(4);
		var ucnt = blob.read_shift(4);
		var strs = ([]);
		for(var i = 0; i != ucnt; ++i) {
			strs.push(parse_XLUnicodeRichExtendedString(blob));
		}
		strs.Count = cnt; strs.Unique = ucnt;
		return strs;
	}

	/* 2.4.107 */
	function parse_ExtSST(blob, length) {
		var extsst = {};
		extsst.dsst = blob.read_shift(2);
		blob.l += length-2;
		return extsst;
	}


	/* 2.4.221 TODO: check BIFF2-4 */
	function parse_Row(blob, length) {
		var z = ({});
		z.r = blob.read_shift(2);
		z.c = blob.read_shift(2);
		z.cnt = blob.read_shift(2) - z.c;
		var miyRw = blob.read_shift(2);
		blob.l += 4; // reserved(2), unused(2)
		var flags = blob.read_shift(1); // various flags
		blob.l += 3; // reserved(8), ixfe(12), flags(4)
		if(flags & 0x20) z.hidden = true;
		if(flags & 0x40) z.hpt = miyRw / 20;
		return z;
	}


	/* 2.4.125 */
	function parse_ForceFullCalculation(blob, length) {
		var header = parse_frtHeader(blob);
		if(header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
		var fullcalc = blob.read_shift(4);
		return fullcalc !== 0x0;
	}


	var parse_CompressPictures = parsenoop2; /* 2.4.55 Not interesting */



	/* 2.4.215 rt */
	function parse_RecalcId(blob, length) {
		blob.read_shift(2);
		return blob.read_shift(4);
	}

	/* 2.4.87 */
	function parse_DefaultRowHeight(blob, length, opts) {
		var f = 0;
		if(!(opts && opts.biff == 2)) {
			f = blob.read_shift(2);
		}
		var miyRw = blob.read_shift(2);
		if((opts && opts.biff == 2)) {
			f = 1 - (miyRw >> 15); miyRw &= 0x7fff;
		}
		var fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};
		return [fl, miyRw];
	}

	/* 2.4.345 TODO */
	function parse_Window1(blob, length) {
		var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
		var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
		var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
		return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,
			FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };
	}

	/* 2.4.122 TODO */
	function parse_Font(blob, length, opts) {
		var o = {
			dyHeight: blob.read_shift(2),
			fl: blob.read_shift(2)
		};
		switch(opts && opts.biff || 8) {
			case 2: break;
			case 3: case 4: blob.l += 2; break;
			default: blob.l += 10; break;
		}
		o.name = parse_ShortXLUnicodeString(blob, 0, opts);
		return o;
	}

	/* 2.4.149 */
	function parse_LabelSst(blob, length) {
		var cell = parse_XLSCell(blob);
		cell.isst = blob.read_shift(4);
		return cell;
	}

	/* 2.4.148 */
	function parse_Label(blob, length, opts) {
		var target = blob.l + length;
		var cell = parse_XLSCell(blob, 6);
		if(opts.biff == 2) blob.l++;
		var str = parse_XLUnicodeString(blob, target - blob.l, opts);
		cell.val = str;
		return cell;
	}

	/* 2.4.126 Number Formats */
	function parse_Format(blob, length, opts) {
		var ifmt = blob.read_shift(2);
		var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
		return [ifmt, fmtstr];
	}
	var parse_BIFF2Format = parse_XLUnicodeString2;

	/* 2.4.90 */
	function parse_Dimensions(blob, length, opts) {
		var end = blob.l + length;
		var w = opts.biff == 8 || !opts.biff ? 4 : 2;
		var r = blob.read_shift(w), R = blob.read_shift(w);
		var c = blob.read_shift(2), C = blob.read_shift(2);
		blob.l = end;
		return {s: {r:r, c:c}, e: {r:R, c:C}};
	}

	/* 2.4.220 */
	function parse_RK(blob, length) {
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var rkrec = parse_RkRec(blob);
		return {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};
	}

	/* 2.4.175 */
	function parse_MulRk(blob, length) {
		var target = blob.l + length - 2;
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var rkrecs = [];
		while(blob.l < target) rkrecs.push(parse_RkRec(blob));
		if(blob.l !== target) throw new Error("MulRK read error");
		var lastcol = blob.read_shift(2);
		if(rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
		return {r:rw, c:col, C:lastcol, rkrec:rkrecs};
	}
	/* 2.4.174 */
	function parse_MulBlank(blob, length) {
		var target = blob.l + length - 2;
		var rw = blob.read_shift(2), col = blob.read_shift(2);
		var ixfes = [];
		while(blob.l < target) ixfes.push(blob.read_shift(2));
		if(blob.l !== target) throw new Error("MulBlank read error");
		var lastcol = blob.read_shift(2);
		if(ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
		return {r:rw, c:col, C:lastcol, ixfe:ixfes};
	}

	/* 2.5.20 2.5.249 TODO: interpret values here */
	function parse_CellStyleXF(blob, length, style, opts) {
		var o = {};
		var a = blob.read_shift(4), b = blob.read_shift(4);
		var c = blob.read_shift(4), d = blob.read_shift(2);
		o.patternType = XLSFillPattern[c >> 26];

		if(!opts.cellStyles) return o;
		o.alc = a & 0x07;
		o.fWrap = (a >> 3) & 0x01;
		o.alcV = (a >> 4) & 0x07;
		o.fJustLast = (a >> 7) & 0x01;
		o.trot = (a >> 8) & 0xFF;
		o.cIndent = (a >> 16) & 0x0F;
		o.fShrinkToFit = (a >> 20) & 0x01;
		o.iReadOrder = (a >> 22) & 0x02;
		o.fAtrNum = (a >> 26) & 0x01;
		o.fAtrFnt = (a >> 27) & 0x01;
		o.fAtrAlc = (a >> 28) & 0x01;
		o.fAtrBdr = (a >> 29) & 0x01;
		o.fAtrPat = (a >> 30) & 0x01;
		o.fAtrProt = (a >> 31) & 0x01;

		o.dgLeft = b & 0x0F;
		o.dgRight = (b >> 4) & 0x0F;
		o.dgTop = (b >> 8) & 0x0F;
		o.dgBottom = (b >> 12) & 0x0F;
		o.icvLeft = (b >> 16) & 0x7F;
		o.icvRight = (b >> 23) & 0x7F;
		o.grbitDiag = (b >> 30) & 0x03;

		o.icvTop = c & 0x7F;
		o.icvBottom = (c >> 7) & 0x7F;
		o.icvDiag = (c >> 14) & 0x7F;
		o.dgDiag = (c >> 21) & 0x0F;

		o.icvFore = d & 0x7F;
		o.icvBack = (d >> 7) & 0x7F;
		o.fsxButton = (d >> 14) & 0x01;
		return o;
	}
	function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
	function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}

	/* 2.4.353 TODO: actually do this right */
	function parse_XF(blob, length, opts) {
		var o = {};
		o.ifnt = blob.read_shift(2); o.ifmt = blob.read_shift(2); o.flags = blob.read_shift(2);
		o.fStyle = (o.flags >> 2) & 0x01;
		length -= 6;
		o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
		return o;
	}

	/* 2.4.134 */
	function parse_Guts(blob, length) {
		blob.l += 4;
		var out = [blob.read_shift(2), blob.read_shift(2)];
		if(out[0] !== 0) out[0]--;
		if(out[1] !== 0) out[1]--;
		if(out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
		return out;
	}

	/* 2.4.24 */
	function parse_BoolErr(blob, length, opts) {
		var cell = parse_XLSCell(blob, 6);
		if(opts.biff == 2) ++blob.l;
		var val = parse_Bes(blob, 2);
		cell.val = val;
		cell.t = (val === true || val === false) ? 'b' : 'e';
		return cell;
	}

	/* 2.4.180 Number */
	function parse_Number(blob, length) {
		var cell = parse_XLSCell(blob, 6);
		var xnum = parse_Xnum(blob, 8);
		cell.val = xnum;
		return cell;
	}

	var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136

	/* 2.4.271 */
	function parse_SupBook(blob, length, opts) {
		var end = blob.l + length;
		var ctab = blob.read_shift(2);
		var cch = blob.read_shift(2);
		var virtPath;
		if(cch >=0x01 && cch <=0xff) virtPath = parse_XLUnicodeStringNoCch(blob, cch);
		var rgst = blob.read_shift(end - blob.l);
		opts.sbcch = cch;
		return [cch, ctab, virtPath, rgst];
	}

	/* 2.4.105 TODO */
	function parse_ExternName(blob, length, opts) {
		var flags = blob.read_shift(2);
		var body;
		var o = ({
			fBuiltIn: flags & 0x01,
			fWantAdvise: (flags >>> 1) & 0x01,
			fWantPict: (flags >>> 2) & 0x01,
			fOle: (flags >>> 3) & 0x01,
			fOleLink: (flags >>> 4) & 0x01,
			cf: (flags >>> 5) & 0x3FF,
			fIcon: flags >>> 15 & 0x01
		});
		if(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);
		//else throw new Error("unsupported SupBook cch: " + opts.sbcch);
		o.body = body || blob.read_shift(length-2);
		if(typeof body === "string") o.Name = body;
		return o;
	}

	/* 2.4.150 TODO */
	function parse_Lbl(blob, length, opts) {
		var target = blob.l + length;
		var flags = blob.read_shift(2);
		var chKey = blob.read_shift(1);
		var cch = blob.read_shift(1);
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		var itab = 0;
		if(!opts || opts.biff >= 5) {
			blob.l += 2;
			itab = blob.read_shift(2);
			blob.l += 4;
		}
		var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
		var npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;
		var rgce = target == blob.l || cce == 0 ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
		return {
			chKey: chKey,
			Name: name,
			itab: itab,
			rgce: rgce
		};
	}

	/* 2.4.106 TODO: verify supbook manipulation */
	function parse_ExternSheet(blob, length, opts) {
		if(opts.biff < 8) return parse_ShortXLUnicodeString(blob, length, opts);
		var o = [], target = blob.l + length, len = blob.read_shift(2);
		while(len-- !== 0) o.push(parse_XTI(blob, 6));
			// [iSupBook, itabFirst, itabLast];
		var oo = [];
		return o;
	}

	/* 2.4.176 TODO: check older biff */
	function parse_NameCmt(blob, length, opts) {
		if(opts.biff < 8) { blob.l += length; return; }
		var cchName = blob.read_shift(2);
		var cchComment = blob.read_shift(2);
		var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
		var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
		return [name, comment];
	}

	/* 2.4.260 */
	function parse_ShrFmla(blob, length, opts) {
		var ref = parse_RefU(blob, 6);
		blob.l++;
		var cUse = blob.read_shift(1);
		length -= 8;
		return [parse_SharedParsedFormula(blob, length, opts), cUse];
	}

	/* 2.4.4 TODO */
	function parse_Array(blob, length, opts) {
		var ref = parse_Ref(blob, 6);
		/* TODO: fAlwaysCalc */
		switch(opts.biff) {
			case 2: blob.l ++; length -= 7; break;
			case 3: case 4: blob.l += 2; length -= 8; break;
			default: blob.l += 6; length -= 12;
		}
		return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
	}

	/* 2.4.173 */
	function parse_MTRSettings(blob, length) {
		var fMTREnabled = blob.read_shift(4) !== 0x00;
		var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
		var cUserThreadCount = blob.read_shift(4);
		return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
	}

	/* 2.5.186 TODO: BIFF5 */
	function parse_NoteSh(blob, length, opts) {
		if(opts.biff < 8) return;
		var row = blob.read_shift(2), col = blob.read_shift(2);
		var flags = blob.read_shift(2), idObj = blob.read_shift(2);
		var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
		if(opts.biff < 8) blob.read_shift(1);
		return [{r:row,c:col}, stAuthor, idObj, flags];
	}

	/* 2.4.179 */
	function parse_Note(blob, length, opts) {
		/* TODO: Support revisions */
		return parse_NoteSh(blob, length, opts);
	}

	/* 2.4.168 */
	function parse_MergeCells(blob, length) {
		var merges = [];
		var cmcs = blob.read_shift(2);
		while (cmcs--) merges.push(parse_Ref8U(blob,length));
		return merges;
	}

	/* 2.4.181 TODO: parse all the things! */
	function parse_Obj(blob, length, opts) {
		if(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
		var cmo = parse_FtCmo(blob, 22); // id, ot, flags
		var fts = parse_FtArray(blob, length-22, cmo[1]);
		return { cmo: cmo, ft:fts };
	}
	/* from older spec */
	var parse_BIFF5OT = [];
	parse_BIFF5OT[0x08] = function(blob, length, opts) {
		var tgt = blob.l + length;
		blob.l += 10; // todo
		var cf = blob.read_shift(2);
		blob.l += 4;
		var cbPictFmla = blob.read_shift(2);
		blob.l += 2;
		var grbit = blob.read_shift(2);
		blob.l += 4;
		var cchName = blob.read_shift(1);
		blob.l += cchName; // TODO: stName
		blob.l = tgt; // TODO: fmla
		return { fmt:cf };
	};

	function parse_BIFF5Obj(blob, length, opts) {
		var cnt = blob.read_shift(4);
		var ot = blob.read_shift(2);
		var id = blob.read_shift(2);
		var grbit = blob.read_shift(2);
		var colL = blob.read_shift(2);
		var dxL = blob.read_shift(2);
		var rwT = blob.read_shift(2);
		var dyT = blob.read_shift(2);
		var colR = blob.read_shift(2);
		var dxR = blob.read_shift(2);
		var rwB = blob.read_shift(2);
		var dyB = blob.read_shift(2);
		var cbMacro = blob.read_shift(2);
		blob.l += 6;
		length -= 36;
		var fts = [];
		fts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));
		return { cmo: [id, ot, grbit], ft:fts };
	}

	/* 2.4.329 TODO: parse properly */
	function parse_TxO(blob, length, opts) {
		var s = blob.l;
		var texts = "";
	try {
		blob.l += 4;
		var ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];
		var controlInfo;
		if([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;
		else controlInfo = parse_ControlInfo(blob, 6, opts);
		var cchText = blob.read_shift(2);
		var cbRuns = blob.read_shift(2);
		var ifntEmpty = parse_FontIndex(blob, 2);
		var len = blob.read_shift(2);
		blob.l += len;
		//var fmla = parse_ObjFmla(blob, s + length - blob.l);

		for(var i = 1; i < blob.lens.length-1; ++i) {
			if(blob.l-s != blob.lens[i]) throw new Error("TxO: bad continue record");
			var hdr = blob[blob.l];
			var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);
			texts += t;
			if(texts.length >= (hdr ? cchText : 2*cchText)) break;
		}
		if(texts.length !== cchText && texts.length !== cchText*2) {
			throw new Error("cchText: " + cchText + " != " + texts.length);
		}

		blob.l = s + length;
		/* 2.5.272 TxORuns */
	//	var rgTxoRuns = [];
	//	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
	//	var cchText2 = blob.read_shift(2);
	//	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
	//	blob.l += 6;
	//	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
		return { t: texts };
	} catch(e) { blob.l = s + length; return { t: texts }; }
	}

	/* 2.4.140 */
	var parse_HLink = function(blob, length) {
		var ref = parse_Ref8U(blob, 8);
		blob.l += 16; /* CLSID */
		var hlink = parse_Hyperlink(blob, length-24);
		return [ref, hlink];
	};

	/* 2.4.141 */
	var parse_HLinkTooltip = function(blob, length) {
		var end = blob.l + length;
		blob.read_shift(2);
		var ref = parse_Ref8U(blob, 8);
		var wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');
		wzTooltip = wzTooltip.replace(chr0,"");
		return [ref, wzTooltip];
	};

	/* 2.4.63 */
	function parse_Country(blob, length) {
		var o = [], d;
		d = blob.read_shift(2); o[0] = CountryEnum[d] || d;
		d = blob.read_shift(2); o[1] = CountryEnum[d] || d;
		return o;
	}

	/* 2.4.50 ClrtClient */
	function parse_ClrtClient(blob, length) {
		var ccv = blob.read_shift(2);
		var o = [];
		while(ccv-->0) o.push(parse_LongRGB(blob, 8));
		return o;
	}

	/* 2.4.188 */
	function parse_Palette(blob, length) {
		var ccv = blob.read_shift(2);
		var o = [];
		while(ccv-->0) o.push(parse_LongRGB(blob, 8));
		return o;
	}

	/* 2.4.354 */
	function parse_XFCRC(blob, length) {
		blob.l += 2;
		var o = {cxfs:0, crc:0};
		o.cxfs = blob.read_shift(2);
		o.crc = blob.read_shift(4);
		return o;
	}

	/* 2.4.53 TODO: parse flags */
	/* [MS-XLSB] 2.4.323 TODO: parse flags */
	function parse_ColInfo(blob, length, opts) {
		if(!opts.cellStyles) return parsenoop(blob, length);
		var w = opts && opts.biff >= 12 ? 4 : 2;
		var colFirst = blob.read_shift(w);
		var colLast = blob.read_shift(w);
		var coldx = blob.read_shift(w);
		var ixfe = blob.read_shift(w);
		var flags = blob.read_shift(2);
		if(w == 2) blob.l += 2;
		return {s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags};
	}

	/* 2.4.257 */
	function parse_Setup(blob, length, opts) {
		var o = {};
		blob.l += 16;
		o.header = parse_Xnum(blob, 8);
		o.footer = parse_Xnum(blob, 8);
		blob.l += 2;
		return o;
	}

	/* 2.4.261 */
	function parse_ShtProps(blob, length, opts) {
		var def = {area:false};
		if(opts.biff != 5) { blob.l += length; return def; }
		var d = blob.read_shift(1); blob.l += 3;
		if((d & 0x10)) def.area = true;
		return def;
	}

	var parse_Style = parsenoop;
	var parse_StyleExt = parsenoop;

	var parse_Window2 = parsenoop;

	var parse_Backup = parsebool; /* 2.4.14 */
	var parse_Blank = parse_XLSCell; /* 2.4.20 Just the cell */
	var parse_BottomMargin = parse_Xnum; /* 2.4.27 */
	var parse_BuiltInFnGroupCount = parseuint16; /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */
	var parse_CalcCount = parseuint16; /* 2.4.31 #Iterations */
	var parse_CalcDelta = parse_Xnum; /* 2.4.32 */
	var parse_CalcIter = parsebool;  /* 2.4.33 1=iterative calc */
	var parse_CalcMode = parseuint16; /* 2.4.34 0=manual, 1=auto (def), 2=table */
	var parse_CalcPrecision = parsebool; /* 2.4.35 */
	var parse_CalcRefMode = parsenoop2; /* 2.4.36 */
	var parse_CalcSaveRecalc = parsebool; /* 2.4.37 */
	var parse_CodePage = parseuint16; /* 2.4.52 */
	var parse_Compat12 = parsebool; /* 2.4.54 true = no compatibility check */
	var parse_Date1904 = parsebool; /* 2.4.77 - 1=1904,0=1900 */
	var parse_DefColWidth = parseuint16; /* 2.4.89 */
	var parse_DSF = parsenoop2; /* 2.4.94 -- MUST be ignored */
	var parse_EntExU2 = parsenoop2; /* 2.4.102 -- Explicitly says to ignore */
	var parse_EOF = parsenoop2; /* 2.4.103 */
	var parse_Excel9File = parsenoop2; /* 2.4.104 -- Optional and unused */
	var parse_FeatHdr = parsenoop2; /* 2.4.112 */
	var parse_FontX = parseuint16; /* 2.4.123 */
	var parse_Footer = parse_XLHeaderFooter; /* 2.4.124 */
	var parse_GridSet = parseuint16; /* 2.4.132, =1 */
	var parse_HCenter = parsebool; /* 2.4.135 sheet centered horizontal on print */
	var parse_Header = parse_XLHeaderFooter; /* 2.4.136 */
	var parse_HideObj = parse_HideObjEnum; /* 2.4.139 */
	var parse_InterfaceEnd = parsenoop2; /* 2.4.145 -- noop */
	var parse_LeftMargin = parse_Xnum; /* 2.4.151 */
	var parse_Mms = parsenoop2; /* 2.4.169 -- Explicitly says to ignore */
	var parse_ObjProtect = parsebool; /* 2.4.183 -- must be 1 if present */
	var parse_Password = parseuint16; /* 2.4.191 */
	var parse_PrintGrid = parsebool; /* 2.4.202 */
	var parse_PrintRowCol = parsebool; /* 2.4.203 */
	var parse_PrintSize = parseuint16; /* 2.4.204 0:3 */
	var parse_Prot4Rev = parsebool; /* 2.4.205 */
	var parse_Prot4RevPass = parseuint16; /* 2.4.206 */
	var parse_Protect = parsebool; /* 2.4.207 */
	var parse_RefreshAll = parsebool; /* 2.4.217 -- must be 0 if not template */
	var parse_RightMargin = parse_Xnum; /* 2.4.219 */
	var parse_RRTabId = parseuint16a; /* 2.4.241 */
	var parse_ScenarioProtect = parsebool; /* 2.4.245 */
	var parse_Scl = parseuint16a; /* 2.4.247 num, den */
	var parse_String = parse_XLUnicodeString; /* 2.4.268 */
	var parse_SxBool = parsebool; /* 2.4.274 */
	var parse_TopMargin = parse_Xnum; /* 2.4.328 */
	var parse_UsesELFs = parsebool; /* 2.4.337 -- should be 0 */
	var parse_VCenter = parsebool; /* 2.4.342 */
	var parse_WinProtect = parsebool; /* 2.4.347 */
	var parse_WriteProtect = parsenoop; /* 2.4.350 empty record */


	/* ---- */
	var parse_VerticalPageBreaks = parsenoop;
	var parse_HorizontalPageBreaks = parsenoop;
	var parse_Selection = parsenoop;
	var parse_Continue = parsenoop;
	var parse_Pane = parsenoop;
	var parse_Pls = parsenoop;
	var parse_DCon = parsenoop;
	var parse_DConRef = parsenoop;
	var parse_DConName = parsenoop;
	var parse_XCT = parsenoop;
	var parse_CRN = parsenoop;
	var parse_FileSharing = parsenoop;
	var parse_Uncalced = parsenoop;
	var parse_Template = parsenoop;
	var parse_Intl = parsenoop;
	var parse_WsBool = parsenoop;
	var parse_Sort = parsenoop;
	var parse_Sync = parsenoop;
	var parse_LPr = parsenoop;
	var parse_DxGCol = parsenoop;
	var parse_FnGroupName = parsenoop;
	var parse_FilterMode = parsenoop;
	var parse_AutoFilterInfo = parsenoop;
	var parse_AutoFilter = parsenoop;
	var parse_ScenMan = parsenoop;
	var parse_SCENARIO = parsenoop;
	var parse_SxView = parsenoop;
	var parse_Sxvd = parsenoop;
	var parse_SXVI = parsenoop;
	var parse_SxIvd = parsenoop;
	var parse_SXLI = parsenoop;
	var parse_SXPI = parsenoop;
	var parse_DocRoute = parsenoop;
	var parse_RecipName = parsenoop;
	var parse_SXDI = parsenoop;
	var parse_SXDB = parsenoop;
	var parse_SXFDB = parsenoop;
	var parse_SXDBB = parsenoop;
	var parse_SXNum = parsenoop;
	var parse_SxErr = parsenoop;
	var parse_SXInt = parsenoop;
	var parse_SXString = parsenoop;
	var parse_SXDtr = parsenoop;
	var parse_SxNil = parsenoop;
	var parse_SXTbl = parsenoop;
	var parse_SXTBRGIITM = parsenoop;
	var parse_SxTbpg = parsenoop;
	var parse_ObProj = parsenoop;
	var parse_SXStreamID = parsenoop;
	var parse_DBCell = parsenoop;
	var parse_SXRng = parsenoop;
	var parse_SxIsxoper = parsenoop;
	var parse_BookBool = parsenoop;
	var parse_DbOrParamQry = parsenoop;
	var parse_OleObjectSize = parsenoop;
	var parse_SXVS = parsenoop;
	var parse_BkHim = parsenoop;
	var parse_MsoDrawingGroup = parsenoop;
	var parse_MsoDrawing = parsenoop;
	var parse_MsoDrawingSelection = parsenoop;
	var parse_PhoneticInfo = parsenoop;
	var parse_SxRule = parsenoop;
	var parse_SXEx = parsenoop;
	var parse_SxFilt = parsenoop;
	var parse_SxDXF = parsenoop;
	var parse_SxItm = parsenoop;
	var parse_SxName = parsenoop;
	var parse_SxSelect = parsenoop;
	var parse_SXPair = parsenoop;
	var parse_SxFmla = parsenoop;
	var parse_SxFormat = parsenoop;
	var parse_SXVDEx = parsenoop;
	var parse_SXFormula = parsenoop;
	var parse_SXDBEx = parsenoop;
	var parse_RRDInsDel = parsenoop;
	var parse_RRDHead = parsenoop;
	var parse_RRDChgCell = parsenoop;
	var parse_RRDRenSheet = parsenoop;
	var parse_RRSort = parsenoop;
	var parse_RRDMove = parsenoop;
	var parse_RRFormat = parsenoop;
	var parse_RRAutoFmt = parsenoop;
	var parse_RRInsertSh = parsenoop;
	var parse_RRDMoveBegin = parsenoop;
	var parse_RRDMoveEnd = parsenoop;
	var parse_RRDInsDelBegin = parsenoop;
	var parse_RRDInsDelEnd = parsenoop;
	var parse_RRDConflict = parsenoop;
	var parse_RRDDefName = parsenoop;
	var parse_RRDRstEtxp = parsenoop;
	var parse_LRng = parsenoop;
	var parse_CUsr = parsenoop;
	var parse_CbUsr = parsenoop;
	var parse_UsrInfo = parsenoop;
	var parse_UsrExcl = parsenoop;
	var parse_FileLock = parsenoop;
	var parse_RRDInfo = parsenoop;
	var parse_BCUsrs = parsenoop;
	var parse_UsrChk = parsenoop;
	var parse_UserBView = parsenoop;
	var parse_UserSViewBegin = parsenoop; // overloaded
	var parse_UserSViewEnd = parsenoop;
	var parse_RRDUserView = parsenoop;
	var parse_Qsi = parsenoop;
	var parse_CondFmt = parsenoop;
	var parse_CF = parsenoop;
	var parse_DVal = parsenoop;
	var parse_DConBin = parsenoop;
	var parse_Lel = parsenoop;
	var parse_XLSCodeName = parse_XLUnicodeString;
	var parse_SXFDBType = parsenoop;
	var parse_ObNoMacros = parsenoop;
	var parse_Dv = parsenoop;
	var parse_Index = parsenoop;
	var parse_Table = parsenoop;
	var parse_BigName = parsenoop;
	var parse_ContinueBigName = parsenoop;
	var parse_WebPub = parsenoop;
	var parse_QsiSXTag = parsenoop;
	var parse_DBQueryExt = parsenoop;
	var parse_ExtString = parsenoop;
	var parse_TxtQry = parsenoop;
	var parse_Qsir = parsenoop;
	var parse_Qsif = parsenoop;
	var parse_RRDTQSIF = parsenoop;
	var parse_OleDbConn = parsenoop;
	var parse_WOpt = parsenoop;
	var parse_SXViewEx = parsenoop;
	var parse_SXTH = parsenoop;
	var parse_SXPIEx = parsenoop;
	var parse_SXVDTEx = parsenoop;
	var parse_SXViewEx9 = parsenoop;
	var parse_ContinueFrt = parsenoop;
	var parse_RealTimeData = parsenoop;
	var parse_ChartFrtInfo = parsenoop;
	var parse_FrtWrapper = parsenoop;
	var parse_StartBlock = parsenoop;
	var parse_EndBlock = parsenoop;
	var parse_StartObject = parsenoop;
	var parse_EndObject = parsenoop;
	var parse_CatLab = parsenoop;
	var parse_YMult = parsenoop;
	var parse_SXViewLink = parsenoop;
	var parse_PivotChartBits = parsenoop;
	var parse_FrtFontList = parsenoop;
	var parse_SheetExt = parsenoop;
	var parse_BookExt = parsenoop;
	var parse_SXAddl = parsenoop;
	var parse_CrErr = parsenoop;
	var parse_HFPicture = parsenoop;
	var parse_Feat = parsenoop;
	var parse_DataLabExt = parsenoop;
	var parse_DataLabExtContents = parsenoop;
	var parse_CellWatch = parsenoop;
	var parse_FeatHdr11 = parsenoop;
	var parse_Feature11 = parsenoop;
	var parse_DropDownObjIds = parsenoop;
	var parse_ContinueFrt11 = parsenoop;
	var parse_DConn = parsenoop;
	var parse_List12 = parsenoop;
	var parse_Feature12 = parsenoop;
	var parse_CondFmt12 = parsenoop;
	var parse_CF12 = parsenoop;
	var parse_CFEx = parsenoop;
	var parse_AutoFilter12 = parsenoop;
	var parse_ContinueFrt12 = parsenoop;
	var parse_MDTInfo = parsenoop;
	var parse_MDXStr = parsenoop;
	var parse_MDXTuple = parsenoop;
	var parse_MDXSet = parsenoop;
	var parse_MDXProp = parsenoop;
	var parse_MDXKPI = parsenoop;
	var parse_MDB = parsenoop;
	var parse_PLV = parsenoop;
	var parse_DXF = parsenoop;
	var parse_TableStyles = parsenoop;
	var parse_TableStyle = parsenoop;
	var parse_TableStyleElement = parsenoop;
	var parse_NamePublish = parsenoop;
	var parse_SortData = parsenoop;
	var parse_GUIDTypeLib = parsenoop;
	var parse_FnGrp12 = parsenoop;
	var parse_NameFnGrp12 = parsenoop;
	var parse_HeaderFooter = parsenoop;
	var parse_CrtLayout12 = parsenoop;
	var parse_CrtMlFrt = parsenoop;
	var parse_CrtMlFrtContinue = parsenoop;
	var parse_ShapePropsStream = parsenoop;
	var parse_TextPropsStream = parsenoop;
	var parse_RichTextStream = parsenoop;
	var parse_CrtLayout12A = parsenoop;
	var parse_Units = parsenoop;
	var parse_Chart = parsenoop;
	var parse_Series = parsenoop;
	var parse_DataFormat = parsenoop;
	var parse_LineFormat = parsenoop;
	var parse_MarkerFormat = parsenoop;
	var parse_AreaFormat = parsenoop;
	var parse_PieFormat = parsenoop;
	var parse_AttachedLabel = parsenoop;
	var parse_SeriesText = parsenoop;
	var parse_ChartFormat = parsenoop;
	var parse_Legend = parsenoop;
	var parse_SeriesList = parsenoop;
	var parse_Bar = parsenoop;
	var parse_Line = parsenoop;
	var parse_Pie = parsenoop;
	var parse_Area = parsenoop;
	var parse_Scatter = parsenoop;
	var parse_CrtLine = parsenoop;
	var parse_Axis = parsenoop;
	var parse_Tick = parsenoop;
	var parse_ValueRange = parsenoop;
	var parse_CatSerRange = parsenoop;
	var parse_AxisLine = parsenoop;
	var parse_CrtLink = parsenoop;
	var parse_DefaultText = parsenoop;
	var parse_Text = parsenoop;
	var parse_ObjectLink = parsenoop;
	var parse_Frame = parsenoop;
	var parse_Begin = parsenoop;
	var parse_End = parsenoop;
	var parse_PlotArea = parsenoop;
	var parse_Chart3d = parsenoop;
	var parse_PicF = parsenoop;
	var parse_DropBar = parsenoop;
	var parse_Radar = parsenoop;
	var parse_Surf = parsenoop;
	var parse_RadarArea = parsenoop;
	var parse_AxisParent = parsenoop;
	var parse_LegendException = parsenoop;
	var parse_SerToCrt = parsenoop;
	var parse_AxesUsed = parsenoop;
	var parse_SBaseRef = parsenoop;
	var parse_SerParent = parsenoop;
	var parse_SerAuxTrend = parsenoop;
	var parse_IFmtRecord = parsenoop;
	var parse_Pos = parsenoop;
	var parse_AlRuns = parsenoop;
	var parse_BRAI = parsenoop;
	var parse_SerAuxErrBar = parsenoop;
	var parse_SerFmt = parsenoop;
	var parse_Chart3DBarShape = parsenoop;
	var parse_Fbi = parsenoop;
	var parse_BopPop = parsenoop;
	var parse_AxcExt = parsenoop;
	var parse_Dat = parsenoop;
	var parse_PlotGrowth = parsenoop;
	var parse_SIIndex = parsenoop;
	var parse_GelFrame = parsenoop;
	var parse_BopPopCustom = parsenoop;
	var parse_Fbi2 = parsenoop;

	/* --- Specific to versions before BIFF8 --- */
	function parse_ImData(blob, length, opts) {
		var tgt = blob.l + length;
		var cf = blob.read_shift(2);
		var env = blob.read_shift(2);
		var lcb = blob.read_shift(4);
		var o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};
		blob.l += lcb;
		return o;
	}

	function parse_BIFF5String(blob) {
		var len = blob.read_shift(1);
		return blob.read_shift(len, 'sbcs-cont');
	}

	/* BIFF2_??? where ??? is the name from [XLS] */
	function parse_BIFF2STR(blob, length, opts) {
		var cell = parse_XLSCell(blob, 6);
		++blob.l;
		var str = parse_XLUnicodeString2(blob, length-7, opts);
		cell.t = 'str';
		cell.val = str;
		return cell;
	}

	function parse_BIFF2NUM(blob, length, opts) {
		var cell = parse_XLSCell(blob, 6);
		++blob.l;
		var num = parse_Xnum(blob, 8);
		cell.t = 'n';
		cell.val = num;
		return cell;
	}

	function parse_BIFF2INT(blob, length) {
		var cell = parse_XLSCell(blob, 6);
		++blob.l;
		var num = blob.read_shift(2);
		cell.t = 'n';
		cell.val = num;
		return cell;
	}

	function parse_BIFF2STRING(blob, length) {
		var cch = blob.read_shift(1);
		if(cch === 0) { blob.l++; return ""; }
		return blob.read_shift(cch, 'sbcs-cont');
	}

	/* TODO: convert to BIFF8 font struct */
	function parse_BIFF2FONTXTRA(blob, length) {
		blob.l += 6; // unknown
		blob.l += 2; // font weight "bls"
		blob.l += 1; // charset
		blob.l += 3; // unknown
		blob.l += 1; // font family
		blob.l += length - 13;
	}

	/* TODO: parse rich text runs */
	function parse_RString(blob, length, opts) {
		var end = blob.l + length;
		var cell = parse_XLSCell(blob, 6);
		var cch = blob.read_shift(2);
		var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
		blob.l = end;
		cell.t = 'str';
		cell.val = str;
		return cell;
	}
	/* from js-harb (C) 2014-present  SheetJS */
	var DBF = (function() {
	var dbf_codepage_map = {
		/* Code Pages Supported by Visual FoxPro */
	0x01:   437,           0x02:   850,
	0x03:  1252,           0x04: 10000,
	0x64:   852,           0x65:   866,
	0x66:   865,           0x67:   861,
	0x68:   895,           0x69:   620,
	0x6A:   737,           0x6B:   857,
	0x78:   950,           0x79:   949,
	0x7A:   936,           0x7B:   932,
	0x7C:   874,           0x7D:  1255,
	0x7E:  1256,           0x96: 10007,
	0x97: 10029,           0x98: 10006,
	0xC8:  1250,           0xC9:  1251,
	0xCA:  1254,           0xCB:  1253,

		/* shapefile DBF extension */
	0x00: 20127,           0x08:   865,
	0x09:   437,           0x0A:   850,
	0x0B:   437,           0x0D:   437,
	0x0E:   850,           0x0F:   437,
	0x10:   850,           0x11:   437,
	0x12:   850,           0x13:   932,
	0x14:   850,           0x15:   437,
	0x16:   850,           0x17:   865,
	0x18:   437,           0x19:   437,
	0x1A:   850,           0x1B:   437,
	0x1C:   863,           0x1D:   850,
	0x1F:   852,           0x22:   852,
	0x23:   852,           0x24:   860,
	0x25:   850,           0x26:   866,
	0x37:   850,           0x40:   852,
	0x4D:   936,           0x4E:   949,
	0x4F:   950,           0x50:   874,
	0x57:  1252,           0x58:  1252,
	0x59:  1252,

	0xFF: 16969
	};

	/* TODO: find an actual specification */
	function dbf_to_aoa(buf, opts) {
		var out = [];
		/* TODO: browser based */
		var d = (new_raw_buf(1));
		switch(opts.type) {
			case 'base64': d = s2a(Base64.decode(buf)); break;
			case 'binary': d = s2a(buf); break;
			case 'buffer':
			case 'array': d = buf; break;
		}
		prep_blob(d, 0);
		/* header */
		var ft = d.read_shift(1);
		var memo = false;
		var vfp = false;
		switch(ft) {
			case 0x02: case 0x03: break;
			case 0x30: vfp = true; memo = true; break;
			case 0x31: vfp = true; break;
			case 0x83: memo = true; break;
			case 0x8B: memo = true; break;
			case 0xF5: memo = true; break;
			default: throw new Error("DBF Unsupported Version: " + ft.toString(16));
		}
		var filedate = new Date(), nrow = 0, fpos = 0;
		if(ft == 0x02) nrow = d.read_shift(2);
		filedate = new Date(d.read_shift(1) + 1900, d.read_shift(1) - 1, d.read_shift(1));
		if(ft != 0x02) nrow = d.read_shift(4);
		if(ft != 0x02) fpos = d.read_shift(2);
		var rlen = d.read_shift(2);

		var flags = 0, current_cp = 1252;
		if(ft != 0x02) {
		d.l+=16;
		flags = d.read_shift(1);
		//if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));

		/* codepage present in FoxPro */
		if(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
		d.l+=1;

		d.l+=2;
		}
		var fields = [], field = {};
		var hend = fpos - 10 - (vfp ? 264 : 0);
		while(ft == 0x02 ? d.l < d.length && d[d.l] != 0x0d: d.l < hend) {
			field = {};
			field.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l+10)).replace(/[\u0000\r\n].*$/g,"");
			d.l += 11;
			field.type = String.fromCharCode(d.read_shift(1));
			if(ft != 0x02) field.offset = d.read_shift(4);
			field.len = d.read_shift(1);
			if(ft == 0x02) field.offset = d.read_shift(2);
			field.dec = d.read_shift(1);
			if(field.name.length) fields.push(field);
			if(ft != 0x02) d.l += 14;
			switch(field.type) {
				// case 'B': break; // Binary
				case 'C': break; // character
				case 'D': break; // date
				case 'F': break; // floating point
				// case 'G': break; // General
				case 'I': break; // long
				case 'L': break; // boolean
				case 'M': break; // memo
				case 'N': break; // number
				// case 'O': break; // double
				// case 'P': break; // Picture
				case 'T': break; // datetime
				case 'Y': break; // currency
				case '0': break; // null ?
				case '+': break; // autoincrement
				case '@': break; // timestamp
				default: throw new Error('Unknown Field Type: ' + field.type);
			}
		}
		if(d[d.l] !== 0x0D) d.l = fpos-1;
		else if(ft == 0x02) d.l = 0x209;
		if(ft != 0x02) {
			if(d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
			d.l = fpos;
		}
		/* data */
		var R = 0, C = 0;
		out[0] = [];
		for(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
		while(nrow-- > 0) {
			if(d[d.l] === 0x2A) { d.l+=rlen; continue; }
			++d.l;
			out[++R] = []; C = 0;
			for(C = 0; C != fields.length; ++C) {
				var dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;
				prep_blob(dd, 0);
				var s = cptable.utils.decode(current_cp, dd);
				switch(fields[C].type) {
					case 'C':
						out[R][C] = cptable.utils.decode(current_cp, dd);
						out[R][C] = out[R][C].trim();
						break;
					case 'D':
						if(s.length === 8) out[R][C] = new Date(+s.substr(0,4), +s.substr(4,2)-1, +s.substr(6,2));
						else out[R][C] = s;
						break;
					case 'F': out[R][C] = parseFloat(s.trim()); break;
					case 'I': out[R][C] = dd.read_shift(4, 'i'); break;
					case 'L': switch(s.toUpperCase()) {
						case 'Y': case 'T': out[R][C] = true; break;
						case 'N': case 'F': out[R][C] = false; break;
						case ' ': case '?': out[R][C] = false; break; /* NOTE: technically unitialized */
						default: throw new Error("DBF Unrecognized L:|" + s + "|");
						} break;
					case 'M': /* TODO: handle memo files */
						if(!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
						out[R][C] = "##MEMO##" + dd.read_shift(4);
						break;
					case 'N': out[R][C] = +s.replace(/\u0000/g,"").trim(); break;
					case 'T':
						var day = dd.read_shift(4), ms = dd.read_shift(4);
						throw new Error(day + " | " + ms);
						//out[R][C] = new Date(); // TODO
						//break;
					case 'Y': out[R][C] = dd.read(4,'i')/1e4; break;
					case '0':
						if(fields[C].name === '_NullFlags') break;
						/* falls through */
					default: throw new Error("DBF Unsupported data type " + fields[C].type);
				}
			}
		}
		if(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l-1) + " of " + d.length + " " + d[d.l-1].toString(16));
		return out;
	}

	function dbf_to_sheet(buf, opts) {
		var o = opts || {};
		if(!o.dateNF) o.dateNF = "yyyymmdd";
		return aoa_to_sheet(dbf_to_aoa(buf, o), o);
	}

	function dbf_to_workbook(buf, opts) {
		try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }
		catch(e) { if(opts && opts.WTF) throw e; }
		return ({SheetNames:[],Sheets:{}});
	}
		return {
			to_workbook: dbf_to_workbook,
			to_sheet: dbf_to_sheet
		};
	})();

	var SYLK = (function() {
		/* TODO: find an actual specification */
		function sylk_to_aoa(d, opts) {
			switch(opts.type) {
				case 'base64': return sylk_to_aoa_str(Base64.decode(d), opts);
				case 'binary': return sylk_to_aoa_str(d, opts);
				case 'buffer': return sylk_to_aoa_str(d.toString('binary'), opts);
				case 'array': return sylk_to_aoa_str(cc2str(d), opts);
			}
			throw new Error("Unrecognized type " + opts.type);
		}
		function sylk_to_aoa_str(str, opts) {
			var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
			var formats = [];
			var next_cell_format = null;
			var sht = {}, rowinfo = [], colinfo = [], cw = [];
			var Mval = 0, j;
			for (; ri !== records.length; ++ri) {
				Mval = 0;
				var rstr=records[ri].trim();
				var record=rstr.replace(/;;/g, "\u0001").split(";").map(function(x) { return x.replace(/\u0001/g, ";"); });
				var RT=record[0], val;
				if(rstr.length > 0) switch(RT) {
				case 'ID': break; /* header */
				case 'E': break; /* EOF */
				case 'B': break; /* dimensions */
				case 'O': break; /* options? */
				case 'P':
					if(record[1].charAt(0) == 'P')
						formats.push(rstr.substr(3).replace(/;;/g, ";"));
					break;
				case 'C':
				for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
					case 'X': C = parseInt(record[rj].substr(1))-1; break;
					case 'Y':
						R = parseInt(record[rj].substr(1))-1; C = 0;
						for(j = arr.length; j <= R; ++j) arr[j] = [];
						break;
					case 'K':
						val = record[rj].substr(1);
						if(val.charAt(0) === '"') val = val.substr(1,val.length - 2);
						else if(val === 'TRUE') val = true;
						else if(val === 'FALSE') val = false;
						else if(+val === +val) {
							val = +val;
							if(next_cell_format !== null && SSF.is_date(next_cell_format)) val = numdate(val);
						}
						arr[R][C] = val;
						next_cell_format = null;
						break;
					case 'E':
						formula = rc_to_a1(record[rj].substr(1), {r:R,c:C});
						arr[R][C] = [arr[R][C], formula];
						break;
					default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				} break;
				case 'F':
				var F_seen = 0;
				for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
					case 'X': C = parseInt(record[rj].substr(1))-1; ++F_seen; break;
					case 'Y':
						R = parseInt(record[rj].substr(1))-1; /*C = 0;*/
						for(j = arr.length; j <= R; ++j) arr[j] = [];
						++F_seen; break;
					case 'M': Mval = parseInt(record[rj].substr(1)) / 20; break;
					case 'F': break; /* ??? */
					case 'P':
						next_cell_format = formats[parseInt(record[rj].substr(1))];
						break;
					case 'S': break; /* cell style */
					case 'D': break; /* column */
					case 'N': break; /* font */
					case 'W':
						cw = record[rj].substr(1).split(" ");
						for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
							Mval = parseInt(cw[2], 10);
							colinfo[j-1] = Mval == 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);
						} break;
					case 'C': /* default column format */
						C = parseInt(record[rj].substr(1))-1;
						if(!colinfo[C]) colinfo[C] = {};
						break;
					case 'R': /* row properties */
						R = parseInt(record[rj].substr(1))-1;
						if(!rowinfo[R]) rowinfo[R] = {};
						if(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }
						else if(Mval == 0) rowinfo[R].hidden = true;
						break;
					default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				}
				if(F_seen < 2) next_cell_format = null; break;
				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
				}
			}
			if(rowinfo.length > 0) sht['!rows'] = rowinfo;
			if(colinfo.length > 0) sht['!cols'] = colinfo;
			arr[arr.length] = sht;
			return arr;
		}

		function sylk_to_sheet(str, opts) {
			var aoa = sylk_to_aoa(str, opts);
			var ws = aoa.pop();
			var o = aoa_to_sheet(aoa, opts);
			keys(ws).forEach(function(k) { o[k] = ws[k]; });
			return o;
		}

		function sylk_to_workbook(str, opts) { return sheet_to_workbook(sylk_to_sheet(str, opts), opts); }

		function write_ws_cell_sylk(cell, ws, R, C, opts) {
			var o = "C;Y" + (R+1) + ";X" + (C+1) + ";K";
			switch(cell.t) {
				case 'n':
					o += (cell.v||0);
					if(cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {r:R, c:C}); break;
				case 'b': o += cell.v ? "TRUE" : "FALSE"; break;
				case 'e': o += cell.w || cell.v; break;
				case 'd': o += '"' + (cell.w || cell.v) + '"'; break;
				case 's': o += '"' + cell.v.replace(/"/g,"") + '"'; break;
			}
			return o;
		}

		function write_ws_cols_sylk(out, cols) {
			cols.forEach(function(col, i) {
				var rec = "F;W" + (i+1) + " " + (i+1) + " ";
				if(col.hidden) rec += "0";
				else {
					if(typeof col.width == 'number') col.wpx = width2px(col.width);
					if(typeof col.wpx == 'number') col.wch = px2char(col.wpx);
					if(typeof col.wch == 'number') rec += Math.round(col.wch);
				}
				if(rec.charAt(rec.length - 1) != " ") out.push(rec);
			});
		}

		function write_ws_rows_sylk(out, rows) {
			rows.forEach(function(row, i) {
				var rec = "F;";
				if(row.hidden) rec += "M0;";
				else if(row.hpt) rec += "M" + 20 * row.hpt + ";";
				else if(row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
				if(rec.length > 2) out.push(rec + "R" + (i+1));
			});
		}

		function sheet_to_sylk(ws, opts) {
			var preamble = ["ID;PWXL;N;E"], o = [];
			var r = decode_range(ws['!ref']), cell;
			var dense = Array.isArray(ws);
			var RS = "\r\n";

			preamble.push("P;PGeneral");
			preamble.push("F;P0;DG0G8;M255");
			if(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
			if(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);

			preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c,r.s.r,r.e.c,r.e.r].join(" "));
			for(var R = r.s.r; R <= r.e.r; ++R) {
				for(var C = r.s.c; C <= r.e.c; ++C) {
					var coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C]: ws[coord];
					if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
					o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
				}
			}
			return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
		}

		return {
			to_workbook: sylk_to_workbook,
			to_sheet: sylk_to_sheet,
			from_sheet: sheet_to_sylk
		};
	})();

	var DIF = (function() {
		function dif_to_aoa(d, opts) {
			switch(opts.type) {
				case 'base64': return dif_to_aoa_str(Base64.decode(d), opts);
				case 'binary': return dif_to_aoa_str(d, opts);
				case 'buffer': return dif_to_aoa_str(d.toString('binary'), opts);
				case 'array': return dif_to_aoa_str(cc2str(d), opts);
			}
			throw new Error("Unrecognized type " + opts.type);
		}
		function dif_to_aoa_str(str, opts) {
			var records = str.split('\n'), R = -1, C = -1, ri = 0, arr = [];
			for (; ri !== records.length; ++ri) {
				if (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }
				if (R < 0) continue;
				var metadata = records[ri].trim().split(",");
				var type = metadata[0], value = metadata[1];
				++ri;
				var data = records[ri].trim();
				switch (+type) {
					case -1:
						if (data === 'BOT') { arr[++R] = []; C = 0; continue; }
						else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);
						break;
					case 0:
						if(data === 'TRUE') arr[R][C] = true;
						else if(data === 'FALSE') arr[R][C] = false;
						else if(+value == +value) arr[R][C] = +value;
						else if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
						else arr[R][C] = value;
						++C; break;
					case 1:
						data = data.substr(1,data.length-2);
						arr[R][C++] = data !== '' ? data : null;
						break;
				}
				if (data === 'EOD') break;
			}
			return arr;
		}

		function dif_to_sheet(str, opts) { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }
		function dif_to_workbook(str, opts) { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }

		var sheet_to_dif = (function() {
			var push_field = function pf(o, topic, v, n, s) {
				o.push(topic);
				o.push(v + "," + n);
				o.push('"' + s.replace(/"/g,'""') + '"');
			};
			var push_value = function po(o, type, v, s) {
				o.push(type + "," + v);
				o.push(type == 1 ? '"' + s.replace(/"/g,'""') + '"' : s);
			};
			return function sheet_to_dif(ws, opts) {
				var o = [];
				var r = decode_range(ws['!ref']), cell;
				var dense = Array.isArray(ws);
				push_field(o, "TABLE", 0, 1, "sheetjs");
				push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1,"");
				push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1,"");
				push_field(o, "DATA", 0, 0,"");
				for(var R = r.s.r; R <= r.e.r; ++R) {
					push_value(o, -1, 0, "BOT");
					for(var C = r.s.c; C <= r.e.c; ++C) {
						var coord = encode_cell({r:R,c:C});
						cell = dense ? (ws[R]||[])[C] : ws[coord];
						if(!cell) { push_value(o, 1, 0, ""); continue;}
						switch(cell.t) {
							case 'n':
								var val = DIF_XL ? cell.w : cell.v;
								if(!val && cell.v != null) val = cell.v;
								if(val == null) {
									if(DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
									else push_value(o, 1, 0, "");
								}
								else push_value(o, 0, val, "V");
								break;
							case 'b':
								push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
								break;
							case 's':
								push_value(o, 1, 0, (!DIF_XL || isNaN(cell.v)) ? cell.v : '="' + cell.v + '"');
								break;
							case 'd':
								if(!cell.w) cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v)));
								if(DIF_XL) push_value(o, 0, cell.w, "V");
								else push_value(o, 1, 0, cell.w);
								break;
							default: push_value(o, 1, 0, "");
						}
					}
				}
				push_value(o, -1, 0, "EOD");
				var RS = "\r\n";
				var oo = o.join(RS);
				//while((oo.length & 0x7F) != 0) oo += "\0";
				return oo;
			};
		})();
		return {
			to_workbook: dif_to_workbook,
			to_sheet: dif_to_sheet,
			from_sheet: sheet_to_dif
		};
	})();

	var PRN = (function() {
		function set_text_arr(data, arr, R, C) {
			if(data === 'TRUE') arr[R][C] = true;
			else if(data === 'FALSE') arr[R][C] = false;
			else if(data === ""){/* empty */}
			else if(+data == +data) arr[R][C] = +data;
			else arr[R][C] = data;
		}

		function prn_to_aoa_str(f, opts) {
			var arr = ([]);
			if(!f || f.length === 0) return arr;
			var lines = f.split(/[\r\n]/);
			var L = lines.length - 1;
			while(L >= 0 && lines[L].length === 0) --L;
			var start = 10, idx = 0;
			var R = 0;
			for(; R <= L; ++R) {
				idx = lines[R].indexOf(" ");
				if(idx == -1) idx = lines[R].length; else idx++;
				start = Math.max(start, idx);
			}
			for(R = 0; R <= L; ++R) {
				arr[R] = [];
				/* TODO: confirm that widths are always 10 */
				var C = 0;
				set_text_arr(lines[R].slice(0, start).trim(), arr, R, C);
				for(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)
					set_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C);
			}
			return arr;
		}

		function dsv_to_sheet_str(str, opts) {
			var o = opts || {};
			var sep = "";
			if(DENSE != null && o.dense == null) o.dense = DENSE;
			var ws = o.dense ? ([]) : ({});
			var range = ({s: {c:0, r:0}, e: {c:0, r:0}});

			/* known sep */
			if(str.substr(0,4) == "sep=" && str.charCodeAt(5) == 10) { sep = str.charAt(4); str = str.substr(6); }
			else if(str.substr(0,1024).indexOf("\t") == -1) sep = ","; else sep = "\t";
			var R = 0, C = 0, v = 0;
			var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0;
			str = str.replace(/\r\n/mg, "\n");
			function finish_cell() {
				var s = str.slice(start, end);
				var cell = ({});
				if(s.charCodeAt(0) == 0x3D) { cell.t = 'n'; cell.f = s.substr(1); }
				else if(s == "TRUE") { cell.t = 'b'; cell.v = true; }
				else if(s == "FALSE") { cell.t = 'b'; cell.v = false; }
				else if(!isNaN(v = +s)) { cell.t = 'n'; cell.w = s; cell.v = v; }
				else if(!isNaN(fuzzydate(s).getDate())) { cell.t = 'd'; cell.v = parseDate(s); }
				else {
					cell.t = 's';
					if(s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1,-1).replace(/""/g,'"');
					cell.v = s;
				}
				if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }
				else ws[encode_cell({c:C,r:R})] = cell;
				start = end+1;
				if(range.e.c < C) range.e.c = C;
				if(range.e.r < R) range.e.r = R;
				if(cc == sepcc) ++C; else { C = 0; ++R; }
			}
			for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {
				case 0x22: if(instr || (end - start == 0)) instr = !instr; break;
				case sepcc: case 0x0a: case 0x0d: if(!instr) finish_cell(); break;
				default: break;
			}
			if(end - start > 0) finish_cell();

			ws['!ref'] = encode_range(range);
			return ws;
		}

		function prn_to_sheet_str(str, opts) {
			if(str.substr(0,4) == "sep=") return dsv_to_sheet_str(str, opts);
			if(str.indexOf("\t") >= 0 || str.indexOf(",") >= 0) return dsv_to_sheet_str(str, opts);
			return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
		}

		function prn_to_sheet(d, opts) {
			var str = "", bytes = firstbyte(d, opts);
			switch(opts.type) {
				case 'base64': str = Base64.decode(d); break;
				case 'binary': str = d; break;
				case 'buffer': str = d.toString('binary'); break;
				case 'array': str = cc2str(d); break;
				default: throw new Error("Unrecognized type " + opts.type);
			}
			if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
			return prn_to_sheet_str(str, opts);
		}

		function prn_to_workbook(str, opts) { return sheet_to_workbook(prn_to_sheet(str, opts), opts); }

		function sheet_to_prn(ws, opts) {
			var o = [];
			var r = decode_range(ws['!ref']), cell;
			var dense = Array.isArray(ws);
			for(var R = r.s.r; R <= r.e.r; ++R) {
				var oo = [];
				for(var C = r.s.c; C <= r.e.c; ++C) {
					var coord = encode_cell({r:R,c:C});
					cell = dense ? (ws[R]||[])[C] : ws[coord];
					if(!cell || cell.v == null) { oo.push("          "); continue; }
					var w = (cell.w || (format_cell(cell), cell.w) || "").substr(0,10);
					while(w.length < 10) w += " ";
					oo.push(w + (C == 0 ? " " : ""));
				}
				o.push(oo.join(""));
			}
			return o.join("\n");
		}

		return {
			to_workbook: prn_to_workbook,
			to_sheet: prn_to_sheet,
			from_sheet: sheet_to_prn
		};
	})();

	/* Excel defaults to SYLK but warns if data is not valid */
	function read_wb_ID(d, opts) {
		var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;
		try {
			var out = SYLK.to_workbook(d, o);
			o.WTF = OLD_WTF;
			return out;
		} catch(e) {
			o.WTF = OLD_WTF;
			if(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
			return PRN.to_workbook(d, opts);
		}
	}

	var WK_ = (function() {
		function lotushopper(data, cb, opts) {
			if(!data) return;
			prep_blob(data, data.l || 0);
			var Enum = opts.Enum || WK1Enum;
			while(data.l < data.length) {
				var RT = data.read_shift(2);
				var R = Enum[RT] || Enum[0xFF];
				var length = data.read_shift(2);
				var tgt = data.l + length;
				var d = R.f(data, length, opts);
				data.l = tgt;
				if(cb(d, R.n, RT)) return;
			}
		}

		function lotus_to_workbook(d, opts) {
			switch(opts.type) {
				case 'base64': return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts);
				case 'binary': return lotus_to_workbook_buf(s2a(d), opts);
				case 'buffer':
				case 'array': return lotus_to_workbook_buf(d, opts);
			}
			throw "Unsupported type " + opts.type;
		}

		function lotus_to_workbook_buf(d,opts) {
			if(!d) return d;
			var o = opts || {};
			if(DENSE != null && o.dense == null) o.dense = DENSE;
			var s = ((o.dense ? [] : {})), n = "Sheet1", sidx = 0;
			var sheets = {}, snames = [n];

			var refguess = {s: {r:0, c:0}, e: {r:0, c:0} };

			if(d[2] == 0x02) o.Enum = WK1Enum;
			else if(d[2] == 0x1a) o.Enum = WK3Enum;
			else if(d[2] == 0x0e) { o.Enum = WK3Enum; o.qpro = true; d.l = 0; }
			else throw new Error("Unrecognized LOTUS BOF " + d[2]);
			lotushopper(d, function(val, Rn, RT) {
				if(d[2] == 0x02) switch(RT) {
					case 0x00:
						o.vers = val;
						if(val >= 0x1000) o.qpro = true;
						break;
					case 0x06: refguess = val; break; /* RANGE */
					case 0x0F: /* LABEL */
						if(!o.qpro) val[1].v = val[1].v.substr(1);
						/* falls through */
					case 0x0D: /* INTEGER */
					case 0x0E: /* NUMBER */
					case 0x10: /* FORMULA */
					case 0x33: /* STRING */
						if(o.dense) {
							if(!s[val[0].r]) s[val[0].r] = [];
							s[val[0].r][val[0].c] = val[1];
						} else s[encode_cell(val[0])] = val[1];
						/* TODO: FORMAT */
						break;
				} else switch(RT) {
					case 0x16: /* LABEL16 */
						val[1].v = val[1].v.substr(1);
						/* falls through */
					case 0x17: /* NUMBER17 */
					case 0x18: /* NUMBER18 */
					case 0x19: /* FORMULA19 */
					case 0x25: /* NUMBER25 */
					case 0x27: /* NUMBER27 */
					case 0x28: /* FORMULA28 */
						if(val[3] > sidx) {
							s["!ref"] = encode_range(refguess);
							sheets[n] = s;
							s = (o.dense ? [] : {});
							refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
							sidx = val[3]; n = "Sheet" + (sidx + 1);
							snames.push(n);
						}
						s[encode_cell(val[0])] = val[1];
						if(refguess.e.c < val[0].c) refguess.e.c = val[0].c;
						if(refguess.e.r < val[0].r) refguess.e.r = val[0].r;
						break;
					default: break;
				}
			}, o);

			s["!ref"] = encode_range(refguess);
			sheets[n] = s;
			return { SheetNames: snames, Sheets:sheets };
		}

		function parse_RANGE(blob, length) {
			var o = {s:{c:0,r:0},e:{c:0,r:0}};
			o.s.c = blob.read_shift(2);
			o.s.r = blob.read_shift(2);
			o.e.c = blob.read_shift(2);
			o.e.r = blob.read_shift(2);
			if(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
			return o;
		}

		function parse_cell(blob, length, opts) {
			var o = [{c:0,r:0}, {t:'n',v:0}, 0];
			if(opts.qpro && opts.vers != 0x5120) {
				o[0].c = blob.read_shift(1);
				blob.l++;
				o[0].r = blob.read_shift(2);
				blob.l+=2;
			} else {
				o[2] = blob.read_shift(1);
				o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);
			}
			return o;
		}

		function parse_LABEL(blob, length, opts) {
			var tgt = blob.l + length;
			var o = parse_cell(blob, length, opts);
			o[1].t = 's';
			if(opts.vers == 0x5120) {
				blob.l++;
				var len = blob.read_shift(1);
				o[1].v = blob.read_shift(len, 'utf8');
				return o;
			}
			if(opts.qpro) blob.l++;
			o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
			return o;
		}

		function parse_INTEGER(blob, length, opts) {
			var o = parse_cell(blob, length, opts);
			o[1].v = blob.read_shift(2, 'i');
			return o;
		}

		function parse_NUMBER(blob, length, opts) {
			var o = parse_cell(blob, length, opts);
			o[1].v = blob.read_shift(8, 'f');
			return o;
		}

		function parse_FORMULA(blob, length, opts) {
			var tgt = blob.l + length;
			var o = parse_cell(blob, length, opts);
			/* TODO: formula */
			o[1].v = blob.read_shift(8, 'f');
			if(opts.qpro) blob.l = tgt;
			else {
				var flen = blob.read_shift(2);
				blob.l += flen;
			}
			return o;
		}

		function parse_cell_3(blob, length) {
			var o = [{c:0,r:0}, {t:'n',v:0}, 0];
			o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];
			return o;
		}

		function parse_LABEL_16(blob, length) {
			var o = parse_cell_3(blob, length);
			o[1].t = 's';
			o[1].v = blob.read_shift(length - 4, 'cstr');
			return o;
		}

		function parse_NUMBER_18(blob, length) {
			var o = parse_cell_3(blob, length);
			o[1].v = blob.read_shift(2);
			var v = o[1].v >> 1;
			/* TODO: figure out all of the corner cases */
			if(o[1].v & 0x1) {
				switch(v & 0x07) {
					case 1: v = (v >> 3) * 500; break;
					case 2: v = (v >> 3) / 20; break;
					case 4: v = (v >> 3) / 2000; break;
					case 6: v = (v >> 3) / 16; break;
					case 7: v = (v >> 3) / 64; break;
					default: throw "unknown NUMBER_18 encoding " + (v & 0x07);
				}
			}
			o[1].v = v;
			return o;
		}

		function parse_NUMBER_17(blob, length) {
			var o = parse_cell_3(blob, length);
			var v1 = blob.read_shift(4);
			var v2 = blob.read_shift(4);
			var e = blob.read_shift(2);
			if(e == 0xFFFF) { o[1].v = 0; return o; }
			var s = e & 0x8000; e = (e&0x7FFF) - 16446;
			o[1].v = ((e > 0 ? (v2 << e) : (v2 >>> -e)) + (e > -32 ? (v1 << (e + 32)) : (v1 >>> -(e + 32))));
			return o;
		}

		function parse_FORMULA_19(blob, length) {
			var o = parse_NUMBER_17(blob, 14);
			blob.l += length - 14; /* TODO: formula */
			return o;
		}

		function parse_NUMBER_25(blob, length) {
			var o = parse_cell_3(blob, length);
			var v1 = blob.read_shift(4);
			o[1].v = v1 >> 6;
			return o;
		}

		function parse_NUMBER_27(blob, length) {
			var o = parse_cell_3(blob, length);
			var v1 = blob.read_shift(8,'f');
			o[1].v = v1;
			return o;
		}

		function parse_FORMULA_28(blob, length) {
			var o = parse_NUMBER_27(blob, 14);
			blob.l += length - 10; /* TODO: formula */
			return o;
		}

		var WK1Enum = {
	0x0000: { n:"BOF", f:parseuint16 },
	0x0001: { n:"EOF", f:parsenoop },
	0x0002: { n: "CALCMODE", f:parsenoop },
	0x0003: { n:"CALCORDER", f:parsenoop },
	0x0004: { n:"SPLIT", f:parsenoop },
	0x0005: { n:"SYNC", f:parsenoop },
	0x0006: { n:"RANGE", f:parse_RANGE },
	0x0007: { n:"WINDOW1", f:parsenoop },
	0x0008: { n:"COLW1", f:parsenoop },
	0x0009: { n:"WINTWO", f:parsenoop },
	0x000A: { n:"COLW2", f:parsenoop },
	0x000B: { n:"NAME", f:parsenoop },
	0x000C: { n:"BLANK", f:parsenoop },
	0x000D: { n:"INTEGER", f:parse_INTEGER },
	0x000E: { n:"NUMBER", f:parse_NUMBER },
	0x000F: { n:"LABEL", f:parse_LABEL },
	0x0010: { n:"FORMULA", f:parse_FORMULA },
	0x0018: { n:"TABLE", f:parsenoop },
	0x0019: { n:"ORANGE", f:parsenoop },
	0x001A: { n:"PRANGE", f:parsenoop },
	0x001B: { n:"SRANGE", f:parsenoop },
	0x001C: { n:"FRANGE", f:parsenoop },
	0x001D: { n:"KRANGE1", f:parsenoop },
	0x0020: { n:"HRANGE", f:parsenoop },
	0x0023: { n:"KRANGE2", f:parsenoop },
	0x0024: { n:"PROTEC", f:parsenoop },
	0x0025: { n:"FOOTER", f:parsenoop },
	0x0026: { n:"HEADER", f:parsenoop },
	0x0027: { n:"SETUP", f:parsenoop },
	0x0028: { n:"MARGINS", f:parsenoop },
	0x0029: { n:"LABELFMT", f:parsenoop },
	0x002A: { n:"TITLES", f:parsenoop },
	0x002B: { n:"SHEETJS", f:parsenoop },
	0x002D: { n:"GRAPH", f:parsenoop },
	0x002E: { n:"NGRAPH", f:parsenoop },
	0x002F: { n:"CALCCOUNT", f:parsenoop },
	0x0030: { n:"UNFORMATTED", f:parsenoop },
	0x0031: { n:"CURSORW12", f:parsenoop },
	0x0032: { n:"WINDOW", f:parsenoop },
	0x0033: { n:"STRING", f:parse_LABEL },
	0x0037: { n:"PASSWORD", f:parsenoop },
	0x0038: { n:"LOCKED", f:parsenoop },
	0x003C: { n:"QUERY", f:parsenoop },
	0x003D: { n:"QUERYNAME", f:parsenoop },
	0x003E: { n:"PRINT", f:parsenoop },
	0x003F: { n:"PRINTNAME", f:parsenoop },
	0x0040: { n:"GRAPH2", f:parsenoop },
	0x0041: { n:"GRAPHNAME", f:parsenoop },
	0x0042: { n:"ZOOM", f:parsenoop },
	0x0043: { n:"SYMSPLIT", f:parsenoop },
	0x0044: { n:"NSROWS", f:parsenoop },
	0x0045: { n:"NSCOLS", f:parsenoop },
	0x0046: { n:"RULER", f:parsenoop },
	0x0047: { n:"NNAME", f:parsenoop },
	0x0048: { n:"ACOMM", f:parsenoop },
	0x0049: { n:"AMACRO", f:parsenoop },
	0x004A: { n:"PARSE", f:parsenoop },
	0x00FF: { n:"", f:parsenoop }
		};

		var WK3Enum = {
	0x0000: { n:"BOF", f:parsenoop },
	0x0001: { n:"EOF", f:parsenoop },
	0x0003: { n:"??", f:parsenoop },
	0x0004: { n:"??", f:parsenoop },
	0x0005: { n:"??", f:parsenoop },
	0x0006: { n:"??", f:parsenoop },
	0x0007: { n:"??", f:parsenoop },
	0x0009: { n:"??", f:parsenoop },
	0x000a: { n:"??", f:parsenoop },
	0x000b: { n:"??", f:parsenoop },
	0x000c: { n:"??", f:parsenoop },
	0x000e: { n:"??", f:parsenoop },
	0x000f: { n:"??", f:parsenoop },
	0x0010: { n:"??", f:parsenoop },
	0x0011: { n:"??", f:parsenoop },
	0x0012: { n:"??", f:parsenoop },
	0x0013: { n:"??", f:parsenoop },
	0x0015: { n:"??", f:parsenoop },
	0x0016: { n:"LABEL16", f:parse_LABEL_16},
	0x0017: { n:"NUMBER17", f:parse_NUMBER_17 },
	0x0018: { n:"NUMBER18", f:parse_NUMBER_18 },
	0x0019: { n:"FORMULA19", f:parse_FORMULA_19},
	0x001a: { n:"??", f:parsenoop },
	0x001b: { n:"??", f:parsenoop },
	0x001c: { n:"??", f:parsenoop },
	0x001d: { n:"??", f:parsenoop },
	0x001e: { n:"??", f:parsenoop },
	0x001f: { n:"??", f:parsenoop },
	0x0021: { n:"??", f:parsenoop },
	0x0025: { n:"NUMBER25", f:parse_NUMBER_25 },
	0x0027: { n:"NUMBER27", f:parse_NUMBER_27 },
	0x0028: { n:"FORMULA28", f:parse_FORMULA_28 },
	0x00FF: { n:"", f:parsenoop }
		};
		return {
			to_workbook: lotus_to_workbook
		};
	})();
	/* 18.4.1 charset to codepage mapping */
	var CS2CP = ({
	0:    1252, /* ANSI */
	1:   65001, /* DEFAULT */
	2:   65001, /* SYMBOL */
	77:  10000, /* MAC */
	128:   932, /* SHIFTJIS */
	129:   949, /* HANGUL */
	130:  1361, /* JOHAB */
	134:   936, /* GB2312 */
	136:   950, /* CHINESEBIG5 */
	161:  1253, /* GREEK */
	162:  1254, /* TURKISH */
	163:  1258, /* VIETNAMESE */
	177:  1255, /* HEBREW */
	178:  1256, /* ARABIC */
	186:  1257, /* BALTIC */
	204:  1251, /* RUSSIAN */
	222:   874, /* THAI */
	238:  1250, /* EASTEUROPE */
	255:  1252, /* OEM */
	69:   6969  /* MISC */
	});

	/* Parse a list of <r> tags */
	var parse_rs = (function parse_rs_factory() {
		var tregex = matchtag("t"), rpregex = matchtag("rPr"), rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/, nlregex = /\r\n/g;
		/* 18.4.7 rPr CT_RPrElt */
		var parse_rpr = function parse_rpr(rpr, intro, outro) {
			var font = {}, cp = 65001, align = "";
			var m = rpr.match(tagregex), i = 0;
			if(m) for(;i!=m.length; ++i) {
				var y = parsexmltag(m[i]);
				switch(y[0].replace(/\w*:/g,"")) {
					/* 18.8.12 condense CT_BooleanProperty */
					/* ** not required . */
					case '<condense': break;
					/* 18.8.17 extend CT_BooleanProperty */
					/* ** not required . */
					case '<extend': break;
					/* 18.8.36 shadow CT_BooleanProperty */
					/* ** not required . */
					case '<shadow':
						if(!y.val) break;
						/* falls through */
					case '<shadow>':
					case '<shadow/>': font.shadow = 1; break;
					case '</shadow>': break;

					/* 18.4.1 charset CT_IntProperty TODO */
					case '<charset':
						if(y.val == '1') break;
						cp = CS2CP[parseInt(y.val, 10)];
						break;

					/* 18.4.2 outline CT_BooleanProperty TODO */
					case '<outline':
						if(!y.val) break;
						/* falls through */
					case '<outline>':
					case '<outline/>': font.outline = 1; break;
					case '</outline>': break;

					/* 18.4.5 rFont CT_FontName */
					case '<rFont': font.name = y.val; break;

					/* 18.4.11 sz CT_FontSize */
					case '<sz': font.sz = y.val; break;

					/* 18.4.10 strike CT_BooleanProperty */
					case '<strike':
						if(!y.val) break;
						/* falls through */
					case '<strike>':
					case '<strike/>': font.strike = 1; break;
					case '</strike>': break;

					/* 18.4.13 u CT_UnderlineProperty */
					case '<u':
						if(!y.val) break;
						switch(y.val) {
							case 'double': font.uval = "double"; break;
							case 'singleAccounting': font.uval = "single-accounting"; break;
							case 'doubleAccounting': font.uval = "double-accounting"; break;
						}
						/* falls through */
					case '<u>':
					case '<u/>': font.u = 1; break;
					case '</u>': break;

					/* 18.8.2 b */
					case '<b':
						if(y.val == '0') break;
						/* falls through */
					case '<b>':
					case '<b/>': font.b = 1; break;
					case '</b>': break;

					/* 18.8.26 i */
					case '<i':
						if(y.val == '0') break;
						/* falls through */
					case '<i>':
					case '<i/>': font.i = 1; break;
					case '</i>': break;

					/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
					case '<color':
						if(y.rgb) font.color = y.rgb.substr(2,6);
						break;

					/* 18.8.18 family ST_FontFamily */
					case '<family': font.family = y.val; break;

					/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
					case '<vertAlign': align = y.val; break;

					/* 18.8.35 scheme CT_FontScheme TODO */
					case '<scheme': break;

					default:
						if(y[0].charCodeAt(1) !== 47) throw 'Unrecognized rich format ' + y[0];
				}
			}
			var style = [];

			if(font.u) style.push("text-decoration: underline;");
			if(font.uval) style.push("text-underline-style:" + font.uval + ";");
			if(font.sz) style.push("font-size:" + font.sz + ";");
			if(font.outline) style.push("text-effect: outline;");
			if(font.shadow) style.push("text-shadow: auto;");
			intro.push('<span style="' + style.join("") + '">');

			if(font.b) { intro.push("<b>"); outro.push("</b>"); }
			if(font.i) { intro.push("<i>"); outro.push("</i>"); }
			if(font.strike) { intro.push("<s>"); outro.push("</s>"); }

			if(align == "superscript") align = "sup";
			else if(align == "subscript") align = "sub";
			if(align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">"); }

			outro.push("</span>");
			return cp;
		};

		/* 18.4.4 r CT_RElt */
		function parse_r(r) {
			var terms = [[],"",[]];
			/* 18.4.12 t ST_Xstring */
			var t = r.match(tregex), cp = 65001;
			if(!isval(t)) return "";
			terms[1] = t[1];

			var rpr = r.match(rpregex);
			if(isval(rpr)) cp = parse_rpr(rpr[1], terms[0], terms[2]);

			return terms[0].join("") + terms[1].replace(nlregex,'<br/>') + terms[2].join("");
		}
		return function parse_rs(rs) {
			return rs.replace(rregex,"").split(rend).map(parse_r).join("");
		};
	})();

	/* 18.4.8 si CT_Rst */
	var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
	var sirphregex = /<(?:\w+:)?rPh.*?>(.*?)<\/(?:\w+:)?rPh>/g;
	function parse_si(x, opts) {
		var html = opts ? opts.cellHTML : true;
		var z = {};
		if(!x) return null;
		var y;
		/* 18.4.12 t ST_Xstring (Plaintext String) */
		// TODO: is whitespace actually valid here?
		if(x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
			z.t = utf8read(unescapexml(x.substr(x.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]));
			z.r = utf8read(x);
			if(html) z.h = escapehtml(z.t);
		}
		/* 18.4.4 r CT_RElt (Rich Text Run) */
		else if((y = x.match(sirregex))) {
			z.r = utf8read(x);
			z.t = utf8read(unescapexml((x.replace(sirphregex, '').match(sitregex)||[]).join("").replace(tagregex,"")));
			if(html) z.h = parse_rs(z.r);
		}
		/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
		/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
		return z;
	}

	/* 18.4 Shared String Table */
	var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
	var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
	var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
	function parse_sst_xml(data, opts) {
		var s = ([]), ss = "";
		if(!data) return s;
		/* 18.4.9 sst CT_Sst */
		var sst = data.match(sstr0);
		if(isval(sst)) {
			ss = sst[2].replace(sstr1,"").split(sstr2);
			for(var i = 0; i != ss.length; ++i) {
				var o = parse_si(ss[i].trim(), opts);
				if(o != null) s[s.length] = o;
			}
			sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;
		}
		return s;
	}

	RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings";
	var straywsregex = /^\s|\s$|[\t\n\r]/;
	function write_sst_xml(sst, opts) {
		if(!opts.bookSST) return "";
		var o = [XML_HEADER];
		o[o.length] = (writextag('sst', null, {
			xmlns: XMLNS.main[0],
			count: sst.Count,
			uniqueCount: sst.Unique
		}));
		for(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;
			var s = sst[i];
			var sitag = "<si>";
			if(s.r) sitag += s.r;
			else {
				sitag += "<t";
				if(!s.t) s.t = "";
				if(s.t.match(straywsregex)) sitag += ' xml:space="preserve"';
				sitag += ">" + escapexml(s.t) + "</t>";
			}
			sitag += "</si>";
			o[o.length] = (sitag);
		}
		if(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* [MS-XLSB] 2.4.219 BrtBeginSst */
	function parse_BrtBeginSst(data, length) {
		return [data.read_shift(4), data.read_shift(4)];
	}

	/* [MS-XLSB] 2.1.7.45 Shared Strings */
	function parse_sst_bin(data, opts) {
		var s = ([]);
		var pass = false;
		recordhopper(data, function hopper_sst(val, R_n, RT) {
			switch(RT) {
				case 0x009F: /* 'BrtBeginSst' */
					s.Count = val[0]; s.Unique = val[1]; break;
				case 0x0013: /* 'BrtSSTItem' */
					s.push(val); break;
				case 0x00A0: /* 'BrtEndSst' */
					return true;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;

				default:
					if(R_n.indexOf("Begin") > 0){/* empty */}
					else if(R_n.indexOf("End") > 0){/* empty */}
					if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		});
		return s;
	}

	function write_BrtBeginSst(sst, o) {
		if(!o) o = new_buf(8);
		o.write_shift(4, sst.Count);
		o.write_shift(4, sst.Unique);
		return o;
	}

	var write_BrtSSTItem = write_RichStr;

	function write_sst_bin(sst, opts) {
		var ba = buf_array();
		write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst));
		for(var i = 0; i < sst.length; ++i) write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i]));
		/* FRTSST */
		write_record(ba, "BrtEndSst");
		return ba.end();
	}
	function _JS2ANSI(str) {
		if(typeof cptable !== 'undefined') return cptable.utils.encode(1252, str);
		var o = [], oo = str.split("");
		for(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.4 Version */
	function parse_CRYPTOVersion(blob, length) {
		var o = {};
		o.Major = blob.read_shift(2);
		o.Minor = blob.read_shift(2);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */
	function parse_DataSpaceVersionInfo(blob, length) {
		var o = {};
		o.id = blob.read_shift(0, 'lpp4');
		o.R = parse_CRYPTOVersion(blob, 4);
		o.U = parse_CRYPTOVersion(blob, 4);
		o.W = parse_CRYPTOVersion(blob, 4);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */
	function parse_DataSpaceMapEntry(blob) {
		var len = blob.read_shift(4);
		var end = blob.l + len - 4;
		var o = {};
		var cnt = blob.read_shift(4);
		var comps = [];
		while(cnt-- > 0) {
			/* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */
			var rc = {};
			rc.t = blob.read_shift(4);
			rc.v = blob.read_shift(0, 'lpp4');
			comps.push(rc);
		}
		o.name = blob.read_shift(0, 'lpp4');
		o.comps = comps;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */
	function parse_DataSpaceMap(blob, length) {
		var o = [];
		blob.l += 4; // must be 0x8
		var cnt = blob.read_shift(4);
		while(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */
	function parse_DataSpaceDefinition(blob, length) {
		var o = [];
		blob.l += 4; // must be 0x8
		var cnt = blob.read_shift(4);
		while(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
		return o;
	}

	/* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */
	function parse_TransformInfoHeader(blob, length) {
		var o = {};
		var len = blob.read_shift(4);
		var tgt = blob.l + len - 4;
		blob.l += 4; // must be 0x1
		o.id = blob.read_shift(0, 'lpp4');
		// tgt == len
		o.name = blob.read_shift(0, 'lpp4');
		o.R = parse_CRYPTOVersion(blob, 4);
		o.U = parse_CRYPTOVersion(blob, 4);
		o.W = parse_CRYPTOVersion(blob, 4);
		return o;
	}

	function parse_Primary(blob, length) {
		/* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
		var hdr = parse_TransformInfoHeader(blob);
		/* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */
		hdr.ename = blob.read_shift(0, '8lpp4');
		hdr.blksz = blob.read_shift(4);
		hdr.cmode = blob.read_shift(4);
		if(blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
		return hdr;
	}

	/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
	function parse_EncryptionHeader(blob, length) {
		var tgt = blob.l + length;
		var o = {};
		o.Flags = (blob.read_shift(4) & 0x3F);
		blob.l += 4;
		o.AlgID = blob.read_shift(4);
		var valid = false;
		switch(o.AlgID) {
			case 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;
			case 0x6801: valid = (o.Flags == 0x04); break;
			case 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;
			default: throw 'Unrecognized encryption algorithm: ' + o.AlgID;
		}
		if(!valid) throw new Error("Encryption Flags/AlgID mismatch");
		o.AlgIDHash = blob.read_shift(4);
		o.KeySize = blob.read_shift(4);
		o.ProviderType = blob.read_shift(4);
		blob.l += 8;
		o.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le').slice(0,-1);
		blob.l = tgt;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
	function parse_EncryptionVerifier(blob, length) {
		var o = {};
		blob.l += 4; // SaltSize must be 0x10
		o.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;
		o.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;
		var sz = blob.read_shift(4);
		o.VerifierHash = blob.slice(blob.l, blob.l + sz); blob.l += sz;
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */
	function parse_EncryptionInfo(blob, length) {
		var vers = parse_CRYPTOVersion(blob);
		switch(vers.Minor) {
			case 0x02: return parse_EncInfoStd(blob, vers);
			case 0x03: return parse_EncInfoExt(blob, vers);
			case 0x04: return parse_EncInfoAgl(blob, vers);
		}
		throw new Error("ECMA-376 Encryped file unrecognized Version: " + vers.Minor);
	}

	/* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */
	function parse_EncInfoStd(blob, vers) {
		var flags = blob.read_shift(4);
		if((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
		var sz = blob.read_shift(4);
		var tgt = blob.l + sz;
		var hdr = parse_EncryptionHeader(blob, sz);
		var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
		return { t:"Std", h:hdr, v:verifier };
	}
	/* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */
	function parse_EncInfoExt(blob, vers) { throw new Error("File is password-protected: ECMA-376 Extensible"); }
	/* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */
	function parse_EncInfoAgl(blob, vers) { throw new Error("File is password-protected: ECMA-376 Agile"); }




	/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
	function parse_RC4CryptoHeader(blob, length) {
		var o = {};
		var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
		if(vers.Minor != 2) throw 'unrecognized minor version code: ' + vers.Minor;
		if(vers.Major > 4 || vers.Major < 2) throw 'unrecognized major version code: ' + vers.Major;
		o.Flags = blob.read_shift(4); length -= 4;
		var sz = blob.read_shift(4); length -= 4;
		o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;
		o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
		return o;
	}
	/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
	function parse_RC4Header(blob, length) {
		var o = {};
		var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
		if(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
		o.Salt = blob.read_shift(16);
		o.EncryptedVerifier = blob.read_shift(16);
		o.EncryptedVerifierHash = blob.read_shift(16);
		return o;
	}

	/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
	function crypto_CreatePasswordVerifier_Method1(Password) {
		var Verifier = 0x0000, PasswordArray;
		var PasswordDecoded = _JS2ANSI(Password);
		var len = PasswordDecoded.length + 1, i, PasswordByte;
		var Intermediate1, Intermediate2, Intermediate3;
		PasswordArray = new_raw_buf(len);
		PasswordArray[0] = PasswordDecoded.length;
		for(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];
		for(i = len-1; i >= 0; --i) {
			PasswordByte = PasswordArray[i];
			Intermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;
			Intermediate2 = (Verifier << 1) & 0x7FFF;
			Intermediate3 = Intermediate1 | Intermediate2;
			Verifier = Intermediate3 ^ PasswordByte;
		}
		return Verifier ^ 0xCE4B;
	}

	/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
	var crypto_CreateXorArray_Method1 = (function() {
		var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
		var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
		var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];
		var Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };
		var XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };
		var CreateXorKey_Method1 = function(Password) {
			var XorKey = InitialCode[Password.length - 1];
			var CurrentElement = 0x68;
			for(var i = Password.length-1; i >= 0; --i) {
				var Char = Password[i];
				for(var j = 0; j != 7; ++j) {
					if(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
					Char *= 2; --CurrentElement;
				}
			}
			return XorKey;
		};
		return function(password) {
			var Password = _JS2ANSI(password);
			var XorKey = CreateXorKey_Method1(Password);
			var Index = Password.length;
			var ObfuscationArray = new_raw_buf(16);
			for(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;
			var Temp, PasswordLastChar, PadIndex;
			if((Index & 1) === 1) {
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
				--Index;
				Temp = XorKey & 0xFF;
				PasswordLastChar = Password[Password.length - 1];
				ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
			}
			while(Index > 0) {
				--Index;
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
				--Index;
				Temp = XorKey & 0xFF;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
			}
			Index = 15;
			PadIndex = 15 - Password.length;
			while(PadIndex > 0) {
				Temp = XorKey >> 8;
				ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
				--Index;
				--PadIndex;
				Temp = XorKey & 0xFF;
				ObfuscationArray[Index] = XorRor(Password[Index], Temp);
				--Index;
				--PadIndex;
			}
			return ObfuscationArray;
		};
	})();

	/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
	var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {
		/* If XorArray is set, use it; if O is not set, make changes in-place */
		if(!O) O = Data;
		if(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
		var Index, Value;
		for(Index = 0; Index != Data.length; ++Index) {
			Value = Data[Index];
			Value ^= XorArray[XorArrayIndex];
			Value = ((Value>>5) | (Value<<3)) & 0xFF;
			O[Index] = Value;
			++XorArrayIndex;
		}
		return [O, XorArrayIndex, XorArray];
	};

	var crypto_MakeXorDecryptor = function(password) {
		var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
		return function(Data) {
			var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
			XorArrayIndex = O[1];
			return O[0];
		};
	};

	/* 2.5.343 */
	function parse_XORObfuscation(blob, length, opts, out) {
		var o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) });
		if(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
		out.valid = o.verificationBytes === o.verifier;
		if(out.valid) out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password);
		return o;
	}

	/* 2.4.117 */
	function parse_FilePassHeader(blob, length, oo) {
		var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;
		if(o.Info === 1) o.Data = parse_RC4Header(blob, length);
		else o.Data = parse_RC4CryptoHeader(blob, length);
		return o;
	}
	function parse_FilePass(blob, length, opts) {
		var o = { Type: blob.read_shift(2) }; /* wEncryptionType */
		if(o.Type) parse_FilePassHeader(blob, length-2, o);
		else parse_XORObfuscation(blob, length-2, opts, o);
		return o;
	}


	function hex2RGB(h) {
		var o = h.substr(h[0]==="#"?1:0,6);
		return [parseInt(o.substr(0,2),16),parseInt(o.substr(2,2),16),parseInt(o.substr(4,2),16)];
	}
	function rgb2Hex(rgb) {
		for(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);
		return o.toString(16).toUpperCase().substr(1);
	}

	function rgb2HSL(rgb) {
		var R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;
		var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
		if(C === 0) return [0, 0, R];

		var H6 = 0, S = 0, L2 = (M + m);
		S = C / (L2 > 1 ? 2 - L2 : L2);
		switch(M){
			case R: H6 = ((G - B) / C + 6)%6; break;
			case G: H6 = ((B - R) / C + 2); break;
			case B: H6 = ((R - G) / C + 4); break;
		}
		return [H6 / 6, S, L2 / 2];
	}

	function hsl2RGB(hsl){
		var H = hsl[0], S = hsl[1], L = hsl[2];
		var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;
		var rgb = [m,m,m], h6 = 6*H;

		var X;
		if(S !== 0) switch(h6|0) {
			case 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;
			case 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;
			case 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;
			case 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;
			case 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;
			case 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;
		}
		for(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);
		return rgb;
	}

	/* 18.8.3 bgColor tint algorithm */
	function rgb_tint(hex, tint) {
		if(tint === 0) return hex;
		var hsl = rgb2HSL(hex2RGB(hex));
		if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
		else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
		return rgb2Hex(hsl2RGB(hsl));
	}

	/* 18.3.1.13 width calculations */
	/* [MS-OI29500] 2.1.595 Column Width & Formatting */
	var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
	function width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }
	function px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }
	function char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }
	function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
	function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
	function cycle_width(collw) { return char2width(px2char(width2px(collw))); }
	/* XLSX/XLSB/XLS specify width in units of MDW */
	function find_mdw_colw(collw) {
		var delta = Infinity, _MDW = MIN_MDW;
		for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }
		MDW = _MDW;
	}
	/* XLML specifies width in terms of pixels */
	function find_mdw_wpx(wpx) {
		var delta = Infinity, guess = 0, _MDW = MIN_MDW;
		for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
			guess = char2width_(px2char_(wpx))*256;
			guess = (guess) % 1;
			if(guess > 0.5) guess--;
			if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
		}
		MDW = _MDW;
	}

	function process_col(coll) {
		if(coll.width) {
			coll.wpx = width2px(coll.width);
			coll.wch = px2char(coll.wpx);
			coll.MDW = MDW;
		} else if(coll.wpx) {
			coll.wch = px2char(coll.wpx);
			coll.width = char2width(coll.wch);
			coll.MDW = MDW;
		} else if(typeof coll.wch == 'number') {
			coll.width = char2width(coll.wch);
			coll.wpx = width2px(coll.width);
			coll.MDW = MDW;
		}
		if(coll.customWidth) delete coll.customWidth;
	}

	var DEF_PPI = 96, PPI = DEF_PPI;
	function px2pt(px) { return px * 96 / PPI; }
	function pt2px(pt) { return pt * PPI / 96; }

	/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
	var XLMLPatternTypeMap = {
		"None": "none",
		"Solid": "solid",
		"Gray50": "mediumGray",
		"Gray75": "darkGray",
		"Gray25": "lightGray",
		"HorzStripe": "darkHorizontal",
		"VertStripe": "darkVertical",
		"ReverseDiagStripe": "darkDown",
		"DiagStripe": "darkUp",
		"DiagCross": "darkGrid",
		"ThickDiagCross": "darkTrellis",
		"ThinHorzStripe": "lightHorizontal",
		"ThinVertStripe": "lightVertical",
		"ThinReverseDiagStripe": "lightDown",
		"ThinHorzCross": "lightGrid"
	};

	/* 18.8.5 borders CT_Borders */
	function parse_borders(t, styles, themes, opts) {
		styles.Borders = [];
		var border = {}, sub_border = {};
		t[0].match(tagregex).forEach(function(x) {
			var y = parsexmltag(x);
			switch (y[0]) {
				case '<borders': case '<borders>': case '</borders>': break;

				/* 18.8.4 border CT_Border */
				case '<border': case '<border>':
					border = {};
					if (y.diagonalUp) { border.diagonalUp = y.diagonalUp; }
					if (y.diagonalDown) { border.diagonalDown = y.diagonalDown; }
					styles.Borders.push(border);
					break;
				case '</border>': break;

				/* note: not in spec, appears to be CT_BorderPr */
				case '<left': case '<left/>': break;
				case '</left>': break;

				/* note: not in spec, appears to be CT_BorderPr */
				case '<right': case '<right/>': break;
				case '</right>': break;

				/* 18.8.43 top CT_BorderPr */
				case '<top': case '<top/>': break;
				case '</top>': break;

				/* 18.8.6 bottom CT_BorderPr */
				case '<bottom': case '<bottom/>': break;
				case '</bottom>': break;

				/* 18.8.13 diagonal CT_BorderPr */
				case '<diagonal': case '<diagonal/>': break;
				case '</diagonal>': break;

				/* 18.8.25 horizontal CT_BorderPr */
				case '<horizontal': case '<horizontal/>': break;
				case '</horizontal>': break;

				/* 18.8.44 vertical CT_BorderPr */
				case '<vertical': case '<vertical/>': break;
				case '</vertical>': break;

				/* 18.8.37 start CT_BorderPr */
				case '<start': case '<start/>': break;
				case '</start>': break;

				/* 18.8.16 end CT_BorderPr */
				case '<end': case '<end/>': break;
				case '</end>': break;

				/* 18.8.? color CT_Color */
				case '<color': case '<color/>': break;
				case '</color>': break;

				default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in borders');
			}
		});
	}

	/* 18.8.21 fills CT_Fills */
	function parse_fills(t, styles, themes, opts) {
		styles.Fills = [];
		var fill = {};
		t[0].match(tagregex).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				case '<fills': case '<fills>': case '</fills>': break;

				/* 18.8.20 fill CT_Fill */
				case '<fill>': break;
				case '</fill>': styles.Fills.push(fill); fill = {}; break;

				/* 18.8.24 gradientFill CT_GradientFill */
				case '<gradientFill>': break;
				case '</gradientFill>': styles.Fills.push(fill); fill = {}; break;

				/* 18.8.32 patternFill CT_PatternFill */
				case '<patternFill': case '<patternFill>':
					if(y.patternType) fill.patternType = y.patternType;
					break;
				case '<patternFill/>': case '</patternFill>': break;

				/* 18.8.3 bgColor CT_Color */
				case '<bgColor':
					if(!fill.bgColor) fill.bgColor = {};
					if(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
					if(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
					if(y.tint) fill.bgColor.tint = parseFloat(y.tint);
					/* Excel uses ARGB strings */
					if(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
					break;
				case '<bgColor/>': case '</bgColor>': break;

				/* 18.8.19 fgColor CT_Color */
				case '<fgColor':
					if(!fill.fgColor) fill.fgColor = {};
					if(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
					if(y.tint) fill.fgColor.tint = parseFloat(y.tint);
					/* Excel uses ARGB strings */
					if(y.rgb) fill.fgColor.rgb = y.rgb.slice(-6);
					break;
				case '<fgColor/>': case '</fgColor>': break;

				/* 18.8.38 stop CT_GradientStop */
				case '<stop': case '<stop/>': break;
				case '</stop>': break;

				/* 18.8.? color CT_Color */
				case '<color': case '<color/>': break;
				case '</color>': break;

				default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in fills');
			}
		});
	}

	/* 18.8.23 fonts CT_Fonts */
	function parse_fonts(t, styles, themes, opts) {
		styles.Fonts = [];
		var font = {};
		t[0].match(tagregex).forEach(function(x) {
			var y = parsexmltag(x);
			switch (y[0]) {
				case '<fonts': case '<fonts>': case '</fonts>': break;

				/* 18.8.22 font CT_Font */
				case '<font': case '<font>': break;
				case '</font>': case '<font/>':
					styles.Fonts.push(font);
					font = {};
					break;

				/* 18.8.29 name CT_FontName */
				case '<name': if(y.val) font.name = y.val; break;
				case '<name/>': case '</name>': break;

				/* 18.8.2  b CT_BooleanProperty */
				case '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;
				case '<b/>': font.bold = 1; break;

				/* 18.8.26 i CT_BooleanProperty */
				case '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;
				case '<i/>': font.italic = 1; break;

				/* 18.4.13 u CT_UnderlineProperty */
				case '<u':
					switch(y.val) {
						case "none": font.underline = 0x00; break;
						case "single": font.underline = 0x01; break;
						case "double": font.underline = 0x02; break;
						case "singleAccounting": font.underline = 0x21; break;
						case "doubleAccounting": font.underline = 0x22; break;
					} break;
				case '<u/>': font.underline = 1; break;

				/* 18.4.10 strike CT_BooleanProperty */
				case '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;
				case '<strike/>': font.strike = 1; break;

				/* 18.4.2  outline CT_BooleanProperty */
				case '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;
				case '<outline/>': font.outline = 1; break;

				/* 18.8.36 shadow CT_BooleanProperty */
				case '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;
				case '<shadow/>': font.shadow = 1; break;

				/* 18.8.12 condense CT_BooleanProperty */
				case '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;
				case '<condense/>': font.condense = 1; break;

				/* 18.8.17 extend CT_BooleanProperty */
				case '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;
				case '<extend/>': font.extend = 1; break;

				/* 18.4.11 sz CT_FontSize */
				case '<sz': if(y.val) font.sz = +y.val; break;
				case '<sz/>': case '</sz>': break;

				/* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
				case '<vertAlign': if(y.val) font.vertAlign = y.val; break;
				case '<vertAlign/>': case '</vertAlign>': break;

				/* 18.8.18 family CT_FontFamily */
				case '<family': if(y.val) font.family = parseInt(y.val,10); break;
				case '<family/>': case '</family>': break;

				/* 18.8.35 scheme CT_FontScheme */
				case '<scheme': if(y.val) font.scheme = y.val; break;
				case '<scheme/>': case '</scheme>': break;

				/* 18.4.1 charset CT_IntProperty */
				case '<charset':
					if(y.val == '1') break;
					y.codepage = CS2CP[parseInt(y.val, 10)];
					break;

				/* 18.?.? color CT_Color */
				case '<color':
					if(!font.color) font.color = {};
					if(y.auto) font.color.auto = parsexmlbool(y.auto);

					if(y.rgb) font.color.rgb = y.rgb;
					else if(y.indexed) {
						font.color.index = parseInt(y.indexed, 10);
						var icv = XLSIcv[font.color.index];
						if(font.color.index == 81) icv = XLSIcv[1];
						if(!icv) throw new Error(x);
						font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
					} else if(y.theme) {
						font.color.theme = parseInt(y.theme, 10);
						if(y.tint) font.color.tint = parseFloat(y.tint);
						if(y.theme && themes.themeElements && themes.themeElements.clrScheme) {
							font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
						}
					}

					break;
				case '<color/>': case '</color>': break;

				default: if(opts && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in fonts');
			}
		});
	}

	/* 18.8.31 numFmts CT_NumFmts */
	function parse_numFmts(t, styles, opts) {
		styles.NumberFmt = [];
		var k/*Array<number>*/ = (keys(SSF._table));
		for(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];
		var m = t[0].match(tagregex);
		if(!m) return;
		for(i=0; i < m.length; ++i) {
			var y = parsexmltag(m[i]);
			switch(y[0]) {
				case '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;
				case '<numFmt': {
					var f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);
					styles.NumberFmt[j] = f; if(j>0) SSF.load(f,j);
				} break;
				case '</numFmt>': break;
				default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
			}
		}
	}

	function write_numFmts(NF, opts) {
		var o = ["<numFmts>"];
		[[5,8],[23,26],[41,44],[/*63*/50,/*66],[164,*/392]].forEach(function(r) {
			for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) o[o.length] = (writextag('numFmt',null,{numFmtId:i,formatCode:escapexml(NF[i])}));
		});
		if(o.length === 1) return "";
		o[o.length] = ("</numFmts>");
		o[0] = writextag('numFmts', null, { count:o.length-2 }).replace("/>", ">");
		return o.join("");
	}

	/* 18.8.10 cellXfs CT_CellXfs */
	function parse_cellXfs(t, styles, opts) {
		styles.CellXf = [];
		var xf;
		t[0].match(tagregex).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				case '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;

				/* 18.8.45 xf CT_Xf */
				case '<xf':
					xf = y;
					delete xf[0];
					if(xf.numFmtId) xf.numFmtId = parseInt(xf.numFmtId, 10);
					if(xf.fillId) xf.fillId = parseInt(xf.fillId, 10);
					styles.CellXf.push(xf); break;
				case '</xf>': break;

				/* 18.8.1 alignment CT_CellAlignment */
				case '<alignment': case '<alignment/>':
					var alignment = {};
					if(y.vertical) alignment.vertical = y.vertical;
					if(y.horizontal) alignment.horizontal = y.horizontal;
					if(y.textRotation != null) alignment.textRotation = y.textRotation;
					if(y.indent) alignment.indent = y.indent;
					if(y.wrapText) alignment.wrapText = y.wrapText;
					xf.alignment = alignment;
					break;
				case '</alignment>': break;

				/* 18.8.33 protection CT_CellProtection */
				case '<protection': case '</protection>': case '<protection/>': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst': case '</extLst>': break;
				case '<ext': break;
				default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
			}
		});
	}

	function write_cellXfs(cellXfs) {
		var o = [];
		o[o.length] = (writextag('cellXfs',null));
		cellXfs.forEach(function(c) { o[o.length] = (writextag('xf', null, c)); });
		o[o.length] = ("</cellXfs>");
		if(o.length === 2) return "";
		o[0] = writextag('cellXfs',null, {count:o.length-2}).replace("/>",">");
		return o.join("");
	}

	/* 18.8 Styles CT_Stylesheet*/
	var parse_sty_xml= (function make_pstyx() {
	var numFmtRegex = /<numFmts([^>]*)>.*<\/numFmts>/;
	var cellXfRegex = /<cellXfs([^>]*)>.*<\/cellXfs>/;
	var fillsRegex = /<fills([^>]*)>.*<\/fills>/;
	var fontsRegex = /<fonts([^>]*)>.*<\/fonts>/;
	var bordersRegex = /<borders([^>]*)>.*<\/borders>/;

	return function parse_sty_xml(data, themes, opts) {
		var styles = {};
		if(!data) return styles;
		/* 18.8.39 styleSheet CT_Stylesheet */
		var t;

		/* 18.8.31 numFmts CT_NumFmts ? */
		if((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);

		/* 18.8.23 fonts CT_Fonts ? */
		if((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);

		/* 18.8.21 fills CT_Fills ? */
		if((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);

		/* 18.8.5  borders CT_Borders ? */
		if((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);

		/* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */

		/* 18.8.10 cellXfs CT_CellXfs ? */
		if((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);

		/* 18.8.8  cellStyles CT_CellStyles ? */
		/* 18.8.15 dxfs CT_Dxfs ? */
		/* 18.8.42 tableStyles CT_TableStyles ? */
		/* 18.8.11 colors CT_Colors ? */
		/* 18.2.10 extLst CT_ExtensionList ? */

		return styles;
	};
	})();

	var STYLES_XML_ROOT = writextag('styleSheet', null, {
		'xmlns': XMLNS.main[0],
		'xmlns:vt': XMLNS.vt
	});

	RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles";

	function write_sty_xml(wb, opts) {
		var o = [XML_HEADER, STYLES_XML_ROOT], w;
		if(wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
		o[o.length] = ('<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>');
		o[o.length] = ('<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>');
		o[o.length] = ('<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');
		o[o.length] = ('<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>');
		if((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);
		o[o.length] = ('<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>');
		o[o.length] = ('<dxfs count="0"/>');
		o[o.length] = ('<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>');

		if(o.length>2){ o[o.length] = ('</styleSheet>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* [MS-XLSB] 2.4.651 BrtFmt */
	function parse_BrtFmt(data, length) {
		var ifmt = data.read_shift(2);
		var stFmtCode = parse_XLWideString(data,length-2);
		return [ifmt, stFmtCode];
	}
	function write_BrtFmt(i, f, o) {
		if(!o) o = new_buf(6 + 4 * f.length);
		o.write_shift(2, i);
		write_XLWideString(f, o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.653 BrtFont TODO */
	function parse_BrtFont(data, length, opts) {
		var out = ({});

		out.sz = data.read_shift(2) / 20;

		var grbit = parse_FontFlags(data, 2, opts);
		if(grbit.fCondense) out.condense = 1;
		if(grbit.fExtend) out.extend = 1;
		if(grbit.fShadow) out.shadow = 1;
		if(grbit.fOutline) out.outline = 1;
		if(grbit.fStrikeout) out.strike = 1;
		if(grbit.fItalic) out.italic = 1;

		var bls = data.read_shift(2);
		if(bls === 0x02BC) out.bold = 1;

		switch(data.read_shift(2)) {
			/* case 0: out.vertAlign = "baseline"; break; */
			case 1: out.vertAlign = "superscript"; break;
			case 2: out.vertAlign = "subscript"; break;
		}

		var underline = data.read_shift(1);
		if(underline != 0) out.underline = underline;

		var family = data.read_shift(1);
		if(family > 0) out.family = family;

		var bCharSet = data.read_shift(1);
		if(bCharSet > 0) out.charset = bCharSet;

		data.l++;
		out.color = parse_BrtColor(data, 8);

		switch(data.read_shift(1)) {
			/* case 0: out.scheme = "none": break; */
			case 1: out.scheme = "major"; break;
			case 2: out.scheme = "minor"; break;
		}

		out.name = parse_XLWideString(data, length - 21);

		return out;
	}
	function write_BrtFont(font, o) {
		if(!o) o = new_buf(25+4*32);
		o.write_shift(2, font.sz * 20);
		write_FontFlags(font, o);
		o.write_shift(2, font.bold ? 0x02BC : 0x0190);
		var sss = 0;
		if(font.vertAlign == "superscript") sss = 1;
		else if(font.vertAlign == "subscript") sss = 2;
		o.write_shift(2, sss);
		o.write_shift(1, font.underline || 0);
		o.write_shift(1, font.family || 0);
		o.write_shift(1, font.charset || 0);
		o.write_shift(1, 0);
		write_BrtColor(font.color, o);
		var scheme = 0;
		if(font.scheme == "major") scheme = 1;
		if(font.scheme == "minor") scheme = 2;
		o.write_shift(1, scheme);
		write_XLWideString(font.name, o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.644 BrtFill */
	var XLSBFillPTNames = [
		"none",
		"solid",
		"mediumGray",
		"darkGray",
		"lightGray",
		"darkHorizontal",
		"darkVertical",
		"darkDown",
		"darkUp",
		"darkGrid",
		"darkTrellis",
		"lightHorizontal",
		"lightVertical",
		"lightDown",
		"lightUp",
		"lightGrid",
		"lightTrellis",
		"gray125",
		"gray0625"
	];
	var rev_XLSBFillPTNames = evert(XLSBFillPTNames);
	/* TODO: gradient fill representation */
	function write_BrtFill(fill, o) {
		if(!o) o = new_buf(4*3 + 8*7 + 16*1);
		var fls = rev_XLSBFillPTNames[fill.patternType];
		if(fls == null) fls = 0x28;
		o.write_shift(4, fls);
		var j = 0;
		if(fls != 0x28) {
			/* TODO: custom FG Color */
			write_BrtColor({auto:1}, o);
			/* TODO: custom BG Color */
			write_BrtColor({auto:1}, o);

			for(; j < 12; ++j) o.write_shift(4, 0);
		} else {
			for(; j < 4; ++j) o.write_shift(4, 0);

			for(; j < 12; ++j) o.write_shift(4, 0); /* TODO */
			/* iGradientType */
			/* xnumDegree */
			/* xnumFillToLeft */
			/* xnumFillToRight */
			/* xnumFillToTop */
			/* xnumFillToBottom */
			/* cNumStop */
			/* xfillGradientStop */
		}
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.816 BrtXF */
	function parse_BrtXF(data, length) {
		var ixfeParent = data.read_shift(2);
		var ifmt = data.read_shift(2);
		parsenoop(data, length-4);
		return {ixfe:ixfeParent, ifmt:ifmt };
	}
	function write_BrtXF(data, ixfeP, o) {
		if(!o) o = new_buf(16);
		o.write_shift(2, ixfeP||0);
		o.write_shift(2, data.numFmtId||0);
		o.write_shift(2, 0); /* iFont */
		o.write_shift(2, 0); /* iFill */
		o.write_shift(2, 0); /* ixBorder */
		o.write_shift(1, 0); /* trot */
		o.write_shift(1, 0); /* indent */
		o.write_shift(1, 0); /* flags */
		o.write_shift(1, 0); /* flags */
		o.write_shift(1, 0); /* xfGrbitAtr */
		o.write_shift(1, 0);
		return o;
	}

	/* [MS-XLSB] 2.5.4 Blxf TODO */
	function write_Blxf(data, o) {
		if(!o) o = new_buf(10);
		o.write_shift(1, 0); /* dg */
		o.write_shift(1, 0);
		o.write_shift(4, 0); /* color */
		o.write_shift(4, 0); /* color */
		return o;
	}
	/* [MS-XLSB] 2.4.299 BrtBorder TODO */
	function write_BrtBorder(border, o) {
		if(!o) o = new_buf(51);
		o.write_shift(1, 0); /* diagonal */
		write_Blxf(null, o); /* top */
		write_Blxf(null, o); /* bottom */
		write_Blxf(null, o); /* left */
		write_Blxf(null, o); /* right */
		write_Blxf(null, o); /* diag */
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.755 BrtStyle TODO */
	function write_BrtStyle(style, o) {
		if(!o) o = new_buf(12+4*10);
		o.write_shift(4, style.xfId);
		o.write_shift(2, 1);
		o.write_shift(1, +style.builtinId);
		o.write_shift(1, 0); /* iLevel */
		write_XLNullableWideString(style.name || "", o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.269 BrtBeginTableStyles */
	function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
		var o = new_buf(4+256*2*4);
		o.write_shift(4, cnt);
		write_XLNullableWideString(defTableStyle, o);
		write_XLNullableWideString(defPivotStyle, o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.1.7.50 Styles */
	function parse_sty_bin(data, themes, opts) {
		var styles = {};
		styles.NumberFmt = ([]);
		for(var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];

		styles.CellXf = [];
		styles.Fonts = [];
		var state = [];
		var pass = false;
		recordhopper(data, function hopper_sty(val, R_n, RT) {
			switch(RT) {
				case 0x002C: /* 'BrtFmt' */
					styles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]);
					break;
				case 0x002B: /* 'BrtFont' */
					styles.Fonts.push(val);
					if(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
						val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
					}
					break;
				case 0x0401: /* 'BrtKnownFonts' */ break;
				case 0x002D: /* 'BrtFill' */ break;
				case 0x002E: /* 'BrtBorder' */ break;
				case 0x002F: /* 'BrtXF' */
					if(state[state.length - 1] == "BrtBeginCellXFs") {
						styles.CellXf.push(val);
					}
					break;
				case 0x0030: /* 'BrtStyle' */
				case 0x01FB: /* 'BrtDXF' */
				case 0x023C: /* 'BrtMRUColor' */
				case 0x01DB: /* 'BrtIndexedColor': */
					break;

				case 0x0493: /* 'BrtDXF14' */
				case 0x0836: /* 'BrtDXF15' */
				case 0x046A: /* 'BrtSlicerStyleElement' */
				case 0x0200: /* 'BrtTableStyleElement' */
				case 0x082F: /* 'BrtTimelineStyleElement' */
				/* case 'BrtUid' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */
					state.push(R_n); break;
				case 0x0026: /* 'BrtACEnd' */
					state.pop(); break;

				default:
					if((R_n||"").indexOf("Begin") > 0) state.push(R_n);
					else if((R_n||"").indexOf("End") > 0) state.pop();
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		});
		return styles;
	}

	function write_FMTS_bin(ba, NF) {
		if(!NF) return;
		var cnt = 0;
		[[5,8],[23,26],[41,44],[/*63*/57,/*66],[164,*/392]].forEach(function(r) {
			for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) ++cnt;
		});

		if(cnt == 0) return;
		write_record(ba, "BrtBeginFmts", write_UInt32LE(cnt));
		[[5,8],[23,26],[41,44],[/*63*/57,/*66],[164,*/392]].forEach(function(r) {
			for(var i = r[0]; i <= r[1]; ++i) if(NF[i] != null) write_record(ba, "BrtFmt", write_BrtFmt(i, NF[i]));
		});
		write_record(ba, "BrtEndFmts");
	}

	function write_FONTS_bin(ba, data) {
		var cnt = 1;

		if(cnt == 0) return;
		write_record(ba, "BrtBeginFonts", write_UInt32LE(cnt));
		write_record(ba, "BrtFont", write_BrtFont({
			sz:12,
			color: {theme:1},
			name: "Calibri",
			family: 2,
			scheme: "minor"
		}));
		/* 1*65491BrtFont [ACFONTS] */
		write_record(ba, "BrtEndFonts");
	}

	function write_FILLS_bin(ba, data) {
		var cnt = 2;

		if(cnt == 0) return;
		write_record(ba, "BrtBeginFills", write_UInt32LE(cnt));
		write_record(ba, "BrtFill", write_BrtFill({patternType:"none"}));
		write_record(ba, "BrtFill", write_BrtFill({patternType:"gray125"}));
		/* 1*65431BrtFill */
		write_record(ba, "BrtEndFills");
	}

	function write_BORDERS_bin(ba, data) {
		var cnt = 1;

		if(cnt == 0) return;
		write_record(ba, "BrtBeginBorders", write_UInt32LE(cnt));
		write_record(ba, "BrtBorder", write_BrtBorder({}));
		/* 1*65430BrtBorder */
		write_record(ba, "BrtEndBorders");
	}

	function write_CELLSTYLEXFS_bin(ba, data) {
		var cnt = 1;
		write_record(ba, "BrtBeginCellStyleXFs", write_UInt32LE(cnt));
		write_record(ba, "BrtXF", write_BrtXF({
			numFmtId:0,
			fontId:0,
			fillId:0,
			borderId:0
		}, 0xFFFF));
		/* 1*65430(BrtXF *FRT) */
		write_record(ba, "BrtEndCellStyleXFs");
	}

	function write_CELLXFS_bin(ba, data) {
		write_record(ba, "BrtBeginCellXFs", write_UInt32LE(data.length));
		data.forEach(function(c) { write_record(ba, "BrtXF", write_BrtXF(c,0)); });
		/* 1*65430(BrtXF *FRT) */
		write_record(ba, "BrtEndCellXFs");
	}

	function write_STYLES_bin(ba, data) {
		var cnt = 1;

		write_record(ba, "BrtBeginStyles", write_UInt32LE(1));
		write_record(ba, "BrtStyle", write_BrtStyle({
			xfId:0,
			builtinId:0,
			name:"Normal"
		}));
		/* 1*65430(BrtStyle *FRT) */
		write_record(ba, "BrtEndStyles");
	}

	function write_DXFS_bin(ba, data) {
		var cnt = 0;

		write_record(ba, "BrtBeginDXFs", write_UInt32LE(cnt));
		/* *2147483647(BrtDXF *FRT) */
		write_record(ba, "BrtEndDXFs");
	}

	function write_TABLESTYLES_bin(ba, data) {
		var cnt = 0;

		write_record(ba, "BrtBeginTableStyles", write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
		/* *TABLESTYLE */
		write_record(ba, "BrtEndTableStyles");
	}

	function write_COLORPALETTE_bin(ba, data) {
		return;
		/* BrtBeginColorPalette [INDEXEDCOLORS] [MRUCOLORS] BrtEndColorPalette */
	}

	/* [MS-XLSB] 2.1.7.50 Styles */
	function write_sty_bin(wb, opts) {
		var ba = buf_array();
		write_record(ba, "BrtBeginStyleSheet");
		write_FMTS_bin(ba, wb.SSF);
		write_FONTS_bin(ba, wb);
		write_FILLS_bin(ba, wb);
		write_BORDERS_bin(ba, wb);
		write_CELLSTYLEXFS_bin(ba, wb);
		write_CELLXFS_bin(ba, opts.cellXfs);
		write_STYLES_bin(ba, wb);
		write_DXFS_bin(ba, wb);
		write_TABLESTYLES_bin(ba, wb);
		write_COLORPALETTE_bin(ba, wb);
		/* FRTSTYLESHEET*/
		write_record(ba, "BrtEndStyleSheet");
		return ba.end();
	}
	RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme";

	/* 20.1.6.2 clrScheme CT_ColorScheme */
	function parse_clrScheme(t, themes, opts) {
		themes.themeElements.clrScheme = [];
		var color = {};
		(t[0].match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				/* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
				case '<a:clrScheme': case '</a:clrScheme>': break;

				/* 20.1.2.3.32 srgbClr CT_SRgbColor */
				case '<a:srgbClr':
					color.rgb = y.val; break;

				/* 20.1.2.3.33 sysClr CT_SystemColor */
				case '<a:sysClr':
					color.rgb = y.lastClr; break;

				/* 20.1.4.1.1 accent1 (Accent 1) */
				/* 20.1.4.1.2 accent2 (Accent 2) */
				/* 20.1.4.1.3 accent3 (Accent 3) */
				/* 20.1.4.1.4 accent4 (Accent 4) */
				/* 20.1.4.1.5 accent5 (Accent 5) */
				/* 20.1.4.1.6 accent6 (Accent 6) */
				/* 20.1.4.1.9 dk1 (Dark 1) */
				/* 20.1.4.1.10 dk2 (Dark 2) */
				/* 20.1.4.1.15 folHlink (Followed Hyperlink) */
				/* 20.1.4.1.19 hlink (Hyperlink) */
				/* 20.1.4.1.22 lt1 (Light 1) */
				/* 20.1.4.1.23 lt2 (Light 2) */
				case '<a:dk1>': case '</a:dk1>':
				case '<a:lt1>': case '</a:lt1>':
				case '<a:dk2>': case '</a:dk2>':
				case '<a:lt2>': case '</a:lt2>':
				case '<a:accent1>': case '</a:accent1>':
				case '<a:accent2>': case '</a:accent2>':
				case '<a:accent3>': case '</a:accent3>':
				case '<a:accent4>': case '</a:accent4>':
				case '<a:accent5>': case '</a:accent5>':
				case '<a:accent6>': case '</a:accent6>':
				case '<a:hlink>': case '</a:hlink>':
				case '<a:folHlink>': case '</a:folHlink>':
					if (y[0][1] === '/') {
						themes.themeElements.clrScheme.push(color);
						color = {};
					} else {
						color.name = y[0].substring(3, y[0].length - 1);
					}
					break;

				default: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
			}
		});
	}

	/* 20.1.4.1.18 fontScheme CT_FontScheme */
	function parse_fontScheme(t, themes, opts) { }

	/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */
	function parse_fmtScheme(t, themes, opts) { }

	var clrsregex = /<a:clrScheme([^>]*)>[^\u2603]*<\/a:clrScheme>/;
	var fntsregex = /<a:fontScheme([^>]*)>[^\u2603]*<\/a:fontScheme>/;
	var fmtsregex = /<a:fmtScheme([^>]*)>[^\u2603]*<\/a:fmtScheme>/;

	/* 20.1.6.10 themeElements CT_BaseStyles */
	function parse_themeElements(data, themes, opts) {
		themes.themeElements = {};

		var t;

		[
			/* clrScheme CT_ColorScheme */
			['clrScheme', clrsregex, parse_clrScheme],
			/* fontScheme CT_FontScheme */
			['fontScheme', fntsregex, parse_fontScheme],
			/* fmtScheme CT_StyleMatrix */
			['fmtScheme', fmtsregex, parse_fmtScheme]
		].forEach(function(m) {
			if(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
			m[2](t, themes, opts);
		});
	}

	var themeltregex = /<a:themeElements([^>]*)>[^\u2603]*<\/a:themeElements>/;

	/* 14.2.7 Theme Part */
	function parse_theme_xml(data, opts) {
		/* 20.1.6.9 theme CT_OfficeStyleSheet */
		if(!data || data.length === 0) return parse_theme_xml(write_theme());

		var t;
		var themes = {};

		/* themeElements CT_BaseStyles */
		if(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');
		parse_themeElements(t[0], themes, opts);

		return themes;
	}

	function write_theme(Themes, opts) {
		if(opts && opts.themeXLSX) return opts.themeXLSX;
		var o = [XML_HEADER];
		o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
		o[o.length] =  '<a:themeElements>';

		o[o.length] =   '<a:clrScheme name="Office">';
		o[o.length] =    '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
		o[o.length] =    '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
		o[o.length] =    '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
		o[o.length] =    '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
		o[o.length] =    '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
		o[o.length] =    '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
		o[o.length] =    '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
		o[o.length] =    '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
		o[o.length] =    '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
		o[o.length] =    '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
		o[o.length] =    '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
		o[o.length] =    '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
		o[o.length] =   '</a:clrScheme>';

		o[o.length] =   '<a:fontScheme name="Office">';
		o[o.length] =    '<a:majorFont>';
		o[o.length] =     '<a:latin typeface="Cambria"/>';
		o[o.length] =     '<a:ea typeface=""/>';
		o[o.length] =     '<a:cs typeface=""/>';
		o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
		o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
		o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
		o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
		o[o.length] =     '<a:font script="Arab" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Hebr" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
		o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
		o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
		o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
		o[o.length] =     '<a:font script="Khmr" typeface="MoolBoran"/>';
		o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
		o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
		o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
		o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
		o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
		o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
		o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
		o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
		o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
		o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
		o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
		o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
		o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
		o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
		o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
		o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
		o[o.length] =     '<a:font script="Viet" typeface="Times New Roman"/>';
		o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
		o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
		o[o.length] =    '</a:majorFont>';
		o[o.length] =    '<a:minorFont>';
		o[o.length] =     '<a:latin typeface="Calibri"/>';
		o[o.length] =     '<a:ea typeface=""/>';
		o[o.length] =     '<a:cs typeface=""/>';
		o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
		o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
		o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
		o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
		o[o.length] =     '<a:font script="Arab" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Hebr" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
		o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
		o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
		o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
		o[o.length] =     '<a:font script="Khmr" typeface="DaunPenh"/>';
		o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
		o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
		o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
		o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
		o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
		o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
		o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
		o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
		o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
		o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
		o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
		o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
		o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
		o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
		o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
		o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
		o[o.length] =     '<a:font script="Viet" typeface="Arial"/>';
		o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
		o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
		o[o.length] =    '</a:minorFont>';
		o[o.length] =   '</a:fontScheme>';

		o[o.length] =   '<a:fmtScheme name="Office">';
		o[o.length] =    '<a:fillStyleLst>';
		o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:lin ang="16200000" scaled="1"/>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:lin ang="16200000" scaled="0"/>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =    '</a:fillStyleLst>';
		o[o.length] =    '<a:lnStyleLst>';
		o[o.length] =     '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =     '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =     '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
		o[o.length] =    '</a:lnStyleLst>';
		o[o.length] =    '<a:effectStyleLst>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =     '<a:effectStyle>';
		o[o.length] =      '<a:effectLst>';
		o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
		o[o.length] =      '</a:effectLst>';
		o[o.length] =      '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
		o[o.length] =      '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
		o[o.length] =     '</a:effectStyle>';
		o[o.length] =    '</a:effectStyleLst>';
		o[o.length] =    '<a:bgFillStyleLst>';
		o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =     '<a:gradFill rotWithShape="1">';
		o[o.length] =      '<a:gsLst>';
		o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
		o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
		o[o.length] =      '</a:gsLst>';
		o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
		o[o.length] =     '</a:gradFill>';
		o[o.length] =    '</a:bgFillStyleLst>';
		o[o.length] =   '</a:fmtScheme>';
		o[o.length] =  '</a:themeElements>';

		o[o.length] =  '<a:objectDefaults>';
		o[o.length] =   '<a:spDef>';
		o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
		o[o.length] =   '</a:spDef>';
		o[o.length] =   '<a:lnDef>';
		o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
		o[o.length] =   '</a:lnDef>';
		o[o.length] =  '</a:objectDefaults>';
		o[o.length] =  '<a:extraClrSchemeLst/>';
		o[o.length] = '</a:theme>';
		return o.join("");
	}
	/* [MS-XLS] 2.4.326 TODO: payload is a zip file */
	function parse_Theme(blob, length, opts) {
		var dwThemeVersion = blob.read_shift(4);
		if(dwThemeVersion === 124226) return;
		blob.l += length-4;
	}

	/* 2.5.49 */
	function parse_ColorTheme(blob, length) { return blob.read_shift(4); }

	/* 2.5.155 */
	function parse_FullColorExt(blob, length) {
		var o = {};
		o.xclrType = blob.read_shift(2);
		o.nTintShade = blob.read_shift(2);
		switch(o.xclrType) {
			case 0: blob.l += 4; break;
			case 1: o.xclrValue = parse_IcvXF(blob, 4); break;
			case 2: o.xclrValue = parse_LongRGBA(blob, 4); break;
			case 3: o.xclrValue = parse_ColorTheme(blob, 4); break;
			case 4: blob.l += 4; break;
		}
		blob.l += 8;
		return o;
	}

	/* 2.5.164 TODO: read 7 bits*/
	function parse_IcvXF(blob, length) {
		return parsenoop(blob, length);
	}

	/* 2.5.280 */
	function parse_XFExtGradient(blob, length) {
		return parsenoop(blob, length);
	}

	/* 2.5.108 */
	function parse_ExtProp(blob, length) {
		var extType = blob.read_shift(2);
		var cb = blob.read_shift(2);
		var o = [extType];
		switch(extType) {
			case 0x04: case 0x05: case 0x07: case 0x08:
			case 0x09: case 0x0A: case 0x0B: case 0x0D:
				o[1] = parse_FullColorExt(blob, cb); break;
			case 0x06: o[1] = parse_XFExtGradient(blob, cb); break;
			case 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 5 ? 1 : 2); break;
			default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
		}
		return o;
	}

	/* 2.4.355 */
	function parse_XFExt(blob, length) {
		var end = blob.l + length;
		blob.l += 2;
		var ixfe = blob.read_shift(2);
		blob.l += 2;
		var cexts = blob.read_shift(2);
		var ext = [];
		while(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));
		return {ixfe:ixfe, ext:ext};
	}

	/* xf is an XF, see parse_XFExt for xfext */
	function update_xfext(xf, xfext) {
		xfext.forEach(function(xfe) {
			switch(xfe[0]) { /* 2.5.108 extPropData */
				case 0x04: break; /* foreground color */
				case 0x05: break; /* background color */
				case 0x06: break; /* gradient fill */
				case 0x07: break; /* top cell border color */
				case 0x08: break; /* bottom cell border color */
				case 0x09: break; /* left cell border color */
				case 0x0a: break; /* right cell border color */
				case 0x0b: break; /* diagonal cell border color */
				case 0x0d: break; /* text color */
				case 0x0e: break; /* font scheme */
				case 0x0f: break; /* indentation level */
			}
		});
	}

	/* 18.6 Calculation Chain */
	function parse_cc_xml(data, opts) {
		var d = [];
		if(!data) return d;
		var l = 0, i = 1;
		(data.match(tagregex)||[]).forEach(function(x) {
			var y = parsexmltag(x);
			switch(y[0]) {
				case '<?xml': break;
				/* 18.6.2  calcChain CT_CalcChain 1 */
				case '<calcChain': case '<calcChain>': case '</calcChain>': break;
				/* 18.6.1  c CT_CalcCell 1 */
				case '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;
			}
		});
		return d;
	}

	function write_cc_xml(data, opts) { }
	/* [MS-XLSB] 2.6.4.1 */
	function parse_BrtCalcChainItem$(data, length) {
		var out = {};
		out.i = data.read_shift(4);
		var cell = {};
		cell.r = data.read_shift(4);
		cell.c = data.read_shift(4);
		out.r = encode_cell(cell);
		var flags = data.read_shift(1);
		if(flags & 0x2) out.l = '1';
		if(flags & 0x8) out.a = '1';
		return out;
	}

	/* 18.6 Calculation Chain */
	function parse_cc_bin(data, opts) {
		var out = [];
		var pass = false;
		recordhopper(data, function hopper_cc(val, R_n, RT) {
			switch(RT) {
				case 0x003F: /* 'BrtCalcChainItem$' */
					out.push(val); break;

				default:
					if((R_n||"").indexOf("Begin") > 0){/* empty */}
					else if((R_n||"").indexOf("End") > 0){/* empty */}
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		});
		return out;
	}

	function write_cc_bin(data, opts) { }
	RELS.IMG = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
	RELS.DRAW = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing";
	/* 20.5 DrawingML - SpreadsheetML Drawing */
	function parse_drawing(data, rels) {
		if(!data) return "??";
		/*
		  Chartsheet Drawing:
		   - 20.5.2.35 wsDr CT_Drawing
		    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
		     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
		      - 20.1.2.2.16 graphic CT_GraphicalObject
		       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
	          - chart reference
		   the actual type is based on the URI of the graphicData
			TODO: handle embedded charts and other types of graphics
		*/
		var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];

		return rels['!id'][id].Target;
	}

	/* L.5.5.2 SpreadsheetML Comments + VML Schema */
	var _shapeid = 1024;
	function write_comments_vml(rId, comments) {
		var csize = [21600, 21600];
		/* L.5.2.1.2 Path Attribute */
		var bbox = ["m0,0l0",csize[1],csize[0],csize[1],csize[0],"0xe"].join(",");
		var o = [
			writextag("xml", null, { 'xmlns:v': XLMLNS.v, 'xmlns:o': XLMLNS.o, 'xmlns:x': XLMLNS.x, 'xmlns:mv': XLMLNS.mv }).replace(/\/>/,">"),
			writextag("o:shapelayout", writextag("o:idmap", null, {'v:ext':"edit", 'data':rId}), {'v:ext':"edit"}),
			writextag("v:shapetype", [
				writextag("v:stroke", null, {joinstyle:"miter"}),
				writextag("v:path", null, {gradientshapeok:"t", 'o:connecttype':"rect"})
			].join(""), {id:"_x0000_t202", 'o:spt':202, coordsize:csize.join(","),path:bbox})
		];
		while(_shapeid < rId * 1000) _shapeid += 1000;

		comments.map(function(x) { return decode_cell(x[0]); }).forEach(function(c,i) { o = o.concat([
		'<v:shape' + wxt_helper({
			id:'_x0000_s' + (++_shapeid),
			type:"#_x0000_t202",
			style:"position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10;visibility:hidden",
			fillcolor:"#ECFAD4",
			strokecolor:"#edeaa1"
		}) + '>',
			writextag('v:fill', writextag("o:fill", null, {type:"gradientUnscaled", 'v:ext':"view"}), {'color2':"#BEFF82", 'angle':"-180", 'type':"gradient"}),
			writextag("v:shadow", null, {on:"t", 'obscured':"t"}),
			writextag("v:path", null, {'o:connecttype':"none"}),
			'<v:textbox><div style="text-align:left"></div></v:textbox>',
			'<x:ClientData ObjectType="Note">',
				'<x:MoveWithCells/>',
				'<x:SizeWithCells/>',
				/* Part 4 19.4.2.3 Anchor (Anchor) */
				writetag('x:Anchor', [c.c, 0, c.r, 0, c.c+3, 100, c.r+5, 100].join(",")),
				writetag('x:AutoFill', "False"),
				writetag('x:Row', String(c.r)),
				writetag('x:Column', String(c.c)),
				'<x:Visible/>',
			'</x:ClientData>',
		'</v:shape>'
		]); });
		o.push('</xml>');
		return o.join("");
	}

	RELS.CMNT = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments";

	function parse_comments(zip, dirComments, sheets, sheetRels, opts) {
		for(var i = 0; i != dirComments.length; ++i) {
			var canonicalpath=dirComments[i];
			var comments=parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\//,''), true), canonicalpath, opts);
			if(!comments || !comments.length) continue;
			// find the sheets targeted by these comments
			var sheetNames = keys(sheets);
			for(var j = 0; j != sheetNames.length; ++j) {
				var sheetName = sheetNames[j];
				var rels = sheetRels[sheetName];
				if(rels) {
					var rel = rels[canonicalpath];
					if(rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);
				}
			}
		}
	}

	function insertCommentsIntoSheet(sheetName, sheet, comments) {
		var dense = Array.isArray(sheet);
		var cell, r;
		comments.forEach(function(comment) {
			if(dense) {
				r = decode_cell(comment.ref);
				if(!sheet[r.r]) sheet[r.r] = [];
				cell = sheet[r.r][r.c];
			} else cell = sheet[comment.ref];
			if (!cell) {
				cell = {};
				if(dense) sheet[r.r][r.c] = cell;
				else sheet[comment.ref] = cell;
				var range = safe_decode_range(sheet["!ref"]||"BDWGO1000001:A1");
				var thisCell = decode_cell(comment.ref);
				if(range.s.r > thisCell.r) range.s.r = thisCell.r;
				if(range.e.r < thisCell.r) range.e.r = thisCell.r;
				if(range.s.c > thisCell.c) range.s.c = thisCell.c;
				if(range.e.c < thisCell.c) range.e.c = thisCell.c;
				var encoded = encode_range(range);
				if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
			}

			if (!cell.c) cell.c = [];
			var o = ({a: comment.author, t: comment.t, r: comment.r});
			if(comment.h) o.h = comment.h;
			cell.c.push(o);
		});
	}

	/* 18.7 Comments */
	function parse_comments_xml(data, opts) {
		/* 18.7.6 CT_Comments */
		if(data.match(/<(?:\w+:)?comments *\/>/)) return [];
		var authors = [];
		var commentList = [];
		var authtag = data.match(/<(?:\w+:)?authors>([^\u2603]*)<\/(?:\w+:)?authors>/);
		if(authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
			if(x === "" || x.trim() === "") return;
			var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
			if(a) authors.push(a[1]);
		});
		var cmnttag = data.match(/<(?:\w+:)?commentList>([^\u2603]*)<\/(?:\w+:)?commentList>/);
		if(cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x, index) {
			if(x === "" || x.trim() === "") return;
			var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
			if(!cm) return;
			var y = parsexmltag(cm[0]);
			var comment = ({ author: y.authorId && authors[y.authorId] ? authors[y.authorId] : "sheetjsghost", ref: y.ref, guid: y.guid });
			var cell = decode_cell(y.ref);
			if(opts.sheetRows && opts.sheetRows <= cell.r) return;
			var textMatch = x.match(/<(?:\w+:)?text>([^\u2603]*)<\/(?:\w+:)?text>/);
			var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:"",t:"",h:""};
			comment.r = rt.r;
			if(rt.r == "<t></t>") rt.t = rt.h = "";
			comment.t = rt.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
			if(opts.cellHTML) comment.h = rt.h;
			commentList.push(comment);
		});
		return commentList;
	}

	var CMNT_XML_ROOT = writextag('comments', null, { 'xmlns': XMLNS.main[0] });
	function write_comments_xml(data, opts) {
		var o = [XML_HEADER, CMNT_XML_ROOT];

		var iauthor = [];
		o.push("<authors>");
		data.map(function(x) { return x[1]; }).forEach(function(comment) {
			comment.map(function(x) { return escapexml(x.a); }).forEach(function(a) {
				if(iauthor.indexOf(a) > -1) return;
				iauthor.push(a);
				o.push("<author>" + a + "</author>");
			});
		});
		o.push("</authors>");
		o.push("<commentList>");
		data.forEach(function(d) {
			d[1].forEach(function(c) {
				/* 18.7.3 CT_Comment */
				o.push('<comment ref="' + d[0] + '" authorId="' + iauthor.indexOf(escapexml(c.a)) + '"><text>');
				o.push(writetag("t", c.t == null ? "" : c.t));
				o.push('</text></comment>');
			});
		});
		o.push("</commentList>");
		if(o.length>2) { o[o.length] = ('</comments>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* [MS-XLSB] 2.4.28 BrtBeginComment */
	function parse_BrtBeginComment(data, length) {
		var out = {};
		out.iauthor = data.read_shift(4);
		var rfx = parse_UncheckedRfX(data, 16);
		out.rfx = rfx.s;
		out.ref = encode_cell(rfx.s);
		data.l += 16; /*var guid = parse_GUID(data); */
		return out;
	}
	function write_BrtBeginComment(data, o) {
		if(o == null) o = new_buf(36);
		o.write_shift(4, data[1].iauthor);
		write_UncheckedRfX((data[0]), o);
		o.write_shift(4, 0);
		o.write_shift(4, 0);
		o.write_shift(4, 0);
		o.write_shift(4, 0);
		return o;
	}

	/* [MS-XLSB] 2.4.324 BrtCommentAuthor */
	var parse_BrtCommentAuthor = parse_XLWideString;

	/* [MS-XLSB] 2.1.7.8 Comments */
	function parse_comments_bin(data, opts) {
		var out = [];
		var authors = [];
		var c = {};
		var pass = false;
		recordhopper(data, function hopper_cmnt(val, R_n, RT) {
			switch(RT) {
				case 0x0278: /* 'BrtCommentAuthor' */
					authors.push(val); break;
				case 0x027B: /* 'BrtBeginComment' */
					c = val; break;
				case 0x027D: /* 'BrtCommentText' */
					c.t = val.t; c.h = val.h; c.r = val.r; break;
				case 0x027C: /* 'BrtEndComment' */
					c.author = authors[c.iauthor];
					delete c.iauthor;
					if(opts.sheetRows && opts.sheetRows <= c.rfx.r) break;
					if(!c.t) c.t = "";
					delete c.rfx; out.push(c); break;

				/* case 'BrtUid': */

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */ break;
				case 0x0026: /* 'BrtACEnd' */ break;


				default:
					if((R_n||"").indexOf("Begin") > 0){/* empty */}
					else if((R_n||"").indexOf("End") > 0){/* empty */}
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		});
		return out;
	}

	function write_comments_bin(data, opts) {
		var ba = buf_array();
		var iauthor = [];
		write_record(ba, "BrtBeginComments");
		{ /* COMMENTAUTHORS */
			write_record(ba, "BrtBeginCommentAuthors");
			data.forEach(function(comment) {
				comment[1].forEach(function(c) {
					if(iauthor.indexOf(c.a) > -1) return;
					iauthor.push(c.a.substr(0,54));
					write_record(ba, "BrtCommentAuthor", write_XLWideString(c.a.substr(0, 54)));
				});
			});
			write_record(ba, "BrtEndCommentAuthors");
		}
		{ /* COMMENTLIST */
			write_record(ba, "BrtBeginCommentList");
			data.forEach(function(comment) {
				comment[1].forEach(function(c) {
					c.iauthor = iauthor.indexOf(c.a);
					var range = {s:decode_cell(comment[0]),e:decode_cell(comment[0])};
					write_record(ba, "BrtBeginComment", write_BrtBeginComment([range, c]));
					if(c.t && c.t.length > 0) write_record(ba, "BrtCommentText", write_BrtCommentText(c));
					write_record(ba, "BrtEndComment");
					delete c.iauthor;
				});
			});
			write_record(ba, "BrtEndCommentList");
		}
		write_record(ba, "BrtEndComments");
		return ba.end();
	}
	RELS.DS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet";
	RELS.MS = "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet";

	/* macro and dialog sheet stubs */
	function parse_ds_bin() { return {'!type':'dialog'}; }
	function parse_ds_xml() { return {'!type':'dialog'}; }
	function parse_ms_bin() { return {'!type':'macro'}; }
	function parse_ms_xml() { return {'!type':'macro'}; }
	/* TODO: it will be useful to parse the function str */
	var rc_to_a1 = (function(){
		var rcregex = /(^|[^A-Za-z])R(\[?)(-?\d+|)\]?C(\[?)(-?\d+|)\]?/g;
		var rcbase = ({r:0,c:0});
		function rcfunc($$,$1,$2,$3,$4,$5) {
			var R = $3.length>0?parseInt($3,10)|0:0, C = $5.length>0?parseInt($5,10)|0:0;
			if(C<0 && $4.length === 0) C=0;
			var cRel = false, rRel = false;
			if($4.length > 0 || $5.length == 0) cRel = true; if(cRel) C += rcbase.c; else --C;
			if($2.length > 0 || $3.length == 0) rRel = true; if(rRel) R += rcbase.r; else --R;
			return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
		}
		return function rc_to_a1(fstr, base) {
			rcbase = base;
			return fstr.replace(rcregex, rcfunc);
		};
	})();

	var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)([1-9]\d{0,5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])(?![_.\(A-Za-z0-9])/g;
	var a1_to_rc =(function(){
		return function a1_to_rc(fstr, base) {
			return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5, off, str) {
				/* TODO: handle fixcol / fixrow */
				var c = decode_col($3) - base.c;
				var r = decode_row($5) - base.r;
				return $1 + "R" + (r == 0 ? "" : "[" + r + "]") + "C" + (c == 0 ? "" : "[" + c + "]");
			});
		};
	})();

	/* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */
	function shift_formula_str(f, delta) {
		return f.replace(crefregex, function($0, $1, $2, $3, $4, $5, off, str) {
			return $1+($2=="$" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4=="$" ? $4+$5 : encode_row(decode_row($5) + delta.r));
		});
	}

	function shift_formula_xlsx(f, range, cell) {
		var r = decode_range(range), s = r.s, c = decode_cell(cell);
		var delta = {r:c.r - s.r, c:c.c - s.c};
		return shift_formula_str(f, delta);
	}
	/* --- formula references point to MS-XLS --- */
	/* Small helpers */
	function parseread(l) { return function(blob, length) { blob.l+=l; return; }; }
	function parseread1(blob) { blob.l+=1; return; }

	/* Rgce Helpers */

	/* 2.5.51 */
	function parse_ColRelU(blob, length) {
		var c = blob.read_shift(length == 1 ? 1 : 2);
		return [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];
	}

	/* [MS-XLS] 2.5.198.105 */
	/* [MS-XLSB] 2.5.97.89 */
	function parse_RgceArea(blob, length, opts) {
		var w = 2;
		if(opts) {
			if(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);
			else if(opts.biff == 12) w = 4;
		}
		var r=blob.read_shift(w), R=blob.read_shift(w);
		var c=parse_ColRelU(blob, 2);
		var C=parse_ColRelU(blob, 2);
		return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
	}
	/* BIFF 2-5 encodes flags in the row field */
	function parse_RgceArea_BIFF2(blob/*, length, opts*/) {
		var r=parse_ColRelU(blob, 2), R=parse_ColRelU(blob, 2);
		var c=blob.read_shift(1);
		var C=blob.read_shift(1);
		return { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };
	}

	/* 2.5.198.105 TODO */
	function parse_RgceAreaRel(blob, length/*, opts*/) {
		var r=blob.read_shift(length == 12 ? 4 : 2), R=blob.read_shift(length == 12 ? 4 : 2);
		var c=parse_ColRelU(blob, 2);
		var C=parse_ColRelU(blob, 2);
		return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
	}

	/* 2.5.198.109 */
	function parse_RgceLoc(blob, length, opts) {
		if(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
		var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
		var c = parse_ColRelU(blob, 2);
		return {r:r, c:c[0], cRel:c[1], rRel:c[2]};
	}
	function parse_RgceLoc_BIFF2(blob, length, opts) {
		var r = parse_ColRelU(blob, 2);
		var c = blob.read_shift(1);
		return {r:r[0], c:c, cRel:r[1], rRel:r[2]};
	}

	/* [MS-XLS] 2.5.198.111 TODO */
	/* [MS-XLSB] 2.5.97.92 TODO */
	function parse_RgceLocRel(blob, length, opts) {
		var biff = opts && opts.biff ? opts.biff : 8;
		if(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
		var r = blob.read_shift(biff >= 12 ? 4 : 2);
		var cl = blob.read_shift(2);
		var cRel = (cl & 0x8000) >> 15, rRel = (cl & 0x4000) >> 14;
		cl &= 0x3FFF;
		if(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;
		if(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;
		return {r:r,c:cl,cRel:cRel,rRel:rRel};
	}
	function parse_RgceLocRel_BIFF2(blob, length) {
		var rl = blob.read_shift(2);
		var c = blob.read_shift(1);
		var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
		rl &= 0x3FFF;
		if(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
		if(cRel == 1 && c >= 0x80) c = c - 0x100;
		return {r:rl,c:c,cRel:cRel,rRel:rRel};
	}

	/* Ptg Tokens */

	/* 2.5.198.27 */
	function parse_PtgArea(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
		return [type, area];
	}

	/* [MS-XLS] 2.5.198.28 */
	/* [MS-XLSB] 2.5.97.19 */
	function parse_PtgArea3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2, 'i');
		var w = 8;
		if(opts) switch(opts.biff) {
			case 5: blob.l += 12; w = 6; break;
			case 12: w = 12; break;
		}
		var area = parse_RgceArea(blob, w, opts);
		return [type, ixti, area];
	}

	/* 2.5.198.29 */
	function parse_PtgAreaErr(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		blob.l += opts && opts.biff > 8 ? 12 : 8;
		return [type];
	}
	/* 2.5.198.30 */
	function parse_PtgAreaErr3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2);
		var w = 8;
		if(opts) switch(opts.biff) {
			case 5: blob.l += 12; w = 6; break;
			case 12: w = 12; break;
		}
		blob.l += w;
		return [type, ixti];
	}

	/* 2.5.198.31 */
	function parse_PtgAreaN(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var area = parse_RgceAreaRel(blob, opts && opts.biff > 8 ? 12 : 8, opts);
		return [type, area];
	}

	/* [MS-XLS] 2.5.198.32 */
	/* [MS-XLSB] 2.5.97.23 */
	function parse_PtgArray(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
		return [type];
	}

	/* 2.5.198.33 */
	function parse_PtgAttrBaxcel(blob, length) {
		var bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */
		var bitBaxcel = 1;
		blob.l += 4;
		return [bitSemi, bitBaxcel];
	}

	/* 2.5.198.34 */
	function parse_PtgAttrChoose(blob, length, opts) {
		blob.l +=2;
		var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		var o = [];
		/* offset is 1 less than the number of elements */
		for(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
		return o;
	}

	/* 2.5.198.35 */
	function parse_PtgAttrGoto(blob, length, opts) {
		var bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	}

	/* 2.5.198.36 */
	function parse_PtgAttrIf(blob, length, opts) {
		var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
	}

	/* [MS-XLSB] 2.5.97.28 */
	function parse_PtgAttrIfError(blob, length) {
		var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += 2;
		return [bitIf, blob.read_shift(2)];
	}

	/* 2.5.198.37 */
	function parse_PtgAttrSemi(blob, length, opts) {
		var bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;
		blob.l += opts && opts.biff == 2 ? 3 : 4;
		return [bitSemi];
	}

	/* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */
	function parse_PtgAttrSpaceType(blob, length) {
		var type = blob.read_shift(1), cch = blob.read_shift(1);
		return [type, cch];
	}

	/* 2.5.198.38 */
	function parse_PtgAttrSpace(blob, length) {
		blob.read_shift(2);
		return parse_PtgAttrSpaceType(blob, 2);
	}

	/* 2.5.198.39 */
	function parse_PtgAttrSpaceSemi(blob, length) {
		blob.read_shift(2);
		return parse_PtgAttrSpaceType(blob, 2);
	}

	/* 2.5.198.84 TODO */
	function parse_PtgRef(blob, length, opts) {
		var ptg = blob[blob.l] & 0x1F;
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var loc = parse_RgceLoc(blob, 0, opts);
		return [type, loc];
	}

	/* 2.5.198.88 TODO */
	function parse_PtgRefN(blob, length, opts) {
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var loc = parse_RgceLocRel(blob, 0, opts);
		return [type, loc];
	}

	/* 2.5.198.85 TODO */
	function parse_PtgRef3d(blob, length, opts) {
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var ixti = blob.read_shift(2); // XtiIndex
		var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
		return [type, ixti, loc];
	}


	/* 2.5.198.62 TODO */
	function parse_PtgFunc(blob, length, opts) {
		var ptg = blob[blob.l] & 0x1F;
		var type = (blob[blob.l] & 0x60)>>5;
		blob.l += 1;
		var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
		return [FtabArgc[iftab], Ftab[iftab], type];
	}
	/* 2.5.198.63 TODO */
	function parse_PtgFuncVar(blob, length, opts) {
		blob.l++;
		var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [0, blob.read_shift(1)]: parsetab(blob);
		return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
	}

	function parsetab(blob, length) {
		return [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];
	}

	/* 2.5.198.41 */
	function parse_PtgAttrSum(blob, length, opts) {
		blob.l += opts && opts.biff == 2 ? 3 : 4; return;
	}

	/* 2.5.198.43 */
	var parse_PtgConcat = parseread1;

	/* 2.5.198.58 */
	function parse_PtgExp(blob, length, opts) {
		blob.l++;
		if(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
		var row = blob.read_shift(2);
		var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [row, col];
	}

	/* 2.5.198.57 */
	function parse_PtgErr(blob, length) { blob.l++; return BErr[blob.read_shift(1)]; }

	/* 2.5.198.66 */
	function parse_PtgInt(blob, length) { blob.l++; return blob.read_shift(2); }

	/* 2.5.198.42 */
	function parse_PtgBool(blob, length) { blob.l++; return blob.read_shift(1)!==0;}

	/* 2.5.198.79 */
	function parse_PtgNum(blob, length) { blob.l++; return parse_Xnum(blob, 8); }

	/* 2.5.198.89 */
	function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }

	/* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
	/* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */
	function parse_SerAr(blob, biff) {
		var val = [blob.read_shift(1)];
		if(biff == 12) switch(val[0]) {
			case 0x02: val[0] = 0x04; break; /* SerBool */
			case 0x04: val[0] = 0x10; break; /* SerErr */
			case 0x00: val[0] = 0x01; break; /* SerNum */
			case 0x01: val[0] = 0x02; break; /* SerStr */
		}
		switch(val[0]) {
			/* 2.5.192.113 */
			case 0x04: /* SerBool -- boolean */
				val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
				blob.l += 7; break;
			/* 2.5.192.114 */
			case 0x10: /* SerErr -- error */
				val[1] = BErr[blob[blob.l]];
				blob.l += 8; break;
			/* 2.5.192.115 */
			case 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */
				blob.l += 8; break;
			/* 2.5.192.116 */
			case 0x01: /* SerNum -- Xnum */
				val[1] = parse_Xnum(blob, 8); break;
			/* 2.5.192.117 */
			case 0x02: /* SerStr -- XLUnicodeString (<256 chars) */
				val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;
			// default: throw "Bad SerAr: " + val[0]; /* Unreachable */
		}
		return val;
	}

	/* 2.5.198.61 */
	function parse_PtgExtraMem(blob, cce) {
		var count = blob.read_shift(2);
		var out = [];
		for(var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8));
		return out;
	}

	/* 2.5.198.59 */
	function parse_PtgExtraArray(blob, length, opts) {
		var rows = 0, cols = 0;
		if(opts.biff == 12) {
			rows = blob.read_shift(4); // DRw
			cols = blob.read_shift(4); // DCol
		} else {
			cols = 1 + blob.read_shift(1); //DColByteU
			rows = 1 + blob.read_shift(2); //DRw
		}
		if(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }
		// $FlowIgnore
		for(var i = 0, o=[]; i != rows && (o[i] = []); ++i)
			for(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
		return o;
	}

	/* 2.5.198.76 */
	function parse_PtgName(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var w = (!opts || (opts.biff >= 8)) ? 4 : 2;
		var nameindex = blob.read_shift(w);
		switch(opts.biff) {
			case 2: blob.l += 5; break;
			case 3: case 4: blob.l += 8; break;
			case 5: blob.l += 12; break;
		}
		return [type, 0, nameindex];
	}

	/* 2.5.198.77 */
	function parse_PtgNameX(blob, length, opts) {
		if(opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var ixti = blob.read_shift(2); // XtiIndex
		var nameindex = blob.read_shift(4);
		return [type, ixti, nameindex];
	}
	function parse_PtgNameX_BIFF5(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var ixti = blob.read_shift(2, 'i'); // XtiIndex
		blob.l += 8;
		var nameindex = blob.read_shift(2);
		blob.l += 12;
		return [type, ixti, nameindex];
	}

	/* 2.5.198.70 */
	function parse_PtgMemArea(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		blob.l += (opts && opts.biff == 2 ? 3 : 4);
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [type, cce];
	}

	/* 2.5.198.72 */
	function parse_PtgMemFunc(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
		return [type, cce];
	}


	/* 2.5.198.86 */
	function parse_PtgRefErr(blob, length, opts) {
		var type = (blob.read_shift(1) >>> 5) & 0x03;
		blob.l += 4;
		if(opts.biff == 12) blob.l += 2;
		return [type];
	}

	/* 2.5.198.87 */
	function parse_PtgRefErr3d(blob, length, opts) {
		var type = (blob[blob.l++] & 0x60) >> 5;
		var ixti = blob.read_shift(2);
		var w = 4;
		if(opts) switch(opts.biff) {
			case 5: throw new Error("PtgRefErr3d -- 5"); // TODO: find test case
			case 12: w = 6; break;
		}
		blob.l += w;
		return [type, ixti];
	}

	/* 2.5.198.26 */
	var parse_PtgAdd = parseread1;
	/* 2.5.198.45 */
	var parse_PtgDiv = parseread1;
	/* 2.5.198.56 */
	var parse_PtgEq = parseread1;
	/* 2.5.198.64 */
	var parse_PtgGe = parseread1;
	/* 2.5.198.65 */
	var parse_PtgGt = parseread1;
	/* 2.5.198.67 */
	var parse_PtgIsect = parseread1;
	/* 2.5.198.68 */
	var parse_PtgLe = parseread1;
	/* 2.5.198.69 */
	var parse_PtgLt = parseread1;
	/* 2.5.198.74 */
	var parse_PtgMissArg = parseread1;
	/* 2.5.198.75 */
	var parse_PtgMul = parseread1;
	/* 2.5.198.78 */
	var parse_PtgNe = parseread1;
	/* 2.5.198.80 */
	var parse_PtgParen = parseread1;
	/* 2.5.198.81 */
	var parse_PtgPercent = parseread1;
	/* 2.5.198.82 */
	var parse_PtgPower = parseread1;
	/* 2.5.198.83 */
	var parse_PtgRange = parseread1;
	/* 2.5.198.90 */
	var parse_PtgSub = parseread1;
	/* 2.5.198.93 */
	var parse_PtgUminus = parseread1;
	/* 2.5.198.94 */
	var parse_PtgUnion = parseread1;
	/* 2.5.198.95 */
	var parse_PtgUplus = parseread1;

	/* 2.5.198.71 */
	var parse_PtgMemErr = parsenoop;
	/* 2.5.198.73 */
	var parse_PtgMemNoMem = parsenoop;
	/* 2.5.198.92 */
	var parse_PtgTbl = parsenoop;

	/* 2.5.198.25 */
	var PtgTypes = {
	0x01: { n:'PtgExp', f:parse_PtgExp },
	0x02: { n:'PtgTbl', f:parse_PtgTbl },
	0x03: { n:'PtgAdd', f:parse_PtgAdd },
	0x04: { n:'PtgSub', f:parse_PtgSub },
	0x05: { n:'PtgMul', f:parse_PtgMul },
	0x06: { n:'PtgDiv', f:parse_PtgDiv },
	0x07: { n:'PtgPower', f:parse_PtgPower },
	0x08: { n:'PtgConcat', f:parse_PtgConcat },
	0x09: { n:'PtgLt', f:parse_PtgLt },
	0x0A: { n:'PtgLe', f:parse_PtgLe },
	0x0B: { n:'PtgEq', f:parse_PtgEq },
	0x0C: { n:'PtgGe', f:parse_PtgGe },
	0x0D: { n:'PtgGt', f:parse_PtgGt },
	0x0E: { n:'PtgNe', f:parse_PtgNe },
	0x0F: { n:'PtgIsect', f:parse_PtgIsect },
	0x10: { n:'PtgUnion', f:parse_PtgUnion },
	0x11: { n:'PtgRange', f:parse_PtgRange },
	0x12: { n:'PtgUplus', f:parse_PtgUplus },
	0x13: { n:'PtgUminus', f:parse_PtgUminus },
	0x14: { n:'PtgPercent', f:parse_PtgPercent },
	0x15: { n:'PtgParen', f:parse_PtgParen },
	0x16: { n:'PtgMissArg', f:parse_PtgMissArg },
	0x17: { n:'PtgStr', f:parse_PtgStr },
	0x1C: { n:'PtgErr', f:parse_PtgErr },
	0x1D: { n:'PtgBool', f:parse_PtgBool },
	0x1E: { n:'PtgInt', f:parse_PtgInt },
	0x1F: { n:'PtgNum', f:parse_PtgNum },
	0x20: { n:'PtgArray', f:parse_PtgArray },
	0x21: { n:'PtgFunc', f:parse_PtgFunc },
	0x22: { n:'PtgFuncVar', f:parse_PtgFuncVar },
	0x23: { n:'PtgName', f:parse_PtgName },
	0x24: { n:'PtgRef', f:parse_PtgRef },
	0x25: { n:'PtgArea', f:parse_PtgArea },
	0x26: { n:'PtgMemArea', f:parse_PtgMemArea },
	0x27: { n:'PtgMemErr', f:parse_PtgMemErr },
	0x28: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },
	0x29: { n:'PtgMemFunc', f:parse_PtgMemFunc },
	0x2A: { n:'PtgRefErr', f:parse_PtgRefErr },
	0x2B: { n:'PtgAreaErr', f:parse_PtgAreaErr },
	0x2C: { n:'PtgRefN', f:parse_PtgRefN },
	0x2D: { n:'PtgAreaN', f:parse_PtgAreaN },
	0x39: { n:'PtgNameX', f:parse_PtgNameX },
	0x3A: { n:'PtgRef3d', f:parse_PtgRef3d },
	0x3B: { n:'PtgArea3d', f:parse_PtgArea3d },
	0x3C: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },
	0x3D: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },
	0xFF: {}
	};
	/* These are duplicated in the PtgTypes table */
	var PtgDupes = {
	0x40: 0x20, 0x60: 0x20,
	0x41: 0x21, 0x61: 0x21,
	0x42: 0x22, 0x62: 0x22,
	0x43: 0x23, 0x63: 0x23,
	0x44: 0x24, 0x64: 0x24,
	0x45: 0x25, 0x65: 0x25,
	0x46: 0x26, 0x66: 0x26,
	0x47: 0x27, 0x67: 0x27,
	0x48: 0x28, 0x68: 0x28,
	0x49: 0x29, 0x69: 0x29,
	0x4A: 0x2A, 0x6A: 0x2A,
	0x4B: 0x2B, 0x6B: 0x2B,
	0x4C: 0x2C, 0x6C: 0x2C,
	0x4D: 0x2D, 0x6D: 0x2D,
	0x59: 0x39, 0x79: 0x39,
	0x5A: 0x3A, 0x7A: 0x3A,
	0x5B: 0x3B, 0x7B: 0x3B,
	0x5C: 0x3C, 0x7C: 0x3C,
	0x5D: 0x3D, 0x7D: 0x3D
	};
	(function(){for(var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];})();

	var Ptg18 = {
	//	0x19: { n:'PtgList', f:parse_PtgList }, // TODO
	//	0x1D: { n:'PtgSxName', f:parse_PtgSxName }, // TODO
	};
	var Ptg19 = {
	0x01: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },
	0x02: { n:'PtgAttrIf', f:parse_PtgAttrIf },
	0x04: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },
	0x08: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },
	0x10: { n:'PtgAttrSum', f:parse_PtgAttrSum },
	0x20: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
	0x40: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },
	0x41: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },
	0x80: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },
	0xFF: {}
	};

	/* 2.4.127 TODO */
	function parse_Formula(blob, length, opts) {
		var end = blob.l + length;
		var cell = parse_XLSCell(blob, 6);
		if(opts.biff == 2) ++blob.l;
		var val = parse_FormulaValue(blob,8);
		var flags = blob.read_shift(1);
		if(opts.biff != 2) {
			blob.read_shift(1);
			if(opts.biff >= 5) {
				var chn = blob.read_shift(4);
			}
		}
		var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
		return {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};
	}

	/* 2.5.133 TODO: how to emit empty strings? */
	function parse_FormulaValue(blob) {
		var b;
		if(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];
		switch(blob[blob.l]) {
			case 0x00: blob.l += 8; return ["String", 's'];
			case 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];
			case 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];
			case 0x03: blob.l += 8; return ["",'s'];
		}
		return [];
	}

	/* 2.5.198.103 */
	function parse_RgbExtra(blob, length, rgce, opts) {
		if(opts.biff < 8) return parsenoop(blob, length);
		var target = blob.l + length;
		var o = [];
		for(var i = 0; i !== rgce.length; ++i) {
			switch(rgce[i][0]) {
				case 'PtgArray': /* PtgArray -> PtgExtraArray */
					rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
					o.push(rgce[i][1]);
					break;
				case 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */
					rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);
					o.push(rgce[i][2]);
					break;
				case 'PtgExp': /* PtgExp -> PtgExtraCol */
					if(opts && opts.biff == 12) {
						rgce[i][1][1] = blob.read_shift(4);
						o.push(rgce[i][1]);
					} break;
				default: break;
			}
		}
		length = target - blob.l;
		/* note: this is technically an error but Excel disregards */
		//if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
		if(length !== 0) o.push(parsenoop(blob, length));
		return o;
	}

	/* 2.5.198.21 */
	function parse_NameParsedFormula(blob, length, opts, cce) {
		var target = blob.l + length;
		var rgce = parse_Rgce(blob, cce, opts);
		var rgcb;
		if(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
		return [rgce, rgcb];
	}

	/* 2.5.198.3 TODO */
	function parse_XLSCellParsedFormula(blob, length, opts) {
		var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
		var rgcb, cce = blob.read_shift(len); // length of rgce
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		var rgce = parse_Rgce(blob, cce, opts);
		if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
		return [rgce, rgcb];
	}

	/* 2.5.198.118 TODO */
	function parse_SharedParsedFormula(blob, length, opts) {
		var target = blob.l + length;
		var rgcb, cce = blob.read_shift(2); // length of rgce
		var rgce = parse_Rgce(blob, cce, opts);
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		if(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
		return [rgce, rgcb];
	}

	/* 2.5.198.1 TODO */
	function parse_ArrayParsedFormula(blob, length, opts, ref) {
		var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
		var rgcb, cce = blob.read_shift(len); // length of rgce
		if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
		var rgce = parse_Rgce(blob, cce, opts);
		if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
		return [rgce, rgcb];
	}

	/* 2.5.198.104 */
	function parse_Rgce(blob, length, opts) {
		var target = blob.l + length;
		var R, id, ptgs = [];
		while(target != blob.l) {
			length = target - blob.l;
			id = blob[blob.l];
			R = PtgTypes[id];
			if(id === 0x18 || id === 0x19) {
				id = blob[blob.l + 1];
				R = (id === 0x18 ? Ptg18 : Ptg19)[id];
			}
			if(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }
			// $FlowIgnore
			else { ptgs.push([R.n, R.f(blob, length, opts)]); }
		}
		return ptgs;
	}

	function stringify_array(f) {
		var o = [];
		for(var i = 0; i < f.length; ++i) {
			var x = f[i], r = [];
			for(var j = 0; j < x.length; ++j) {
				var y = x[j];
				if(y) switch(y[0]) {
					// TODO: handle embedded quotes
					case 0x02:
	r.push('"' + y[1].replace(/"/g,'""') + '"'); break;
					default: r.push(y[1]);
				} else r.push("");
			}
			o.push(r.join(","));
		}
		return o.join(";");
	}

	/* [MS-XLS] 2.2.2 TODO */
	/* [MS-XLSB] 2.2.2 */
	var PtgBinOp = {
		PtgAdd: "+",
		PtgConcat: "&",
		PtgDiv: "/",
		PtgEq: "=",
		PtgGe: ">=",
		PtgGt: ">",
		PtgLe: "<=",
		PtgLt: "<",
		PtgMul: "*",
		PtgNe: "<>",
		PtgPower: "^",
		PtgSub: "-"
	};
	function stringify_formula(formula/*Array<any>*/, range, cell, supbooks, opts) {
		//console.log(formula);
		var _range = /*range != null ? range :*/ {s:{c:0, r:0},e:{c:0, r:0}};
		var stack = [], e1, e2, type, c, ixti=0, nameidx=0, r, sname="";
		if(!formula[0] || !formula[0][0]) return "";
		var last_sp = -1, sp = "";
		//console.log("--",cell,formula[0])
		for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
			var f = formula[0][ff];
			//console.log("++",f, stack)
			switch(f[0]) {
				case 'PtgUminus': /* 2.5.198.93 */
					stack.push("-" + stack.pop()); break;
				case 'PtgUplus': /* 2.5.198.95 */
					stack.push("+" + stack.pop()); break;
				case 'PtgPercent': /* 2.5.198.81 */
					stack.push(stack.pop() + "%"); break;

				case 'PtgAdd':    /* 2.5.198.26 */
				case 'PtgConcat': /* 2.5.198.43 */
				case 'PtgDiv':    /* 2.5.198.45 */
				case 'PtgEq':     /* 2.5.198.56 */
				case 'PtgGe':     /* 2.5.198.64 */
				case 'PtgGt':     /* 2.5.198.65 */
				case 'PtgLe':     /* 2.5.198.68 */
				case 'PtgLt':     /* 2.5.198.69 */
				case 'PtgMul':    /* 2.5.198.75 */
				case 'PtgNe':     /* 2.5.198.78 */
				case 'PtgPower':  /* 2.5.198.82 */
				case 'PtgSub':    /* 2.5.198.90 */
					e1 = stack.pop(); e2 = stack.pop();
					if(last_sp >= 0) {
						switch(formula[0][last_sp][1][0]) {
							case 0:
								// $FlowIgnore
								sp = fill(" ", formula[0][last_sp][1][1]); break;
							case 1:
								// $FlowIgnore
								sp = fill("\r", formula[0][last_sp][1][1]); break;
							default:
								sp = "";
								// $FlowIgnore
								if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
						}
						e2 = e2 + sp;
						last_sp = -1;
					}
					stack.push(e2+PtgBinOp[f[0]]+e1);
					break;

				case 'PtgIsect': /* 2.5.198.67 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+" "+e1);
					break;
				case 'PtgUnion': /* 2.5.198.94 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+","+e1);
					break;
				case 'PtgRange': /* 2.5.198.83 */
					e1 = stack.pop(); e2 = stack.pop();
					stack.push(e2+":"+e1);
					break;

				case 'PtgAttrChoose': /* 2.5.198.34 */
					break;
				case 'PtgAttrGoto': /* 2.5.198.35 */
					break;
				case 'PtgAttrIf': /* 2.5.198.36 */
					break;
				case 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */
					break;


				case 'PtgRef': /* 2.5.198.84 */
					type = f[1][0]; c = shift_cell_xls(f[1][1], _range, opts);
					stack.push(encode_cell_xls(c));
					break;
				case 'PtgRefN': /* 2.5.198.88 */
					type = f[1][0]; c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
					stack.push(encode_cell_xls(c));
					break;
				case 'PtgRef3d': /* 2.5.198.85 */
					type = f[1][0]; ixti = f[1][1]; c = shift_cell_xls(f[1][2], _range, opts);
					sname = supbooks.SheetNames[ixti];
					var w = sname; /* IE9 fails on defined names */
					stack.push(sname + "!" + encode_cell_xls(c));
					break;

				case 'PtgFunc': /* 2.5.198.62 */
				case 'PtgFuncVar': /* 2.5.198.63 */
					//console.log(f[1]);
					/* f[1] = [argc, func, type] */
					var argc = f[1][0], func = f[1][1];
					if(!argc) argc = 0;
					var args = argc == 0 ? [] : stack.slice(-argc);
					stack.length -= argc;
					if(func === 'User') func = args.shift();
					stack.push(func + "(" + args.join(",") + ")");
					break;

				case 'PtgBool': /* 2.5.198.42 */
					stack.push(f[1] ? "TRUE" : "FALSE"); break;
				case 'PtgInt': /* 2.5.198.66 */
					stack.push(f[1]); break;
				case 'PtgNum': /* 2.5.198.79 TODO: precision? */
					stack.push(String(f[1])); break;
				case 'PtgStr': /* 2.5.198.89 */
					// $FlowIgnore
					stack.push('"' + f[1] + '"'); break;
				case 'PtgErr': /* 2.5.198.57 */
					stack.push(f[1]); break;
				case 'PtgAreaN': /* 2.5.198.31 TODO */
					type = f[1][0]; r = shift_range_xls(f[1][1], _range, opts);
					stack.push(encode_range_xls((r), opts));
					break;
				case 'PtgArea': /* 2.5.198.27 TODO: fixed points */
					type = f[1][0]; r = shift_range_xls(f[1][1], _range, opts);
					stack.push(encode_range_xls((r), opts));
					break;
				case 'PtgArea3d': /* 2.5.198.28 TODO */
					type = f[1][0]; ixti = f[1][1]; r = f[1][2];
					sname = (supbooks && supbooks[1] ? supbooks[1][ixti+1] : "**MISSING**");
					stack.push(sname + "!" + encode_range((r)));
					break;
				case 'PtgAttrSum': /* 2.5.198.41 */
					stack.push("SUM(" + stack.pop() + ")");
					break;

				case 'PtgAttrSemi': /* 2.5.198.37 */
					break;

				case 'PtgName': /* 2.5.97.60 TODO: revisions */
					/* f[1] = type, 0, nameindex */
					nameidx = f[1][2];
					var lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];
					var name = lbl ? lbl.Name : "**MISSING**" + String(nameidx);
					if(name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];
					stack.push(name);
					break;

				case 'PtgNameX': /* 2.5.97.61 TODO: revisions */
					/* f[1] = type, ixti, nameindex */
					var bookidx = (f[1][1]); nameidx = f[1][2]; var externbook;
					/* TODO: Properly handle missing values */
					//console.log(bookidx, supbooks);
					if(opts.biff <= 5) {
						if(bookidx < 0) bookidx = -bookidx;
						if(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
					} else {
						var pnxname = supbooks.SheetNames[bookidx];
						var o = "";
						if(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01){/* empty */}
						else if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){
							if(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
								o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + "!";
							}
						}
						else o = supbooks.SheetNames[nameidx-1]+ "!";
						if(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
						else if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
						else o += "??NAMEX??";
						stack.push(o);
						break;
					}
					if(!externbook) externbook = {Name: "??NAMEX??"};
					stack.push(externbook.Name);
					break;

				case 'PtgParen': /* 2.5.198.80 */
					var lp = '(', rp = ')';
					if(last_sp >= 0) {
						sp = "";
						switch(formula[0][last_sp][1][0]) {
							// $FlowIgnore
							case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break;
							// $FlowIgnore
							case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break;
							// $FlowIgnore
							case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break;
							// $FlowIgnore
							case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break;
							default:
								// $FlowIgnore
								if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
						}
						last_sp = -1;
					}
					stack.push(lp + stack.pop() + rp); break;

				case 'PtgRefErr': /* 2.5.198.86 */
					stack.push('#REF!'); break;

				case 'PtgRefErr3d': /* 2.5.198.87 */
					stack.push('#REF!'); break;

				case 'PtgExp': /* 2.5.198.58 TODO */
					c = {c:f[1][1],r:f[1][0]};
					var q = ({c: cell.c, r:cell.r});
					if(supbooks.sharedf[encode_cell(c)]) {
						var parsedf = (supbooks.sharedf[encode_cell(c)]);
						stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
					}
					else {
						var fnd = false;
						for(e1=0;e1!=supbooks.arrayf.length; ++e1) {
							/* TODO: should be something like range_has */
							e2 = supbooks.arrayf[e1];
							if(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
							if(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
							stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
							fnd = true;
							break;
						}
						if(!fnd) stack.push(f[1]);
					}
					break;

				case 'PtgArray': /* 2.5.198.32 TODO */
					stack.push("{" + stringify_array(f[1]) + "}");
					break;

				case 'PtgMemArea': /* 2.5.198.70 TODO: confirm this is a non-display */
					//stack.push("(" + f[2].map(encode_range).join(",") + ")");
					break;

				case 'PtgAttrSpace': /* 2.5.198.38 */
				case 'PtgAttrSpaceSemi': /* 2.5.198.39 */
					last_sp = ff;
					break;

				case 'PtgTbl': /* 2.5.198.92 TODO */
					break;

				case 'PtgMemErr': /* 2.5.198.71 */
					break;

				case 'PtgMissArg': /* 2.5.198.74 */
					stack.push("");
					break;

				case 'PtgAreaErr': /* 2.5.198.29 */
					stack.push("#REF!"); break;

				case 'PtgAreaErr3d': /* 2.5.198.30 */
					stack.push("#REF!"); break;

				case 'PtgMemFunc': /* 2.5.198.72 TODO */
					break;

				default: throw new Error('Unrecognized Formula Token: ' + String(f));
			}
			var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
			if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
				f = formula[0][last_sp];
				var _left = true;
				switch(f[1][0]) {
					/* note: some bad XLSB files omit the PtgParen */
					case 4: _left = false;
					/* falls through */
					case 0:
						// $FlowIgnore
						sp = fill(" ", f[1][1]); break;
					case 5: _left = false;
					/* falls through */
					case 1:
						// $FlowIgnore
						sp = fill("\r", f[1][1]); break;
					default:
						sp = "";
						// $FlowIgnore
						if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
				}
				stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
				last_sp = -1;
			}
			//console.log("::",f, stack)
		}
		//console.log("--",stack);
		if(stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
		return stack[0];
	}

	/* XLSB Parsed Formula records have the same shape */
	function parse_XLSBParsedFormula(data, length, opts) {
		var end = data.l + length;
		var cce = data.read_shift(4);
		var rgce = parse_Rgce(data, cce, opts);
		var cb = data.read_shift(4);
		var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
		return [rgce, rgcb];
	}

	/* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */
	var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.4 CellParsedFormula */
	var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.12 NameParsedFormula */
	var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLSB] 2.5.97.98 SharedParsedFormula */
	var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
	/* [MS-XLS] 2.5.198.44 */
	var PtgDataType = {
	0x1: "REFERENCE", // reference to range
	0x2: "VALUE", // single value
	0x3: "ARRAY" // array of values
	};

	/* [MS-XLS] 2.5.198.4 */
	var Cetab = {
	0x0000: 'BEEP',
	0x0001: 'OPEN',
	0x0002: 'OPEN.LINKS',
	0x0003: 'CLOSE.ALL',
	0x0004: 'SAVE',
	0x0005: 'SAVE.AS',
	0x0006: 'FILE.DELETE',
	0x0007: 'PAGE.SETUP',
	0x0008: 'PRINT',
	0x0009: 'PRINTER.SETUP',
	0x000A: 'QUIT',
	0x000B: 'NEW.WINDOW',
	0x000C: 'ARRANGE.ALL',
	0x000D: 'WINDOW.SIZE',
	0x000E: 'WINDOW.MOVE',
	0x000F: 'FULL',
	0x0010: 'CLOSE',
	0x0011: 'RUN',
	0x0016: 'SET.PRINT.AREA',
	0x0017: 'SET.PRINT.TITLES',
	0x0018: 'SET.PAGE.BREAK',
	0x0019: 'REMOVE.PAGE.BREAK',
	0x001A: 'FONT',
	0x001B: 'DISPLAY',
	0x001C: 'PROTECT.DOCUMENT',
	0x001D: 'PRECISION',
	0x001E: 'A1.R1C1',
	0x001F: 'CALCULATE.NOW',
	0x0020: 'CALCULATION',
	0x0022: 'DATA.FIND',
	0x0023: 'EXTRACT',
	0x0024: 'DATA.DELETE',
	0x0025: 'SET.DATABASE',
	0x0026: 'SET.CRITERIA',
	0x0027: 'SORT',
	0x0028: 'DATA.SERIES',
	0x0029: 'TABLE',
	0x002A: 'FORMAT.NUMBER',
	0x002B: 'ALIGNMENT',
	0x002C: 'STYLE',
	0x002D: 'BORDER',
	0x002E: 'CELL.PROTECTION',
	0x002F: 'COLUMN.WIDTH',
	0x0030: 'UNDO',
	0x0031: 'CUT',
	0x0032: 'COPY',
	0x0033: 'PASTE',
	0x0034: 'CLEAR',
	0x0035: 'PASTE.SPECIAL',
	0x0036: 'EDIT.DELETE',
	0x0037: 'INSERT',
	0x0038: 'FILL.RIGHT',
	0x0039: 'FILL.DOWN',
	0x003D: 'DEFINE.NAME',
	0x003E: 'CREATE.NAMES',
	0x003F: 'FORMULA.GOTO',
	0x0040: 'FORMULA.FIND',
	0x0041: 'SELECT.LAST.CELL',
	0x0042: 'SHOW.ACTIVE.CELL',
	0x0043: 'GALLERY.AREA',
	0x0044: 'GALLERY.BAR',
	0x0045: 'GALLERY.COLUMN',
	0x0046: 'GALLERY.LINE',
	0x0047: 'GALLERY.PIE',
	0x0048: 'GALLERY.SCATTER',
	0x0049: 'COMBINATION',
	0x004A: 'PREFERRED',
	0x004B: 'ADD.OVERLAY',
	0x004C: 'GRIDLINES',
	0x004D: 'SET.PREFERRED',
	0x004E: 'AXES',
	0x004F: 'LEGEND',
	0x0050: 'ATTACH.TEXT',
	0x0051: 'ADD.ARROW',
	0x0052: 'SELECT.CHART',
	0x0053: 'SELECT.PLOT.AREA',
	0x0054: 'PATTERNS',
	0x0055: 'MAIN.CHART',
	0x0056: 'OVERLAY',
	0x0057: 'SCALE',
	0x0058: 'FORMAT.LEGEND',
	0x0059: 'FORMAT.TEXT',
	0x005A: 'EDIT.REPEAT',
	0x005B: 'PARSE',
	0x005C: 'JUSTIFY',
	0x005D: 'HIDE',
	0x005E: 'UNHIDE',
	0x005F: 'WORKSPACE',
	0x0060: 'FORMULA',
	0x0061: 'FORMULA.FILL',
	0x0062: 'FORMULA.ARRAY',
	0x0063: 'DATA.FIND.NEXT',
	0x0064: 'DATA.FIND.PREV',
	0x0065: 'FORMULA.FIND.NEXT',
	0x0066: 'FORMULA.FIND.PREV',
	0x0067: 'ACTIVATE',
	0x0068: 'ACTIVATE.NEXT',
	0x0069: 'ACTIVATE.PREV',
	0x006A: 'UNLOCKED.NEXT',
	0x006B: 'UNLOCKED.PREV',
	0x006C: 'COPY.PICTURE',
	0x006D: 'SELECT',
	0x006E: 'DELETE.NAME',
	0x006F: 'DELETE.FORMAT',
	0x0070: 'VLINE',
	0x0071: 'HLINE',
	0x0072: 'VPAGE',
	0x0073: 'HPAGE',
	0x0074: 'VSCROLL',
	0x0075: 'HSCROLL',
	0x0076: 'ALERT',
	0x0077: 'NEW',
	0x0078: 'CANCEL.COPY',
	0x0079: 'SHOW.CLIPBOARD',
	0x007A: 'MESSAGE',
	0x007C: 'PASTE.LINK',
	0x007D: 'APP.ACTIVATE',
	0x007E: 'DELETE.ARROW',
	0x007F: 'ROW.HEIGHT',
	0x0080: 'FORMAT.MOVE',
	0x0081: 'FORMAT.SIZE',
	0x0082: 'FORMULA.REPLACE',
	0x0083: 'SEND.KEYS',
	0x0084: 'SELECT.SPECIAL',
	0x0085: 'APPLY.NAMES',
	0x0086: 'REPLACE.FONT',
	0x0087: 'FREEZE.PANES',
	0x0088: 'SHOW.INFO',
	0x0089: 'SPLIT',
	0x008A: 'ON.WINDOW',
	0x008B: 'ON.DATA',
	0x008C: 'DISABLE.INPUT',
	0x008E: 'OUTLINE',
	0x008F: 'LIST.NAMES',
	0x0090: 'FILE.CLOSE',
	0x0091: 'SAVE.WORKBOOK',
	0x0092: 'DATA.FORM',
	0x0093: 'COPY.CHART',
	0x0094: 'ON.TIME',
	0x0095: 'WAIT',
	0x0096: 'FORMAT.FONT',
	0x0097: 'FILL.UP',
	0x0098: 'FILL.LEFT',
	0x0099: 'DELETE.OVERLAY',
	0x009B: 'SHORT.MENUS',
	0x009F: 'SET.UPDATE.STATUS',
	0x00A1: 'COLOR.PALETTE',
	0x00A2: 'DELETE.STYLE',
	0x00A3: 'WINDOW.RESTORE',
	0x00A4: 'WINDOW.MAXIMIZE',
	0x00A6: 'CHANGE.LINK',
	0x00A7: 'CALCULATE.DOCUMENT',
	0x00A8: 'ON.KEY',
	0x00A9: 'APP.RESTORE',
	0x00AA: 'APP.MOVE',
	0x00AB: 'APP.SIZE',
	0x00AC: 'APP.MINIMIZE',
	0x00AD: 'APP.MAXIMIZE',
	0x00AE: 'BRING.TO.FRONT',
	0x00AF: 'SEND.TO.BACK',
	0x00B9: 'MAIN.CHART.TYPE',
	0x00BA: 'OVERLAY.CHART.TYPE',
	0x00BB: 'SELECT.END',
	0x00BC: 'OPEN.MAIL',
	0x00BD: 'SEND.MAIL',
	0x00BE: 'STANDARD.FONT',
	0x00BF: 'CONSOLIDATE',
	0x00C0: 'SORT.SPECIAL',
	0x00C1: 'GALLERY.3D.AREA',
	0x00C2: 'GALLERY.3D.COLUMN',
	0x00C3: 'GALLERY.3D.LINE',
	0x00C4: 'GALLERY.3D.PIE',
	0x00C5: 'VIEW.3D',
	0x00C6: 'GOAL.SEEK',
	0x00C7: 'WORKGROUP',
	0x00C8: 'FILL.GROUP',
	0x00C9: 'UPDATE.LINK',
	0x00CA: 'PROMOTE',
	0x00CB: 'DEMOTE',
	0x00CC: 'SHOW.DETAIL',
	0x00CE: 'UNGROUP',
	0x00CF: 'OBJECT.PROPERTIES',
	0x00D0: 'SAVE.NEW.OBJECT',
	0x00D1: 'SHARE',
	0x00D2: 'SHARE.NAME',
	0x00D3: 'DUPLICATE',
	0x00D4: 'APPLY.STYLE',
	0x00D5: 'ASSIGN.TO.OBJECT',
	0x00D6: 'OBJECT.PROTECTION',
	0x00D7: 'HIDE.OBJECT',
	0x00D8: 'SET.EXTRACT',
	0x00D9: 'CREATE.PUBLISHER',
	0x00DA: 'SUBSCRIBE.TO',
	0x00DB: 'ATTRIBUTES',
	0x00DC: 'SHOW.TOOLBAR',
	0x00DE: 'PRINT.PREVIEW',
	0x00DF: 'EDIT.COLOR',
	0x00E0: 'SHOW.LEVELS',
	0x00E1: 'FORMAT.MAIN',
	0x00E2: 'FORMAT.OVERLAY',
	0x00E3: 'ON.RECALC',
	0x00E4: 'EDIT.SERIES',
	0x00E5: 'DEFINE.STYLE',
	0x00F0: 'LINE.PRINT',
	0x00F3: 'ENTER.DATA',
	0x00F9: 'GALLERY.RADAR',
	0x00FA: 'MERGE.STYLES',
	0x00FB: 'EDITION.OPTIONS',
	0x00FC: 'PASTE.PICTURE',
	0x00FD: 'PASTE.PICTURE.LINK',
	0x00FE: 'SPELLING',
	0x0100: 'ZOOM',
	0x0103: 'INSERT.OBJECT',
	0x0104: 'WINDOW.MINIMIZE',
	0x0109: 'SOUND.NOTE',
	0x010A: 'SOUND.PLAY',
	0x010B: 'FORMAT.SHAPE',
	0x010C: 'EXTEND.POLYGON',
	0x010D: 'FORMAT.AUTO',
	0x0110: 'GALLERY.3D.BAR',
	0x0111: 'GALLERY.3D.SURFACE',
	0x0112: 'FILL.AUTO',
	0x0114: 'CUSTOMIZE.TOOLBAR',
	0x0115: 'ADD.TOOL',
	0x0116: 'EDIT.OBJECT',
	0x0117: 'ON.DOUBLECLICK',
	0x0118: 'ON.ENTRY',
	0x0119: 'WORKBOOK.ADD',
	0x011A: 'WORKBOOK.MOVE',
	0x011B: 'WORKBOOK.COPY',
	0x011C: 'WORKBOOK.OPTIONS',
	0x011D: 'SAVE.WORKSPACE',
	0x0120: 'CHART.WIZARD',
	0x0121: 'DELETE.TOOL',
	0x0122: 'MOVE.TOOL',
	0x0123: 'WORKBOOK.SELECT',
	0x0124: 'WORKBOOK.ACTIVATE',
	0x0125: 'ASSIGN.TO.TOOL',
	0x0127: 'COPY.TOOL',
	0x0128: 'RESET.TOOL',
	0x0129: 'CONSTRAIN.NUMERIC',
	0x012A: 'PASTE.TOOL',
	0x012E: 'WORKBOOK.NEW',
	0x0131: 'SCENARIO.CELLS',
	0x0132: 'SCENARIO.DELETE',
	0x0133: 'SCENARIO.ADD',
	0x0134: 'SCENARIO.EDIT',
	0x0135: 'SCENARIO.SHOW',
	0x0136: 'SCENARIO.SHOW.NEXT',
	0x0137: 'SCENARIO.SUMMARY',
	0x0138: 'PIVOT.TABLE.WIZARD',
	0x0139: 'PIVOT.FIELD.PROPERTIES',
	0x013A: 'PIVOT.FIELD',
	0x013B: 'PIVOT.ITEM',
	0x013C: 'PIVOT.ADD.FIELDS',
	0x013E: 'OPTIONS.CALCULATION',
	0x013F: 'OPTIONS.EDIT',
	0x0140: 'OPTIONS.VIEW',
	0x0141: 'ADDIN.MANAGER',
	0x0142: 'MENU.EDITOR',
	0x0143: 'ATTACH.TOOLBARS',
	0x0144: 'VBAActivate',
	0x0145: 'OPTIONS.CHART',
	0x0148: 'VBA.INSERT.FILE',
	0x014A: 'VBA.PROCEDURE.DEFINITION',
	0x0150: 'ROUTING.SLIP',
	0x0152: 'ROUTE.DOCUMENT',
	0x0153: 'MAIL.LOGON',
	0x0156: 'INSERT.PICTURE',
	0x0157: 'EDIT.TOOL',
	0x0158: 'GALLERY.DOUGHNUT',
	0x015E: 'CHART.TREND',
	0x0160: 'PIVOT.ITEM.PROPERTIES',
	0x0162: 'WORKBOOK.INSERT',
	0x0163: 'OPTIONS.TRANSITION',
	0x0164: 'OPTIONS.GENERAL',
	0x0172: 'FILTER.ADVANCED',
	0x0175: 'MAIL.ADD.MAILER',
	0x0176: 'MAIL.DELETE.MAILER',
	0x0177: 'MAIL.REPLY',
	0x0178: 'MAIL.REPLY.ALL',
	0x0179: 'MAIL.FORWARD',
	0x017A: 'MAIL.NEXT.LETTER',
	0x017B: 'DATA.LABEL',
	0x017C: 'INSERT.TITLE',
	0x017D: 'FONT.PROPERTIES',
	0x017E: 'MACRO.OPTIONS',
	0x017F: 'WORKBOOK.HIDE',
	0x0180: 'WORKBOOK.UNHIDE',
	0x0181: 'WORKBOOK.DELETE',
	0x0182: 'WORKBOOK.NAME',
	0x0184: 'GALLERY.CUSTOM',
	0x0186: 'ADD.CHART.AUTOFORMAT',
	0x0187: 'DELETE.CHART.AUTOFORMAT',
	0x0188: 'CHART.ADD.DATA',
	0x0189: 'AUTO.OUTLINE',
	0x018A: 'TAB.ORDER',
	0x018B: 'SHOW.DIALOG',
	0x018C: 'SELECT.ALL',
	0x018D: 'UNGROUP.SHEETS',
	0x018E: 'SUBTOTAL.CREATE',
	0x018F: 'SUBTOTAL.REMOVE',
	0x0190: 'RENAME.OBJECT',
	0x019C: 'WORKBOOK.SCROLL',
	0x019D: 'WORKBOOK.NEXT',
	0x019E: 'WORKBOOK.PREV',
	0x019F: 'WORKBOOK.TAB.SPLIT',
	0x01A0: 'FULL.SCREEN',
	0x01A1: 'WORKBOOK.PROTECT',
	0x01A4: 'SCROLLBAR.PROPERTIES',
	0x01A5: 'PIVOT.SHOW.PAGES',
	0x01A6: 'TEXT.TO.COLUMNS',
	0x01A7: 'FORMAT.CHARTTYPE',
	0x01A8: 'LINK.FORMAT',
	0x01A9: 'TRACER.DISPLAY',
	0x01AE: 'TRACER.NAVIGATE',
	0x01AF: 'TRACER.CLEAR',
	0x01B0: 'TRACER.ERROR',
	0x01B1: 'PIVOT.FIELD.GROUP',
	0x01B2: 'PIVOT.FIELD.UNGROUP',
	0x01B3: 'CHECKBOX.PROPERTIES',
	0x01B4: 'LABEL.PROPERTIES',
	0x01B5: 'LISTBOX.PROPERTIES',
	0x01B6: 'EDITBOX.PROPERTIES',
	0x01B7: 'PIVOT.REFRESH',
	0x01B8: 'LINK.COMBO',
	0x01B9: 'OPEN.TEXT',
	0x01BA: 'HIDE.DIALOG',
	0x01BB: 'SET.DIALOG.FOCUS',
	0x01BC: 'ENABLE.OBJECT',
	0x01BD: 'PUSHBUTTON.PROPERTIES',
	0x01BE: 'SET.DIALOG.DEFAULT',
	0x01BF: 'FILTER',
	0x01C0: 'FILTER.SHOW.ALL',
	0x01C1: 'CLEAR.OUTLINE',
	0x01C2: 'FUNCTION.WIZARD',
	0x01C3: 'ADD.LIST.ITEM',
	0x01C4: 'SET.LIST.ITEM',
	0x01C5: 'REMOVE.LIST.ITEM',
	0x01C6: 'SELECT.LIST.ITEM',
	0x01C7: 'SET.CONTROL.VALUE',
	0x01C8: 'SAVE.COPY.AS',
	0x01CA: 'OPTIONS.LISTS.ADD',
	0x01CB: 'OPTIONS.LISTS.DELETE',
	0x01CC: 'SERIES.AXES',
	0x01CD: 'SERIES.X',
	0x01CE: 'SERIES.Y',
	0x01CF: 'ERRORBAR.X',
	0x01D0: 'ERRORBAR.Y',
	0x01D1: 'FORMAT.CHART',
	0x01D2: 'SERIES.ORDER',
	0x01D3: 'MAIL.LOGOFF',
	0x01D4: 'CLEAR.ROUTING.SLIP',
	0x01D5: 'APP.ACTIVATE.MICROSOFT',
	0x01D6: 'MAIL.EDIT.MAILER',
	0x01D7: 'ON.SHEET',
	0x01D8: 'STANDARD.WIDTH',
	0x01D9: 'SCENARIO.MERGE',
	0x01DA: 'SUMMARY.INFO',
	0x01DB: 'FIND.FILE',
	0x01DC: 'ACTIVE.CELL.FONT',
	0x01DD: 'ENABLE.TIPWIZARD',
	0x01DE: 'VBA.MAKE.ADDIN',
	0x01E0: 'INSERTDATATABLE',
	0x01E1: 'WORKGROUP.OPTIONS',
	0x01E2: 'MAIL.SEND.MAILER',
	0x01E5: 'AUTOCORRECT',
	0x01E9: 'POST.DOCUMENT',
	0x01EB: 'PICKLIST',
	0x01ED: 'VIEW.SHOW',
	0x01EE: 'VIEW.DEFINE',
	0x01EF: 'VIEW.DELETE',
	0x01FD: 'SHEET.BACKGROUND',
	0x01FE: 'INSERT.MAP.OBJECT',
	0x01FF: 'OPTIONS.MENONO',
	0x0205: 'MSOCHECKS',
	0x0206: 'NORMAL',
	0x0207: 'LAYOUT',
	0x0208: 'RM.PRINT.AREA',
	0x0209: 'CLEAR.PRINT.AREA',
	0x020A: 'ADD.PRINT.AREA',
	0x020B: 'MOVE.BRK',
	0x0221: 'HIDECURR.NOTE',
	0x0222: 'HIDEALL.NOTES',
	0x0223: 'DELETE.NOTE',
	0x0224: 'TRAVERSE.NOTES',
	0x0225: 'ACTIVATE.NOTES',
	0x026C: 'PROTECT.REVISIONS',
	0x026D: 'UNPROTECT.REVISIONS',
	0x0287: 'OPTIONS.ME',
	0x028D: 'WEB.PUBLISH',
	0x029B: 'NEWWEBQUERY',
	0x02A1: 'PIVOT.TABLE.CHART',
	0x02F1: 'OPTIONS.SAVE',
	0x02F3: 'OPTIONS.SPELL',
	0x0328: 'HIDEALL.INKANNOTS'
	};

	/* [MS-XLS] 2.5.198.17 */
	/* [MS-XLSB] 2.5.97.10 */
	var Ftab = {
	0x0000: 'COUNT',
	0x0001: 'IF',
	0x0002: 'ISNA',
	0x0003: 'ISERROR',
	0x0004: 'SUM',
	0x0005: 'AVERAGE',
	0x0006: 'MIN',
	0x0007: 'MAX',
	0x0008: 'ROW',
	0x0009: 'COLUMN',
	0x000A: 'NA',
	0x000B: 'NPV',
	0x000C: 'STDEV',
	0x000D: 'DOLLAR',
	0x000E: 'FIXED',
	0x000F: 'SIN',
	0x0010: 'COS',
	0x0011: 'TAN',
	0x0012: 'ATAN',
	0x0013: 'PI',
	0x0014: 'SQRT',
	0x0015: 'EXP',
	0x0016: 'LN',
	0x0017: 'LOG10',
	0x0018: 'ABS',
	0x0019: 'INT',
	0x001A: 'SIGN',
	0x001B: 'ROUND',
	0x001C: 'LOOKUP',
	0x001D: 'INDEX',
	0x001E: 'REPT',
	0x001F: 'MID',
	0x0020: 'LEN',
	0x0021: 'VALUE',
	0x0022: 'TRUE',
	0x0023: 'FALSE',
	0x0024: 'AND',
	0x0025: 'OR',
	0x0026: 'NOT',
	0x0027: 'MOD',
	0x0028: 'DCOUNT',
	0x0029: 'DSUM',
	0x002A: 'DAVERAGE',
	0x002B: 'DMIN',
	0x002C: 'DMAX',
	0x002D: 'DSTDEV',
	0x002E: 'VAR',
	0x002F: 'DVAR',
	0x0030: 'TEXT',
	0x0031: 'LINEST',
	0x0032: 'TREND',
	0x0033: 'LOGEST',
	0x0034: 'GROWTH',
	0x0035: 'GOTO',
	0x0036: 'HALT',
	0x0037: 'RETURN',
	0x0038: 'PV',
	0x0039: 'FV',
	0x003A: 'NPER',
	0x003B: 'PMT',
	0x003C: 'RATE',
	0x003D: 'MIRR',
	0x003E: 'IRR',
	0x003F: 'RAND',
	0x0040: 'MATCH',
	0x0041: 'DATE',
	0x0042: 'TIME',
	0x0043: 'DAY',
	0x0044: 'MONTH',
	0x0045: 'YEAR',
	0x0046: 'WEEKDAY',
	0x0047: 'HOUR',
	0x0048: 'MINUTE',
	0x0049: 'SECOND',
	0x004A: 'NOW',
	0x004B: 'AREAS',
	0x004C: 'ROWS',
	0x004D: 'COLUMNS',
	0x004E: 'OFFSET',
	0x004F: 'ABSREF',
	0x0050: 'RELREF',
	0x0051: 'ARGUMENT',
	0x0052: 'SEARCH',
	0x0053: 'TRANSPOSE',
	0x0054: 'ERROR',
	0x0055: 'STEP',
	0x0056: 'TYPE',
	0x0057: 'ECHO',
	0x0058: 'SET.NAME',
	0x0059: 'CALLER',
	0x005A: 'DEREF',
	0x005B: 'WINDOWS',
	0x005C: 'SERIES',
	0x005D: 'DOCUMENTS',
	0x005E: 'ACTIVE.CELL',
	0x005F: 'SELECTION',
	0x0060: 'RESULT',
	0x0061: 'ATAN2',
	0x0062: 'ASIN',
	0x0063: 'ACOS',
	0x0064: 'CHOOSE',
	0x0065: 'HLOOKUP',
	0x0066: 'VLOOKUP',
	0x0067: 'LINKS',
	0x0068: 'INPUT',
	0x0069: 'ISREF',
	0x006A: 'GET.FORMULA',
	0x006B: 'GET.NAME',
	0x006C: 'SET.VALUE',
	0x006D: 'LOG',
	0x006E: 'EXEC',
	0x006F: 'CHAR',
	0x0070: 'LOWER',
	0x0071: 'UPPER',
	0x0072: 'PROPER',
	0x0073: 'LEFT',
	0x0074: 'RIGHT',
	0x0075: 'EXACT',
	0x0076: 'TRIM',
	0x0077: 'REPLACE',
	0x0078: 'SUBSTITUTE',
	0x0079: 'CODE',
	0x007A: 'NAMES',
	0x007B: 'DIRECTORY',
	0x007C: 'FIND',
	0x007D: 'CELL',
	0x007E: 'ISERR',
	0x007F: 'ISTEXT',
	0x0080: 'ISNUMBER',
	0x0081: 'ISBLANK',
	0x0082: 'T',
	0x0083: 'N',
	0x0084: 'FOPEN',
	0x0085: 'FCLOSE',
	0x0086: 'FSIZE',
	0x0087: 'FREADLN',
	0x0088: 'FREAD',
	0x0089: 'FWRITELN',
	0x008A: 'FWRITE',
	0x008B: 'FPOS',
	0x008C: 'DATEVALUE',
	0x008D: 'TIMEVALUE',
	0x008E: 'SLN',
	0x008F: 'SYD',
	0x0090: 'DDB',
	0x0091: 'GET.DEF',
	0x0092: 'REFTEXT',
	0x0093: 'TEXTREF',
	0x0094: 'INDIRECT',
	0x0095: 'REGISTER',
	0x0096: 'CALL',
	0x0097: 'ADD.BAR',
	0x0098: 'ADD.MENU',
	0x0099: 'ADD.COMMAND',
	0x009A: 'ENABLE.COMMAND',
	0x009B: 'CHECK.COMMAND',
	0x009C: 'RENAME.COMMAND',
	0x009D: 'SHOW.BAR',
	0x009E: 'DELETE.MENU',
	0x009F: 'DELETE.COMMAND',
	0x00A0: 'GET.CHART.ITEM',
	0x00A1: 'DIALOG.BOX',
	0x00A2: 'CLEAN',
	0x00A3: 'MDETERM',
	0x00A4: 'MINVERSE',
	0x00A5: 'MMULT',
	0x00A6: 'FILES',
	0x00A7: 'IPMT',
	0x00A8: 'PPMT',
	0x00A9: 'COUNTA',
	0x00AA: 'CANCEL.KEY',
	0x00AB: 'FOR',
	0x00AC: 'WHILE',
	0x00AD: 'BREAK',
	0x00AE: 'NEXT',
	0x00AF: 'INITIATE',
	0x00B0: 'REQUEST',
	0x00B1: 'POKE',
	0x00B2: 'EXECUTE',
	0x00B3: 'TERMINATE',
	0x00B4: 'RESTART',
	0x00B5: 'HELP',
	0x00B6: 'GET.BAR',
	0x00B7: 'PRODUCT',
	0x00B8: 'FACT',
	0x00B9: 'GET.CELL',
	0x00BA: 'GET.WORKSPACE',
	0x00BB: 'GET.WINDOW',
	0x00BC: 'GET.DOCUMENT',
	0x00BD: 'DPRODUCT',
	0x00BE: 'ISNONTEXT',
	0x00BF: 'GET.NOTE',
	0x00C0: 'NOTE',
	0x00C1: 'STDEVP',
	0x00C2: 'VARP',
	0x00C3: 'DSTDEVP',
	0x00C4: 'DVARP',
	0x00C5: 'TRUNC',
	0x00C6: 'ISLOGICAL',
	0x00C7: 'DCOUNTA',
	0x00C8: 'DELETE.BAR',
	0x00C9: 'UNREGISTER',
	0x00CC: 'USDOLLAR',
	0x00CD: 'FINDB',
	0x00CE: 'SEARCHB',
	0x00CF: 'REPLACEB',
	0x00D0: 'LEFTB',
	0x00D1: 'RIGHTB',
	0x00D2: 'MIDB',
	0x00D3: 'LENB',
	0x00D4: 'ROUNDUP',
	0x00D5: 'ROUNDDOWN',
	0x00D6: 'ASC',
	0x00D7: 'DBCS',
	0x00D8: 'RANK',
	0x00DB: 'ADDRESS',
	0x00DC: 'DAYS360',
	0x00DD: 'TODAY',
	0x00DE: 'VDB',
	0x00DF: 'ELSE',
	0x00E0: 'ELSE.IF',
	0x00E1: 'END.IF',
	0x00E2: 'FOR.CELL',
	0x00E3: 'MEDIAN',
	0x00E4: 'SUMPRODUCT',
	0x00E5: 'SINH',
	0x00E6: 'COSH',
	0x00E7: 'TANH',
	0x00E8: 'ASINH',
	0x00E9: 'ACOSH',
	0x00EA: 'ATANH',
	0x00EB: 'DGET',
	0x00EC: 'CREATE.OBJECT',
	0x00ED: 'VOLATILE',
	0x00EE: 'LAST.ERROR',
	0x00EF: 'CUSTOM.UNDO',
	0x00F0: 'CUSTOM.REPEAT',
	0x00F1: 'FORMULA.CONVERT',
	0x00F2: 'GET.LINK.INFO',
	0x00F3: 'TEXT.BOX',
	0x00F4: 'INFO',
	0x00F5: 'GROUP',
	0x00F6: 'GET.OBJECT',
	0x00F7: 'DB',
	0x00F8: 'PAUSE',
	0x00FB: 'RESUME',
	0x00FC: 'FREQUENCY',
	0x00FD: 'ADD.TOOLBAR',
	0x00FE: 'DELETE.TOOLBAR',
	0x00FF: 'User',
	0x0100: 'RESET.TOOLBAR',
	0x0101: 'EVALUATE',
	0x0102: 'GET.TOOLBAR',
	0x0103: 'GET.TOOL',
	0x0104: 'SPELLING.CHECK',
	0x0105: 'ERROR.TYPE',
	0x0106: 'APP.TITLE',
	0x0107: 'WINDOW.TITLE',
	0x0108: 'SAVE.TOOLBAR',
	0x0109: 'ENABLE.TOOL',
	0x010A: 'PRESS.TOOL',
	0x010B: 'REGISTER.ID',
	0x010C: 'GET.WORKBOOK',
	0x010D: 'AVEDEV',
	0x010E: 'BETADIST',
	0x010F: 'GAMMALN',
	0x0110: 'BETAINV',
	0x0111: 'BINOMDIST',
	0x0112: 'CHIDIST',
	0x0113: 'CHIINV',
	0x0114: 'COMBIN',
	0x0115: 'CONFIDENCE',
	0x0116: 'CRITBINOM',
	0x0117: 'EVEN',
	0x0118: 'EXPONDIST',
	0x0119: 'FDIST',
	0x011A: 'FINV',
	0x011B: 'FISHER',
	0x011C: 'FISHERINV',
	0x011D: 'FLOOR',
	0x011E: 'GAMMADIST',
	0x011F: 'GAMMAINV',
	0x0120: 'CEILING',
	0x0121: 'HYPGEOMDIST',
	0x0122: 'LOGNORMDIST',
	0x0123: 'LOGINV',
	0x0124: 'NEGBINOMDIST',
	0x0125: 'NORMDIST',
	0x0126: 'NORMSDIST',
	0x0127: 'NORMINV',
	0x0128: 'NORMSINV',
	0x0129: 'STANDARDIZE',
	0x012A: 'ODD',
	0x012B: 'PERMUT',
	0x012C: 'POISSON',
	0x012D: 'TDIST',
	0x012E: 'WEIBULL',
	0x012F: 'SUMXMY2',
	0x0130: 'SUMX2MY2',
	0x0131: 'SUMX2PY2',
	0x0132: 'CHITEST',
	0x0133: 'CORREL',
	0x0134: 'COVAR',
	0x0135: 'FORECAST',
	0x0136: 'FTEST',
	0x0137: 'INTERCEPT',
	0x0138: 'PEARSON',
	0x0139: 'RSQ',
	0x013A: 'STEYX',
	0x013B: 'SLOPE',
	0x013C: 'TTEST',
	0x013D: 'PROB',
	0x013E: 'DEVSQ',
	0x013F: 'GEOMEAN',
	0x0140: 'HARMEAN',
	0x0141: 'SUMSQ',
	0x0142: 'KURT',
	0x0143: 'SKEW',
	0x0144: 'ZTEST',
	0x0145: 'LARGE',
	0x0146: 'SMALL',
	0x0147: 'QUARTILE',
	0x0148: 'PERCENTILE',
	0x0149: 'PERCENTRANK',
	0x014A: 'MODE',
	0x014B: 'TRIMMEAN',
	0x014C: 'TINV',
	0x014E: 'MOVIE.COMMAND',
	0x014F: 'GET.MOVIE',
	0x0150: 'CONCATENATE',
	0x0151: 'POWER',
	0x0152: 'PIVOT.ADD.DATA',
	0x0153: 'GET.PIVOT.TABLE',
	0x0154: 'GET.PIVOT.FIELD',
	0x0155: 'GET.PIVOT.ITEM',
	0x0156: 'RADIANS',
	0x0157: 'DEGREES',
	0x0158: 'SUBTOTAL',
	0x0159: 'SUMIF',
	0x015A: 'COUNTIF',
	0x015B: 'COUNTBLANK',
	0x015C: 'SCENARIO.GET',
	0x015D: 'OPTIONS.LISTS.GET',
	0x015E: 'ISPMT',
	0x015F: 'DATEDIF',
	0x0160: 'DATESTRING',
	0x0161: 'NUMBERSTRING',
	0x0162: 'ROMAN',
	0x0163: 'OPEN.DIALOG',
	0x0164: 'SAVE.DIALOG',
	0x0165: 'VIEW.GET',
	0x0166: 'GETPIVOTDATA',
	0x0167: 'HYPERLINK',
	0x0168: 'PHONETIC',
	0x0169: 'AVERAGEA',
	0x016A: 'MAXA',
	0x016B: 'MINA',
	0x016C: 'STDEVPA',
	0x016D: 'VARPA',
	0x016E: 'STDEVA',
	0x016F: 'VARA',
	0x0170: 'BAHTTEXT',
	0x0171: 'THAIDAYOFWEEK',
	0x0172: 'THAIDIGIT',
	0x0173: 'THAIMONTHOFYEAR',
	0x0174: 'THAINUMSOUND',
	0x0175: 'THAINUMSTRING',
	0x0176: 'THAISTRINGLENGTH',
	0x0177: 'ISTHAIDIGIT',
	0x0178: 'ROUNDBAHTDOWN',
	0x0179: 'ROUNDBAHTUP',
	0x017A: 'THAIYEAR',
	0x017B: 'RTD',

	0x017C: 'CUBEVALUE',
	0x017D: 'CUBEMEMBER',
	0x017E: 'CUBEMEMBERPROPERTY',
	0x017F: 'CUBERANKEDMEMBER',
	0x0180: 'HEX2BIN',
	0x0181: 'HEX2DEC',
	0x0182: 'HEX2OCT',
	0x0183: 'DEC2BIN',
	0x0184: 'DEC2HEX',
	0x0185: 'DEC2OCT',
	0x0186: 'OCT2BIN',
	0x0187: 'OCT2HEX',
	0x0188: 'OCT2DEC',
	0x0189: 'BIN2DEC',
	0x018A: 'BIN2OCT',
	0x018B: 'BIN2HEX',
	0x018C: 'IMSUB',
	0x018D: 'IMDIV',
	0x018E: 'IMPOWER',
	0x018F: 'IMABS',
	0x0190: 'IMSQRT',
	0x0191: 'IMLN',
	0x0192: 'IMLOG2',
	0x0193: 'IMLOG10',
	0x0194: 'IMSIN',
	0x0195: 'IMCOS',
	0x0196: 'IMEXP',
	0x0197: 'IMARGUMENT',
	0x0198: 'IMCONJUGATE',
	0x0199: 'IMAGINARY',
	0x019A: 'IMREAL',
	0x019B: 'COMPLEX',
	0x019C: 'IMSUM',
	0x019D: 'IMPRODUCT',
	0x019E: 'SERIESSUM',
	0x019F: 'FACTDOUBLE',
	0x01A0: 'SQRTPI',
	0x01A1: 'QUOTIENT',
	0x01A2: 'DELTA',
	0x01A3: 'GESTEP',
	0x01A4: 'ISEVEN',
	0x01A5: 'ISODD',
	0x01A6: 'MROUND',
	0x01A7: 'ERF',
	0x01A8: 'ERFC',
	0x01A9: 'BESSELJ',
	0x01AA: 'BESSELK',
	0x01AB: 'BESSELY',
	0x01AC: 'BESSELI',
	0x01AD: 'XIRR',
	0x01AE: 'XNPV',
	0x01AF: 'PRICEMAT',
	0x01B0: 'YIELDMAT',
	0x01B1: 'INTRATE',
	0x01B2: 'RECEIVED',
	0x01B3: 'DISC',
	0x01B4: 'PRICEDISC',
	0x01B5: 'YIELDDISC',
	0x01B6: 'TBILLEQ',
	0x01B7: 'TBILLPRICE',
	0x01B8: 'TBILLYIELD',
	0x01B9: 'PRICE',
	0x01BA: 'YIELD',
	0x01BB: 'DOLLARDE',
	0x01BC: 'DOLLARFR',
	0x01BD: 'NOMINAL',
	0x01BE: 'EFFECT',
	0x01BF: 'CUMPRINC',
	0x01C0: 'CUMIPMT',
	0x01C1: 'EDATE',
	0x01C2: 'EOMONTH',
	0x01C3: 'YEARFRAC',
	0x01C4: 'COUPDAYBS',
	0x01C5: 'COUPDAYS',
	0x01C6: 'COUPDAYSNC',
	0x01C7: 'COUPNCD',
	0x01C8: 'COUPNUM',
	0x01C9: 'COUPPCD',
	0x01CA: 'DURATION',
	0x01CB: 'MDURATION',
	0x01CC: 'ODDLPRICE',
	0x01CD: 'ODDLYIELD',
	0x01CE: 'ODDFPRICE',
	0x01CF: 'ODDFYIELD',
	0x01D0: 'RANDBETWEEN',
	0x01D1: 'WEEKNUM',
	0x01D2: 'AMORDEGRC',
	0x01D3: 'AMORLINC',
	0x01D4: 'CONVERT',
	0x02D4: 'SHEETJS',
	0x01D5: 'ACCRINT',
	0x01D6: 'ACCRINTM',
	0x01D7: 'WORKDAY',
	0x01D8: 'NETWORKDAYS',
	0x01D9: 'GCD',
	0x01DA: 'MULTINOMIAL',
	0x01DB: 'LCM',
	0x01DC: 'FVSCHEDULE',
	0x01DD: 'CUBEKPIMEMBER',
	0x01DE: 'CUBESET',
	0x01DF: 'CUBESETCOUNT',
	0x01E0: 'IFERROR',
	0x01E1: 'COUNTIFS',
	0x01E2: 'SUMIFS',
	0x01E3: 'AVERAGEIF',
	0x01E4: 'AVERAGEIFS'
	};
	var FtabArgc = {
	0x0002: 1, /* ISNA */
	0x0003: 1, /* ISERROR */
	0x000F: 1, /* SIN */
	0x0010: 1, /* COS */
	0x0011: 1, /* TAN */
	0x0012: 1, /* ATAN */
	0x0013: 0, /* PI */
	0x0014: 1, /* SQRT */
	0x0015: 1, /* EXP */
	0x0016: 1, /* LN */
	0x0017: 1, /* LOG10 */
	0x0018: 1, /* ABS */
	0x0019: 1, /* INT */
	0x001A: 1, /* SIGN */
	0x001B: 2, /* ROUND */
	0x001E: 2, /* REPT */
	0x001F: 3, /* MID */
	0x0020: 1, /* LEN */
	0x0021: 1, /* VALUE */
	0x0026: 1, /* NOT */
	0x0027: 2, /* MOD */
	0x0028: 3, /* DCOUNT */
	0x0029: 3, /* DSUM */
	0x002A: 3, /* DAVERAGE */
	0x002B: 3, /* DMIN */
	0x002C: 3, /* DMAX */
	0x002D: 3, /* DSTDEV */
	0x002F: 3, /* DVAR */
	0x0030: 2, /* TEXT */
	0x0035: 1, /* GOTO */
	0x003D: 3, /* MIRR */
	0x0041: 3, /* DATE */
	0x0042: 3, /* TIME */
	0x0043: 1, /* DAY */
	0x0044: 1, /* MONTH */
	0x0045: 1, /* YEAR */
	0x0046: 1, /* WEEKDAY */
	0x0047: 1, /* HOUR */
	0x0048: 1, /* MINUTE */
	0x0049: 1, /* SECOND */
	0x004B: 1, /* AREAS */
	0x004C: 1, /* ROWS */
	0x004D: 1, /* COLUMNS */
	0x004F: 2, /* ABSREF */
	0x0050: 2, /* RELREF */
	0x0053: 1, /* TRANSPOSE */
	0x0055: 0, /* STEP */
	0x0056: 1, /* TYPE */
	0x005A: 1, /* DEREF */
	0x0061: 2, /* ATAN2 */
	0x0062: 1, /* ASIN */
	0x0063: 1, /* ACOS */
	0x0065: 3, /* HLOOKUP */
	0x0066: 3, /* VLOOKUP */
	0x0069: 1, /* ISREF */
	0x006F: 1, /* CHAR */
	0x0070: 1, /* LOWER */
	0x0071: 1, /* UPPER */
	0x0072: 1, /* PROPER */
	0x0075: 2, /* EXACT */
	0x0076: 1, /* TRIM */
	0x0077: 4, /* REPLACE */
	0x0079: 1, /* CODE */
	0x007E: 1, /* ISERR */
	0x007F: 1, /* ISTEXT */
	0x0080: 1, /* ISNUMBER */
	0x0081: 1, /* ISBLANK */
	0x0082: 1, /* T */
	0x0083: 1, /* N */
	0x0085: 1, /* FCLOSE */
	0x0086: 1, /* FSIZE */
	0x0087: 1, /* FREADLN */
	0x0088: 2, /* FREAD */
	0x0089: 2, /* FWRITELN */
	0x008A: 2, /* FWRITE */
	0x008C: 1, /* DATEVALUE */
	0x008D: 1, /* TIMEVALUE */
	0x008E: 3, /* SLN */
	0x008F: 4, /* SYD */
	0x0090: 4, /* DDB */
	0x00A2: 1, /* CLEAN */
	0x00A3: 1, /* MDETERM */
	0x00A4: 1, /* MINVERSE */
	0x00A5: 2, /* MMULT */
	0x00AC: 1, /* WHILE */
	0x00AF: 2, /* INITIATE */
	0x00B0: 2, /* REQUEST */
	0x00B1: 3, /* POKE */
	0x00B2: 2, /* EXECUTE */
	0x00B3: 1, /* TERMINATE */
	0x00B8: 1, /* FACT */
	0x00BD: 3, /* DPRODUCT */
	0x00BE: 1, /* ISNONTEXT */
	0x00C3: 3, /* DSTDEVP */
	0x00C4: 3, /* DVARP */
	0x00C5: 1, /* TRUNC */
	0x00C6: 1, /* ISLOGICAL */
	0x00C7: 3, /* DCOUNTA */
	0x00C9: 1, /* UNREGISTER */
	0x00CF: 4, /* REPLACEB */
	0x00D2: 3, /* MIDB */
	0x00D3: 1, /* LENB */
	0x00D4: 2, /* ROUNDUP */
	0x00D5: 2, /* ROUNDDOWN */
	0x00D6: 1, /* ASC */
	0x00D7: 1, /* DBCS */
	0x00E5: 1, /* SINH */
	0x00E6: 1, /* COSH */
	0x00E7: 1, /* TANH */
	0x00E8: 1, /* ASINH */
	0x00E9: 1, /* ACOSH */
	0x00EA: 1, /* ATANH */
	0x00EB: 3, /* DGET */
	0x00F4: 1, /* INFO */
	0x00F7: 4, /* DB */
	0x00FC: 2, /* FREQUENCY */
	0x0101: 1, /* EVALUATE */
	0x0105: 1, /* ERROR.TYPE */
	0x010F: 1, /* GAMMALN */
	0x0111: 4, /* BINOMDIST */
	0x0112: 2, /* CHIDIST */
	0x0113: 2, /* CHIINV */
	0x0114: 2, /* COMBIN */
	0x0115: 3, /* CONFIDENCE */
	0x0116: 3, /* CRITBINOM */
	0x0117: 1, /* EVEN */
	0x0118: 3, /* EXPONDIST */
	0x0119: 3, /* FDIST */
	0x011A: 3, /* FINV */
	0x011B: 1, /* FISHER */
	0x011C: 1, /* FISHERINV */
	0x011D: 2, /* FLOOR */
	0x011E: 4, /* GAMMADIST */
	0x011F: 3, /* GAMMAINV */
	0x0120: 2, /* CEILING */
	0x0121: 4, /* HYPGEOMDIST */
	0x0122: 3, /* LOGNORMDIST */
	0x0123: 3, /* LOGINV */
	0x0124: 3, /* NEGBINOMDIST */
	0x0125: 4, /* NORMDIST */
	0x0126: 1, /* NORMSDIST */
	0x0127: 3, /* NORMINV */
	0x0128: 1, /* NORMSINV */
	0x0129: 3, /* STANDARDIZE */
	0x012A: 1, /* ODD */
	0x012B: 2, /* PERMUT */
	0x012C: 3, /* POISSON */
	0x012D: 3, /* TDIST */
	0x012E: 4, /* WEIBULL */
	0x012F: 2, /* SUMXMY2 */
	0x0130: 2, /* SUMX2MY2 */
	0x0131: 2, /* SUMX2PY2 */
	0x0132: 2, /* CHITEST */
	0x0133: 2, /* CORREL */
	0x0134: 2, /* COVAR */
	0x0135: 3, /* FORECAST */
	0x0136: 2, /* FTEST */
	0x0137: 2, /* INTERCEPT */
	0x0138: 2, /* PEARSON */
	0x0139: 2, /* RSQ */
	0x013A: 2, /* STEYX */
	0x013B: 2, /* SLOPE */
	0x013C: 4, /* TTEST */
	0x0145: 2, /* LARGE */
	0x0146: 2, /* SMALL */
	0x0147: 2, /* QUARTILE */
	0x0148: 2, /* PERCENTILE */
	0x014B: 2, /* TRIMMEAN */
	0x014C: 2, /* TINV */
	0x0151: 2, /* POWER */
	0x0156: 1, /* RADIANS */
	0x0157: 1, /* DEGREES */
	0x015A: 2, /* COUNTIF */
	0x015B: 1, /* COUNTBLANK */
	0x015E: 4, /* ISPMT */
	0x015F: 3, /* DATEDIF */
	0x0160: 1, /* DATESTRING */
	0x0161: 2, /* NUMBERSTRING */
	0x0168: 1, /* PHONETIC */
	0x0170: 1, /* BAHTTEXT */
	0x0171: 1, /* THAIDAYOFWEEK */
	0x0172: 1, /* THAIDIGIT */
	0x0173: 1, /* THAIMONTHOFYEAR */
	0x0174: 1, /* THAINUMSOUND */
	0x0175: 1, /* THAINUMSTRING */
	0x0176: 1, /* THAISTRINGLENGTH */
	0x0177: 1, /* ISTHAIDIGIT */
	0x0178: 1, /* ROUNDBAHTDOWN */
	0x0179: 1, /* ROUNDBAHTUP */
	0x017A: 1, /* THAIYEAR */
	0x017E: 3, /* CUBEMEMBERPROPERTY */
	0x0181: 1, /* HEX2DEC */
	0x0188: 1, /* OCT2DEC */
	0x0189: 1, /* BIN2DEC */
	0x018C: 2, /* IMSUB */
	0x018D: 2, /* IMDIV */
	0x018E: 2, /* IMPOWER */
	0x018F: 1, /* IMABS */
	0x0190: 1, /* IMSQRT */
	0x0191: 1, /* IMLN */
	0x0192: 1, /* IMLOG2 */
	0x0193: 1, /* IMLOG10 */
	0x0194: 1, /* IMSIN */
	0x0195: 1, /* IMCOS */
	0x0196: 1, /* IMEXP */
	0x0197: 1, /* IMARGUMENT */
	0x0198: 1, /* IMCONJUGATE */
	0x0199: 1, /* IMAGINARY */
	0x019A: 1, /* IMREAL */
	0x019E: 4, /* SERIESSUM */
	0x019F: 1, /* FACTDOUBLE */
	0x01A0: 1, /* SQRTPI */
	0x01A1: 2, /* QUOTIENT */
	0x01A4: 1, /* ISEVEN */
	0x01A5: 1, /* ISODD */
	0x01A6: 2, /* MROUND */
	0x01A8: 1, /* ERFC */
	0x01A9: 2, /* BESSELJ */
	0x01AA: 2, /* BESSELK */
	0x01AB: 2, /* BESSELY */
	0x01AC: 2, /* BESSELI */
	0x01AE: 3, /* XNPV */
	0x01B6: 3, /* TBILLEQ */
	0x01B7: 3, /* TBILLPRICE */
	0x01B8: 3, /* TBILLYIELD */
	0x01BB: 2, /* DOLLARDE */
	0x01BC: 2, /* DOLLARFR */
	0x01BD: 2, /* NOMINAL */
	0x01BE: 2, /* EFFECT */
	0x01BF: 6, /* CUMPRINC */
	0x01C0: 6, /* CUMIPMT */
	0x01C1: 2, /* EDATE */
	0x01C2: 2, /* EOMONTH */
	0x01D0: 2, /* RANDBETWEEN */
	0x01D4: 3, /* CONVERT */
	0x01DC: 2, /* FVSCHEDULE */
	0x01DF: 1, /* CUBESETCOUNT */
	0x01E0: 2, /* IFERROR */
	0xFFFF: 0
	};
	/* [MS-XLSX] 2.2.3 Functions */
	/* [MS-XLSB] 2.5.97.10 Ftab */
	var XLSXFutureFunctions = {
		"_xlfn.ACOT": "ACOT",
		"_xlfn.ACOTH": "ACOTH",
		"_xlfn.AGGREGATE": "AGGREGATE",
		"_xlfn.ARABIC": "ARABIC",
		"_xlfn.AVERAGEIF": "AVERAGEIF",
		"_xlfn.AVERAGEIFS": "AVERAGEIFS",
		"_xlfn.BASE": "BASE",
		"_xlfn.BETA.DIST": "BETA.DIST",
		"_xlfn.BETA.INV": "BETA.INV",
		"_xlfn.BINOM.DIST": "BINOM.DIST",
		"_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE",
		"_xlfn.BINOM.INV": "BINOM.INV",
		"_xlfn.BITAND": "BITAND",
		"_xlfn.BITLSHIFT": "BITLSHIFT",
		"_xlfn.BITOR": "BITOR",
		"_xlfn.BITRSHIFT": "BITRSHIFT",
		"_xlfn.BITXOR": "BITXOR",
		"_xlfn.CEILING.MATH": "CEILING.MATH",
		"_xlfn.CEILING.PRECISE": "CEILING.PRECISE",
		"_xlfn.CHISQ.DIST": "CHISQ.DIST",
		"_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT",
		"_xlfn.CHISQ.INV": "CHISQ.INV",
		"_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT",
		"_xlfn.CHISQ.TEST": "CHISQ.TEST",
		"_xlfn.COMBINA": "COMBINA",
		"_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM",
		"_xlfn.CONFIDENCE.T": "CONFIDENCE.T",
		"_xlfn.COT": "COT",
		"_xlfn.COTH": "COTH",
		"_xlfn.COUNTIFS": "COUNTIFS",
		"_xlfn.COVARIANCE.P": "COVARIANCE.P",
		"_xlfn.COVARIANCE.S": "COVARIANCE.S",
		"_xlfn.CSC": "CSC",
		"_xlfn.CSCH": "CSCH",
		"_xlfn.DAYS": "DAYS",
		"_xlfn.DECIMAL": "DECIMAL",
		"_xlfn.ECMA.CEILING": "ECMA.CEILING",
		"_xlfn.ERF.PRECISE": "ERF.PRECISE",
		"_xlfn.ERFC.PRECISE": "ERFC.PRECISE",
		"_xlfn.EXPON.DIST": "EXPON.DIST",
		"_xlfn.F.DIST": "F.DIST",
		"_xlfn.F.DIST.RT": "F.DIST.RT",
		"_xlfn.F.INV": "F.INV",
		"_xlfn.F.INV.RT": "F.INV.RT",
		"_xlfn.F.TEST": "F.TEST",
		"_xlfn.FILTERXML": "FILTERXML",
		"_xlfn.FLOOR.MATH": "FLOOR.MATH",
		"_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE",
		"_xlfn.FORMULATEXT": "FORMULATEXT",
		"_xlfn.GAMMA": "GAMMA",
		"_xlfn.GAMMA.DIST": "GAMMA.DIST",
		"_xlfn.GAMMA.INV": "GAMMA.INV",
		"_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE",
		"_xlfn.GAUSS": "GAUSS",
		"_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST",
		"_xlfn.IFNA": "IFNA",
		"_xlfn.IFERROR": "IFERROR",
		"_xlfn.IMCOSH": "IMCOSH",
		"_xlfn.IMCOT": "IMCOT",
		"_xlfn.IMCSC": "IMCSC",
		"_xlfn.IMCSCH": "IMCSCH",
		"_xlfn.IMSEC": "IMSEC",
		"_xlfn.IMSECH": "IMSECH",
		"_xlfn.IMSINH": "IMSINH",
		"_xlfn.IMTAN": "IMTAN",
		"_xlfn.ISFORMULA": "ISFORMULA",
		"_xlfn.ISO.CEILING": "ISO.CEILING",
		"_xlfn.ISOWEEKNUM": "ISOWEEKNUM",
		"_xlfn.LOGNORM.DIST": "LOGNORM.DIST",
		"_xlfn.LOGNORM.INV": "LOGNORM.INV",
		"_xlfn.MODE.MULT": "MODE.MULT",
		"_xlfn.MODE.SNGL": "MODE.SNGL",
		"_xlfn.MUNIT": "MUNIT",
		"_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST",
		"_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL",
		"_xlfn.NIGBINOM": "NIGBINOM",
		"_xlfn.NORM.DIST": "NORM.DIST",
		"_xlfn.NORM.INV": "NORM.INV",
		"_xlfn.NORM.S.DIST": "NORM.S.DIST",
		"_xlfn.NORM.S.INV": "NORM.S.INV",
		"_xlfn.NUMBERVALUE": "NUMBERVALUE",
		"_xlfn.PDURATION": "PDURATION",
		"_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC",
		"_xlfn.PERCENTILE.INC": "PERCENTILE.INC",
		"_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC",
		"_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC",
		"_xlfn.PERMUTATIONA": "PERMUTATIONA",
		"_xlfn.PHI": "PHI",
		"_xlfn.POISSON.DIST": "POISSON.DIST",
		"_xlfn.QUARTILE.EXC": "QUARTILE.EXC",
		"_xlfn.QUARTILE.INC": "QUARTILE.INC",
		"_xlfn.QUERYSTRING": "QUERYSTRING",
		"_xlfn.RANK.AVG": "RANK.AVG",
		"_xlfn.RANK.EQ": "RANK.EQ",
		"_xlfn.RRI": "RRI",
		"_xlfn.SEC": "SEC",
		"_xlfn.SECH": "SECH",
		"_xlfn.SHEET": "SHEET",
		"_xlfn.SHEETS": "SHEETS",
		"_xlfn.SKEW.P": "SKEW.P",
		"_xlfn.STDEV.P": "STDEV.P",
		"_xlfn.STDEV.S": "STDEV.S",
		"_xlfn.SUMIFS": "SUMIFS",
		"_xlfn.T.DIST": "T.DIST",
		"_xlfn.T.DIST.2T": "T.DIST.2T",
		"_xlfn.T.DIST.RT": "T.DIST.RT",
		"_xlfn.T.INV": "T.INV",
		"_xlfn.T.INV.2T": "T.INV.2T",
		"_xlfn.T.TEST": "T.TEST",
		"_xlfn.UNICHAR": "UNICHAR",
		"_xlfn.UNICODE": "UNICODE",
		"_xlfn.VAR.P": "VAR.P",
		"_xlfn.VAR.S": "VAR.S",
		"_xlfn.WEBSERVICE": "WEBSERVICE",
		"_xlfn.WEIBULL.DIST": "WEIBULL.DIST",
		"_xlfn.WORKDAY.INTL": "WORKDAY.INTL",
		"_xlfn.XOR": "XOR",
		"_xlfn.Z.TEST": "Z.TEST"
	};

	/* Part 3 TODO: actually parse formulae */
	function ods_to_csf_formula(f) {
		if(f.substr(0,3) == "of:") f = f.substr(3);
		/* 5.2 Basic Expressions */
		if(f.charCodeAt(0) == 61) {
			f = f.substr(1);
			if(f.charCodeAt(0) == 61) f = f.substr(1);
		}
		f = f.replace(/COM\.MICROSOFT\./g, "");
		/* Part 3 Section 5.8 References */
		f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) { return $1.replace(/\./g,""); });
		/* TODO: something other than this */
		f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
		return f.replace(/[;~]/g,",").replace(/\|/g,";");
	}

	function csf_to_ods_formula(f) {
		var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g,":");
		/* TODO: something other than this */
		return o.replace(/;/g, "|").replace(/,/g,";");
	}

	function ods_to_csf_range_3D(r) {
		var a = r.split(":");
		var s = a[0].split(".")[0];
		return [s, a[0].split(".")[1] + ":" + a[1].split(".")[1]];
	}
	var strs = {}; // shared strings
	var _ssfopts = {}; // spreadsheet formatting options

	RELS.WS = [
		"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
		"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
	];

	function get_sst_id(sst, str) {
		for(var i = 0, len = sst.length; i < len; ++i) if(sst[i].t === str) { sst.Count ++; return i; }
		sst[len] = {t:str}; sst.Count ++; sst.Unique ++; return len;
	}

	function col_obj_w(C, col) {
		var p = ({min:C+1,max:C+1});
		/* wch (chars), wpx (pixels) */
		var wch = -1;
		if(col.MDW) MDW = col.MDW;
		if(col.width != null) p.customWidth = 1;
		else if(col.wpx != null) wch = px2char(col.wpx);
		else if(col.wch != null) wch = col.wch;
		if(wch > -1) { p.width = char2width(wch); p.customWidth = 1; }
		else if(col.width != null) p.width = col.width;
		if(col.hidden) p.hidden = true;
		return p;
	}

	function default_margins(margins, mode) {
		if(!margins) return;
		var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
		if(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
		if(margins.left   == null) margins.left   = defs[0];
		if(margins.right  == null) margins.right  = defs[1];
		if(margins.top    == null) margins.top    = defs[2];
		if(margins.bottom == null) margins.bottom = defs[3];
		if(margins.header == null) margins.header = defs[4];
		if(margins.footer == null) margins.footer = defs[5];
	}

	function get_cell_style(styles, cell, opts) {
		var z = opts.revssf[cell.z != null ? cell.z : "General"];
		var i = 0x3c, len = styles.length;
		if(z == null && opts.ssf) {
			for(; i < 0x188; ++i) if(opts.ssf[i] == null) {
				SSF.load(cell.z, i);
				opts.ssf[i] = cell.z;
				opts.revssf[cell.z] = z = i;
				break;
			}
		}
		for(i = 0; i != len; ++i) if(styles[i].numFmtId === z) return i;
		styles[len] = {
			numFmtId:z,
			fontId:0,
			fillId:0,
			borderId:0,
			xfId:0,
			applyNumberFormat:1
		};
		return len;
	}

	function safe_format(p, fmtid, fillid, opts, themes, styles) {
		if(p.t === 'z') return;
		if(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
		try {
			if(opts.cellNF) p.z = SSF._table[fmtid];
		} catch(e) { if(opts.WTF) throw e; }
		if(!opts || opts.cellText !== false) try {
			if(p.t === 'e') p.w = p.w || BErr[p.v];
			else if(fmtid === 0) {
				if(p.t === 'n') {
					if((p.v|0) === p.v) p.w = SSF._general_int(p.v,_ssfopts);
					else p.w = SSF._general_num(p.v,_ssfopts);
				}
				else if(p.t === 'd') {
					var dd = datenum(p.v);
					if((dd|0) === dd) p.w = SSF._general_int(dd,_ssfopts);
					else p.w = SSF._general_num(dd,_ssfopts);
				}
				else if(p.v === undefined) return "";
				else p.w = SSF._general(p.v,_ssfopts);
			}
			else if(p.t === 'd') p.w = SSF.format(fmtid,datenum(p.v),_ssfopts);
			else p.w = SSF.format(fmtid,p.v,_ssfopts);
		} catch(e) { if(opts.WTF) throw e; }
		if(fillid) try {
			p.s = styles.Fills[fillid];
			if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
				p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
				if(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
			}
			if (p.s.bgColor && p.s.bgColor.theme) {
				p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
				if(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
			}
		} catch(e) { if(opts.WTF) throw e; }
	}
	function parse_ws_xml_dim(ws, s) {
		var d = safe_decode_range(s);
		if(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws["!ref"] = encode_range(d);
	}
	var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
	var sheetdataregex = /<(?:\w+:)?sheetData>([^\u2603]*)<\/(?:\w+:)?sheetData>/;
	var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
	var dimregex = /"(\w*:\w*)"/;
	var colregex = /<(?:\w:)?col[^>]*[\/]?>/g;
	var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([^\u2603]*)<\/(?:\w:)?autoFilter)>/g;
	var marginregex= /<(?:\w:)?pageMargins[^>]*\/>/g;
	/* 18.3 Worksheets */
	function parse_ws_xml(data, opts, rels, wb, themes, styles) {
		if(!data) return data;
		if(DENSE != null && opts.dense == null) opts.dense = DENSE;

		/* 18.3.1.99 worksheet CT_Worksheet */
		var s = opts.dense ? ([]) : ({});
		var refguess = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} });

		var data1 = "", data2 = "";
		var mtch=data.match(sheetdataregex);
		if(mtch) {
			data1 = data.substr(0, mtch.index);
			data2 = data.substr(mtch.index + mtch[0].length);
		} else data1 = data2 = data;

		/* 18.3.1.35 dimension CT_SheetDimension ? */
		// $FlowIgnore
		var ridx = (data1.match(/<(?:\w*:)?dimension/)||{index:-1}).index;
		if(ridx > 0) {
			var ref = data1.substr(ridx,50).match(dimregex);
			if(ref) parse_ws_xml_dim(s, ref[1]);
		}

		/* 18.3.1.17 cols CT_Cols */
		var columns = [];
		if(opts.cellStyles) {
			/* 18.3.1.13 col CT_Col */
			var cols = data1.match(colregex);
			if(cols) parse_ws_xml_cols(columns, cols);
		}

		/* 18.3.1.80 sheetData CT_SheetData ? */
		if(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);

		/* 18.3.1.2  autoFilter CT_AutoFilter */
		var afilter = data2.match(afregex);
		if(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);

		/* 18.3.1.55 mergeCells CT_MergeCells */
		var mergecells = [];
		var merges = data2.match(mergecregex);
		if(merges) for(ridx = 0; ridx != merges.length; ++ridx)
			mergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf("\"")+1));

		/* 18.3.1.48 hyperlinks CT_Hyperlinks */
		var hlink = data2.match(hlinkregex);
		if(hlink) parse_ws_xml_hlinks(s, hlink, rels);

		/* 18.3.1.62 pageMargins CT_PageMargins */
		var margins = data2.match(marginregex);
		if(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));

		if(!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
		if(opts.sheetRows > 0 && s["!ref"]) {
			var tmpref = safe_decode_range(s["!ref"]);
			if(opts.sheetRows < +tmpref.e.r) {
				tmpref.e.r = opts.sheetRows - 1;
				if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
				if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
				if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
				if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
				s["!fullref"] = s["!ref"];
				s["!ref"] = encode_range(tmpref);
			}
		}
		if(mergecells.length > 0) s["!merges"] = mergecells;
		if(columns.length > 0) s["!cols"] = columns;
		return s;
	}

	function write_ws_xml_merges(merges) {
		if(merges.length == 0) return "";
		var o = '<mergeCells count="' + merges.length + '">';
		for(var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
		return o + '</mergeCells>';
	}

	/* 18.3.1.85 sheetPr CT_SheetProtection */
	function write_ws_xml_protection(sp) {
		// algorithmName, hashValue, saltValue, spinCountpassword
		var o = ({sheet:1});
		var deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
		var deftrue = [
			"formatColumns", "formatRows", "formatCells",
			"insertColumns", "insertRows", "insertHyperlinks",
			"deleteColumns", "deleteRows",
			"sort", "autoFilter", "pivotTables"
		];
		deffalse.forEach(function(n) { if(sp[n] != null && sp[n]) o[n] = "1"; });
		deftrue.forEach(function(n) { if(sp[n] != null && !sp[n]) o[n] = "0"; });
		/* TODO: algorithm */
		if(sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
		return writextag('sheetProtection', null, o);
	}

	function parse_ws_xml_hlinks(s, data, rels) {
		var dense = Array.isArray(s);
		for(var i = 0; i != data.length; ++i) {
			var val = parsexmltag(data[i], true);
			if(!val.ref) return;
			var rel = rels ? rels['!id'][val.id] : null;
			if(rel) {
				val.Target = rel.Target;
				if(val.location) val.Target += "#"+val.location;
				val.Rel = rel;
			} else {
				val.Target = val.location;
				rel = {Target: val.location, TargetMode: 'Internal'};
				val.Rel = rel;
			}
			if(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }
			var rng = safe_decode_range(val.ref);
			for(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {
				var addr = encode_cell({c:C,r:R});
				if(dense) {
					if(!s[R]) s[R] = [];
					if(!s[R][C]) s[R][C] = {t:"z",v:undefined};
					s[R][C].l = val;
				} else {
					if(!s[addr]) s[addr] = {t:"z",v:undefined};
					s[addr].l = val;
				}
			}
		}
	}

	function parse_ws_xml_margins(margin) {
		var o = {};
		["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
			if(margin[k]) o[k] = parseFloat(margin[k]);
		});
		return o;
	}
	function write_ws_xml_margins(margin) {
		default_margins(margin);
		return writextag('pageMargins', null, margin);
	}

	function parse_ws_xml_cols(columns, cols) {
		var seencol = false;
		for(var coli = 0; coli != cols.length; ++coli) {
			var coll = parsexmltag(cols[coli], true);
			if(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
			var colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;
			delete coll.min; delete coll.max; coll.width = +coll.width;
			if(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }
			process_col(coll);
			while(colm <= colM) columns[colm++] = dup(coll);
		}
	}

	function write_ws_xml_cols(ws, cols) {
		var o = ["<cols>"], col, width;
		for(var i = 0; i != cols.length; ++i) {
			if(!(col = cols[i])) continue;
			o[o.length] = (writextag('col', null, col_obj_w(i, col)));
		}
		o[o.length] = "</cols>";
		return o.join("");
	}

	function parse_ws_xml_autofilter(data) {
		var o = { ref: (data.match(/ref="([^"]*)"/)||[])[1]};
		return o;
	}
	function write_ws_xml_autofilter(data) {
		return writextag("autoFilter", null, {ref:data.ref});
	}

	/* 18.3.1.88 sheetViews CT_SheetViews */
	/* 18.3.1.87 sheetView CT_SheetView */
	function write_ws_xml_sheetviews(ws, opts, idx, wb) {
		return writextag("sheetViews", writextag("sheetView", null, {workbookViewId:"0"}), {});
	}

	function write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {
		if(cell.v === undefined && cell.f === undefined || cell.t === 'z') return "";
		var vv = "";
		var oldt = cell.t, oldv = cell.v;
		switch(cell.t) {
			case 'b': vv = cell.v ? "1" : "0"; break;
			case 'n': vv = ''+cell.v; break;
			case 'e': vv = BErr[cell.v]; break;
			case 'd':
				if(opts.cellDates) vv = parseDate(cell.v).toISOString();
				else {
					cell.t = 'n';
					vv = ''+(cell.v = datenum(parseDate(cell.v)));
				}
				if(typeof cell.z === 'undefined') cell.z = SSF._table[14];
				break;
			default: vv = cell.v; break;
		}
		var v = writetag('v', escapexml(vv)), o = ({r:ref});
		/* TODO: cell style */
		var os = get_cell_style(opts.cellXfs, cell, opts);
		if(os !== 0) o.s = os;
		switch(cell.t) {
			case 'n': break;
			case 'd': o.t = "d"; break;
			case 'b': o.t = "b"; break;
			case 'e': o.t = "e"; break;
			default: if(cell.v == null) { delete cell.t; break; }
				if(opts.bookSST) {
					v = writetag('v', ''+get_sst_id(opts.Strings, cell.v));
					o.t = "s"; break;
				}
				o.t = "str"; break;
		}
		if(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }
		if(cell.f) {
			var ff = cell.F && cell.F.substr(0, ref.length) == ref ? {t:"array", ref:cell.F} : null;
			v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : "");
		}
		if(cell.l) ws['!links'].push([ref, cell.l]);
		if(cell.c) ws['!comments'].push([ref, cell.c]);
		return writextag('c', v, o);
	}

	var parse_ws_xml_data = (function parse_ws_xml_data_factory() {
		var cellregex = /<(?:\w+:)?c[ >]/, rowregex = /<\/(?:\w+:)?row>/;
		var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
		var refregex = /ref=["']([^"']*)["']/;
		var match_v = matchtag("v"), match_f = matchtag("f");

	return function parse_ws_xml_data(sdata, s, opts, guess, themes, styles) {
		var ri = 0, x = "", cells = [], cref = [], idx=0, i=0, cc=0, d="", p;
		var tag, tagr = 0, tagc = 0;
		var sstr, ftag;
		var fmtid = 0, fillid = 0, do_format = Array.isArray(styles.CellXf), cf;
		var arrayf = [];
		var sharedf = [];
		var dense = Array.isArray(s);
		var rows = [], rowobj = {}, rowrite = false;
		for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
			x = marr[mt].trim();
			var xlen = x.length;
			if(xlen === 0) continue;

			/* 18.3.1.73 row CT_Row */
			for(ri = 0; ri < xlen; ++ri) if(x.charCodeAt(ri) === 62) break; ++ri;
			tag = parsexmltag(x.substr(0,ri), true);
			tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
			if(opts.sheetRows && opts.sheetRows < tagr) continue;
			if(guess.s.r > tagr - 1) guess.s.r = tagr - 1;
			if(guess.e.r < tagr - 1) guess.e.r = tagr - 1;

			if(opts && opts.cellStyles) {
				rowobj = {}; rowrite = false;
				if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
				if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
				if(rowrite) rows[tagr-1] = rowobj;
			}

			/* 18.3.1.4 c CT_Cell */
			cells = x.substr(ri).split(cellregex);
			for(ri = 0; ri != cells.length; ++ri) {
				x = cells[ri].trim();
				if(x.length === 0) continue;
				cref = x.match(rregex); idx = ri; i=0; cc=0;
				x = "<c " + (x.substr(0,1)=="<"?">":"") + x;
				if(cref != null && cref.length === 2) {
					idx = 0; d=cref[1];
					for(i=0; i != d.length; ++i) {
						if((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;
						idx = 26*idx + cc;
					}
					--idx;
					tagc = idx;
				} else ++tagc;
				for(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;
				tag = parsexmltag(x.substr(0,i), true);
				if(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});
				d = x.substr(i);
				p = ({t:""});

				if((cref=d.match(match_v))!= null && cref[1] !== '') p.v=unescapexml(cref[1]);
				if(opts.cellFormula) {
					if((cref=d.match(match_f))!= null && cref[1] !== '') {
						/* TODO: match against XLSXFutureFunctions */
						p.f=unescapexml(utf8read(cref[1])).replace(/_xlfn\./,"");
						if(cref[0].indexOf('t="array"') > -1) {
							p.F = (d.match(refregex)||[])[1];
							if(p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
						} else if(cref[0].indexOf('t="shared"') > -1) {
							// TODO: parse formula
							ftag = parsexmltag(cref[0]);
							sharedf[parseInt(ftag.si, 10)] = [ftag, unescapexml(utf8read(cref[1]))];
						}
					} else if((cref=d.match(/<f[^>]*\/>/))) {
						ftag = parsexmltag(cref[0]);
						if(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][0].ref, tag.r);
					}
					/* TODO: factor out contains logic */
					var _tag = decode_cell(tag.r);
					for(i = 0; i < arrayf.length; ++i)
						if(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)
							if(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
								p.F = arrayf[i][1];
				}

				if(tag.t == null && p.v === undefined) {
					if(p.f || p.F) {
						p.v = 0; p.t = "n";
					} else if(!opts.sheetStubs) continue;
					else p.t = "z";
				}
				else p.t = tag.t || "n";
				if(guess.s.c > idx) guess.s.c = idx;
				if(guess.e.c < idx) guess.e.c = idx;
				/* 18.18.11 t ST_CellType */
				switch(p.t) {
					case 'n':
						p.v = parseFloat(p.v);
						break;
					case 's':
						sstr = strs[parseInt(p.v, 10)];
						if(typeof p.v == 'undefined') {
							if(!opts.sheetStubs) continue;
							p.t = 'z';
						}
						p.v = sstr.t;
						p.r = sstr.r;
						if(opts.cellHTML) p.h = sstr.h;
						break;
					case 'str':
						p.t = "s";
						p.v = (p.v!=null) ? utf8read(p.v) : '';
						if(opts.cellHTML) p.h = escapehtml(p.v);
						break;
					case 'inlineStr':
						cref = d.match(isregex);
						p.t = 's';
						if(cref != null && (sstr = parse_si(cref[1]))) p.v = sstr.t; else p.v = "";
						break;
					case 'b': p.v = parsexmlbool(p.v); break;
					case 'd':
						if(!opts.cellDates) { p.v = datenum(parseDate(p.v)); p.t = 'n'; }
						break;
					/* error string in .w, number in .v */
					case 'e':
						if(!opts || opts.cellText !== false) p.w = p.v;
						p.v = RBErr[p.v]; break;
				}
				/* formatting */
				fmtid = fillid = 0;
				if(do_format && tag.s !== undefined) {
					cf = styles.CellXf[tag.s];
					if(cf != null) {
						if(cf.numFmtId != null) fmtid = cf.numFmtId;
						if(opts.cellStyles && cf.fillId != null) fillid = cf.fillId;
					}
				}
				safe_format(p, fmtid, fillid, opts, themes, styles);
				if(opts.cellDates && do_format && p.t == 'n' && SSF.is_date(SSF._table[fmtid])) {
					var _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(Date.UTC(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u)); }
				}
				if(dense) {
					var _r = decode_cell(tag.r);
					if(!s[_r.r]) s[_r.r] = [];
					s[_r.r][_r.c] = p;
				} else s[tag.r] = p;
			}
		}
		if(rows.length > 0) s['!rows'] = rows;
	}; })();

	function write_ws_xml_data(ws, opts, idx, wb, rels) {
		var o = [], r = [], range = safe_decode_range(ws['!ref']), cell, ref, rr = "", cols = [], R=0, C=0, rows = ws['!rows'];
		var dense = Array.isArray(ws);
		for(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
		for(R = range.s.r; R <= range.e.r; ++R) {
			r = [];
			rr = encode_row(R);
			for(C = range.s.c; C <= range.e.c; ++C) {
				ref = cols[C] + rr;
				var _cell = dense ? (ws[R]||[])[C]: ws[ref];
				if(_cell === undefined) continue;
				if((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell);
			}
			if(r.length > 0) {
				var params = ({r:rr});
				if(rows && rows[R]) {
					var row = rows[R];
					if(row.hidden) params.hidden = 1;
					var height = -1;
					if (row.hpx) height = px2pt(row.hpx);
					else if (row.hpt) height = row.hpt;
					if (height > -1) { params.ht = height; params.customHeight = 1; }
				}
				o[o.length] = (writextag('row', r.join(""), params));
			}
		}
		return o.join("");
	}

	var WS_XML_ROOT = writextag('worksheet', null, {
		'xmlns': XMLNS.main[0],
		'xmlns:r': XMLNS.r
	});

	function write_ws_xml(idx, opts, wb, rels) {
		var o = [XML_HEADER, WS_XML_ROOT];
		var s = wb.SheetNames[idx], sidx = 0, rdata = "";
		var ws = wb.Sheets[s];
		if(ws == null) ws = {};
		var ref = ws['!ref']; if(ref == null) ref = 'A1';
		if(!rels) rels = {};
		ws['!comments'] = [];
		ws['!drawing'] = [];

		o[o.length] = (writextag('sheetPr', null, {'codeName': escapexml(wb.SheetNames[idx])}));

		o[o.length] = (writextag('dimension', null, {'ref': ref}));

		o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);

		/* TODO: store in WB, process styles */
		if(opts.sheetFormat) o[o.length] = (writextag('sheetFormatPr', null, {defaultRowHeight:opts.sheetFormat.defaultRowHeight||'16', baseColWidth:opts.sheetFormat.baseColWidth||'10' }));

		if(ws['!cols'] != null && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));

		o[sidx = o.length] = '<sheetData/>';
		ws['!links'] = [];
		if(ws['!ref'] != null) {
			rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
			if(rdata.length > 0) o[o.length] = (rdata);
		}
		if(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace("/>",">"); }

		/* sheetCalcPr */

		if(ws['!protect'] != null) o[o.length] = write_ws_xml_protection(ws['!protect']);

		/* protectedRanges */
		/* scenarios */

		if(ws['!autofilter'] != null) o[o.length] = write_ws_xml_autofilter(ws['!autofilter']);

		/* sortState */
		/* dataConsolidate */
		/* customSheetViews */

		if(ws['!merges'] != null && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));

		/* phoneticPr */
		/* conditionalFormatting */
		/* dataValidations */

		var relc = -1, rel, rId = -1;
		if(ws['!links'].length > 0) {
			o[o.length] = "<hyperlinks>";
			ws['!links'].forEach(function(l) {
				if(!l[1].Target) return;
				rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
				rel = ({"ref":l[0], "r:id":"rId"+rId});
				if((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.substr(relc+1));
				if(l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
				o[o.length] = writextag("hyperlink",null,rel);
			});
			o[o.length] = "</hyperlinks>";
		}
		delete ws['!links'];

		/* printOptions */
		if (ws['!margins'] != null) o[o.length] =  write_ws_xml_margins(ws['!margins']);
		/* pageSetup */

		var hfidx = o.length;
		o[o.length] = "";

		/* rowBreaks */
		/* colBreaks */
		/* customProperties */
		/* cellWatches */
		/* ignoredErrors */
		/* smartTags */

		if(ws['!drawing'].length > 0) {
			rId = add_rels(rels, -1, "../drawings/drawing" + (idx+1) + ".xml", RELS.DRAW);
			ws['!drawing'].rid = rId;
			o[o.length] = writextag("drawing", null, {"r:id":"rId" + rId});
		}
		else delete ws['!drawing'];

		if(ws['!comments'].length > 0) {
			rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
			o[o.length] = writextag("legacyDrawing", null, {"r:id":"rId" + rId});
			ws['!legacy'] = rId;
		}

		/* drawingHF */
		/* picture */
		/* oleObjects */
		/* controls */
		/* webPublishItems */
		/* tableParts */
		/* extList */

		if(o.length>2) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}

	/* [MS-XLSB] 2.4.718 BrtRowHdr */
	function parse_BrtRowHdr(data, length) {
		var z = ({});
		var tgt = data.l + length;
		z.r = data.read_shift(4);
		data.l += 4; // TODO: ixfe
		var miyRw = data.read_shift(2);
		data.l += 1; // TODO: top/bot padding
		var flags = data.read_shift(1);
		data.l = tgt;
		if(flags & 0x10) z.hidden = true;
		if(flags & 0x20) z.hpt = miyRw / 20;
		return z;
	}
	function write_BrtRowHdr(R, range, ws) {
		var o = new_buf(17+8*16);
		var row = (ws['!rows']||[])[R]||{};
		o.write_shift(4, R);

		o.write_shift(4, 0); /* TODO: ixfe */

		var miyRw = 0x0140;
		if(row.hpx) miyRw = px2pt(row.hpx) * 20;
		else if(row.hpt) miyRw = row.hpt * 20;
		o.write_shift(2, miyRw);

		o.write_shift(1, 0); /* top/bot padding */

		var flags = 0x0;
		if(row.hidden) flags |= 0x10;
		if(row.hpx || row.hpt) flags |= 0x20;
		o.write_shift(1, flags);

		o.write_shift(1, 0); /* phonetic guide */

		/* [MS-XLSB] 2.5.8 BrtColSpan explains the mechanism */
		var ncolspan = 0, lcs = o.l;
		o.l += 4;

		var caddr = {r:R, c:0};
		for(var i = 0; i < 16; ++i) {
			if(range.s.c > ((i+1) << 10) || range.e.c < (i << 10)) continue;
			var first = -1, last = -1;
			for(var j = (i<<10); j < ((i+1)<<10); ++j) {
				caddr.c = j;
				var cell = Array.isArray(ws) ? (ws[caddr.r]||[])[caddr.c] : ws[encode_cell(caddr)];
				if(cell) { if(first < 0) first = j; last = j; }
			}
			if(first < 0) continue;
			++ncolspan;
			o.write_shift(4, first);
			o.write_shift(4, last);
		}

		var l = o.l;
		o.l = lcs;
		o.write_shift(4, ncolspan);
		o.l = l;

		return o.length > o.l ? o.slice(0, o.l) : o;
	}
	function write_row_header(ba, ws, range, R) {
		var o = write_BrtRowHdr(R, range, ws);
		if(o.length > 17) write_record(ba, 'BrtRowHdr', o);
	}

	/* [MS-XLSB] 2.4.812 BrtWsDim */
	var parse_BrtWsDim = parse_UncheckedRfX;
	var write_BrtWsDim = write_UncheckedRfX;

	/* [MS-XLSB] 2.4.813 BrtWsFmtInfo */
	//function write_BrtWsFmtInfo(ws, o) { }

	/* [MS-XLSB] 2.4.815 BrtWsProp */
	function parse_BrtWsProp(data, length) {
		var z = {};
		/* TODO: pull flags */
		data.l += 19;
		z.name = parse_XLSBCodeName(data, length - 19);
		return z;
	}
	function write_BrtWsProp(str, o) {
		if(o == null) o = new_buf(84+4*str.length);
		for(var i = 0; i < 3; ++i) o.write_shift(1,0);
		write_BrtColor({auto:1}, o);
		o.write_shift(-4,-1);
		o.write_shift(-4,-1);
		write_XLSBCodeName(str, o);
		return o.slice(0, o.l);
	}

	/* [MS-XLSB] 2.4.303 BrtCellBlank */
	function parse_BrtCellBlank(data, length) {
		var cell = parse_XLSBCell(data);
		return [cell];
	}
	function write_BrtCellBlank(cell, ncell, o) {
		if(o == null) o = new_buf(8);
		return write_XLSBCell(ncell, o);
	}


	/* [MS-XLSB] 2.4.304 BrtCellBool */
	function parse_BrtCellBool(data, length) {
		var cell = parse_XLSBCell(data);
		var fBool = data.read_shift(1);
		return [cell, fBool, 'b'];
	}
	function write_BrtCellBool(cell, ncell, o) {
		if(o == null) o = new_buf(9);
		write_XLSBCell(ncell, o);
		o.write_shift(1, cell.v ? 1 : 0);
		return o;
	}

	/* [MS-XLSB] 2.4.305 BrtCellError */
	function parse_BrtCellError(data, length) {
		var cell = parse_XLSBCell(data);
		var bError = data.read_shift(1);
		return [cell, bError, 'e'];
	}

	/* [MS-XLSB] 2.4.308 BrtCellIsst */
	function parse_BrtCellIsst(data, length) {
		var cell = parse_XLSBCell(data);
		var isst = data.read_shift(4);
		return [cell, isst, 's'];
	}
	function write_BrtCellIsst(cell, ncell, o) {
		if(o == null) o = new_buf(12);
		write_XLSBCell(ncell, o);
		o.write_shift(4, ncell.v);
		return o;
	}

	/* [MS-XLSB] 2.4.310 BrtCellReal */
	function parse_BrtCellReal(data, length) {
		var cell = parse_XLSBCell(data);
		var value = parse_Xnum(data);
		return [cell, value, 'n'];
	}
	function write_BrtCellReal(cell, ncell, o) {
		if(o == null) o = new_buf(16);
		write_XLSBCell(ncell, o);
		write_Xnum(cell.v, o);
		return o;
	}

	/* [MS-XLSB] 2.4.311 BrtCellRk */
	function parse_BrtCellRk(data, length) {
		var cell = parse_XLSBCell(data);
		var value = parse_RkNumber(data);
		return [cell, value, 'n'];
	}
	function write_BrtCellRk(cell, ncell, o) {
		if(o == null) o = new_buf(12);
		write_XLSBCell(ncell, o);
		write_RkNumber(cell.v, o);
		return o;
	}


	/* [MS-XLSB] 2.4.314 BrtCellSt */
	function parse_BrtCellSt(data, length) {
		var cell = parse_XLSBCell(data);
		var value = parse_XLWideString(data);
		return [cell, value, 'str'];
	}
	function write_BrtCellSt(cell, ncell, o) {
		if(o == null) o = new_buf(12 + 4 * cell.v.length);
		write_XLSBCell(ncell, o);
		write_XLWideString(cell.v, o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.647 BrtFmlaBool */
	function parse_BrtFmlaBool(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = data.read_shift(1);
		var o = [cell, value, 'b'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.648 BrtFmlaError */
	function parse_BrtFmlaError(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = data.read_shift(1);
		var o = [cell, value, 'e'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.649 BrtFmlaNum */
	function parse_BrtFmlaNum(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = parse_Xnum(data);
		var o = [cell, value, 'n'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.650 BrtFmlaString */
	function parse_BrtFmlaString(data, length, opts) {
		var end = data.l + length;
		var cell = parse_XLSBCell(data);
		cell.r = opts['!row'];
		var value = parse_XLWideString(data);
		var o = [cell, value, 'str'];
		if(opts.cellFormula) {
			data.l += 2;
			var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
			o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
		}
		else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.676 BrtMergeCell */
	var parse_BrtMergeCell = parse_UncheckedRfX;
	var write_BrtMergeCell = write_UncheckedRfX;
	/* [MS-XLSB] 2.4.108 BrtBeginMergeCells */
	function write_BrtBeginMergeCells(cnt, o) {
		if(o == null) o = new_buf(4);
		o.write_shift(4, cnt);
		return o;
	}

	/* [MS-XLSB] 2.4.656 BrtHLink */
	function parse_BrtHLink(data, length, opts) {
		var end = data.l + length;
		var rfx = parse_UncheckedRfX(data, 16);
		var relId = parse_XLNullableWideString(data);
		var loc = parse_XLWideString(data);
		var tooltip = parse_XLWideString(data);
		var display = parse_XLWideString(data);
		data.l = end;
		return {rfx:rfx, relId:relId, loc:loc, Tooltip:tooltip, display:display};
	}
	function write_BrtHLink(l, rId, o) {
		if(o == null) o = new_buf(50+4*l[1].Target.length);
		write_UncheckedRfX({s:decode_cell(l[0]), e:decode_cell(l[0])}, o);
		write_RelID("rId" + rId, o);
		var locidx = l[1].Target.indexOf("#");
		var loc = locidx == -1 ? "" : l[1].Target.substr(locidx+1);
		write_XLWideString(loc || "", o);
		write_XLWideString(l[1].Tooltip || "", o);
		write_XLWideString("", o);
		return o.slice(0, o.l);
	}

	/* [MS-XLSB] 2.4.6 BrtArrFmla */
	function parse_BrtArrFmla(data, length, opts) {
		var end = data.l + length;
		var rfx = parse_RfX(data, 16);
		var fAlwaysCalc = data.read_shift(1);
		var o = [rfx]; o[2] = fAlwaysCalc;
		if(opts.cellFormula) {
			var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
			o[1] = formula;
		} else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.742 BrtShrFmla */
	function parse_BrtShrFmla(data, length, opts) {
		var end = data.l + length;
		var rfx = parse_UncheckedRfX(data, 16);
		var o = [rfx];
		if(opts.cellFormula) {
			var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
			o[1] = formula;
			data.l = end;
		} else data.l = end;
		return o;
	}

	/* [MS-XLSB] 2.4.323 BrtColInfo */
	/* TODO: once XLS ColInfo is set, combine the functions */
	function write_BrtColInfo(C, col, o) {
		if(o == null) o = new_buf(18);
		var p = col_obj_w(C, col);
		o.write_shift(-4, C);
		o.write_shift(-4, C);
		o.write_shift(4, (p.width || 10) * 256);
		o.write_shift(4, 0/*ixfe*/); // style
		var flags = 0;
		if(col.hidden) flags |= 0x01;
		if(typeof p.width == 'number') flags |= 0x02;
		o.write_shift(1, flags); // bit flag
		o.write_shift(1, 0); // bit flag
		return o;
	}

	/* [MS-XLSB] 2.4.672 BrtMargins */
	function parse_BrtMargins(data, length, opts) {
		return {
			left: parse_Xnum(data, 8),
			right: parse_Xnum(data, 8),
			top: parse_Xnum(data, 8),
			bottom: parse_Xnum(data, 8),
			header: parse_Xnum(data, 8),
			footer: parse_Xnum(data, 8)
		};
	}
	function write_BrtMargins(margins, o) {
		if(o == null) o = new_buf(6*8);
		default_margins(margins);
		write_Xnum(margins.left, o);
		write_Xnum(margins.right, o);
		write_Xnum(margins.top, o);
		write_Xnum(margins.bottom, o);
		write_Xnum(margins.header, o);
		write_Xnum(margins.footer, o);
		return o;
	}

	/* [MS-XLSB] 2.4.292 BrtBeginWsView */
	function write_BrtBeginWsView(ws, o) {
		if(o == null) o = new_buf(30);
		o.write_shift(2, 924); // bit flag
		o.write_shift(4, 0);
		o.write_shift(4, 0); // view first row
		o.write_shift(4, 0); // view first col
		o.write_shift(1, 0); // gridline color ICV
		o.write_shift(1, 0);
		o.write_shift(2, 0);
		o.write_shift(2, 100); // zoom scale
		o.write_shift(2, 0);
		o.write_shift(2, 0);
		o.write_shift(2, 0);
		o.write_shift(4, 0); // workbook view id
		return o;
	}

	/* [MS-XLSB] 2.4.740 BrtSheetProtection */
	function write_BrtSheetProtection(sp, o) {
		if(o == null) o = new_buf(16*4+2);
		o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
		o.write_shift(4, 1); // this record should not be written if no protection
		[
			["objects",             false], // fObjects
			["scenarios",           false], // fScenarios
			["formatCells",          true], // fFormatCells
			["formatColumns",        true], // fFormatColumns
			["formatRows",           true], // fFormatRows
			["insertColumns",        true], // fInsertColumns
			["insertRows",           true], // fInsertRows
			["insertHyperlinks",     true], // fInsertHyperlinks
			["deleteColumns",        true], // fDeleteColumns
			["deleteRows",           true], // fDeleteRows
			["selectLockedCells",   false], // fSelLockedCells
			["sort",                 true], // fSort
			["autoFilter",           true], // fAutoFilter
			["pivotTables",          true], // fPivotTables
			["selectUnlockedCells", false]  // fSelUnlockedCells
		].forEach(function(n) {
			if(n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
			else      o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
		});
		return o;
	}

	/* [MS-XLSB] 2.1.7.61 Worksheet */
	function parse_ws_bin(data, _opts, rels, wb, themes, styles) {
		if(!data) return data;
		var opts = _opts || {};
		if(!rels) rels = {'!id':{}};
		if(DENSE != null && opts.dense == null) opts.dense = DENSE;
		var s = opts.dense ? [] : {};

		var ref;
		var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };

		var pass = false, end = false;
		var row, p, cf, R, C, addr, sstr, rr, cell;
		var mergecells = [];
		opts.biff = 12;
		opts['!row'] = 0;

		var ai = 0, af = false;

		var array_formulae = [];
		var shared_formulae = {};
		var supbooks = ([[]]);
		supbooks.sharedf = shared_formulae;
		supbooks.arrayf = array_formulae;
		supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });
		opts.supbooks = supbooks;
		for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];

		var colinfo = [], rowinfo = [];
		var defwidth = 0, defheight = 0; // twips / MDW respectively
		var seencol = false;

		recordhopper(data, function ws_parse(val, R_n, RT) {
			if(end) return;
			switch(RT) {
				case 0x0094: /* 'BrtWsDim' */
					ref = val; break;
				case 0x0000: /* 'BrtRowHdr' */
					row = val;
					if(opts.sheetRows && opts.sheetRows <= row.r) end=true;
					rr = encode_row(R = row.r);
					opts['!row'] = row.r;
					if(val.hidden || val.hpt) {
						if(val.hpt) val.hpx = pt2px(val.hpt);
						rowinfo[val.r] = val;
					}
					break;

				case 0x0002: /* 'BrtCellRk' */
				case 0x0003: /* 'BrtCellError' */
				case 0x0004: /* 'BrtCellBool' */
				case 0x0005: /* 'BrtCellReal' */
				case 0x0006: /* 'BrtCellSt' */
				case 0x0007: /* 'BrtCellIsst' */
				case 0x0008: /* 'BrtFmlaString' */
				case 0x0009: /* 'BrtFmlaNum' */
				case 0x000A: /* 'BrtFmlaBool' */
				case 0x000B: /* 'BrtFmlaError' */
					p = ({t:val[2]});
					switch(val[2]) {
						case 'n': p.v = val[1]; break;
						case 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;
						case 'b': p.v = val[1] ? true : false; break;
						case 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;
						case 'str': p.t = 's'; p.v = utf8read(val[1]); break;
					}
					if((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.ifmt,null,opts, themes, styles);
					C = val[0].c;
					if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
					else s[encode_col(C) + rr] = p;
					if(opts.cellFormula) {
						af = false;
						for(ai = 0; ai < array_formulae.length; ++ai) {
							var aii = array_formulae[ai];
							if(row.r >= aii[0].s.r && row.r <= aii[0].e.r)
								if(C >= aii[0].s.c && C <= aii[0].e.c) {
									p.F = encode_range(aii[0]); af = true;
								}
						}
						if(!af && val.length > 3) p.f = val[3];
					}
					if(refguess.s.r > row.r) refguess.s.r = row.r;
					if(refguess.s.c > C) refguess.s.c = C;
					if(refguess.e.r < row.r) refguess.e.r = row.r;
					if(refguess.e.c < C) refguess.e.c = C;
					if(opts.cellDates && cf && p.t == 'n' && SSF.is_date(SSF._table[cf.ifmt])) {
						var _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(Date.UTC(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u)); }
					}
					break;

				case 0x0001: /* 'BrtCellBlank' */
					if(!opts.sheetStubs) break;
					p = ({t:'z',v:undefined});
					C = val[0].c;
					if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
					else s[encode_col(C) + rr] = p;
					if(refguess.s.r > row.r) refguess.s.r = row.r;
					if(refguess.s.c > C) refguess.s.c = C;
					if(refguess.e.r < row.r) refguess.e.r = row.r;
					if(refguess.e.c < C) refguess.e.c = C;
					break;

				case 0x00B0: /* 'BrtMergeCell' */
					mergecells.push(val); break;

				case 0x01EE: /* 'BrtHLink' */
					var rel = rels['!id'][val.relId];
					if(rel) {
						val.Target = rel.Target;
						if(val.loc) val.Target += "#"+val.loc;
						val.Rel = rel;
					}
					for(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {
						if(opts.dense) {
							if(!s[R]) s[R] = [];
							if(!s[R][C]) s[R][C] = {t:'z',v:undefined};
							s[R][C].l = val;
						} else {
							addr = encode_cell({c:C,r:R});
							if(!s[addr]) s[addr] = {t:'z',v:undefined};
							s[addr].l = val;
						}
					}
					break;

				case 0x01AA: /* 'BrtArrFmla' */
					if(!opts.cellFormula) break;
					array_formulae.push(val);
					cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
					cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
					cell.F = encode_range(val[0]);
					break;
				case 0x01AB: /* 'BrtShrFmla' */
					if(!opts.cellFormula) break;
					shared_formulae[encode_cell(val[0].s)] = val[1];
					cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
					cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
					break;

				/* identical to 'ColInfo' in XLS */
				case 0x003C: /* 'BrtColInfo' */
					if(!opts.cellStyles) break;
					while(val.e >= val.s) {
						colinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01) };
						if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
						process_col(colinfo[val.e+1]);
					}
					break;

				case 0x00A1: /* 'BrtBeginAFilter' */
					s['!autofilter'] = { ref:encode_range(val) };
					break;

				case 0x01DC: /* 'BrtMargins' */
					s['!margins'] = val;
					break;

				/* case 'BrtUid' */
				case 0x00AF: /* 'BrtAFilterDateGroupItem' */
				case 0x0284: /* 'BrtActiveX' */
				case 0x0271: /* 'BrtBigName' */
				case 0x0232: /* 'BrtBkHim' */
				case 0x018C: /* 'BrtBrk' */
				case 0x0458: /* 'BrtCFIcon' */
				case 0x047A: /* 'BrtCFRuleExt' */
				case 0x01D7: /* 'BrtCFVO' */
				case 0x041A: /* 'BrtCFVO14' */
				case 0x0289: /* 'BrtCellIgnoreEC' */
				case 0x0451: /* 'BrtCellIgnoreEC14' */
				case 0x0031: /* 'BrtCellMeta' */
				case 0x024D: /* 'BrtCellSmartTagProperty' */
				case 0x025F: /* 'BrtCellWatch' */
				case 0x0234: /* 'BrtColor' */
				case 0x041F: /* 'BrtColor14' */
				case 0x00A8: /* 'BrtColorFilter' */
				case 0x00AE: /* 'BrtCustomFilter' */
				case 0x049C: /* 'BrtCustomFilter14' */
				case 0x01F3: /* 'BrtDRef' */
				case 0x0040: /* 'BrtDVal' */
				case 0x041D: /* 'BrtDVal14' */
				case 0x0226: /* 'BrtDrawing' */
				case 0x00AB: /* 'BrtDynamicFilter' */
				case 0x00A7: /* 'BrtFilter' */
				case 0x0499: /* 'BrtFilter14' */
				case 0x00A9: /* 'BrtIconFilter' */
				case 0x049D: /* 'BrtIconFilter14' */
				case 0x0227: /* 'BrtLegacyDrawing' */
				case 0x0228: /* 'BrtLegacyDrawingHF' */
				case 0x0295: /* 'BrtListPart' */
				case 0x027F: /* 'BrtOleObject' */
				case 0x01DE: /* 'BrtPageSetup' */
				case 0x0097: /* 'BrtPane' */
				case 0x0219: /* 'BrtPhoneticInfo' */
				case 0x01DD: /* 'BrtPrintOptions' */
				case 0x0218: /* 'BrtRangeProtection' */
				case 0x044F: /* 'BrtRangeProtection14' */
				case 0x02A8: /* 'BrtRangeProtectionIso' */
				case 0x0450: /* 'BrtRangeProtectionIso14' */
				case 0x0400: /* 'BrtRwDescent' */
				case 0x0098: /* 'BrtSel' */
				case 0x0297: /* 'BrtSheetCalcProp' */
				case 0x0217: /* 'BrtSheetProtection' */
				case 0x02A6: /* 'BrtSheetProtectionIso' */
				case 0x01F8: /* 'BrtSlc' */
				case 0x0413: /* 'BrtSparkline' */
				case 0x01AC: /* 'BrtTable' */
				case 0x00AA: /* 'BrtTop10Filter' */
				case 0x0032: /* 'BrtValueMeta' */
				case 0x0816: /* 'BrtWebExtension' */
				case 0x01E5: /* 'BrtWsFmtInfo' */
				case 0x0415: /* 'BrtWsFmtInfoEx14' */
				case 0x0093: /* 'BrtWsProp' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */ break;
				case 0x0026: /* 'BrtACEnd' */ break;

				default:
					if((R_n||"").indexOf("Begin") > 0){/* empty */}
					else if((R_n||"").indexOf("End") > 0){/* empty */}
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		}, opts);

		delete opts.supbooks;
		delete opts['!row'];

		if(!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
		if(opts.sheetRows && s["!ref"]) {
			var tmpref = safe_decode_range(s["!ref"]);
			if(opts.sheetRows < +tmpref.e.r) {
				tmpref.e.r = opts.sheetRows - 1;
				if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
				if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
				if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
				if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
				s["!fullref"] = s["!ref"];
				s["!ref"] = encode_range(tmpref);
			}
		}
		if(mergecells.length > 0) s["!merges"] = mergecells;
		if(colinfo.length > 0) s["!cols"] = colinfo;
		if(rowinfo.length > 0) s["!rows"] = rowinfo;
		return s;
	}

	/* TODO: something useful -- this is a stub */
	function write_ws_bin_cell(ba, cell, R, C, opts, ws) {
		if(cell.v === undefined) return "";
		var vv = ""; var olddate = null;
		switch(cell.t) {
			case 'b': vv = cell.v ? "1" : "0"; break;
			case 'd': // no BrtCellDate :(
				cell.z = cell.z || SSF._table[14];
				olddate = cell.v;
				cell.v = datenum((cell.v)); cell.t = 'n';
				break;
			/* falls through */
			case 'n': case 'e': vv = ''+cell.v; break;
			default: vv = cell.v; break;
		}
		var o = ({r:R, c:C});
		/* TODO: cell style */
		o.s = get_cell_style(opts.cellXfs, cell, opts);
		if(cell.l) ws['!links'].push([encode_cell(o), cell.l]);
		if(cell.c) ws['!comments'].push([encode_cell(o), cell.c]);
		switch(cell.t) {
			case 's': case 'str':
				if(opts.bookSST) {
					vv = get_sst_id(opts.Strings, (cell.v));
					o.t = "s"; o.v = vv;
					write_record(ba, "BrtCellIsst", write_BrtCellIsst(cell, o));
				} else {
					o.t = "str";
					write_record(ba, "BrtCellSt", write_BrtCellSt(cell, o));
				}
				return;
			case 'n':
				/* TODO: determine threshold for Real vs RK */
				if(cell.v == (cell.v | 0) && cell.v > -1000 && cell.v < 1000) write_record(ba, "BrtCellRk", write_BrtCellRk(cell, o));
				else write_record(ba, "BrtCellReal", write_BrtCellReal(cell, o));
				if(olddate) { cell.t = 'd'; cell.v = olddate; }
				return;
			case 'b':
				o.t = "b";
				write_record(ba, "BrtCellBool", write_BrtCellBool(cell, o));
				return;
			case 'e': /* TODO: error */ o.t = "e"; break;
		}
		write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o));
	}

	function write_CELLTABLE(ba, ws, idx, opts, wb) {
		var range = safe_decode_range(ws['!ref'] || "A1"), ref, rr = "", cols = [];
		write_record(ba, 'BrtBeginSheetData');
		var dense = Array.isArray(ws);
		for(var R = range.s.r; R <= range.e.r; ++R) {
			rr = encode_row(R);
			/* [ACCELLTABLE] */
			/* BrtRowHdr */
			write_row_header(ba, ws, range, R);
			for(var C = range.s.c; C <= range.e.c; ++C) {
				/* *16384CELL */
				if(R === range.s.r) cols[C] = encode_col(C);
				ref = cols[C] + rr;
				var cell = dense ? (ws[R]||[])[C] : ws[ref];
				if(!cell) continue;
				/* write cell */
				write_ws_bin_cell(ba, cell, R, C, opts, ws);
			}
		}
		write_record(ba, 'BrtEndSheetData');
	}

	function write_MERGECELLS(ba, ws) {
		if(!ws || !ws['!merges']) return;
		write_record(ba, 'BrtBeginMergeCells', write_BrtBeginMergeCells(ws['!merges'].length));
		ws['!merges'].forEach(function(m) { write_record(ba, 'BrtMergeCell', write_BrtMergeCell(m)); });
		write_record(ba, 'BrtEndMergeCells');
	}

	function write_COLINFOS(ba, ws, idx, opts, wb) {
		if(!ws || !ws['!cols']) return;
		write_record(ba, 'BrtBeginColInfos');
		ws['!cols'].forEach(function(m, i) { if(m) write_record(ba, 'BrtColInfo', write_BrtColInfo(i, m)); });
		write_record(ba, 'BrtEndColInfos');
	}

	function write_HLINKS(ba, ws, rels) {
		/* *BrtHLink */
		ws['!links'].forEach(function(l) {
			if(!l[1].Target) return;
			var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
			write_record(ba, "BrtHLink", write_BrtHLink(l, rId));
		});
		delete ws['!links'];
	}
	function write_LEGACYDRAWING(ba, ws, idx, rels) {
		/* [BrtLegacyDrawing] */
		if(ws['!comments'].length > 0) {
			var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx+1) + ".vml", RELS.VML);
			write_record(ba, "BrtLegacyDrawing", write_RelID("rId" + rId));
			ws['!legacy'] = rId;
		}
	}

	function write_AUTOFILTER(ba, ws) {
		if(!ws['!autofilter']) return;
		write_record(ba, "BrtBeginAFilter", write_UncheckedRfX(decode_range(ws['!autofilter'].ref)));
		/* *FILTERCOLUMN */
		/* [SORTSTATE] */
		/* BrtEndAFilter */
		write_record(ba, "BrtEndAFilter");
	}

	function write_WSVIEWS2(ba, ws) {
		write_record(ba, "BrtBeginWsViews");
		{ /* 1*WSVIEW2 */
			/* [ACUID] */
			write_record(ba, "BrtBeginWsView", write_BrtBeginWsView(ws));
			/* [BrtPane] */
			/* *4BrtSel */
			/* *4SXSELECT */
			/* *FRT */
			write_record(ba, "BrtEndWsView");
		}
		/* *FRT */
		write_record(ba, "BrtEndWsViews");
	}

	function write_WSFMTINFO(ba, ws) {
		/* [ACWSFMTINFO] */
		//write_record(ba, "BrtWsFmtInfo", write_BrtWsFmtInfo(ws));
	}

	function write_SHEETPROTECT(ba, ws) {
		if(!ws['!protect']) return;
		/* [BrtSheetProtectionIso] */
		write_record(ba, "BrtSheetProtection", write_BrtSheetProtection(ws['!protect']));
	}

	function write_ws_bin(idx, opts, wb, rels) {
		var ba = buf_array();
		var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
		var r = safe_decode_range(ws['!ref'] || "A1");
		ws['!links'] = [];
		/* passed back to write_zip and removed there */
		ws['!comments'] = [];
		write_record(ba, "BrtBeginSheet");
		write_record(ba, "BrtWsProp", write_BrtWsProp(s));
		write_record(ba, "BrtWsDim", write_BrtWsDim(r));
		write_WSVIEWS2(ba, ws);
		write_WSFMTINFO(ba, ws);
		write_COLINFOS(ba, ws, idx, opts, wb);
		write_CELLTABLE(ba, ws, idx, opts, wb);
		/* [BrtSheetCalcProp] */
		write_SHEETPROTECT(ba, ws);
		/* *([BrtRangeProtectionIso] BrtRangeProtection) */
		/* [SCENMAN] */
		write_AUTOFILTER(ba, ws);
		/* [SORTSTATE] */
		/* [DCON] */
		/* [USERSHVIEWS] */
		write_MERGECELLS(ba, ws);
		/* [BrtPhoneticInfo] */
		/* *CONDITIONALFORMATTING */
		/* [DVALS] */
		write_HLINKS(ba, ws, rels);
		/* [BrtPrintOptions] */
		if(ws['!margins']) write_record(ba, "BrtMargins", write_BrtMargins(ws['!margins']));
		/* [BrtPageSetup] */
		/* [HEADERFOOTER] */
		/* [RWBRK] */
		/* [COLBRK] */
		/* *BrtBigName */
		/* [CELLWATCHES] */
		/* [IGNOREECS] */
		/* [SMARTTAGS] */
		/* [BrtDrawing] */
		write_LEGACYDRAWING(ba, ws, idx, rels);
		/* [BrtLegacyDrawingHF] */
		/* [BrtBkHim] */
		/* [OLEOBJECTS] */
		/* [ACTIVEXCONTROLS] */
		/* [WEBPUBITEMS] */
		/* [LISTPARTS] */
		/* FRTWORKSHEET */
		write_record(ba, "BrtEndSheet");
		return ba.end();
	}
	function parse_numCache(data) {
		var col = [];

		/* 21.2.2.150 pt CT_NumVal */
		(data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(pt) {
			var q = pt.match(/<c:pt idx="(.*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
			if(!q) return;
			col[+q[1]] = +q[2];
		});

		/* 21.2.2.71 formatCode CT_Xstring */
		var nf = unescapexml((data.match(/<c:formatCode>(.*?)<\/c:formatCode>/) || ["","General"])[1]);

		return [col, nf];
	}

	/* 21.2 DrawingML - Charts */
	function parse_chart(data, name, opts, rels, wb, csheet) {
		var cs = ((csheet || {"!type":"chart"}));
		if(!data) return csheet;
		/* 21.2.2.27 chart CT_Chart */

		var C = 0, R = 0, col = "A";
		var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };

		/* 21.2.2.120 numCache CT_NumData */
		(data.match(/<c:numCache>.*?<\/c:numCache>/gm)||[]).forEach(function(nc) {
			var cache = parse_numCache(nc);
			refguess.s.r = refguess.s.c = 0;
			refguess.e.c = C;
			col = encode_col(C);
			cache[0].forEach(function(n,i) {
				cs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };
				R = i;
			});
			if(refguess.e.r < R) refguess.e.r = R;
			++C;
		});
		if(C > 0) cs["!ref"] = encode_range(refguess);
		return cs;
	}
	RELS.CS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet";

	var CS_XML_ROOT = writextag('chartsheet', null, {
		'xmlns': XMLNS.main[0],
		'xmlns:r': XMLNS.r
	});

	/* 18.3 Worksheets also covers Chartsheets */
	function parse_cs_xml(data, opts, rels, wb, themes, styles) {
		if(!data) return data;
		/* 18.3.1.12 chartsheet CT_ChartSheet */
		if(!rels) rels = {'!id':{}};
		var s = {'!type':"chart", '!chart':null, '!rel':""};
		var m;

		/* 18.3.1.36 drawing CT_Drawing */
		if((m = data.match(/drawing r:id="(.*?)"/))) s['!rel'] = m[1];

		if(rels['!id'][s['!rel']]) s['!chart'] = rels['!id'][s['!rel']];
		return s;
	}
	function write_cs_xml(idx, opts, wb, rels) {
		var o = [XML_HEADER, CS_XML_ROOT];
		o[o.length] = writextag("drawing", null, {"r:id": "rId1"});
		add_rels(rels, -1, "../drawings/drawing" + (idx+1) + ".xml", RELS.DRAW);
		if(o.length>2) { o[o.length] = ('</chartsheet>'); o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}

	/* [MS-XLSB] 2.1.7.7 Chart Sheet */
	function parse_cs_bin(data, opts, rels, wb, themes, styles) {
		if(!data) return data;
		if(!rels) rels = {'!id':{}};
		var s = {'!type':"chart", '!chart':null, '!rel':""};
		var state = [];
		var pass = false;
		recordhopper(data, function cs_parse(val, R_n, RT) {
			switch(RT) {

				case 0x0226: /* 'BrtDrawing' */
					s['!rel'] = val; break;

				/* case 'BrtUid': */
				case 0x0232: /* 'BrtBkHim' */
				case 0x028C: /* 'BrtCsPageSetup' */
				case 0x028B: /* 'BrtCsProp' */
				case 0x029D: /* 'BrtCsProtection' */
				case 0x02A7: /* 'BrtCsProtectionIso' */
				case 0x0227: /* 'BrtLegacyDrawing' */
				case 0x0228: /* 'BrtLegacyDrawingHF' */
				case 0x01DC: /* 'BrtMargins' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */
					state.push(R_n); break;
				case 0x0026: /* 'BrtACEnd' */
					state.pop(); break;

				default:
					if((R_n||"").indexOf("Begin") > 0) state.push(R_n);
					else if((R_n||"").indexOf("End") > 0) state.pop();
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		}, opts);

		if(rels['!id'][s['!rel']]) s['!chart'] = rels['!id'][s['!rel']];
		return s;
	}
	function write_cs_bin(idx, opts, wb, rels) {
		var ba = buf_array();
		write_record(ba, "BrtBeginSheet");
		/* [BrtCsProp] */
		/* CSVIEWS */
		/* [[BrtCsProtectionIso] BrtCsProtection] */
		/* [USERCSVIEWS] */
		/* [BrtMargins] */
		/* [BrtCsPageSetup] */
		/* [HEADERFOOTER] */
		/* BrtDrawing */
		/* [BrtLegacyDrawing] */
		/* [BrtLegacyDrawingHF] */
		/* [BrtBkHim] */
		/* [WEBPUBITEMS] */
		/* FRTCHARTSHEET */
		write_record(ba, "BrtEndSheet");
		return ba.end();
	}
	/* 18.2.28 (CT_WorkbookProtection) Defaults */
	var WBPropsDef = [
		['allowRefreshQuery', '0'],
		['autoCompressPictures', '1'],
		['backupFile', '0'],
		['checkCompatibility', '0'],
		['codeName', ''],
		['date1904', '0'],
		['dateCompatibility', '1'],
		//['defaultThemeVersion', '0'],
		['filterPrivacy', '0'],
		['hidePivotFieldList', '0'],
		['promptedSolutions', '0'],
		['publishItems', '0'],
		['refreshAllConnections', false],
		['saveExternalLinkValues', '1'],
		['showBorderUnselectedTables', '1'],
		['showInkAnnotation', '1'],
		['showObjects', 'all'],
		['showPivotChartFilter', '0']
		//['updateLinks', 'userSet']
	];

	/* 18.2.30 (CT_BookView) Defaults */
	var WBViewDef = [
		['activeTab', '0'],
		['autoFilterDateGrouping', '1'],
		['firstSheet', '0'],
		['minimized', '0'],
		['showHorizontalScroll', '1'],
		['showSheetTabs', '1'],
		['showVerticalScroll', '1'],
		['tabRatio', '600'],
		['visibility', 'visible']
		//window{Height,Width}, {x,y}Window
	];

	/* 18.2.19 (CT_Sheet) Defaults */
	var SheetDef = [
		//['state', 'visible']
	];

	/* 18.2.2  (CT_CalcPr) Defaults */
	var CalcPrDef = [
		['calcCompleted', 'true'],
		['calcMode', 'auto'],
		['calcOnSave', 'true'],
		['concurrentCalc', 'true'],
		['fullCalcOnLoad', 'false'],
		['fullPrecision', 'true'],
		['iterate', 'false'],
		['iterateCount', '100'],
		['iterateDelta', '0.001'],
		['refMode', 'A1']
	];

	/* 18.2.3 (CT_CustomWorkbookView) Defaults */
	var CustomWBViewDef = [
		['autoUpdate', 'false'],
		['changesSavedWin', 'false'],
		['includeHiddenRowCol', 'true'],
		['includePrintSettings', 'true'],
		['maximized', 'false'],
		['minimized', 'false'],
		['onlySync', 'false'],
		['personalView', 'false'],
		['showComments', 'commIndicator'],
		['showFormulaBar', 'true'],
		['showHorizontalScroll', 'true'],
		['showObjects', 'all'],
		['showSheetTabs', 'true'],
		['showStatusbar', 'true'],
		['showVerticalScroll', 'true'],
		['tabRatio', '600'],
		['xWindow', '0'],
		['yWindow', '0']
	];

	function push_defaults_array(target, defaults) {
		for(var j = 0; j != target.length; ++j) { var w = target[j];
			for(var i=0; i != defaults.length; ++i) { var z = defaults[i];
				if(w[z[0]] == null) w[z[0]] = z[1];
			}
		}
	}
	function push_defaults(target, defaults) {
		for(var i = 0; i != defaults.length; ++i) { var z = defaults[i];
			if(target[z[0]] == null) target[z[0]] = z[1];
		}
	}

	function parse_wb_defaults(wb) {
		push_defaults(wb.WBProps, WBPropsDef);
		push_defaults(wb.CalcPr, CalcPrDef);

		push_defaults_array(wb.WBView, WBViewDef);
		push_defaults_array(wb.Sheets, SheetDef);

		_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');
	}

	var badchars = "][*?\/\\".split("");
	function check_ws_name(n, safe) {
		if(n.length > 31) { if(safe) return false; throw new Error("Sheet names cannot exceed 31 chars"); }
		var _good = true;
		badchars.forEach(function(c) {
			if(n.indexOf(c) == -1) return;
			if(!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
			_good = false;
		});
		return _good;
	}
	function check_wb_names(N) {
		N.forEach(function(n,i) {
			check_ws_name(n);
			for(var j = 0; j < i; ++j) if(n == N[j]) throw new Error("Duplicate Sheet Name: " + n);
		});
	}
	function check_wb(wb) {
		if(!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
		check_wb_names(wb.SheetNames);
		/* TODO: validate workbook */
	}
	/* 18.2 Workbook */
	var wbnsregex = /<\w+:workbook/;
	function parse_wb_xml(data, opts) {
		if(!data) throw new Error("Could not find file");
		var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: "" };
		var pass = false, xmlns = "xmlns";
		var dname = {}, dnstart = 0;
		/*(data.match(tagregex)||[]).forEach */
		data.replace(tagregex, function xml_wb(x, idx) {
			var y = parsexmltag(x);
			switch(strip_ns(y[0])) {
				case '<?xml': break;

				/* 18.2.27 workbook CT_Workbook 1 */
				case '<workbook':
					if(x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
					wb.xmlns = y[xmlns];
					break;
				case '</workbook>': break;

				/* 18.2.13 fileVersion CT_FileVersion ? */
				case '<fileVersion': delete y[0]; wb.AppVersion = y; break;
				case '<fileVersion/>': case '</fileVersion>': break;

				/* 18.2.12 fileSharing CT_FileSharing ? */
				case '<fileSharing': case '<fileSharing/>': break;

				/* 18.2.28 workbookPr CT_WorkbookPr ? */
				case '<workbookPr': delete y[0]; wb.WBProps = y; break;
				case '<workbookPr/>': delete y[0]; wb.WBProps = y; break;
				case '</workbookPr>': break;

				/* 18.2.29 workbookProtection CT_WorkbookProtection ? */
				case '<workbookProtection': break;
				case '<workbookProtection/>': break;

				/* 18.2.1  bookViews CT_BookViews ? */
				case '<bookViews>': case '</bookViews>': break;
				/* 18.2.30   workbookView CT_BookView + */
				case '<workbookView': delete y[0]; wb.WBView.push(y); break;
				case '</workbookView>': break;

				/* 18.2.20 sheets CT_Sheets 1 */
				case '<sheets>': case '</sheets>': break; // aggregate sheet
				/* 18.2.19   sheet CT_Sheet + */
				case '<sheet':
					switch(y.state) {
						case "hidden": y.Hidden = 1; break;
						case "veryHidden": y.Hidden = 2; break;
						default: y.Hidden = 0;
					}
					delete y.state;
					y.name = unescapexml(utf8read(y.name));
					delete y[0]; wb.Sheets.push(y); break;
				case '</sheet>': break;

				/* 18.2.15 functionGroups CT_FunctionGroups ? */
				case '<functionGroups': case '<functionGroups/>': break;
				/* 18.2.14   functionGroup CT_FunctionGroup + */
				case '<functionGroup': break;

				/* 18.2.9  externalReferences CT_ExternalReferences ? */
				case '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;
				/* 18.2.8    externalReference CT_ExternalReference + */
				case '<externalReference': break;

				/* 18.2.6  definedNames CT_DefinedNames ? */
				case '<definedNames/>': break;
				case '<definedNames>': case '<definedNames': pass=true; break;
				case '</definedNames>': pass=false; break;
				/* 18.2.5    definedName CT_DefinedName + */
				case '<definedName': {
					dname = {};
					dname.Name = y.name;
					if(y.comment) dname.Comment = y.comment;
					if(y.localSheetId) dname.Sheet = +y.localSheetId;
					dnstart = idx + x.length;
				}	break;
				case '</definedName>': {
					dname.Ref = data.slice(dnstart, idx);
					wb.Names.push(dname);
				} break;
				case '<definedName/>': break;

				/* 18.2.2  calcPr CT_CalcPr ? */
				case '<calcPr': delete y[0]; wb.CalcPr = y; break;
				case '<calcPr/>': delete y[0]; wb.CalcPr = y; break;
				case '</calcPr>': break;

				/* 18.2.16 oleSize CT_OleSize ? (ref required) */
				case '<oleSize': break;

				/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
				case '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;
				/* 18.2.3    customWorkbookView CT_CustomWorkbookView + */
				case '<customWorkbookView': case '</customWorkbookView>': break;

				/* 18.2.18 pivotCaches CT_PivotCaches ? */
				case '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;
				/* 18.2.17 pivotCache CT_PivotCache ? */
				case '<pivotCache': break;

				/* 18.2.21 smartTagPr CT_SmartTagPr ? */
				case '<smartTagPr': case '<smartTagPr/>': break;

				/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
				case '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;
				/* 18.2.22   smartTagType CT_SmartTagType ? */
				case '<smartTagType': break;

				/* 18.2.24 webPublishing CT_WebPublishing ? */
				case '<webPublishing': case '<webPublishing/>': break;

				/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
				case '<fileRecoveryPr': case '<fileRecoveryPr/>': break;

				/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
				case '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;
				/* 18.2.25 webPublishObject CT_WebPublishObject ? */
				case '<webPublishObject': break;

				/* 18.2.10 extLst CT_ExtensionList ? */
				case '<extLst>': case '</extLst>': case '<extLst/>': break;
				/* 18.2.7    ext CT_Extension + */
				case '<ext': pass=true; break; //TODO: check with versions of excel
				case '</ext>': pass=false; break;

				/* Others */
				case '<ArchID': break;
				case '<AlternateContent': pass=true; break;
				case '</AlternateContent>': pass=false; break;

				default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
			}
			return x;
		});
		if(XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);

		parse_wb_defaults(wb);

		return wb;
	}

	var WB_XML_ROOT = writextag('workbook', null, {
		'xmlns': XMLNS.main[0],
		//'xmlns:mx': XMLNS.mx,
		//'xmlns:s': XMLNS.main[0],
		'xmlns:r': XMLNS.r
	});

	function safe1904(wb) {
		/* TODO: store date1904 somewhere else */
		if(!wb.Workbook) return "false";
		if(!wb.Workbook.WBProps) return "false";
		// $FlowIgnore
		return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
	}

	function write_wb_xml(wb, opts) {
		var o = [XML_HEADER];
		o[o.length] = WB_XML_ROOT;

		var write_names = (wb.Workbook && (wb.Workbook.Names||[]).length > 0);

		/* fileVersion */
		/* fileSharing */

		o[o.length] = (writextag('workbookPr', null, {date1904:safe1904(wb), codeName:"ThisWorkbook"}));

		/* workbookProtection */
		/* bookViews */

		o[o.length] = "<sheets>";
		var sheets = wb.Workbook && wb.Workbook.Sheets || [];
		for(var i = 0; i != wb.SheetNames.length; ++i) {
			var sht = ({name:escapexml(wb.SheetNames[i].substr(0,31))});
			sht.sheetId = ""+(i+1);
			sht["r:id"] = "rId"+(i+1);
			if(sheets[i]) switch(sheets[i].Hidden) {
				case 1: sht.state = "hidden"; break;
				case 2: sht.state = "veryHidden"; break;
			}
			o[o.length] = (writextag('sheet',null,sht));
		}
		o[o.length] = "</sheets>";

		/* functionGroups */
		/* externalReferences */

		if(write_names) {
			o[o.length] = "<definedNames>";
			if(wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n) {
				var d = {name:n.Name};
				if(n.Comment) d.comment = n.Comment;
				if(n.Sheet != null) d.localSheetId = ""+n.Sheet;
				if(!n.Ref) return;
				o[o.length] = writextag('definedName', String(n.Ref), d);
			});
			o[o.length] = "</definedNames>";
		}

		/* calcPr */
		/* oleSize */
		/* customWorkbookViews */
		/* pivotCaches */
		/* smartTagPr */
		/* smartTagTypes */
		/* webPublishing */
		/* fileRecoveryPr */
		/* webPublishObjects */
		/* extLst */

		if(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace("/>",">"); }
		return o.join("");
	}
	/* [MS-XLSB] 2.4.301 BrtBundleSh */
	function parse_BrtBundleSh(data, length) {
		var z = {};
		z.Hidden = data.read_shift(4); //hsState ST_SheetState
		z.iTabID = data.read_shift(4);
		z.strRelID = parse_RelID(data,length-8);
		z.name = parse_XLWideString(data);
		return z;
	}
	function write_BrtBundleSh(data, o) {
		if(!o) o = new_buf(127);
		o.write_shift(4, data.Hidden);
		o.write_shift(4, data.iTabID);
		write_RelID(data.strRelID, o);
		write_XLWideString(data.name.substr(0,31), o);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.807 BrtWbProp */
	function parse_BrtWbProp(data, length) {
		data.read_shift(4);
		var dwThemeVersion = data.read_shift(4);
		var strName = (length > 8) ? parse_XLWideString(data) : "";
		return [dwThemeVersion, strName];
	}
	function write_BrtWbProp(data, o) {
		if(!o) o = new_buf(72);
		o.write_shift(4, 0);
		o.write_shift(4, 0);
		write_XLSBCodeName("ThisWorkbook", o);
		return o.slice(0, o.l);
	}

	function parse_BrtFRTArchID$(data, length) {
		var o = {};
		data.read_shift(4);
		o.ArchID = data.read_shift(4);
		data.l += length - 8;
		return o;
	}

	/* [MS-XLSB] 2.4.680 BrtName */
	function parse_BrtName(data, length, opts) {
		var end = data.l + length;
		var flags = data.read_shift(4);
		var chKey = data.read_shift(1);
		var itab = data.read_shift(4);
		var name = parse_XLNameWideString(data);
		var formula = parse_XLSBNameParsedFormula(data, 0, opts);
		var comment = parse_XLNullableWideString(data);
		//if(0 /* fProc */) {
			// unusedstring1: XLNullableWideString
			// description: XLNullableWideString
			// helpTopic: XLNullableWideString
			// unusedstring2: XLNullableWideString
		//}
		data.l = end;
		var out = ({Name:name, Ptg:formula, Comment:comment});
		if(itab < 0xFFFFFFF) out.Sheet = itab;
		return out;
	}

	/* [MS-XLSB] 2.1.7.60 Workbook */
	function parse_wb_bin(data, opts) {
		var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: "" };
		var pass = false, z;

		if(!opts) opts = {};
		opts.biff = 12;

		var Names = [];
		var supbooks = [];
		supbooks.SheetNames = [];

		recordhopper(data, function hopper_wb(val, R_n, RT) {
			switch(RT) {
				case 0x009C: /* 'BrtBundleSh' */
					supbooks.SheetNames.push(val.name);
					wb.Sheets.push(val); break;

				case 0x0027: /* 'BrtName' */
					val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
					delete val.Ptg;
					Names.push(val);
					break;
				case 0x040C: /* 'BrtNameExt' */ break;

				/* case 'BrtModelTimeGroupingCalcCol' */
				/* case 'BrtRevisionPtr' */
				/* case 'BrtUid' */
				case 0x0817: /* 'BrtAbsPath15' */
				case 0x0216: /* 'BrtBookProtection' */
				case 0x02A5: /* 'BrtBookProtectionIso' */
				case 0x009E: /* 'BrtBookView' */
				case 0x009D: /* 'BrtCalcProp' */
				case 0x0262: /* 'BrtCrashRecErr' */
				case 0x0802: /* 'BrtDecoupledPivotCacheID' */
				case 0x016A: /* 'BrtExternSheet' */
				case 0x009B: /* 'BrtFileRecover' */
				case 0x0224: /* 'BrtFileSharing' */
				case 0x02A4: /* 'BrtFileSharingIso' */
				case 0x0080: /* 'BrtFileVersion' */
				case 0x0299: /* 'BrtFnGroup' */
				case 0x0850: /* 'BrtModelRelationship' */
				case 0x084D: /* 'BrtModelTable' */
				case 0x0225: /* 'BrtOleSize' */
				case 0x0805: /* 'BrtPivotTableRef' */
				case 0x0169: /* 'BrtPlaceholderName' */
				case 0x0254: /* 'BrtSmartTagType' */
				case 0x029B: /* 'BrtSupAddin' */
				case 0x0163: /* 'BrtSupBookSrc' */
				case 0x0166: /* 'BrtSupSame' */
				case 0x0165: /* 'BrtSupSelf' */
				case 0x081C: /* 'BrtTableSlicerCacheID' */
				case 0x081B: /* 'BrtTableSlicerCacheIDs' */
				case 0x0822: /* 'BrtTimelineCachePivotCacheID' */
				case 0x018D: /* 'BrtUserBookView' */
				case 0x009A: /* 'BrtWbFactoid' */
				case 0x0099: /* 'BrtWbProp' */
				case 0x045D: /* 'BrtWbProp14' */
				case 0x0229: /* 'BrtWebOpt' */
				case 0x082B: /* 'BrtWorkBookPr15' */
					break;

				case 0x0023: /* 'BrtFRTBegin' */
					pass = true; break;
				case 0x0024: /* 'BrtFRTEnd' */
					pass = false; break;
				case 0x0025: /* 'BrtACBegin' */ break;
				case 0x0026: /* 'BrtACEnd' */ break;

				case 0x0010: /* 'BrtFRTArchID$' */ break;

				default:
					if((R_n||"").indexOf("Begin") > 0){/* empty */}
					else if((R_n||"").indexOf("End") > 0){/* empty */}
					else if(!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n);
			}
		}, opts);

		parse_wb_defaults(wb);

		// $FlowIgnore
		wb.Names = Names;

		return wb;
	}

	/* [MS-XLSB] 2.1.7.60 Workbook */
	function write_BUNDLESHS(ba, wb, opts) {
		write_record(ba, "BrtBeginBundleShs");
		for(var idx = 0; idx != wb.SheetNames.length; ++idx) {
			var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
			var d = { Hidden: viz, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };
			write_record(ba, "BrtBundleSh", write_BrtBundleSh(d));
		}
		write_record(ba, "BrtEndBundleShs");
	}

	/* [MS-XLSB] 2.4.643 BrtFileVersion */
	function write_BrtFileVersion(data, o) {
		if(!o) o = new_buf(127);
		for(var i = 0; i != 4; ++i) o.write_shift(4, 0);
		write_XLWideString("SheetJS", o);
		write_XLWideString(XLSX.version, o);
		write_XLWideString(XLSX.version, o);
		write_XLWideString("7262", o);
		o.length = o.l;
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.4.298 BrtBookView */
	function write_BrtBookView(idx, o) {
		if(!o) o = new_buf(29);
		o.write_shift(-4, 0);
		o.write_shift(-4, 460);
		o.write_shift(4,  28800);
		o.write_shift(4,  17600);
		o.write_shift(4,  500);
		o.write_shift(4,  idx);
		o.write_shift(4,  idx);
		var flags = 0x78;
		o.write_shift(1,  flags);
		return o.length > o.l ? o.slice(0, o.l) : o;
	}

	/* [MS-XLSB] 2.1.7.60 Workbook */
	function write_BOOKVIEWS(ba, wb, opts) {
		/* required if hidden tab appears before visible tab */
		if(!wb.Workbook || !wb.Workbook.Sheets) return;
		var sheets = wb.Workbook.Sheets;
		var i = 0, vistab = -1, hidden = -1;
		for(; i < sheets.length; ++i) {
			if(!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i;
			else if(sheets[i].Hidden == 1 && hidden == -1) hidden = i;
		}
		if(hidden > vistab) return;
		write_record(ba, "BrtBeginBookViews");
		write_record(ba, "BrtBookView", write_BrtBookView(vistab));
		/* 1*(BrtBookView *FRT) */
		write_record(ba, "BrtEndBookViews");
	}

	/* [MS-XLSB] 2.4.302 BrtCalcProp */
	function write_BrtCalcProp(data, o) {
		if(!o) o = new_buf(26);
		o.write_shift(4,0); /* force recalc */
		o.write_shift(4,1);
		o.write_shift(4,0);
		write_Xnum(0, o);
		o.write_shift(-4, 1023);
		o.write_shift(1, 0x33);
		o.write_shift(1, 0x00);
		return o;
	}

	/* [MS-XLSB] 2.4.640 BrtFileRecover */
	function write_BrtFileRecover(data, o) {
		if(!o) o = new_buf(1);
		o.write_shift(1,0);
		return o;
	}

	/* [MS-XLSB] 2.1.7.60 Workbook */
	function write_wb_bin(wb, opts) {
		var ba = buf_array();
		write_record(ba, "BrtBeginBook");
		write_record(ba, "BrtFileVersion", write_BrtFileVersion());
		/* [[BrtFileSharingIso] BrtFileSharing] */
		write_record(ba, "BrtWbProp", write_BrtWbProp());
		/* [ACABSPATH] */
		/* [[BrtBookProtectionIso] BrtBookProtection] */
		write_BOOKVIEWS(ba, wb, opts);
		write_BUNDLESHS(ba, wb, opts);
		/* [FNGROUP] */
		/* [EXTERNALS] */
		/* *BrtName */
		/* write_record(ba, "BrtCalcProp", write_BrtCalcProp()); */
		/* [BrtOleSize] */
		/* *(BrtUserBookView *FRT) */
		/* [PIVOTCACHEIDS] */
		/* [BrtWbFactoid] */
		/* [SMARTTAGTYPES] */
		/* [BrtWebOpt] */
		/* write_record(ba, "BrtFileRecover", write_BrtFileRecover()); */
		/* [WEBPUBITEMS] */
		/* [CRERRS] */
		/* FRTWORKBOOK */
		write_record(ba, "BrtEndBook");

		return ba.end();
	}
	function parse_wb(data, name, opts) {
		if(name.slice(-4)===".bin") return parse_wb_bin((data), opts);
		return parse_wb_xml((data), opts);
	}

	function parse_ws(data, name, opts, rels, wb, themes, styles) {
		if(name.slice(-4)===".bin") return parse_ws_bin((data), opts, rels, wb, themes, styles);
		return parse_ws_xml((data), opts, rels, wb, themes, styles);
	}

	function parse_cs(data, name, opts, rels, wb, themes, styles) {
		if(name.slice(-4)===".bin") return parse_cs_bin((data), opts, rels, wb, themes, styles);
		return parse_cs_xml((data), opts, rels, wb, themes, styles);
	}

	function parse_ms(data, name, opts, rels, wb, themes, styles) {
		if(name.slice(-4)===".bin") return parse_ms_bin((data), opts, rels, wb, themes, styles);
		return parse_ms_xml((data), opts, rels, wb, themes, styles);
	}

	function parse_ds(data, name, opts, rels, wb, themes, styles) {
		if(name.slice(-4)===".bin") return parse_ds_bin((data), opts, rels, wb, themes, styles);
		return parse_ds_xml((data), opts, rels, wb, themes, styles);
	}

	function parse_sty(data, name, themes, opts) {
		if(name.slice(-4)===".bin") return parse_sty_bin((data), themes, opts);
		return parse_sty_xml((data), themes, opts);
	}

	function parse_theme(data, name, opts) {
		return parse_theme_xml(data, opts);
	}

	function parse_sst(data, name, opts) {
		if(name.slice(-4)===".bin") return parse_sst_bin((data), opts);
		return parse_sst_xml((data), opts);
	}

	function parse_cmnt(data, name, opts) {
		if(name.slice(-4)===".bin") return parse_comments_bin((data), opts);
		return parse_comments_xml((data), opts);
	}

	function parse_cc(data, name, opts) {
		if(name.slice(-4)===".bin") return parse_cc_bin((data), opts);
		return parse_cc_xml((data), opts);
	}

	function write_wb(wb, name, opts) {
		return (name.slice(-4)===".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
	}

	function write_ws(data, name, opts, wb, rels) {
		return (name.slice(-4)===".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
	}

	function write_cs(data, name, opts, wb, rels) {
		return (name.slice(-4)===".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
	}

	function write_sty(data, name, opts) {
		return (name.slice(-4)===".bin" ? write_sty_bin : write_sty_xml)(data, opts);
	}

	function write_sst(data, name, opts) {
		return (name.slice(-4)===".bin" ? write_sst_bin : write_sst_xml)(data, opts);
	}

	function write_cmnt(data, name, opts) {
		return (name.slice(-4)===".bin" ? write_comments_bin : write_comments_xml)(data, opts);
	}
	/*
	function write_cc(data, name:string, opts) {
		return (name.slice(-4)===".bin" ? write_cc_bin : write_cc_xml)(data, opts);
	}
	*/
	var attregexg2=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
	var attregex2=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
	var _chr = function(c) { return String.fromCharCode(c); };
	function xlml_parsexmltag(tag, skip_root) {
		var words = tag.split(/\s+/);
		var z = ([]); if(!skip_root) z[0] = words[0];
		if(words.length === 1) return z;
		var m = tag.match(attregexg2), y, j, w, i;
		if(m) for(i = 0; i != m.length; ++i) {
			y = m[i].match(attregex2);
	if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);
			else {
				if(y[1].substr(0,6) === "xmlns:") w = "xmlns"+y[1].substr(6);
				else w = y[1].substr(j+1);
				z[w] = y[2].substr(1,y[2].length-2);
			}
		}
		return z;
	}
	function xlml_parsexmltagobj(tag) {
		var words = tag.split(/\s+/);
		var z = {};
		if(words.length === 1) return z;
		var m = tag.match(attregexg2), y, j, w, i;
		if(m) for(i = 0; i != m.length; ++i) {
			y = m[i].match(attregex2);
	if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);
			else {
				if(y[1].substr(0,6) === "xmlns:") w = "xmlns"+y[1].substr(6);
				else w = y[1].substr(j+1);
				z[w] = y[2].substr(1,y[2].length-2);
			}
		}
		return z;
	}

	// ----

	function xlml_format(format, value) {
		var fmt = XLMLFormatMap[format] || unescapexml(format);
		if(fmt === "General") return SSF._general(value);
		return SSF.format(fmt, value);
	}

	function xlml_set_custprop(Custprops, Rn, cp, val) {
		var oval = val;
		switch((cp[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]) {
			case "boolean": oval = parsexmlbool(val); break;
			case "i2": case "int": oval = parseInt(val, 10); break;
			case "r4": case "float": oval = parseFloat(val); break;
			case "date": case "dateTime.tz": oval = parseDate(val); break;
			case "i8": case "string": case "fixed": case "uuid": case "bin.base64": break;
			default: throw new Error("bad custprop:" + cp[0]);
		}
		Custprops[unescapexml(Rn[3])] = oval;
	}

	function safe_format_xlml(cell, nf, o) {
		if(cell.t === 'z') return;
		if(!o || o.cellText !== false) try {
			if(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }
			else if(nf === "General") {
				if(cell.t === 'n') {
					if((cell.v|0) === cell.v) cell.w = SSF._general_int(cell.v);
					else cell.w = SSF._general_num(cell.v);
				}
				else cell.w = SSF._general(cell.v);
			}
			else cell.w = xlml_format(nf||"General", cell.v);
		} catch(e) { if(o.WTF) throw e; }
		try {
			var z = XLMLFormatMap[nf]||nf||"General";
			if(o.cellNF) cell.z = z;
			if(o.cellDates && cell.t == 'n' && SSF.is_date(z)) {
				var _d = SSF.parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(Date.UTC(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u)); }
			}
		} catch(e) { if(o.WTF) throw e; }
	}

	function process_style_xlml(styles, stag, opts) {
		if(opts.cellStyles) {
			if(stag.Interior) {
				var I = stag.Interior;
				if(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
			}
		}
		styles[stag.ID] = stag;
	}

	/* TODO: there must exist some form of OSP-blessed spec */
	function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
		var nf = "General", sid = cell.StyleID, S = {}; o = o || {};
		var interiors = [];
		var i = 0;
		if(sid === undefined && row) sid = row.StyleID;
		if(sid === undefined && csty) sid = csty.StyleID;
		while(styles[sid] !== undefined) {
			if(styles[sid].nf) nf = styles[sid].nf;
			if(styles[sid].Interior) interiors.push(styles[sid].Interior);
			if(!styles[sid].Parent) break;
			sid = styles[sid].Parent;
		}
		switch(data.Type) {
			case 'Boolean':
				cell.t = 'b';
				cell.v = parsexmlbool(xml);
				break;
			case 'String':
				cell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));
				cell.v = xml.indexOf("<") > -1 ? unescapexml(ss) : cell.r;
				break;
			case 'DateTime':
				cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
				if(cell.v !== cell.v) cell.v = unescapexml(xml);
				else if(cell.v<60) cell.v = cell.v -1;
				if(!nf || nf == "General") nf = "yyyy-mm-dd";
				/* falls through */
			case 'Number':
				if(cell.v === undefined) cell.v=+xml;
				if(!cell.t) cell.t = 'n';
				break;
			case 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;
			default: cell.t = 's'; cell.v = xlml_fixstr(ss||xml); break;
		}
		safe_format_xlml(cell, nf, o);
		if(o.cellFormula !== false) {
			if(cell.Formula) {
				var fstr = unescapexml(cell.Formula);
				/* strictly speaking, the leading = is required but some writers omit */
				if(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.substr(1);
				cell.f = rc_to_a1(fstr, base);
				delete cell.Formula;
				if(cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
				else if(cell.ArrayRange) {
					cell.F = rc_to_a1(cell.ArrayRange, base);
					arrayf.push([safe_decode_range(cell.F), cell.F]);
				}
			} else {
				for(i = 0; i < arrayf.length; ++i)
					if(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)
						if(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
							cell.F = arrayf[i][1];
			}
		}
		if(o.cellStyles) {
			interiors.forEach(function(x) {
				if(!S.patternType && x.patternType) S.patternType = x.patternType;
			});
			cell.s = S;
		}
		cell.ixfe = cell.StyleID !== undefined ? cell.StyleID : 'Default';
	}

	function xlml_clean_comment(comment) {
		comment.t = comment.v || "";
		comment.t = comment.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
		comment.v = comment.w = comment.ixfe = undefined;
	}

	function xlml_normalize(d) {
		if(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');
		if(typeof d === 'string') return d;
		throw new Error("Bad input format: expected Buffer or string");
	}

	/* TODO: Everything */
	/* UOS uses CJK in tags */
	var xlmlregex = /<(\/?)([^\s?>!\/:]*:|)([^\s?>]*[^\s?>\/])[^>]*>/mg;
	//var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;
	function parse_xlml_xml(d, opts) {
		make_ssf(SSF);
		var str = debom(xlml_normalize(d));
		if(opts && opts.type == 'binary' && typeof cptable !== 'undefined') str = cptable.utils.decode(65001, char_codes(str));
		if(str.substr(0,1000).indexOf("<html") >= 0) return HTML_.to_workbook(str, opts);
		var Rn;
		var state = [], tmp;
		if(DENSE != null && opts.dense == null) opts.dense = DENSE;
		var sheets = {}, sheetnames = [], cursheet = (opts.dense ? [] : {}), sheetname = "";
		var table = {}, cell = ({}), row = {};
		var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
		var c = 0, r = 0;
		var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
		var styles = {}, stag = {};
		var ss = "", fidx = 0;
		var mergecells = [];
		var Props = {}, Custprops = {}, pidx = 0, cp = {};
		var comments = [], comment = {};
		var cstys = [], csty, seencol = false;
		var arrayf = [];
		var rowinfo = [], rowobj = {};
		var Workbook = { Sheets:[] }, wsprops = {};
		xlmlregex.lastIndex = 0;
		str = str.replace(/<!--([^\u2603]*?)-->/mg,"");
		while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
			case 'Data':
				if(state[state.length-1][1]) break;
				if(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]=="Comment"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);
				else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }
				break;
			case 'Cell':
				if(Rn[1]==='/'){
					if(comments.length > 0) cell.c = comments;
					if((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
						if(opts.dense) {
							if(!cursheet[r]) cursheet[r] = [];
							cursheet[r][c] = cell;
						} else cursheet[encode_col(c) + encode_row(r)] = cell;
					}
					if(cell.HRef) {
						cell.l = {Target:cell.HRef, Tooltip:cell.HRefScreenTip};
						delete cell.HRef; delete cell.HRefScreenTip;
					}
					if(cell.MergeAcross || cell.MergeDown) {
						var cc = c + (parseInt(cell.MergeAcross,10)|0);
						var rr = r + (parseInt(cell.MergeDown,10)|0);
						mergecells.push({s:{c:c,r:r},e:{c:cc,r:rr}});
					}
					if(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }
					else if(cell.MergeAcross || cell.MergeDown) {
	for(var cma = c; cma <= cc; ++cma) {
							for(var cmd = r; cmd <= rr; ++cmd) {
								if(cma > c || cmd > r) {
									if(opts.dense) {
										if(!cursheet[cmd]) cursheet[cmd] = [];
										cursheet[cmd][cma] = {t:'z'};
									} else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};
								}
							}
						}
						c = cc + 1;
					}
					else ++c;
				} else {
					cell = xlml_parsexmltagobj(Rn[0]);
					if(cell.Index) c = +cell.Index - 1;
					if(c < refguess.s.c) refguess.s.c = c;
					if(c > refguess.e.c) refguess.e.c = c;
					if(Rn[0].slice(-2) === "/>") ++c;
					comments = [];
				}
				break;
			case 'Row':
				if(Rn[1]==='/' || Rn[0].slice(-2) === "/>") {
					if(r < refguess.s.r) refguess.s.r = r;
					if(r > refguess.e.r) refguess.e.r = r;
					if(Rn[0].slice(-2) === "/>") {
						row = xlml_parsexmltag(Rn[0]);
						if(row.Index) r = +row.Index - 1;
					}
					c = 0; ++r;
				} else {
					row = xlml_parsexmltag(Rn[0]);
					if(row.Index) r = +row.Index - 1;
					rowobj = {};
					if(row.AutoFitHeight == "0") {
						rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);
						rowinfo[r] = rowobj;
					}
					if(row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj; }
				}
				break;
			case 'Worksheet': /* TODO: read range from FullRows/FullColumns */
				if(Rn[1]==='/'){
					if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
					sheetnames.push(sheetname);
					if(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet["!ref"] = encode_range(refguess);
					if(mergecells.length) cursheet["!merges"] = mergecells;
					if(cstys.length > 0) cursheet["!cols"] = cstys;
					if(rowinfo.length > 0) cursheet["!rows"] = rowinfo;
					sheets[sheetname] = cursheet;
				} else {
					refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
					r = c = 0;
					state.push([Rn[3], false]);
					tmp = xlml_parsexmltag(Rn[0]);
					sheetname = unescapexml(tmp.Name);
					cursheet = (opts.dense ? [] : {});
					mergecells = [];
					arrayf = [];
					rowinfo = [];
					wsprops = {name:sheetname, Hidden:0};
					Workbook.Sheets.push(wsprops);
				}
				break;
			case 'Table':
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].slice(-2) == "/>") break;
				else {
					table = xlml_parsexmltag(Rn[0]);
					state.push([Rn[3], false]);
					cstys = []; seencol = false;
				}
				break;

			case 'Style':
				if(Rn[1]==='/') process_style_xlml(styles, stag, opts);
				else stag = xlml_parsexmltag(Rn[0]);
				break;

			case 'NumberFormat':
				stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
				if(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
				for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == stag.nf) break;
				if(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(SSF._table[ssfidx] == null) { SSF.load(stag.nf, ssfidx); break; }
				break;

			case 'Column':
				if(state[state.length-1][0] !== 'Table') break;
				csty = xlml_parsexmltag(Rn[0]);
				if(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }
				if(csty.Width) csty.wpx = parseInt(csty.Width, 10);
				if(!seencol && csty.wpx > 10) {
					seencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
					for(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);
				}
				if(seencol) process_col(csty);
				cstys[(csty.Index-1||cstys.length)] = csty;
				for(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
				break;

			case 'NamedRange':
				if(!Workbook.Names) Workbook.Names = [];
				var _NamedRange = parsexmltag(Rn[0]);
				var _DefinedName = {
					Name: _NamedRange.Name,
					Ref: rc_to_a1(_NamedRange.RefersTo.substr(1))
				};
				if(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;
				Workbook.Names.push(_DefinedName);
				break;

			case 'NamedCell': break;
			case 'B': break;
			case 'I': break;
			case 'U': break;
			case 'S': break;
			case 'Sub': break;
			case 'Sup': break;
			case 'Span': break;
			case 'Border': break;
			case 'Alignment': break;
			case 'Borders': break;
			case 'Font':
				if(Rn[0].slice(-2) === "/>") break;
				else if(Rn[1]==="/") ss += str.slice(fidx, Rn.index);
				else fidx = Rn.index + Rn[0].length;
				break;
			case 'Interior':
				if(!opts.cellStyles) break;
				stag.Interior = xlml_parsexmltag(Rn[0]);
				break;
			case 'Protection': break;

			case 'Author':
			case 'Title':
			case 'Description':
			case 'Created':
			case 'Keywords':
			case 'Subject':
			case 'Category':
			case 'Company':
			case 'LastAuthor':
			case 'LastSaved':
			case 'LastPrinted':
			case 'Version':
			case 'Revision':
			case 'TotalTime':
			case 'HyperlinkBase':
			case 'Manager':
			case 'ContentStatus':
			case 'Identifier':
			case 'Language':
				if(Rn[0].slice(-2) === "/>") break;
				else if(Rn[1]==="/") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));
				else pidx = Rn.index + Rn[0].length;
				break;
			case 'Paragraphs': break;

			case 'Styles':
			case 'Workbook':
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else state.push([Rn[3], false]);
				break;

			case 'Comment':
				if(Rn[1]==='/'){
					if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
					xlml_clean_comment(comment);
					comments.push(comment);
				} else {
					state.push([Rn[3], false]);
					tmp = xlml_parsexmltag(Rn[0]);
					comment = {a:tmp.Author};
				}
				break;

			case 'AutoFilter':
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
					var AutoFilter = xlml_parsexmltag(Rn[0]);
					cursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\$/g,"") };
					state.push([Rn[3], true]);
				}
				break;

			case 'Name': break;

			case 'ComponentOptions':
			case 'DocumentProperties':
			case 'CustomDocumentProperties':
			case 'OfficeDocumentSettings':
			case 'PivotTable':
			case 'PivotCache':
			case 'Names':
			case 'MapInfo':
			case 'PageBreaks':
			case 'QueryTable':
			case 'DataValidation':
			case 'Sorting':
			case 'Schema':
			case 'data':
			case 'ConditionalFormatting':
			case 'SmartTagType':
			case 'SmartTags':
			case 'ExcelWorkbook':
			case 'WorkbookOptions':
			case 'WorksheetOptions':
				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
				break;

			default:
				/* FODS file root is <office:document> */
				if(state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
				/* UOS file root is <uof:UOF> */
				if(state.length == 0 && Rn[3] == "UOF") return parse_fods(str, opts);

				var seen = true;
				switch(state[state.length-1][0]) {
					/* OfficeDocumentSettings */
					case 'OfficeDocumentSettings': switch(Rn[3]) {
						case 'AllowPNG': break;
						case 'RemovePersonalInformation': break;
						case 'DownloadComponents': break;
						case 'LocationOfComponents': break;
						case 'Colors': break;
						case 'Color': break;
						case 'Index': break;
						case 'RGB': break;
						case 'PixelsPerInch': break; // TODO: set PPI
						case 'TargetScreenSize': break;
						case 'ReadOnlyRecommended': break;
						default: seen = false;
					} break;

					/* ComponentOptions */
					case 'ComponentOptions': switch(Rn[3]) {
						case 'Toolbar': break;
						case 'HideOfficeLogo': break;
						case 'SpreadsheetAutoFit': break;
						case 'Label': break;
						case 'Caption': break;
						case 'MaxHeight': break;
						case 'MaxWidth': break;
						case 'NextSheetNumber': break;
						default: seen = false;
					} break;

					/* ExcelWorkbook */
					case 'ExcelWorkbook': switch(Rn[3]) {
						case 'WindowHeight': break;
						case 'WindowWidth': break;
						case 'WindowTopX': break;
						case 'WindowTopY': break;
						case 'TabRatio': break;
						case 'ProtectStructure': break;
						case 'ProtectWindows': break;
						case 'ActiveSheet': break;
						case 'DisplayInkNotes': break;
						case 'FirstVisibleSheet': break;
						case 'SupBook': break;
						case 'SheetName': break;
						case 'SheetIndex': break;
						case 'SheetIndexFirst': break;
						case 'SheetIndexLast': break;
						case 'Dll': break;
						case 'AcceptLabelsInFormulas': break;
						case 'DoNotSaveLinkValues': break;
						case 'Date1904': break;
						case 'Iteration': break;
						case 'MaxIterations': break;
						case 'MaxChange': break;
						case 'Path': break;
						case 'Xct': break;
						case 'Count': break;
						case 'SelectedSheets': break;
						case 'Calculation': break;
						case 'Uncalced': break;
						case 'StartupPrompt': break;
						case 'Crn': break;
						case 'ExternName': break;
						case 'Formula': break;
						case 'ColFirst': break;
						case 'ColLast': break;
						case 'WantAdvise': break;
						case 'Boolean': break;
						case 'Error': break;
						case 'Text': break;
						case 'OLE': break;
						case 'NoAutoRecover': break;
						case 'PublishObjects': break;
						case 'DoNotCalculateBeforeSave': break;
						case 'Number': break;
						case 'RefModeR1C1': break;
						case 'EmbedSaveSmartTags': break;
						default: seen = false;
					} break;

					/* WorkbookOptions */
					case 'WorkbookOptions': switch(Rn[3]) {
						case 'OWCVersion': break;
						case 'Height': break;
						case 'Width': break;
						default: seen = false;
					} break;

					/* WorksheetOptions */
					case 'WorksheetOptions': switch(Rn[3]) {
						case 'Visible':
							if(Rn[0].slice(-2) === "/>"){/* empty */}
							else if(Rn[1]==="/") switch(str.slice(pidx, Rn.index)) {
								case "SheetHidden": wsprops.Hidden = 1; break;
								case "SheetVeryHidden": wsprops.Hidden = 2; break;
							}
							else pidx = Rn.index + Rn[0].length;
							break;
						case 'Header':
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
							cursheet['!margins'].header = parsexmltag(Rn[0]).Margin;
							break;
						case 'Footer':
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
							cursheet['!margins'].footer = parsexmltag(Rn[0]).Margin;
							break;
						case 'PageMargins':
							var pagemargins = parsexmltag(Rn[0]);
							if(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');
							if(pagemargins.Top) cursheet['!margins'].top = pagemargins.Top;
							if(pagemargins.Left) cursheet['!margins'].left = pagemargins.Left;
							if(pagemargins.Right) cursheet['!margins'].right = pagemargins.Right;
							if(pagemargins.Bottom) cursheet['!margins'].bottom = pagemargins.Bottom;
							break;
						case 'Unsynced': break;
						case 'Print': break;
						case 'Panes': break;
						case 'Scale': break;
						case 'Pane': break;
						case 'Number': break;
						case 'Layout': break;
						case 'PageSetup': break;
						case 'Selected': break;
						case 'ProtectObjects': break;
						case 'EnableSelection': break;
						case 'ProtectScenarios': break;
						case 'ValidPrinterInfo': break;
						case 'HorizontalResolution': break;
						case 'VerticalResolution': break;
						case 'NumberofCopies': break;
						case 'ActiveRow': break;
						case 'ActiveCol': break;
						case 'ActivePane': break;
						case 'TopRowVisible': break;
						case 'TopRowBottomPane': break;
						case 'LeftColumnVisible': break;
						case 'LeftColumnRightPane': break;
						case 'FitToPage': break;
						case 'RangeSelection': break;
						case 'PaperSizeIndex': break;
						case 'PageLayoutZoom': break;
						case 'PageBreakZoom': break;
						case 'FilterOn': break;
						case 'DoNotDisplayGridlines': break;
						case 'SplitHorizontal': break;
						case 'SplitVertical': break;
						case 'FreezePanes': break;
						case 'FrozenNoSplit': break;
						case 'FitWidth': break;
						case 'FitHeight': break;
						case 'CommentsLayout': break;
						case 'Zoom': break;
						case 'LeftToRight': break;
						case 'Gridlines': break;
						case 'AllowSort': break;
						case 'AllowFilter': break;
						case 'AllowInsertRows': break;
						case 'AllowDeleteRows': break;
						case 'AllowInsertCols': break;
						case 'AllowDeleteCols': break;
						case 'AllowInsertHyperlinks': break;
						case 'AllowFormatCells': break;
						case 'AllowSizeCols': break;
						case 'AllowSizeRows': break;
						case 'NoSummaryRowsBelowDetail': break;
						case 'TabColorIndex': break;
						case 'DoNotDisplayHeadings': break;
						case 'ShowPageLayoutZoom': break;
						case 'NoSummaryColumnsRightDetail': break;
						case 'BlackAndWhite': break;
						case 'DoNotDisplayZeros': break;
						case 'DisplayPageBreak': break;
						case 'RowColHeadings': break;
						case 'DoNotDisplayOutline': break;
						case 'NoOrientation': break;
						case 'AllowUsePivotTables': break;
						case 'ZeroHeight': break;
						case 'ViewableRange': break;
						case 'Selection': break;
						case 'ProtectContents': break;
						default: seen = false;
					} break;

					/* PivotTable */
					case 'PivotTable': case 'PivotCache': switch(Rn[3]) {
						case 'ImmediateItemsOnDrop': break;
						case 'ShowPageMultipleItemLabel': break;
						case 'CompactRowIndent': break;
						case 'Location': break;
						case 'PivotField': break;
						case 'Orientation': break;
						case 'LayoutForm': break;
						case 'LayoutSubtotalLocation': break;
						case 'LayoutCompactRow': break;
						case 'Position': break;
						case 'PivotItem': break;
						case 'DataType': break;
						case 'DataField': break;
						case 'SourceName': break;
						case 'ParentField': break;
						case 'PTLineItems': break;
						case 'PTLineItem': break;
						case 'CountOfSameItems': break;
						case 'Item': break;
						case 'ItemType': break;
						case 'PTSource': break;
						case 'CacheIndex': break;
						case 'ConsolidationReference': break;
						case 'FileName': break;
						case 'Reference': break;
						case 'NoColumnGrand': break;
						case 'NoRowGrand': break;
						case 'BlankLineAfterItems': break;
						case 'Hidden': break;
						case 'Subtotal': break;
						case 'BaseField': break;
						case 'MapChildItems': break;
						case 'Function': break;
						case 'RefreshOnFileOpen': break;
						case 'PrintSetTitles': break;
						case 'MergeLabels': break;
						case 'DefaultVersion': break;
						case 'RefreshName': break;
						case 'RefreshDate': break;
						case 'RefreshDateCopy': break;
						case 'VersionLastRefresh': break;
						case 'VersionLastUpdate': break;
						case 'VersionUpdateableMin': break;
						case 'VersionRefreshableMin': break;
						case 'Calculation': break;
						default: seen = false;
					} break;

					/* PageBreaks */
					case 'PageBreaks': switch(Rn[3]) {
						case 'ColBreaks': break;
						case 'ColBreak': break;
						case 'RowBreaks': break;
						case 'RowBreak': break;
						case 'ColStart': break;
						case 'ColEnd': break;
						case 'RowEnd': break;
						default: seen = false;
					} break;

					/* AutoFilter */
					case 'AutoFilter': switch(Rn[3]) {
						case 'AutoFilterColumn': break;
						case 'AutoFilterCondition': break;
						case 'AutoFilterAnd': break;
						case 'AutoFilterOr': break;
						default: seen = false;
					} break;

					/* QueryTable */
					case 'QueryTable': switch(Rn[3]) {
						case 'Id': break;
						case 'AutoFormatFont': break;
						case 'AutoFormatPattern': break;
						case 'QuerySource': break;
						case 'QueryType': break;
						case 'EnableRedirections': break;
						case 'RefreshedInXl9': break;
						case 'URLString': break;
						case 'HTMLTables': break;
						case 'Connection': break;
						case 'CommandText': break;
						case 'RefreshInfo': break;
						case 'NoTitles': break;
						case 'NextId': break;
						case 'ColumnInfo': break;
						case 'OverwriteCells': break;
						case 'DoNotPromptForFile': break;
						case 'TextWizardSettings': break;
						case 'Source': break;
						case 'Number': break;
						case 'Decimal': break;
						case 'ThousandSeparator': break;
						case 'TrailingMinusNumbers': break;
						case 'FormatSettings': break;
						case 'FieldType': break;
						case 'Delimiters': break;
						case 'Tab': break;
						case 'Comma': break;
						case 'AutoFormatName': break;
						case 'VersionLastEdit': break;
						case 'VersionLastRefresh': break;
						default: seen = false;
					} break;

					case 'Sorting':
					case 'ConditionalFormatting':
					case 'DataValidation':
					switch(Rn[3]) {
						case 'Range': break;
						case 'Type': break;
						case 'Min': break;
						case 'Max': break;
						case 'Sort': break;
						case 'Descending': break;
						case 'Order': break;
						case 'CaseSensitive': break;
						case 'Value': break;
						case 'ErrorStyle': break;
						case 'ErrorMessage': break;
						case 'ErrorTitle': break;
						case 'CellRangeList': break;
						case 'InputMessage': break;
						case 'InputTitle': break;
						case 'ComboHide': break;
						case 'InputHide': break;
						case 'Condition': break;
						case 'Qualifier': break;
						case 'UseBlank': break;
						case 'Value1': break;
						case 'Value2': break;
						case 'Format': break;
						default: seen = false;
					} break;

					/* MapInfo (schema) */
					case 'MapInfo': case 'Schema': case 'data': switch(Rn[3]) {
						case 'Map': break;
						case 'Entry': break;
						case 'Range': break;
						case 'XPath': break;
						case 'Field': break;
						case 'XSDType': break;
						case 'FilterOn': break;
						case 'Aggregate': break;
						case 'ElementType': break;
						case 'AttributeType': break;
					/* These are from xsd (XML Schema Definition) */
						case 'schema':
						case 'element':
						case 'complexType':
						case 'datatype':
						case 'all':
						case 'attribute':
						case 'extends': break;

						case 'row': break;
						default: seen = false;
					} break;

					/* SmartTags (can be anything) */
					case 'SmartTags': break;

					default: seen = false; break;
				}
				if(seen) break;
				/* CustomDocumentProperties */
				if(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
				if(state[state.length-1][0]==='CustomDocumentProperties') {
					if(Rn[0].slice(-2) === "/>") break;
					else if(Rn[1]==="/") xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index));
					else { cp = Rn; pidx = Rn.index + Rn[0].length; }
					break;
				}
				if(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
		}
		var out = ({});
		if(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
		out.SheetNames = sheetnames;
		out.Workbook = Workbook;
		out.SSF = SSF.get_table();
		out.Props = Props;
		out.Custprops = Custprops;
		return out;
	}

	function parse_xlml(data, opts) {
		fix_read_opts(opts=opts||{});
		switch(opts.type||"base64") {
			case "base64": return parse_xlml_xml(Base64.decode(data), opts);
			case "binary": case "buffer": case "file": return parse_xlml_xml(data, opts);
			case "array": return parse_xlml_xml(data.map(_chr).join(""), opts);
		}
	}

	/* TODO */
	function write_props_xlml(wb, opts) {
		var o = [];
		/* DocumentProperties */
		if(wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
		/* CustomDocumentProperties */
		if(wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
		return o.join("");
	}
	/* TODO */
	function write_wb_xlml(wb, opts) {
		/* OfficeDocumentSettings */
		/* ExcelWorkbook */
		return "";
	}
	/* TODO */
	function write_sty_xlml(wb, opts) {
		/* Styles */
		return "";
	}
	/* WorksheetOptions */
	function write_ws_xlml_wsopts(ws, opts, idx, wb) {
		if(!ws) return "";
		var o = [];
		/* NOTE: spec technically allows any order, but stick with implied order */

		/* FitToPage */
		/* DoNotDisplayColHeaders */
		/* DoNotDisplayRowHeaders */
		/* ViewableRange */
		/* Selection */
		/* GridlineColor */
		/* Name */
		/* ExcelWorksheetType */
		/* IntlMacro */
		/* Unsynced */
		/* Selected */
		/* CodeName */

		if(ws['!margins']) {
			o.push("<PageSetup>");
			if(ws['!margins'].header) o.push(writextag("Header", null, {'x:Margin':ws['!margins'].header}));
			if(ws['!margins'].footer) o.push(writextag("Footer", null, {'x:Margin':ws['!margins'].footer}));
			o.push(writextag("PageMargins", null, {
				'x:Bottom': ws['!margins'].bottom || "0.75",
				'x:Left': ws['!margins'].left || "0.7",
				'x:Right': ws['!margins'].right || "0.7",
				'x:Top': ws['!margins'].top || "0.75"
			}));
			o.push("</PageSetup>");
		}

		/* PageSetup */
		/* DisplayPageBreak */
		/* TransitionExpressionEvaluation */
		/* TransitionFormulaEntry */
		/* Print */
		/* Zoom */
		/* PageLayoutZoom */
		/* PageBreakZoom */
		/* ShowPageBreakZoom */
		/* DefaultRowHeight */
		/* DefaultColumnWidth */
		/* StandardWidth */

		if(wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
			/* Visible */
			if(wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", (wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden"), {}));
			else {
				/* Selected */
				for(var i = 0; i < idx; ++i) if(wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break;
				if(i == idx) o.push("<Selected/>");
			}
		}

		/* LeftColumnVisible */
		/* DisplayRightToLeft */
		/* GridlineColorIndex */
		/* DisplayFormulas */
		/* DoNotDisplayGridlines */
		/* DoNotDisplayHeadings */
		/* DoNotDisplayOutline */
		/* ApplyAutomaticOutlineStyles */
		/* NoSummaryRowsBelowDetail */
		/* NoSummaryColumnsRightDetail */
		/* DoNotDisplayZeros */
		/* ActiveRow */
		/* ActiveColumn */
		/* FilterOn */
		/* RangeSelection */
		/* TopRowVisible */
		/* TopRowBottomPane */
		/* LeftColumnRightPane */
		/* ActivePane */
		/* SplitHorizontal */
		/* SplitVertical */
		/* FreezePanes */
		/* FrozenNoSplit */
		/* TabColorIndex */
		/* Panes */

		/* NOTE: Password not supported in XLML Format */
		if(ws['!protect']) {
			o.push(writetag("ProtectContents", "True"));
			if(ws['!protect'].objects) o.push(writetag("ProtectObjects", "True"));
			if(ws['!protect'].scenarios) o.push(writetag("ProtectScenarios", "True"));
			if(ws['!protect'].selectLockedCells != null && !ws['!protect'].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection"));
			else if(ws['!protect'].selectUnlockedCells != null && !ws['!protect'].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));
		[
			[ "formatColumns", "AllowFormatCells" ],
			[ "formatRows", "AllowSizeCols" ],
			[ "formatCells", "AllowSizeRows" ],
			[ "insertColumns", "AllowInsertCols" ],
			[ "insertRows", "AllowInsertRows" ],
			[ "insertHyperlinks", "AllowInsertHyperlinks" ],
			[ "deleteColumns", "AllowDeleteCols" ],
			[ "deleteRows", "AllowDeleteRows" ],
			[ "sort", "AllowSort" ],
			[ "autoFilter", "AllowFilter" ],
			[ "pivotTables", "AllowUsePivotTables" ]
		].forEach(function(x) { if(ws['!protect'][x[0]]) o.push("<"+x[1]+"/>"); });
		}

		if(o.length == 0) return "";
		return writextag("WorksheetOptions", o.join(""), {xmlns:XLMLNS.x});
	}
	function write_ws_xlml_comment(comments) {
		return comments.map(function(c) {
			// TODO: formatted text
			var t = xlml_unfixstr(c.t||"");
			var d =writextag("ss:Data", t, {"xmlns":"http://www.w3.org/TR/REC-html40"});
			return writextag("Comment", d, {"ss:Author":c.a});
		}).join("");
	}
	function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr){
		if(!cell || cell.v == undefined && cell.f == undefined) return "<Cell></Cell>";

		var attr = {};
		if(cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
		if(cell.F && cell.F.substr(0, ref.length) == ref) {
			var end = decode_cell(cell.F.substr(ref.length + 1));
			attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
		}

		if(cell.l && cell.l.Target) {
			attr["ss:HRef"] = escapexml(cell.l.Target);
			if(cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
		}

		if(ws['!merges']) {
			var marr = ws['!merges'];
			for(var mi = 0; mi != marr.length; ++mi) {
				if(marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
				if(marr[mi].e.c > marr[mi].s.c) attr['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;
				if(marr[mi].e.r > marr[mi].s.r) attr['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;
			}
		}

		var t = "", p = "";
		switch(cell.t) {
			case 'z': return "";
			case 'n': t = 'Number'; p = String(cell.v); break;
			case 'b': t = 'Boolean'; p = (cell.v ? "1" : "0"); break;
			case 'e': t = 'Error'; p = BErr[cell.v]; break;
			case 'd': t = 'DateTime'; p = new Date(cell.v).toISOString(); break;
			case 's': t = 'String'; p = escapexml(cell.v||""); break;
		}
		var _v = (cell.v != null ? p : "");
		if(opts && opts.type == 'binary' && typeof cptable !== 'undefined' && cell.t == 's') {
			_v = cptable.utils.encode(65001, _v);
			var __v = "";
			for(var __i = 0; __i < _v.length; ++__i) __v += String.fromCharCode(_v[__i]);
			_v = __v;
		}
		var m = '<Data ss:Type="' + t + '">' + _v + '</Data>';

		if((cell.c||[]).length > 0) m += write_ws_xlml_comment(cell.c);

		return writextag("Cell", m, attr);
	}
	function write_ws_xlml_row(R, row) {
		var o = '<Row ss:Index="' + (R+1) + '"';
		if(row) {
			if(row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
			if(row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
			if(row.hidden) o += ' ss:Hidden="1"';
		}
		return o + '>';
	}
	/* TODO */
	function write_ws_xlml_table(ws, opts, idx, wb) {
		if(!ws['!ref']) return "";
		var range = safe_decode_range(ws['!ref']);
		var marr = ws['!merges'] || [], mi = 0;
		var o = [];
		if(ws['!cols']) ws['!cols'].forEach(function(n, i) {
			process_col(n);
			var w = !!n.width;
			var p = col_obj_w(i, n);
			var k = {"ss:Index":i+1};
			if(w) k['ss:Width'] = width2px(p.width);
			if(n.hidden) k['ss:Hidden']="1";
			o.push(writextag("Column",null,k));
		});
		var dense = Array.isArray(ws);
		for(var R = range.s.r; R <= range.e.r; ++R) {
			var row = [write_ws_xlml_row(R, (ws['!rows']||[])[R])];
			for(var C = range.s.c; C <= range.e.c; ++C) {
				var skip = false;
				for(mi = 0; mi != marr.length; ++mi) {
					if(marr[mi].s.c > C) continue;
					if(marr[mi].s.r > R) continue;
					if(marr[mi].e.c < C) continue;
					if(marr[mi].e.r < R) continue;
					if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
					break;
				}
				if(skip) continue;
				var addr = {r:R,c:C};
				var ref = encode_cell(addr), cell = dense ? (ws[R]||[])[C] : ws[ref];
				row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
			}
			row.push("</Row>");
			if(row.length > 2) o.push(row.join(""));
		}
		return o.join("");
	}
	function write_ws_xlml(idx, opts, wb) {
		var o = [];
		var s = wb.SheetNames[idx];
		var ws = wb.Sheets[s];

		/* Table */
		var t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
		if(t.length > 0) o.push("<Table>" + t + "</Table>");

		/* WorksheetOptions */
		o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));

		return o.join("");
	}
	function write_xlml(wb, opts) {
		var d = [];
		d.push(write_props_xlml(wb, opts));
		d.push(write_wb_xlml(wb, opts));
		d.push(write_sty_xlml(wb, opts));
		for(var i = 0; i < wb.SheetNames.length; ++i)
			d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), {"ss:Name":escapexml(wb.SheetNames[i])}));
		return XML_HEADER + writextag("Workbook", d.join(""), {
			'xmlns':      XLMLNS.ss,
			'xmlns:o':    XLMLNS.o,
			'xmlns:x':    XLMLNS.x,
			'xmlns:ss':   XLMLNS.ss,
			'xmlns:dt':   XLMLNS.dt,
			'xmlns:html': XLMLNS.html
		});
	}
	/* [MS-OLEDS] 2.3.8 CompObjStream */
	function parse_compobj(obj) {
		var v = {};
		var o = obj.content;

		/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
		var l = 28, m;
		m = __lpstr(o, l);
		l += 4 + __readUInt32LE(o,l);
		v.UserType = m;

		/* [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString */
		m = __readUInt32LE(o,l); l+= 4;
		switch(m) {
			case 0x00000000: break;
			case 0xffffffff: case 0xfffffffe: l+=4; break;
			default:
				if(m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
				l += m;
		}

		m = __lpstr(o, l); l += m.length === 0 ? 0 : 5 + m.length; v.Reserved1 = m;

		if((m = __readUInt32LE(o,l)) !== 0x71b2e9f4) return v;
		throw new Error("Unsupported Unicode Extension");
	}

	/* 2.4.58 Continue logic */
	function slurp(R, blob, length, opts) {
		var l = length;
		var bufs = [];
		var d = blob.slice(blob.l,blob.l+l);
		if(opts && opts.enc && opts.enc.insitu_decrypt) switch(R.n) {
		case 'BOF': case 'FilePass': case 'FileLock': case 'InterfaceHdr': case 'RRDInfo': case 'RRDHead': case 'UsrExcl': break;
		default:
			if(d.length === 0) break;
			opts.enc.insitu_decrypt(d);
		}
		bufs.push(d);
		blob.l += l;
		var next = (XLSRecordEnum[__readUInt16LE(blob,blob.l)]);
		while(next != null && next.n === 'Continue') {
			l = __readUInt16LE(blob,blob.l+2);
			bufs.push(blob.slice(blob.l+4,blob.l+4+l));
			blob.l += 4+l;
			next = (XLSRecordEnum[__readUInt16LE(blob, blob.l)]);
		}
		var b = (bconcat(bufs));
		prep_blob(b, 0);
		var ll = 0; b.lens = [];
		for(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }
		return R.f(b, b.length, opts);
	}

	function safe_format_xf(p, opts, date1904) {
		if(p.t === 'z') return;
		if(!p.XF) return;
		try {
			var fmtid = p.z || p.XF.ifmt || 0;
			if(opts.cellNF) p.z = SSF._table[fmtid];
		} catch(e) { if(opts.WTF) throw e; }
		if(!opts || opts.cellText !== false) try {
			if(p.t === 'e') { p.w = p.w || BErr[p.v]; }
			else if(fmtid === 0) {
				if(p.t === 'n') {
					if((p.v|0) === p.v) p.w = SSF._general_int(p.v);
					else p.w = SSF._general_num(p.v);
				}
				else p.w = SSF._general(p.v);
			}
			else p.w = SSF.format(fmtid,p.v, {date1904:!!date1904});
			if(opts.cellDates && fmtid && p.t == 'n' && SSF.is_date(SSF._table[fmtid])) {
				var _d = SSF.parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(Date.UTC(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u)); }
			}
		} catch(e) { if(opts.WTF) throw e; }
	}

	function make_cell(val, ixfe, t) {
		return ({v:val, ixfe:ixfe, t:t});
	}

	// 2.3.2
	function parse_workbook(blob, options) {
		var wb = ({opts:{}});
		var Sheets = {};
		if(DENSE != null && options.dense == null) options.dense = DENSE;
		var out = (options.dense ? [] : {});
		var Directory = {};
		var found_sheet = false;
		var range = ({});
		var last_formula = null;
		var sst = [];
		var cur_sheet = "";
		var Preamble = {};
		var lastcell, last_cell = "", cc, cmnt, rng, rngC, rngR;
		var shared_formulae = {};
		var array_formulae = []; /* TODO: something more clever */
		var temp_val;
		var country;
		var cell_valid = true;
		var XFs = []; /* XF records */
		var palette = [];
		var Workbook = { Sheets:[] }, wsprops = {};
		var get_rgb = function getrgb(icv) {
			if(icv < 8) return XLSIcv[icv];
			if(icv < 64) return palette[icv-8] || XLSIcv[icv];
			return XLSIcv[icv];
		};
		var process_cell_style = function pcs(cell, line, options) {
			var xfd = line.XF.data;
			if(!xfd || !xfd.patternType || !options || !options.cellStyles) return;
			line.s = ({});
			line.s.patternType = xfd.patternType;
			var t;
			if((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }
			if((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }
		};
		var addcell = function addcell(cell, line, options) {
			if(file_depth > 1) return;
			if(!cell_valid) return;
			if(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
			lastcell = cell;
			last_cell = encode_cell(cell);
			if(range.s) {
				if(cell.r < range.s.r) range.s.r = cell.r;
				if(cell.c < range.s.c) range.s.c = cell.c;
			}
			if(range.e) {
				if(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
				if(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
			}
			if(options.cellFormula && line.f) {
				for(var afi = 0; afi < array_formulae.length; ++afi) {
					if(array_formulae[afi][0].s.c > cell.c) continue;
					if(array_formulae[afi][0].s.r > cell.r) continue;
					if(array_formulae[afi][0].e.c < cell.c) continue;
					if(array_formulae[afi][0].e.r < cell.r) continue;
					line.F = encode_range(array_formulae[afi][0]);
					if(array_formulae[afi][0].s.c != cell.c) delete line.f;
					if(array_formulae[afi][0].s.r != cell.r) delete line.f;
					if(line.f) line.f = "" + stringify_formula(array_formulae[afi][1], range, cell, supbooks, opts);
					break;
				}
			}
			if(options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false;
			else {
				if(options.dense) {
					if(!out[cell.r]) out[cell.r] = [];
					out[cell.r][cell.c] = line;
				} else out[last_cell] = line;
			}
		};
		var opts = ({
			enc: false, // encrypted
			sbcch: 0, // cch in the preceding SupBook
			snames: [], // sheetnames
			sharedf: shared_formulae, // shared formulae by address
			arrayf: array_formulae, // array formulae array
			rrtabid: [], // RRTabId
			lastuser: "", // Last User from WriteAccess
			biff: 8, // BIFF version
			codepage: 0, // CP from CodePage record
			winlocked: 0, // fLockWn from WinProtect
			cellStyles: !!options && !!options.cellStyles,
			WTF: !!options && !!options.wtf
		});
		if(options.password) opts.password = options.password;
		var mergecells = [];
		var objects = [];
		var colinfo = [], rowinfo = [];
		var defwidth = 0, defheight = 0; // twips / MDW respectively
		var seencol = false;
		var supbooks = ([]); // 1-indexed, will hold extern names
		supbooks.SheetNames = opts.snames;
		supbooks.sharedf = opts.sharedf;
		supbooks.arrayf = opts.arrayf;
		supbooks.names = [];
		supbooks.XTI = [];
		var last_Rn = '';
		var file_depth = 0; /* TODO: make a real stack */
		var BIFF2Fmt = 0;
		var BIFF2FmtTable = [];
		var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */
		var last_lbl;

		/* explicit override for some broken writers */
		opts.codepage = 1200;
		set_cp(1200);
		while(blob.l < blob.length - 1) {
			var s = blob.l;
			var RecordType = blob.read_shift(2);
			if(RecordType === 0 && last_Rn === 'EOF') break;
			var length = (blob.l === blob.length ? 0 : blob.read_shift(2)), y;
			var R = XLSRecordEnum[RecordType];
			//console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
			//if(!R) console.log(blob.slice(blob.l, blob.l + length));
			if(R && R.f) {
				if(options.bookSheets) {
					if(last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;
				}
				last_Rn = R.n;
				if(R.r === 2 || R.r == 12) {
					var rt = blob.read_shift(2); length -= 2;
					if(!opts.enc && rt !== RecordType) throw "rt mismatch";
					if(R.r == 12){ blob.l += 10; length -= 10; } // skip FRT
				}
				//console.error(R,blob.l,length,blob.length);
				var val;
				if(R.n === 'EOF') val = R.f(blob, length, opts);
				else val = slurp(R, blob, length, opts);
				var Rn = R.n;
				/* nested switch statements to workaround V8 128 limit */
				switch(Rn) {
					/* Workbook Options */
					case 'Date1904': wb.opts.Date1904 = val; break;
					case 'WriteProtect': wb.opts.WriteProtect = true; break;
					case 'FilePass':
						if(!opts.enc) blob.l = 0;
						opts.enc = val;
						if(opts.WTF) console.error(val);
						if(!options.password) throw new Error("File is password-protected");
						if(val.valid == null) throw new Error("Encryption scheme unsupported");
						if(!val.valid) throw new Error("Password is incorrect");
						break;
					case 'WriteAccess': opts.lastuser = val; break;
					case 'FileSharing': break; //TODO
					case 'CodePage':
						/* overrides based on test cases */
						if(val === 0x5212) val = 1200;
						else if(val === 0x8001) val = 1252;
						opts.codepage = val;
						set_cp(val);
						break;
					case 'RRTabId': opts.rrtabid = val; break;
					case 'WinProtect': opts.winlocked = val; break;
					case 'Template': break; // TODO
					case 'RefreshAll': wb.opts.RefreshAll = val; break;
					case 'BookBool': break; // TODO
					case 'UsesELFs': break;
					case 'MTRSettings': break;
					case 'CalcCount': wb.opts.CalcCount = val; break;
					case 'CalcDelta': wb.opts.CalcDelta = val; break;
					case 'CalcIter': wb.opts.CalcIter = val; break;
					case 'CalcMode': wb.opts.CalcMode = val; break;
					case 'CalcPrecision': wb.opts.CalcPrecision = val; break;
					case 'CalcSaveRecalc': wb.opts.CalcSaveRecalc = val; break;
					case 'CalcRefMode': opts.CalcRefMode = val; break; // TODO: implement R1C1
					case 'Uncalced': break;
					case 'ForceFullCalculation': wb.opts.FullCalc = val; break;
					case 'WsBool': break; // TODO
					case 'XF': XFs.push(val); break;
					case 'ExtSST': break; // TODO
					case 'BookExt': break; // TODO
					case 'RichTextStream': break;
					case 'BkHim': break;

					case 'SupBook':
						supbooks.push([val]);
						supbooks[supbooks.length-1].XTI = [];
						break;
					case 'ExternName':
						supbooks[supbooks.length-1].push(val);
						break;
					case 'Index': break; // TODO
					case 'Lbl':
						last_lbl = {
							Name: val.Name,
							Ref: stringify_formula(val.rgce,range,null,supbooks,opts)
						};
						if(val.itab > 0) last_lbl.Sheet = val.itab - 1;
						supbooks.names.push(last_lbl);
						if(!supbooks[0]) supbooks[0] = [];
						supbooks[supbooks.length-1].push(val);
						if(val.Name == "\r" && val.itab > 0)
							if(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')
								FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
						break;
					case 'ExternSheet':
						if(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }
						supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;
					case 'NameCmt':
						/* TODO: search for correct name */
						if(opts.biff < 8) break;
						last_lbl.Comment = val[1];
						break;

					case 'Protect': out["!protect"] = val; break; /* for sheet or book */
					case 'Password': if(val !== 0 && opts.WTF) console.error("Password verifier: " + val); break;
					case 'Prot4Rev': case 'Prot4RevPass': break; /*TODO: Revision Control*/

					case 'BoundSheet8': {
						Directory[val.pos] = val;
						opts.snames.push(val.name);
					} break;
					case 'EOF': {
						if(--file_depth) break;
						if(range.e) {
							if(range.e.r > 0 && range.e.c > 0) {
								range.e.r--; range.e.c--;
								out["!ref"] = encode_range(range);
								range.e.r++; range.e.c++;
							}
							if(mergecells.length > 0) out["!merges"] = mergecells;
							if(objects.length > 0) out["!objects"] = objects;
							if(colinfo.length > 0) out["!cols"] = colinfo;
							if(rowinfo.length > 0) out["!rows"] = rowinfo;
							Workbook.Sheets.push(wsprops);
						}
						if(cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
						out = options.dense ? [] : {};
					} break;
					case 'BOF': {
						if(opts.biff !== 8){/* empty */}
						else if(RecordType  === 0x0009) opts.biff = 2;
						else if(RecordType  === 0x0209) opts.biff = 3;
						else if(RecordType  === 0x0409) opts.biff = 4;
						else if(val.BIFFVer === 0x0500) opts.biff = 5;
						else if(val.BIFFVer === 0x0600) opts.biff = 8;
						else if(val.BIFFVer === 0x0002) opts.biff = 2;
						else if(val.BIFFVer === 0x0007) opts.biff = 2;
						if(file_depth++) break;
						cell_valid = true;
						out = (options.dense ? [] : {});

						if(opts.biff < 5) {
							if(cur_sheet === "") cur_sheet = "Sheet1";
							range = {s:{r:0,c:0},e:{r:0,c:0}};
							/* fake BoundSheet8 */
							var fakebs8 = {pos: blob.l - length, name:cur_sheet};
							Directory[fakebs8.pos] = fakebs8;
							opts.snames.push(cur_sheet);
						}
						else cur_sheet = (Directory[s] || {name:""}).name;
						if(val.dt == 0x20) out["!type"] = "chart";
						mergecells = [];
						objects = [];
						array_formulae = []; opts.arrayf = array_formulae;
						colinfo = []; rowinfo = [];
						defwidth = defheight = 0;
						seencol = false;
						wsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };
					} break;

					case 'Number': case 'BIFF2NUM': case 'BIFF2INT': {
						if(out["!type"] == "chart") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;
						temp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'};
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 'BoolErr': {
						temp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t};
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 'RK': {
						temp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'};
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 'MulRk': {
						for(var j = val.c; j <= val.C; ++j) {
							var ixfe = val.rkrec[j-val.c][0];
							temp_val= {ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'};
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell({c:j, r:val.r}, temp_val, options);
						}
					} break;
					case 'Formula': {
						if(val.val == 'String') { last_formula = val; break; }
						temp_val = ({v:val.val, ixfe:val.cell.ixfe, t:val.tt});
						temp_val.XF = XFs[temp_val.ixfe];
						if(options.cellFormula) {
							var _f = val.formula;
							if(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
								var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
								var _fe = encode_cell({r:_fr, c:_fc});
								if(shared_formulae[_fe]) temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
								else temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;
							} else temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
						}
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell(val.cell, temp_val, options);
						last_formula = val;
					} break;
					case 'String': {
						if(last_formula) { /* technically always true */
							last_formula.val = val;
							temp_val = ({v:val, ixfe:last_formula.cell.ixfe, t:'s'});
							temp_val.XF = XFs[temp_val.ixfe];
							if(options.cellFormula) {
								temp_val.f = ""+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
							}
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell(last_formula.cell, temp_val, options);
							last_formula = null;
						} else throw new Error("String record expects Formula");
					} break;
					case 'Array': {
						array_formulae.push(val);
						var _arraystart = encode_cell(val[0].s);
						cc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];
						if(options.cellFormula && cc) {
							if(!last_formula) break; /* technically unreachable */
							if(!_arraystart || !cc) break;
							cc.f = ""+stringify_formula(val[1], range, val[0], supbooks, opts);
							cc.F = encode_range(val[0]);
						}
					} break;
					case 'ShrFmla': {
						if(!cell_valid) break;
						if(!options.cellFormula) break;
						if(last_cell) {
							/* TODO: capture range */
							if(!last_formula) break; /* technically unreachable */
							shared_formulae[encode_cell(last_formula.cell)]= val[0];
							cc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
							(cc||{}).f = ""+stringify_formula(val[0], range, lastcell, supbooks, opts);
						}
					} break;
					case 'LabelSst':
						temp_val=make_cell(sst[val.isst].t, val.ixfe, 's');
						temp_val.XF = XFs[temp_val.ixfe];
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
						break;
					case 'Blank': if(options.sheetStubs) {
						temp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'};
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
					} break;
					case 'MulBlank': if(options.sheetStubs) {
						for(var _j = val.c; _j <= val.C; ++_j) {
							var _ixfe = val.ixfe[_j-val.c];
							temp_val= {ixfe:_ixfe, XF:XFs[_ixfe], t:'z'};
							if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
							safe_format_xf(temp_val, options, wb.opts.Date1904);
							addcell({c:_j, r:val.r}, temp_val, options);
						}
					} break;
					case 'RString':
					case 'Label': case 'BIFF2STR':
						temp_val=make_cell(val.val, val.ixfe, 's');
						temp_val.XF = XFs[temp_val.ixfe];
						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x1F];
						safe_format_xf(temp_val, options, wb.opts.Date1904);
						addcell({c:val.c, r:val.r}, temp_val, options);
						break;

					case 'Dimensions': {
						if(file_depth === 1) range = val; /* TODO: stack */
					} break;
					case 'SST': {
						sst = val;
					} break;
					case 'Format': { /* val = [id, fmt] */
						SSF.load(val[1], val[0]);
					} break;
					case 'BIFF2FORMAT': {
						BIFF2FmtTable[BIFF2Fmt++] = val;
						for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(SSF._table[b2idx] == val) break;
						if(b2idx >= 163) SSF.load(val, BIFF2Fmt + 163);
					} break;

					case 'MergeCells': mergecells = mergecells.concat(val); break;

					case 'Obj': objects[val.cmo[0]] = opts.lastobj = val; break;
					case 'TxO': opts.lastobj.TxO = val; break;
					case 'ImData': opts.lastobj.ImData = val; break;

					case 'HLink': {
						for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
							for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
								cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
								if(cc) cc.l = val[1];
							}
					} break;
					case 'HLinkTooltip': {
						for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
							for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
								cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
								if(cc) cc.l.Tooltip = val[1];
								}
					} break;

					/* Comments */
					case 'Note': {
						if(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */
						cc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];
						var noteobj = objects[val[2]];
						if(!cc) break;
						if(!cc.c) cc.c = [];
						cmnt = {a:val[1],t:noteobj.TxO.t};
						cc.c.push(cmnt);
					} break;

					default: switch(R.n) { /* nested */
					case 'ClrtClient': break;
					case 'XFExt': update_xfext(XFs[val.ixfe], val.ext); break;

					case 'DefColWidth': defwidth = val; break;
					case 'DefaultRowHeight': defheight = val[1]; break; // TODO: flags

					case 'ColInfo': {
						if(!opts.cellStyles) break;
						while(val.e >= val.s) {
							colinfo[val.e--] = { width: val.w/256 };
							if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
							process_col(colinfo[val.e+1]);
						}
					} break;
					case 'Row': {
						var rowobj = {};
						if(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }
						if(val.hpt) {
							rowinfo[val.r] = rowobj;
							rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);
						}
					} break;

					case 'LeftMargin':
					case 'RightMargin':
					case 'TopMargin':
					case 'BottomMargin':
						if(!out['!margins']) default_margins(out['!margins'] = {});
						switch(Rn) {
							case 'LeftMargin': out['!margins'].left = val; break;
							case 'RightMargin': out['!margins'].right = val; break;
							case 'TopMargin': out['!margins'].top = val; break;
							case 'BottomMargin': out['!margins'].bottom = val; break;
						}
						break;

					case 'Setup': // TODO
						if(!out['!margins']) default_margins(out['!margins'] = {});
						out['!margins'].header = val.header;
						out['!margins'].footer = val.footer;
						break;

					case 'Header': break; // TODO
					case 'Footer': break; // TODO
					case 'HCenter': break; // TODO
					case 'VCenter': break; // TODO
					case 'Pls': break; // TODO
					case 'GCW': break;
					case 'LHRecord': break;
					case 'DBCell': break; // TODO
					case 'EntExU2': break; // TODO
					case 'SxView': break; // TODO
					case 'Sxvd': break; // TODO
					case 'SXVI': break; // TODO
					case 'SXVDEx': break; // TODO
					case 'SxIvd': break; // TODO
					case 'SXDI': break; // TODO
					case 'SXLI': break; // TODO
					case 'SXEx': break; // TODO
					case 'QsiSXTag': break; // TODO
					case 'Selection': break;
					case 'Feat': break;
					case 'FeatHdr': case 'FeatHdr11': break;
					case 'Feature11': case 'Feature12': case 'List12': break;
					case 'Country': country = val; break;
					case 'RecalcId': break;
					case 'DxGCol': break; // TODO: htmlify
					case 'Fbi': case 'Fbi2': case 'GelFrame': break;
					case 'Font': break; // TODO
					case 'XFCRC': break; // TODO
					case 'Style': break; // TODO
					case 'StyleExt': break; // TODO
					case 'Palette': palette = val; break; // TODO
					case 'Theme': break; // TODO
					/* Protection */
					case 'ScenarioProtect': break;
					case 'ObjProtect': break;

					/* Conditional Formatting */
					case 'CondFmt12': break;

					/* Table */
					case 'Table': break; // TODO
					case 'TableStyles': break; // TODO
					case 'TableStyle': break; // TODO
					case 'TableStyleElement': break; // TODO

					/* PivotTable */
					case 'SXStreamID': break; // TODO
					case 'SXVS': break; // TODO
					case 'DConRef': break; // TODO
					case 'SXAddl': break; // TODO
					case 'DConBin': break; // TODO
					case 'DConName': break; // TODO
					case 'SXPI': break; // TODO
					case 'SxFormat': break; // TODO
					case 'SxSelect': break; // TODO
					case 'SxRule': break; // TODO
					case 'SxFilt': break; // TODO
					case 'SxItm': break; // TODO
					case 'SxDXF': break; // TODO

					/* Scenario Manager */
					case 'ScenMan': break;

					/* Data Consolidation */
					case 'DCon': break;

					/* Watched Cell */
					case 'CellWatch': break;

					/* Print Settings */
					case 'PrintRowCol': break;
					case 'PrintGrid': break;
					case 'PrintSize': break;

					case 'XCT': break;
					case 'CRN': break;

					case 'Scl': {
						//console.log("Zoom Level:", val[0]/val[1],val);
					} break;
					case 'SheetExt': {
						/* empty */
					} break;
					case 'SheetExtOptional': {
						/* empty */
					} break;

					/* VBA */
					case 'ObNoMacros': {
						/* empty */
					} break;
					case 'ObProj': {
						/* empty */
					} break;
					case 'CodeName': {
						/* empty */
					} break;
					case 'GUIDTypeLib': {
						/* empty */
					} break;

					case 'WOpt': break; // TODO: WTF?
					case 'PhoneticInfo': break;

					case 'OleObjectSize': break;

					/* Differential Formatting */
					case 'DXF': case 'DXFN': case 'DXFN12': case 'DXFN12List': case 'DXFN12NoCB': break;

					/* Data Validation */
					case 'Dv': case 'DVal': break;

					/* Data Series */
					case 'BRAI': case 'Series': case 'SeriesText': break;

					/* Data Connection */
					case 'DConn': break;
					case 'DbOrParamQry': break;
					case 'DBQueryExt': break;

					/* Formatting */
					case 'IFmtRecord': break;
					case 'CondFmt': case 'CF': case 'CF12': case 'CFEx': break;

					/* Explicitly Ignored */
					case 'Excel9File': break;
					case 'Units': break;
					case 'InterfaceHdr': case 'Mms': case 'InterfaceEnd': case 'DSF': case 'BuiltInFnGroupCount': break;
					/* View Stuff */
					case 'Window1': case 'Window2': case 'HideObj': case 'GridSet': case 'Guts':
					case 'UserBView': case 'UserSViewBegin': case 'UserSViewEnd':
					case 'Pane': break;
					default: switch(R.n) { /* nested */
					/* Chart */
					case 'Dat':
					case 'Begin': case 'End':
					case 'StartBlock': case 'EndBlock':
					case 'Frame': case 'Area':
					case 'Axis': case 'AxisLine': case 'Tick': break;
					case 'AxesUsed':
					case 'CrtLayout12': case 'CrtLayout12A': case 'CrtLink': case 'CrtLine': case 'CrtMlFrt': case 'CrtMlFrtContinue': break;
					case 'LineFormat': case 'AreaFormat':
					case 'Chart': case 'Chart3d': case 'Chart3DBarShape': case 'ChartFormat': case 'ChartFrtInfo': break;
					case 'PlotArea': case 'PlotGrowth': break;
					case 'SeriesList': case 'SerParent': case 'SerAuxTrend': break;
					case 'DataFormat': case 'SerToCrt': case 'FontX': break;
					case 'CatSerRange': case 'AxcExt': case 'SerFmt': break;
					case 'ShtProps': break;
					case 'DefaultText': case 'Text': case 'CatLab': break;
					case 'DataLabExtContents': break;
					case 'Legend': case 'LegendException': break;
					case 'Pie': case 'Scatter': break;
					case 'PieFormat': case 'MarkerFormat': break;
					case 'StartObject': case 'EndObject': break;
					case 'AlRuns': case 'ObjectLink': break;
					case 'SIIndex': break;
					case 'AttachedLabel': case 'YMult': break;

					/* Chart Group */
					case 'Line': case 'Bar': break;
					case 'Surf': break;

					/* Axis Group */
					case 'AxisParent': break;
					case 'Pos': break;
					case 'ValueRange': break;

					/* Pivot Chart */
					case 'SXViewEx9': break; // TODO
					case 'SXViewLink': break;
					case 'PivotChartBits': break;
					case 'SBaseRef': break;
					case 'TextPropsStream': break;

					/* Chart Misc */
					case 'LnExt': break;
					case 'MkrExt': break;
					case 'CrtCoopt': break;

					/* Query Table */
					case 'Qsi': case 'Qsif': case 'Qsir': case 'QsiSXTag': break;
					case 'TxtQry': break;

					/* Filter */
					case 'FilterMode': break;
					case 'AutoFilter': case 'AutoFilterInfo': break;
					case 'AutoFilter12': break;
					case 'DropDownObjIds': break;
					case 'Sort': break;
					case 'SortData': break;

					/* Drawing */
					case 'ShapePropsStream': break;
					case 'MsoDrawing': case 'MsoDrawingGroup': case 'MsoDrawingSelection': break;
					/* Pub Stuff */
					case 'WebPub': case 'AutoWebPub': break;

					/* Print Stuff */
					case 'HeaderFooter': case 'HFPicture': case 'PLV':
					case 'HorizontalPageBreaks': case 'VerticalPageBreaks': break;
					/* Behavioral */
					case 'Backup': case 'CompressPictures': case 'Compat12': break;

					/* Should not Happen */
					case 'Continue': case 'ContinueFrt12': break;

					/* Future Records */
					case 'FrtFontList': case 'FrtWrapper': break;

					default: switch(R.n) { /* nested */
					/* BIFF5 records */
					case 'ExternCount': break;
					case 'TabIdConf': case 'Radar': case 'RadarArea': case 'DropBar': case 'Intl': case 'CoordList': case 'SerAuxErrBar': break;

					/* BIFF2-4 records */
					case 'BIFF2FONTCLR': case 'BIFF2FMTCNT': case 'BIFF2FONTXTRA': break;
					case 'BIFF2XF': case 'BIFF3XF': case 'BIFF4XF': break;
					case 'BIFF4FMTCNT': case 'BIFF2ROW': case 'BIFF2WINDOW2': break;

					/* Miscellaneous */
					case 'SCENARIO': case 'DConBin': case 'PicF': case 'DataLabExt':
					case 'Lel': case 'BopPop': case 'BopPopCustom': case 'RealTimeData':
					case 'Name': break;
					default: if(options.WTF) throw 'Unrecognized Record ' + R.n;
				}}}}
			} else blob.l += length;
		}
		var sheetnamesraw = Object.keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});
		var sheetnames = sheetnamesraw.slice();
		wb.Directory=sheetnamesraw;
		wb.SheetNames=sheetnamesraw;
		if(!options.bookSheets) wb.Sheets=Sheets;
		if(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });
		wb.Preamble=Preamble;
		wb.Strings = sst;
		wb.SSF = SSF.get_table();
		if(opts.enc) wb.Encryption = opts.enc;
		wb.Metadata = {};
		if(country !== undefined) wb.Metadata.Country = country;
		if(supbooks.names.length > 0) Workbook.Names = supbooks.names;
		wb.Workbook = Workbook;
		return wb;
	}

	/* TODO: WTF */
	function parse_props(cfb) {
		/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
		var DSI = cfb.find('!DocumentSummaryInformation');
		if(DSI) try { cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI); } catch(e) {/* empty */}

		/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
		var SI = cfb.find('!SummaryInformation');
		if(SI) try { cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI); } catch(e) {/* empty */}
	}

	function parse_xlscfb(cfb, options) {
	if(!options) options = {};
	fix_read_opts(options);
	reset_cp();
	var CompObj, Summary, Workbook;
	if(cfb.FullPaths) {
		CompObj = cfb.find('!CompObj');
		Summary = cfb.find('!SummaryInformation');
		Workbook = cfb.find('/Workbook');
	} else {
		prep_blob(cfb, 0);
		Workbook = ({content: cfb});
	}

	if(!Workbook) Workbook = cfb.find('/Book');
	var CompObjP, SummaryP, WorkbookP;

	if(CompObj) CompObjP = parse_compobj(CompObj);
	if(options.bookProps && !options.bookSheets) WorkbookP = ({});
	else {
		if(Workbook) WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find);
		/* Quattro Pro 7-8 */
		else if(cfb.find('PerfectOffice_MAIN')) WorkbookP = WK_.to_workbook(cfb.find('PerfectOffice_MAIN').content, options);
		/* Quattro Pro 9 */
		else if(cfb.find('NativeContent_MAIN')) WorkbookP = WK_.to_workbook(cfb.find('NativeContent_MAIN').content, options);
		else throw new Error("Cannot find Workbook stream");
	}

	if(cfb.FullPaths) parse_props(cfb);

	var props = {};
	for(var y in cfb.Summary) props[y] = cfb.Summary[y];
	for(y in cfb.DocSummary) props[y] = cfb.DocSummary[y];
	WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */
	if(options.bookFiles) WorkbookP.cfb = cfb;
	/*WorkbookP.CompObjP = CompObjP; // TODO: storage? */
	return WorkbookP;
	}

	/* [MS-XLSB] 2.3 Record Enumeration */
	var XLSBRecordEnum = {
	0x0000: { n:"BrtRowHdr", f:parse_BrtRowHdr },
	0x0001: { n:"BrtCellBlank", f:parse_BrtCellBlank },
	0x0002: { n:"BrtCellRk", f:parse_BrtCellRk },
	0x0003: { n:"BrtCellError", f:parse_BrtCellError },
	0x0004: { n:"BrtCellBool", f:parse_BrtCellBool },
	0x0005: { n:"BrtCellReal", f:parse_BrtCellReal },
	0x0006: { n:"BrtCellSt", f:parse_BrtCellSt },
	0x0007: { n:"BrtCellIsst", f:parse_BrtCellIsst },
	0x0008: { n:"BrtFmlaString", f:parse_BrtFmlaString },
	0x0009: { n:"BrtFmlaNum", f:parse_BrtFmlaNum },
	0x000A: { n:"BrtFmlaBool", f:parse_BrtFmlaBool },
	0x000B: { n:"BrtFmlaError", f:parse_BrtFmlaError },
	0x0010: { n:"BrtFRTArchID$", f:parse_BrtFRTArchID$ },
	0x0013: { n:"BrtSSTItem", f:parse_RichStr },
	0x0014: { n:"BrtPCDIMissing", f:parsenoop },
	0x0015: { n:"BrtPCDINumber", f:parsenoop },
	0x0016: { n:"BrtPCDIBoolean", f:parsenoop },
	0x0017: { n:"BrtPCDIError", f:parsenoop },
	0x0018: { n:"BrtPCDIString", f:parsenoop },
	0x0019: { n:"BrtPCDIDatetime", f:parsenoop },
	0x001A: { n:"BrtPCDIIndex", f:parsenoop },
	0x001B: { n:"BrtPCDIAMissing", f:parsenoop },
	0x001C: { n:"BrtPCDIANumber", f:parsenoop },
	0x001D: { n:"BrtPCDIABoolean", f:parsenoop },
	0x001E: { n:"BrtPCDIAError", f:parsenoop },
	0x001F: { n:"BrtPCDIAString", f:parsenoop },
	0x0020: { n:"BrtPCDIADatetime", f:parsenoop },
	0x0021: { n:"BrtPCRRecord", f:parsenoop },
	0x0022: { n:"BrtPCRRecordDt", f:parsenoop },
	0x0023: { n:"BrtFRTBegin", f:parsenoop },
	0x0024: { n:"BrtFRTEnd", f:parsenoop },
	0x0025: { n:"BrtACBegin", f:parsenoop },
	0x0026: { n:"BrtACEnd", f:parsenoop },
	0x0027: { n:"BrtName", f:parse_BrtName },
	0x0028: { n:"BrtIndexRowBlock", f:parsenoop },
	0x002A: { n:"BrtIndexBlock", f:parsenoop },
	0x002B: { n:"BrtFont", f:parse_BrtFont },
	0x002C: { n:"BrtFmt", f:parse_BrtFmt },
	0x002D: { n:"BrtFill", f:parsenoop },
	0x002E: { n:"BrtBorder", f:parsenoop },
	0x002F: { n:"BrtXF", f:parse_BrtXF },
	0x0030: { n:"BrtStyle", f:parsenoop },
	0x0031: { n:"BrtCellMeta", f:parsenoop },
	0x0032: { n:"BrtValueMeta", f:parsenoop },
	0x0033: { n:"BrtMdb", f:parsenoop },
	0x0034: { n:"BrtBeginFmd", f:parsenoop },
	0x0035: { n:"BrtEndFmd", f:parsenoop },
	0x0036: { n:"BrtBeginMdx", f:parsenoop },
	0x0037: { n:"BrtEndMdx", f:parsenoop },
	0x0038: { n:"BrtBeginMdxTuple", f:parsenoop },
	0x0039: { n:"BrtEndMdxTuple", f:parsenoop },
	0x003A: { n:"BrtMdxMbrIstr", f:parsenoop },
	0x003B: { n:"BrtStr", f:parsenoop },
	0x003C: { n:"BrtColInfo", f:parse_ColInfo },
	0x003E: { n:"BrtCellRString", f:parsenoop },
	0x003F: { n:"BrtCalcChainItem$", f:parse_BrtCalcChainItem$ },
	0x0040: { n:"BrtDVal", f:parsenoop },
	0x0041: { n:"BrtSxvcellNum", f:parsenoop },
	0x0042: { n:"BrtSxvcellStr", f:parsenoop },
	0x0043: { n:"BrtSxvcellBool", f:parsenoop },
	0x0044: { n:"BrtSxvcellErr", f:parsenoop },
	0x0045: { n:"BrtSxvcellDate", f:parsenoop },
	0x0046: { n:"BrtSxvcellNil", f:parsenoop },
	0x0080: { n:"BrtFileVersion", f:parsenoop },
	0x0081: { n:"BrtBeginSheet", f:parsenoop },
	0x0082: { n:"BrtEndSheet", f:parsenoop },
	0x0083: { n:"BrtBeginBook", f:parsenoop, p:0 },
	0x0084: { n:"BrtEndBook", f:parsenoop },
	0x0085: { n:"BrtBeginWsViews", f:parsenoop },
	0x0086: { n:"BrtEndWsViews", f:parsenoop },
	0x0087: { n:"BrtBeginBookViews", f:parsenoop },
	0x0088: { n:"BrtEndBookViews", f:parsenoop },
	0x0089: { n:"BrtBeginWsView", f:parsenoop },
	0x008A: { n:"BrtEndWsView", f:parsenoop },
	0x008B: { n:"BrtBeginCsViews", f:parsenoop },
	0x008C: { n:"BrtEndCsViews", f:parsenoop },
	0x008D: { n:"BrtBeginCsView", f:parsenoop },
	0x008E: { n:"BrtEndCsView", f:parsenoop },
	0x008F: { n:"BrtBeginBundleShs", f:parsenoop },
	0x0090: { n:"BrtEndBundleShs", f:parsenoop },
	0x0091: { n:"BrtBeginSheetData", f:parsenoop },
	0x0092: { n:"BrtEndSheetData", f:parsenoop },
	0x0093: { n:"BrtWsProp", f:parse_BrtWsProp },
	0x0094: { n:"BrtWsDim", f:parse_BrtWsDim, p:16 },
	0x0097: { n:"BrtPane", f:parsenoop },
	0x0098: { n:"BrtSel", f:parsenoop },
	0x0099: { n:"BrtWbProp", f:parse_BrtWbProp },
	0x009A: { n:"BrtWbFactoid", f:parsenoop },
	0x009B: { n:"BrtFileRecover", f:parsenoop },
	0x009C: { n:"BrtBundleSh", f:parse_BrtBundleSh },
	0x009D: { n:"BrtCalcProp", f:parsenoop },
	0x009E: { n:"BrtBookView", f:parsenoop },
	0x009F: { n:"BrtBeginSst", f:parse_BrtBeginSst },
	0x00A0: { n:"BrtEndSst", f:parsenoop },
	0x00A1: { n:"BrtBeginAFilter", f:parse_UncheckedRfX },
	0x00A2: { n:"BrtEndAFilter", f:parsenoop },
	0x00A3: { n:"BrtBeginFilterColumn", f:parsenoop },
	0x00A4: { n:"BrtEndFilterColumn", f:parsenoop },
	0x00A5: { n:"BrtBeginFilters", f:parsenoop },
	0x00A6: { n:"BrtEndFilters", f:parsenoop },
	0x00A7: { n:"BrtFilter", f:parsenoop },
	0x00A8: { n:"BrtColorFilter", f:parsenoop },
	0x00A9: { n:"BrtIconFilter", f:parsenoop },
	0x00AA: { n:"BrtTop10Filter", f:parsenoop },
	0x00AB: { n:"BrtDynamicFilter", f:parsenoop },
	0x00AC: { n:"BrtBeginCustomFilters", f:parsenoop },
	0x00AD: { n:"BrtEndCustomFilters", f:parsenoop },
	0x00AE: { n:"BrtCustomFilter", f:parsenoop },
	0x00AF: { n:"BrtAFilterDateGroupItem", f:parsenoop },
	0x00B0: { n:"BrtMergeCell", f:parse_BrtMergeCell },
	0x00B1: { n:"BrtBeginMergeCells", f:parsenoop },
	0x00B2: { n:"BrtEndMergeCells", f:parsenoop },
	0x00B3: { n:"BrtBeginPivotCacheDef", f:parsenoop },
	0x00B4: { n:"BrtEndPivotCacheDef", f:parsenoop },
	0x00B5: { n:"BrtBeginPCDFields", f:parsenoop },
	0x00B6: { n:"BrtEndPCDFields", f:parsenoop },
	0x00B7: { n:"BrtBeginPCDField", f:parsenoop },
	0x00B8: { n:"BrtEndPCDField", f:parsenoop },
	0x00B9: { n:"BrtBeginPCDSource", f:parsenoop },
	0x00BA: { n:"BrtEndPCDSource", f:parsenoop },
	0x00BB: { n:"BrtBeginPCDSRange", f:parsenoop },
	0x00BC: { n:"BrtEndPCDSRange", f:parsenoop },
	0x00BD: { n:"BrtBeginPCDFAtbl", f:parsenoop },
	0x00BE: { n:"BrtEndPCDFAtbl", f:parsenoop },
	0x00BF: { n:"BrtBeginPCDIRun", f:parsenoop },
	0x00C0: { n:"BrtEndPCDIRun", f:parsenoop },
	0x00C1: { n:"BrtBeginPivotCacheRecords", f:parsenoop },
	0x00C2: { n:"BrtEndPivotCacheRecords", f:parsenoop },
	0x00C3: { n:"BrtBeginPCDHierarchies", f:parsenoop },
	0x00C4: { n:"BrtEndPCDHierarchies", f:parsenoop },
	0x00C5: { n:"BrtBeginPCDHierarchy", f:parsenoop },
	0x00C6: { n:"BrtEndPCDHierarchy", f:parsenoop },
	0x00C7: { n:"BrtBeginPCDHFieldsUsage", f:parsenoop },
	0x00C8: { n:"BrtEndPCDHFieldsUsage", f:parsenoop },
	0x00C9: { n:"BrtBeginExtConnection", f:parsenoop },
	0x00CA: { n:"BrtEndExtConnection", f:parsenoop },
	0x00CB: { n:"BrtBeginECDbProps", f:parsenoop },
	0x00CC: { n:"BrtEndECDbProps", f:parsenoop },
	0x00CD: { n:"BrtBeginECOlapProps", f:parsenoop },
	0x00CE: { n:"BrtEndECOlapProps", f:parsenoop },
	0x00CF: { n:"BrtBeginPCDSConsol", f:parsenoop },
	0x00D0: { n:"BrtEndPCDSConsol", f:parsenoop },
	0x00D1: { n:"BrtBeginPCDSCPages", f:parsenoop },
	0x00D2: { n:"BrtEndPCDSCPages", f:parsenoop },
	0x00D3: { n:"BrtBeginPCDSCPage", f:parsenoop },
	0x00D4: { n:"BrtEndPCDSCPage", f:parsenoop },
	0x00D5: { n:"BrtBeginPCDSCPItem", f:parsenoop },
	0x00D6: { n:"BrtEndPCDSCPItem", f:parsenoop },
	0x00D7: { n:"BrtBeginPCDSCSets", f:parsenoop },
	0x00D8: { n:"BrtEndPCDSCSets", f:parsenoop },
	0x00D9: { n:"BrtBeginPCDSCSet", f:parsenoop },
	0x00DA: { n:"BrtEndPCDSCSet", f:parsenoop },
	0x00DB: { n:"BrtBeginPCDFGroup", f:parsenoop },
	0x00DC: { n:"BrtEndPCDFGroup", f:parsenoop },
	0x00DD: { n:"BrtBeginPCDFGItems", f:parsenoop },
	0x00DE: { n:"BrtEndPCDFGItems", f:parsenoop },
	0x00DF: { n:"BrtBeginPCDFGRange", f:parsenoop },
	0x00E0: { n:"BrtEndPCDFGRange", f:parsenoop },
	0x00E1: { n:"BrtBeginPCDFGDiscrete", f:parsenoop },
	0x00E2: { n:"BrtEndPCDFGDiscrete", f:parsenoop },
	0x00E3: { n:"BrtBeginPCDSDTupleCache", f:parsenoop },
	0x00E4: { n:"BrtEndPCDSDTupleCache", f:parsenoop },
	0x00E5: { n:"BrtBeginPCDSDTCEntries", f:parsenoop },
	0x00E6: { n:"BrtEndPCDSDTCEntries", f:parsenoop },
	0x00E7: { n:"BrtBeginPCDSDTCEMembers", f:parsenoop },
	0x00E8: { n:"BrtEndPCDSDTCEMembers", f:parsenoop },
	0x00E9: { n:"BrtBeginPCDSDTCEMember", f:parsenoop },
	0x00EA: { n:"BrtEndPCDSDTCEMember", f:parsenoop },
	0x00EB: { n:"BrtBeginPCDSDTCQueries", f:parsenoop },
	0x00EC: { n:"BrtEndPCDSDTCQueries", f:parsenoop },
	0x00ED: { n:"BrtBeginPCDSDTCQuery", f:parsenoop },
	0x00EE: { n:"BrtEndPCDSDTCQuery", f:parsenoop },
	0x00EF: { n:"BrtBeginPCDSDTCSets", f:parsenoop },
	0x00F0: { n:"BrtEndPCDSDTCSets", f:parsenoop },
	0x00F1: { n:"BrtBeginPCDSDTCSet", f:parsenoop },
	0x00F2: { n:"BrtEndPCDSDTCSet", f:parsenoop },
	0x00F3: { n:"BrtBeginPCDCalcItems", f:parsenoop },
	0x00F4: { n:"BrtEndPCDCalcItems", f:parsenoop },
	0x00F5: { n:"BrtBeginPCDCalcItem", f:parsenoop },
	0x00F6: { n:"BrtEndPCDCalcItem", f:parsenoop },
	0x00F7: { n:"BrtBeginPRule", f:parsenoop },
	0x00F8: { n:"BrtEndPRule", f:parsenoop },
	0x00F9: { n:"BrtBeginPRFilters", f:parsenoop },
	0x00FA: { n:"BrtEndPRFilters", f:parsenoop },
	0x00FB: { n:"BrtBeginPRFilter", f:parsenoop },
	0x00FC: { n:"BrtEndPRFilter", f:parsenoop },
	0x00FD: { n:"BrtBeginPNames", f:parsenoop },
	0x00FE: { n:"BrtEndPNames", f:parsenoop },
	0x00FF: { n:"BrtBeginPName", f:parsenoop },
	0x0100: { n:"BrtEndPName", f:parsenoop },
	0x0101: { n:"BrtBeginPNPairs", f:parsenoop },
	0x0102: { n:"BrtEndPNPairs", f:parsenoop },
	0x0103: { n:"BrtBeginPNPair", f:parsenoop },
	0x0104: { n:"BrtEndPNPair", f:parsenoop },
	0x0105: { n:"BrtBeginECWebProps", f:parsenoop },
	0x0106: { n:"BrtEndECWebProps", f:parsenoop },
	0x0107: { n:"BrtBeginEcWpTables", f:parsenoop },
	0x0108: { n:"BrtEndECWPTables", f:parsenoop },
	0x0109: { n:"BrtBeginECParams", f:parsenoop },
	0x010A: { n:"BrtEndECParams", f:parsenoop },
	0x010B: { n:"BrtBeginECParam", f:parsenoop },
	0x010C: { n:"BrtEndECParam", f:parsenoop },
	0x010D: { n:"BrtBeginPCDKPIs", f:parsenoop },
	0x010E: { n:"BrtEndPCDKPIs", f:parsenoop },
	0x010F: { n:"BrtBeginPCDKPI", f:parsenoop },
	0x0110: { n:"BrtEndPCDKPI", f:parsenoop },
	0x0111: { n:"BrtBeginDims", f:parsenoop },
	0x0112: { n:"BrtEndDims", f:parsenoop },
	0x0113: { n:"BrtBeginDim", f:parsenoop },
	0x0114: { n:"BrtEndDim", f:parsenoop },
	0x0115: { n:"BrtIndexPartEnd", f:parsenoop },
	0x0116: { n:"BrtBeginStyleSheet", f:parsenoop },
	0x0117: { n:"BrtEndStyleSheet", f:parsenoop },
	0x0118: { n:"BrtBeginSXView", f:parsenoop },
	0x0119: { n:"BrtEndSXVI", f:parsenoop },
	0x011A: { n:"BrtBeginSXVI", f:parsenoop },
	0x011B: { n:"BrtBeginSXVIs", f:parsenoop },
	0x011C: { n:"BrtEndSXVIs", f:parsenoop },
	0x011D: { n:"BrtBeginSXVD", f:parsenoop },
	0x011E: { n:"BrtEndSXVD", f:parsenoop },
	0x011F: { n:"BrtBeginSXVDs", f:parsenoop },
	0x0120: { n:"BrtEndSXVDs", f:parsenoop },
	0x0121: { n:"BrtBeginSXPI", f:parsenoop },
	0x0122: { n:"BrtEndSXPI", f:parsenoop },
	0x0123: { n:"BrtBeginSXPIs", f:parsenoop },
	0x0124: { n:"BrtEndSXPIs", f:parsenoop },
	0x0125: { n:"BrtBeginSXDI", f:parsenoop },
	0x0126: { n:"BrtEndSXDI", f:parsenoop },
	0x0127: { n:"BrtBeginSXDIs", f:parsenoop },
	0x0128: { n:"BrtEndSXDIs", f:parsenoop },
	0x0129: { n:"BrtBeginSXLI", f:parsenoop },
	0x012A: { n:"BrtEndSXLI", f:parsenoop },
	0x012B: { n:"BrtBeginSXLIRws", f:parsenoop },
	0x012C: { n:"BrtEndSXLIRws", f:parsenoop },
	0x012D: { n:"BrtBeginSXLICols", f:parsenoop },
	0x012E: { n:"BrtEndSXLICols", f:parsenoop },
	0x012F: { n:"BrtBeginSXFormat", f:parsenoop },
	0x0130: { n:"BrtEndSXFormat", f:parsenoop },
	0x0131: { n:"BrtBeginSXFormats", f:parsenoop },
	0x0132: { n:"BrtEndSxFormats", f:parsenoop },
	0x0133: { n:"BrtBeginSxSelect", f:parsenoop },
	0x0134: { n:"BrtEndSxSelect", f:parsenoop },
	0x0135: { n:"BrtBeginISXVDRws", f:parsenoop },
	0x0136: { n:"BrtEndISXVDRws", f:parsenoop },
	0x0137: { n:"BrtBeginISXVDCols", f:parsenoop },
	0x0138: { n:"BrtEndISXVDCols", f:parsenoop },
	0x0139: { n:"BrtEndSXLocation", f:parsenoop },
	0x013A: { n:"BrtBeginSXLocation", f:parsenoop },
	0x013B: { n:"BrtEndSXView", f:parsenoop },
	0x013C: { n:"BrtBeginSXTHs", f:parsenoop },
	0x013D: { n:"BrtEndSXTHs", f:parsenoop },
	0x013E: { n:"BrtBeginSXTH", f:parsenoop },
	0x013F: { n:"BrtEndSXTH", f:parsenoop },
	0x0140: { n:"BrtBeginISXTHRws", f:parsenoop },
	0x0141: { n:"BrtEndISXTHRws", f:parsenoop },
	0x0142: { n:"BrtBeginISXTHCols", f:parsenoop },
	0x0143: { n:"BrtEndISXTHCols", f:parsenoop },
	0x0144: { n:"BrtBeginSXTDMPS", f:parsenoop },
	0x0145: { n:"BrtEndSXTDMPs", f:parsenoop },
	0x0146: { n:"BrtBeginSXTDMP", f:parsenoop },
	0x0147: { n:"BrtEndSXTDMP", f:parsenoop },
	0x0148: { n:"BrtBeginSXTHItems", f:parsenoop },
	0x0149: { n:"BrtEndSXTHItems", f:parsenoop },
	0x014A: { n:"BrtBeginSXTHItem", f:parsenoop },
	0x014B: { n:"BrtEndSXTHItem", f:parsenoop },
	0x014C: { n:"BrtBeginMetadata", f:parsenoop },
	0x014D: { n:"BrtEndMetadata", f:parsenoop },
	0x014E: { n:"BrtBeginEsmdtinfo", f:parsenoop },
	0x014F: { n:"BrtMdtinfo", f:parsenoop },
	0x0150: { n:"BrtEndEsmdtinfo", f:parsenoop },
	0x0151: { n:"BrtBeginEsmdb", f:parsenoop },
	0x0152: { n:"BrtEndEsmdb", f:parsenoop },
	0x0153: { n:"BrtBeginEsfmd", f:parsenoop },
	0x0154: { n:"BrtEndEsfmd", f:parsenoop },
	0x0155: { n:"BrtBeginSingleCells", f:parsenoop },
	0x0156: { n:"BrtEndSingleCells", f:parsenoop },
	0x0157: { n:"BrtBeginList", f:parsenoop },
	0x0158: { n:"BrtEndList", f:parsenoop },
	0x0159: { n:"BrtBeginListCols", f:parsenoop },
	0x015A: { n:"BrtEndListCols", f:parsenoop },
	0x015B: { n:"BrtBeginListCol", f:parsenoop },
	0x015C: { n:"BrtEndListCol", f:parsenoop },
	0x015D: { n:"BrtBeginListXmlCPr", f:parsenoop },
	0x015E: { n:"BrtEndListXmlCPr", f:parsenoop },
	0x015F: { n:"BrtListCCFmla", f:parsenoop },
	0x0160: { n:"BrtListTrFmla", f:parsenoop },
	0x0161: { n:"BrtBeginExternals", f:parsenoop },
	0x0162: { n:"BrtEndExternals", f:parsenoop },
	0x0163: { n:"BrtSupBookSrc", f:parsenoop },
	0x0165: { n:"BrtSupSelf", f:parsenoop },
	0x0166: { n:"BrtSupSame", f:parsenoop },
	0x0167: { n:"BrtSupTabs", f:parsenoop },
	0x0168: { n:"BrtBeginSupBook", f:parsenoop },
	0x0169: { n:"BrtPlaceholderName", f:parsenoop },
	0x016A: { n:"BrtExternSheet", f:parsenoop },
	0x016B: { n:"BrtExternTableStart", f:parsenoop },
	0x016C: { n:"BrtExternTableEnd", f:parsenoop },
	0x016E: { n:"BrtExternRowHdr", f:parsenoop },
	0x016F: { n:"BrtExternCellBlank", f:parsenoop },
	0x0170: { n:"BrtExternCellReal", f:parsenoop },
	0x0171: { n:"BrtExternCellBool", f:parsenoop },
	0x0172: { n:"BrtExternCellError", f:parsenoop },
	0x0173: { n:"BrtExternCellString", f:parsenoop },
	0x0174: { n:"BrtBeginEsmdx", f:parsenoop },
	0x0175: { n:"BrtEndEsmdx", f:parsenoop },
	0x0176: { n:"BrtBeginMdxSet", f:parsenoop },
	0x0177: { n:"BrtEndMdxSet", f:parsenoop },
	0x0178: { n:"BrtBeginMdxMbrProp", f:parsenoop },
	0x0179: { n:"BrtEndMdxMbrProp", f:parsenoop },
	0x017A: { n:"BrtBeginMdxKPI", f:parsenoop },
	0x017B: { n:"BrtEndMdxKPI", f:parsenoop },
	0x017C: { n:"BrtBeginEsstr", f:parsenoop },
	0x017D: { n:"BrtEndEsstr", f:parsenoop },
	0x017E: { n:"BrtBeginPRFItem", f:parsenoop },
	0x017F: { n:"BrtEndPRFItem", f:parsenoop },
	0x0180: { n:"BrtBeginPivotCacheIDs", f:parsenoop },
	0x0181: { n:"BrtEndPivotCacheIDs", f:parsenoop },
	0x0182: { n:"BrtBeginPivotCacheID", f:parsenoop },
	0x0183: { n:"BrtEndPivotCacheID", f:parsenoop },
	0x0184: { n:"BrtBeginISXVIs", f:parsenoop },
	0x0185: { n:"BrtEndISXVIs", f:parsenoop },
	0x0186: { n:"BrtBeginColInfos", f:parsenoop },
	0x0187: { n:"BrtEndColInfos", f:parsenoop },
	0x0188: { n:"BrtBeginRwBrk", f:parsenoop },
	0x0189: { n:"BrtEndRwBrk", f:parsenoop },
	0x018A: { n:"BrtBeginColBrk", f:parsenoop },
	0x018B: { n:"BrtEndColBrk", f:parsenoop },
	0x018C: { n:"BrtBrk", f:parsenoop },
	0x018D: { n:"BrtUserBookView", f:parsenoop },
	0x018E: { n:"BrtInfo", f:parsenoop },
	0x018F: { n:"BrtCUsr", f:parsenoop },
	0x0190: { n:"BrtUsr", f:parsenoop },
	0x0191: { n:"BrtBeginUsers", f:parsenoop },
	0x0193: { n:"BrtEOF", f:parsenoop },
	0x0194: { n:"BrtUCR", f:parsenoop },
	0x0195: { n:"BrtRRInsDel", f:parsenoop },
	0x0196: { n:"BrtRREndInsDel", f:parsenoop },
	0x0197: { n:"BrtRRMove", f:parsenoop },
	0x0198: { n:"BrtRREndMove", f:parsenoop },
	0x0199: { n:"BrtRRChgCell", f:parsenoop },
	0x019A: { n:"BrtRREndChgCell", f:parsenoop },
	0x019B: { n:"BrtRRHeader", f:parsenoop },
	0x019C: { n:"BrtRRUserView", f:parsenoop },
	0x019D: { n:"BrtRRRenSheet", f:parsenoop },
	0x019E: { n:"BrtRRInsertSh", f:parsenoop },
	0x019F: { n:"BrtRRDefName", f:parsenoop },
	0x01A0: { n:"BrtRRNote", f:parsenoop },
	0x01A1: { n:"BrtRRConflict", f:parsenoop },
	0x01A2: { n:"BrtRRTQSIF", f:parsenoop },
	0x01A3: { n:"BrtRRFormat", f:parsenoop },
	0x01A4: { n:"BrtRREndFormat", f:parsenoop },
	0x01A5: { n:"BrtRRAutoFmt", f:parsenoop },
	0x01A6: { n:"BrtBeginUserShViews", f:parsenoop },
	0x01A7: { n:"BrtBeginUserShView", f:parsenoop },
	0x01A8: { n:"BrtEndUserShView", f:parsenoop },
	0x01A9: { n:"BrtEndUserShViews", f:parsenoop },
	0x01AA: { n:"BrtArrFmla", f:parse_BrtArrFmla },
	0x01AB: { n:"BrtShrFmla", f:parse_BrtShrFmla },
	0x01AC: { n:"BrtTable", f:parsenoop },
	0x01AD: { n:"BrtBeginExtConnections", f:parsenoop },
	0x01AE: { n:"BrtEndExtConnections", f:parsenoop },
	0x01AF: { n:"BrtBeginPCDCalcMems", f:parsenoop },
	0x01B0: { n:"BrtEndPCDCalcMems", f:parsenoop },
	0x01B1: { n:"BrtBeginPCDCalcMem", f:parsenoop },
	0x01B2: { n:"BrtEndPCDCalcMem", f:parsenoop },
	0x01B3: { n:"BrtBeginPCDHGLevels", f:parsenoop },
	0x01B4: { n:"BrtEndPCDHGLevels", f:parsenoop },
	0x01B5: { n:"BrtBeginPCDHGLevel", f:parsenoop },
	0x01B6: { n:"BrtEndPCDHGLevel", f:parsenoop },
	0x01B7: { n:"BrtBeginPCDHGLGroups", f:parsenoop },
	0x01B8: { n:"BrtEndPCDHGLGroups", f:parsenoop },
	0x01B9: { n:"BrtBeginPCDHGLGroup", f:parsenoop },
	0x01BA: { n:"BrtEndPCDHGLGroup", f:parsenoop },
	0x01BB: { n:"BrtBeginPCDHGLGMembers", f:parsenoop },
	0x01BC: { n:"BrtEndPCDHGLGMembers", f:parsenoop },
	0x01BD: { n:"BrtBeginPCDHGLGMember", f:parsenoop },
	0x01BE: { n:"BrtEndPCDHGLGMember", f:parsenoop },
	0x01BF: { n:"BrtBeginQSI", f:parsenoop },
	0x01C0: { n:"BrtEndQSI", f:parsenoop },
	0x01C1: { n:"BrtBeginQSIR", f:parsenoop },
	0x01C2: { n:"BrtEndQSIR", f:parsenoop },
	0x01C3: { n:"BrtBeginDeletedNames", f:parsenoop },
	0x01C4: { n:"BrtEndDeletedNames", f:parsenoop },
	0x01C5: { n:"BrtBeginDeletedName", f:parsenoop },
	0x01C6: { n:"BrtEndDeletedName", f:parsenoop },
	0x01C7: { n:"BrtBeginQSIFs", f:parsenoop },
	0x01C8: { n:"BrtEndQSIFs", f:parsenoop },
	0x01C9: { n:"BrtBeginQSIF", f:parsenoop },
	0x01CA: { n:"BrtEndQSIF", f:parsenoop },
	0x01CB: { n:"BrtBeginAutoSortScope", f:parsenoop },
	0x01CC: { n:"BrtEndAutoSortScope", f:parsenoop },
	0x01CD: { n:"BrtBeginConditionalFormatting", f:parsenoop },
	0x01CE: { n:"BrtEndConditionalFormatting", f:parsenoop },
	0x01CF: { n:"BrtBeginCFRule", f:parsenoop },
	0x01D0: { n:"BrtEndCFRule", f:parsenoop },
	0x01D1: { n:"BrtBeginIconSet", f:parsenoop },
	0x01D2: { n:"BrtEndIconSet", f:parsenoop },
	0x01D3: { n:"BrtBeginDatabar", f:parsenoop },
	0x01D4: { n:"BrtEndDatabar", f:parsenoop },
	0x01D5: { n:"BrtBeginColorScale", f:parsenoop },
	0x01D6: { n:"BrtEndColorScale", f:parsenoop },
	0x01D7: { n:"BrtCFVO", f:parsenoop },
	0x01D8: { n:"BrtExternValueMeta", f:parsenoop },
	0x01D9: { n:"BrtBeginColorPalette", f:parsenoop },
	0x01DA: { n:"BrtEndColorPalette", f:parsenoop },
	0x01DB: { n:"BrtIndexedColor", f:parsenoop },
	0x01DC: { n:"BrtMargins", f:parse_BrtMargins },
	0x01DD: { n:"BrtPrintOptions", f:parsenoop },
	0x01DE: { n:"BrtPageSetup", f:parsenoop },
	0x01DF: { n:"BrtBeginHeaderFooter", f:parsenoop },
	0x01E0: { n:"BrtEndHeaderFooter", f:parsenoop },
	0x01E1: { n:"BrtBeginSXCrtFormat", f:parsenoop },
	0x01E2: { n:"BrtEndSXCrtFormat", f:parsenoop },
	0x01E3: { n:"BrtBeginSXCrtFormats", f:parsenoop },
	0x01E4: { n:"BrtEndSXCrtFormats", f:parsenoop },
	0x01E5: { n:"BrtWsFmtInfo", f:parsenoop },
	0x01E6: { n:"BrtBeginMgs", f:parsenoop },
	0x01E7: { n:"BrtEndMGs", f:parsenoop },
	0x01E8: { n:"BrtBeginMGMaps", f:parsenoop },
	0x01E9: { n:"BrtEndMGMaps", f:parsenoop },
	0x01EA: { n:"BrtBeginMG", f:parsenoop },
	0x01EB: { n:"BrtEndMG", f:parsenoop },
	0x01EC: { n:"BrtBeginMap", f:parsenoop },
	0x01ED: { n:"BrtEndMap", f:parsenoop },
	0x01EE: { n:"BrtHLink", f:parse_BrtHLink },
	0x01EF: { n:"BrtBeginDCon", f:parsenoop },
	0x01F0: { n:"BrtEndDCon", f:parsenoop },
	0x01F1: { n:"BrtBeginDRefs", f:parsenoop },
	0x01F2: { n:"BrtEndDRefs", f:parsenoop },
	0x01F3: { n:"BrtDRef", f:parsenoop },
	0x01F4: { n:"BrtBeginScenMan", f:parsenoop },
	0x01F5: { n:"BrtEndScenMan", f:parsenoop },
	0x01F6: { n:"BrtBeginSct", f:parsenoop },
	0x01F7: { n:"BrtEndSct", f:parsenoop },
	0x01F8: { n:"BrtSlc", f:parsenoop },
	0x01F9: { n:"BrtBeginDXFs", f:parsenoop },
	0x01FA: { n:"BrtEndDXFs", f:parsenoop },
	0x01FB: { n:"BrtDXF", f:parsenoop },
	0x01FC: { n:"BrtBeginTableStyles", f:parsenoop },
	0x01FD: { n:"BrtEndTableStyles", f:parsenoop },
	0x01FE: { n:"BrtBeginTableStyle", f:parsenoop },
	0x01FF: { n:"BrtEndTableStyle", f:parsenoop },
	0x0200: { n:"BrtTableStyleElement", f:parsenoop },
	0x0201: { n:"BrtTableStyleClient", f:parsenoop },
	0x0202: { n:"BrtBeginVolDeps", f:parsenoop },
	0x0203: { n:"BrtEndVolDeps", f:parsenoop },
	0x0204: { n:"BrtBeginVolType", f:parsenoop },
	0x0205: { n:"BrtEndVolType", f:parsenoop },
	0x0206: { n:"BrtBeginVolMain", f:parsenoop },
	0x0207: { n:"BrtEndVolMain", f:parsenoop },
	0x0208: { n:"BrtBeginVolTopic", f:parsenoop },
	0x0209: { n:"BrtEndVolTopic", f:parsenoop },
	0x020A: { n:"BrtVolSubtopic", f:parsenoop },
	0x020B: { n:"BrtVolRef", f:parsenoop },
	0x020C: { n:"BrtVolNum", f:parsenoop },
	0x020D: { n:"BrtVolErr", f:parsenoop },
	0x020E: { n:"BrtVolStr", f:parsenoop },
	0x020F: { n:"BrtVolBool", f:parsenoop },
	0x0210: { n:"BrtBeginCalcChain$", f:parsenoop },
	0x0211: { n:"BrtEndCalcChain$", f:parsenoop },
	0x0212: { n:"BrtBeginSortState", f:parsenoop },
	0x0213: { n:"BrtEndSortState", f:parsenoop },
	0x0214: { n:"BrtBeginSortCond", f:parsenoop },
	0x0215: { n:"BrtEndSortCond", f:parsenoop },
	0x0216: { n:"BrtBookProtection", f:parsenoop },
	0x0217: { n:"BrtSheetProtection", f:parsenoop },
	0x0218: { n:"BrtRangeProtection", f:parsenoop },
	0x0219: { n:"BrtPhoneticInfo", f:parsenoop },
	0x021A: { n:"BrtBeginECTxtWiz", f:parsenoop },
	0x021B: { n:"BrtEndECTxtWiz", f:parsenoop },
	0x021C: { n:"BrtBeginECTWFldInfoLst", f:parsenoop },
	0x021D: { n:"BrtEndECTWFldInfoLst", f:parsenoop },
	0x021E: { n:"BrtBeginECTwFldInfo", f:parsenoop },
	0x0224: { n:"BrtFileSharing", f:parsenoop },
	0x0225: { n:"BrtOleSize", f:parsenoop },
	0x0226: { n:"BrtDrawing", f:parse_RelID },
	0x0227: { n:"BrtLegacyDrawing", f:parsenoop },
	0x0228: { n:"BrtLegacyDrawingHF", f:parsenoop },
	0x0229: { n:"BrtWebOpt", f:parsenoop },
	0x022A: { n:"BrtBeginWebPubItems", f:parsenoop },
	0x022B: { n:"BrtEndWebPubItems", f:parsenoop },
	0x022C: { n:"BrtBeginWebPubItem", f:parsenoop },
	0x022D: { n:"BrtEndWebPubItem", f:parsenoop },
	0x022E: { n:"BrtBeginSXCondFmt", f:parsenoop },
	0x022F: { n:"BrtEndSXCondFmt", f:parsenoop },
	0x0230: { n:"BrtBeginSXCondFmts", f:parsenoop },
	0x0231: { n:"BrtEndSXCondFmts", f:parsenoop },
	0x0232: { n:"BrtBkHim", f:parsenoop },
	0x0234: { n:"BrtColor", f:parsenoop },
	0x0235: { n:"BrtBeginIndexedColors", f:parsenoop },
	0x0236: { n:"BrtEndIndexedColors", f:parsenoop },
	0x0239: { n:"BrtBeginMRUColors", f:parsenoop },
	0x023A: { n:"BrtEndMRUColors", f:parsenoop },
	0x023C: { n:"BrtMRUColor", f:parsenoop },
	0x023D: { n:"BrtBeginDVals", f:parsenoop },
	0x023E: { n:"BrtEndDVals", f:parsenoop },
	0x0241: { n:"BrtSupNameStart", f:parsenoop },
	0x0242: { n:"BrtSupNameValueStart", f:parsenoop },
	0x0243: { n:"BrtSupNameValueEnd", f:parsenoop },
	0x0244: { n:"BrtSupNameNum", f:parsenoop },
	0x0245: { n:"BrtSupNameErr", f:parsenoop },
	0x0246: { n:"BrtSupNameSt", f:parsenoop },
	0x0247: { n:"BrtSupNameNil", f:parsenoop },
	0x0248: { n:"BrtSupNameBool", f:parsenoop },
	0x0249: { n:"BrtSupNameFmla", f:parsenoop },
	0x024A: { n:"BrtSupNameBits", f:parsenoop },
	0x024B: { n:"BrtSupNameEnd", f:parsenoop },
	0x024C: { n:"BrtEndSupBook", f:parsenoop },
	0x024D: { n:"BrtCellSmartTagProperty", f:parsenoop },
	0x024E: { n:"BrtBeginCellSmartTag", f:parsenoop },
	0x024F: { n:"BrtEndCellSmartTag", f:parsenoop },
	0x0250: { n:"BrtBeginCellSmartTags", f:parsenoop },
	0x0251: { n:"BrtEndCellSmartTags", f:parsenoop },
	0x0252: { n:"BrtBeginSmartTags", f:parsenoop },
	0x0253: { n:"BrtEndSmartTags", f:parsenoop },
	0x0254: { n:"BrtSmartTagType", f:parsenoop },
	0x0255: { n:"BrtBeginSmartTagTypes", f:parsenoop },
	0x0256: { n:"BrtEndSmartTagTypes", f:parsenoop },
	0x0257: { n:"BrtBeginSXFilters", f:parsenoop },
	0x0258: { n:"BrtEndSXFilters", f:parsenoop },
	0x0259: { n:"BrtBeginSXFILTER", f:parsenoop },
	0x025A: { n:"BrtEndSXFilter", f:parsenoop },
	0x025B: { n:"BrtBeginFills", f:parsenoop },
	0x025C: { n:"BrtEndFills", f:parsenoop },
	0x025D: { n:"BrtBeginCellWatches", f:parsenoop },
	0x025E: { n:"BrtEndCellWatches", f:parsenoop },
	0x025F: { n:"BrtCellWatch", f:parsenoop },
	0x0260: { n:"BrtBeginCRErrs", f:parsenoop },
	0x0261: { n:"BrtEndCRErrs", f:parsenoop },
	0x0262: { n:"BrtCrashRecErr", f:parsenoop },
	0x0263: { n:"BrtBeginFonts", f:parsenoop },
	0x0264: { n:"BrtEndFonts", f:parsenoop },
	0x0265: { n:"BrtBeginBorders", f:parsenoop },
	0x0266: { n:"BrtEndBorders", f:parsenoop },
	0x0267: { n:"BrtBeginFmts", f:parsenoop },
	0x0268: { n:"BrtEndFmts", f:parsenoop },
	0x0269: { n:"BrtBeginCellXFs", f:parsenoop },
	0x026A: { n:"BrtEndCellXFs", f:parsenoop },
	0x026B: { n:"BrtBeginStyles", f:parsenoop },
	0x026C: { n:"BrtEndStyles", f:parsenoop },
	0x0271: { n:"BrtBigName", f:parsenoop },
	0x0272: { n:"BrtBeginCellStyleXFs", f:parsenoop },
	0x0273: { n:"BrtEndCellStyleXFs", f:parsenoop },
	0x0274: { n:"BrtBeginComments", f:parsenoop },
	0x0275: { n:"BrtEndComments", f:parsenoop },
	0x0276: { n:"BrtBeginCommentAuthors", f:parsenoop },
	0x0277: { n:"BrtEndCommentAuthors", f:parsenoop },
	0x0278: { n:"BrtCommentAuthor", f:parse_BrtCommentAuthor },
	0x0279: { n:"BrtBeginCommentList", f:parsenoop },
	0x027A: { n:"BrtEndCommentList", f:parsenoop },
	0x027B: { n:"BrtBeginComment", f:parse_BrtBeginComment},
	0x027C: { n:"BrtEndComment", f:parsenoop },
	0x027D: { n:"BrtCommentText", f:parse_BrtCommentText },
	0x027E: { n:"BrtBeginOleObjects", f:parsenoop },
	0x027F: { n:"BrtOleObject", f:parsenoop },
	0x0280: { n:"BrtEndOleObjects", f:parsenoop },
	0x0281: { n:"BrtBeginSxrules", f:parsenoop },
	0x0282: { n:"BrtEndSxRules", f:parsenoop },
	0x0283: { n:"BrtBeginActiveXControls", f:parsenoop },
	0x0284: { n:"BrtActiveX", f:parsenoop },
	0x0285: { n:"BrtEndActiveXControls", f:parsenoop },
	0x0286: { n:"BrtBeginPCDSDTCEMembersSortBy", f:parsenoop },
	0x0288: { n:"BrtBeginCellIgnoreECs", f:parsenoop },
	0x0289: { n:"BrtCellIgnoreEC", f:parsenoop },
	0x028A: { n:"BrtEndCellIgnoreECs", f:parsenoop },
	0x028B: { n:"BrtCsProp", f:parsenoop },
	0x028C: { n:"BrtCsPageSetup", f:parsenoop },
	0x028D: { n:"BrtBeginUserCsViews", f:parsenoop },
	0x028E: { n:"BrtEndUserCsViews", f:parsenoop },
	0x028F: { n:"BrtBeginUserCsView", f:parsenoop },
	0x0290: { n:"BrtEndUserCsView", f:parsenoop },
	0x0291: { n:"BrtBeginPcdSFCIEntries", f:parsenoop },
	0x0292: { n:"BrtEndPCDSFCIEntries", f:parsenoop },
	0x0293: { n:"BrtPCDSFCIEntry", f:parsenoop },
	0x0294: { n:"BrtBeginListParts", f:parsenoop },
	0x0295: { n:"BrtListPart", f:parsenoop },
	0x0296: { n:"BrtEndListParts", f:parsenoop },
	0x0297: { n:"BrtSheetCalcProp", f:parsenoop },
	0x0298: { n:"BrtBeginFnGroup", f:parsenoop },
	0x0299: { n:"BrtFnGroup", f:parsenoop },
	0x029A: { n:"BrtEndFnGroup", f:parsenoop },
	0x029B: { n:"BrtSupAddin", f:parsenoop },
	0x029C: { n:"BrtSXTDMPOrder", f:parsenoop },
	0x029D: { n:"BrtCsProtection", f:parsenoop },
	0x029F: { n:"BrtBeginWsSortMap", f:parsenoop },
	0x02A0: { n:"BrtEndWsSortMap", f:parsenoop },
	0x02A1: { n:"BrtBeginRRSort", f:parsenoop },
	0x02A2: { n:"BrtEndRRSort", f:parsenoop },
	0x02A3: { n:"BrtRRSortItem", f:parsenoop },
	0x02A4: { n:"BrtFileSharingIso", f:parsenoop },
	0x02A5: { n:"BrtBookProtectionIso", f:parsenoop },
	0x02A6: { n:"BrtSheetProtectionIso", f:parsenoop },
	0x02A7: { n:"BrtCsProtectionIso", f:parsenoop },
	0x02A8: { n:"BrtRangeProtectionIso", f:parsenoop },
	0x0400: { n:"BrtRwDescent", f:parsenoop },
	0x0401: { n:"BrtKnownFonts", f:parsenoop },
	0x0402: { n:"BrtBeginSXTupleSet", f:parsenoop },
	0x0403: { n:"BrtEndSXTupleSet", f:parsenoop },
	0x0404: { n:"BrtBeginSXTupleSetHeader", f:parsenoop },
	0x0405: { n:"BrtEndSXTupleSetHeader", f:parsenoop },
	0x0406: { n:"BrtSXTupleSetHeaderItem", f:parsenoop },
	0x0407: { n:"BrtBeginSXTupleSetData", f:parsenoop },
	0x0408: { n:"BrtEndSXTupleSetData", f:parsenoop },
	0x0409: { n:"BrtBeginSXTupleSetRow", f:parsenoop },
	0x040A: { n:"BrtEndSXTupleSetRow", f:parsenoop },
	0x040B: { n:"BrtSXTupleSetRowItem", f:parsenoop },
	0x040C: { n:"BrtNameExt", f:parsenoop },
	0x040D: { n:"BrtPCDH14", f:parsenoop },
	0x040E: { n:"BrtBeginPCDCalcMem14", f:parsenoop },
	0x040F: { n:"BrtEndPCDCalcMem14", f:parsenoop },
	0x0410: { n:"BrtSXTH14", f:parsenoop },
	0x0411: { n:"BrtBeginSparklineGroup", f:parsenoop },
	0x0412: { n:"BrtEndSparklineGroup", f:parsenoop },
	0x0413: { n:"BrtSparkline", f:parsenoop },
	0x0414: { n:"BrtSXDI14", f:parsenoop },
	0x0415: { n:"BrtWsFmtInfoEx14", f:parsenoop },
	0x0416: { n:"BrtBeginConditionalFormatting14", f:parsenoop },
	0x0417: { n:"BrtEndConditionalFormatting14", f:parsenoop },
	0x0418: { n:"BrtBeginCFRule14", f:parsenoop },
	0x0419: { n:"BrtEndCFRule14", f:parsenoop },
	0x041A: { n:"BrtCFVO14", f:parsenoop },
	0x041B: { n:"BrtBeginDatabar14", f:parsenoop },
	0x041C: { n:"BrtBeginIconSet14", f:parsenoop },
	0x041D: { n:"BrtDVal14", f:parsenoop },
	0x041E: { n:"BrtBeginDVals14", f:parsenoop },
	0x041F: { n:"BrtColor14", f:parsenoop },
	0x0420: { n:"BrtBeginSparklines", f:parsenoop },
	0x0421: { n:"BrtEndSparklines", f:parsenoop },
	0x0422: { n:"BrtBeginSparklineGroups", f:parsenoop },
	0x0423: { n:"BrtEndSparklineGroups", f:parsenoop },
	0x0425: { n:"BrtSXVD14", f:parsenoop },
	0x0426: { n:"BrtBeginSxview14", f:parsenoop },
	0x0427: { n:"BrtEndSxview14", f:parsenoop },
	0x042A: { n:"BrtBeginPCD14", f:parsenoop },
	0x042B: { n:"BrtEndPCD14", f:parsenoop },
	0x042C: { n:"BrtBeginExtConn14", f:parsenoop },
	0x042D: { n:"BrtEndExtConn14", f:parsenoop },
	0x042E: { n:"BrtBeginSlicerCacheIDs", f:parsenoop },
	0x042F: { n:"BrtEndSlicerCacheIDs", f:parsenoop },
	0x0430: { n:"BrtBeginSlicerCacheID", f:parsenoop },
	0x0431: { n:"BrtEndSlicerCacheID", f:parsenoop },
	0x0433: { n:"BrtBeginSlicerCache", f:parsenoop },
	0x0434: { n:"BrtEndSlicerCache", f:parsenoop },
	0x0435: { n:"BrtBeginSlicerCacheDef", f:parsenoop },
	0x0436: { n:"BrtEndSlicerCacheDef", f:parsenoop },
	0x0437: { n:"BrtBeginSlicersEx", f:parsenoop },
	0x0438: { n:"BrtEndSlicersEx", f:parsenoop },
	0x0439: { n:"BrtBeginSlicerEx", f:parsenoop },
	0x043A: { n:"BrtEndSlicerEx", f:parsenoop },
	0x043B: { n:"BrtBeginSlicer", f:parsenoop },
	0x043C: { n:"BrtEndSlicer", f:parsenoop },
	0x043D: { n:"BrtSlicerCachePivotTables", f:parsenoop },
	0x043E: { n:"BrtBeginSlicerCacheOlapImpl", f:parsenoop },
	0x043F: { n:"BrtEndSlicerCacheOlapImpl", f:parsenoop },
	0x0440: { n:"BrtBeginSlicerCacheLevelsData", f:parsenoop },
	0x0441: { n:"BrtEndSlicerCacheLevelsData", f:parsenoop },
	0x0442: { n:"BrtBeginSlicerCacheLevelData", f:parsenoop },
	0x0443: { n:"BrtEndSlicerCacheLevelData", f:parsenoop },
	0x0444: { n:"BrtBeginSlicerCacheSiRanges", f:parsenoop },
	0x0445: { n:"BrtEndSlicerCacheSiRanges", f:parsenoop },
	0x0446: { n:"BrtBeginSlicerCacheSiRange", f:parsenoop },
	0x0447: { n:"BrtEndSlicerCacheSiRange", f:parsenoop },
	0x0448: { n:"BrtSlicerCacheOlapItem", f:parsenoop },
	0x0449: { n:"BrtBeginSlicerCacheSelections", f:parsenoop },
	0x044A: { n:"BrtSlicerCacheSelection", f:parsenoop },
	0x044B: { n:"BrtEndSlicerCacheSelections", f:parsenoop },
	0x044C: { n:"BrtBeginSlicerCacheNative", f:parsenoop },
	0x044D: { n:"BrtEndSlicerCacheNative", f:parsenoop },
	0x044E: { n:"BrtSlicerCacheNativeItem", f:parsenoop },
	0x044F: { n:"BrtRangeProtection14", f:parsenoop },
	0x0450: { n:"BrtRangeProtectionIso14", f:parsenoop },
	0x0451: { n:"BrtCellIgnoreEC14", f:parsenoop },
	0x0457: { n:"BrtList14", f:parsenoop },
	0x0458: { n:"BrtCFIcon", f:parsenoop },
	0x0459: { n:"BrtBeginSlicerCachesPivotCacheIDs", f:parsenoop },
	0x045A: { n:"BrtEndSlicerCachesPivotCacheIDs", f:parsenoop },
	0x045B: { n:"BrtBeginSlicers", f:parsenoop },
	0x045C: { n:"BrtEndSlicers", f:parsenoop },
	0x045D: { n:"BrtWbProp14", f:parsenoop },
	0x045E: { n:"BrtBeginSXEdit", f:parsenoop },
	0x045F: { n:"BrtEndSXEdit", f:parsenoop },
	0x0460: { n:"BrtBeginSXEdits", f:parsenoop },
	0x0461: { n:"BrtEndSXEdits", f:parsenoop },
	0x0462: { n:"BrtBeginSXChange", f:parsenoop },
	0x0463: { n:"BrtEndSXChange", f:parsenoop },
	0x0464: { n:"BrtBeginSXChanges", f:parsenoop },
	0x0465: { n:"BrtEndSXChanges", f:parsenoop },
	0x0466: { n:"BrtSXTupleItems", f:parsenoop },
	0x0468: { n:"BrtBeginSlicerStyle", f:parsenoop },
	0x0469: { n:"BrtEndSlicerStyle", f:parsenoop },
	0x046A: { n:"BrtSlicerStyleElement", f:parsenoop },
	0x046B: { n:"BrtBeginStyleSheetExt14", f:parsenoop },
	0x046C: { n:"BrtEndStyleSheetExt14", f:parsenoop },
	0x046D: { n:"BrtBeginSlicerCachesPivotCacheID", f:parsenoop },
	0x046E: { n:"BrtEndSlicerCachesPivotCacheID", f:parsenoop },
	0x046F: { n:"BrtBeginConditionalFormattings", f:parsenoop },
	0x0470: { n:"BrtEndConditionalFormattings", f:parsenoop },
	0x0471: { n:"BrtBeginPCDCalcMemExt", f:parsenoop },
	0x0472: { n:"BrtEndPCDCalcMemExt", f:parsenoop },
	0x0473: { n:"BrtBeginPCDCalcMemsExt", f:parsenoop },
	0x0474: { n:"BrtEndPCDCalcMemsExt", f:parsenoop },
	0x0475: { n:"BrtPCDField14", f:parsenoop },
	0x0476: { n:"BrtBeginSlicerStyles", f:parsenoop },
	0x0477: { n:"BrtEndSlicerStyles", f:parsenoop },
	0x0478: { n:"BrtBeginSlicerStyleElements", f:parsenoop },
	0x0479: { n:"BrtEndSlicerStyleElements", f:parsenoop },
	0x047A: { n:"BrtCFRuleExt", f:parsenoop },
	0x047B: { n:"BrtBeginSXCondFmt14", f:parsenoop },
	0x047C: { n:"BrtEndSXCondFmt14", f:parsenoop },
	0x047D: { n:"BrtBeginSXCondFmts14", f:parsenoop },
	0x047E: { n:"BrtEndSXCondFmts14", f:parsenoop },
	0x0480: { n:"BrtBeginSortCond14", f:parsenoop },
	0x0481: { n:"BrtEndSortCond14", f:parsenoop },
	0x0482: { n:"BrtEndDVals14", f:parsenoop },
	0x0483: { n:"BrtEndIconSet14", f:parsenoop },
	0x0484: { n:"BrtEndDatabar14", f:parsenoop },
	0x0485: { n:"BrtBeginColorScale14", f:parsenoop },
	0x0486: { n:"BrtEndColorScale14", f:parsenoop },
	0x0487: { n:"BrtBeginSxrules14", f:parsenoop },
	0x0488: { n:"BrtEndSxrules14", f:parsenoop },
	0x0489: { n:"BrtBeginPRule14", f:parsenoop },
	0x048A: { n:"BrtEndPRule14", f:parsenoop },
	0x048B: { n:"BrtBeginPRFilters14", f:parsenoop },
	0x048C: { n:"BrtEndPRFilters14", f:parsenoop },
	0x048D: { n:"BrtBeginPRFilter14", f:parsenoop },
	0x048E: { n:"BrtEndPRFilter14", f:parsenoop },
	0x048F: { n:"BrtBeginPRFItem14", f:parsenoop },
	0x0490: { n:"BrtEndPRFItem14", f:parsenoop },
	0x0491: { n:"BrtBeginCellIgnoreECs14", f:parsenoop },
	0x0492: { n:"BrtEndCellIgnoreECs14", f:parsenoop },
	0x0493: { n:"BrtDxf14", f:parsenoop },
	0x0494: { n:"BrtBeginDxF14s", f:parsenoop },
	0x0495: { n:"BrtEndDxf14s", f:parsenoop },
	0x0499: { n:"BrtFilter14", f:parsenoop },
	0x049A: { n:"BrtBeginCustomFilters14", f:parsenoop },
	0x049C: { n:"BrtCustomFilter14", f:parsenoop },
	0x049D: { n:"BrtIconFilter14", f:parsenoop },
	0x049E: { n:"BrtPivotCacheConnectionName", f:parsenoop },
	0x0800: { n:"BrtBeginDecoupledPivotCacheIDs", f:parsenoop },
	0x0801: { n:"BrtEndDecoupledPivotCacheIDs", f:parsenoop },
	0x0802: { n:"BrtDecoupledPivotCacheID", f:parsenoop },
	0x0803: { n:"BrtBeginPivotTableRefs", f:parsenoop },
	0x0804: { n:"BrtEndPivotTableRefs", f:parsenoop },
	0x0805: { n:"BrtPivotTableRef", f:parsenoop },
	0x0806: { n:"BrtSlicerCacheBookPivotTables", f:parsenoop },
	0x0807: { n:"BrtBeginSxvcells", f:parsenoop },
	0x0808: { n:"BrtEndSxvcells", f:parsenoop },
	0x0809: { n:"BrtBeginSxRow", f:parsenoop },
	0x080A: { n:"BrtEndSxRow", f:parsenoop },
	0x080C: { n:"BrtPcdCalcMem15", f:parsenoop },
	0x0813: { n:"BrtQsi15", f:parsenoop },
	0x0814: { n:"BrtBeginWebExtensions", f:parsenoop },
	0x0815: { n:"BrtEndWebExtensions", f:parsenoop },
	0x0816: { n:"BrtWebExtension", f:parsenoop },
	0x0817: { n:"BrtAbsPath15", f:parsenoop },
	0x0818: { n:"BrtBeginPivotTableUISettings", f:parsenoop },
	0x0819: { n:"BrtEndPivotTableUISettings", f:parsenoop },
	0x081B: { n:"BrtTableSlicerCacheIDs", f:parsenoop },
	0x081C: { n:"BrtTableSlicerCacheID", f:parsenoop },
	0x081D: { n:"BrtBeginTableSlicerCache", f:parsenoop },
	0x081E: { n:"BrtEndTableSlicerCache", f:parsenoop },
	0x081F: { n:"BrtSxFilter15", f:parsenoop },
	0x0820: { n:"BrtBeginTimelineCachePivotCacheIDs", f:parsenoop },
	0x0821: { n:"BrtEndTimelineCachePivotCacheIDs", f:parsenoop },
	0x0822: { n:"BrtTimelineCachePivotCacheID", f:parsenoop },
	0x0823: { n:"BrtBeginTimelineCacheIDs", f:parsenoop },
	0x0824: { n:"BrtEndTimelineCacheIDs", f:parsenoop },
	0x0825: { n:"BrtBeginTimelineCacheID", f:parsenoop },
	0x0826: { n:"BrtEndTimelineCacheID", f:parsenoop },
	0x0827: { n:"BrtBeginTimelinesEx", f:parsenoop },
	0x0828: { n:"BrtEndTimelinesEx", f:parsenoop },
	0x0829: { n:"BrtBeginTimelineEx", f:parsenoop },
	0x082A: { n:"BrtEndTimelineEx", f:parsenoop },
	0x082B: { n:"BrtWorkBookPr15", f:parsenoop },
	0x082C: { n:"BrtPCDH15", f:parsenoop },
	0x082D: { n:"BrtBeginTimelineStyle", f:parsenoop },
	0x082E: { n:"BrtEndTimelineStyle", f:parsenoop },
	0x082F: { n:"BrtTimelineStyleElement", f:parsenoop },
	0x0830: { n:"BrtBeginTimelineStylesheetExt15", f:parsenoop },
	0x0831: { n:"BrtEndTimelineStylesheetExt15", f:parsenoop },
	0x0832: { n:"BrtBeginTimelineStyles", f:parsenoop },
	0x0833: { n:"BrtEndTimelineStyles", f:parsenoop },
	0x0834: { n:"BrtBeginTimelineStyleElements", f:parsenoop },
	0x0835: { n:"BrtEndTimelineStyleElements", f:parsenoop },
	0x0836: { n:"BrtDxf15", f:parsenoop },
	0x0837: { n:"BrtBeginDxfs15", f:parsenoop },
	0x0838: { n:"brtEndDxfs15", f:parsenoop },
	0x0839: { n:"BrtSlicerCacheHideItemsWithNoData", f:parsenoop },
	0x083A: { n:"BrtBeginItemUniqueNames", f:parsenoop },
	0x083B: { n:"BrtEndItemUniqueNames", f:parsenoop },
	0x083C: { n:"BrtItemUniqueName", f:parsenoop },
	0x083D: { n:"BrtBeginExtConn15", f:parsenoop },
	0x083E: { n:"BrtEndExtConn15", f:parsenoop },
	0x083F: { n:"BrtBeginOledbPr15", f:parsenoop },
	0x0840: { n:"BrtEndOledbPr15", f:parsenoop },
	0x0841: { n:"BrtBeginDataFeedPr15", f:parsenoop },
	0x0842: { n:"BrtEndDataFeedPr15", f:parsenoop },
	0x0843: { n:"BrtTextPr15", f:parsenoop },
	0x0844: { n:"BrtRangePr15", f:parsenoop },
	0x0845: { n:"BrtDbCommand15", f:parsenoop },
	0x0846: { n:"BrtBeginDbTables15", f:parsenoop },
	0x0847: { n:"BrtEndDbTables15", f:parsenoop },
	0x0848: { n:"BrtDbTable15", f:parsenoop },
	0x0849: { n:"BrtBeginDataModel", f:parsenoop },
	0x084A: { n:"BrtEndDataModel", f:parsenoop },
	0x084B: { n:"BrtBeginModelTables", f:parsenoop },
	0x084C: { n:"BrtEndModelTables", f:parsenoop },
	0x084D: { n:"BrtModelTable", f:parsenoop },
	0x084E: { n:"BrtBeginModelRelationships", f:parsenoop },
	0x084F: { n:"BrtEndModelRelationships", f:parsenoop },
	0x0850: { n:"BrtModelRelationship", f:parsenoop },
	0x0851: { n:"BrtBeginECTxtWiz15", f:parsenoop },
	0x0852: { n:"BrtEndECTxtWiz15", f:parsenoop },
	0x0853: { n:"BrtBeginECTWFldInfoLst15", f:parsenoop },
	0x0854: { n:"BrtEndECTWFldInfoLst15", f:parsenoop },
	0x0855: { n:"BrtBeginECTWFldInfo15", f:parsenoop },
	0x0856: { n:"BrtFieldListActiveItem", f:parsenoop },
	0x0857: { n:"BrtPivotCacheIdVersion", f:parsenoop },
	0x0858: { n:"BrtSXDI15", f:parsenoop },
	0xFFFF: { n:"", f:parsenoop }
	};

	var evert_RE = evert_key(XLSBRecordEnum, 'n');

	/* [MS-XLS] 2.3 Record Enumeration */
	var XLSRecordEnum = {
	0x0003: { n:"BIFF2NUM", f:parse_BIFF2NUM },
	0x0004: { n:"BIFF2STR", f:parse_BIFF2STR },
	0x0006: { n:"Formula", f:parse_Formula },
	0x0009: { n:'BOF', f:parse_BOF },
	0x000a: { n:'EOF', f:parse_EOF },
	0x000c: { n:"CalcCount", f:parse_CalcCount },
	0x000d: { n:"CalcMode", f:parse_CalcMode },
	0x000e: { n:"CalcPrecision", f:parse_CalcPrecision },
	0x000f: { n:"CalcRefMode", f:parse_CalcRefMode },
	0x0010: { n:"CalcDelta", f:parse_CalcDelta },
	0x0011: { n:"CalcIter", f:parse_CalcIter },
	0x0012: { n:"Protect", f:parse_Protect },
	0x0013: { n:"Password", f:parse_Password },
	0x0014: { n:"Header", f:parse_Header },
	0x0015: { n:"Footer", f:parse_Footer },
	0x0017: { n:"ExternSheet", f:parse_ExternSheet },
	0x0018: { n:"Lbl", f:parse_Lbl },
	0x0019: { n:"WinProtect", f:parse_WinProtect },
	0x001a: { n:"VerticalPageBreaks", f:parse_VerticalPageBreaks },
	0x001b: { n:"HorizontalPageBreaks", f:parse_HorizontalPageBreaks },
	0x001c: { n:"Note", f:parse_Note },
	0x001d: { n:"Selection", f:parse_Selection },
	0x0022: { n:"Date1904", f:parse_Date1904 },
	0x0023: { n:"ExternName", f:parse_ExternName },
	0x0026: { n:"LeftMargin", f:parse_LeftMargin },
	0x0027: { n:"RightMargin", f:parse_RightMargin },
	0x0028: { n:"TopMargin", f:parse_TopMargin },
	0x0029: { n:"BottomMargin", f:parse_BottomMargin },
	0x002a: { n:"PrintRowCol", f:parse_PrintRowCol },
	0x002b: { n:"PrintGrid", f:parse_PrintGrid },
	0x002f: { n:"FilePass", f:parse_FilePass },
	0x0031: { n:"Font", f:parse_Font },
	0x0033: { n:"PrintSize", f:parse_PrintSize },
	0x003c: { n:"Continue", f:parse_Continue },
	0x003d: { n:"Window1", f:parse_Window1 },
	0x0040: { n:"Backup", f:parse_Backup },
	0x0041: { n:"Pane", f:parse_Pane },
	0x0042: { n:'CodePage', f:parse_CodePage },
	0x004d: { n:"Pls", f:parse_Pls },
	0x0050: { n:"DCon", f:parse_DCon },
	0x0051: { n:"DConRef", f:parse_DConRef },
	0x0052: { n:"DConName", f:parse_DConName },
	0x0055: { n:"DefColWidth", f:parse_DefColWidth },
	0x0059: { n:"XCT", f:parse_XCT },
	0x005a: { n:"CRN", f:parse_CRN },
	0x005b: { n:"FileSharing", f:parse_FileSharing },
	0x005c: { n:'WriteAccess', f:parse_WriteAccess },
	0x005d: { n:"Obj", f:parse_Obj },
	0x005e: { n:"Uncalced", f:parse_Uncalced },
	0x005f: { n:"CalcSaveRecalc", f:parse_CalcSaveRecalc },
	0x0060: { n:"Template", f:parse_Template },
	0x0061: { n:"Intl", f:parse_Intl },
	0x0063: { n:"ObjProtect", f:parse_ObjProtect },
	0x007d: { n:"ColInfo", f:parse_ColInfo },
	0x0080: { n:"Guts", f:parse_Guts },
	0x0081: { n:"WsBool", f:parse_WsBool },
	0x0082: { n:"GridSet", f:parse_GridSet },
	0x0083: { n:"HCenter", f:parse_HCenter },
	0x0084: { n:"VCenter", f:parse_VCenter },
	0x0085: { n:'BoundSheet8', f:parse_BoundSheet8 },
	0x0086: { n:"WriteProtect", f:parse_WriteProtect },
	0x008c: { n:"Country", f:parse_Country },
	0x008d: { n:"HideObj", f:parse_HideObj },
	0x0090: { n:"Sort", f:parse_Sort },
	0x0092: { n:"Palette", f:parse_Palette },
	0x0097: { n:"Sync", f:parse_Sync },
	0x0098: { n:"LPr", f:parse_LPr },
	0x0099: { n:"DxGCol", f:parse_DxGCol },
	0x009a: { n:"FnGroupName", f:parse_FnGroupName },
	0x009b: { n:"FilterMode", f:parse_FilterMode },
	0x009c: { n:"BuiltInFnGroupCount", f:parse_BuiltInFnGroupCount },
	0x009d: { n:"AutoFilterInfo", f:parse_AutoFilterInfo },
	0x009e: { n:"AutoFilter", f:parse_AutoFilter },
	0x00a0: { n:"Scl", f:parse_Scl },
	0x00a1: { n:"Setup", f:parse_Setup },
	0x00ae: { n:"ScenMan", f:parse_ScenMan },
	0x00af: { n:"SCENARIO", f:parse_SCENARIO },
	0x00b0: { n:"SxView", f:parse_SxView },
	0x00b1: { n:"Sxvd", f:parse_Sxvd },
	0x00b2: { n:"SXVI", f:parse_SXVI },
	0x00b4: { n:"SxIvd", f:parse_SxIvd },
	0x00b5: { n:"SXLI", f:parse_SXLI },
	0x00b6: { n:"SXPI", f:parse_SXPI },
	0x00b8: { n:"DocRoute", f:parse_DocRoute },
	0x00b9: { n:"RecipName", f:parse_RecipName },
	0x00bd: { n:"MulRk", f:parse_MulRk },
	0x00be: { n:"MulBlank", f:parse_MulBlank },
	0x00c1: { n:'Mms', f:parse_Mms },
	0x00c5: { n:"SXDI", f:parse_SXDI },
	0x00c6: { n:"SXDB", f:parse_SXDB },
	0x00c7: { n:"SXFDB", f:parse_SXFDB },
	0x00c8: { n:"SXDBB", f:parse_SXDBB },
	0x00c9: { n:"SXNum", f:parse_SXNum },
	0x00ca: { n:"SxBool", f:parse_SxBool },
	0x00cb: { n:"SxErr", f:parse_SxErr },
	0x00cc: { n:"SXInt", f:parse_SXInt },
	0x00cd: { n:"SXString", f:parse_SXString },
	0x00ce: { n:"SXDtr", f:parse_SXDtr },
	0x00cf: { n:"SxNil", f:parse_SxNil },
	0x00d0: { n:"SXTbl", f:parse_SXTbl },
	0x00d1: { n:"SXTBRGIITM", f:parse_SXTBRGIITM },
	0x00d2: { n:"SxTbpg", f:parse_SxTbpg },
	0x00d3: { n:"ObProj", f:parse_ObProj },
	0x00d5: { n:"SXStreamID", f:parse_SXStreamID },
	0x00d7: { n:"DBCell", f:parse_DBCell },
	0x00d8: { n:"SXRng", f:parse_SXRng },
	0x00d9: { n:"SxIsxoper", f:parse_SxIsxoper },
	0x00da: { n:"BookBool", f:parse_BookBool },
	0x00dc: { n:"DbOrParamQry", f:parse_DbOrParamQry },
	0x00dd: { n:"ScenarioProtect", f:parse_ScenarioProtect },
	0x00de: { n:"OleObjectSize", f:parse_OleObjectSize },
	0x00e0: { n:"XF", f:parse_XF },
	0x00e1: { n:'InterfaceHdr', f:parse_InterfaceHdr },
	0x00e2: { n:'InterfaceEnd', f:parse_InterfaceEnd },
	0x00e3: { n:"SXVS", f:parse_SXVS },
	0x00e5: { n:"MergeCells", f:parse_MergeCells },
	0x00e9: { n:"BkHim", f:parse_BkHim },
	0x00eb: { n:"MsoDrawingGroup", f:parse_MsoDrawingGroup },
	0x00ec: { n:"MsoDrawing", f:parse_MsoDrawing },
	0x00ed: { n:"MsoDrawingSelection", f:parse_MsoDrawingSelection },
	0x00ef: { n:"PhoneticInfo", f:parse_PhoneticInfo },
	0x00f0: { n:"SxRule", f:parse_SxRule },
	0x00f1: { n:"SXEx", f:parse_SXEx },
	0x00f2: { n:"SxFilt", f:parse_SxFilt },
	0x00f4: { n:"SxDXF", f:parse_SxDXF },
	0x00f5: { n:"SxItm", f:parse_SxItm },
	0x00f6: { n:"SxName", f:parse_SxName },
	0x00f7: { n:"SxSelect", f:parse_SxSelect },
	0x00f8: { n:"SXPair", f:parse_SXPair },
	0x00f9: { n:"SxFmla", f:parse_SxFmla },
	0x00fb: { n:"SxFormat", f:parse_SxFormat },
	0x00fc: { n:"SST", f:parse_SST },
	0x00fd: { n:"LabelSst", f:parse_LabelSst },
	0x00ff: { n:"ExtSST", f:parse_ExtSST },
	0x0100: { n:"SXVDEx", f:parse_SXVDEx },
	0x0103: { n:"SXFormula", f:parse_SXFormula },
	0x0122: { n:"SXDBEx", f:parse_SXDBEx },
	0x0137: { n:"RRDInsDel", f:parse_RRDInsDel },
	0x0138: { n:"RRDHead", f:parse_RRDHead },
	0x013b: { n:"RRDChgCell", f:parse_RRDChgCell },
	0x013d: { n:"RRTabId", f:parse_RRTabId },
	0x013e: { n:"RRDRenSheet", f:parse_RRDRenSheet },
	0x013f: { n:"RRSort", f:parse_RRSort },
	0x0140: { n:"RRDMove", f:parse_RRDMove },
	0x014a: { n:"RRFormat", f:parse_RRFormat },
	0x014b: { n:"RRAutoFmt", f:parse_RRAutoFmt },
	0x014d: { n:"RRInsertSh", f:parse_RRInsertSh },
	0x014e: { n:"RRDMoveBegin", f:parse_RRDMoveBegin },
	0x014f: { n:"RRDMoveEnd", f:parse_RRDMoveEnd },
	0x0150: { n:"RRDInsDelBegin", f:parse_RRDInsDelBegin },
	0x0151: { n:"RRDInsDelEnd", f:parse_RRDInsDelEnd },
	0x0152: { n:"RRDConflict", f:parse_RRDConflict },
	0x0153: { n:"RRDDefName", f:parse_RRDDefName },
	0x0154: { n:"RRDRstEtxp", f:parse_RRDRstEtxp },
	0x015f: { n:"LRng", f:parse_LRng },
	0x0160: { n:"UsesELFs", f:parse_UsesELFs },
	0x0161: { n:"DSF", f:parse_DSF },
	0x0191: { n:"CUsr", f:parse_CUsr },
	0x0192: { n:"CbUsr", f:parse_CbUsr },
	0x0193: { n:"UsrInfo", f:parse_UsrInfo },
	0x0194: { n:"UsrExcl", f:parse_UsrExcl },
	0x0195: { n:"FileLock", f:parse_FileLock },
	0x0196: { n:"RRDInfo", f:parse_RRDInfo },
	0x0197: { n:"BCUsrs", f:parse_BCUsrs },
	0x0198: { n:"UsrChk", f:parse_UsrChk },
	0x01a9: { n:"UserBView", f:parse_UserBView },
	0x01aa: { n:"UserSViewBegin", f:parse_UserSViewBegin },
	0x01ab: { n:"UserSViewEnd", f:parse_UserSViewEnd },
	0x01ac: { n:"RRDUserView", f:parse_RRDUserView },
	0x01ad: { n:"Qsi", f:parse_Qsi },
	0x01ae: { n:"SupBook", f:parse_SupBook },
	0x01af: { n:"Prot4Rev", f:parse_Prot4Rev },
	0x01b0: { n:"CondFmt", f:parse_CondFmt },
	0x01b1: { n:"CF", f:parse_CF },
	0x01b2: { n:"DVal", f:parse_DVal },
	0x01b5: { n:"DConBin", f:parse_DConBin },
	0x01b6: { n:"TxO", f:parse_TxO },
	0x01b7: { n:"RefreshAll", f:parse_RefreshAll },
	0x01b8: { n:"HLink", f:parse_HLink },
	0x01b9: { n:"Lel", f:parse_Lel },
	0x01ba: { n:"CodeName", f:parse_XLSCodeName },
	0x01bb: { n:"SXFDBType", f:parse_SXFDBType },
	0x01bc: { n:"Prot4RevPass", f:parse_Prot4RevPass },
	0x01bd: { n:"ObNoMacros", f:parse_ObNoMacros },
	0x01be: { n:"Dv", f:parse_Dv },
	0x01c0: { n:"Excel9File", f:parse_Excel9File },
	0x01c1: { n:"RecalcId", f:parse_RecalcId, r:2},
	0x01c2: { n:"EntExU2", f:parse_EntExU2 },
	0x0200: { n:"Dimensions", f:parse_Dimensions },
	0x0201: { n:"Blank", f:parse_Blank },
	0x0203: { n:"Number", f:parse_Number },
	0x0204: { n:"Label", f:parse_Label },
	0x0205: { n:"BoolErr", f:parse_BoolErr },
	0x0206: { n:"Formula", f:parse_Formula },
	0x0207: { n:"String", f:parse_String },
	0x0208: { n:'Row', f:parse_Row },
	0x020b: { n:"Index", f:parse_Index },
	0x0221: { n:"Array", f:parse_Array },
	0x0225: { n:"DefaultRowHeight", f:parse_DefaultRowHeight },
	0x0236: { n:"Table", f:parse_Table },
	0x023e: { n:"Window2", f:parse_Window2 },
	0x027e: { n:"RK", f:parse_RK },
	0x0293: { n:"Style", f:parse_Style },
	0x0406: { n:"Formula", f:parse_Formula },
	0x0418: { n:"BigName", f:parse_BigName },
	0x041e: { n:"Format", f:parse_Format },
	0x043c: { n:"ContinueBigName", f:parse_ContinueBigName },
	0x04bc: { n:"ShrFmla", f:parse_ShrFmla },
	0x0800: { n:"HLinkTooltip", f:parse_HLinkTooltip },
	0x0801: { n:"WebPub", f:parse_WebPub },
	0x0802: { n:"QsiSXTag", f:parse_QsiSXTag },
	0x0803: { n:"DBQueryExt", f:parse_DBQueryExt },
	0x0804: { n:"ExtString", f:parse_ExtString },
	0x0805: { n:"TxtQry", f:parse_TxtQry },
	0x0806: { n:"Qsir", f:parse_Qsir },
	0x0807: { n:"Qsif", f:parse_Qsif },
	0x0808: { n:"RRDTQSIF", f:parse_RRDTQSIF },
	0x0809: { n:'BOF', f:parse_BOF },
	0x080a: { n:"OleDbConn", f:parse_OleDbConn },
	0x080b: { n:"WOpt", f:parse_WOpt },
	0x080c: { n:"SXViewEx", f:parse_SXViewEx },
	0x080d: { n:"SXTH", f:parse_SXTH },
	0x080e: { n:"SXPIEx", f:parse_SXPIEx },
	0x080f: { n:"SXVDTEx", f:parse_SXVDTEx },
	0x0810: { n:"SXViewEx9", f:parse_SXViewEx9 },
	0x0812: { n:"ContinueFrt", f:parse_ContinueFrt },
	0x0813: { n:"RealTimeData", f:parse_RealTimeData },
	0x0850: { n:"ChartFrtInfo", f:parse_ChartFrtInfo },
	0x0851: { n:"FrtWrapper", f:parse_FrtWrapper },
	0x0852: { n:"StartBlock", f:parse_StartBlock },
	0x0853: { n:"EndBlock", f:parse_EndBlock },
	0x0854: { n:"StartObject", f:parse_StartObject },
	0x0855: { n:"EndObject", f:parse_EndObject },
	0x0856: { n:"CatLab", f:parse_CatLab },
	0x0857: { n:"YMult", f:parse_YMult },
	0x0858: { n:"SXViewLink", f:parse_SXViewLink },
	0x0859: { n:"PivotChartBits", f:parse_PivotChartBits },
	0x085a: { n:"FrtFontList", f:parse_FrtFontList },
	0x0862: { n:"SheetExt", f:parse_SheetExt },
	0x0863: { n:"BookExt", f:parse_BookExt, r:12},
	0x0864: { n:"SXAddl", f:parse_SXAddl },
	0x0865: { n:"CrErr", f:parse_CrErr },
	0x0866: { n:"HFPicture", f:parse_HFPicture },
	0x0867: { n:'FeatHdr', f:parse_FeatHdr },
	0x0868: { n:"Feat", f:parse_Feat },
	0x086a: { n:"DataLabExt", f:parse_DataLabExt },
	0x086b: { n:"DataLabExtContents", f:parse_DataLabExtContents },
	0x086c: { n:"CellWatch", f:parse_CellWatch },
	0x0871: { n:"FeatHdr11", f:parse_FeatHdr11 },
	0x0872: { n:"Feature11", f:parse_Feature11 },
	0x0874: { n:"DropDownObjIds", f:parse_DropDownObjIds },
	0x0875: { n:"ContinueFrt11", f:parse_ContinueFrt11 },
	0x0876: { n:"DConn", f:parse_DConn },
	0x0877: { n:"List12", f:parse_List12 },
	0x0878: { n:"Feature12", f:parse_Feature12 },
	0x0879: { n:"CondFmt12", f:parse_CondFmt12 },
	0x087a: { n:"CF12", f:parse_CF12 },
	0x087b: { n:"CFEx", f:parse_CFEx },
	0x087c: { n:"XFCRC", f:parse_XFCRC, r:12 },
	0x087d: { n:"XFExt", f:parse_XFExt, r:12 },
	0x087e: { n:"AutoFilter12", f:parse_AutoFilter12 },
	0x087f: { n:"ContinueFrt12", f:parse_ContinueFrt12 },
	0x0884: { n:"MDTInfo", f:parse_MDTInfo },
	0x0885: { n:"MDXStr", f:parse_MDXStr },
	0x0886: { n:"MDXTuple", f:parse_MDXTuple },
	0x0887: { n:"MDXSet", f:parse_MDXSet },
	0x0888: { n:"MDXProp", f:parse_MDXProp },
	0x0889: { n:"MDXKPI", f:parse_MDXKPI },
	0x088a: { n:"MDB", f:parse_MDB },
	0x088b: { n:"PLV", f:parse_PLV },
	0x088c: { n:"Compat12", f:parse_Compat12, r:12 },
	0x088d: { n:"DXF", f:parse_DXF },
	0x088e: { n:"TableStyles", f:parse_TableStyles, r:12 },
	0x088f: { n:"TableStyle", f:parse_TableStyle },
	0x0890: { n:"TableStyleElement", f:parse_TableStyleElement },
	0x0892: { n:"StyleExt", f:parse_StyleExt },
	0x0893: { n:"NamePublish", f:parse_NamePublish },
	0x0894: { n:"NameCmt", f:parse_NameCmt, r:12 },
	0x0895: { n:"SortData", f:parse_SortData },
	0x0896: { n:"Theme", f:parse_Theme, r:12 },
	0x0897: { n:"GUIDTypeLib", f:parse_GUIDTypeLib },
	0x0898: { n:"FnGrp12", f:parse_FnGrp12 },
	0x0899: { n:"NameFnGrp12", f:parse_NameFnGrp12 },
	0x089a: { n:"MTRSettings", f:parse_MTRSettings, r:12 },
	0x089b: { n:"CompressPictures", f:parse_CompressPictures },
	0x089c: { n:"HeaderFooter", f:parse_HeaderFooter },
	0x089d: { n:"CrtLayout12", f:parse_CrtLayout12 },
	0x089e: { n:"CrtMlFrt", f:parse_CrtMlFrt },
	0x089f: { n:"CrtMlFrtContinue", f:parse_CrtMlFrtContinue },
	0x08a3: { n:"ForceFullCalculation", f:parse_ForceFullCalculation },
	0x08a4: { n:"ShapePropsStream", f:parse_ShapePropsStream },
	0x08a5: { n:"TextPropsStream", f:parse_TextPropsStream },
	0x08a6: { n:"RichTextStream", f:parse_RichTextStream },
	0x08a7: { n:"CrtLayout12A", f:parse_CrtLayout12A },
	0x1001: { n:"Units", f:parse_Units },
	0x1002: { n:"Chart", f:parse_Chart },
	0x1003: { n:"Series", f:parse_Series },
	0x1006: { n:"DataFormat", f:parse_DataFormat },
	0x1007: { n:"LineFormat", f:parse_LineFormat },
	0x1009: { n:"MarkerFormat", f:parse_MarkerFormat },
	0x100a: { n:"AreaFormat", f:parse_AreaFormat },
	0x100b: { n:"PieFormat", f:parse_PieFormat },
	0x100c: { n:"AttachedLabel", f:parse_AttachedLabel },
	0x100d: { n:"SeriesText", f:parse_SeriesText },
	0x1014: { n:"ChartFormat", f:parse_ChartFormat },
	0x1015: { n:"Legend", f:parse_Legend },
	0x1016: { n:"SeriesList", f:parse_SeriesList },
	0x1017: { n:"Bar", f:parse_Bar },
	0x1018: { n:"Line", f:parse_Line },
	0x1019: { n:"Pie", f:parse_Pie },
	0x101a: { n:"Area", f:parse_Area },
	0x101b: { n:"Scatter", f:parse_Scatter },
	0x101c: { n:"CrtLine", f:parse_CrtLine },
	0x101d: { n:"Axis", f:parse_Axis },
	0x101e: { n:"Tick", f:parse_Tick },
	0x101f: { n:"ValueRange", f:parse_ValueRange },
	0x1020: { n:"CatSerRange", f:parse_CatSerRange },
	0x1021: { n:"AxisLine", f:parse_AxisLine },
	0x1022: { n:"CrtLink", f:parse_CrtLink },
	0x1024: { n:"DefaultText", f:parse_DefaultText },
	0x1025: { n:"Text", f:parse_Text },
	0x1026: { n:"FontX", f:parse_FontX },
	0x1027: { n:"ObjectLink", f:parse_ObjectLink },
	0x1032: { n:"Frame", f:parse_Frame },
	0x1033: { n:"Begin", f:parse_Begin },
	0x1034: { n:"End", f:parse_End },
	0x1035: { n:"PlotArea", f:parse_PlotArea },
	0x103a: { n:"Chart3d", f:parse_Chart3d },
	0x103c: { n:"PicF", f:parse_PicF },
	0x103d: { n:"DropBar", f:parse_DropBar },
	0x103e: { n:"Radar", f:parse_Radar },
	0x103f: { n:"Surf", f:parse_Surf },
	0x1040: { n:"RadarArea", f:parse_RadarArea },
	0x1041: { n:"AxisParent", f:parse_AxisParent },
	0x1043: { n:"LegendException", f:parse_LegendException },
	0x1044: { n:"ShtProps", f:parse_ShtProps },
	0x1045: { n:"SerToCrt", f:parse_SerToCrt },
	0x1046: { n:"AxesUsed", f:parse_AxesUsed },
	0x1048: { n:"SBaseRef", f:parse_SBaseRef },
	0x104a: { n:"SerParent", f:parse_SerParent },
	0x104b: { n:"SerAuxTrend", f:parse_SerAuxTrend },
	0x104e: { n:"IFmtRecord", f:parse_IFmtRecord },
	0x104f: { n:"Pos", f:parse_Pos },
	0x1050: { n:"AlRuns", f:parse_AlRuns },
	0x1051: { n:"BRAI", f:parse_BRAI },
	0x105b: { n:"SerAuxErrBar", f:parse_SerAuxErrBar },
	0x105c: { n:"ClrtClient", f:parse_ClrtClient },
	0x105d: { n:"SerFmt", f:parse_SerFmt },
	0x105f: { n:"Chart3DBarShape", f:parse_Chart3DBarShape },
	0x1060: { n:"Fbi", f:parse_Fbi },
	0x1061: { n:"BopPop", f:parse_BopPop },
	0x1062: { n:"AxcExt", f:parse_AxcExt },
	0x1063: { n:"Dat", f:parse_Dat },
	0x1064: { n:"PlotGrowth", f:parse_PlotGrowth },
	0x1065: { n:"SIIndex", f:parse_SIIndex },
	0x1066: { n:"GelFrame", f:parse_GelFrame },
	0x1067: { n:"BopPopCustom", f:parse_BopPopCustom },
	0x1068: { n:"Fbi2", f:parse_Fbi2 },

		/* These are specified in an older version of the spec */
	0x0000: { n:"Dimensions", f:parse_Dimensions },
	0x0002: { n:"BIFF2INT", f:parse_BIFF2INT },
	0x0005: { n:"BoolErr", f:parse_BoolErr },
	0x0007: { n:"String", f:parse_BIFF2STRING },
	0x0008: { n:"BIFF2ROW", f:parsenoop },
	0x000b: { n:"Index", f:parse_Index },
	0x0016: { n:"ExternCount", f:parsenoop },
	0x001e: { n:"BIFF2FORMAT", f:parse_BIFF2Format },
	0x001f: { n:"BIFF2FMTCNT", f:parsenoop }, /* 16-bit cnt of BIFF2FORMAT records */
	0x0020: { n:"BIFF2COLINFO", f:parsenoop },
	0x0021: { n:"Array", f:parse_Array },
	0x0025: { n:"DefaultRowHeight", f:parse_DefaultRowHeight },
	0x0032: { n:"BIFF2FONTXTRA", f:parse_BIFF2FONTXTRA },
	0x003e: { n:"BIFF2WINDOW2", f:parsenoop },
	0x0045: { n:"BIFF2FONTCLR", f:parsenoop },
	0x0056: { n:"BIFF4FMTCNT", f:parsenoop }, /* 16-bit cnt, similar to BIFF2 */
	0x007e: { n:"RK", f:parsenoop }, /* Not necessarily same as 0x027e */
	0x007f: { n:"ImData", f:parse_ImData },
	0x0087: { n:"Addin", f:parsenoop },
	0x0088: { n:"Edg", f:parsenoop },
	0x0089: { n:"Pub", f:parsenoop },
	0x0091: { n:"Sub", f:parsenoop },
	0x0094: { n:"LHRecord", f:parsenoop },
	0x0095: { n:"LHNGraph", f:parsenoop },
	0x0096: { n:"Sound", f:parsenoop },
	0x00a9: { n:"CoordList", f:parsenoop },
	0x00ab: { n:"GCW", f:parsenoop },
	0x00bc: { n:"ShrFmla", f:parsenoop }, /* Not necessarily same as 0x04bc */
	0x00c2: { n:"AddMenu", f:parsenoop },
	0x00c3: { n:"DelMenu", f:parsenoop },
	0x00d6: { n:"RString", f:parse_RString },
	0x00df: { n:"UDDesc", f:parsenoop },
	0x00ea: { n:"TabIdConf", f:parsenoop },
	0x0162: { n:"XL5Modify", f:parsenoop },
	0x01a5: { n:"FileSharing2", f:parsenoop },
	0x0209: { n:'BOF', f:parse_BOF },
	0x0218: { n:"Lbl", f:parse_Lbl },
	0x0223: { n:"ExternName", f:parse_ExternName },
	0x0231: { n:"Font", f:parsenoop },
	0x0409: { n:'BOF', f:parse_BOF },
	0x086d: { n:"FeatInfo", f:parsenoop },
	0x0873: { n:"FeatInfo11", f:parsenoop },
	0x0881: { n:"SXAddl12", f:parsenoop },
	0x08c0: { n:"AutoWebPub", f:parsenoop },
	0x08c1: { n:"ListObj", f:parsenoop },
	0x08c2: { n:"ListField", f:parsenoop },
	0x08c3: { n:"ListDV", f:parsenoop },
	0x08c4: { n:"ListCondFmt", f:parsenoop },
	0x08c5: { n:"ListCF", f:parsenoop },
	0x08c6: { n:"FMQry", f:parsenoop },
	0x08c7: { n:"FMSQry", f:parsenoop },
	0x08c8: { n:"PLV", f:parsenoop },
	0x08c9: { n:"LnExt", f:parsenoop },
	0x08ca: { n:"MkrExt", f:parsenoop },
	0x08cb: { n:"CrtCoopt", f:parsenoop },

	0x0043: { n:"BIFF2XF", f:parsenoop },
	0x0243: { n:"BIFF3XF", f:parsenoop },
	0x0443: { n:"BIFF4XF", f:parsenoop },

	0x7262: {}
	};


	/* BIFF2-4 single-sheet workbooks */
	function write_biff_rec(ba, t, payload, length) {
		var len = (length || (payload||[]).length);
		var o = ba.next(4 + len);
		o.write_shift(2, t);
		o.write_shift(2, len);
		if(len > 0 && is_buf(payload)) ba.push(payload);
	}

	function write_BOF(wb, o) {
		if(o.bookType != 'biff2') throw "unsupported BIFF version";
		var out = new_buf(4);
		out.write_shift(2, 0x0002); // "unused"
		out.write_shift(2, 0x0010); // Sheet
		return out;
	}

	function write_BIFF2Cell(out, r, c) {
		if(!out) out = new_buf(7);
		out.write_shift(2, r);
		out.write_shift(2, c);
		out.write_shift(1, 0);
		out.write_shift(1, 0);
		out.write_shift(1, 0);
		return out;
	}

	function write_BIFF2INT(r, c, val) {
		var out = new_buf(9);
		write_BIFF2Cell(out, r, c);
		out.write_shift(2, val);
		return out;
	}

	function write_BIFF2NUMBER(r, c, val) {
		var out = new_buf(15);
		write_BIFF2Cell(out, r, c);
		out.write_shift(8, val, 'f');
		return out;
	}

	function write_BIFF2BERR(r, c, val, t) {
		var out = new_buf(9);
		write_BIFF2Cell(out, r, c);
		if(t == 'e') { out.write_shift(1, val); out.write_shift(1, 1); }
		else { out.write_shift(1, val?1:0); out.write_shift(1, 0); }
		return out;
	}

	/* TODO: codepage, large strings */
	function write_BIFF2LABEL(r, c, val) {
		var out = new_buf(8 + 2*val.length);
		write_BIFF2Cell(out, r, c);
		out.write_shift(1, val.length);
		out.write_shift(val.length, val, 'sbcs');
		return out.l < out.length ? out.slice(0, out.l) : out;
	}

	function write_ws_biff_cell(ba, cell, R, C, opts) {
		if(cell.v != null) switch(cell.t) {
			case 'd': case 'n':
				var v = cell.t == 'd' ? datenum(cell.v) : cell.v;
				if((v == (v|0)) && (v >= 0) && (v < 65536))
					write_biff_rec(ba, 0x0002, write_BIFF2INT(R, C, v));
				else
					write_biff_rec(ba, 0x0003, write_BIFF2NUMBER(R,C, v));
				return;
			case 'b': case 'e': write_biff_rec(ba, 0x0005, write_BIFF2BERR(R, C, cell.v, cell.t)); return;
			/* TODO: codepage, sst */
			case 's': case 'str':
				write_biff_rec(ba, 0x0004, write_BIFF2LABEL(R, C, cell.v));
				return;
		}
		write_biff_rec(ba, 0x0001, write_BIFF2Cell(null, R, C));
	}

	function write_biff_ws(ba, ws, idx, opts, wb) {
		var dense = Array.isArray(ws);
		var range = safe_decode_range(ws['!ref'] || "A1"), ref, rr = "", cols = [];
		for(var R = range.s.r; R <= range.e.r; ++R) {
			rr = encode_row(R);
			for(var C = range.s.c; C <= range.e.c; ++C) {
				if(R === range.s.r) cols[C] = encode_col(C);
				ref = cols[C] + rr;
				var cell = dense ? ws[R][C] : ws[ref];
				if(!cell) continue;
				/* write cell */
				write_ws_biff_cell(ba, cell, R, C, opts);
			}
		}
	}

	/* Based on test files */
	function write_biff_buf(wb, opts) {
		var o = opts || {};
		if(DENSE != null && o.dense == null) o.dense = DENSE;
		var ba = buf_array();
		var idx = 0;
		for(var i=0;i<wb.SheetNames.length;++i) if(wb.SheetNames[i] == o.sheet) idx=i;
		if(idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
		write_biff_rec(ba, 0x0009, write_BOF(wb, o));
		/* ... */
		write_biff_ws(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
		/* ... */
		write_biff_rec(ba, 0x000a);
		// TODO
		return ba.end();
	}
	/* TODO: in browser attach to DOM; in node use an html parser */
	var HTML_ = (function() {
		function html_to_sheet(str, _opts) {
			var opts = _opts || {};
			if(DENSE != null && opts.dense == null) opts.dense = DENSE;
			var ws = opts.dense ? ([]) : ({});
			var i = str.indexOf("<table"), j = str.indexOf("</table");
			if(i == -1 || j == -1) throw new Error("Invalid HTML: missing <table> / </table> pair");
			var rows = str.slice(i, j).split(/(:?<tr[^>]*>)/);
			var R = -1, C = 0, RS = 0, CS = 0;
			var range = {s:{r:10000000, c:10000000},e:{r:0,c:0}};
			var merges = [], midx = 0;
			for(i = 0; i < rows.length; ++i) {
				var row = rows[i].trim();
				if(row.substr(0,3) == "<tr") { ++R; C = 0; continue; }
				if(row.substr(0,3) != "<td") continue;
				var cells = row.split("</td>");
				for(j = 0; j < cells.length; ++j) {
					var cell = cells[j].trim();
					if(cell.substr(0,3) != "<td") continue;
					var m = cell, cc = 0;
					/* TODO: parse styles etc */
					while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc+1);
					while(m.indexOf(">") > -1) m = m.slice(0, m.lastIndexOf("<"));
					var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
					CS = tag.colspan ? +tag.colspan : 1;
					if((RS = +tag.rowspan)>0 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
					/* TODO: generate stub cells */
					if(!m.length) { C += CS; continue; }
					m = unescapexml(m).replace(/[\r\n]/g,"");
					if(range.s.r > R) range.s.r = R;
					if(range.e.r < R) range.e.r = R;
					if(range.s.c > C) range.s.c = C;
					if(range.e.c < C) range.e.c = C;
					if(opts.dense) {
						if(!ws[R]) ws[R] = [];
						if(Number(m) == Number(m)) ws[R][C] = {t:'n', v:+m};
						else ws[R][C] = {t:'s', v:m};
					} else {
						var coord = encode_cell({r:R, c:C});
						/* TODO: value parsing */
						if(Number(m) == Number(m)) ws[coord] = {t:'n', v:+m};
						else ws[coord] = {t:'s', v:m};
					}
					C += CS;
				}
			}
			ws['!ref'] = encode_range(range);
			return ws;
		}
		function html_to_book(str, opts) {
			return sheet_to_workbook(html_to_sheet(str, opts), opts);
		}
		function make_html_row(ws, r, R, o) {
			var M = (ws['!merges'] ||[]);
			var oo = [];
			for(var C = r.s.c; C <= r.e.c; ++C) {
				var RS = 0, CS = 0;
				for(var j = 0; j < M.length; ++j) {
					if(M[j].s.r > R || M[j].s.c > C) continue;
					if(M[j].e.r < R || M[j].e.c < C) continue;
					if(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }
					RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;
				}
				if(RS < 0) continue;
				var coord = encode_cell({r:R,c:C});
				var cell = o.dense ? (ws[R]||[])[C] : ws[coord];
				if(!cell || cell.v == null) { oo.push("<td></td>"); continue; }
				/* TODO: html entities */
				var w = cell.h || escapexml(cell.w || (format_cell(cell), cell.w) || "");
				var sp = {};
				if(RS > 1) sp.rowspan = RS;
				if(CS > 1) sp.colspan = CS;
				oo.push(writextag('td', w, sp));
			}
			return "<tr>" + oo.join("") + "</tr>";
		}
		function sheet_to_html(ws, opts) {
			var o = [];
			var r = decode_range(ws['!ref']);
			o.dense = Array.isArray(ws);
			for(var R = r.s.r; R <= r.e.r; ++R) o.push(make_html_row(ws, r, R, o));
			return "<html><body><table>" + o.join("") + "</table></body></html>";
		}

		return {
			to_workbook: html_to_book,
			to_sheet: html_to_sheet,
			_row: make_html_row,
			from_sheet: sheet_to_html
		};
	})();

	function parse_dom_table(table, _opts) {
		var opts = _opts || {};
		if(DENSE != null) opts.dense = DENSE;
		var ws = opts.dense ? ([]) : ({});
		var rows = table.getElementsByTagName('tr');
		var range = {s:{r:0,c:0},e:{r:rows.length - 1,c:0}};
		var merges = [], midx = 0;
		var R = 0, _C = 0, C = 0, RS = 0, CS = 0;
		for(; R < rows.length; ++R) {
			var row = rows[R];
			var elts = row.children;
			for(_C = C = 0; _C < elts.length; ++_C) {
				var elt = elts[_C], v = elts[_C].innerText;
				for(midx = 0; midx < merges.length; ++midx) {
					var m = merges[midx];
					if(m.s.c == C && m.s.r <= R && R <= m.e.r) { C = m.e.c+1; midx = -1; }
				}
				/* TODO: figure out how to extract nonstandard mso- style */
				CS = +elt.getAttribute("colspan") || 1;
				if((RS = +elt.getAttribute("rowspan"))>0 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
				var o = {t:'s', v:v};
				if(v != null && v.length && !isNaN(Number(v))) o = {t:'n', v:Number(v)};
				if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
				else ws[encode_cell({c:C, r:R})] = o;
				if(range.e.c < C) range.e.c = C;
				C += CS;
			}
		}
		ws['!merges'] = merges;
		ws['!ref'] = encode_range(range);
		return ws;
	}

	function table_to_book(table, opts) {
		return sheet_to_workbook(parse_dom_table(table, opts), opts);
	}
	/* OpenDocument */
	var parse_content_xml = (function() {

		var parse_text_p = function(text, tag) {
			return unescapexml(text.replace(/<text:s\/>/g," ").replace(/<[^>]*>/g,""));
		};

		var number_formats = {
			/* ods name: [short ssf fmt, long ssf fmt] */
			day: ["d", "dd"],
			month: ["m", "mm"],
			year: ["y", "yy"],
			hours: ["h", "hh"],
			minutes: ["m", "mm"],
			seconds: ["s", "ss"],
			"am-pm": ["A/P", "AM/PM"],
			"day-of-week": ["ddd", "dddd"]
		};

		return function pcx(d, _opts) {
			var opts = _opts || {};
			if(DENSE != null && opts.dense == null) opts.dense = DENSE;
			var str = xlml_normalize(d);
			var state = [], tmp;
			var tag;
			var NFtag = {name:""}, NF = "", pidx = 0;
			var sheetag;
			var rowtag;
			var Sheets = {}, SheetNames = [];
			var ws = opts.dense ? ([]) : ({});
			var Rn, q;
			var ctag = {value:""};
			var textp = "", textpidx = 0, textptag;
			var R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};
			var number_format_map = {};
			var merges = [], mrange = {}, mR = 0, mC = 0;
			var arrayf = [];
			var comments = [], comment = {};
			var creator = "", creatoridx = 0;
			var rept = 1, isstub = false;
			var i = 0;
			xlmlregex.lastIndex = 0;
			str = str.replace(/<!--([^\u2603]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
			while((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,""))) {

				case 'table': case '工作表': // 9.1.2 <table:table>
					if(Rn[1]==='/') {
						if(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);
						if(merges.length) ws['!merges'] = merges;
						sheetag.name = utf8read(sheetag['名称'] || sheetag.name);
						SheetNames.push(sheetag.name);
						Sheets[sheetag.name] = ws;
					}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
						sheetag = parsexmltag(Rn[0], false);
						R = C = -1;
						range.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;
						ws = opts.dense ? ([]) : ({}); merges = [];
					}
					break;

				case 'table-row': case '行': // 9.1.3 <table:table-row>
					if(Rn[1] === '/') break;
					rowtag = parsexmltag(Rn[0], false);
					if(rowtag['行号']) R = rowtag['行号'] - 1; else ++R;
					C = -1; break;
				case 'covered-table-cell': // 9.1.5 <table:covered-table-cell>
					++C;
					if(opts.sheetStubs) {
						if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }
						else ws[encode_cell({r:R,c:C})] = {t:'z'};
					}
					break; /* stub */
				case 'table-cell': case '数据':
					if(Rn[0].charAt(Rn[0].length-2) === '/') {
						ctag = parsexmltag(Rn[0], false);
						if(ctag['number-columns-repeated']) C+= parseInt(ctag['number-columns-repeated'], 10);
						else ++C;
					}
					else if(Rn[1]!=='/') {
						++C;
						rept = 1;
						if(C > range.e.c) range.e.c = C;
						if(R > range.e.r) range.e.r = R;
						if(C < range.s.c) range.s.c = C;
						if(R < range.s.r) range.s.r = R;
						ctag = parsexmltag(Rn[0], false);
						comments = []; comment = {};
						q = ({t:ctag['数据类型'] || ctag['value-type'], v:null});
						if(opts.cellFormula) {
							if(ctag.formula) ctag.formula = unescapexml(ctag.formula);
							if(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
								mR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;
								mC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;
								mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
								q.F = encode_range(mrange);
								arrayf.push([mrange, q.F]);
							}
							if(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
							else for(i = 0; i < arrayf.length; ++i)
								if(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)
									if(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
										q.F = arrayf[i][1];
						}
						if(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
							mR = parseInt(ctag['number-rows-spanned'],10) || 0;
							mC = parseInt(ctag['number-columns-spanned'],10) || 0;
							mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
							merges.push(mrange);
						}

						/* 19.675.2 table:number-columns-repeated */
						if(ctag['number-columns-repeated']) rept = parseInt(ctag['number-columns-repeated'], 10);

						/* 19.385 office:value-type */
						switch(q.t) {
							case 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;
							case 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;
							case 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);
								if(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }
								q.z = 'm/d/yy'; break;
							case 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400; break;
							case 'number': q.t = 'n'; q.v = parseFloat(ctag['数据数值']); break;
							default:
								if(q.t === 'string' || q.t === 'text' || !q.t) {
									q.t = 's';
									if(ctag['string-value'] != null) textp = unescapexml(ctag['string-value']);
								} else throw new Error('Unsupported value type ' + q.t);
						}
					} else {
						isstub = false;
						if(q.t === 's') {
							q.v = textp || '';
							isstub = textpidx == 0;
						}
						if(comments.length > 0) { q.c = comments; comments = []; }
						if(textp && opts.cellText !== false) q.w = textp;
						if(!isstub || opts.sheetStubs) {
							if(!(opts.sheetRows && opts.sheetRows < R)) {
								if(opts.dense) {
									if(!ws[R]) ws[R] = [];
									ws[R][C] = q;
									while(--rept > 0) ws[R][++C] = dup(q);
								} else {
									ws[encode_cell({r:R,c:C})] = q;
									while(--rept > 0) ws[encode_cell({r:R,c:++C})] = dup(q);
								}
								if(range.e.c <= C) range.e.c = C;
							}
						} else { C += rept; rept = 0; }
						q = {};
						textp = "";
					}
					break; // 9.1.4 <table:table-cell>

				/* pure state */
				case 'document': // TODO: <office:document> is the root for FODS
				case 'document-content': case '电子表格文档': // 3.1.3.2 <office:document-content>
				case 'spreadsheet': case '主体': // 3.7 <office:spreadsheet>
				case 'scripts': // 3.12 <office:scripts>
				case 'styles': // TODO <office:styles>
				case 'font-face-decls': // 3.14 <office:font-face-decls>
					if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
					break;

				case 'annotation': // 14.1 <office:annotation>
					if(Rn[1]==='/'){
						if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
						comment.t = textp;
						comment.a = creator;
						comments.push(comment);
					}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}
					creator = ""; creatoridx = 0;
					textp = ""; textpidx = 0;
					break;

				case 'creator': // 4.3.2.7 <dc:creator>
					if(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }
					else creatoridx = Rn.index + Rn[0].length;
					break;

				/* ignore state */
				case 'meta': case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF
				case 'settings': // TODO: <office:settings>
				case 'config-item-set': // TODO: <office:config-item-set>
				case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>
				case 'config-item-map-entry': // TODO: <office:config-item-map-entry>
				case 'config-item-map-named': // TODO: <office:config-item-map-entry>
				case 'shapes': // 9.2.8 <table:shapes>
				case 'frame': // 10.4.2 <draw:frame>
				case 'text-box': // 10.4.3 <draw:text-box>
				case 'image': // 10.4.4 <draw:image>
				case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>
				case 'list-style': // 16.30 <text:list-style>
				case 'form': // 13.13 <form:form>
				case 'dde-links': // 9.8 <table:dde-links>
				case 'event-listeners': // TODO
					if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
					else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);
					textp = ""; textpidx = 0;
					break;

				case 'scientific-number': // TODO: <number:scientific-number>
					break;
				case 'currency-symbol': // TODO: <number:currency-symbol>
					break;
				case 'currency-style': // TODO: <number:currency-style>
					break;
				case 'number-style': // 16.27.2 <number:number-style>
				case 'percentage-style': // 16.27.9 <number:percentage-style>
				case 'date-style': // 16.27.10 <number:date-style>
				case 'time-style': // 16.27.18 <number:time-style>
					if(Rn[1]==='/'){
						number_format_map[NFtag.name] = NF;
						if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
					} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
						NF = "";
						NFtag = parsexmltag(Rn[0], false);
						state.push([Rn[3], true]);
					} break;

				case 'script': break; // 3.13 <office:script>
				case 'libraries': break; // TODO: <ooo:libraries>
				case 'automatic-styles': break; // 3.15.3 <office:automatic-styles>
				case 'master-styles': break; // TODO: <office:automatic-styles>

				case 'default-style': // TODO: <style:default-style>
				case 'page-layout': break; // TODO: <style:page-layout>
				case 'style': break; // 16.2 <style:style>
				case 'map': break; // 16.3 <style:map>
				case 'font-face': break; // 16.21 <style:font-face>

				case 'paragraph-properties': break; // 17.6 <style:paragraph-properties>
				case 'table-properties': break; // 17.15 <style:table-properties>
				case 'table-column-properties': break; // 17.16 <style:table-column-properties>
				case 'table-row-properties': break; // 17.17 <style:table-row-properties>
				case 'table-cell-properties': break; // 17.18 <style:table-cell-properties>

				case 'number': // 16.27.3 <number:number>
					switch(state[state.length-1][0]) {
						case 'time-style':
						case 'date-style':
							tag = parsexmltag(Rn[0], false);
							NF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;
					} break;

				case 'fraction': break; // TODO 16.27.6 <number:fraction>

				case 'day': // 16.27.11 <number:day>
				case 'month': // 16.27.12 <number:month>
				case 'year': // 16.27.13 <number:year>
				case 'era': // 16.27.14 <number:era>
				case 'day-of-week': // 16.27.15 <number:day-of-week>
				case 'week-of-year': // 16.27.16 <number:week-of-year>
				case 'quarter': // 16.27.17 <number:quarter>
				case 'hours': // 16.27.19 <number:hours>
				case 'minutes': // 16.27.20 <number:minutes>
				case 'seconds': // 16.27.21 <number:seconds>
				case 'am-pm': // 16.27.22 <number:am-pm>
					switch(state[state.length-1][0]) {
						case 'time-style':
						case 'date-style':
							tag = parsexmltag(Rn[0], false);
							NF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;
					} break;

				case 'boolean-style': break; // 16.27.23 <number:boolean-style>
				case 'boolean': break; // 16.27.24 <number:boolean>
				case 'text-style': break; // 16.27.25 <number:text-style>
				case 'text': // 16.27.26 <number:text>
					if(Rn[0].slice(-2) === "/>") break;
					else if(Rn[1]==="/") switch(state[state.length-1][0]) {
						case 'number-style':
						case 'date-style':
						case 'time-style':
							NF += str.slice(pidx, Rn.index);
							break;
					}
					else pidx = Rn.index + Rn[0].length;
					break;
				case 'text-content': break; // 16.27.27 <number:text-content>
				case 'text-properties': break; // 16.27.27 <style:text-properties>

				case 'body': case '电子表格': break; // 3.3 16.9.6 19.726.3

				case 'forms': break; // 12.25.2 13.2
				case 'table-column': break; // 9.1.6 <table:table-column>

				case 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904

				case 'graphic-properties': break; // 17.21 <style:graphic-properties>
				case 'calculation-settings': break; // 9.4.1 <table:calculation-settings>
				case 'named-expressions': break; // 9.4.11 <table:named-expressions>
				case 'named-range': break; // 9.4.12 <table:named-range>
				case 'named-expression': break; // 9.4.13 <table:named-expression>
				case 'sort': break; // 9.4.19 <table:sort>
				case 'sort-by': break; // 9.4.20 <table:sort-by>
				case 'sort-groups': break; // 9.4.22 <table:sort-groups>

				case 'span': break; // <text:span>
				case 'line-break': break; // 6.1.5 <text:line-break>
				case 'p': case '文本串':
					if(Rn[1]==='/') textp = (textp.length > 0 ? textp + "\n" : "") + parse_text_p(str.slice(textpidx,Rn.index), textptag);
					else { textptag = parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }
					break; // <text:p>

				case 'database-range': // 9.4.15 <table:database-range>
					if(Rn[1]==='/') break;
					try {
						var AutoFilter = ods_to_csf_range_3D(parsexmltag(Rn[0])['target-range-address']);
						Sheets[AutoFilter[0]]['!autofilter'] = { ref: AutoFilter[1] };
					} catch(e) {/* empty */}
					break;

				case 's': break; // <text:s>
				case 'date': break; // <*:date>

				case 'object': break; // 10.4.6.2 <draw:object>
				case 'title': case '标题': break; // <*:title> OR <uof:标题>
				case 'desc': break; // <*:desc>

				case 'table-source': break; // 9.2.6

				case 'iteration': break; // 9.4.3 <table:iteration>
				case 'content-validations': break; // 9.4.4 <table:
				case 'content-validation': break; // 9.4.5 <table:
				case 'error-message': break; // 9.4.7 <table:
				case 'database-ranges': break; // 9.4.14 <table:database-ranges>
				case 'filter': break; // 9.5.2 <table:filter>
				case 'filter-and': break; // 9.5.3 <table:filter-and>
				case 'filter-or': break; // 9.5.4 <table:filter-or>
				case 'filter-condition': break; // 9.5.5 <table:filter-condition>

				case 'list-level-style-bullet': break; // 16.31 <text:
				case 'list-level-style-number': break; // 16.32 <text:
				case 'list-level-properties': break; // 17.19 <style:

				/* 7.3 Document Fields */
				case 'sender-firstname': // 7.3.6.2
				case 'sender-lastname': // 7.3.6.3
				case 'sender-initials': // 7.3.6.4
				case 'sender-title': // 7.3.6.5
				case 'sender-position': // 7.3.6.6
				case 'sender-email': // 7.3.6.7
				case 'sender-phone-private': // 7.3.6.8
				case 'sender-fax': // 7.3.6.9
				case 'sender-company': // 7.3.6.10
				case 'sender-phone-work': // 7.3.6.11
				case 'sender-street': // 7.3.6.12
				case 'sender-city': // 7.3.6.13
				case 'sender-postal-code': // 7.3.6.14
				case 'sender-country': // 7.3.6.15
				case 'sender-state-or-province': // 7.3.6.16
				case 'author-name': // 7.3.7.1
				case 'author-initials': // 7.3.7.2
				case 'chapter': // 7.3.8
				case 'file-name': // 7.3.9
				case 'template-name': // 7.3.9
				case 'sheet-name': // 7.3.9
					break;

				case 'event-listener':
					break;
				/* TODO: FODS Properties */
				case 'initial-creator':
				case 'creation-date':
				case 'generator':
				case 'document-statistic':
				case 'user-defined':
					break;

				/* TODO: FODS Config */
				case 'config-item':
					break;

				/* TODO: style tokens */
				case 'page-number': break; // TODO <text:page-number>
				case 'page-count': break; // TODO <text:page-count>
				case 'time': break; // TODO <text:time>

				/* 9.6 Data Pilot Tables <table: */
				case 'data-pilot-table': // 9.6.3
				case 'source-cell-range': // 9.6.5
				case 'source-service': // 9.6.6
				case 'data-pilot-field': // 9.6.7
				case 'data-pilot-level': // 9.6.8
				case 'data-pilot-subtotals': // 9.6.9
				case 'data-pilot-subtotal': // 9.6.10
				case 'data-pilot-members': // 9.6.11
				case 'data-pilot-member': // 9.6.12
				case 'data-pilot-display-info': // 9.6.13
				case 'data-pilot-sort-info': // 9.6.14
				case 'data-pilot-layout-info': // 9.6.15
				case 'data-pilot-field-reference': // 9.6.16
				case 'data-pilot-groups': // 9.6.17
				case 'data-pilot-group': // 9.6.18
				case 'data-pilot-group-member': // 9.6.19
					break;

				/* 10.3 Drawing Shapes */
				case 'rect': // 10.3.2
					break;

				/* 14.6 DDE Connections */
				case 'dde-connection-decls': // 14.6.2 <text:
				case 'dde-connection-decl': // 14.6.3 <text:
				case 'dde-link': // 14.6.4 <table:
				case 'dde-source': // 14.6.5 <office:
					break;

				case 'properties': break; // 13.7 <form:properties>
				case 'property': break; // 13.8 <form:property>

				case 'a': break; // 6.1.8 hyperlink

				/* non-standard */
				case 'table-protection': break;
				case 'data-pilot-grand-total': break; // <table:
				default:
					if(Rn[2] === 'dc:') break; // TODO: properties
					if(Rn[2] === 'draw:') break; // TODO: drawing
					if(Rn[2] === 'style:') break; // TODO: styles
					if(Rn[2] === 'calcext:') break; // ignore undocumented extensions
					if(Rn[2] === 'loext:') break; // ignore undocumented extensions
					if(Rn[2] === 'uof:') break; // TODO: uof
					if(Rn[2] === '表:') break; // TODO: uof
					if(Rn[2] === '字:') break; // TODO: uof
					if(opts.WTF) throw new Error(Rn);
			}
			var out = {
				Sheets: Sheets,
				SheetNames: SheetNames
			};
			return out;
		};
	})();

	function parse_ods(zip, opts) {
		opts = opts || ({});
		var ods = !!safegetzipfile(zip, 'objectdata');
		if(ods) var manifest = parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
		var content = getzipstr(zip, 'content.xml');
		if(!content) throw new Error("Missing content.xml in " + (ods ? "ODS" : "UOF")+ " file");
		return parse_content_xml(ods ? content : utf8read(content), opts);
	}
	function parse_fods(data, opts) {
		return parse_content_xml(data, opts);
	}

	/* OpenDocument */
	var write_styles_ods = (function() {
		var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-styles xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" office:version="1.2"></office:document-styles>';
		return function wso(wb, opts) {
			return payload;
		};
	})();
	var write_content_ods = (function() {
		var null_cell_xml = '          <table:table-cell />\n';
		var covered_cell_xml = '          <table:covered-table-cell/>\n';
		var write_ws = function(ws, wb, i, opts) {
			/* Section 9 Tables */
			var o = [];
			o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '">\n');
			var R=0,C=0, range = decode_range(ws['!ref']);
			var marr = ws['!merges'] || [], mi = 0;
			var dense = Array.isArray(ws);
			for(R = 0; R < range.s.r; ++R) o.push('        <table:table-row></table:table-row>\n');
			for(; R <= range.e.r; ++R) {
				o.push('        <table:table-row>\n');
				for(C=0; C < range.s.c; ++C) o.push(null_cell_xml);
				for(; C <= range.e.c; ++C) {
					var skip = false, ct = {}, textp = "";
					for(mi = 0; mi != marr.length; ++mi) {
						if(marr[mi].s.c > C) continue;
						if(marr[mi].s.r > R) continue;
						if(marr[mi].e.c < C) continue;
						if(marr[mi].e.r < R) continue;
						if(marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
						ct['table:number-columns-spanned'] = (marr[mi].e.c - marr[mi].s.c + 1);
						ct['table:number-rows-spanned'] =    (marr[mi].e.r - marr[mi].s.r + 1);
						break;
					}
					if(skip) { o.push(covered_cell_xml); continue; }
					var ref = encode_cell({r:R, c:C}), cell = dense ? (ws[R]||[])[C]: ws[ref];
					if(cell && cell.f) {
						ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));
						if(cell.F) {
							if(cell.F.substr(0, ref.length) == ref) {
								var _Fref = decode_range(cell.F);
								ct['table:number-matrix-columns-spanned'] = (_Fref.e.c - _Fref.s.c + 1);
								ct['table:number-matrix-rows-spanned'] =    (_Fref.e.r - _Fref.s.r + 1);
							}
						}
					}
					if(!cell) { o.push(null_cell_xml); continue; }
					switch(cell.t) {
						case 'b':
							textp = (cell.v ? 'TRUE' : 'FALSE');
							ct['office:value-type'] = "boolean";
							ct['office:boolean-value'] = (cell.v ? 'true' : 'false');
							break;
						case 'n':
							textp = (cell.w||String(cell.v||0));
							ct['office:value-type'] = "float";
							ct['office:value'] = (cell.v||0);
							break;
						case 's': case 'str':
							textp = escapexml(cell.v);
							ct['office:value-type'] = "string";
							break;
						case 'd':
							textp = (cell.w||(parseDate(cell.v).toISOString()));
							ct['office:value-type'] = "date";
							ct['office:date-value'] = (parseDate(cell.v).toISOString());
							ct['table:style-name'] = "ce1";
							break;
						//case 'e':
						default: o.push(null_cell_xml); continue;
					}
					o.push('          ' + writextag('table:table-cell', writextag('text:p', textp, {}), ct) + '\n');
				}
				o.push('        </table:table-row>\n');
			}
			o.push('      </table:table>\n');
			return o.join("");
		};

		var write_automatic_styles_ods = function(o) {
			o.push(' <office:automatic-styles>\n');
			o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
			o.push('   <number:month number:style="long"/>\n');
			o.push('   <number:text>/</number:text>\n');
			o.push('   <number:day number:style="long"/>\n');
			o.push('   <number:text>/</number:text>\n');
			o.push('   <number:year/>\n');
			o.push('  </number:date-style>\n');
			o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
			o.push(' </office:automatic-styles>\n');
		};

		return function wcx(wb, opts) {
			var o = [XML_HEADER];
			/* 3.1.3.2 */
			var attr = wxt_helper({
				'xmlns:office':       "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
				'xmlns:table':        "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
				'xmlns:style':        "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
				'xmlns:text':         "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
				'xmlns:draw':         "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
				'xmlns:fo':           "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
				'xmlns:xlink':        "http://www.w3.org/1999/xlink",
				'xmlns:dc':           "http://purl.org/dc/elements/1.1/",
				'xmlns:meta':         "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
				'xmlns:number':       "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
				'xmlns:presentation': "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
				'xmlns:svg':          "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
				'xmlns:chart':        "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
				'xmlns:dr3d':         "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
				'xmlns:math':         "http://www.w3.org/1998/Math/MathML",
				'xmlns:form':         "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
				'xmlns:script':       "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
				'xmlns:ooo':          "http://openoffice.org/2004/office",
				'xmlns:ooow':         "http://openoffice.org/2004/writer",
				'xmlns:oooc':         "http://openoffice.org/2004/calc",
				'xmlns:dom':          "http://www.w3.org/2001/xml-events",
				'xmlns:xforms':       "http://www.w3.org/2002/xforms",
				'xmlns:xsd':          "http://www.w3.org/2001/XMLSchema",
				'xmlns:xsi':          "http://www.w3.org/2001/XMLSchema-instance",
				'xmlns:sheet':        "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
				'xmlns:rpt':          "http://openoffice.org/2005/report",
				'xmlns:of':           "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
				'xmlns:xhtml':        "http://www.w3.org/1999/xhtml",
				'xmlns:grddl':        "http://www.w3.org/2003/g/data-view#",
				'xmlns:tableooo':     "http://openoffice.org/2009/table",
				'xmlns:drawooo':      "http://openoffice.org/2010/draw",
				'xmlns:calcext':      "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
				'xmlns:loext':        "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
				'xmlns:field':        "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
				'xmlns:formx':        "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
				'xmlns:css3t':        "http://www.w3.org/TR/css3-text/",
				'office:version':     "1.2"
			});

			var fods = wxt_helper({
				'xmlns:config':"urn:oasis:names:tc:opendocument:xmlns:config:1.0",
				'office:mimetype':"application/vnd.oasis.opendocument.spreadsheet"
			});

			if(opts.bookType == "fods") o.push('<office:document' + attr + fods + '>\n');
			else o.push('<office:document-content' + attr  + '>\n');
			write_automatic_styles_ods(o);
			o.push('  <office:body>\n');
			o.push('    <office:spreadsheet>\n');
			for(var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts));
			o.push('    </office:spreadsheet>\n');
			o.push('  </office:body>\n');
			if(opts.bookType == "fods") o.push('</office:document>');
			else o.push('</office:document-content>');
			return o.join("");
		};
	})();

	function write_ods(wb, opts) {
		if(opts.bookType == "fods") return write_content_ods(wb, opts);

	var zip = new jszip();
		var f = "";

		var manifest = [];
		var rdf = [];

		/* 3:3.3 and 2:2.2.4 */
		f = "mimetype";
		zip.file(f, "application/vnd.oasis.opendocument.spreadsheet");

		/* Part 1 Section 2.2 Documents */
		f = "content.xml";
		zip.file(f, write_content_ods(wb, opts));
		manifest.push([f, "text/xml"]);
		rdf.push([f, "ContentFile"]);

		/* TODO: these are hard-coded styles to satiate excel */
		f = "styles.xml";
		zip.file(f, write_styles_ods(wb, opts));
		manifest.push([f, "text/xml"]);
		rdf.push([f, "StylesFile"]);

		/* Part 3 Section 6 Metadata Manifest File */
		f = "manifest.rdf";
		zip.file(f, write_rdf(rdf, opts));
		manifest.push([f, "application/rdf+xml"]);

		/* TODO: this is hard-coded to satiate excel */
		f = "meta.xml";
		zip.file(f, write_meta_ods(wb, opts));
		manifest.push([f, "text/xml"]);
		rdf.push([f, "MetadataFile"]);

		/* Part 3 Section 4 Manifest File */
		f = "META-INF/manifest.xml";
		zip.file(f, write_manifest(manifest, opts));

		return zip;
	}

	/* actual implementation elsewhere, wrappers are for read/write */
	function write_obj_str(factory) {
		return function write_str(wb, o) {
			var idx = 0;
			for(var i=0;i<wb.SheetNames.length;++i) if(wb.SheetNames[i] == o.sheet) idx=i;
			if(idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet);
			return factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o);
		};
	}

	var write_htm_str = write_obj_str(HTML_);
	var write_csv_str = write_obj_str({from_sheet:sheet_to_csv});
	var write_slk_str = write_obj_str(SYLK);
	var write_dif_str = write_obj_str(DIF);
	var write_prn_str = write_obj_str(PRN);
	var write_txt_str = write_obj_str({from_sheet:sheet_to_txt});
	function fix_opts_func(defaults) {
		return function fix_opts(opts) {
			for(var i = 0; i != defaults.length; ++i) {
				var d = defaults[i];
				if(opts[d[0]] === undefined) opts[d[0]] = d[1];
				if(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
			}
		};
	}

	var fix_read_opts = fix_opts_func([
		['cellNF', false], /* emit cell number format string as .z */
		['cellHTML', true], /* emit html string as .h */
		['cellFormula', true], /* emit formulae as .f */
		['cellStyles', false], /* emits style/theme as .s */
		['cellText', true], /* emit formatted text as .w */
		['cellDates', false], /* emit date cells with type `d` */

		['sheetStubs', false], /* emit empty cells */
		['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */

		['bookDeps', false], /* parse calculation chains */
		['bookSheets', false], /* only try to get sheet names (no Sheets) */
		['bookProps', false], /* only try to get properties (no Sheets) */
		['bookFiles', false], /* include raw file structure (keys, files, cfb) */
		['bookVBA', false], /* include vba raw data (vbaraw) */

		['password',''], /* password */
		['WTF', false] /* WTF mode (throws errors) */
	]);


	var fix_write_opts = fix_opts_func([
		['cellDates', false], /* write date cells with type `d` */

		['bookSST', false], /* Generate Shared String Table */

		['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */

		['compression', false], /* Use file compression */

		['WTF', false] /* WTF mode (throws errors) */
	]);
	function get_sheet_type(n) {
		if(RELS.WS.indexOf(n) > -1) return "sheet";
		if(RELS.CS && n == RELS.CS) return "chart";
		if(RELS.DS && n == RELS.DS) return "dialog";
		if(RELS.MS && n == RELS.MS) return "macro";
		if(!n || !n.length) return "sheet";
		return n;
	}
	function safe_parse_wbrels(wbrels, sheets) {
		if(!wbrels) return 0;
		try {
			wbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });
		} catch(e) { return null; }
		return !wbrels || wbrels.length === 0 ? null : wbrels;
	}

	function safe_parse_sheet(zip, path, relsPath, sheet, sheetRels, sheets, stype, opts, wb, themes, styles) {
		try {
			sheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);
			var data = getzipdata(zip, path);
			switch(stype) {
				case 'sheet': sheets[sheet]=parse_ws(data, path, opts,sheetRels[sheet], wb, themes, styles); break;
				case 'chart':
					var cs = parse_cs(data, path, opts,sheetRels[sheet], wb, themes, styles);
					sheets[sheet] = cs;
					if(!cs || !cs['!chart']) break;
					var dfile = resolve_path(cs['!chart'].Target, path);
					var drelsp = get_rels_path(dfile);
					var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip,drelsp,true), dfile));
					var chartp = resolve_path(draw, dfile);
					var crelsp = get_rels_path(chartp);
					cs = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp,true), chartp), wb, cs);
					break;
				case 'macro': sheets[sheet]=parse_ms(data, path, opts,sheetRels[sheet], wb, themes, styles); break;
				case 'dialog': sheets[sheet]=parse_ds(data, path, opts,sheetRels[sheet], wb, themes, styles); break;
			}
		} catch(e) { if(opts.WTF) throw e; }
	}

	var nodirs = function nodirs(x){return x.slice(-1) != '/';};
	function parse_zip(zip, opts) {
		make_ssf(SSF);
		opts = opts || {};
		fix_read_opts(opts);
		reset_cp();

		/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
		if(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
		/* UOC */
		if(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);

		var entries = keys(zip.files).filter(nodirs).sort();
		var dir = parse_ct((getzipstr(zip, '[Content_Types].xml')), opts);
		var xlsb = false;
		var sheets, binname;
		if(dir.workbooks.length === 0) {
			binname = "xl/workbook.xml";
			if(getzipdata(zip,binname, true)) dir.workbooks.push(binname);
		}
		if(dir.workbooks.length === 0) {
			binname = "xl/workbook.bin";
			if(!getzipfile(zip,binname,true)) throw new Error("Could not find workbook");
			dir.workbooks.push(binname);
			xlsb = true;
		}
		if(dir.workbooks[0].slice(-3) == "bin") xlsb = true;
		if(xlsb) set_cp(1200);

		var themes = ({});
		var styles = ({});
		if(!opts.bookSheets && !opts.bookProps) {
			strs = [];
			if(dir.sst) strs=parse_sst(getzipdata(zip, dir.sst.replace(/^\//,'')), dir.sst, opts);

			if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//,''), true)||"",dir.themes[0], opts);

			if(dir.style) styles = parse_sty(getzipdata(zip, dir.style.replace(/^\//,'')),dir.style, themes, opts);
		}

		var wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\//,'')), dir.workbooks[0], opts);

		var props = {}, propdata = "";

		if(dir.coreprops.length !== 0) {
			propdata = getzipstr(zip, dir.coreprops[0].replace(/^\//,''), true);
			if(propdata) props = parse_core_props(propdata);
			if(dir.extprops.length !== 0) {
				propdata = getzipstr(zip, dir.extprops[0].replace(/^\//,''), true);
				if(propdata) parse_ext_props(propdata, props);
			}
		}

		var custprops = {};
		if(!opts.bookSheets || opts.bookProps) {
			if (dir.custprops.length !== 0) {
				propdata = getzipstr(zip, dir.custprops[0].replace(/^\//,''), true);
				if(propdata) custprops = parse_cust_props(propdata, opts);
			}
		}

		var out = ({});
		if(opts.bookSheets || opts.bookProps) {
			if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });
			else if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;
			if(opts.bookProps) { out.Props = props; out.Custprops = custprops; }
			if(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
			if(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
		}
		sheets = {};

		var deps = {};
		if(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, dir.calcchain.replace(/^\//,'')),dir.calcchain,opts);

		var i=0;
		var sheetRels = ({});
		var path, relsPath;

		{
			var wbsheets = wb.Sheets;
			props.Worksheets = wbsheets.length;
			props.SheetNames = [];
			for(var j = 0; j != wbsheets.length; ++j) {
				props.SheetNames[j] = wbsheets[j].name;
			}
		}

		var wbext = xlsb ? "bin" : "xml";
		var wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
		var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile);
		if(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
		/* Numbers iOS hack */
		var nmode = (getzipdata(zip,"xl/worksheets/sheet.xml",true))?1:0;
		for(i = 0; i != props.Worksheets; ++i) {
			var stype = "sheet";
			if(wbrels && wbrels[i]) {
				path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
				stype = wbrels[i][2];
			} else {
				path = 'xl/worksheets/sheet'+(i+1-nmode)+"." + wbext;
				path = path.replace(/sheet0\./,"sheet.");
			}
			relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
			safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, stype, opts, wb, themes, styles);
		}

		if(dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts);

		out = ({
			Directory: dir,
			Workbook: wb,
			Props: props,
			Custprops: custprops,
			Deps: deps,
			Sheets: sheets,
			SheetNames: props.SheetNames,
			Strings: strs,
			Styles: styles,
			Themes: themes,
			SSF: SSF.get_table()
		});
		if(opts.bookFiles) {
			out.keys = entries;
			out.files = zip.files;
		}
		if(opts.bookVBA) {
			if(dir.vba.length > 0) out.vbaraw = getzipdata(zip,dir.vba[0].replace(/^\//,''),true);
			else if(dir.defaults && dir.defaults.bin === 'application/vnd.ms-office.vbaProject') out.vbaraw = getzipdata(zip,'xl/vbaProject.bin',true);
		}
		return out;
	}

	/* references to [MS-OFFCRYPTO] */
	function parse_xlsxcfb(cfb, opts) {
		var f = 'Version';
		var data = cfb.find(f);
		if(!data) throw new Error("ECMA-376 Encrypted file missing " + f);
		var version = parse_DataSpaceVersionInfo(data.content);

		/* 2.3.4.1 */
		f = 'DataSpaceMap';
		data = cfb.find(f);
		if(!data) throw new Error("ECMA-376 Encrypted file missing " + f);
		var dsm = parse_DataSpaceMap(data.content);
		if(dsm.length != 1 || dsm[0].comps.length != 1 || dsm[0].comps[0].t != 0 ||
		   dsm[0].name != "StrongEncryptionDataSpace" || dsm[0].comps[0].v != "EncryptedPackage")
			throw new Error("ECMA-376 Encrypted file bad " + f);

		f = 'StrongEncryptionDataSpace';
		data = cfb.find(f);
		if(!data) throw new Error("ECMA-376 Encrypted file missing " + f);
		var seds = parse_DataSpaceDefinition(data.content);
		if(seds.length != 1 || seds[0] != "StrongEncryptionTransform")
			throw new Error("ECMA-376 Encrypted file bad " + f);

		/* 2.3.4.3 */
		f = '!Primary';
		data = cfb.find(f);
		if(!data) throw new Error("ECMA-376 Encrypted file missing " + f);
		var hdr = parse_Primary(data.content);

		f = 'EncryptionInfo';
		data = cfb.find(f);
		if(!data) throw new Error("ECMA-376 Encrypted file missing " + f);
		var einfo = parse_EncryptionInfo(data.content);

		throw new Error("File is password-protected");
	}

	function write_zip(wb, opts) {
		_shapeid = 1024;
		if(opts.bookType == "ods") return write_ods(wb, opts);
		if(wb && !wb.SSF) {
			wb.SSF = SSF.get_table();
		}
		if(wb && wb.SSF) {
			// $FlowIgnore
			make_ssf(SSF); SSF.load_table(wb.SSF);
			// $FlowIgnore
			opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;
			opts.ssf = wb.SSF;
		}
		opts.rels = {}; opts.wbrels = {};
		opts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0;
		var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
		var vbafmt = opts.bookType == "xlsb" || opts.bookType == "xlsm";
		var ct = ({
			workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
			rels:[], strs:[], comments:[],
			coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
			calcchains:[], vba: [], drawings: [],
			TODO:[], xmlns: "" });
		fix_write_opts(opts = opts || {});
	var zip = new jszip();
		var f = "", rId = 0;

		opts.cellXfs = [];
		get_cell_style(opts.cellXfs, {}, {revssf:{"General":0}});

		if(!wb.Props) wb.Props = {};

		f = "docProps/core.xml";
		zip.file(f, write_core_props(wb.Props, opts));
		ct.coreprops.push(f);
		add_rels(opts.rels, 2, f, RELS.CORE_PROPS);

	f = "docProps/app.xml";
		if(wb.Props && wb.Props.SheetNames){/* empty */}
		else if(!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
		// $FlowIgnore
		else wb.Props.SheetNames = wb.SheetNames.map(function(x,i) { return [(wb.Workbook.Sheets[i]||{}).Hidden != 2, x];}).filter(function(x) { return x[0]; }).map(function(x) { return x[1]; });
		wb.Props.Worksheets = wb.Props.SheetNames.length;
		zip.file(f, write_ext_props(wb.Props, opts));
		ct.extprops.push(f);
		add_rels(opts.rels, 3, f, RELS.EXT_PROPS);

		if(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {
			f = "docProps/custom.xml";
			zip.file(f, write_cust_props(wb.Custprops, opts));
			ct.custprops.push(f);
			add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
		}

		f = "xl/workbook." + wbext;
		zip.file(f, write_wb(wb, f, opts));
		ct.workbooks.push(f);
		add_rels(opts.rels, 1, f, RELS.WB);

		for(rId=1;rId <= wb.SheetNames.length; ++rId) {
			var wsrels = {'!id':{}};
			var ws = wb.Sheets[wb.SheetNames[rId-1]];
			var _type = (ws || {})["!type"] || "sheet";
			switch(_type) {
			case "chart": /*
				f = "xl/chartsheets/sheet" + rId + "." + wbext;
				zip.file(f, write_cs(rId-1, f, opts, wb, wsrels));
				ct.charts.push(f);
				add_rels(wsrels, -1, "chartsheets/sheet" + rId + "." + wbext, RELS.CS);
				break; */
				/* falls through */
			default:
				f = "xl/worksheets/sheet" + rId + "." + wbext;
				zip.file(f, write_ws(rId-1, f, opts, wb, wsrels));
				ct.sheets.push(f);
				add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
			}

			if(ws) {
				var comments = ws['!comments'];
				if(comments && comments.length > 0) {
					var cf = "xl/comments" + rId + "." + wbext;
					zip.file(cf, write_cmnt(comments, cf, opts));
					ct.comments.push(cf);
					add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
				}
				if(ws['!legacy']) {
					zip.file("xl/drawings/vmlDrawing" + (rId) + ".vml", write_comments_vml(rId, ws['!comments']));
				}
				delete ws['!comments'];
				delete ws['!legacy'];
			}

			if(wsrels['!id'].rId1) zip.file(get_rels_path(f), write_rels(wsrels));
		}

		if(opts.Strings != null && opts.Strings.length > 0) {
			f = "xl/sharedStrings." + wbext;
			zip.file(f, write_sst(opts.Strings, f, opts));
			ct.strs.push(f);
			add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
		}

		/* TODO: something more intelligent with themes */

		f = "xl/theme/theme1.xml";
		zip.file(f, write_theme(wb.Themes, opts));
		ct.themes.push(f);
		add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);

		/* TODO: something more intelligent with styles */

		f = "xl/styles." + wbext;
		zip.file(f, write_sty(wb, f, opts));
		ct.styles.push(f);
		add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);

		if(wb.vbaraw && vbafmt) {
			f = "xl/vbaProject.bin";
			zip.file(f, wb.vbaraw);
			ct.vba.push(f);
			add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
		}

		zip.file("[Content_Types].xml", write_ct(ct, opts));
		zip.file('_rels/.rels', write_rels(opts.rels));
		zip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));

		delete opts.revssf; delete opts.ssf;
		return zip;
	}
	function firstbyte(f,o) {
		var x = "";
		switch((o||{}).type || "base64") {
			case 'buffer': return [f[0], f[1], f[2], f[3]];
			case 'base64': x = Base64.decode(f.substr(0,24)); break;
			case 'binary': x = f; break;
			case 'array':  return [f[0], f[1], f[2], f[3]];
			default: throw new Error("Unrecognized type " + (o ? o.type : "undefined"));
		}
		return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3)];
	}

	function read_cfb(cfb, opts) {
		if(cfb.find("EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
		return parse_xlscfb(cfb, opts);
	}

	function read_zip(data, opts) {
	var zip, d = data;
		var o = opts||{};
		if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
		switch(o.type) {
			case "base64": zip = new jszip(d, { base64:true }); break;
			case "binary": case "array": zip = new jszip(d, { base64:false }); break;
			case "buffer": zip = new jszip(d); break;
			default: throw new Error("Unrecognized type " + o.type);
		}
		return parse_zip(zip, o);
	}

	function read_utf16(data, o) {
		var d = data;
		if(o.type == 'base64') d = Base64.decode(d);
		d = cptable.utils.decode(1200, d.slice(2));
		o.type = "binary";
		if(d.charCodeAt(0) == 0x3C) return parse_xlml(d,o);
		return PRN.to_workbook(d, o);
	}

	function readSync(data, opts) {
		var zip, d = data, n=[0];
		var o = opts||{};
		_ssfopts = {};
		if(o.dateNF) _ssfopts.dateNF = o.dateNF;
		if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
		if(o.type == "file") { o.type = "buffer"; d = _fs.readFileSync(data); }
		switch((n = firstbyte(d, o))[0]) {
			case 0xD0: return read_cfb(CFB.read(d, o), o);
			case 0x09: return parse_xlscfb(s2a(o.type === 'base64' ? Base64.decode(d) : d), o);
			case 0x3C: return parse_xlml(d, o);
			case 0x49: if(n[1] == 0x44) return read_wb_ID(d, o); break;
			case 0x54: if(n[1] == 0x41 && n[2] == 0x42 && n[3] == 0x4C) return DIF.to_workbook(d, o); break;
			case 0x50: if(n[1] == 0x4B && n[2] < 0x20 && n[3] < 0x20) return read_zip(d, o); break;
			case 0xEF: return n[3] == 0x3C ? parse_xlml(d, o) : PRN.to_workbook(d,o);
			case 0xFF: if(n[1] == 0xFE){ return read_utf16(d, o); } break;
			case 0x00: if(n[1] == 0x00 && n[2] >= 0x02 && n[3] == 0x00) return WK_.to_workbook(d, o); break;
			case 0x03: case 0x83: case 0x8B: return DBF.to_workbook(d, o);
		}
		if(n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
		if(0x20>n[0]||n[0]>0x7F) throw new Error("Unsupported file " + n.join("|"));
		return PRN.to_workbook(d, o);
	}

	function readFileSync(filename, opts) {
		var o = opts||{}; o.type = 'file';
		return readSync(filename, o);
	}
	function write_zip_type(wb, opts) {
		var o = opts||{};
		var z = write_zip(wb, o);
		var oopts = {};
		if(o.compression) oopts.compression = 'DEFLATE';
		switch(o.type) {
			case "base64": oopts.type = "base64"; break;
			case "binary": oopts.type = "string"; break;
			case "buffer":
			case "file": oopts.type = "nodebuffer"; break;
			default: throw new Error("Unrecognized type " + o.type);
		}
		if(o.type === "file") return _fs.writeFileSync(o.file, z.generate(oopts));
		return z.generate(oopts);
	}

	/* TODO: test consistency */
	function write_bstr_type(out, opts) {
		switch(opts.type) {
			case "base64": return Base64.encode(out);
			case "binary": return out;
			case "file": return _fs.writeFileSync(opts.file, out, 'binary');
			case "buffer": {
				if(has_buf) return new Buffer(out, 'utf8');
				else return out.split("").map(function(c) { return c.charCodeAt(0); });
			}
		}
		throw new Error("Unrecognized type " + opts.type);
	}

	/* TODO: test consistency */
	function write_string_type(out, opts) {
		switch(opts.type) {
			case "base64": return Base64.encode(out);
			case "binary": return out;
			case "file": return _fs.writeFileSync(opts.file, out, 'utf8');
			case "buffer": {
				if(has_buf) return new Buffer(out, 'utf8');
				else return out.split("").map(function(c) { return c.charCodeAt(0); });
			}
		}
		throw new Error("Unrecognized type " + opts.type);
	}

	/* TODO: test consistency */
	function write_binary_type(out, opts) {
		switch(opts.type) {
			case "base64":
			case "binary":
				var bstr = "";
				for(var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]);
				return opts.type == 'base64' ? Base64.encode(bstr) : bstr;
			case "file": return _fs.writeFileSync(opts.file, out);
			case "buffer": return out;
			default: throw new Error("Unrecognized type " + opts.type);
		}
	}

	function writeSync(wb, opts) {
		check_wb(wb);
		var o = opts||{};
		switch(o.bookType || 'xlsb') {
			case 'xml':
			case 'xlml': return write_string_type(write_xlml(wb, o), o);
			case 'slk':
			case 'sylk': return write_string_type(write_slk_str(wb, o), o);
			case 'html': return write_string_type(write_htm_str(wb, o), o);
			case 'txt': return write_bstr_type(write_txt_str(wb, o), o);
			case 'csv': return write_string_type(write_csv_str(wb, o), o);
			case 'dif': return write_string_type(write_dif_str(wb, o), o);
			case 'prn': return write_string_type(write_prn_str(wb, o), o);
			case 'fods': return write_string_type(write_ods(wb, o), o);
			case 'biff2': return write_binary_type(write_biff_buf(wb, o), o);
			case 'xlsx':
			case 'xlsm':
			case 'xlsb':
			case 'ods': return write_zip_type(wb, o);
			default: throw new Error ("Unrecognized bookType |" + o.bookType + "|");
		}
	}

	function resolve_book_type(o/*?WriteFileOpts*/) {
		if(!o.bookType) switch(o.file.slice(o.file.lastIndexOf(".")).toLowerCase()) {
			case '.xlsx': o.bookType = 'xlsx'; break;
			case '.xlsm': o.bookType = 'xlsm'; break;
			case '.xlsb': o.bookType = 'xlsb'; break;
			case '.fods': o.bookType = 'fods'; break;
			case '.xlml': o.bookType = 'xlml'; break;
			case '.sylk': o.bookType = 'sylk'; break;
			case '.html': o.bookType = 'html'; break;
			case '.xls': o.bookType = 'biff2'; break;
			case '.xml': o.bookType = 'xml'; break;
			case '.ods': o.bookType = 'ods'; break;
			case '.csv': o.bookType = 'csv'; break;
			case '.txt': o.bookType = 'txt'; break;
			case '.dif': o.bookType = 'dif'; break;
			case '.prn': o.bookType = 'prn'; break;
			case '.slk': o.bookType = 'sylk'; break;
			case '.htm': o.bookType = 'html'; break;
		}
	}

	function writeFileSync(wb, filename, opts) {
		var o = opts||{}; o.type = 'file';
		o.file = filename;
		resolve_book_type(o);
		return writeSync(wb, o);
	}

	function writeFileAsync(filename, wb, opts, cb) {
		var o = opts||{}; o.type = 'file';
		o.file = filename;
		resolve_book_type(o);
		o.type = 'buffer';
		var _cb = cb; if(!(_cb instanceof Function)) _cb = (opts);
		return _fs.writeFile(filename, writeSync(wb, o), _cb);
	}
	function sheet_to_json(sheet, opts){
		if(sheet == null || sheet["!ref"] == null) return [];
		var val = {t:'n',v:0}, header = 0, offset = 1, hdr = [], isempty = true, v=0, vv="";
		var r = {s:{r:0,c:0},e:{r:0,c:0}};
		var o = opts != null ? opts : {};
		var raw = o.raw;
		var defval = o.defval;
		var range = o.range != null ? o.range : sheet["!ref"];
		if(o.header === 1) header = 1;
		else if(o.header === "A") header = 2;
		else if(Array.isArray(o.header)) header = 3;
		switch(typeof range) {
			case 'string': r = safe_decode_range(range); break;
			case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
			default: r = range;
		}
		if(header > 0) offset = 0;
		var rr = encode_row(r.s.r);
		var cols = new Array(r.e.c-r.s.c+1);
		var out = new Array(r.e.r-r.s.r-offset+1);
		var outi = 0, counter = 0;
		var dense = Array.isArray(sheet);
		var R = r.s.r, C = 0, CC = 0;
		if(dense && !sheet[R]) sheet[R] = [];
		for(C = r.s.c; C <= r.e.c; ++C) {
			cols[C] = encode_col(C);
			val = dense ? sheet[R][C] : sheet[cols[C] + rr];
			switch(header) {
				case 1: hdr[C] = C - r.s.c; break;
				case 2: hdr[C] = cols[C]; break;
				case 3: hdr[C] = o.header[C - r.s.c]; break;
				default:
					if(val == null) continue;
					vv = v = format_cell(val, null, o);
					counter = 0;
					for(CC = 0; CC < hdr.length; ++CC) if(hdr[CC] == vv) vv = v + "_" + (++counter);
					hdr[C] = vv;
			}
		}
		var row = (header === 1) ? [] : {};
		for (R = r.s.r + offset; R <= r.e.r; ++R) {
			rr = encode_row(R);
			isempty = true;
			if(header === 1) row = [];
			else {
				row = {};
				if(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }
				else row.__rowNum__ = R;
			}
			if(!dense || sheet[R]) for (C = r.s.c; C <= r.e.c; ++C) {
				val = dense ? sheet[R][C] : sheet[cols[C] + rr];
				if(val === undefined || val.t === undefined) {
					if(defval === undefined) continue;
					if(hdr[C] != null) { row[hdr[C]] = defval; isempty = false; }
					continue;
				}
				v = val.v;
				switch(val.t){
					case 'z': if(v == null) break; continue;
					case 'e': continue;
					case 's': case 'd': case 'b': case 'n': break;
					default: throw new Error('unrecognized type ' + val.t);
				}
				if(hdr[C] != null) {
					if(v == null) {
						if(defval !== undefined) row[hdr[C]] = defval;
						else if(raw && v === null) row[hdr[C]] = null;
						else continue;
					} else {
						row[hdr[C]] = raw ? v : format_cell(val,v,o);
					}
					isempty = false;
				}
			}
			if((isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row;
		}
		out.length = outi;
		return out;
	}

	var qreg = /"/g;
	function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
		var isempty = true;
		var row = "", txt = "", rr = encode_row(R);
		for(var C = r.s.c; C <= r.e.c; ++C) {
			var val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];
			if(val == null) txt = "";
			else if(val.v != null) {
				isempty = false;
				txt = ''+format_cell(val, null, o);
				for(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {txt = "\"" + txt.replace(qreg, '""') + "\""; break; }
				if(txt == "ID") txt = '"ID"';
			} else if(val.f != null && !val.F) {
				isempty = false;
				txt = '=' + val.f; if(txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
			} else txt = "";
			/* NOTE: Excel CSV does not support array formulae */
			row += (C === r.s.c ? "" : FS) + txt;
		}
		if(o.blankrows === false && isempty) return null;
		return row;
	}

	function sheet_to_csv(sheet, opts) {
		var out = [];
		var o = opts == null ? {} : opts;
		if(sheet == null || sheet["!ref"] == null) return "";
		var r = safe_decode_range(sheet["!ref"]);
		var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
		var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
		var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
		var row = "", cols = [];
		o.dense = Array.isArray(sheet);
		for(var C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
		for(var R = r.s.r; R <= r.e.r; ++R) {
			row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
			if(row == null) { continue; }
			if(o.strip) row = row.replace(endregex,"");
			out.push(row + RS);
		}
		delete o.dense;
		return out.join("");
	}

	function sheet_to_txt(sheet, opts) {
		if(!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n";
		var s = sheet_to_csv(sheet, opts);
		if(typeof cptable == 'undefined') return s;
		var o = cptable.utils.encode(1200, s);
		return "\xff\xfe" + o;
	}

	function sheet_to_formulae(sheet) {
		var y = "", x, val="";
		if(sheet == null || sheet["!ref"] == null) return [];
		var r = safe_decode_range(sheet['!ref']), rr = "", cols = [], C;
		var cmds = new Array((r.e.r-r.s.r+1)*(r.e.c-r.s.c+1));
		var i = 0;
		var dense = Array.isArray(sheet);
		for(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
		for(var R = r.s.r; R <= r.e.r; ++R) {
			rr = encode_row(R);
			for(C = r.s.c; C <= r.e.c; ++C) {
				y = cols[C] + rr;
				x = dense ? (sheet[R]||[])[C] : sheet[y];
				val = "";
				if(x === undefined) continue;
				else if(x.F != null) {
					y = x.F;
					if(!x.f) continue;
					val = x.f;
					if(y.indexOf(":") == -1) y = y + ":" + y;
				}
				if(x.f != null) val = x.f;
				else if(x.t == 'z') continue;
				else if(x.t == 'n' && x.v != null) val = "" + x.v;
				else if(x.t == 'b') val = x.v ? "TRUE" : "FALSE";
				else if(x.w !== undefined) val = "'" + x.w;
				else if(x.v === undefined) continue;
				else if(x.t == 's') val = "'" + x.v;
				else val = ""+x.v;
				cmds[i++] = y + "=" + val;
			}
		}
		cmds.length = i;
		return cmds;
	}

	function json_to_sheet(js, opts) {
		var o = opts || {};
		var ws = ({});
		var range = ({s: {c:0, r:0}, e: {c:0, r:js.length}});
		var hdr = o.header || [], C = 0;

		for(var R = 0; R != js.length; ++R) {
			Object.keys(js[R]).filter(function(x) { return js[R].hasOwnProperty(x); }).forEach(function(k) {
				if((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;
				var v = js[R][k];
				var t = 'z';
				if(typeof v == 'number') t = 'n';
				else if(typeof v == 'boolean') t = 'b';
				else if(typeof v == 'string') t = 's';
				else if(v instanceof Date) t = 'd';
				ws[encode_cell({c:C,r:R+1})] = {t:t, v:v};
			});
		}
		range.e.c = hdr.length - 1;
		for(C = 0; C < hdr.length; ++C) ws[encode_col(C) + "1"] = {t:'s', v:hdr[C]};
		ws['!ref'] = encode_range(range);
		return ws;
	}

	var utils = {
		encode_col: encode_col,
		encode_row: encode_row,
		encode_cell: encode_cell,
		encode_range: encode_range,
		decode_col: decode_col,
		decode_row: decode_row,
		split_cell: split_cell,
		decode_cell: decode_cell,
		decode_range: decode_range,
		format_cell: format_cell,
		get_formulae: sheet_to_formulae,
		make_csv: sheet_to_csv,
		make_json: sheet_to_json,
		make_formulae: sheet_to_formulae,
		aoa_to_sheet: aoa_to_sheet,
		json_to_sheet: json_to_sheet,
		table_to_sheet: parse_dom_table,
		table_to_book: table_to_book,
		sheet_to_csv: sheet_to_csv,
		sheet_to_json: sheet_to_json,
		sheet_to_formulae: sheet_to_formulae,
		sheet_to_row_object_array: sheet_to_json
	};

	(function(utils) {
	utils.consts = utils.consts || {};
	function add_consts(R) { R.forEach(function(a){ utils.consts[a[0]] = a[1]; }); }

	function get_default(x, y, z) { return x[y] != null ? x[y] : (x[y] = z); }

	/* get cell, creating a stub if necessary */
	function ws_get_cell_stub(ws, R, C) {
		/* A1 cell address */
		if(typeof R == "string") return ws[R] || (ws[R] = {t:'z'});
		/* cell address object */
		if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
		/* R and C are 0-based indices */
		return ws_get_cell_stub(ws, encode_cell({r:R,c:C}));
	}

	/* find sheet index for given name / validate index */
	function wb_sheet_idx(wb, sh) {
		if(typeof sh == "number") {
			if(sh >= 0 && wb.SheetNames.length > sh) return sh;
			throw new Error("Cannot find sheet # " + sh);
		} else if(typeof sh == "string") {
			var idx = wb.SheetNames.indexOf(sh);
			if(idx > -1) return idx;
			throw new Error("Cannot find sheet name |" + sh + "|");
		} else throw new Error("Cannot find sheet |" + sh + "|");
	}

	/* simple blank workbook object */
	utils.book_new = function() {
		return { SheetNames: [], Sheets: {} };
	};

	/* add a worksheet to the end of a given workbook */
	utils.book_append_sheet = function(wb, ws, name) {
		if(!name) for(var i = 1; i <= 0xFFFF; ++i) if(wb.SheetNames.indexOf("Sheet" + i) == -1) break;
		check_ws_name(name);
		if(wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");

		wb.SheetNames.push(name);
		wb.Sheets[name] = ws;
	};

	/* set sheet visibility (visible/hidden/very hidden) */
	utils.book_set_sheet_visibility = function(wb, sh, vis) {
		get_default(wb,"Workbook",{});
		get_default(wb.Workbook,"Sheets",[]);

		var idx = wb_sheet_idx(wb, sh);
		get_default(wb.Workbook.Sheets,idx, {});

		switch(vis) {
			case 0: case 1: case 2: break;
			default: throw new Error("Bad sheet visibility setting " + vis);
		}
		wb.Workbook.Sheets[idx].Hidden = vis;
	};
	add_consts([
		["SHEET_VISIBLE", 0],
		["SHEET_HIDDEN", 1],
		["SHEET_VERY_HIDDEN", 2]
	]);

	/* set number format */
	utils.cell_set_number_format = function(cell, fmt) {
		cell.z = fmt;
		return cell;
	};

	/* set cell hyperlink */
	utils.cell_set_hyperlink = function(cell, target, tooltip) {
		if(!target) {
			delete cell.l;
		} else {
			cell.l = { Target: target };
			if(tooltip) cell.l.Tooltip = tooltip;
		}
		return cell;
	};

	/* add to cell comments */
	utils.cell_add_comment = function(cell, text, author) {
		if(!cell.c) cell.c = [];
		cell.c.push({t:text, a:author||"SheetJS"});
	};

	/* set array formula and flush related cells */
	utils.sheet_set_array_formula = function(ws, range, formula) {
		var rng = typeof range != "string" ? range : safe_decode_range(range);
		var rngstr = typeof range == "string" ? range : encode_range(range);
		for(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {
			var cell = ws_get_cell_stub(ws, R, C);
			cell.t = 'n';
			cell.F = rngstr;
			delete cell.v;
			if(R == rng.s.r && C == rng.s.c) cell.f = formula;
		}
		return ws;
	};

	return utils;
	})(utils);

	if(has_buf && "function" != 'undefined') (function() {
		var Readable = __webpack_require__(7).Readable;

		var write_csv_stream = function(sheet, opts) {
			var stream = Readable();
			var out = "";
			var o = opts == null ? {} : opts;
			if(sheet == null || sheet["!ref"] == null) { stream.push(null); return stream; }
			var r = safe_decode_range(sheet["!ref"]);
			var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
			var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
			var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
			var row = "", cols = [];
			o.dense = Array.isArray(sheet);
			for(var C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
			var R = r.s.r;
			stream._read = function() {
				if(R > r.e.r) return stream.push(null);
				while(R <= r.e.r) {
					row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
					if(row == null) { ++R; continue; }
					if(o.strip) row = row.replace(endregex,"");
					stream.push(row + RS);
					++R;
					break;
				}
			};
			return stream;
		};

		var HTML_BEGIN = "<html><body><table>";
		var HTML_END = "</table></body></html>";

		var write_html_stream = function(sheet, opts) {
			var stream = Readable();

			var o = [];
			var r = decode_range(sheet['!ref']), cell;
			o.dense = Array.isArray(sheet);
			stream.push(HTML_BEGIN);

			var R = r.s.r;
			var end = false;
			stream._read = function() {
				if(R > r.e.r) {
					if(!end) { end = true; stream.push(HTML_END); }
					return stream.push(null);
				}
				while(R <= r.e.r) {
					stream.push(HTML_._row(sheet, r, R, o));
					++R;
					break;
				}
			};
			return stream;
		};

		XLSX.stream = {
			to_html: write_html_stream,
			to_csv: write_csv_stream
		};
	})();

	XLSX.parse_xlscfb = parse_xlscfb;
	XLSX.parse_ods = parse_ods;
	XLSX.parse_fods = parse_fods;
	XLSX.write_ods = write_ods;
	XLSX.parse_zip = parse_zip;
	XLSX.read = readSync; //xlsread
	XLSX.readFile = readFileSync; //readFile
	XLSX.readFileSync = readFileSync;
	XLSX.write = writeSync;
	XLSX.writeFile = writeFileSync;
	XLSX.writeFileSync = writeFileSync;
	XLSX.writeFileAsync = writeFileAsync;
	XLSX.utils = utils;
	XLSX.CFB = CFB;
	XLSX.SSF = SSF;
	})( true ? exports : undefined);
	/*exported XLS */
	var XLS = XLSX;
	/*exported ODS */
	var ODS = XLSX;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/*jshint -W100 */
	var cptable = {version:"1.8.0"};
	cptable[437] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[620] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàąçêëèïîćÄĄĘęłôöĆûùŚÖÜ¢Ł¥śƒŹŻóÓńŃźż¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[737] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[850] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[852] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[857] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[861] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[865] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[866] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[874] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[895] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ČüéďäĎŤčěĚĹÍľǪÄÁÉžŽôöÓůÚýÖÜŠĽÝŘťáíóúňŇŮÔšřŕŔ¼§«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[932] = (function(){ var d = [], e = {}, D = [], j;
	D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ��������������������������������".split("");
	for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
	D[129] = "����������������������������������������������������������������　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈〉《》「」『』【】＋－±×�÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓�����������∈∋⊆⊇⊂⊃∪∩��������∧∨￢⇒⇔∀∃�����������∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬�������Å‰♯♭♪†‡¶����◯���".split("");
	for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
	D[130] = "�������������������������������������������������������������������������������０１２３４５６７８９�������ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ�������ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ����ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん��������������".split("");
	for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
	D[131] = "����������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミ�ムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ��������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�����������������������������������������".split("");
	for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
	D[132] = "����������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмн�опрстуфхцчшщъыьэюя�������������─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂�����������������������������������������������������������������".split("");
	for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
	D[135] = "����������������������������������������������������������������①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡��������㍻�〝〟№㏍℡㊤㊥㊦㊧㊨㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪���������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
	D[136] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭���".split("");
	for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
	D[137] = "����������������������������������������������������������������院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円�園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改���".split("");
	for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
	D[138] = "����������������������������������������������������������������魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫�橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄���".split("");
	for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
	D[139] = "����������������������������������������������������������������機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救�朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈���".split("");
	for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
	D[140] = "����������������������������������������������������������������掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨�劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向���".split("");
	for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
	D[141] = "����������������������������������������������������������������后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降�項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷���".split("");
	for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
	D[142] = "����������������������������������������������������������������察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止�死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周���".split("");
	for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
	D[143] = "����������������������������������������������������������������宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳�準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾���".split("");
	for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
	D[144] = "����������������������������������������������������������������拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨�逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線���".split("");
	for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
	D[145] = "����������������������������������������������������������������繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻�操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只���".split("");
	for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
	D[146] = "����������������������������������������������������������������叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄�逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓���".split("");
	for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
	D[147] = "����������������������������������������������������������������邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬�凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入���".split("");
	for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
	D[148] = "����������������������������������������������������������������如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅�楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美���".split("");
	for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
	D[149] = "����������������������������������������������������������������鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷�斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋���".split("");
	for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
	D[150] = "����������������������������������������������������������������法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆�摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒���".split("");
	for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
	D[151] = "����������������������������������������������������������������諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲�沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯���".split("");
	for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
	D[152] = "����������������������������������������������������������������蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕��������������������������������������������弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲���".split("");
	for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
	D[153] = "����������������������������������������������������������������僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭�凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨���".split("");
	for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
	D[154] = "����������������������������������������������������������������咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸�噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩���".split("");
	for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
	D[155] = "����������������������������������������������������������������奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀�它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏���".split("");
	for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
	D[156] = "����������������������������������������������������������������廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠�怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛���".split("");
	for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
	D[157] = "����������������������������������������������������������������戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫�捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼���".split("");
	for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
	D[158] = "����������������������������������������������������������������曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎�梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣���".split("");
	for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
	D[159] = "����������������������������������������������������������������檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯�麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌���".split("");
	for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
	D[224] = "����������������������������������������������������������������漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝�烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱���".split("");
	for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
	D[225] = "����������������������������������������������������������������瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿�痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬���".split("");
	for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
	D[226] = "����������������������������������������������������������������磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰�窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆���".split("");
	for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
	D[227] = "����������������������������������������������������������������紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷�縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋���".split("");
	for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
	D[228] = "����������������������������������������������������������������隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤�艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈���".split("");
	for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
	D[229] = "����������������������������������������������������������������蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬�蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞���".split("");
	for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
	D[230] = "����������������������������������������������������������������襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧�諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊���".split("");
	for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
	D[231] = "����������������������������������������������������������������蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜�轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮���".split("");
	for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
	D[232] = "����������������������������������������������������������������錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙�閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰���".split("");
	for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
	D[233] = "����������������������������������������������������������������顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃�騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈���".split("");
	for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
	D[234] = "����������������������������������������������������������������鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯�黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙�������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
	D[237] = "����������������������������������������������������������������纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏�塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱���".split("");
	for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
	D[238] = "����������������������������������������������������������������犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙�蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑��ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ￢￤＇＂���".split("");
	for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
	D[250] = "����������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊�兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯���".split("");
	for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
	D[251] = "����������������������������������������������������������������涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神�祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙���".split("");
	for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
	D[252] = "����������������������������������������������������������������髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
	return {"enc": e, "dec": d }; })();
	cptable[936] = (function(){ var d = [], e = {}, D = [], j;
	D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
	D[129] = "����������������������������������������������������������������丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪乫乬乭乮乯乲乴乵乶乷乸乹乺乻乼乽乿亀亁亂亃亄亅亇亊�亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂伃伄伅伆伇伈伋伌伒伓伔伕伖伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾伿佀佁佂佄佅佇佈佉佊佋佌佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢�".split("");
	for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
	D[130] = "����������������������������������������������������������������侤侫侭侰侱侲侳侴侶侷侸侹侺侻侼侽侾俀俁係俆俇俈俉俋俌俍俒俓俔俕俖俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿倀倁倂倃倄倅倆倇倈倉倊�個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯倰倱倲倳倴倵倶倷倸倹倻倽倿偀偁偂偄偅偆偉偊偋偍偐偑偒偓偔偖偗偘偙偛偝偞偟偠偡偢偣偤偦偧偨偩偪偫偭偮偯偰偱偲偳側偵偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傤傦傪傫傭傮傯傰傱傳傴債傶傷傸傹傼�".split("");
	for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
	D[131] = "����������������������������������������������������������������傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎僐僑僒僓僔僕僗僘僙僛僜僝僞僟僠僡僢僣僤僥僨僩僪僫僯僰僱僲僴僶僷僸價僺僼僽僾僿儀儁儂儃億儅儈�儉儊儌儍儎儏儐儑儓儔儕儖儗儘儙儚儛儜儝儞償儠儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾兂兇兊兌兎兏児兒兓兗兘兙兛兝兞兟兠兡兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦冧冨冩冪冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒凓凔凕凖凗�".split("");
	for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
	D[132] = "����������������������������������������������������������������凘凙凚凜凞凟凢凣凥処凧凨凩凪凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄剅剆則剈剉剋剎剏剒剓剕剗剘�剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳剴創剶剷剸剹剺剻剼剾劀劃劄劅劆劇劉劊劋劌劍劎劏劑劒劔劕劖劗劘劙劚劜劤劥劦劧劮劯劰労劵劶劷劸効劺劻劼劽勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務勚勛勜勝勞勠勡勢勣勥勦勧勨勩勪勫勬勭勮勯勱勲勳勴勵勶勷勸勻勼勽匁匂匃匄匇匉匊匋匌匎�".split("");
	for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
	D[133] = "����������������������������������������������������������������匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯匰匱匲匳匴匵匶匷匸匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏�厐厑厒厓厔厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯厰厱厲厳厴厵厷厸厹厺厼厽厾叀參叄叅叆叇収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝呞呟呠呡呣呥呧呩呪呫呬呭呮呯呰呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡�".split("");
	for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
	D[134] = "����������������������������������������������������������������咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠員哢哣哤哫哬哯哰哱哴哵哶哷哸哹哻哾唀唂唃唄唅唈唊唋唌唍唎唒唓唕唖唗唘唙唚唜唝唞唟唡唥唦�唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋啌啍啎問啑啒啓啔啗啘啙啚啛啝啞啟啠啢啣啨啩啫啯啰啱啲啳啴啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠喡喢喣喤喥喦喨喩喪喫喬喭單喯喰喲喴営喸喺喼喿嗀嗁嗂嗃嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗嗘嗙嗚嗛嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸嗹嗺嗻嗼嗿嘂嘃嘄嘅�".split("");
	for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
	D[135] = "����������������������������������������������������������������嘆嘇嘊嘋嘍嘐嘑嘒嘓嘔嘕嘖嘗嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀噁噂噃噄噅噆噇噈噉噊噋噏噐噑噒噓噕噖噚噛噝噞噟噠噡�噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽噾噿嚀嚁嚂嚃嚄嚇嚈嚉嚊嚋嚌嚍嚐嚑嚒嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚰嚱嚲嚳嚴嚵嚶嚸嚹嚺嚻嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囋囌囍囎囏囐囑囒囓囕囖囘囙囜団囥囦囧囨囩囪囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國圌圍圎圏圐圑�".split("");
	for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
	D[136] = "����������������������������������������������������������������園圓圔圕圖圗團圙圚圛圝圞圠圡圢圤圥圦圧圫圱圲圴圵圶圷圸圼圽圿坁坃坄坅坆坈坉坋坒坓坔坕坖坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀�垁垇垈垉垊垍垎垏垐垑垔垕垖垗垘垙垚垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹垺垻垼垽垾垿埀埁埄埅埆埇埈埉埊埌埍埐埑埓埖埗埛埜埞埡埢埣埥埦埧埨埩埪埫埬埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥堦堧堨堩堫堬堭堮堯報堲堳場堶堷堸堹堺堻堼堽�".split("");
	for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
	D[137] = "����������������������������������������������������������������堾堿塀塁塂塃塅塆塇塈塉塊塋塎塏塐塒塓塕塖塗塙塚塛塜塝塟塠塡塢塣塤塦塧塨塩塪塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塿墂墄墆墇墈墊墋墌�墍墎墏墐墑墔墕墖増墘墛墜墝墠墡墢墣墤墥墦墧墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墽墾墿壀壂壃壄壆壇壈壉壊壋壌壍壎壏壐壒壓壔壖壗壘壙壚壛壜壝壞壟壠壡壢壣壥壦壧壨壩壪壭壯壱売壴壵壷壸壺壻壼壽壾壿夀夁夃夅夆夈変夊夋夌夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻�".split("");
	for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
	D[138] = "����������������������������������������������������������������夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛奜奝奞奟奡奣奤奦奧奨奩奪奫奬奭奮奯奰奱奲奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦�妧妬妭妰妱妳妴妵妶妷妸妺妼妽妿姀姁姂姃姄姅姇姈姉姌姍姎姏姕姖姙姛姞姟姠姡姢姤姦姧姩姪姫姭姮姯姰姱姲姳姴姵姶姷姸姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪娫娬娭娮娯娰娳娵娷娸娹娺娻娽娾娿婁婂婃婄婅婇婈婋婌婍婎婏婐婑婒婓婔婖婗婘婙婛婜婝婞婟婠�".split("");
	for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
	D[139] = "����������������������������������������������������������������婡婣婤婥婦婨婩婫婬婭婮婯婰婱婲婳婸婹婻婼婽婾媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媓媔媕媖媗媘媙媜媝媞媟媠媡媢媣媤媥媦媧媨媩媫媬�媭媮媯媰媱媴媶媷媹媺媻媼媽媿嫀嫃嫄嫅嫆嫇嫈嫊嫋嫍嫎嫏嫐嫑嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬嫭嫮嫯嫰嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬳嬵嬶嬸嬹嬺嬻嬼嬽嬾嬿孁孂孃孄孅孆孇�".split("");
	for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
	D[140] = "����������������������������������������������������������������孈孉孊孋孌孍孎孏孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏�寑寔寕寖寗寘寙寚寛寜寠寢寣實寧審寪寫寬寭寯寱寲寳寴寵寶寷寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧屨屩屪屫屬屭屰屲屳屴屵屶屷屸屻屼屽屾岀岃岄岅岆岇岉岊岋岎岏岒岓岕岝岞岟岠岡岤岥岦岧岨�".split("");
	for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
	D[141] = "����������������������������������������������������������������岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅峆峇峈峉峊峌峍峎峏峐峑峓峔峕峖峗峘峚峛峜峝峞峟峠峢峣峧峩峫峬峮峯峱峲峳峴峵島峷峸峹峺峼峽峾峿崀�崁崄崅崈崉崊崋崌崍崏崐崑崒崓崕崗崘崙崚崜崝崟崠崡崢崣崥崨崪崫崬崯崰崱崲崳崵崶崷崸崹崺崻崼崿嵀嵁嵂嵃嵄嵅嵆嵈嵉嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵙嵚嵜嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵪嵭嵮嵰嵱嵲嵳嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶚嶛嶜嶞嶟嶠�".split("");
	for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
	D[142] = "����������������������������������������������������������������嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巆巇巈巉巊巋巌巎巏巐巑巒巓巔巕巖巗巘巙巚巜巟巠巣巤巪巬巭�巰巵巶巸巹巺巻巼巿帀帄帇帉帊帋帍帎帒帓帗帞帟帠帡帢帣帤帥帨帩帪師帬帯帰帲帳帴帵帶帹帺帾帿幀幁幃幆幇幈幉幊幋幍幎幏幐幑幒幓幖幗幘幙幚幜幝幟幠幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨庩庪庫庬庮庯庰庱庲庴庺庻庼庽庿廀廁廂廃廄廅�".split("");
	for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
	D[143] = "����������������������������������������������������������������廆廇廈廋廌廍廎廏廐廔廕廗廘廙廚廜廝廞廟廠廡廢廣廤廥廦廧廩廫廬廭廮廯廰廱廲廳廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤�弨弫弬弮弰弲弳弴張弶強弸弻弽弾弿彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢徣徤徥徦徧復徫徬徯徰徱徲徳徴徶徸徹徺徻徾徿忀忁忂忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇�".split("");
	for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
	D[144] = "����������������������������������������������������������������怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰怱怲怳怴怶怷怸怹怺怽怾恀恄恅恆恇恈恉恊恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀�悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽悾悿惀惁惂惃惄惇惈惉惌惍惎惏惐惒惓惔惖惗惙惛惞惡惢惣惤惥惪惱惲惵惷惸惻惼惽惾惿愂愃愄愅愇愊愋愌愐愑愒愓愔愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾慀慁慂慃慄慅慆�".split("");
	for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
	D[145] = "����������������������������������������������������������������慇慉態慍慏慐慒慓慔慖慗慘慙慚慛慜慞慟慠慡慣慤慥慦慩慪慫慬慭慮慯慱慲慳慴慶慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憌憍憏憐憑憒憓憕�憖憗憘憙憚憛憜憞憟憠憡憢憣憤憥憦憪憫憭憮憯憰憱憲憳憴憵憶憸憹憺憻憼憽憿懀懁懃懄懅懆懇應懌懍懎懏懐懓懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懧懨懩懪懫懬懭懮懯懰懱懲懳懴懶懷懸懹懺懻懼懽懾戀戁戂戃戄戅戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸戹戺戻戼扂扄扅扆扊�".split("");
	for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
	D[146] = "����������������������������������������������������������������扏扐払扖扗扙扚扜扝扞扟扠扡扢扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋抌抍抎抏抐抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁�拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳挴挵挶挷挸挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖捗捘捙捚捛捜捝捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙掚掛掜掝掞掟採掤掦掫掯掱掲掵掶掹掻掽掿揀�".split("");
	for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
	D[147] = "����������������������������������������������������������������揁揂揃揅揇揈揊揋揌揑揓揔揕揗揘揙揚換揜揝揟揢揤揥揦揧揨揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆搇搈搉搊損搎搑搒搕搖搗搘搙搚搝搟搢搣搤�搥搧搨搩搫搮搯搰搱搲搳搵搶搷搸搹搻搼搾摀摂摃摉摋摌摍摎摏摐摑摓摕摖摗摙摚摛摜摝摟摠摡摢摣摤摥摦摨摪摫摬摮摯摰摱摲摳摴摵摶摷摻摼摽摾摿撀撁撃撆撈撉撊撋撌撍撎撏撐撓撔撗撘撚撛撜撝撟撠撡撢撣撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆擇擈擉擊擋擌擏擑擓擔擕擖擙據�".split("");
	for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
	D[148] = "����������������������������������������������������������������擛擜擝擟擠擡擣擥擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攁攂攃攄攅攆攇攈攊攋攌攍攎攏攐攑攓攔攕攖攗攙攚攛攜攝攞攟攠攡�攢攣攤攦攧攨攩攪攬攭攰攱攲攳攷攺攼攽敀敁敂敃敄敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數敹敺敻敼敽敾敿斀斁斂斃斄斅斆斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱斲斳斴斵斶斷斸斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘旙旚旛旜旝旞旟旡旣旤旪旫�".split("");
	for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
	D[149] = "����������������������������������������������������������������旲旳旴旵旸旹旻旼旽旾旿昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷昸昹昺昻昽昿晀時晄晅晆晇晈晉晊晍晎晐晑晘�晙晛晜晝晞晠晢晣晥晧晩晪晫晬晭晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘暙暚暛暜暞暟暠暡暢暣暤暥暦暩暪暫暬暭暯暰暱暲暳暵暶暷暸暺暻暼暽暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曚曞曟曠曡曢曣曤曥曧曨曪曫曬曭曮曯曱曵曶書曺曻曽朁朂會�".split("");
	for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
	D[150] = "����������������������������������������������������������������朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠朡朢朣朤朥朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗杘杙杚杛杝杢杣杤杦杧杫杬杮東杴杶�杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹枺枻枼枽枾枿柀柂柅柆柇柈柉柊柋柌柍柎柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵柶柷柸柹柺査柼柾栁栂栃栄栆栍栐栒栔栕栘栙栚栛栜栞栟栠栢栣栤栥栦栧栨栫栬栭栮栯栰栱栴栵栶栺栻栿桇桋桍桏桒桖桗桘桙桚桛�".split("");
	for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
	D[151] = "����������������������������������������������������������������桜桝桞桟桪桬桭桮桯桰桱桲桳桵桸桹桺桻桼桽桾桿梀梂梄梇梈梉梊梋梌梍梎梐梑梒梔梕梖梘梙梚梛梜條梞梟梠梡梣梤梥梩梪梫梬梮梱梲梴梶梷梸�梹梺梻梼梽梾梿棁棃棄棅棆棇棈棊棌棎棏棐棑棓棔棖棗棙棛棜棝棞棟棡棢棤棥棦棧棨棩棪棫棬棭棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆椇椈椉椊椌椏椑椓椔椕椖椗椘椙椚椛検椝椞椡椢椣椥椦椧椨椩椪椫椬椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楕楖楘楙楛楜楟�".split("");
	for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
	D[152] = "����������������������������������������������������������������楡楢楤楥楧楨楩楪楬業楯楰楲楳楴極楶楺楻楽楾楿榁榃榅榊榋榌榎榏榐榑榒榓榖榗榙榚榝榞榟榠榡榢榣榤榥榦榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽�榾榿槀槂槃槄槅槆槇槈槉構槍槏槑槒槓槕槖槗様槙槚槜槝槞槡槢槣槤槥槦槧槨槩槪槫槬槮槯槰槱槳槴槵槶槷槸槹槺槻槼槾樀樁樂樃樄樅樆樇樈樉樋樌樍樎樏樐樑樒樓樔樕樖標樚樛樜樝樞樠樢樣樤樥樦樧権樫樬樭樮樰樲樳樴樶樷樸樹樺樻樼樿橀橁橂橃橅橆橈橉橊橋橌橍橎橏橑橒橓橔橕橖橗橚�".split("");
	for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
	D[153] = "����������������������������������������������������������������橜橝橞機橠橢橣橤橦橧橨橩橪橫橬橭橮橯橰橲橳橴橵橶橷橸橺橻橽橾橿檁檂檃檅檆檇檈檉檊檋檌檍檏檒檓檔檕檖檘檙檚檛檜檝檞檟檡檢檣檤檥檦�檧檨檪檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欥欦欨欩欪欫欬欭欮�".split("");
	for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
	D[154] = "����������������������������������������������������������������欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍歎歏歐歑歒歓歔歕歖歗歘歚歛歜歝歞歟歠歡歨歩歫歬歭歮歯歰歱歲歳歴歵歶歷歸歺歽歾歿殀殅殈�殌殎殏殐殑殔殕殗殘殙殜殝殞殟殠殢殣殤殥殦殧殨殩殫殬殭殮殯殰殱殲殶殸殹殺殻殼殽殾毀毃毄毆毇毈毉毊毌毎毐毑毘毚毜毝毞毟毠毢毣毤毥毦毧毨毩毬毭毮毰毱毲毴毶毷毸毺毻毼毾毿氀氁氂氃氄氈氉氊氋氌氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋汌汍汎汏汑汒汓汖汘�".split("");
	for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
	D[155] = "����������������������������������������������������������������汙汚汢汣汥汦汧汫汬汭汮汯汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘�泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟洠洡洢洣洤洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽浾浿涀涁涃涄涆涇涊涋涍涏涐涒涖涗涘涙涚涜涢涥涬涭涰涱涳涴涶涷涹涺涻涼涽涾淁淂淃淈淉淊�".split("");
	for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
	D[156] = "����������������������������������������������������������������淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽淾淿渀渁渂渃渄渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵�渶渷渹渻渼渽渾渿湀湁湂湅湆湇湈湉湊湋湌湏湐湑湒湕湗湙湚湜湝湞湠湡湢湣湤湥湦湧湨湩湪湬湭湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽満溁溂溄溇溈溊溋溌溍溎溑溒溓溔溕準溗溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪滫滬滭滮滯�".split("");
	for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
	D[157] = "����������������������������������������������������������������滰滱滲滳滵滶滷滸滺滻滼滽滾滿漀漁漃漄漅漇漈漊漋漌漍漎漐漑漒漖漗漘漙漚漛漜漝漞漟漡漢漣漥漦漧漨漬漮漰漲漴漵漷漸漹漺漻漼漽漿潀潁潂�潃潄潅潈潉潊潌潎潏潐潑潒潓潔潕潖潗潙潚潛潝潟潠潡潣潤潥潧潨潩潪潫潬潯潰潱潳潵潶潷潹潻潽潾潿澀澁澂澃澅澆澇澊澋澏澐澑澒澓澔澕澖澗澘澙澚澛澝澞澟澠澢澣澤澥澦澨澩澪澫澬澭澮澯澰澱澲澴澵澷澸澺澻澼澽澾澿濁濃濄濅濆濇濈濊濋濌濍濎濏濐濓濔濕濖濗濘濙濚濛濜濝濟濢濣濤濥�".split("");
	for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
	D[158] = "����������������������������������������������������������������濦濧濨濩濪濫濬濭濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀒瀓瀔瀕瀖瀗瀘瀙瀜瀝瀞瀟瀠瀡瀢瀤瀥瀦瀧瀨瀩瀪�瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀶瀷瀸瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灍灎灐灑灒灓灔灕灖灗灘灙灚灛灜灝灟灠灡灢灣灤灥灦灧灨灩灪灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞炟炠炡炢炣炤炥炦炧炨炩炪炰炲炴炵炶為炾炿烄烅烆烇烉烋烌烍烎烏烐烑烒烓烔烕烖烗烚�".split("");
	for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
	D[159] = "����������������������������������������������������������������烜烝烞烠烡烢烣烥烪烮烰烱烲烳烴烵烶烸烺烻烼烾烿焀焁焂焃焄焅焆焇焈焋焌焍焎焏焑焒焔焗焛焜焝焞焟焠無焢焣焤焥焧焨焩焪焫焬焭焮焲焳焴�焵焷焸焹焺焻焼焽焾焿煀煁煂煃煄煆煇煈煉煋煍煏煐煑煒煓煔煕煖煗煘煙煚煛煝煟煠煡煢煣煥煩煪煫煬煭煯煰煱煴煵煶煷煹煻煼煾煿熀熁熂熃熅熆熇熈熉熋熌熍熎熐熑熒熓熕熖熗熚熛熜熝熞熡熢熣熤熥熦熧熩熪熫熭熮熯熰熱熲熴熶熷熸熺熻熼熽熾熿燀燁燂燄燅燆燇燈燉燊燋燌燍燏燐燑燒燓�".split("");
	for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
	D[160] = "����������������������������������������������������������������燖燗燘燙燚燛燜燝燞營燡燢燣燤燦燨燩燪燫燬燭燯燰燱燲燳燴燵燶燷燸燺燻燼燽燾燿爀爁爂爃爄爅爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚�爛爜爞爟爠爡爢爣爤爥爦爧爩爫爭爮爯爲爳爴爺爼爾牀牁牂牃牄牅牆牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅犆犇犈犉犌犎犐犑犓犔犕犖犗犘犙犚犛犜犝犞犠犡犢犣犤犥犦犧犨犩犪犫犮犱犲犳犵犺犻犼犽犾犿狀狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛�".split("");
	for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
	D[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split("");
	for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
	D[162] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split("");
	for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
	D[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
	for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
	D[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
	for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
	D[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
	for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
	D[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������︵︶︹︺︿﹀︽︾﹁﹂﹃﹄��︻︼︷︸︱�︳︴����������".split("");
	for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
	D[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
	for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
	D[168] = "����������������������������������������������������������������ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇�█▉▊▋▌▍▎▏▓▔▕▼▽◢◣◤◥☉⊕〒〝〞�����������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ�ńň�ɡ����ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split("");
	for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
	D[169] = "����������������������������������������������������������������〡〢〣〤〥〦〧〨〩㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤�℡㈱�‐���ー゛゜ヽヾ〆ゝゞ﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡�﹢﹣﹤﹥﹦﹨﹩﹪﹫�������������〇�������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split("");
	for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
	D[170] = "����������������������������������������������������������������狜狝狟狢狣狤狥狦狧狪狫狵狶狹狽狾狿猀猂猄猅猆猇猈猉猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀獁獂獃獄獅獆獇獈�獉獊獋獌獎獏獑獓獔獕獖獘獙獚獛獜獝獞獟獡獢獣獤獥獦獧獨獩獪獫獮獰獱�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
	D[171] = "����������������������������������������������������������������獲獳獴獵獶獷獸獹獺獻獼獽獿玀玁玂玃玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣玤玥玦玧玨玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃珄珅珆珇�珋珌珎珒珓珔珕珖珗珘珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳珴珵珶珷�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
	D[172] = "����������������������������������������������������������������珸珹珺珻珼珽現珿琀琁琂琄琇琈琋琌琍琎琑琒琓琔琕琖琗琘琙琜琝琞琟琠琡琣琤琧琩琫琭琯琱琲琷琸琹琺琻琽琾琿瑀瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍�瑎瑏瑐瑑瑒瑓瑔瑖瑘瑝瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑮瑯瑱瑲瑳瑴瑵瑸瑹瑺�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
	D[173] = "����������������������������������������������������������������瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑璒璓璔璕璖璗璘璙璚璛璝璟璠璡璢璣璤璥璦璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇�瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓓瓔瓕瓖瓗瓘瓙瓚瓛瓝瓟瓡瓥瓧瓨瓩瓪瓫瓬瓭瓰瓱瓲�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
	D[174] = "����������������������������������������������������������������瓳瓵瓸瓹瓺瓻瓼瓽瓾甀甁甂甃甅甆甇甈甉甊甋甌甎甐甒甔甕甖甗甛甝甞甠甡產産甤甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘�畝畞畟畠畡畢畣畤畧畨畩畫畬畭畮畯異畱畳畵當畷畺畻畼畽畾疀疁疂疄疅疇�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
	D[175] = "����������������������������������������������������������������疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦疧疨疩疪疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇�瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
	D[176] = "����������������������������������������������������������������癅癆癇癈癉癊癋癎癏癐癑癒癓癕癗癘癙癚癛癝癟癠癡癢癤癥癦癧癨癩癪癬癭癮癰癱癲癳癴癵癶癷癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛�皜皝皞皟皠皡皢皣皥皦皧皨皩皪皫皬皭皯皰皳皵皶皷皸皹皺皻皼皽皾盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split("");
	for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
	D[177] = "����������������������������������������������������������������盄盇盉盋盌盓盕盙盚盜盝盞盠盡盢監盤盦盧盨盩盪盫盬盭盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎眏眐眑眒眓眔眕眖眗眘眛眜眝眞眡眣眤眥眧眪眫�眬眮眰眱眲眳眴眹眻眽眾眿睂睄睅睆睈睉睊睋睌睍睎睏睒睓睔睕睖睗睘睙睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split("");
	for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
	D[178] = "����������������������������������������������������������������睝睞睟睠睤睧睩睪睭睮睯睰睱睲睳睴睵睶睷睸睺睻睼瞁瞂瞃瞆瞇瞈瞉瞊瞋瞏瞐瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶瞷瞸瞹瞺�瞼瞾矀矁矂矃矄矅矆矇矈矉矊矋矌矎矏矐矑矒矓矔矕矖矘矙矚矝矞矟矠矡矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split("");
	for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
	D[179] = "����������������������������������������������������������������矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃砄砅砆砇砈砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚�硛硜硞硟硠硡硢硣硤硥硦硧硨硩硯硰硱硲硳硴硵硶硸硹硺硻硽硾硿碀碁碂碃场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split("");
	for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
	D[180] = "����������������������������������������������������������������碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨碩碪碫碬碭碮碯碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚磛磜磝磞磟磠磡磢磣�磤磥磦磧磩磪磫磭磮磯磰磱磳磵磶磸磹磻磼磽磾磿礀礂礃礄礆礇礈礉礊礋礌础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split("");
	for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
	D[181] = "����������������������������������������������������������������礍礎礏礐礑礒礔礕礖礗礘礙礚礛礜礝礟礠礡礢礣礥礦礧礨礩礪礫礬礭礮礯礰礱礲礳礵礶礷礸礹礽礿祂祃祄祅祇祊祋祌祍祎祏祐祑祒祔祕祘祙祡祣�祤祦祩祪祫祬祮祰祱祲祳祴祵祶祹祻祼祽祾祿禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split("");
	for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
	D[182] = "����������������������������������������������������������������禓禔禕禖禗禘禙禛禜禝禞禟禠禡禢禣禤禥禦禨禩禪禫禬禭禮禯禰禱禲禴禵禶禷禸禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙秚秛秜秝秞秠秡秢秥秨秪�秬秮秱秲秳秴秵秶秷秹秺秼秾秿稁稄稅稇稈稉稊稌稏稐稑稒稓稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split("");
	for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
	D[183] = "����������������������������������������������������������������稝稟稡稢稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稴稵稶稸稺稾穀穁穂穃穄穅穇穈穉穊穋穌積穎穏穐穒穓穔穕穖穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨�穩穪穫穬穭穮穯穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split("");
	for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
	D[184] = "����������������������������������������������������������������窣窤窧窩窪窫窮窯窰窱窲窴窵窶窷窸窹窺窻窼窽窾竀竁竂竃竄竅竆竇竈竉竊竌竍竎竏竐竑竒竓竔竕竗竘竚竛竜竝竡竢竤竧竨竩竪竫竬竮竰竱竲竳�竴竵競竷竸竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split("");
	for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
	D[185] = "����������������������������������������������������������������笯笰笲笴笵笶笷笹笻笽笿筀筁筂筃筄筆筈筊筍筎筓筕筗筙筜筞筟筡筣筤筥筦筧筨筩筪筫筬筭筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆箇箈箉箊箋箌箎箏�箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹箺箻箼箽箾箿節篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split("");
	for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
	D[186] = "����������������������������������������������������������������篅篈築篊篋篍篎篏篐篒篔篕篖篗篘篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲篳篴篵篶篸篹篺篻篽篿簀簁簂簃簄簅簆簈簉簊簍簎簐簑簒簓簔簕簗簘簙�簚簛簜簝簞簠簡簢簣簤簥簨簩簫簬簭簮簯簰簱簲簳簴簵簶簷簹簺簻簼簽簾籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split("");
	for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
	D[187] = "����������������������������������������������������������������籃籄籅籆籇籈籉籊籋籌籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲籵籶籷籸籹籺籾籿粀粁粂粃粄粅粆粇�粈粊粋粌粍粎粏粐粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴粵粶粷粸粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split("");
	for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
	D[188] = "����������������������������������������������������������������粿糀糂糃糄糆糉糋糎糏糐糑糒糓糔糘糚糛糝糞糡糢糣糤糥糦糧糩糪糫糬糭糮糰糱糲糳糴糵糶糷糹糺糼糽糾糿紀紁紂紃約紅紆紇紈紉紋紌納紎紏紐�紑紒紓純紕紖紗紘紙級紛紜紝紞紟紡紣紤紥紦紨紩紪紬紭紮細紱紲紳紴紵紶肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split("");
	for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
	D[189] = "����������������������������������������������������������������紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絯絰統絲絳絴絵絶�絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split("");
	for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
	D[190] = "����������������������������������������������������������������継続綛綜綝綞綟綠綡綢綣綤綥綧綨綩綪綫綬維綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙�線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split("");
	for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
	D[191] = "����������������������������������������������������������������緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹�縺縼總績縿繀繂繃繄繅繆繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split("");
	for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
	D[192] = "����������������������������������������������������������������繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纜纝纞�纮纴纻纼绖绤绬绹缊缐缞缷缹缻缼缽缾缿罀罁罃罆罇罈罉罊罋罌罍罎罏罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split("");
	for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
	D[193] = "����������������������������������������������������������������罖罙罛罜罝罞罠罣罤罥罦罧罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂羃羄羅羆羇羈羉羋羍羏羐羑羒羓羕羖羗羘羙羛羜羠羢羣羥羦羨義羪羫羬羭羮羱�羳羴羵羶羷羺羻羾翀翂翃翄翆翇翈翉翋翍翏翐翑習翓翖翗翙翚翛翜翝翞翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split("");
	for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
	D[194] = "����������������������������������������������������������������翤翧翨翪翫翬翭翯翲翴翵翶翷翸翹翺翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫耬耭耮耯耰耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗�聙聛聜聝聞聟聠聡聢聣聤聥聦聧聨聫聬聭聮聯聰聲聳聴聵聶職聸聹聺聻聼聽隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split("");
	for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
	D[195] = "����������������������������������������������������������������聾肁肂肅肈肊肍肎肏肐肑肒肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇胈胉胊胋胏胐胑胒胓胔胕胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋�脌脕脗脙脛脜脝脟脠脡脢脣脤脥脦脧脨脩脪脫脭脮脰脳脴脵脷脹脺脻脼脽脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split("");
	for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
	D[196] = "����������������������������������������������������������������腀腁腂腃腄腅腇腉腍腎腏腒腖腗腘腛腜腝腞腟腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃膄膅膆膇膉膋膌膍膎膐膒膓膔膕膖膗膙膚膞膟膠膡膢膤膥�膧膩膫膬膭膮膯膰膱膲膴膵膶膷膸膹膼膽膾膿臄臅臇臈臉臋臍臎臏臐臑臒臓摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split("");
	for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
	D[197] = "����������������������������������������������������������������臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臤臥臦臨臩臫臮臯臰臱臲臵臶臷臸臹臺臽臿舃與興舉舊舋舎舏舑舓舕舖舗舘舙舚舝舠舤舥舦舧舩舮舲舺舼舽舿�艀艁艂艃艅艆艈艊艌艍艎艐艑艒艓艔艕艖艗艙艛艜艝艞艠艡艢艣艤艥艦艧艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
	for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
	D[198] = "����������������������������������������������������������������艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸�苺苼苽苾苿茀茊茋茍茐茒茓茖茘茙茝茞茟茠茡茢茣茤茥茦茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split("");
	for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
	D[199] = "����������������������������������������������������������������茾茿荁荂荄荅荈荊荋荌荍荎荓荕荖荗荘荙荝荢荰荱荲荳荴荵荶荹荺荾荿莀莁莂莃莄莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡莢莣莤莥莦莧莬莭莮�莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split("");
	for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
	D[200] = "����������������������������������������������������������������菮華菳菴菵菶菷菺菻菼菾菿萀萂萅萇萈萉萊萐萒萓萔萕萖萗萙萚萛萞萟萠萡萢萣萩萪萫萬萭萮萯萰萲萳萴萵萶萷萹萺萻萾萿葀葁葂葃葄葅葇葈葉�葊葋葌葍葎葏葐葒葓葔葕葖葘葝葞葟葠葢葤葥葦葧葨葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split("");
	for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
	D[201] = "����������������������������������������������������������������葽葾葿蒀蒁蒃蒄蒅蒆蒊蒍蒏蒐蒑蒒蒓蒔蒕蒖蒘蒚蒛蒝蒞蒟蒠蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗�蓘蓙蓚蓛蓜蓞蓡蓢蓤蓧蓨蓩蓪蓫蓭蓮蓯蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split("");
	for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
	D[202] = "����������������������������������������������������������������蔃蔄蔅蔆蔇蔈蔉蔊蔋蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢蔣蔤蔥蔦蔧蔨蔩蔪蔭蔮蔯蔰蔱蔲蔳蔴蔵蔶蔾蔿蕀蕁蕂蕄蕅蕆蕇蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕�蕗蕘蕚蕛蕜蕝蕟蕠蕡蕢蕣蕥蕦蕧蕩蕪蕫蕬蕭蕮蕯蕰蕱蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split("");
	for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
	D[203] = "����������������������������������������������������������������薂薃薆薈薉薊薋薌薍薎薐薑薒薓薔薕薖薗薘薙薚薝薞薟薠薡薢薣薥薦薧薩薫薬薭薱薲薳薴薵薶薸薺薻薼薽薾薿藀藂藃藄藅藆藇藈藊藋藌藍藎藑藒�藔藖藗藘藙藚藛藝藞藟藠藡藢藣藥藦藧藨藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split("");
	for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
	D[204] = "����������������������������������������������������������������藹藺藼藽藾蘀蘁蘂蘃蘄蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘒蘓蘔蘕蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘨蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘹蘺蘻蘽蘾蘿虀�虁虂虃虄虅虆虇虈虉虊虋虌虒虓處虖虗虘虙虛虜虝號虠虡虣虤虥虦虧虨虩虪獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split("");
	for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
	D[205] = "����������������������������������������������������������������虭虯虰虲虳虴虵虶虷虸蚃蚄蚅蚆蚇蚈蚉蚎蚏蚐蚑蚒蚔蚖蚗蚘蚙蚚蚛蚞蚟蚠蚡蚢蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻蚼蚽蚾蚿蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜�蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split("");
	for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
	D[206] = "����������������������������������������������������������������蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀蝁蝂蝃蝄蝅蝆蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚蝛蝜蝝蝞蝟蝡蝢蝦蝧蝨蝩蝪蝫蝬蝭蝯蝱蝲蝳蝵�蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎螏螐螑螒螔螕螖螘螙螚螛螜螝螞螠螡螢螣螤巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split("");
	for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
	D[207] = "����������������������������������������������������������������螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁蟂蟃蟄蟅蟇蟈蟉蟌蟍蟎蟏蟐蟔蟕蟖蟗蟘蟙蟚蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸�蟺蟻蟼蟽蟿蠀蠁蠂蠄蠅蠆蠇蠈蠉蠋蠌蠍蠎蠏蠐蠑蠒蠔蠗蠘蠙蠚蠜蠝蠞蠟蠠蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split("");
	for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
	D[208] = "����������������������������������������������������������������蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠳蠴蠵蠶蠷蠸蠺蠻蠽蠾蠿衁衂衃衆衇衈衉衊衋衎衏衐衑衒術衕衖衘衚衛衜衝衞衟衠衦衧衪衭衯衱衳衴衵衶衸衹衺�衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗袘袙袚袛袝袞袟袠袡袣袥袦袧袨袩袪小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split("");
	for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
	D[209] = "����������������������������������������������������������������袬袮袯袰袲袳袴袵袶袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚裛補裝裞裠裡裦裧裩裪裫裬裭裮裯裲裵裶裷裺裻製裿褀褁褃褄褅褆複褈�褉褋褌褍褎褏褑褔褕褖褗褘褜褝褞褟褠褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split("");
	for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
	D[210] = "����������������������������������������������������������������褸褹褺褻褼褽褾褿襀襂襃襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襠襡襢襣襤襥襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襼�襽襾覀覂覄覅覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split("");
	for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
	D[211] = "����������������������������������������������������������������覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴觵觶觷觸觹觺�觻觼觽觾觿訁訂訃訄訅訆計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split("");
	for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
	D[212] = "����������������������������������������������������������������訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訿詀詁詂詃詄詅詆詇詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞�詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詺詻詼詽詾詿誀浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split("");
	for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
	D[213] = "����������������������������������������������������������������誁誂誃誄誅誆誇誈誋誌認誎誏誐誑誒誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂�諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split("");
	for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
	D[214] = "����������������������������������������������������������������諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣�謤謥謧謨謩謪謫謬謭謮謯謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split("");
	for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
	D[215] = "����������������������������������������������������������������譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥譧譨譩譪譫譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆�讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split("");
	for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
	D[216] = "����������������������������������������������������������������谸谹谺谻谼谽谾谿豀豂豃豄豅豈豊豋豍豎豏豐豑豒豓豔豖豗豘豙豛豜豝豞豟豠豣豤豥豦豧豨豩豬豭豮豯豰豱豲豴豵豶豷豻豼豽豾豿貀貁貃貄貆貇�貈貋貍貎貏貐貑貒貓貕貖貗貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split("");
	for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
	D[217] = "����������������������������������������������������������������貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬�賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split("");
	for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
	D[218] = "����������������������������������������������������������������贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸赹赺赻赼赽赾赿趀趂趃趆趇趈趉趌趍趎趏趐趒趓趕趖趗趘趙趚趛趜趝趞趠趡�趢趤趥趦趧趨趩趪趫趬趭趮趯趰趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split("");
	for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
	D[219] = "����������������������������������������������������������������跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾跿踀踁踂踃踄踆踇踈踋踍踎踐踑踒踓踕踖踗踘踙踚踛踜踠踡踤踥踦踧踨踫踭踰踲踳踴踶踷踸踻踼踾�踿蹃蹅蹆蹌蹍蹎蹏蹐蹓蹔蹕蹖蹗蹘蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split("");
	for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
	D[220] = "����������������������������������������������������������������蹳蹵蹷蹸蹹蹺蹻蹽蹾躀躂躃躄躆躈躉躊躋躌躍躎躑躒躓躕躖躗躘躙躚躛躝躟躠躡躢躣躤躥躦躧躨躩躪躭躮躰躱躳躴躵躶躷躸躹躻躼躽躾躿軀軁軂�軃軄軅軆軇軈軉車軋軌軍軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split("");
	for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
	D[221] = "����������������������������������������������������������������軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣�輤輥輦輧輨輩輪輫輬輭輮輯輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split("");
	for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
	D[222] = "����������������������������������������������������������������轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆�迉迊迋迌迍迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split("");
	for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
	D[223] = "����������������������������������������������������������������這逜連逤逥逧逨逩逪逫逬逰週進逳逴逷逹逺逽逿遀遃遅遆遈遉遊運遌過達違遖遙遚遜遝遞遟遠遡遤遦遧適遪遫遬遯遰遱遲遳遶遷選遹遺遻遼遾邁�還邅邆邇邉邊邌邍邎邏邐邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split("");
	for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
	D[224] = "����������������������������������������������������������������郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄚鄛鄜�鄝鄟鄠鄡鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄰鄲鄳鄴鄵鄶鄷鄸鄺鄻鄼鄽鄾鄿酀酁酂酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split("");
	for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
	D[225] = "����������������������������������������������������������������酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀醁醂醃醄醆醈醊醎醏醓醔醕醖醗醘醙醜醝醞醟醠醡醤醥醦醧醨醩醫醬醰醱醲醳醶醷醸醹醻�醼醽醾醿釀釁釂釃釄釅釆釈釋釐釒釓釔釕釖釗釘釙釚釛針釞釟釠釡釢釣釤釥帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split("");
	for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
	D[226] = "����������������������������������������������������������������釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤�鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split("");
	for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
	D[227] = "����������������������������������������������������������������鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅�銆銇銈銉銊銋銌銍銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split("");
	for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
	D[228] = "����������������������������������������������������������������銨銩銪銫銬銭銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨�鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split("");
	for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
	D[229] = "����������������������������������������������������������������錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯錰錱録錳錴錵錶錷錸錹錺錻錼錽錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉�鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split("");
	for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
	D[230] = "����������������������������������������������������������������鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫�鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split("");
	for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
	D[231] = "����������������������������������������������������������������鏎鏏鏐鏑鏒鏓鏔鏕鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍�鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split("");
	for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
	D[232] = "����������������������������������������������������������������鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑬鑭鑮鑯�鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split("");
	for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
	D[233] = "����������������������������������������������������������������锧锳锽镃镈镋镕镚镠镮镴镵長镸镹镺镻镼镽镾門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪�閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split("");
	for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
	D[234] = "����������������������������������������������������������������闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧闬闿阇阓阘阛阞阠阣阤阥阦阧阨阩阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗�陘陙陚陜陝陞陠陣陥陦陫陭陮陯陰陱陳陸陹険陻陼陽陾陿隀隁隂隃隄隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split("");
	for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
	D[235] = "����������������������������������������������������������������隌階隑隒隓隕隖隚際隝隞隟隠隡隢隣隤隥隦隨隩險隫隬隭隮隯隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖雗雘雙雚雛雜雝雞雟雡離難雤雥雦雧雫�雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗霘霙霚霛霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split("");
	for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
	D[236] = "����������������������������������������������������������������霡霢霣霤霥霦霧霨霩霫霬霮霯霱霳霴霵霶霷霺霻霼霽霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑靔靕靗靘靚靜靝靟靣靤靦靧靨靪靫靬靭靮靯靰靱�靲靵靷靸靹靺靻靽靾靿鞀鞁鞂鞃鞄鞆鞇鞈鞉鞊鞌鞎鞏鞐鞓鞕鞖鞗鞙鞚鞛鞜鞝臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split("");
	for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
	D[237] = "����������������������������������������������������������������鞞鞟鞡鞢鞤鞥鞦鞧鞨鞩鞪鞬鞮鞰鞱鞳鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣�韤韥韨韮韯韰韱韲韴韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split("");
	for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
	D[238] = "����������������������������������������������������������������頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額�顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split("");
	for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
	D[239] = "����������������������������������������������������������������顯顰顱顲顳顴颋颎颒颕颙颣風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍飏飐飔飖飗飛飜飝飠飡飢飣飤�飥飦飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split("");
	for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
	D[240] = "����������������������������������������������������������������餈餉養餋餌餎餏餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餯餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉�饊饋饌饍饎饏饐饑饒饓饖饗饘饙饚饛饜饝饞饟饠饡饢饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split("");
	for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
	D[241] = "����������������������������������������������������������������馌馎馚馛馜馝馞馟馠馡馢馣馤馦馧馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘�駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split("");
	for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
	D[242] = "����������������������������������������������������������������駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸�騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split("");
	for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
	D[243] = "����������������������������������������������������������������驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫驲骃骉骍骎骔骕骙骦骩骪骫骬骭骮骯骲骳骴骵骹骻骽骾骿髃髄髆髇髈髉髊髍髎髏髐髒體髕髖髗髙髚髛髜�髝髞髠髢髣髤髥髧髨髩髪髬髮髰髱髲髳髴髵髶髷髸髺髼髽髾髿鬀鬁鬂鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split("");
	for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
	D[244] = "����������������������������������������������������������������鬇鬉鬊鬋鬌鬍鬎鬐鬑鬒鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬠鬡鬢鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬰鬱鬳鬴鬵鬶鬷鬸鬹鬺鬽鬾鬿魀魆魊魋魌魎魐魒魓魕魖魗魘魙魚�魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split("");
	for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
	D[245] = "����������������������������������������������������������������魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺�鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split("");
	for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
	D[246] = "����������������������������������������������������������������鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚�鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split("");
	for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
	D[247] = "����������������������������������������������������������������鰼鰽鰾鰿鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺�鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾鲿鳀鳁鳂鳈鳉鳑鳒鳚鳛鳠鳡鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split("");
	for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
	D[248] = "����������������������������������������������������������������鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡�鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
	D[249] = "����������������������������������������������������������������鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁�鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
	D[250] = "����������������������������������������������������������������鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡�鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
	D[251] = "����������������������������������������������������������������鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽麀�麁麃麄麅麆麉麊麌麍麎麏麐麑麔麕麖麗麘麙麚麛麜麞麠麡麢麣麤麥麧麨麩麪�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
	D[252] = "����������������������������������������������������������������麫麬麭麮麯麰麱麲麳麵麶麷麹麺麼麿黀黁黂黃黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰黱黲黳黴黵黶黷黸黺黽黿鼀鼁鼂鼃鼄鼅�鼆鼇鼈鼉鼊鼌鼏鼑鼒鼔鼕鼖鼘鼚鼛鼜鼝鼞鼟鼡鼣鼤鼥鼦鼧鼨鼩鼪鼫鼭鼮鼰鼱�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
	D[253] = "����������������������������������������������������������������鼲鼳鼴鼵鼶鼸鼺鼼鼿齀齁齂齃齅齆齇齈齉齊齋齌齍齎齏齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸�齹齺齻齼齽齾龁龂龍龎龏龐龑龒龓龔龕龖龗龘龜龝龞龡龢龣龤龥郎凉秊裏隣�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
	D[254] = "����������������������������������������������������������������兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[254].length; ++j) if(D[254][j].charCodeAt(0) !== 0xFFFD) { e[D[254][j]] = 65024 + j; d[65024 + j] = D[254][j];}
	return {"enc": e, "dec": d }; })();
	cptable[949] = (function(){ var d = [], e = {}, D = [], j;
	D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
	D[129] = "�����������������������������������������������������������������갂갃갅갆갋갌갍갎갏갘갞갟갡갢갣갥갦갧갨갩갪갫갮갲갳갴������갵갶갷갺갻갽갾갿걁걂걃걄걅걆걇걈걉걊걌걎걏걐걑걒걓걕������걖걗걙걚걛걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯걲걳걵걶걹걻걼걽걾걿겂겇겈겍겎겏겑겒겓겕겖겗겘겙겚겛겞겢겣겤겥겦겧겫겭겮겱겲겳겴겵겶겷겺겾겿곀곂곃곅곆곇곉곊곋곍곎곏곐곑곒곓곔곖곘곙곚곛곜곝곞곟곢곣곥곦곩곫곭곮곲곴곷곸곹곺곻곾곿괁괂괃괅괇괈괉괊괋괎괐괒괓�".split("");
	for(j = 0; j != D[129].length; ++j) if(D[129][j].charCodeAt(0) !== 0xFFFD) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j];}
	D[130] = "�����������������������������������������������������������������괔괕괖괗괙괚괛괝괞괟괡괢괣괤괥괦괧괨괪괫괮괯괰괱괲괳������괶괷괹괺괻괽괾괿굀굁굂굃굆굈굊굋굌굍굎굏굑굒굓굕굖굗������굙굚굛굜굝굞굟굠굢굤굥굦굧굨굩굪굫굮굯굱굲굷굸굹굺굾궀궃궄궅궆궇궊궋궍궎궏궑궒궓궔궕궖궗궘궙궚궛궞궟궠궡궢궣궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궸궹궺궻궼궽궾궿귂귃귅귆귇귉귊귋귌귍귎귏귒귔귕귖귗귘귙귚귛귝귞귟귡귢귣귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷�".split("");
	for(j = 0; j != D[130].length; ++j) if(D[130][j].charCodeAt(0) !== 0xFFFD) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j];}
	D[131] = "�����������������������������������������������������������������귺귻귽귾긂긃긄긅긆긇긊긌긎긏긐긑긒긓긕긖긗긘긙긚긛긜������긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯긲긳긵긶긹긻긼������긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗깘깙깚깛깞깢깣깤깦깧깪깫깭깮깯깱깲깳깴깵깶깷깺깾깿꺀꺁꺂꺃꺆꺇꺈꺉꺊꺋꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺿껁껂껃껅껆껇껈껉껊껋껎껒껓껔껕껖껗껚껛껝껞껟껠껡껢껣껤껥�".split("");
	for(j = 0; j != D[131].length; ++j) if(D[131][j].charCodeAt(0) !== 0xFFFD) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j];}
	D[132] = "�����������������������������������������������������������������껦껧껩껪껬껮껯껰껱껲껳껵껶껷껹껺껻껽껾껿꼀꼁꼂꼃꼄꼅������꼆꼉꼊꼋꼌꼎꼏꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣������꼤꼥꼦꼧꼨꼩꼪꼫꼮꼯꼱꼳꼵꼶꼷꼸꼹꼺꼻꼾꽀꽄꽅꽆꽇꽊꽋꽌꽍꽎꽏꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽞꽟꽠꽡꽢꽣꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽺꽻꽼꽽꽾꽿꾁꾂꾃꾅꾆꾇꾉꾊꾋꾌꾍꾎꾏꾒꾓꾔꾖꾗꾘꾙꾚꾛꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾺꾻꾽꾾�".split("");
	for(j = 0; j != D[132].length; ++j) if(D[132][j].charCodeAt(0) !== 0xFFFD) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j];}
	D[133] = "�����������������������������������������������������������������꾿꿁꿂꿃꿄꿅꿆꿊꿌꿏꿐꿑꿒꿓꿕꿖꿗꿘꿙꿚꿛꿝꿞꿟꿠꿡������꿢꿣꿤꿥꿦꿧꿪꿫꿬꿭꿮꿯꿲꿳꿵꿶꿷꿹꿺꿻꿼꿽꿾꿿뀂뀃������뀅뀆뀇뀈뀉뀊뀋뀍뀎뀏뀑뀒뀓뀕뀖뀗뀘뀙뀚뀛뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿끀끁끂끃끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끾끿낁낂낃낅낆낇낈낉낊낋낎낐낒낓낔낕낖낗낛낝낞낣낤�".split("");
	for(j = 0; j != D[133].length; ++j) if(D[133][j].charCodeAt(0) !== 0xFFFD) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j];}
	D[134] = "�����������������������������������������������������������������낥낦낧낪낰낲낶낷낹낺낻낽낾낿냀냁냂냃냆냊냋냌냍냎냏냒������냓냕냖냗냙냚냛냜냝냞냟냡냢냣냤냦냧냨냩냪냫냬냭냮냯냰������냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇넊넍넎넏넑넔넕넖넗넚넞넟넠넡넢넦넧넩넪넫넭넮넯넰넱넲넳넶넺넻넼넽넾넿녂녃녅녆녇녉녊녋녌녍녎녏녒녓녖녗녙녚녛녝녞녟녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷녺녻녽녾녿놁놃놄놅놆놇놊놌놎놏놐놑놕놖놗놙놚놛놝�".split("");
	for(j = 0; j != D[134].length; ++j) if(D[134][j].charCodeAt(0) !== 0xFFFD) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j];}
	D[135] = "�����������������������������������������������������������������놞놟놠놡놢놣놤놥놦놧놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸������놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇍뇎뇏뇑뇒뇓뇕������뇖뇗뇘뇙뇚뇛뇞뇠뇡뇢뇣뇤뇥뇦뇧뇪뇫뇭뇮뇯뇱뇲뇳뇴뇵뇶뇷뇸뇺뇼뇾뇿눀눁눂눃눆눇눉눊눍눎눏눐눑눒눓눖눘눚눛눜눝눞눟눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눵눶눷눸눹눺눻눽눾눿뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉙뉚뉛뉝뉞뉟뉡뉢뉣뉤뉥뉦뉧뉪뉫뉬뉭뉮�".split("");
	for(j = 0; j != D[135].length; ++j) if(D[135][j].charCodeAt(0) !== 0xFFFD) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j];}
	D[136] = "�����������������������������������������������������������������뉯뉰뉱뉲뉳뉶뉷뉸뉹뉺뉻뉽뉾뉿늀늁늂늃늆늇늈늊늋늌늍늎������늏늒늓늕늖늗늛늜늝늞늟늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷������늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇닊닋닍닎닏닑닓닔닕닖닗닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉댊댋댌댍댎댏댒댖댗댘댙댚댛댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓덗덙덚덝덠덡덢덣�".split("");
	for(j = 0; j != D[136].length; ++j) if(D[136][j].charCodeAt(0) !== 0xFFFD) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j];}
	D[137] = "�����������������������������������������������������������������덦덨덪덬덭덯덲덳덵덶덷덹덺덻덼덽덾덿뎂뎆뎇뎈뎉뎊뎋뎍������뎎뎏뎑뎒뎓뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎢뎣뎤뎥뎦뎧뎩뎪뎫뎭������뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됑됒됓됔됕됖됗됙됚됛됝됞됟됡됢됣됤됥됦됧됪됬됭됮됯됰됱됲됳됵됶됷됸됹됺됻됼됽됾됿둀둁둂둃둄�".split("");
	for(j = 0; j != D[137].length; ++j) if(D[137][j].charCodeAt(0) !== 0xFFFD) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j];}
	D[138] = "�����������������������������������������������������������������둅둆둇둈둉둊둋둌둍둎둏둒둓둕둖둗둙둚둛둜둝둞둟둢둤둦������둧둨둩둪둫둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒁뒂������뒃뒄뒅뒆뒇뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒞뒟뒠뒡뒢뒣뒥뒦뒧뒩뒪뒫뒭뒮뒯뒰뒱뒲뒳뒴뒶뒸뒺뒻뒼뒽뒾뒿듁듂듃듅듆듇듉듊듋듌듍듎듏듑듒듓듔듖듗듘듙듚듛듞듟듡듢듥듧듨듩듪듫듮듰듲듳듴듵듶듷듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓딖딗딙딚딝�".split("");
	for(j = 0; j != D[138].length; ++j) if(D[138][j].charCodeAt(0) !== 0xFFFD) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j];}
	D[139] = "�����������������������������������������������������������������딞딟딠딡딢딣딦딫딬딭딮딯딲딳딵딶딷딹딺딻딼딽딾딿땂땆������땇땈땉땊땎땏땑땒땓땕땖땗땘땙땚땛땞땢땣땤땥땦땧땨땩땪������땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떢떣떥떦떧떩떬떭떮떯떲떶떷떸떹떺떾떿뗁뗂뗃뗅뗆뗇뗈뗉뗊뗋뗎뗒뗓뗔뗕뗖뗗뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿�".split("");
	for(j = 0; j != D[139].length; ++j) if(D[139][j].charCodeAt(0) !== 0xFFFD) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j];}
	D[140] = "�����������������������������������������������������������������똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏똒똓똕똖똗똙똚똛똜똝������똞똟똠똡똢똣똤똦똧똨똩똪똫똭똮똯똰똱똲똳똵똶똷똸똹똺������똻똼똽똾똿뙀뙁뙂뙃뙄뙅뙆뙇뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙥뙦뙧뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚞뚟뚡뚢뚣뚥뚦뚧뚨뚩뚪뚭뚮뚯뚰뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂�".split("");
	for(j = 0; j != D[140].length; ++j) if(D[140][j].charCodeAt(0) !== 0xFFFD) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j];}
	D[141] = "�����������������������������������������������������������������뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛕뛖뛗뛘뛙뛚뛛뛜뛝������뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛱뛲뛳뛵뛶뛷뛹뛺������뛻뛼뛽뛾뛿뜂뜃뜄뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜪뜫뜭뜮뜱뜲뜳뜴뜵뜶뜷뜺뜼뜽뜾뜿띀띁띂띃띅띆띇띉띊띋띍띎띏띐띑띒띓띖띗띘띙띚띛띜띝띞띟띡띢띣띥띦띧띩띪띫띬띭띮띯띲띴띶띷띸띹띺띻띾띿랁랂랃랅랆랇랈랉랊랋랎랓랔랕랚랛랝랞�".split("");
	for(j = 0; j != D[141].length; ++j) if(D[141][j].charCodeAt(0) !== 0xFFFD) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j];}
	D[142] = "�����������������������������������������������������������������랟랡랢랣랤랥랦랧랪랮랯랰랱랲랳랶랷랹랺랻랼랽랾랿럀럁������럂럃럄럅럆럈럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝������럞럟럠럡럢럣럤럥럦럧럨럩럪럫럮럯럱럲럳럵럶럷럸럹럺럻럾렂렃렄렅렆렊렋렍렎렏렑렒렓렔렕렖렗렚렜렞렟렠렡렢렣렦렧렩렪렫렭렮렯렰렱렲렳렶렺렻렼렽렾렿롁롂롃롅롆롇롈롉롊롋롌롍롎롏롐롒롔롕롖롗롘롙롚롛롞롟롡롢롣롥롦롧롨롩롪롫롮롰롲롳롴롵롶롷롹롺롻롽롾롿뢀뢁뢂뢃뢄�".split("");
	for(j = 0; j != D[142].length; ++j) if(D[142][j].charCodeAt(0) !== 0xFFFD) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j];}
	D[143] = "�����������������������������������������������������������������뢅뢆뢇뢈뢉뢊뢋뢌뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟������뢠뢡뢢뢣뢤뢥뢦뢧뢩뢪뢫뢬뢭뢮뢯뢱뢲뢳뢵뢶뢷뢹뢺뢻뢼뢽������뢾뢿룂룄룆룇룈룉룊룋룍룎룏룑룒룓룕룖룗룘룙룚룛룜룞룠룢룣룤룥룦룧룪룫룭룮룯룱룲룳룴룵룶룷룺룼룾룿뤀뤁뤂뤃뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤙뤚뤛뤜뤝뤞뤟뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤾뤿륁륂륃륅륆륇륈륉륊륋륍륎륐륒륓륔륕륖륗�".split("");
	for(j = 0; j != D[143].length; ++j) if(D[143][j].charCodeAt(0) !== 0xFFFD) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j];}
	D[144] = "�����������������������������������������������������������������륚륛륝륞륟륡륢륣륤륥륦륧륪륬륮륯륰륱륲륳륶륷륹륺륻륽������륾륿릀릁릂릃릆릈릋릌릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞������릟릠릡릢릣릤릥릦릧릨릩릪릫릮릯릱릲릳릵릶릷릸릹릺릻릾맀맂맃맄맅맆맇맊맋맍맓맔맕맖맗맚맜맟맠맢맦맧맩맪맫맭맮맯맰맱맲맳맶맻맼맽맾맿먂먃먄먅먆먇먉먊먋먌먍먎먏먐먑먒먓먔먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷먺먻먽먾먿멁멃멄멅멆�".split("");
	for(j = 0; j != D[144].length; ++j) if(D[144][j].charCodeAt(0) !== 0xFFFD) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j];}
	D[145] = "�����������������������������������������������������������������멇멊멌멏멐멑멒멖멗멙멚멛멝멞멟멠멡멢멣멦멪멫멬멭멮멯������멲멳멵멶멷멹멺멻멼멽멾멿몀몁몂몆몈몉몊몋몍몎몏몐몑몒������몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧몪몭몮몯몱몳몴몵몶몷몺몼몾몿뫀뫁뫂뫃뫅뫆뫇뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫽뫾뫿묁묂묃묅묆묇묈묉묊묋묌묎묐묒묓묔묕묖묗묙묚묛묝묞묟묡묢묣묤묥묦묧�".split("");
	for(j = 0; j != D[145].length; ++j) if(D[145][j].charCodeAt(0) !== 0xFFFD) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j];}
	D[146] = "�����������������������������������������������������������������묨묪묬묭묮묯묰묱묲묳묷묹묺묿뭀뭁뭂뭃뭆뭈뭊뭋뭌뭎뭑뭒������뭓뭕뭖뭗뭙뭚뭛뭜뭝뭞뭟뭠뭢뭤뭥뭦뭧뭨뭩뭪뭫뭭뭮뭯뭰뭱������뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮉뮊뮋뮍뮎뮏뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮥뮦뮧뮩뮪뮫뮭뮮뮯뮰뮱뮲뮳뮵뮶뮸뮹뮺뮻뮼뮽뮾뮿믁믂믃믅믆믇믉믊믋믌믍믎믏믑믒믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷믺믻믽믾밁�".split("");
	for(j = 0; j != D[146].length; ++j) if(D[146][j].charCodeAt(0) !== 0xFFFD) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j];}
	D[147] = "�����������������������������������������������������������������밃밄밅밆밇밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵������밶밷밹밺밻밼밽밾밿뱂뱆뱇뱈뱊뱋뱎뱏뱑뱒뱓뱔뱕뱖뱗뱘뱙������뱚뱛뱜뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃벆벇벉벊벍벏벐벑벒벓벖벘벛벜벝벞벟벢벣벥벦벩벪벫벬벭벮벯벲벶벷벸벹벺벻벾벿볁볂볃볅볆볇볈볉볊볋볌볎볒볓볔볖볗볙볚볛볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳볷볹볺볻볽�".split("");
	for(j = 0; j != D[147].length; ++j) if(D[147][j].charCodeAt(0) !== 0xFFFD) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j];}
	D[148] = "�����������������������������������������������������������������볾볿봀봁봂봃봆봈봊봋봌봍봎봏봑봒봓봕봖봗봘봙봚봛봜봝������봞봟봠봡봢봣봥봦봧봨봩봪봫봭봮봯봰봱봲봳봴봵봶봷봸봹������봺봻봼봽봾봿뵁뵂뵃뵄뵅뵆뵇뵊뵋뵍뵎뵏뵑뵒뵓뵔뵕뵖뵗뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵥뵦뵧뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿붂붃붅붆붋붌붍붎붏붒붔붖붗붘붛붝붞붟붠붡붢붣붥붦붧붨붩붪붫붬붭붮붯붱붲붳붴붵붶붷붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑�".split("");
	for(j = 0; j != D[148].length; ++j) if(D[148][j].charCodeAt(0) !== 0xFFFD) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j];}
	D[149] = "�����������������������������������������������������������������뷒뷓뷖뷗뷙뷚뷛뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷪뷫뷬뷭뷮뷯뷱������뷲뷳뷵뷶뷷뷹뷺뷻뷼뷽뷾뷿븁븂븄븆븇븈븉븊븋븎븏븑븒븓������븕븖븗븘븙븚븛븞븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿빀빁빂빃빆빇빉빊빋빍빏빐빑빒빓빖빘빜빝빞빟빢빣빥빦빧빩빫빬빭빮빯빲빶빷빸빹빺빾빿뺁뺂뺃뺅뺆뺇뺈뺉뺊뺋뺎뺒뺓뺔뺕뺖뺗뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷�".split("");
	for(j = 0; j != D[149].length; ++j) if(D[149][j].charCodeAt(0) !== 0xFFFD) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j];}
	D[150] = "�����������������������������������������������������������������뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻒뻓������뻕뻖뻙뻚뻛뻜뻝뻞뻟뻡뻢뻦뻧뻨뻩뻪뻫뻭뻮뻯뻰뻱뻲뻳뻴뻵������뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼂뼃뼄뼅뼆뼇뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼚뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽂뽃뽅뽆뽇뽉뽊뽋뽌뽍뽎뽏뽒뽓뽔뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂�".split("");
	for(j = 0; j != D[150].length; ++j) if(D[150][j].charCodeAt(0) !== 0xFFFD) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j];}
	D[151] = "�����������������������������������������������������������������뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾕뾖뾗뾘뾙뾚뾛뾜뾝������뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾱뾲뾳뾴뾵뾶뾷뾸������뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿆뿇뿈뿉뿊뿋뿎뿏뿑뿒뿓뿕뿖뿗뿘뿙뿚뿛뿝뿞뿠뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀽쀾쀿�".split("");
	for(j = 0; j != D[151].length; ++j) if(D[151][j].charCodeAt(0) !== 0xFFFD) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j];}
	D[152] = "�����������������������������������������������������������������쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁒쁓쁔쁕쁖쁗쁙쁚쁛������쁝쁞쁟쁡쁢쁣쁤쁥쁦쁧쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹������쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삒삓삕삖삗삙삚삛삜삝삞삟삢삤삦삧삨삩삪삫삮삱삲삷삸삹삺삻삾샂샃샄샆샇샊샋샍샎샏샑샒샓샔샕샖샗샚샞샟샠샡샢샣샦샧샩샪샫샭샮샯샰샱샲샳샶샸샺샻샼샽샾샿섁섂섃섅섆섇섉섊섋섌섍섎섏섑섒섓섔섖섗섘섙섚섛섡섢섥섨섩섪섫섮�".split("");
	for(j = 0; j != D[152].length; ++j) if(D[152][j].charCodeAt(0) !== 0xFFFD) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j];}
	D[153] = "�����������������������������������������������������������������섲섳섴섵섷섺섻섽섾섿셁셂셃셄셅셆셇셊셎셏셐셑셒셓셖셗������셙셚셛셝셞셟셠셡셢셣셦셪셫셬셭셮셯셱셲셳셵셶셷셹셺셻������셼셽셾셿솀솁솂솃솄솆솇솈솉솊솋솏솑솒솓솕솗솘솙솚솛솞솠솢솣솤솦솧솪솫솭솮솯솱솲솳솴솵솶솷솸솹솺솻솼솾솿쇀쇁쇂쇃쇅쇆쇇쇉쇊쇋쇍쇎쇏쇐쇑쇒쇓쇕쇖쇙쇚쇛쇜쇝쇞쇟쇡쇢쇣쇥쇦쇧쇩쇪쇫쇬쇭쇮쇯쇲쇴쇵쇶쇷쇸쇹쇺쇻쇾쇿숁숂숃숅숆숇숈숉숊숋숎숐숒숓숔숕숖숗숚숛숝숞숡숢숣�".split("");
	for(j = 0; j != D[153].length; ++j) if(D[153][j].charCodeAt(0) !== 0xFFFD) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j];}
	D[154] = "�����������������������������������������������������������������숤숥숦숧숪숬숮숰숳숵숶숷숸숹숺숻숼숽숾숿쉀쉁쉂쉃쉄쉅������쉆쉇쉉쉊쉋쉌쉍쉎쉏쉒쉓쉕쉖쉗쉙쉚쉛쉜쉝쉞쉟쉡쉢쉣쉤쉦������쉧쉨쉩쉪쉫쉮쉯쉱쉲쉳쉵쉶쉷쉸쉹쉺쉻쉾슀슂슃슄슅슆슇슊슋슌슍슎슏슑슒슓슔슕슖슗슙슚슜슞슟슠슡슢슣슦슧슩슪슫슮슯슰슱슲슳슶슸슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛싞싟싡싢싥싦싧싨싩싪싮싰싲싳싴싵싷싺싽싾싿쌁쌂쌃쌄쌅쌆쌇쌊쌋쌎쌏�".split("");
	for(j = 0; j != D[154].length; ++j) if(D[154][j].charCodeAt(0) !== 0xFFFD) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j];}
	D[155] = "�����������������������������������������������������������������쌐쌑쌒쌖쌗쌙쌚쌛쌝쌞쌟쌠쌡쌢쌣쌦쌧쌪쌫쌬쌭쌮쌯쌰쌱쌲������쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썆썇썈썉썊썋썌썍������썎썏썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧썪썫썭썮썯썱썳썴썵썶썷썺썻썾썿쎀쎁쎂쎃쎅쎆쎇쎉쎊쎋쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏚�".split("");
	for(j = 0; j != D[155].length; ++j) if(D[155][j].charCodeAt(0) !== 0xFFFD) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j];}
	D[156] = "�����������������������������������������������������������������쏛쏝쏞쏡쏣쏤쏥쏦쏧쏪쏫쏬쏮쏯쏰쏱쏲쏳쏶쏷쏹쏺쏻쏼쏽쏾������쏿쐀쐁쐂쐃쐄쐅쐆쐇쐉쐊쐋쐌쐍쐎쐏쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚������쐛쐜쐝쐞쐟쐠쐡쐢쐣쐥쐦쐧쐨쐩쐪쐫쐭쐮쐯쐱쐲쐳쐵쐶쐷쐸쐹쐺쐻쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑦쑧쑩쑪쑫쑭쑮쑯쑰쑱쑲쑳쑶쑷쑸쑺쑻쑼쑽쑾쑿쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒕쒖쒗쒘쒙쒚쒛쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩�".split("");
	for(j = 0; j != D[156].length; ++j) if(D[156][j].charCodeAt(0) !== 0xFFFD) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j];}
	D[157] = "�����������������������������������������������������������������쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒹쒺쒻쒽쒾쒿쓀쓁쓂쓃쓄쓅������쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟������쓠쓡쓢쓣쓤쓥쓦쓧쓨쓪쓫쓬쓭쓮쓯쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂씃씄씅씆씇씈씉씊씋씍씎씏씑씒씓씕씖씗씘씙씚씛씝씞씟씠씡씢씣씤씥씦씧씪씫씭씮씯씱씲씳씴씵씶씷씺씼씾씿앀앁앂앃앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩앪앫앬앭앮앯앲앶앷앸앹앺앻앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔�".split("");
	for(j = 0; j != D[157].length; ++j) if(D[157][j].charCodeAt(0) !== 0xFFFD) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j];}
	D[158] = "�����������������������������������������������������������������얖얙얚얛얝얞얟얡얢얣얤얥얦얧얨얪얫얬얭얮얯얰얱얲얳얶������얷얺얿엀엁엂엃엋엍엏엒엓엕엖엗엙엚엛엜엝엞엟엢엤엦엧������엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑옒옓옔옕옖옗옚옝옞옟옠옡옢옣옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉왊왋왌왍왎왏왒왖왗왘왙왚왛왞왟왡왢왣왤왥왦왧왨왩왪왫왭왮왰왲왳왴왵왶왷왺왻왽왾왿욁욂욃욄욅욆욇욊욌욎욏욐욑욒욓욖욗욙욚욛욝욞욟욠욡욢욣욦�".split("");
	for(j = 0; j != D[158].length; ++j) if(D[158][j].charCodeAt(0) !== 0xFFFD) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j];}
	D[159] = "�����������������������������������������������������������������욨욪욫욬욭욮욯욲욳욵욶욷욻욼욽욾욿웂웄웆웇웈웉웊웋웎������웏웑웒웓웕웖웗웘웙웚웛웞웟웢웣웤웥웦웧웪웫웭웮웯웱웲������웳웴웵웶웷웺웻웼웾웿윀윁윂윃윆윇윉윊윋윍윎윏윐윑윒윓윖윘윚윛윜윝윞윟윢윣윥윦윧윩윪윫윬윭윮윯윲윴윶윸윹윺윻윾윿읁읂읃읅읆읇읈읉읋읎읐읙읚읛읝읞읟읡읢읣읤읥읦읧읩읪읬읭읮읯읰읱읲읳읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛잜잝잞잟잢잧잨잩잪잫잮잯잱잲잳잵잶잷�".split("");
	for(j = 0; j != D[159].length; ++j) if(D[159][j].charCodeAt(0) !== 0xFFFD) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j];}
	D[160] = "�����������������������������������������������������������������잸잹잺잻잾쟂쟃쟄쟅쟆쟇쟊쟋쟍쟏쟑쟒쟓쟔쟕쟖쟗쟙쟚쟛쟜������쟞쟟쟠쟡쟢쟣쟥쟦쟧쟩쟪쟫쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺������쟻쟼쟽쟾쟿젂젃젅젆젇젉젋젌젍젎젏젒젔젗젘젙젚젛젞젟젡젢젣젥젦젧젨젩젪젫젮젰젲젳젴젵젶젷젹젺젻젽젾젿졁졂졃졄졅졆졇졊졋졎졏졐졑졒졓졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯졲졳졵졶졷졹졻졼졽졾졿좂좄좈좉좊좎좏좐좑좒좓좕좖좗좘좙좚좛좜좞좠좢좣좤�".split("");
	for(j = 0; j != D[160].length; ++j) if(D[160][j].charCodeAt(0) !== 0xFFFD) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j];}
	D[161] = "�����������������������������������������������������������������좥좦좧좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좾좿죀죁������죂죃죅죆죇죉죊죋죍죎죏죐죑죒죓죖죘죚죛죜죝죞죟죢죣죥������죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죶죷죸죹죺죻죾죿줁줂줃줇줈줉줊줋줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈〉《》「」『』【】±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢�".split("");
	for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
	D[162] = "�����������������������������������������������������������������줐줒줓줔줕줖줗줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫������줭줮줯줰줱줲줳줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇������쥈쥉쥊쥋쥌쥍쥎쥏쥒쥓쥕쥖쥗쥙쥚쥛쥜쥝쥞쥟쥢쥤쥥쥦쥧쥨쥩쥪쥫쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®������������������������".split("");
	for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
	D[163] = "�����������������������������������������������������������������쥱쥲쥳쥵쥶쥷쥸쥹쥺쥻쥽쥾쥿즀즁즂즃즄즅즆즇즊즋즍즎즏������즑즒즓즔즕즖즗즚즜즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮������즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿짂짃짅짆짉짋짌짍짎짏짒짔짗짘짛！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￦］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
	for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
	D[164] = "�����������������������������������������������������������������짞짟짡짣짥짦짨짩짪짫짮짲짳짴짵짶짷짺짻짽짾짿쨁쨂쨃쨄������쨅쨆쨇쨊쨎쨏쨐쨑쨒쨓쨕쨖쨗쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥������쨦쨧쨨쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ�".split("");
	for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
	D[165] = "�����������������������������������������������������������������쩇쩈쩉쩊쩋쩎쩏쩑쩒쩓쩕쩖쩗쩘쩙쩚쩛쩞쩢쩣쩤쩥쩦쩧쩩쩪������쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩾쩿쪀쪁쪂쪃쪅쪆������쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ�����ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������".split("");
	for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
	D[166] = "�����������������������������������������������������������������쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪾쪿쫁쫂쫃쫅������쫆쫇쫈쫉쫊쫋쫎쫐쫒쫔쫕쫖쫗쫚쫛쫜쫝쫞쫟쫡쫢쫣쫤쫥쫦쫧������쫨쫩쫪쫫쫭쫮쫯쫰쫱쫲쫳쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃╄╅╆╇╈╉╊���������������������������".split("");
	for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
	D[167] = "�����������������������������������������������������������������쬋쬌쬍쬎쬏쬑쬒쬓쬕쬖쬗쬙쬚쬛쬜쬝쬞쬟쬢쬣쬤쬥쬦쬧쬨쬩������쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭂쭃쭄������쭅쭆쭇쭊쭋쭍쭎쭏쭑쭒쭓쭔쭕쭖쭗쭚쭛쭜쭞쭟쭠쭡쭢쭣쭥쭦쭧쭨쭩쭪쭫쭬㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎀㎁㎂㎃㎄㎺㎻㎼㎽㎾㎿㎐㎑㎒㎓㎔Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆����������������".split("");
	for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
	D[168] = "�����������������������������������������������������������������쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈������쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮝쮞쮟쮠쮡쮢쮣������쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄ÆÐªĦ�Ĳ�ĿŁØŒºÞŦŊ�㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮½⅓⅔¼¾⅛⅜⅝⅞�".split("");
	for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
	D[169] = "�����������������������������������������������������������������쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟������쯠쯡쯢쯣쯥쯦쯨쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼������쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찎찏찑찒찓찕찖찗찘찙찚찛찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂¹²³⁴ⁿ₁₂₃₄�".split("");
	for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
	D[170] = "�����������������������������������������������������������������찥찦찪찫찭찯찱찲찳찴찵찶찷찺찿챀챁챂챃챆챇챉챊챋챍챎������챏챐챑챒챓챖챚챛챜챝챞챟챡챢챣챥챧챩챪챫챬챭챮챯챱챲������챳챴챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
	for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
	D[171] = "�����������������������������������������������������������������첔첕첖첗첚첛첝첞첟첡첢첣첤첥첦첧첪첮첯첰첱첲첳첶첷첹������첺첻첽첾첿쳀쳁쳂쳃쳆쳈쳊쳋쳌쳍쳎쳏쳑쳒쳓쳕쳖쳗쳘쳙쳚������쳛쳜쳝쳞쳟쳠쳡쳢쳣쳥쳦쳧쳨쳩쳪쳫쳭쳮쳯쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
	for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
	D[172] = "�����������������������������������������������������������������쳾쳿촀촂촃촄촅촆촇촊촋촍촎촏촑촒촓촔촕촖촗촚촜촞촟촠������촡촢촣촥촦촧촩촪촫촭촮촯촰촱촲촳촴촵촶촷촸촺촻촼촽촾������촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛쵝쵞쵟АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
	for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
	D[173] = "�����������������������������������������������������������������쵡쵢쵣쵥쵦쵧쵨쵩쵪쵫쵮쵰쵲쵳쵴쵵쵶쵷쵹쵺쵻쵼쵽쵾쵿춀������춁춂춃춄춅춆춇춉춊춋춌춍춎춏춐춑춒춓춖춗춙춚춛춝춞춟������춠춡춢춣춦춨춪춫춬춭춮춯춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췅�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
	D[174] = "�����������������������������������������������������������������췆췇췈췉췊췋췍췎췏췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡������췢췣췤췥췦췧췩췪췫췭췮췯췱췲췳췴췵췶췷췺췼췾췿츀츁츂������츃츅츆츇츉츊츋츍츎츏츐츑츒츓츕츖츗츘츚츛츜츝츞츟츢츣츥츦츧츩츪츫�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
	D[175] = "�����������������������������������������������������������������츬츭츮츯츲츴츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉������칊칋칌칍칎칏칐칑칒칓칔칕칖칗칚칛칝칞칢칣칤칥칦칧칪칬������칮칯칰칱칲칳칶칷칹칺칻칽칾칿캀캁캂캃캆캈캊캋캌캍캎캏캒캓캕캖캗캙�����������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
	D[176] = "�����������������������������������������������������������������캚캛캜캝캞캟캢캦캧캨캩캪캫캮캯캰캱캲캳캴캵캶캷캸캹캺������캻캼캽캾캿컀컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕������컖컗컘컙컚컛컜컝컞컟컠컡컢컣컦컧컩컪컭컮컯컰컱컲컳컶컺컻컼컽컾컿가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆�".split("");
	for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
	D[177] = "�����������������������������������������������������������������켂켃켅켆켇켉켊켋켌켍켎켏켒켔켖켗켘켙켚켛켝켞켟켡켢켣������켥켦켧켨켩켪켫켮켲켳켴켵켶켷켹켺켻켼켽켾켿콀콁콂콃콄������콅콆콇콈콉콊콋콌콍콎콏콐콑콒콓콖콗콙콚콛콝콞콟콠콡콢콣콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸�".split("");
	for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
	D[178] = "�����������������������������������������������������������������콭콮콯콲콳콵콶콷콹콺콻콼콽콾콿쾁쾂쾃쾄쾆쾇쾈쾉쾊쾋쾍������쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾢쾣쾤쾥쾦쾧쾩������쾪쾫쾬쾭쾮쾯쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿅쿆쿇쿈쿉쿊쿋깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙�".split("");
	for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
	D[179] = "�����������������������������������������������������������������쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿢쿣쿥쿦쿧쿩������쿪쿫쿬쿭쿮쿯쿲쿴쿶쿷쿸쿹쿺쿻쿽쿾쿿퀁퀂퀃퀅퀆퀇퀈퀉퀊������퀋퀌퀍퀎퀏퀐퀒퀓퀔퀕퀖퀗퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝�".split("");
	for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
	D[180] = "�����������������������������������������������������������������퀮퀯퀰퀱퀲퀳퀶퀷퀹퀺퀻퀽퀾퀿큀큁큂큃큆큈큊큋큌큍큎큏������큑큒큓큕큖큗큙큚큛큜큝큞큟큡큢큣큤큥큦큧큨큩큪큫큮큯������큱큲큳큵큶큷큸큹큺큻큾큿킀킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥�".split("");
	for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
	D[181] = "�����������������������������������������������������������������킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣킦킧킩킪킫킭킮킯킰킱킲������킳킶킸킺킻킼킽킾킿탂탃탅탆탇탊탋탌탍탎탏탒탖탗탘탙탚������탛탞탟탡탢탣탥탦탧탨탩탪탫탮탲탳탴탵탶탷탹탺탻탼탽탾탿턀턁턂턃턄덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸�".split("");
	for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
	D[182] = "�����������������������������������������������������������������턅턆턇턈턉턊턋턌턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟������턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯턲턳턵턶턷턹턻턼턽턾������턿텂텆텇텈텉텊텋텎텏텑텒텓텕텖텗텘텙텚텛텞텠텢텣텤텥텦텧텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗�".split("");
	for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
	D[183] = "�����������������������������������������������������������������텮텯텰텱텲텳텴텵텶텷텸텹텺텻텽텾텿톀톁톂톃톅톆톇톉톊������톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟톢톣톥톦톧������톩톪톫톬톭톮톯톲톴톶톷톸톹톻톽톾톿퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩�".split("");
	for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
	D[184] = "�����������������������������������������������������������������퇐퇑퇒퇓퇔퇕퇖퇗퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪������퇫퇬퇭퇮퇯퇰퇱퇲퇳퇵퇶퇷퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆������툈툊툋툌툍툎툏툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼�".split("");
	for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
	D[185] = "�����������������������������������������������������������������툪툫툮툯툱툲툳툵툶툷툸툹툺툻툾퉀퉂퉃퉄퉅퉆퉇퉉퉊퉋퉌������퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉝퉞퉟퉠퉡퉢퉣퉥퉦퉧퉨������퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗�".split("");
	for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
	D[186] = "�����������������������������������������������������������������튍튎튏튒튓튔튖튗튘튙튚튛튝튞튟튡튢튣튥튦튧튨튩튪튫튭������튮튯튰튲튳튴튵튶튷튺튻튽튾틁틃틄틅틆틇틊틌틍틎틏틐틑������틒틓틕틖틗틙틚틛틝틞틟틠틡틢틣틦틧틨틩틪틫틬틭틮틯틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤�".split("");
	for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
	D[187] = "�����������������������������������������������������������������틻틼틽틾틿팂팄팆팇팈팉팊팋팏팑팒팓팕팗팘팙팚팛팞팢팣������팤팦팧팪팫팭팮팯팱팲팳팴팵팶팷팺팾팿퍀퍁퍂퍃퍆퍇퍈퍉������퍊퍋퍌퍍퍎퍏퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤�".split("");
	for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
	D[188] = "�����������������������������������������������������������������퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍾퍿펁펂펃펅펆펇������펈펉펊펋펎펒펓펔펕펖펗펚펛펝펞펟펡펢펣펤펥펦펧펪펬펮������펯펰펱펲펳펵펶펷펹펺펻펽펾펿폀폁폂폃폆폇폊폋폌폍폎폏폑폒폓폔폕폖샥샨샬샴샵샷샹섀섄섈섐섕서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭�".split("");
	for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
	D[189] = "�����������������������������������������������������������������폗폙폚폛폜폝폞폟폠폢폤폥폦폧폨폩폪폫폮폯폱폲폳폵폶폷������폸폹폺폻폾퐀퐂퐃퐄퐅퐆퐇퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖������퐗퐘퐙퐚퐛퐜퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰�".split("");
	for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
	D[190] = "�����������������������������������������������������������������퐸퐹퐺퐻퐼퐽퐾퐿푁푂푃푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓������푔푕푖푗푘푙푚푛푝푞푟푡푢푣푥푦푧푨푩푪푫푬푮푰푱푲������푳푴푵푶푷푺푻푽푾풁풃풄풅풆풇풊풌풎풏풐풑풒풓풕풖풗풘풙풚풛풜풝쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎�".split("");
	for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
	D[191] = "�����������������������������������������������������������������풞풟풠풡풢풣풤풥풦풧풨풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸������풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓍퓎퓏퓑퓒퓓퓕������퓖퓗퓘퓙퓚퓛퓝퓞퓠퓡퓢퓣퓤퓥퓦퓧퓩퓪퓫퓭퓮퓯퓱퓲퓳퓴퓵퓶퓷퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨�".split("");
	for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
	D[192] = "�����������������������������������������������������������������퓾퓿픀픁픂픃픅픆픇픉픊픋픍픎픏픐픑픒픓픖픘픙픚픛픜픝������픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷������픸픹픺픻픾픿핁핂핃핅핆핇핈핉핊핋핎핐핒핓핔핕핖핗핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊�".split("");
	for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
	D[193] = "�����������������������������������������������������������������핤핦핧핪핬핮핯핰핱핲핳핶핷핹핺핻핽핾핿햀햁햂햃햆햊햋������햌햍햎햏햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤햦햧������햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓�".split("");
	for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
	D[194] = "�����������������������������������������������������������������헊헋헍헎헏헑헓헔헕헖헗헚헜헞헟헠헡헢헣헦헧헩헪헫헭헮������헯헰헱헲헳헶헸헺헻헼헽헾헿혂혃혅혆혇혉혊혋혌혍혎혏혒������혖혗혘혙혚혛혝혞혟혡혢혣혥혦혧혨혩혪혫혬혮혯혰혱혲혳혴혵혶혷혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻�".split("");
	for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
	D[195] = "�����������������������������������������������������������������혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝홞홟홠홡������홢홣홤홥홦홨홪홫홬홭홮홯홲홳홵홶홷홸홹홺홻홼홽홾홿횀������횁횂횄횆횇횈횉횊횋횎횏횑횒횓횕횖횗횘횙횚횛횜횞횠횢횣횤횥횦횧횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층�".split("");
	for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
	D[196] = "�����������������������������������������������������������������횫횭횮횯횱횲횳횴횵횶횷횸횺횼횽횾횿훀훁훂훃훆훇훉훊훋������훍훎훏훐훒훓훕훖훘훚훛훜훝훞훟훡훢훣훥훦훧훩훪훫훬훭������훮훯훱훲훳훴훶훷훸훹훺훻훾훿휁휂휃휅휆휇휈휉휊휋휌휍휎휏휐휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼�".split("");
	for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
	D[197] = "�����������������������������������������������������������������휕휖휗휚휛휝휞휟휡휢휣휤휥휦휧휪휬휮휯휰휱휲휳휶휷휹������휺휻휽휾휿흀흁흂흃흅흆흈흊흋흌흍흎흏흒흓흕흚흛흜흝흞������흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵흶흷흸흹흺흻흾흿힀힂힃힄힅힆힇힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜�".split("");
	for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
	D[198] = "�����������������������������������������������������������������힍힎힏힑힒힓힔힕힖힗힚힜힞힟힠힡힢힣������������������������������������������������������������������������������퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁�".split("");
	for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
	D[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠�".split("");
	for(j = 0; j != D[199].length; ++j) if(D[199][j].charCodeAt(0) !== 0xFFFD) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j];}
	D[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝�".split("");
	for(j = 0; j != D[200].length; ++j) if(D[200][j].charCodeAt(0) !== 0xFFFD) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j];}
	D[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕�".split("");
	for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
	D[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢�".split("");
	for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
	D[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械�".split("");
	for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
	D[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜�".split("");
	for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
	D[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾�".split("");
	for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
	D[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴�".split("");
	for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
	D[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣�".split("");
	for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
	D[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩羅蘿螺裸邏那樂洛烙珞落諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉�".split("");
	for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
	D[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������納臘蠟衲囊娘廊朗浪狼郎乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧老蘆虜路露駑魯鷺碌祿綠菉錄鹿論壟弄濃籠聾膿農惱牢磊腦賂雷尿壘屢樓淚漏累縷陋嫩訥杻紐勒肋凜凌稜綾能菱陵尼泥匿溺多茶�".split("");
	for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
	D[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃�".split("");
	for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
	D[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅�".split("");
	for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
	D[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣�".split("");
	for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
	D[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼�".split("");
	for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
	D[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬�".split("");
	for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
	D[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅�".split("");
	for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
	D[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文�".split("");
	for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
	D[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑�".split("");
	for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
	D[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖�".split("");
	for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
	D[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦�".split("");
	for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
	D[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥�".split("");
	for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
	D[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索�".split("");
	for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
	D[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署�".split("");
	for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
	D[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬�".split("");
	for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
	D[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁�".split("");
	for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
	D[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧�".split("");
	for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
	D[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁�".split("");
	for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
	D[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額�".split("");
	for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
	D[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬�".split("");
	for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
	D[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒�".split("");
	for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
	D[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳�".split("");
	for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
	D[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療�".split("");
	for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
	D[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓�".split("");
	for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
	D[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜�".split("");
	for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
	D[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼�".split("");
	for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
	D[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄�".split("");
	for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
	D[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長�".split("");
	for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
	D[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱�".split("");
	for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
	D[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖�".split("");
	for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
	D[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫�".split("");
	for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
	D[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只�".split("");
	for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
	D[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯�".split("");
	for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
	D[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策�".split("");
	for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
	D[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢�".split("");
	for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
	D[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃�".split("");
	for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
	D[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託�".split("");
	for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
	D[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑�".split("");
	for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
	D[248] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃�".split("");
	for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
	D[249] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航�".split("");
	for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
	D[250] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型�".split("");
	for(j = 0; j != D[250].length; ++j) if(D[250][j].charCodeAt(0) !== 0xFFFD) { e[D[250][j]] = 64000 + j; d[64000 + j] = D[250][j];}
	D[251] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵�".split("");
	for(j = 0; j != D[251].length; ++j) if(D[251][j].charCodeAt(0) !== 0xFFFD) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j];}
	D[252] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆�".split("");
	for(j = 0; j != D[252].length; ++j) if(D[252][j].charCodeAt(0) !== 0xFFFD) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j];}
	D[253] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰�".split("");
	for(j = 0; j != D[253].length; ++j) if(D[253][j].charCodeAt(0) !== 0xFFFD) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j];}
	return {"enc": e, "dec": d }; })();
	cptable[950] = (function(){ var d = [], e = {}, D = [], j;
	D[0] = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[0].length; ++j) if(D[0][j].charCodeAt(0) !== 0xFFFD) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j];}
	D[161] = "����������������������������������������������������������������　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚����������������������������������﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢﹣﹤﹥﹦～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／�".split("");
	for(j = 0; j != D[161].length; ++j) if(D[161][j].charCodeAt(0) !== 0xFFFD) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j];}
	D[162] = "����������������������������������������������������������������＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁▂▃▄▅▆▇█▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭����������������������������������╮╰╯═╞╪╡◢◣◥◤╱╲╳０１２３４５６７８９ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ〡〢〣〤〥〦〧〨〩十卄卅ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖ�".split("");
	for(j = 0; j != D[162].length; ++j) if(D[162][j].charCodeAt(0) !== 0xFFFD) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j];}
	D[163] = "����������������������������������������������������������������ｗｘｙｚΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ����������������������������������ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ˙ˉˊˇˋ���������������������������������€������������������������������".split("");
	for(j = 0; j != D[163].length; ++j) if(D[163][j].charCodeAt(0) !== 0xFFFD) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j];}
	D[164] = "����������������������������������������������������������������一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才����������������������������������丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙�".split("");
	for(j = 0; j != D[164].length; ++j) if(D[164][j].charCodeAt(0) !== 0xFFFD) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j];}
	D[165] = "����������������������������������������������������������������世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外����������������������������������央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全�".split("");
	for(j = 0; j != D[165].length; ++j) if(D[165][j].charCodeAt(0) !== 0xFFFD) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j];}
	D[166] = "����������������������������������������������������������������共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年����������������������������������式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣�".split("");
	for(j = 0; j != D[166].length; ++j) if(D[166][j].charCodeAt(0) !== 0xFFFD) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j];}
	D[167] = "����������������������������������������������������������������作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍����������������������������������均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠�".split("");
	for(j = 0; j != D[167].length; ++j) if(D[167][j].charCodeAt(0) !== 0xFFFD) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j];}
	D[168] = "����������������������������������������������������������������杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒����������������������������������芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵�".split("");
	for(j = 0; j != D[168].length; ++j) if(D[168][j].charCodeAt(0) !== 0xFFFD) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j];}
	D[169] = "����������������������������������������������������������������咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居����������������������������������屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊�".split("");
	for(j = 0; j != D[169].length; ++j) if(D[169][j].charCodeAt(0) !== 0xFFFD) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j];}
	D[170] = "����������������������������������������������������������������昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠����������������������������������炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附�".split("");
	for(j = 0; j != D[170].length; ++j) if(D[170][j].charCodeAt(0) !== 0xFFFD) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j];}
	D[171] = "����������������������������������������������������������������陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品����������������������������������哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷�".split("");
	for(j = 0; j != D[171].length; ++j) if(D[171][j].charCodeAt(0) !== 0xFFFD) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j];}
	D[172] = "����������������������������������������������������������������拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗����������������������������������活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄�".split("");
	for(j = 0; j != D[172].length; ++j) if(D[172][j].charCodeAt(0) !== 0xFFFD) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j];}
	D[173] = "����������������������������������������������������������������耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥����������������������������������迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪�".split("");
	for(j = 0; j != D[173].length; ++j) if(D[173][j].charCodeAt(0) !== 0xFFFD) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j];}
	D[174] = "����������������������������������������������������������������哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙����������������������������������恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓�".split("");
	for(j = 0; j != D[174].length; ++j) if(D[174][j].charCodeAt(0) !== 0xFFFD) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j];}
	D[175] = "����������������������������������������������������������������浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷����������������������������������砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃�".split("");
	for(j = 0; j != D[175].length; ++j) if(D[175][j].charCodeAt(0) !== 0xFFFD) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j];}
	D[176] = "����������������������������������������������������������������虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡����������������������������������陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀�".split("");
	for(j = 0; j != D[176].length; ++j) if(D[176][j].charCodeAt(0) !== 0xFFFD) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j];}
	D[177] = "����������������������������������������������������������������娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽����������������������������������情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺�".split("");
	for(j = 0; j != D[177].length; ++j) if(D[177][j].charCodeAt(0) !== 0xFFFD) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j];}
	D[178] = "����������������������������������������������������������������毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶����������������������������������瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼�".split("");
	for(j = 0; j != D[178].length; ++j) if(D[178][j].charCodeAt(0) !== 0xFFFD) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j];}
	D[179] = "����������������������������������������������������������������莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途����������������������������������部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠�".split("");
	for(j = 0; j != D[179].length; ++j) if(D[179][j].charCodeAt(0) !== 0xFFFD) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j];}
	D[180] = "����������������������������������������������������������������婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍����������������������������������插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋�".split("");
	for(j = 0; j != D[180].length; ++j) if(D[180][j].charCodeAt(0) !== 0xFFFD) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j];}
	D[181] = "����������������������������������������������������������������溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘����������������������������������窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁�".split("");
	for(j = 0; j != D[181].length; ++j) if(D[181][j].charCodeAt(0) !== 0xFFFD) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j];}
	D[182] = "����������������������������������������������������������������詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑����������������������������������間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼�".split("");
	for(j = 0; j != D[182].length; ++j) if(D[182][j].charCodeAt(0) !== 0xFFFD) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j];}
	D[183] = "����������������������������������������������������������������媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業����������������������������������楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督�".split("");
	for(j = 0; j != D[183].length; ++j) if(D[183][j].charCodeAt(0) !== 0xFFFD) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j];}
	D[184] = "����������������������������������������������������������������睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫����������������������������������腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊�".split("");
	for(j = 0; j != D[184].length; ++j) if(D[184][j].charCodeAt(0) !== 0xFFFD) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j];}
	D[185] = "����������������������������������������������������������������辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴����������������������������������飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇�".split("");
	for(j = 0; j != D[185].length; ++j) if(D[185][j].charCodeAt(0) !== 0xFFFD) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j];}
	D[186] = "����������������������������������������������������������������愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢����������������������������������滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬�".split("");
	for(j = 0; j != D[186].length; ++j) if(D[186][j].charCodeAt(0) !== 0xFFFD) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j];}
	D[187] = "����������������������������������������������������������������罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤����������������������������������說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜�".split("");
	for(j = 0; j != D[187].length; ++j) if(D[187][j].charCodeAt(0) !== 0xFFFD) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j];}
	D[188] = "����������������������������������������������������������������劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂����������������������������������慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃�".split("");
	for(j = 0; j != D[188].length; ++j) if(D[188][j].charCodeAt(0) !== 0xFFFD) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j];}
	D[189] = "����������������������������������������������������������������瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯����������������������������������翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞�".split("");
	for(j = 0; j != D[189].length; ++j) if(D[189][j].charCodeAt(0) !== 0xFFFD) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j];}
	D[190] = "����������������������������������������������������������������輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉����������������������������������鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡�".split("");
	for(j = 0; j != D[190].length; ++j) if(D[190][j].charCodeAt(0) !== 0xFFFD) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j];}
	D[191] = "����������������������������������������������������������������濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊����������������������������������縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚�".split("");
	for(j = 0; j != D[191].length; ++j) if(D[191][j].charCodeAt(0) !== 0xFFFD) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j];}
	D[192] = "����������������������������������������������������������������錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇����������������������������������嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬�".split("");
	for(j = 0; j != D[192].length; ++j) if(D[192][j].charCodeAt(0) !== 0xFFFD) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j];}
	D[193] = "����������������������������������������������������������������瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪����������������������������������薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁�".split("");
	for(j = 0; j != D[193].length; ++j) if(D[193][j].charCodeAt(0) !== 0xFFFD) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j];}
	D[194] = "����������������������������������������������������������������駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘����������������������������������癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦�".split("");
	for(j = 0; j != D[194].length; ++j) if(D[194][j].charCodeAt(0) !== 0xFFFD) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j];}
	D[195] = "����������������������������������������������������������������鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸����������������������������������獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類�".split("");
	for(j = 0; j != D[195].length; ++j) if(D[195][j].charCodeAt(0) !== 0xFFFD) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j];}
	D[196] = "����������������������������������������������������������������願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼����������������������������������纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴�".split("");
	for(j = 0; j != D[196].length; ++j) if(D[196][j].charCodeAt(0) !== 0xFFFD) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j];}
	D[197] = "����������������������������������������������������������������護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬����������������������������������禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒�".split("");
	for(j = 0; j != D[197].length; ++j) if(D[197][j].charCodeAt(0) !== 0xFFFD) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j];}
	D[198] = "����������������������������������������������������������������讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲���������������������������������������������������������������������������������������������������������������������������������".split("");
	for(j = 0; j != D[198].length; ++j) if(D[198][j].charCodeAt(0) !== 0xFFFD) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j];}
	D[201] = "����������������������������������������������������������������乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕����������������������������������氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋�".split("");
	for(j = 0; j != D[201].length; ++j) if(D[201][j].charCodeAt(0) !== 0xFFFD) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j];}
	D[202] = "����������������������������������������������������������������汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘����������������������������������吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇�".split("");
	for(j = 0; j != D[202].length; ++j) if(D[202][j].charCodeAt(0) !== 0xFFFD) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j];}
	D[203] = "����������������������������������������������������������������杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓����������������������������������芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢�".split("");
	for(j = 0; j != D[203].length; ++j) if(D[203][j].charCodeAt(0) !== 0xFFFD) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j];}
	D[204] = "����������������������������������������������������������������坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋����������������������������������怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲�".split("");
	for(j = 0; j != D[204].length; ++j) if(D[204][j].charCodeAt(0) !== 0xFFFD) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j];}
	D[205] = "����������������������������������������������������������������泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺����������������������������������矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏�".split("");
	for(j = 0; j != D[205].length; ++j) if(D[205][j].charCodeAt(0) !== 0xFFFD) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j];}
	D[206] = "����������������������������������������������������������������哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛����������������������������������峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺�".split("");
	for(j = 0; j != D[206].length; ++j) if(D[206][j].charCodeAt(0) !== 0xFFFD) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j];}
	D[207] = "����������������������������������������������������������������柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂����������������������������������洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀�".split("");
	for(j = 0; j != D[207].length; ++j) if(D[207][j].charCodeAt(0) !== 0xFFFD) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j];}
	D[208] = "����������������������������������������������������������������穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪����������������������������������苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱�".split("");
	for(j = 0; j != D[208].length; ++j) if(D[208][j].charCodeAt(0) !== 0xFFFD) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j];}
	D[209] = "����������������������������������������������������������������唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧����������������������������������恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤�".split("");
	for(j = 0; j != D[209].length; ++j) if(D[209][j].charCodeAt(0) !== 0xFFFD) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j];}
	D[210] = "����������������������������������������������������������������毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸����������������������������������牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐�".split("");
	for(j = 0; j != D[210].length; ++j) if(D[210][j].charCodeAt(0) !== 0xFFFD) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j];}
	D[211] = "����������������������������������������������������������������笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢����������������������������������荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐�".split("");
	for(j = 0; j != D[211].length; ++j) if(D[211][j].charCodeAt(0) !== 0xFFFD) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j];}
	D[212] = "����������������������������������������������������������������酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅����������������������������������唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏�".split("");
	for(j = 0; j != D[212].length; ++j) if(D[212][j].charCodeAt(0) !== 0xFFFD) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j];}
	D[213] = "����������������������������������������������������������������崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟����������������������������������捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉�".split("");
	for(j = 0; j != D[213].length; ++j) if(D[213][j].charCodeAt(0) !== 0xFFFD) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j];}
	D[214] = "����������������������������������������������������������������淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏����������������������������������痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟�".split("");
	for(j = 0; j != D[214].length; ++j) if(D[214][j].charCodeAt(0) !== 0xFFFD) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j];}
	D[215] = "����������������������������������������������������������������耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷����������������������������������蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪�".split("");
	for(j = 0; j != D[215].length; ++j) if(D[215][j].charCodeAt(0) !== 0xFFFD) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j];}
	D[216] = "����������������������������������������������������������������釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷����������������������������������堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔�".split("");
	for(j = 0; j != D[216].length; ++j) if(D[216][j].charCodeAt(0) !== 0xFFFD) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j];}
	D[217] = "����������������������������������������������������������������惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒����������������������������������晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞�".split("");
	for(j = 0; j != D[217].length; ++j) if(D[217][j].charCodeAt(0) !== 0xFFFD) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j];}
	D[218] = "����������������������������������������������������������������湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖����������������������������������琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥�".split("");
	for(j = 0; j != D[218].length; ++j) if(D[218][j].charCodeAt(0) !== 0xFFFD) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j];}
	D[219] = "����������������������������������������������������������������罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳����������������������������������菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺�".split("");
	for(j = 0; j != D[219].length; ++j) if(D[219][j].charCodeAt(0) !== 0xFFFD) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j];}
	D[220] = "����������������������������������������������������������������軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈����������������������������������隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆�".split("");
	for(j = 0; j != D[220].length; ++j) if(D[220][j].charCodeAt(0) !== 0xFFFD) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j];}
	D[221] = "����������������������������������������������������������������媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤����������������������������������搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼�".split("");
	for(j = 0; j != D[221].length; ++j) if(D[221][j].charCodeAt(0) !== 0xFFFD) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j];}
	D[222] = "����������������������������������������������������������������毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓����������������������������������煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓�".split("");
	for(j = 0; j != D[222].length; ++j) if(D[222][j].charCodeAt(0) !== 0xFFFD) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j];}
	D[223] = "����������������������������������������������������������������稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯����������������������������������腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤�".split("");
	for(j = 0; j != D[223].length; ++j) if(D[223][j].charCodeAt(0) !== 0xFFFD) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j];}
	D[224] = "����������������������������������������������������������������觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿����������������������������������遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠�".split("");
	for(j = 0; j != D[224].length; ++j) if(D[224][j].charCodeAt(0) !== 0xFFFD) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j];}
	D[225] = "����������������������������������������������������������������凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠����������������������������������寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉�".split("");
	for(j = 0; j != D[225].length; ++j) if(D[225][j].charCodeAt(0) !== 0xFFFD) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j];}
	D[226] = "����������������������������������������������������������������榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊����������������������������������漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓�".split("");
	for(j = 0; j != D[226].length; ++j) if(D[226][j].charCodeAt(0) !== 0xFFFD) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j];}
	D[227] = "����������������������������������������������������������������禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞����������������������������������耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻�".split("");
	for(j = 0; j != D[227].length; ++j) if(D[227][j].charCodeAt(0) !== 0xFFFD) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j];}
	D[228] = "����������������������������������������������������������������裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍����������������������������������銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘�".split("");
	for(j = 0; j != D[228].length; ++j) if(D[228][j].charCodeAt(0) !== 0xFFFD) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j];}
	D[229] = "����������������������������������������������������������������噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉����������������������������������憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒�".split("");
	for(j = 0; j != D[229].length; ++j) if(D[229][j].charCodeAt(0) !== 0xFFFD) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j];}
	D[230] = "����������������������������������������������������������������澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙����������������������������������獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟�".split("");
	for(j = 0; j != D[230].length; ++j) if(D[230][j].charCodeAt(0) !== 0xFFFD) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j];}
	D[231] = "����������������������������������������������������������������膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢����������������������������������蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧�".split("");
	for(j = 0; j != D[231].length; ++j) if(D[231][j].charCodeAt(0) !== 0xFFFD) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j];}
	D[232] = "����������������������������������������������������������������踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓����������������������������������銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮�".split("");
	for(j = 0; j != D[232].length; ++j) if(D[232][j].charCodeAt(0) !== 0xFFFD) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j];}
	D[233] = "����������������������������������������������������������������噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺����������������������������������憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸�".split("");
	for(j = 0; j != D[233].length; ++j) if(D[233][j].charCodeAt(0) !== 0xFFFD) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j];}
	D[234] = "����������������������������������������������������������������澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙����������������������������������瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘�".split("");
	for(j = 0; j != D[234].length; ++j) if(D[234][j].charCodeAt(0) !== 0xFFFD) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j];}
	D[235] = "����������������������������������������������������������������蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠����������������������������������諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌�".split("");
	for(j = 0; j != D[235].length; ++j) if(D[235][j].charCodeAt(0) !== 0xFFFD) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j];}
	D[236] = "����������������������������������������������������������������錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕����������������������������������魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎�".split("");
	for(j = 0; j != D[236].length; ++j) if(D[236][j].charCodeAt(0) !== 0xFFFD) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j];}
	D[237] = "����������������������������������������������������������������檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶����������������������������������瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞�".split("");
	for(j = 0; j != D[237].length; ++j) if(D[237][j].charCodeAt(0) !== 0xFFFD) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j];}
	D[238] = "����������������������������������������������������������������蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞����������������������������������謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜�".split("");
	for(j = 0; j != D[238].length; ++j) if(D[238][j].charCodeAt(0) !== 0xFFFD) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j];}
	D[239] = "����������������������������������������������������������������鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰����������������������������������鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶�".split("");
	for(j = 0; j != D[239].length; ++j) if(D[239][j].charCodeAt(0) !== 0xFFFD) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j];}
	D[240] = "����������������������������������������������������������������璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒����������������������������������臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧�".split("");
	for(j = 0; j != D[240].length; ++j) if(D[240][j].charCodeAt(0) !== 0xFFFD) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j];}
	D[241] = "����������������������������������������������������������������蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪����������������������������������鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰�".split("");
	for(j = 0; j != D[241].length; ++j) if(D[241][j].charCodeAt(0) !== 0xFFFD) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j];}
	D[242] = "����������������������������������������������������������������徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛����������������������������������礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕�".split("");
	for(j = 0; j != D[242].length; ++j) if(D[242][j].charCodeAt(0) !== 0xFFFD) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j];}
	D[243] = "����������������������������������������������������������������譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦����������������������������������鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲�".split("");
	for(j = 0; j != D[243].length; ++j) if(D[243][j].charCodeAt(0) !== 0xFFFD) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j];}
	D[244] = "����������������������������������������������������������������嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩����������������������������������禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿�".split("");
	for(j = 0; j != D[244].length; ++j) if(D[244][j].charCodeAt(0) !== 0xFFFD) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j];}
	D[245] = "����������������������������������������������������������������鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛����������������������������������鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥�".split("");
	for(j = 0; j != D[245].length; ++j) if(D[245][j].charCodeAt(0) !== 0xFFFD) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j];}
	D[246] = "����������������������������������������������������������������蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺����������������������������������騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚�".split("");
	for(j = 0; j != D[246].length; ++j) if(D[246][j].charCodeAt(0) !== 0xFFFD) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j];}
	D[247] = "����������������������������������������������������������������糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊����������������������������������驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾�".split("");
	for(j = 0; j != D[247].length; ++j) if(D[247][j].charCodeAt(0) !== 0xFFFD) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j];}
	D[248] = "����������������������������������������������������������������讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏����������������������������������齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚�".split("");
	for(j = 0; j != D[248].length; ++j) if(D[248][j].charCodeAt(0) !== 0xFFFD) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j];}
	D[249] = "����������������������������������������������������������������纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊����������������������������������龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓�".split("");
	for(j = 0; j != D[249].length; ++j) if(D[249][j].charCodeAt(0) !== 0xFFFD) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j];}
	return {"enc": e, "dec": d }; })();
	cptable[1250] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1251] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1252] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1253] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1254] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1255] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1256] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1257] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[1258] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10000] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10006] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10007] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10029] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10079] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	cptable[10081] = (function(){ var d = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for(var i=0;i!=d.length;++i) { if(d.charCodeAt(i) !== 0xFFFD) e[d.charAt(i)] = i; D[i] = d.charAt(i); } return {"enc": e, "dec": D }; })();
	if (typeof module !== 'undefined' && module.exports) module.exports = cptable;
	/* cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
	/* vim: set ft=javascript: */
	/*jshint newcap: false */
	(function(root, factory) {
	  "use strict";
	  if(typeof cptable === "undefined") {
	    if(true){
	      var cpt = cptable;
	      if (typeof module !== 'undefined' && module.exports) module.exports = factory(cpt);
	      else root.cptable = factory(cpt);
	    } else {}
	  } else cptable = factory(cptable);
	}(this, function(cpt){
	  "use strict";
	  var magic = {
	    "1200":"utf16le",
	    "1201":"utf16be",
	    "12000":"utf32le",
	    "12001":"utf32be",
	    "16969":"utf64le",
	    "20127":"ascii",
	    "65000":"utf7",
	    "65001":"utf8"
	  };

	  var sbcs_cache = [874,1250,1251,1252,1253,1254,1255,1256,10000];
	  var dbcs_cache = [932,936,949,950];
	  var magic_cache = [65001];
	  var magic_decode = {};
	  var magic_encode = {};
	  var cpdcache = {};
	  var cpecache = {};

	  var sfcc = function sfcc(x) { return String.fromCharCode(x); };
	  var cca = function cca(x) { return x.charCodeAt(0); };

	  var has_buf = (typeof Buffer !== 'undefined');
	  if(has_buf) {
	    var mdl = 1024, mdb = new Buffer(mdl);
	    var make_EE = function make_EE(E){
	      var EE = new Buffer(65536);
	      for(var i = 0; i < 65536;++i) EE[i] = 0;
	      var keys = Object.keys(E), len = keys.length;
	      for(var ee = 0, e = keys[ee]; ee < len; ++ee) {
	        if(!(e = keys[ee])) continue;
	        EE[e.charCodeAt(0)] = E[e];
	      }
	      return EE;
	    };
	    var sbcs_encode = function make_sbcs_encode(cp) {
	      var EE = make_EE(cpt[cp].enc);
	      return function sbcs_e(data, ofmt) {
	        var len = data.length;
	        var out, i=0, j=0, D=0, w=0;
	        if(typeof data === 'string') {
	          out = new Buffer(len);
	          for(i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)];
	        } else if(Buffer.isBuffer(data)) {
	          out = new Buffer(2*len);
	          j = 0;
	          for(i = 0; i < len; ++i) {
	            D = data[i];
	            if(D < 128) out[j++] = EE[D];
	            else if(D < 224) { out[j++] = EE[((D&31)<<6)+(data[i+1]&63)]; ++i; }
	            else if(D < 240) { out[j++] = EE[((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63)]; i+=2; }
	            else {
	              w = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3;
	              if(w < 65536) out[j++] = EE[w];
	              else { w -= 65536; out[j++] = EE[0xD800 + ((w>>10)&1023)]; out[j++] = EE[0xDC00 + (w&1023)]; }
	            }
	          }
	          out = out.slice(0,j);
	        } else {
	          out = new Buffer(len);
	          for(i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)];
	        }
	        if(!ofmt || ofmt === 'buf') return out;
	        if(ofmt !== 'arr') return out.toString('binary');
	        return [].slice.call(out);
	      };
	    };
	    var sbcs_decode = function make_sbcs_decode(cp) {
	      var D = cpt[cp].dec;
	      var DD = new Buffer(131072), d=0, c="";
	      for(d=0;d<D.length;++d) {
	        if(!(c=D[d])) continue;
	        var w = c.charCodeAt(0);
	        DD[2*d] = w&255; DD[2*d+1] = w>>8;
	      }
	      return function sbcs_d(data) {
	        var len = data.length, i=0, j=0;
	        if(2 * len > mdl) { mdl = 2 * len; mdb = new Buffer(mdl); }
	        if(Buffer.isBuffer(data)) {
	          for(i = 0; i < len; i++) {
	            j = 2*data[i];
	            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
	          }
	        } else if(typeof data === "string") {
	          for(i = 0; i < len; i++) {
	            j = 2*data.charCodeAt(i);
	            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
	          }
	        } else {
	          for(i = 0; i < len; i++) {
	            j = 2*data[i];
	            mdb[2*i] = DD[j]; mdb[2*i+1] = DD[j+1];
	          }
	        }
	        return mdb.slice(0, 2 * len).toString('ucs2');
	      };
	    };
	    var dbcs_encode = function make_dbcs_encode(cp) {
	      var E = cpt[cp].enc;
	      var EE = new Buffer(131072);
	      for(var i = 0; i < 131072; ++i) EE[i] = 0;
	      var keys = Object.keys(E);
	      for(var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
	        if(!(e = keys[ee])) continue;
	        var f = e.charCodeAt(0);
	        EE[2*f] = E[e] & 255; EE[2*f+1] = E[e]>>8;
	      }
	      return function dbcs_e(data, ofmt) {
	        var len = data.length, out = new Buffer(2*len), i=0, j=0, jj=0, k=0, D=0;
	        if(typeof data === 'string') {
	          for(i = k = 0; i < len; ++i) {
	            j = data.charCodeAt(i)*2;
	            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
	          }
	          out = out.slice(0,k);
	        } else if(Buffer.isBuffer(data)) {
	          for(i = k = 0; i < len; ++i) {
	            D = data[i];
	            if(D < 128) j = D;
	            else if(D < 224) { j = ((D&31)<<6)+(data[i+1]&63); ++i; }
	            else if(D < 240) { j = ((D&15)<<12)+((data[i+1]&63)<<6)+(data[i+2]&63); i+=2; }
	            else { j = ((D&7)<<18)+((data[i+1]&63)<<12)+((data[i+2]&63)<<6)+(data[i+3]&63); i+=3; }
	            if(j<65536) { j*=2; out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j]; }
	            else { jj = j-65536;
	              j=2*(0xD800 + ((jj>>10)&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
	              j=2*(0xDC00 + (jj&1023)); out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
	            }
	          }
	          out = out.slice(0,k);
	        } else {
	          for(i = k = 0; i < len; i++) {
	            j = data[i].charCodeAt(0)*2;
	            out[k++] = EE[j+1] || EE[j]; if(EE[j+1] > 0) out[k++] = EE[j];
	          }
	        }
	        if(!ofmt || ofmt === 'buf') return out;
	        if(ofmt !== 'arr') return out.toString('binary');
	        return [].slice.call(out);
	      };
	    };
	    var dbcs_decode = function make_dbcs_decode(cp) {
	      var D = cpt[cp].dec;
	      var DD = new Buffer(131072), d=0, c, w=0, j=0, i=0;
	      for(i = 0; i < 65536; ++i) { DD[2*i] = 0xFF; DD[2*i+1] = 0xFD;}
	      for(d = 0; d < D.length; ++d) {
	        if(!(c=D[d])) continue;
	        w = c.charCodeAt(0);
	        j = 2*d;
	        DD[j] = w&255; DD[j+1] = w>>8;
	      }
	      return function dbcs_d(data) {
	        var len = data.length, out = new Buffer(2*len), i=0, j=0, k=0;
	        if(Buffer.isBuffer(data)) {
	          for(i = 0; i < len; i++) {
	            j = 2*data[i];
	            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
	            out[k++] = DD[j]; out[k++] = DD[j+1];
	          }
	        } else if(typeof data === "string") {
	          for(i = 0; i < len; i++) {
	            j = 2*data.charCodeAt(i);
	            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data.charCodeAt(i)<<8)+data.charCodeAt(i+1)); ++i; }
	            out[k++] = DD[j]; out[k++] = DD[j+1];
	          }
	        } else {
	          for(i = 0; i < len; i++) {
	            j = 2*data[i];
	            if(DD[j]===0xFF && DD[j+1]===0xFD) { j=2*((data[i]<<8)+data[i+1]); ++i; }
	            out[k++] = DD[j]; out[k++] = DD[j+1];
	          }
	        }
	        return out.slice(0,k).toString('ucs2');
	      };
	    };
	    magic_decode[65001] = function utf8_d(data) {
	      if(typeof data === "string") return utf8_d(data.split("").map(cca));
	      var len = data.length, w = 0, ww = 0;
	      if(4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl); }
	      var i = 0;
	      if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
	      for(var j = 1, k = 0, D = 0; i < len; i+=j) {
	        j = 1; D = data[i];
	        if(D < 128) w = D;
	        else if(D < 224) { w=(D&31)*64+(data[i+1]&63); j=2; }
	        else if(D < 240) { w=((D&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
	        else { w=(D&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
	        if(w < 65536) { mdb[k++] = w&255; mdb[k++] = w>>8; }
	        else {
	          w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
	          mdb[k++] = ww&255; mdb[k++] = ww>>>8; mdb[k++] = w&255; mdb[k++] = (w>>>8)&255;
	        }
	      }
	      return mdb.slice(0,k).toString('ucs2');
	    };
	    magic_encode[65001] = function utf8_e(data, ofmt) {
	      if(has_buf && Buffer.isBuffer(data)) {
	        if(!ofmt || ofmt === 'buf') return data;
	        if(ofmt !== 'arr') return data.toString('binary');
	        return [].slice.call(data);
	      }
	      var len = data.length, w = 0, ww = 0, j = 0;
	      var direct = typeof data === "string";
	      if(4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl); }
	      for(var i = 0; i < len; ++i) {
	        w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
	        if(w <= 0x007F) mdb[j++] = w;
	        else if(w <= 0x07FF) {
	          mdb[j++] = 192 + (w >> 6);
	          mdb[j++] = 128 + (w&63);
	        } else if(w >= 0xD800 && w <= 0xDFFF) {
	          w -= 0xD800; ++i;
	          ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 0xDC00 + (w << 10);
	          mdb[j++] = 240 + ((ww>>>18) & 0x07);
	          mdb[j++] = 144 + ((ww>>>12) & 0x3F);
	          mdb[j++] = 128 + ((ww>>>6) & 0x3F);
	          mdb[j++] = 128 + (ww & 0x3F);
	        } else {
	          mdb[j++] = 224 + (w >> 12);
	          mdb[j++] = 128 + ((w >> 6)&63);
	          mdb[j++] = 128 + (w&63);
	        }
	      }
	      if(!ofmt || ofmt === 'buf') return mdb.slice(0,j);
	      if(ofmt !== 'arr') return mdb.slice(0,j).toString('binary');
	      return [].slice.call(mdb, 0, j);
	    };
	  }

	  var encache = function encache() {
	    if(has_buf) {
	      if(cpdcache[sbcs_cache[0]]) return;
	      var i=0, s=0;
	      for(i = 0; i < sbcs_cache.length; ++i) {
	        s = sbcs_cache[i];
	        if(cpt[s]) {
	          cpdcache[s] = sbcs_decode(s);
	          cpecache[s] = sbcs_encode(s);
	        }
	      }
	      for(i = 0; i < dbcs_cache.length; ++i) {
	        s = dbcs_cache[i];
	        if(cpt[s]) {
	          cpdcache[s] = dbcs_decode(s);
	          cpecache[s] = dbcs_encode(s);
	        }
	      }
	      for(i = 0; i < magic_cache.length; ++i) {
	        s = magic_cache[i];
	        if(magic_decode[s]) cpdcache[s] = magic_decode[s];
	        if(magic_encode[s]) cpecache[s] = magic_encode[s];
	      }
	    }
	  };
	  var null_enc = function(data, ofmt) { return ""; };
	  var cp_decache = function cp_decache(cp) { delete cpdcache[cp]; delete cpecache[cp]; };
	  var decache = function decache() {
	    if(has_buf) {
	      if(!cpdcache[sbcs_cache[0]]) return;
	      sbcs_cache.forEach(cp_decache);
	      dbcs_cache.forEach(cp_decache);
	      magic_cache.forEach(cp_decache);
	    }
	    last_enc = null_enc; last_cp = 0;
	  };
	  var cache = {
	    encache: encache,
	    decache: decache,
	    sbcs: sbcs_cache,
	    dbcs: dbcs_cache
	  };

	  encache();

	  var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	  var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
	  var last_enc = null_enc, last_cp = 0;
	  var encode = function encode(cp, data, ofmt) {
	    if(cp === last_cp && last_enc) { return last_enc(data, ofmt); }
	    if(cpecache[cp]) { last_enc = cpecache[last_cp=cp]; return last_enc(data, ofmt); }
	    if(has_buf && Buffer.isBuffer(data)) data = data.toString('utf8');
	    var len = data.length;
	    var out = has_buf ? new Buffer(4*len) : [], w=0, i=0, j = 0, ww=0;
	    var C = cpt[cp], E, M = "";
	    var isstr = typeof data === 'string';
	    if(C && (E=C.enc)) for(i = 0; i < len; ++i, ++j) {
	      w = E[isstr? data.charAt(i) : data[i]];
	      if(w > 255) {
	        out[j] = w>>8;
	        out[++j] = w&255;
	      } else out[j] = w&255;
	    }
	    else if((M=magic[cp])) switch(M) {
	      case "utf8":
	        if(has_buf && isstr) { out = new Buffer(data, M); j = out.length; break; }
	        for(i = 0; i < len; ++i, ++j) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          if(w <= 0x007F) out[j] = w;
	          else if(w <= 0x07FF) {
	            out[j]   = 192 + (w >> 6);
	            out[++j] = 128 + (w&63);
	          } else if(w >= 0xD800 && w <= 0xDFFF) {
	            w -= 0xD800;
	            ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 0xDC00 + (w << 10);
	            out[j]   = 240 + ((ww>>>18) & 0x07);
	            out[++j] = 144 + ((ww>>>12) & 0x3F);
	            out[++j] = 128 + ((ww>>>6) & 0x3F);
	            out[++j] = 128 + (ww & 0x3F);
	          } else {
	            out[j]   = 224 + (w >> 12);
	            out[++j] = 128 + ((w >> 6)&63);
	            out[++j] = 128 + (w&63);
	          }
	        }
	        break;
	      case "ascii":
	        if(has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break; }
	        for(i = 0; i < len; ++i, ++j) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          if(w <= 0x007F) out[j] = w;
	          else throw new Error("bad ascii " + w);
	        }
	        break;
	      case "utf16le":
	        if(has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break; }
	        for(i = 0; i < len; ++i) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          out[j++] = w&255;
	          out[j++] = w>>8;
	        }
	        break;
	      case "utf16be":
	        for(i = 0; i < len; ++i) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          out[j++] = w>>8;
	          out[j++] = w&255;
	        }
	        break;
	      case "utf32le":
	        for(i = 0; i < len; ++i) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
	          out[j++] = w&255; w >>= 8;
	          out[j++] = w&255; w >>= 8;
	          out[j++] = w&255; w >>= 8;
	          out[j++] = w&255;
	        }
	        break;
	      case "utf32be":
	        for(i = 0; i < len; ++i) {
	          w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
	          if(w >= 0xD800 && w <= 0xDFFF) w = 0x10000 + ((w - 0xD800) << 10) + (data[++i].charCodeAt(0) - 0xDC00);
	          out[j+3] = w&255; w >>= 8;
	          out[j+2] = w&255; w >>= 8;
	          out[j+1] = w&255; w >>= 8;
	          out[j] = w&255;
	          j+=4;
	        }
	        break;
	      case "utf7":
	        for(i = 0; i < len; i++) {
	          var c = isstr ? data.charAt(i) : data[i].charAt(0);
	          if(c === "+") { out[j++] = 0x2b; out[j++] = 0x2d; continue; }
	          if(SetD.indexOf(c) > -1) { out[j++] = c.charCodeAt(0); continue; }
	          var tt = encode(1201, c);
	          out[j++] = 0x2b;
	          out[j++] = BM.charCodeAt(tt[0]>>2);
	          out[j++] = BM.charCodeAt(((tt[0]&0x03)<<4) + ((tt[1]||0)>>4));
	          out[j++] = BM.charCodeAt(((tt[1]&0x0F)<<2) + ((tt[2]||0)>>6));
	          out[j++] = 0x2d;
	        }
	        break;
	      default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
	    }
	    else throw new Error("Unrecognized CP: " + cp);
	    out = out.slice(0,j);
	    if(!has_buf) return (ofmt == 'str') ? (out).map(sfcc).join("") : out;
	    if(!ofmt || ofmt === 'buf') return out;
	    if(ofmt !== 'arr') return out.toString('binary');
	    return [].slice.call(out);
	  };
	  var decode = function decode(cp, data) {
	    var F; if((F=cpdcache[cp])) return F(data);
	    if(typeof data === "string") return decode(cp, data.split("").map(cca));
	    var len = data.length, out = new Array(len), s="", w=0, i=0, j=1, k=0, ww=0;
	    var C = cpt[cp], D, M="";
	    if(C && (D=C.dec)) {
	      for(i = 0; i < len; i+=j) {
	        j = 2;
	        s = D[(data[i]<<8)+ data[i+1]];
	        if(!s) {
	          j = 1;
	          s = D[data[i]];
	        }
	        if(!s) throw new Error('Unrecognized code: ' + data[i] + ' ' + data[i+j-1] + ' ' + i + ' ' + j + ' ' + D[data[i]]);
	        out[k++] = s;
	      }
	    }
	    else if((M=magic[cp])) switch(M) {
	      case "utf8":
	        if(len >= 3 && data[0] == 0xEF) if(data[1] == 0xBB && data[2] == 0xBF) i = 3;
	        for(; i < len; i+=j) {
	          j = 1;
	          if(data[i] < 128) w = data[i];
	          else if(data[i] < 224) { w=(data[i]&31)*64+(data[i+1]&63); j=2; }
	          else if(data[i] < 240) { w=((data[i]&15)<<12)+(data[i+1]&63)*64+(data[i+2]&63); j=3; }
	          else { w=(data[i]&7)*262144+((data[i+1]&63)<<12)+(data[i+2]&63)*64+(data[i+3]&63); j=4; }
	          if(w < 65536) { out[k++] = String.fromCharCode(w); }
	          else {
	            w -= 65536; ww = 0xD800 + ((w>>10)&1023); w = 0xDC00 + (w&1023);
	            out[k++] = String.fromCharCode(ww); out[k++] = String.fromCharCode(w);
	          }
	        }
	        break;
	      case "ascii":
	        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
	        for(i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]);
	        k = len; break;
	      case "utf16le":
	        if(len >= 2 && data[0] == 0xFF) if(data[1] == 0xFE) i = 2;
	        if(has_buf && Buffer.isBuffer(data)) return data.toString(M);
	        j = 2;
	        for(; i+1 < len; i+=j) {
	          out[k++] = String.fromCharCode((data[i+1]<<8) + data[i]);
	        }
	        break;
	      case "utf16be":
	        if(len >= 2 && data[0] == 0xFE) if(data[1] == 0xFF) i = 2;
	        j = 2;
	        for(; i+1 < len; i+=j) {
	          out[k++] = String.fromCharCode((data[i]<<8) + data[i+1]);
	        }
	        break;
	      case "utf32le":
	        if(len >= 4 && data[0] == 0xFF) if(data[1] == 0xFE && data[2] === 0 && data[3] === 0) i = 4;
	        j = 4;
	        for(; i < len; i+=j) {
	          w = (data[i+3]<<24) + (data[i+2]<<16) + (data[i+1]<<8) + (data[i]);
	          if(w > 0xFFFF) {
	            w -= 0x10000;
	            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
	            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
	          }
	          else out[k++] = String.fromCharCode(w);
	        }
	        break;
	      case "utf32be":
	        if(len >= 4 && data[3] == 0xFF) if(data[2] == 0xFE && data[1] === 0 && data[0] === 0) i = 4;
	        j = 4;
	        for(; i < len; i+=j) {
	          w = (data[i]<<24) + (data[i+1]<<16) + (data[i+2]<<8) + (data[i+3]);
	          if(w > 0xFFFF) {
	            w -= 0x10000;
	            out[k++] = String.fromCharCode(0xD800 + ((w >> 10) & 0x3FF));
	            out[k++] = String.fromCharCode(0xDC00 + (w & 0x3FF));
	          }
	          else out[k++] = String.fromCharCode(w);
	        }
	        break;
	      case "utf7":
	        if(len >= 4 && data[0] == 0x2B && data[1] == 0x2F && data[2] == 0x76) {
	          if(len >= 5 && data[3] == 0x38 && data[4] == 0x2D) i = 5;
	          else if(data[3] == 0x38 || data[3] == 0x39 || data[3] == 0x2B || data[3] == 0x2F) i = 4;
	        }
	        for(; i < len; i+=j) {
	          if(data[i] !== 0x2b) { j=1; out[k++] = String.fromCharCode(data[i]); continue; }
	          j=1;
	          if(data[i+1] === 0x2d) { j = 2; out[k++] = "+"; continue; }
	          while(String.fromCharCode(data[i+j]).match(/[A-Za-z0-9+\/]/)) j++;
	          var dash = 0;
	          if(data[i+j] === 0x2d) { ++j; dash=1; }
	          var tt = [];
	          var o64 = "";
	          var c1=0, c2=0, c3=0;
	          var e1=0, e2=0, e3=0, e4=0;
	          for(var l = 1; l < j - dash;) {
	            e1 = BM.indexOf(String.fromCharCode(data[i+l++]));
	            e2 = BM.indexOf(String.fromCharCode(data[i+l++]));
	            c1 = e1 << 2 | e2 >> 4;
	            tt.push(c1);
	            e3 = BM.indexOf(String.fromCharCode(data[i+l++]));
	            if(e3 === -1) break;
	            c2 = (e2 & 15) << 4 | e3 >> 2;
	            tt.push(c2);
	            e4 = BM.indexOf(String.fromCharCode(data[i+l++]));
	            if(e4 === -1) break;
	            c3 = (e3 & 3) << 6 | e4;
	            if(e4 < 64) tt.push(c3);
	          }
	          o64 = decode(1201, tt);
	          for(l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);
	        }
	        break;
	      default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
	    }
	    else throw new Error("Unrecognized CP: " + cp);
	    return out.slice(0,k).join("");
	  };
	  var hascp = function hascp(cp) { return !!(cpt[cp] || magic[cp]); };
	  cpt.utils = { decode: decode, encode: encode, hascp: hascp, magic: magic, cache:cache };
	  return cpt;
	}));


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = __webpack_require__(/*! fs */ "fs");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;/*!

	JSZip - A Javascript class for generating and reading zip files
	<http://stuartk.com/jszip>

	(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
	Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

	JSZip uses the library pako released under the MIT license :
	https://github.com/nodeca/pako/blob/master/LICENSE
	*/
	!function(e){
		if(true)module.exports=e();
		else { var f; }
	}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	'use strict';
	// private property
	var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


	// public method for encoding
	exports.encode = function(input, utf8) {
	    var output = "";
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0;

	    while (i < input.length) {

	        chr1 = input.charCodeAt(i++);
	        chr2 = input.charCodeAt(i++);
	        chr3 = input.charCodeAt(i++);

	        enc1 = chr1 >> 2;
	        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	        enc4 = chr3 & 63;

	        if (isNaN(chr2)) {
	            enc3 = enc4 = 64;
	        }
	        else if (isNaN(chr3)) {
	            enc4 = 64;
	        }

	        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);

	    }

	    return output;
	};

	// public method for decoding
	exports.decode = function(input, utf8) {
	    var output = "";
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0;

	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

	    while (i < input.length) {

	        enc1 = _keyStr.indexOf(input.charAt(i++));
	        enc2 = _keyStr.indexOf(input.charAt(i++));
	        enc3 = _keyStr.indexOf(input.charAt(i++));
	        enc4 = _keyStr.indexOf(input.charAt(i++));

	        chr1 = (enc1 << 2) | (enc2 >> 4);
	        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	        chr3 = ((enc3 & 3) << 6) | enc4;

	        output = output + String.fromCharCode(chr1);

	        if (enc3 != 64) {
	            output = output + String.fromCharCode(chr2);
	        }
	        if (enc4 != 64) {
	            output = output + String.fromCharCode(chr3);
	        }

	    }

	    return output;

	};

	},{}],2:[function(_dereq_,module,exports){
	'use strict';
	function CompressedObject() {
	    this.compressedSize = 0;
	    this.uncompressedSize = 0;
	    this.crc32 = 0;
	    this.compressionMethod = null;
	    this.compressedContent = null;
	}

	CompressedObject.prototype = {
	    /**
	     * Return the decompressed content in an unspecified format.
	     * The format will depend on the decompressor.
	     * @return {Object} the decompressed content.
	     */
	    getContent: function() {
	        return null; // see implementation
	    },
	    /**
	     * Return the compressed content in an unspecified format.
	     * The format will depend on the compressed conten source.
	     * @return {Object} the compressed content.
	     */
	    getCompressedContent: function() {
	        return null; // see implementation
	    }
	};
	module.exports = CompressedObject;

	},{}],3:[function(_dereq_,module,exports){
	'use strict';
	exports.STORE = {
	    magic: "\x00\x00",
	    compress: function(content) {
	        return content; // no compression
	    },
	    uncompress: function(content) {
	        return content; // no compression
	    },
	    compressInputType: null,
	    uncompressInputType: null
	};
	exports.DEFLATE = _dereq_('./flate');

	},{"./flate":8}],4:[function(_dereq_,module,exports){
	'use strict';

	var utils = _dereq_('./utils');

	var table = [
	    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,
	    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
	    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,
	    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
	    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
	    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
	    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
	    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,
	    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
	    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
	    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,
	    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,
	    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,
	    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
	    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
	    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
	    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,
	    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
	    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,
	    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
	    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
	    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,
	    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,
	    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
	    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
	    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,
	    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,
	    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
	    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
	    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
	    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,
	    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,
	    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,
	    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,
	    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
	    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,
	    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,
	    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,
	    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
	    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
	    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,
	    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
	    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,
	    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
	    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
	    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,
	    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,
	    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,
	    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
	    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
	    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,
	    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,
	    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,
	    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
	    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
	    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
	    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,
	    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,
	    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
	    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
	    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,
	    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
	    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
	    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	];

	/**
	 *
	 *  Javascript crc32
	 *  http://www.webtoolkit.info/
	 *
	 */
	module.exports = function crc32(input, crc) {
	    if (typeof input === "undefined" || !input.length) {
	        return 0;
	    }

	    var isArray = utils.getTypeOf(input) !== "string";

	    if (typeof(crc) == "undefined") {
	        crc = 0;
	    }
	    var x = 0;
	    var y = 0;
	    var b = 0;

	    crc = crc ^ (-1);
	    for (var i = 0, iTop = input.length; i < iTop; i++) {
	        b = isArray ? input[i] : input.charCodeAt(i);
	        y = (crc ^ b) & 0xFF;
	        x = table[y];
	        crc = (crc >>> 8) ^ x;
	    }

	    return crc ^ (-1);
	};
	// vim: set shiftwidth=4 softtabstop=4:

	},{"./utils":21}],5:[function(_dereq_,module,exports){
	'use strict';
	var utils = _dereq_('./utils');

	function DataReader(data) {
	    this.data = null; // type : see implementation
	    this.length = 0;
	    this.index = 0;
	}
	DataReader.prototype = {
	    /**
	     * Check that the offset will not go too far.
	     * @param {string} offset the additional offset to check.
	     * @throws {Error} an Error if the offset is out of bounds.
	     */
	    checkOffset: function(offset) {
	        this.checkIndex(this.index + offset);
	    },
	    /**
	     * Check that the specifed index will not be too far.
	     * @param {string} newIndex the index to check.
	     * @throws {Error} an Error if the index is out of bounds.
	     */
	    checkIndex: function(newIndex) {
	        if (this.length < newIndex || newIndex < 0) {
	            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
	        }
	    },
	    /**
	     * Change the index.
	     * @param {number} newIndex The new index.
	     * @throws {Error} if the new index is out of the data.
	     */
	    setIndex: function(newIndex) {
	        this.checkIndex(newIndex);
	        this.index = newIndex;
	    },
	    /**
	     * Skip the next n bytes.
	     * @param {number} n the number of bytes to skip.
	     * @throws {Error} if the new index is out of the data.
	     */
	    skip: function(n) {
	        this.setIndex(this.index + n);
	    },
	    /**
	     * Get the byte at the specified index.
	     * @param {number} i the index to use.
	     * @return {number} a byte.
	     */
	    byteAt: function(i) {
	        // see implementations
	    },
	    /**
	     * Get the next number with a given byte size.
	     * @param {number} size the number of bytes to read.
	     * @return {number} the corresponding number.
	     */
	    readInt: function(size) {
	        var result = 0,
	            i;
	        this.checkOffset(size);
	        for (i = this.index + size - 1; i >= this.index; i--) {
	            result = (result << 8) + this.byteAt(i);
	        }
	        this.index += size;
	        return result;
	    },
	    /**
	     * Get the next string with a given byte size.
	     * @param {number} size the number of bytes to read.
	     * @return {string} the corresponding string.
	     */
	    readString: function(size) {
	        return utils.transformTo("string", this.readData(size));
	    },
	    /**
	     * Get raw data without conversion, <size> bytes.
	     * @param {number} size the number of bytes to read.
	     * @return {Object} the raw data, implementation specific.
	     */
	    readData: function(size) {
	        // see implementations
	    },
	    /**
	     * Find the last occurence of a zip signature (4 bytes).
	     * @param {string} sig the signature to find.
	     * @return {number} the index of the last occurence, -1 if not found.
	     */
	    lastIndexOfSignature: function(sig) {
	        // see implementations
	    },
	    /**
	     * Get the next date.
	     * @return {Date} the date.
	     */
	    readDate: function() {
	        var dostime = this.readInt(4);
	        return new Date(
	        ((dostime >> 25) & 0x7f) + 1980, // year
	        ((dostime >> 21) & 0x0f) - 1, // month
	        (dostime >> 16) & 0x1f, // day
	        (dostime >> 11) & 0x1f, // hour
	        (dostime >> 5) & 0x3f, // minute
	        (dostime & 0x1f) << 1); // second
	    }
	};
	module.exports = DataReader;

	},{"./utils":21}],6:[function(_dereq_,module,exports){
	'use strict';
	exports.base64 = false;
	exports.binary = false;
	exports.dir = false;
	exports.createFolders = false;
	exports.date = null;
	exports.compression = null;
	exports.comment = null;

	},{}],7:[function(_dereq_,module,exports){
	'use strict';
	var utils = _dereq_('./utils');

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.string2binary = function(str) {
	    return utils.string2binary(str);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.string2Uint8Array = function(str) {
	    return utils.transformTo("uint8array", str);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.uint8Array2String = function(array) {
	    return utils.transformTo("string", array);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.string2Blob = function(str) {
	    var buffer = utils.transformTo("arraybuffer", str);
	    return utils.arrayBuffer2Blob(buffer);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.arrayBuffer2Blob = function(buffer) {
	    return utils.arrayBuffer2Blob(buffer);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.transformTo = function(outputType, input) {
	    return utils.transformTo(outputType, input);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.getTypeOf = function(input) {
	    return utils.getTypeOf(input);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.checkSupport = function(type) {
	    return utils.checkSupport(type);
	};

	/**
	 * @deprecated
	 * This value will be removed in a future version without replacement.
	 */
	exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;

	/**
	 * @deprecated
	 * This value will be removed in a future version without replacement.
	 */
	exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;


	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.pretty = function(str) {
	    return utils.pretty(str);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.findCompression = function(compressionMethod) {
	    return utils.findCompression(compressionMethod);
	};

	/**
	 * @deprecated
	 * This function will be removed in a future version without replacement.
	 */
	exports.isRegExp = function (object) {
	    return utils.isRegExp(object);
	};


	},{"./utils":21}],8:[function(_dereq_,module,exports){
	'use strict';
	var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

	var pako = _dereq_("pako");
	exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array";
	exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array";

	exports.magic = "\x08\x00";
	exports.compress = function(input) {
	    return pako.deflateRaw(input);
	};
	exports.uncompress =  function(input) {
	    return pako.inflateRaw(input);
	};

	},{"pako":24}],9:[function(_dereq_,module,exports){
	'use strict';

	var base64 = _dereq_('./base64');

	/**
	Usage:
	   zip = new JSZip();
	   zip.file("hello.txt", "Hello, World!").file("tempfile", "nothing");
	   zip.folder("images").file("smile.gif", base64Data, {base64: true});
	   zip.file("Xmas.txt", "Ho ho ho !", {date : new Date("December 25, 2007 00:00:01")});
	   zip.remove("tempfile");

	   base64zip = zip.generate();

	**/

	/**
	 * Representation a of zip file in js
	 * @constructor
	 * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).
	 * @param {Object=} options the options for creating this objects (optional).
	 */
	function JSZip(data, options) {
	    // if this constructor is used without `new`, it adds `new` before itself:
	    if(!(this instanceof JSZip)) return new JSZip(data, options);

	    // object containing the files :
	    // {
	    //   "folder/" : {...},
	    //   "folder/data.txt" : {...}
	    // }
	    this.files = {};

	    this.comment = null;

	    // Where we are in the hierarchy
	    this.root = "";
	    if (data) {
	        this.load(data, options);
	    }
	    this.clone = function() {
	        var newObj = new JSZip();
	        for (var i in this) {
	            if (typeof this[i] !== "function") {
	                newObj[i] = this[i];
	            }
	        }
	        return newObj;
	    };
	}
	JSZip.prototype = _dereq_('./object');
	JSZip.prototype.load = _dereq_('./load');
	JSZip.support = _dereq_('./support');
	JSZip.defaults = _dereq_('./defaults');

	/**
	 * @deprecated
	 * This namespace will be removed in a future version without replacement.
	 */
	JSZip.utils = _dereq_('./deprecatedPublicUtils');

	JSZip.base64 = {
	    /**
	     * @deprecated
	     * This method will be removed in a future version without replacement.
	     */
	    encode : function(input) {
	        return base64.encode(input);
	    },
	    /**
	     * @deprecated
	     * This method will be removed in a future version without replacement.
	     */
	    decode : function(input) {
	        return base64.decode(input);
	    }
	};
	JSZip.compressions = _dereq_('./compressions');
	module.exports = JSZip;

	},{"./base64":1,"./compressions":3,"./defaults":6,"./deprecatedPublicUtils":7,"./load":10,"./object":13,"./support":17}],10:[function(_dereq_,module,exports){
	'use strict';
	var base64 = _dereq_('./base64');
	var ZipEntries = _dereq_('./zipEntries');
	module.exports = function(data, options) {
	    var files, zipEntries, i, input;
	    options = options || {};
	    if (options.base64) {
	        data = base64.decode(data);
	    }

	    zipEntries = new ZipEntries(data, options);
	    files = zipEntries.files;
	    for (i = 0; i < files.length; i++) {
	        input = files[i];
	        this.file(input.fileName, input.decompressed, {
	            binary: true,
	            optimizedBinaryString: true,
	            date: input.date,
	            dir: input.dir,
	            comment : input.fileComment.length ? input.fileComment : null,
	            createFolders: options.createFolders
	        });
	    }
	    if (zipEntries.zipComment.length) {
	        this.comment = zipEntries.zipComment;
	    }

	    return this;
	};

	},{"./base64":1,"./zipEntries":22}],11:[function(_dereq_,module,exports){
	(function (Buffer){
	'use strict';
	module.exports = function(data, encoding){
	    return new Buffer(data, encoding);
	};
	module.exports.test = function(b){
	    return Buffer.isBuffer(b);
	};
	}).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
	},{}],12:[function(_dereq_,module,exports){
	'use strict';
	var Uint8ArrayReader = _dereq_('./uint8ArrayReader');

	function NodeBufferReader(data) {
	    this.data = data;
	    this.length = this.data.length;
	    this.index = 0;
	}
	NodeBufferReader.prototype = new Uint8ArrayReader();

	/**
	 * @see DataReader.readData
	 */
	NodeBufferReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    var result = this.data.slice(this.index, this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = NodeBufferReader;

	},{"./uint8ArrayReader":18}],13:[function(_dereq_,module,exports){
	'use strict';
	var support = _dereq_('./support');
	var utils = _dereq_('./utils');
	var crc32 = _dereq_('./crc32');
	var signature = _dereq_('./signature');
	var defaults = _dereq_('./defaults');
	var base64 = _dereq_('./base64');
	var compressions = _dereq_('./compressions');
	var CompressedObject = _dereq_('./compressedObject');
	var nodeBuffer = _dereq_('./nodeBuffer');
	var utf8 = _dereq_('./utf8');
	var StringWriter = _dereq_('./stringWriter');
	var Uint8ArrayWriter = _dereq_('./uint8ArrayWriter');

	/**
	 * Returns the raw data of a ZipObject, decompress the content if necessary.
	 * @param {ZipObject} file the file to use.
	 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
	 */
	var getRawData = function(file) {
	    if (file._data instanceof CompressedObject) {
	        file._data = file._data.getContent();
	        file.options.binary = true;
	        file.options.base64 = false;

	        if (utils.getTypeOf(file._data) === "uint8array") {
	            var copy = file._data;
	            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.
	            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).
	            file._data = new Uint8Array(copy.length);
	            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
	            if (copy.length !== 0) {
	                file._data.set(copy, 0);
	            }
	        }
	    }
	    return file._data;
	};

	/**
	 * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.
	 * @param {ZipObject} file the file to use.
	 * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.
	 */
	var getBinaryData = function(file) {
	    var result = getRawData(file),
	        type = utils.getTypeOf(result);
	    if (type === "string") {
	        if (!file.options.binary) {
	            // unicode text !
	            // unicode string => binary string is a painful process, check if we can avoid it.
	            if (support.nodebuffer) {
	                return nodeBuffer(result, "utf-8");
	            }
	        }
	        return file.asBinary();
	    }
	    return result;
	};

	/**
	 * Transform this._data into a string.
	 * @param {function} filter a function String -> String, applied if not null on the result.
	 * @return {String} the string representing this._data.
	 */
	var dataToString = function(asUTF8) {
	    var result = getRawData(this);
	    if (result === null || typeof result === "undefined") {
	        return "";
	    }
	    // if the data is a base64 string, we decode it before checking the encoding !
	    if (this.options.base64) {
	        result = base64.decode(result);
	    }
	    if (asUTF8 && this.options.binary) {
	        // JSZip.prototype.utf8decode supports arrays as input
	        // skip to array => string step, utf8decode will do it.
	        result = out.utf8decode(result);
	    }
	    else {
	        // no utf8 transformation, do the array => string step.
	        result = utils.transformTo("string", result);
	    }

	    if (!asUTF8 && !this.options.binary) {
	        result = utils.transformTo("string", out.utf8encode(result));
	    }
	    return result;
	};
	/**
	 * A simple object representing a file in the zip file.
	 * @constructor
	 * @param {string} name the name of the file
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
	 * @param {Object} options the options of the file
	 */
	var ZipObject = function(name, data, options) {
	    this.name = name;
	    this.dir = options.dir;
	    this.date = options.date;
	    this.comment = options.comment;

	    this._data = data;
	    this.options = options;

	    /*
	     * This object contains initial values for dir and date.
	     * With them, we can check if the user changed the deprecated metadata in
	     * `ZipObject#options` or not.
	     */
	    this._initialMetadata = {
	      dir : options.dir,
	      date : options.date
	    };
	};

	ZipObject.prototype = {
	    /**
	     * Return the content as UTF8 string.
	     * @return {string} the UTF8 string.
	     */
	    asText: function() {
	        return dataToString.call(this, true);
	    },
	    /**
	     * Returns the binary content.
	     * @return {string} the content as binary.
	     */
	    asBinary: function() {
	        return dataToString.call(this, false);
	    },
	    /**
	     * Returns the content as a nodejs Buffer.
	     * @return {Buffer} the content as a Buffer.
	     */
	    asNodeBuffer: function() {
	        var result = getBinaryData(this);
	        return utils.transformTo("nodebuffer", result);
	    },
	    /**
	     * Returns the content as an Uint8Array.
	     * @return {Uint8Array} the content as an Uint8Array.
	     */
	    asUint8Array: function() {
	        var result = getBinaryData(this);
	        return utils.transformTo("uint8array", result);
	    },
	    /**
	     * Returns the content as an ArrayBuffer.
	     * @return {ArrayBuffer} the content as an ArrayBufer.
	     */
	    asArrayBuffer: function() {
	        return this.asUint8Array().buffer;
	    }
	};

	/**
	 * Transform an integer into a string in hexadecimal.
	 * @private
	 * @param {number} dec the number to convert.
	 * @param {number} bytes the number of bytes to generate.
	 * @returns {string} the result.
	 */
	var decToHex = function(dec, bytes) {
	    var hex = "",
	        i;
	    for (i = 0; i < bytes; i++) {
	        hex += String.fromCharCode(dec & 0xff);
	        dec = dec >>> 8;
	    }
	    return hex;
	};

	/**
	 * Merge the objects passed as parameters into a new one.
	 * @private
	 * @param {...Object} var_args All objects to merge.
	 * @return {Object} a new object with the data of the others.
	 */
	var extend = function() {
	    var result = {}, i, attr;
	    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
	        for (attr in arguments[i]) {
	            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
	                result[attr] = arguments[i][attr];
	            }
	        }
	    }
	    return result;
	};

	/**
	 * Transforms the (incomplete) options from the user into the complete
	 * set of options to create a file.
	 * @private
	 * @param {Object} o the options from the user.
	 * @return {Object} the complete set of options.
	 */
	var prepareFileAttrs = function(o) {
	    o = o || {};
	    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {
	        o.binary = true;
	    }
	    o = extend(o, defaults);
	    o.date = o.date || new Date();
	    if (o.compression !== null) o.compression = o.compression.toUpperCase();

	    return o;
	};

	/**
	 * Add a file in the current folder.
	 * @private
	 * @param {string} name the name of the file
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
	 * @param {Object} o the options of the file
	 * @return {Object} the new file.
	 */
	var fileAdd = function(name, data, o) {
	    // be sure sub folders exist
	    var dataType = utils.getTypeOf(data),
	        parent;

	    o = prepareFileAttrs(o);

	    if (o.createFolders && (parent = parentFolder(name))) {
	        folderAdd.call(this, parent, true);
	    }

	    if (o.dir || data === null || typeof data === "undefined") {
	        o.base64 = false;
	        o.binary = false;
	        data = null;
	    }
	    else if (dataType === "string") {
	        if (o.binary && !o.base64) {
	            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask
	            if (o.optimizedBinaryString !== true) {
	                // this is a string, not in a base64 format.
	                // Be sure that this is a correct "binary string"
	                data = utils.string2binary(data);
	            }
	        }
	    }
	    else { // arraybuffer, uint8array, ...
	        o.base64 = false;
	        o.binary = true;

	        if (!dataType && !(data instanceof CompressedObject)) {
	            throw new Error("The data of '" + name + "' is in an unsupported format !");
	        }

	        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
	        if (dataType === "arraybuffer") {
	            data = utils.transformTo("uint8array", data);
	        }
	    }

	    var object = new ZipObject(name, data, o);
	    this.files[name] = object;
	    return object;
	};

	/**
	 * Find the parent folder of the path.
	 * @private
	 * @param {string} path the path to use
	 * @return {string} the parent folder, or ""
	 */
	var parentFolder = function (path) {
	    if (path.slice(-1) == '/') {
	        path = path.substring(0, path.length - 1);
	    }
	    var lastSlash = path.lastIndexOf('/');
	    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
	};

	/**
	 * Add a (sub) folder in the current folder.
	 * @private
	 * @param {string} name the folder's name
	 * @param {boolean=} [createFolders] If true, automatically create sub
	 *  folders. Defaults to false.
	 * @return {Object} the new folder.
	 */
	var folderAdd = function(name, createFolders) {
	    // Check the name ends with a /
	    if (name.slice(-1) != "/") {
	        name += "/"; // IE doesn't like substr(-1)
	    }

	    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;

	    // Does this folder already exist?
	    if (!this.files[name]) {
	        fileAdd.call(this, name, null, {
	            dir: true,
	            createFolders: createFolders
	        });
	    }
	    return this.files[name];
	};

	/**
	 * Generate a JSZip.CompressedObject for a given zipOject.
	 * @param {ZipObject} file the object to read.
	 * @param {JSZip.compression} compression the compression to use.
	 * @return {JSZip.CompressedObject} the compressed result.
	 */
	var generateCompressedObjectFrom = function(file, compression) {
	    var result = new CompressedObject(),
	        content;

	    // the data has not been decompressed, we might reuse things !
	    if (file._data instanceof CompressedObject) {
	        result.uncompressedSize = file._data.uncompressedSize;
	        result.crc32 = file._data.crc32;

	        if (result.uncompressedSize === 0 || file.dir) {
	            compression = compressions['STORE'];
	            result.compressedContent = "";
	            result.crc32 = 0;
	        }
	        else if (file._data.compressionMethod === compression.magic) {
	            result.compressedContent = file._data.getCompressedContent();
	        }
	        else {
	            content = file._data.getContent();
	            // need to decompress / recompress
	            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
	        }
	    }
	    else {
	        // have uncompressed data
	        content = getBinaryData(file);
	        if (!content || content.length === 0 || file.dir) {
	            compression = compressions['STORE'];
	            content = "";
	        }
	        result.uncompressedSize = content.length;
	        result.crc32 = crc32(content);
	        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content));
	    }

	    result.compressedSize = result.compressedContent.length;
	    result.compressionMethod = compression.magic;

	    return result;
	};

	/**
	 * Generate the various parts used in the construction of the final zip file.
	 * @param {string} name the file name.
	 * @param {ZipObject} file the file content.
	 * @param {JSZip.CompressedObject} compressedObject the compressed object.
	 * @param {number} offset the current offset from the start of the zip file.
	 * @return {object} the zip parts.
	 */
	var generateZipParts = function(name, file, compressedObject, offset) {
	    var data = compressedObject.compressedContent,
	        utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
	        comment = file.comment || "",
	        utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
	        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
	        useUTF8ForComment = utfEncodedComment.length !== comment.length,
	        o = file.options,
	        dosTime,
	        dosDate,
	        extraFields = "",
	        unicodePathExtraField = "",
	        unicodeCommentExtraField = "",
	        dir, date;


	    // handle the deprecated options.dir
	    if (file._initialMetadata.dir !== file.dir) {
	        dir = file.dir;
	    } else {
	        dir = o.dir;
	    }

	    // handle the deprecated options.date
	    if(file._initialMetadata.date !== file.date) {
	        date = file.date;
	    } else {
	        date = o.date;
	    }


	    dosTime = date.getHours();
	    dosTime = dosTime << 6;
	    dosTime = dosTime | date.getMinutes();
	    dosTime = dosTime << 5;
	    dosTime = dosTime | date.getSeconds() / 2;

	    dosDate = date.getFullYear() - 1980;
	    dosDate = dosDate << 4;
	    dosDate = dosDate | (date.getMonth() + 1);
	    dosDate = dosDate << 5;
	    dosDate = dosDate | date.getDate();

	    if (useUTF8ForFileName) {
	        // set the unicode path extra field. unzip needs at least one extra
	        // field to correctly handle unicode path, so using the path is as good
	        // as any other information. This could improve the situation with
	        // other archive managers too.
	        // This field is usually used without the utf8 flag, with a non
	        // unicode path in the header (winrar, winzip). This helps (a bit)
	        // with the messy Windows' default compressed folders feature but
	        // breaks on p7zip which doesn't seek the unicode path extra field.
	        // So for now, UTF-8 everywhere !
	        unicodePathExtraField =
	            // Version
	            decToHex(1, 1) +
	            // NameCRC32
	            decToHex(crc32(utfEncodedFileName), 4) +
	            // UnicodeName
	            utfEncodedFileName;

	        extraFields +=
	            // Info-ZIP Unicode Path Extra Field
	            "\x75\x70" +
	            // size
	            decToHex(unicodePathExtraField.length, 2) +
	            // content
	            unicodePathExtraField;
	    }

	    if(useUTF8ForComment) {

	        unicodeCommentExtraField =
	            // Version
	            decToHex(1, 1) +
	            // CommentCRC32
	            decToHex(this.crc32(utfEncodedComment), 4) +
	            // UnicodeName
	            utfEncodedComment;

	        extraFields +=
	            // Info-ZIP Unicode Path Extra Field
	            "\x75\x63" +
	            // size
	            decToHex(unicodeCommentExtraField.length, 2) +
	            // content
	            unicodeCommentExtraField;
	    }

	    var header = "";

	    // version needed to extract
	    header += "\x0A\x00";
	    // general purpose bit flag
	    // set bit 11 if utf8
	    header += (useUTF8ForFileName || useUTF8ForComment) ? "\x00\x08" : "\x00\x00";
	    // compression method
	    header += compressedObject.compressionMethod;
	    // last mod file time
	    header += decToHex(dosTime, 2);
	    // last mod file date
	    header += decToHex(dosDate, 2);
	    // crc-32
	    header += decToHex(compressedObject.crc32, 4);
	    // compressed size
	    header += decToHex(compressedObject.compressedSize, 4);
	    // uncompressed size
	    header += decToHex(compressedObject.uncompressedSize, 4);
	    // file name length
	    header += decToHex(utfEncodedFileName.length, 2);
	    // extra field length
	    header += decToHex(extraFields.length, 2);


	    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;

	    var dirRecord = signature.CENTRAL_FILE_HEADER +
	    // version made by (00: DOS)
	    "\x14\x00" +
	    // file header (common to file and central directory)
	    header +
	    // file comment length
	    decToHex(utfEncodedComment.length, 2) +
	    // disk number start
	    "\x00\x00" +
	    // internal file attributes TODO
	    "\x00\x00" +
	    // external file attributes
	    (dir === true ? "\x10\x00\x00\x00" : "\x00\x00\x00\x00") +
	    // relative offset of local header
	    decToHex(offset, 4) +
	    // file name
	    utfEncodedFileName +
	    // extra field
	    extraFields +
	    // file comment
	    utfEncodedComment;

	    return {
	        fileRecord: fileRecord,
	        dirRecord: dirRecord,
	        compressedObject: compressedObject
	    };
	};


	// return the actual prototype of JSZip
	var out = {
	    /**
	     * Read an existing zip and merge the data in the current JSZip object.
	     * The implementation is in jszip-load.js, don't forget to include it.
	     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load
	     * @param {Object} options Options for loading the stream.
	     *  options.base64 : is the stream in base64 ? default : false
	     * @return {JSZip} the current JSZip object
	     */
	    load: function(stream, options) {
	        throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
	    },

	    /**
	     * Filter nested files/folders with the specified function.
	     * @param {Function} search the predicate to use :
	     * function (relativePath, file) {...}
	     * It takes 2 arguments : the relative path and the file.
	     * @return {Array} An array of matching elements.
	     */
	    filter: function(search) {
	        var result = [],
	            filename, relativePath, file, fileClone;
	        for (filename in this.files) {
	            if (!this.files.hasOwnProperty(filename)) {
	                continue;
	            }
	            file = this.files[filename];
	            // return a new object, don't let the user mess with our internal objects :)
	            fileClone = new ZipObject(file.name, file._data, extend(file.options));
	            relativePath = filename.slice(this.root.length, filename.length);
	            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root
	            search(relativePath, fileClone)) { // and the file matches the function
	                result.push(fileClone);
	            }
	        }
	        return result;
	    },

	    /**
	     * Add a file to the zip file, or search a file.
	     * @param   {string|RegExp} name The name of the file to add (if data is defined),
	     * the name of the file to find (if no data) or a regex to match files.
	     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
	     * @param   {Object} o     File options
	     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
	     * a file (when searching by string) or an array of files (when searching by regex).
	     */
	    file: function(name, data, o) {
	        if (arguments.length === 1) {
	            if (utils.isRegExp(name)) {
	                var regexp = name;
	                return this.filter(function(relativePath, file) {
	                    return !file.dir && regexp.test(relativePath);
	                });
	            }
	            else { // text
	                return this.filter(function(relativePath, file) {
	                    return !file.dir && relativePath === name;
	                })[0] || null;
	            }
	        }
	        else { // more than one argument : we have data !
	            name = this.root + name;
	            fileAdd.call(this, name, data, o);
	        }
	        return this;
	    },

	    /**
	     * Add a directory to the zip file, or search.
	     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
	     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
	     */
	    folder: function(arg) {
	        if (!arg) {
	            return this;
	        }

	        if (utils.isRegExp(arg)) {
	            return this.filter(function(relativePath, file) {
	                return file.dir && arg.test(relativePath);
	            });
	        }

	        // else, name is a new folder
	        var name = this.root + arg;
	        var newFolder = folderAdd.call(this, name);

	        // Allow chaining by returning a new object with this folder as the root
	        var ret = this.clone();
	        ret.root = newFolder.name;
	        return ret;
	    },

	    /**
	     * Delete a file, or a directory and all sub-files, from the zip
	     * @param {string} name the name of the file to delete
	     * @return {JSZip} this JSZip object
	     */
	    remove: function(name) {
	        name = this.root + name;
	        var file = this.files[name];
	        if (!file) {
	            // Look for any folders
	            if (name.slice(-1) != "/") {
	                name += "/";
	            }
	            file = this.files[name];
	        }

	        if (file && !file.dir) {
	            // file
	            delete this.files[name];
	        } else {
	            // maybe a folder, delete recursively
	            var kids = this.filter(function(relativePath, file) {
	                return file.name.slice(0, name.length) === name;
	            });
	            for (var i = 0; i < kids.length; i++) {
	                delete this.files[kids[i].name];
	            }
	        }

	        return this;
	    },

	    /**
	     * Generate the complete zip file
	     * @param {Object} options the options to generate the zip file :
	     * - base64, (deprecated, use type instead) true to generate base64.
	     * - compression, "STORE" by default.
	     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
	     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
	     */
	    generate: function(options) {
	        options = extend(options || {}, {
	            base64: true,
	            compression: "STORE",
	            type: "base64",
	            comment: null
	        });

	        utils.checkSupport(options.type);

	        var zipData = [],
	            localDirLength = 0,
	            centralDirLength = 0,
	            writer, i,
	            utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || ""));

	        // first, generate all the zip parts.
	        for (var name in this.files) {
	            if (!this.files.hasOwnProperty(name)) {
	                continue;
	            }
	            var file = this.files[name];

	            var compressionName = file.options.compression || options.compression.toUpperCase();
	            var compression = compressions[compressionName];
	            if (!compression) {
	                throw new Error(compressionName + " is not a valid compression method !");
	            }

	            var compressedObject = generateCompressedObjectFrom.call(this, file, compression);

	            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
	            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;
	            centralDirLength += zipPart.dirRecord.length;
	            zipData.push(zipPart);
	        }

	        var dirEnd = "";

	        // end of central dir signature
	        dirEnd = signature.CENTRAL_DIRECTORY_END +
	        // number of this disk
	        "\x00\x00" +
	        // number of the disk with the start of the central directory
	        "\x00\x00" +
	        // total number of entries in the central directory on this disk
	        decToHex(zipData.length, 2) +
	        // total number of entries in the central directory
	        decToHex(zipData.length, 2) +
	        // size of the central directory   4 bytes
	        decToHex(centralDirLength, 4) +
	        // offset of start of central directory with respect to the starting disk number
	        decToHex(localDirLength, 4) +
	        // .ZIP file comment length
	        decToHex(utfEncodedComment.length, 2) +
	        // .ZIP file comment
	        utfEncodedComment;


	        // we have all the parts (and the total length)
	        // time to create a writer !
	        var typeName = options.type.toLowerCase();
	        if(typeName==="uint8array"||typeName==="arraybuffer"||typeName==="blob"||typeName==="nodebuffer") {
	            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);
	        }else{
	            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);
	        }

	        for (i = 0; i < zipData.length; i++) {
	            writer.append(zipData[i].fileRecord);
	            writer.append(zipData[i].compressedObject.compressedContent);
	        }
	        for (i = 0; i < zipData.length; i++) {
	            writer.append(zipData[i].dirRecord);
	        }

	        writer.append(dirEnd);

	        var zip = writer.finalize();



	        switch(options.type.toLowerCase()) {
	            // case "zip is an Uint8Array"
	            case "uint8array" :
	            case "arraybuffer" :
	            case "nodebuffer" :
	               return utils.transformTo(options.type.toLowerCase(), zip);
	            case "blob" :
	               return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip));
	            // case "zip is a string"
	            case "base64" :
	               return (options.base64) ? base64.encode(zip) : zip;
	            default : // case "string" :
	               return zip;
	         }

	    },

	    /**
	     * @deprecated
	     * This method will be removed in a future version without replacement.
	     */
	    crc32: function (input, crc) {
	        return crc32(input, crc);
	    },

	    /**
	     * @deprecated
	     * This method will be removed in a future version without replacement.
	     */
	    utf8encode: function (string) {
	        return utils.transformTo("string", utf8.utf8encode(string));
	    },

	    /**
	     * @deprecated
	     * This method will be removed in a future version without replacement.
	     */
	    utf8decode: function (input) {
	        return utf8.utf8decode(input);
	    }
	};
	module.exports = out;

	},{"./base64":1,"./compressedObject":2,"./compressions":3,"./crc32":4,"./defaults":6,"./nodeBuffer":11,"./signature":14,"./stringWriter":16,"./support":17,"./uint8ArrayWriter":19,"./utf8":20,"./utils":21}],14:[function(_dereq_,module,exports){
	'use strict';
	exports.LOCAL_FILE_HEADER = "PK\x03\x04";
	exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
	exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
	exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
	exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
	exports.DATA_DESCRIPTOR = "PK\x07\x08";

	},{}],15:[function(_dereq_,module,exports){
	'use strict';
	var DataReader = _dereq_('./dataReader');
	var utils = _dereq_('./utils');

	function StringReader(data, optimizedBinaryString) {
	    this.data = data;
	    if (!optimizedBinaryString) {
	        this.data = utils.string2binary(this.data);
	    }
	    this.length = this.data.length;
	    this.index = 0;
	}
	StringReader.prototype = new DataReader();
	/**
	 * @see DataReader.byteAt
	 */
	StringReader.prototype.byteAt = function(i) {
	    return this.data.charCodeAt(i);
	};
	/**
	 * @see DataReader.lastIndexOfSignature
	 */
	StringReader.prototype.lastIndexOfSignature = function(sig) {
	    return this.data.lastIndexOf(sig);
	};
	/**
	 * @see DataReader.readData
	 */
	StringReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    // this will work because the constructor applied the "& 0xff" mask.
	    var result = this.data.slice(this.index, this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = StringReader;

	},{"./dataReader":5,"./utils":21}],16:[function(_dereq_,module,exports){
	'use strict';

	var utils = _dereq_('./utils');

	/**
	 * An object to write any content to a string.
	 * @constructor
	 */
	var StringWriter = function() {
	    this.data = [];
	};
	StringWriter.prototype = {
	    /**
	     * Append any content to the current string.
	     * @param {Object} input the content to add.
	     */
	    append: function(input) {
	        input = utils.transformTo("string", input);
	        this.data.push(input);
	    },
	    /**
	     * Finalize the construction an return the result.
	     * @return {string} the generated string.
	     */
	    finalize: function() {
	        return this.data.join("");
	    }
	};

	module.exports = StringWriter;

	},{"./utils":21}],17:[function(_dereq_,module,exports){
	(function (Buffer){
	'use strict';
	exports.base64 = true;
	exports.array = true;
	exports.string = true;
	exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
	// contains true if JSZip can read/generate nodejs Buffer, false otherwise.
	// Browserify will provide a Buffer implementation for browsers, which is
	// an augmented Uint8Array (i.e., can be used as either Buffer or U8).
	exports.nodebuffer = typeof Buffer !== "undefined";
	// contains true if JSZip can read/generate Uint8Array, false otherwise.
	exports.uint8array = typeof Uint8Array !== "undefined";

	if (typeof ArrayBuffer === "undefined") {
	    exports.blob = false;
	}
	else {
	    var buffer = new ArrayBuffer(0);
	    try {
	        exports.blob = new Blob([buffer], {
	            type: "application/zip"
	        }).size === 0;
	    }
	    catch (e) {
	        try {
	            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	            var builder = new Builder();
	            builder.append(buffer);
	            exports.blob = builder.getBlob('application/zip').size === 0;
	        }
	        catch (e) {
	            exports.blob = false;
	        }
	    }
	}

	}).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
	},{}],18:[function(_dereq_,module,exports){
	'use strict';
	var DataReader = _dereq_('./dataReader');

	function Uint8ArrayReader(data) {
	    if (data) {
	        this.data = data;
	        this.length = this.data.length;
	        this.index = 0;
	    }
	}
	Uint8ArrayReader.prototype = new DataReader();
	/**
	 * @see DataReader.byteAt
	 */
	Uint8ArrayReader.prototype.byteAt = function(i) {
	    return this.data[i];
	};
	/**
	 * @see DataReader.lastIndexOfSignature
	 */
	Uint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {
	    var sig0 = sig.charCodeAt(0),
	        sig1 = sig.charCodeAt(1),
	        sig2 = sig.charCodeAt(2),
	        sig3 = sig.charCodeAt(3);
	    for (var i = this.length - 4; i >= 0; --i) {
	        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
	            return i;
	        }
	    }

	    return -1;
	};
	/**
	 * @see DataReader.readData
	 */
	Uint8ArrayReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    if(size === 0) {
	        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
	        return new Uint8Array(0);
	    }
	    var result = this.data.subarray(this.index, this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = Uint8ArrayReader;

	},{"./dataReader":5}],19:[function(_dereq_,module,exports){
	'use strict';

	var utils = _dereq_('./utils');

	/**
	 * An object to write any content to an Uint8Array.
	 * @constructor
	 * @param {number} length The length of the array.
	 */
	var Uint8ArrayWriter = function(length) {
	    this.data = new Uint8Array(length);
	    this.index = 0;
	};
	Uint8ArrayWriter.prototype = {
	    /**
	     * Append any content to the current array.
	     * @param {Object} input the content to add.
	     */
	    append: function(input) {
	        if (input.length !== 0) {
	            // with an empty Uint8Array, Opera fails with a "Offset larger than array size"
	            input = utils.transformTo("uint8array", input);
	            this.data.set(input, this.index);
	            this.index += input.length;
	        }
	    },
	    /**
	     * Finalize the construction an return the result.
	     * @return {Uint8Array} the generated array.
	     */
	    finalize: function() {
	        return this.data;
	    }
	};

	module.exports = Uint8ArrayWriter;

	},{"./utils":21}],20:[function(_dereq_,module,exports){
	'use strict';

	var utils = _dereq_('./utils');
	var support = _dereq_('./support');
	var nodeBuffer = _dereq_('./nodeBuffer');

	/**
	 * The following functions come from pako, from pako/lib/utils/strings
	 * released under the MIT license, see pako https://github.com/nodeca/pako/
	 */

	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new Array(256);
	for (var i=0; i<256; i++) {
	  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
	}
	_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

	// convert string to array (typed, when possible)
	var string2buf = function (str) {
	    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	    // count binary size
	    for (m_pos = 0; m_pos < str_len; m_pos++) {
	        c = str.charCodeAt(m_pos);
	        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	            c2 = str.charCodeAt(m_pos+1);
	            if ((c2 & 0xfc00) === 0xdc00) {
	                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	                m_pos++;
	            }
	        }
	        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	    }

	    // allocate buffer
	    if (support.uint8array) {
	        buf = new Uint8Array(buf_len);
	    } else {
	        buf = new Array(buf_len);
	    }

	    // convert
	    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
	        c = str.charCodeAt(m_pos);
	        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	            c2 = str.charCodeAt(m_pos+1);
	            if ((c2 & 0xfc00) === 0xdc00) {
	                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	                m_pos++;
	            }
	        }
	        if (c < 0x80) {
	            /* one byte */
	            buf[i++] = c;
	        } else if (c < 0x800) {
	            /* two bytes */
	            buf[i++] = 0xC0 | (c >>> 6);
	            buf[i++] = 0x80 | (c & 0x3f);
	        } else if (c < 0x10000) {
	            /* three bytes */
	            buf[i++] = 0xE0 | (c >>> 12);
	            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	            buf[i++] = 0x80 | (c & 0x3f);
	        } else {
	            /* four bytes */
	            buf[i++] = 0xf0 | (c >>> 18);
	            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	            buf[i++] = 0x80 | (c & 0x3f);
	        }
	    }

	    return buf;
	};

	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	var utf8border = function(buf, max) {
	    var pos;

	    max = max || buf.length;
	    if (max > buf.length) { max = buf.length; }

	    // go back from last position, until start of sequence found
	    pos = max-1;
	    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	    // Fuckup - very small and broken sequence,
	    // return max, because we should return something anyway.
	    if (pos < 0) { return max; }

	    // If we came to start of buffer - that means vuffer is too small,
	    // return max too.
	    if (pos === 0) { return max; }

	    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};

	// convert array to string
	var buf2string = function (buf) {
	    var str, i, out, c, c_len;
	    var len = buf.length;

	    // Reserve max possible length (2 words per char)
	    // NB: by unknown reasons, Array is significantly faster for
	    //     String.fromCharCode.apply than Uint16Array.
	    var utf16buf = new Array(len*2);

	    for (out=0, i=0; i<len;) {
	        c = buf[i++];
	        // quick process ascii
	        if (c < 0x80) { utf16buf[out++] = c; continue; }

	        c_len = _utf8len[c];
	        // skip 5 & 6 byte codes
	        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

	        // apply mask on first byte
	        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	        // join the rest
	        while (c_len > 1 && i < len) {
	            c = (c << 6) | (buf[i++] & 0x3f);
	            c_len--;
	        }

	        // terminated by end of string?
	        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	        if (c < 0x10000) {
	            utf16buf[out++] = c;
	        } else {
	            c -= 0x10000;
	            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	        }
	    }

	    // shrinkBuf(utf16buf, out)
	    if (utf16buf.length !== out) {
	        if(utf16buf.subarray) {
	            utf16buf = utf16buf.subarray(0, out);
	        } else {
	            utf16buf.length = out;
	        }
	    }

	    // return String.fromCharCode.apply(null, utf16buf);
	    return utils.applyFromCharCode(utf16buf);
	};


	// That's all for the pako functions.


	/**
	 * Transform a javascript string into an array (typed if possible) of bytes,
	 * UTF-8 encoded.
	 * @param {String} str the string to encode
	 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
	 */
	exports.utf8encode = function utf8encode(str) {
	    if (support.nodebuffer) {
	        return nodeBuffer(str, "utf-8");
	    }

	    return string2buf(str);
	};


	/**
	 * Transform a bytes array (or a representation) representing an UTF-8 encoded
	 * string into a javascript string.
	 * @param {Array|Uint8Array|Buffer} buf the data de decode
	 * @return {String} the decoded string.
	 */
	exports.utf8decode = function utf8decode(buf) {
	    if (support.nodebuffer) {
	        return utils.transformTo("nodebuffer", buf).toString("utf-8");
	    }

	    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

	    // return buf2string(buf);
	    // Chrome prefers to work with "small" chunks of data
	    // for the method buf2string.
	    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.
	    var result = [], k = 0, len = buf.length, chunk = 65536;
	    while (k < len) {
	        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));
	        if (support.uint8array) {
	            result.push(buf2string(buf.subarray(k, nextBoundary)));
	        } else {
	            result.push(buf2string(buf.slice(k, nextBoundary)));
	        }
	        k = nextBoundary;
	    }
	    return result.join("");

	};
	// vim: set shiftwidth=4 softtabstop=4:

	},{"./nodeBuffer":11,"./support":17,"./utils":21}],21:[function(_dereq_,module,exports){
	'use strict';
	var support = _dereq_('./support');
	var compressions = _dereq_('./compressions');
	var nodeBuffer = _dereq_('./nodeBuffer');
	/**
	 * Convert a string to a "binary string" : a string containing only char codes between 0 and 255.
	 * @param {string} str the string to transform.
	 * @return {String} the binary string.
	 */
	exports.string2binary = function(str) {
	    var result = "";
	    for (var i = 0; i < str.length; i++) {
	        result += String.fromCharCode(str.charCodeAt(i) & 0xff);
	    }
	    return result;
	};
	exports.arrayBuffer2Blob = function(buffer) {
	    exports.checkSupport("blob");

	    try {
	        // Blob constructor
	        return new Blob([buffer], {
	            type: "application/zip"
	        });
	    }
	    catch (e) {

	        try {
	            // deprecated, browser only, old way
	            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	            var builder = new Builder();
	            builder.append(buffer);
	            return builder.getBlob('application/zip');
	        }
	        catch (e) {

	            // well, fuck ?!
	            throw new Error("Bug : can't construct the Blob.");
	        }
	    }


	};
	/**
	 * The identity function.
	 * @param {Object} input the input.
	 * @return {Object} the same input.
	 */
	function identity(input) {
	    return input;
	}

	/**
	 * Fill in an array with a string.
	 * @param {String} str the string to use.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
	 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
	 */
	function stringToArrayLike(str, array) {
	    for (var i = 0; i < str.length; ++i) {
	        array[i] = str.charCodeAt(i) & 0xFF;
	    }
	    return array;
	}

	/**
	 * Transform an array-like object to a string.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
	 * @return {String} the result.
	 */
	function arrayLikeToString(array) {
	    // Performances notes :
	    // --------------------
	    // String.fromCharCode.apply(null, array) is the fastest, see
	    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
	    // but the stack is limited (and we can get huge arrays !).
	    //
	    // result += String.fromCharCode(array[i]); generate too many strings !
	    //
	    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
	    var chunk = 65536;
	    var result = [],
	        len = array.length,
	        type = exports.getTypeOf(array),
	        k = 0,
	        canUseApply = true;
	      try {
	         switch(type) {
	            case "uint8array":
	               String.fromCharCode.apply(null, new Uint8Array(0));
	               break;
	            case "nodebuffer":
	               String.fromCharCode.apply(null, nodeBuffer(0));
	               break;
	         }
	      } catch(e) {
	         canUseApply = false;
	      }

	      // no apply : slow and painful algorithm
	      // default browser on android 4.*
	      if (!canUseApply) {
	         var resultStr = "";
	         for(var i = 0; i < array.length;i++) {
	            resultStr += String.fromCharCode(array[i]);
	         }
	    return resultStr;
	    }
	    while (k < len && chunk > 1) {
	        try {
	            if (type === "array" || type === "nodebuffer") {
	                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
	            }
	            else {
	                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
	            }
	            k += chunk;
	        }
	        catch (e) {
	            chunk = Math.floor(chunk / 2);
	        }
	    }
	    return result.join("");
	}

	exports.applyFromCharCode = arrayLikeToString;


	/**
	 * Copy the data from an array-like to an other array-like.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
	 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
	 */
	function arrayLikeToArrayLike(arrayFrom, arrayTo) {
	    for (var i = 0; i < arrayFrom.length; i++) {
	        arrayTo[i] = arrayFrom[i];
	    }
	    return arrayTo;
	}

	// a matrix containing functions to transform everything into everything.
	var transform = {};

	// string to ?
	transform["string"] = {
	    "string": identity,
	    "array": function(input) {
	        return stringToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return transform["string"]["uint8array"](input).buffer;
	    },
	    "uint8array": function(input) {
	        return stringToArrayLike(input, new Uint8Array(input.length));
	    },
	    "nodebuffer": function(input) {
	        return stringToArrayLike(input, nodeBuffer(input.length));
	    }
	};

	// array to ?
	transform["array"] = {
	    "string": arrayLikeToString,
	    "array": identity,
	    "arraybuffer": function(input) {
	        return (new Uint8Array(input)).buffer;
	    },
	    "uint8array": function(input) {
	        return new Uint8Array(input);
	    },
	    "nodebuffer": function(input) {
	        return nodeBuffer(input);
	    }
	};

	// arraybuffer to ?
	transform["arraybuffer"] = {
	    "string": function(input) {
	        return arrayLikeToString(new Uint8Array(input));
	    },
	    "array": function(input) {
	        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
	    },
	    "arraybuffer": identity,
	    "uint8array": function(input) {
	        return new Uint8Array(input);
	    },
	    "nodebuffer": function(input) {
	        return nodeBuffer(new Uint8Array(input));
	    }
	};

	// uint8array to ?
	transform["uint8array"] = {
	    "string": arrayLikeToString,
	    "array": function(input) {
	        return arrayLikeToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return input.buffer;
	    },
	    "uint8array": identity,
	    "nodebuffer": function(input) {
	        return nodeBuffer(input);
	    }
	};

	// nodebuffer to ?
	transform["nodebuffer"] = {
	    "string": arrayLikeToString,
	    "array": function(input) {
	        return arrayLikeToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return transform["nodebuffer"]["uint8array"](input).buffer;
	    },
	    "uint8array": function(input) {
	        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
	    },
	    "nodebuffer": identity
	};

	/**
	 * Transform an input into any type.
	 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
	 * If no output type is specified, the unmodified input will be returned.
	 * @param {String} outputType the output type.
	 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
	 * @throws {Error} an Error if the browser doesn't support the requested output type.
	 */
	exports.transformTo = function(outputType, input) {
	    if (!input) {
	        // undefined, null, etc
	        // an empty string won't harm.
	        input = "";
	    }
	    if (!outputType) {
	        return input;
	    }
	    exports.checkSupport(outputType);
	    var inputType = exports.getTypeOf(input);
	    var result = transform[inputType][outputType](input);
	    return result;
	};

	/**
	 * Return the type of the input.
	 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
	 * @param {Object} input the input to identify.
	 * @return {String} the (lowercase) type of the input.
	 */
	exports.getTypeOf = function(input) {
	    if (typeof input === "string") {
	        return "string";
	    }
	    if (Object.prototype.toString.call(input) === "[object Array]") {
	        return "array";
	    }
	    if (support.nodebuffer && nodeBuffer.test(input)) {
	        return "nodebuffer";
	    }
	    if (support.uint8array && input instanceof Uint8Array) {
	        return "uint8array";
	    }
	    if (support.arraybuffer && input instanceof ArrayBuffer) {
	        return "arraybuffer";
	    }
	};

	/**
	 * Throw an exception if the type is not supported.
	 * @param {String} type the type to check.
	 * @throws {Error} an Error if the browser doesn't support the requested type.
	 */
	exports.checkSupport = function(type) {
	    var supported = support[type.toLowerCase()];
	    if (!supported) {
	        throw new Error(type + " is not supported by this browser");
	    }
	};
	exports.MAX_VALUE_16BITS = 65535;
	exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

	/**
	 * Prettify a string read as binary.
	 * @param {string} str the string to prettify.
	 * @return {string} a pretty string.
	 */
	exports.pretty = function(str) {
	    var res = '',
	        code, i;
	    for (i = 0; i < (str || "").length; i++) {
	        code = str.charCodeAt(i);
	        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
	    }
	    return res;
	};

	/**
	 * Find a compression registered in JSZip.
	 * @param {string} compressionMethod the method magic to find.
	 * @return {Object|null} the JSZip compression object, null if none found.
	 */
	exports.findCompression = function(compressionMethod) {
	    for (var method in compressions) {
	        if (!compressions.hasOwnProperty(method)) {
	            continue;
	        }
	        if (compressions[method].magic === compressionMethod) {
	            return compressions[method];
	        }
	    }
	    return null;
	};
	/**
	* Cross-window, cross-Node-context regular expression detection
	* @param  {Object}  object Anything
	* @return {Boolean}        true if the object is a regular expression,
	* false otherwise
	*/
	exports.isRegExp = function (object) {
	    return Object.prototype.toString.call(object) === "[object RegExp]";
	};


	},{"./compressions":3,"./nodeBuffer":11,"./support":17}],22:[function(_dereq_,module,exports){
	'use strict';
	var StringReader = _dereq_('./stringReader');
	var NodeBufferReader = _dereq_('./nodeBufferReader');
	var Uint8ArrayReader = _dereq_('./uint8ArrayReader');
	var utils = _dereq_('./utils');
	var sig = _dereq_('./signature');
	var ZipEntry = _dereq_('./zipEntry');
	var support = _dereq_('./support');
	var jszipProto = _dereq_('./object');
	//  class ZipEntries {{{
	/**
	 * All the entries in the zip file.
	 * @constructor
	 * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.
	 * @param {Object} loadOptions Options for loading the stream.
	 */
	function ZipEntries(data, loadOptions) {
	    this.files = [];
	    this.loadOptions = loadOptions;
	    if (data) {
	        this.load(data);
	    }
	}
	ZipEntries.prototype = {
	    /**
	     * Check that the reader is on the speficied signature.
	     * @param {string} expectedSignature the expected signature.
	     * @throws {Error} if it is an other signature.
	     */
	    checkSignature: function(expectedSignature) {
	        var signature = this.reader.readString(4);
	        if (signature !== expectedSignature) {
	            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
	        }
	    },
	    /**
	     * Read the end of the central directory.
	     */
	    readBlockEndOfCentral: function() {
	        this.diskNumber = this.reader.readInt(2);
	        this.diskWithCentralDirStart = this.reader.readInt(2);
	        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
	        this.centralDirRecords = this.reader.readInt(2);
	        this.centralDirSize = this.reader.readInt(4);
	        this.centralDirOffset = this.reader.readInt(4);

	        this.zipCommentLength = this.reader.readInt(2);
	        // warning : the encoding depends of the system locale
	        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
	        // On a windows machine, this field is encoded with the localized windows code page.
	        this.zipComment = this.reader.readString(this.zipCommentLength);
	        // To get consistent behavior with the generation part, we will assume that
	        // this is utf8 encoded.
	        this.zipComment = jszipProto.utf8decode(this.zipComment);
	    },
	    /**
	     * Read the end of the Zip 64 central directory.
	     * Not merged with the method readEndOfCentral :
	     * The end of central can coexist with its Zip64 brother,
	     * I don't want to read the wrong number of bytes !
	     */
	    readBlockZip64EndOfCentral: function() {
	        this.zip64EndOfCentralSize = this.reader.readInt(8);
	        this.versionMadeBy = this.reader.readString(2);
	        this.versionNeeded = this.reader.readInt(2);
	        this.diskNumber = this.reader.readInt(4);
	        this.diskWithCentralDirStart = this.reader.readInt(4);
	        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
	        this.centralDirRecords = this.reader.readInt(8);
	        this.centralDirSize = this.reader.readInt(8);
	        this.centralDirOffset = this.reader.readInt(8);

	        this.zip64ExtensibleData = {};
	        var extraDataSize = this.zip64EndOfCentralSize - 44,
	            index = 0,
	            extraFieldId,
	            extraFieldLength,
	            extraFieldValue;
	        while (index < extraDataSize) {
	            extraFieldId = this.reader.readInt(2);
	            extraFieldLength = this.reader.readInt(4);
	            extraFieldValue = this.reader.readString(extraFieldLength);
	            this.zip64ExtensibleData[extraFieldId] = {
	                id: extraFieldId,
	                length: extraFieldLength,
	                value: extraFieldValue
	            };
	        }
	    },
	    /**
	     * Read the end of the Zip 64 central directory locator.
	     */
	    readBlockZip64EndOfCentralLocator: function() {
	        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
	        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
	        this.disksCount = this.reader.readInt(4);
	        if (this.disksCount > 1) {
	            throw new Error("Multi-volumes zip are not supported");
	        }
	    },
	    /**
	     * Read the local files, based on the offset read in the central part.
	     */
	    readLocalFiles: function() {
	        var i, file;
	        for (i = 0; i < this.files.length; i++) {
	            file = this.files[i];
	            this.reader.setIndex(file.localHeaderOffset);
	            this.checkSignature(sig.LOCAL_FILE_HEADER);
	            file.readLocalPart(this.reader);
	            file.handleUTF8();
	        }
	    },
	    /**
	     * Read the central directory.
	     */
	    readCentralDir: function() {
	        var file;

	        this.reader.setIndex(this.centralDirOffset);
	        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {
	            file = new ZipEntry({
	                zip64: this.zip64
	            }, this.loadOptions);
	            file.readCentralPart(this.reader);
	            this.files.push(file);
	        }
	    },
	    /**
	     * Read the end of central directory.
	     */
	    readEndOfCentral: function() {
	        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
	        if (offset === -1) {
	            throw new Error("Corrupted zip : can't find end of central directory");
	        }
	        this.reader.setIndex(offset);
	        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
	        this.readBlockEndOfCentral();


	        /* extract from the zip spec :
	            4)  If one of the fields in the end of central directory
	                record is too small to hold required data, the field
	                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
	                ZIP64 format record should be created.
	            5)  The end of central directory record and the
	                Zip64 end of central directory locator record must
	                reside on the same disk when splitting or spanning
	                an archive.
	         */
	        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
	            this.zip64 = true;

	            /*
	            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
	            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
	            all numbers as 64-bit double precision IEEE 754 floating point numbers.
	            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
	            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
	            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
	            */

	            // should look for a zip64 EOCD locator
	            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
	            if (offset === -1) {
	                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
	            }
	            this.reader.setIndex(offset);
	            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
	            this.readBlockZip64EndOfCentralLocator();

	            // now the zip64 EOCD record
	            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
	            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
	            this.readBlockZip64EndOfCentral();
	        }
	    },
	    prepareReader: function(data) {
	        var type = utils.getTypeOf(data);
	        if (type === "string" && !support.uint8array) {
	            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);
	        }
	        else if (type === "nodebuffer") {
	            this.reader = new NodeBufferReader(data);
	        }
	        else {
	            this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data));
	        }
	    },
	    /**
	     * Read a zip file and create ZipEntries.
	     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
	     */
	    load: function(data) {
	        this.prepareReader(data);
	        this.readEndOfCentral();
	        this.readCentralDir();
	        this.readLocalFiles();
	    }
	};
	// }}} end of ZipEntries
	module.exports = ZipEntries;

	},{"./nodeBufferReader":12,"./object":13,"./signature":14,"./stringReader":15,"./support":17,"./uint8ArrayReader":18,"./utils":21,"./zipEntry":23}],23:[function(_dereq_,module,exports){
	'use strict';
	var StringReader = _dereq_('./stringReader');
	var utils = _dereq_('./utils');
	var CompressedObject = _dereq_('./compressedObject');
	var jszipProto = _dereq_('./object');
	// class ZipEntry {{{
	/**
	 * An entry in the zip file.
	 * @constructor
	 * @param {Object} options Options of the current file.
	 * @param {Object} loadOptions Options for loading the stream.
	 */
	function ZipEntry(options, loadOptions) {
	    this.options = options;
	    this.loadOptions = loadOptions;
	}
	ZipEntry.prototype = {
	    /**
	     * say if the file is encrypted.
	     * @return {boolean} true if the file is encrypted, false otherwise.
	     */
	    isEncrypted: function() {
	        // bit 1 is set
	        return (this.bitFlag & 0x0001) === 0x0001;
	    },
	    /**
	     * say if the file has utf-8 filename/comment.
	     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
	     */
	    useUTF8: function() {
	        // bit 11 is set
	        return (this.bitFlag & 0x0800) === 0x0800;
	    },
	    /**
	     * Prepare the function used to generate the compressed content from this ZipFile.
	     * @param {DataReader} reader the reader to use.
	     * @param {number} from the offset from where we should read the data.
	     * @param {number} length the length of the data to read.
	     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).
	     */
	    prepareCompressedContent: function(reader, from, length) {
	        return function() {
	            var previousIndex = reader.index;
	            reader.setIndex(from);
	            var compressedFileData = reader.readData(length);
	            reader.setIndex(previousIndex);

	            return compressedFileData;
	        };
	    },
	    /**
	     * Prepare the function used to generate the uncompressed content from this ZipFile.
	     * @param {DataReader} reader the reader to use.
	     * @param {number} from the offset from where we should read the data.
	     * @param {number} length the length of the data to read.
	     * @param {JSZip.compression} compression the compression used on this file.
	     * @param {number} uncompressedSize the uncompressed size to expect.
	     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).
	     */
	    prepareContent: function(reader, from, length, compression, uncompressedSize) {
	        return function() {

	            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());
	            var uncompressedFileData = compression.uncompress(compressedFileData);

	            if (uncompressedFileData.length !== uncompressedSize) {
	                throw new Error("Bug : uncompressed data size mismatch");
	            }

	            return uncompressedFileData;
	        };
	    },
	    /**
	     * Read the local part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readLocalPart: function(reader) {
	        var compression, localExtraFieldsLength;

	        // we already know everything from the central dir !
	        // If the central dir data are false, we are doomed.
	        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
	        // The less data we get here, the more reliable this should be.
	        // Let's skip the whole header and dash to the data !
	        reader.skip(22);
	        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
	        // Strangely, the filename here is OK.
	        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
	        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
	        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
	        // the internet.
	        //
	        // I think I see the logic here : the central directory is used to display
	        // content and the local directory is used to extract the files. Mixing / and \
	        // may be used to display \ to windows users and use / when extracting the files.
	        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
	        this.fileNameLength = reader.readInt(2);
	        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
	        this.fileName = reader.readString(this.fileNameLength);
	        reader.skip(localExtraFieldsLength);

	        if (this.compressedSize == -1 || this.uncompressedSize == -1) {
	            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)");
	        }

	        compression = utils.findCompression(this.compressionMethod);
	        if (compression === null) { // no compression found
	            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")");
	        }
	        this.decompressed = new CompressedObject();
	        this.decompressed.compressedSize = this.compressedSize;
	        this.decompressed.uncompressedSize = this.uncompressedSize;
	        this.decompressed.crc32 = this.crc32;
	        this.decompressed.compressionMethod = this.compressionMethod;
	        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);
	        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);

	        // we need to compute the crc32...
	        if (this.loadOptions.checkCRC32) {
	            this.decompressed = utils.transformTo("string", this.decompressed.getContent());
	            if (jszipProto.crc32(this.decompressed) !== this.crc32) {
	                throw new Error("Corrupted zip : CRC32 mismatch");
	            }
	        }
	    },

	    /**
	     * Read the central part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readCentralPart: function(reader) {
	        this.versionMadeBy = reader.readString(2);
	        this.versionNeeded = reader.readInt(2);
	        this.bitFlag = reader.readInt(2);
	        this.compressionMethod = reader.readString(2);
	        this.date = reader.readDate();
	        this.crc32 = reader.readInt(4);
	        this.compressedSize = reader.readInt(4);
	        this.uncompressedSize = reader.readInt(4);
	        this.fileNameLength = reader.readInt(2);
	        this.extraFieldsLength = reader.readInt(2);
	        this.fileCommentLength = reader.readInt(2);
	        this.diskNumberStart = reader.readInt(2);
	        this.internalFileAttributes = reader.readInt(2);
	        this.externalFileAttributes = reader.readInt(4);
	        this.localHeaderOffset = reader.readInt(4);

	        if (this.isEncrypted()) {
	            throw new Error("Encrypted zip are not supported");
	        }

	        this.fileName = reader.readString(this.fileNameLength);
	        this.readExtraFields(reader);
	        this.parseZIP64ExtraField(reader);
	        this.fileComment = reader.readString(this.fileCommentLength);

	        // warning, this is true only for zip with madeBy == DOS (plateform dependent feature)
	        this.dir = this.externalFileAttributes & 0x00000010 ? true : false;
	    },
	    /**
	     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
	     * @param {DataReader} reader the reader to use.
	     */
	    parseZIP64ExtraField: function(reader) {

	        if (!this.extraFields[0x0001]) {
	            return;
	        }

	        // should be something, preparing the extra reader
	        var extraReader = new StringReader(this.extraFields[0x0001].value);

	        // I really hope that these 64bits integer can fit in 32 bits integer, because js
	        // won't let us have more.
	        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
	            this.uncompressedSize = extraReader.readInt(8);
	        }
	        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
	            this.compressedSize = extraReader.readInt(8);
	        }
	        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
	            this.localHeaderOffset = extraReader.readInt(8);
	        }
	        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
	            this.diskNumberStart = extraReader.readInt(4);
	        }
	    },
	    /**
	     * Read the central part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readExtraFields: function(reader) {
	        var start = reader.index,
	            extraFieldId,
	            extraFieldLength,
	            extraFieldValue;

	        this.extraFields = this.extraFields || {};

	        while (reader.index < start + this.extraFieldsLength) {
	            extraFieldId = reader.readInt(2);
	            extraFieldLength = reader.readInt(2);
	            extraFieldValue = reader.readString(extraFieldLength);

	            this.extraFields[extraFieldId] = {
	                id: extraFieldId,
	                length: extraFieldLength,
	                value: extraFieldValue
	            };
	        }
	    },
	    /**
	     * Apply an UTF8 transformation if needed.
	     */
	    handleUTF8: function() {
	        if (this.useUTF8()) {
	            this.fileName = jszipProto.utf8decode(this.fileName);
	            this.fileComment = jszipProto.utf8decode(this.fileComment);
	        } else {
	            var upath = this.findExtraFieldUnicodePath();
	            if (upath !== null) {
	                this.fileName = upath;
	            }
	            var ucomment = this.findExtraFieldUnicodeComment();
	            if (ucomment !== null) {
	                this.fileComment = ucomment;
	            }
	        }
	    },

	    /**
	     * Find the unicode path declared in the extra field, if any.
	     * @return {String} the unicode path, null otherwise.
	     */
	    findExtraFieldUnicodePath: function() {
	        var upathField = this.extraFields[0x7075];
	        if (upathField) {
	            var extraReader = new StringReader(upathField.value);

	            // wrong version
	            if (extraReader.readInt(1) !== 1) {
	                return null;
	            }

	            // the crc of the filename changed, this field is out of date.
	            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {
	                return null;
	            }

	            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));
	        }
	        return null;
	    },

	    /**
	     * Find the unicode comment declared in the extra field, if any.
	     * @return {String} the unicode comment, null otherwise.
	     */
	    findExtraFieldUnicodeComment: function() {
	        var ucommentField = this.extraFields[0x6375];
	        if (ucommentField) {
	            var extraReader = new StringReader(ucommentField.value);

	            // wrong version
	            if (extraReader.readInt(1) !== 1) {
	                return null;
	            }

	            // the crc of the comment changed, this field is out of date.
	            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {
	                return null;
	            }

	            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));
	        }
	        return null;
	    }
	};
	module.exports = ZipEntry;

	},{"./compressedObject":2,"./object":13,"./stringReader":15,"./utils":21}],24:[function(_dereq_,module,exports){
	// Top level file is just a mixin of submodules & constants
	'use strict';

	var assign    = _dereq_('./lib/utils/common').assign;

	var deflate   = _dereq_('./lib/deflate');
	var inflate   = _dereq_('./lib/inflate');
	var constants = _dereq_('./lib/zlib/constants');

	var pako = {};

	assign(pako, deflate, inflate, constants);

	module.exports = pako;
	},{"./lib/deflate":25,"./lib/inflate":26,"./lib/utils/common":27,"./lib/zlib/constants":30}],25:[function(_dereq_,module,exports){
	'use strict';


	var zlib_deflate = _dereq_('./zlib/deflate.js');
	var utils = _dereq_('./utils/common');
	var strings = _dereq_('./utils/strings');
	var msg = _dereq_('./zlib/messages');
	var zstream = _dereq_('./zlib/zstream');


	/* Public constants ==========================================================*/
	/* ===========================================================================*/

	var Z_NO_FLUSH      = 0;
	var Z_FINISH        = 4;

	var Z_OK            = 0;
	var Z_STREAM_END    = 1;

	var Z_DEFAULT_COMPRESSION = -1;

	var Z_DEFAULT_STRATEGY    = 0;

	var Z_DEFLATED  = 8;

	/* ===========================================================================*/


	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/

	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overriden.
	 **/

	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
	 **/

	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/

	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/


	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	var Deflate = function(options) {

	  this.options = utils.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }

	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm = new zstream();
	  this.strm.avail_out = 0;

	  var status = zlib_deflate.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );

	  if (status !== Z_OK) {
	    throw new Error(msg[status]);
	  }

	  if (opt.header) {
	    zlib_deflate.deflateSetHeader(this.strm, opt.header);
	  }
	};

	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|String): input data. Strings will be converted to
	 *   utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That flush internal pending buffers and call
	 * [[Deflate#onEnd]].
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function(data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;

	  if (this.ended) { return false; }

	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings.string2buf(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

	    if (status !== Z_STREAM_END && status !== Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && _mode === Z_FINISH)) {
	      if (this.options.to === 'string') {
	        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH) {
	    status = zlib_deflate.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK;
	  }

	  return true;
	};


	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function(chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that input stream complete
	 * or error happenned. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function(status) {
	  // On success - join
	  if (status === Z_OK) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate alrorythm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate(input, options) {
	  var deflator = new Deflate(options);

	  deflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg; }

	  return deflator.result;
	}


	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate(input, options);
	}


	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate(input, options);
	}


	exports.Deflate = Deflate;
	exports.deflate = deflate;
	exports.deflateRaw = deflateRaw;
	exports.gzip = gzip;
	},{"./utils/common":27,"./utils/strings":28,"./zlib/deflate.js":32,"./zlib/messages":37,"./zlib/zstream":39}],26:[function(_dereq_,module,exports){
	'use strict';


	var zlib_inflate = _dereq_('./zlib/inflate.js');
	var utils = _dereq_('./utils/common');
	var strings = _dereq_('./utils/strings');
	var c = _dereq_('./zlib/constants');
	var msg = _dereq_('./zlib/messages');
	var zstream = _dereq_('./zlib/zstream');
	var gzheader = _dereq_('./zlib/gzheader');


	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	var Inflate = function(options) {

	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new zstream();
	  this.strm.avail_out = 0;

	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }

	  this.header = new gzheader();

	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	};

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That flush internal pending buffers and call
	 * [[Inflate#onEnd]].
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function(data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && _mode === c.Z_FINISH)) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }
	  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);

	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }
	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function(chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell inflate that input stream complete
	 * or error happenned. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function(status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg; }

	  return inflator.result;
	}


	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}


	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/


	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;

	},{"./utils/common":27,"./utils/strings":28,"./zlib/constants":30,"./zlib/gzheader":33,"./zlib/inflate.js":35,"./zlib/messages":37,"./zlib/zstream":39}],27:[function(_dereq_,module,exports){
	'use strict';


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');


	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof(source) !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for(var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i=0, l=chunks.length; i<l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for(var i=0; i<len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function(chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);
	},{}],28:[function(_dereq_,module,exports){
	// String encode/decode helpers
	'use strict';


	var utils = _dereq_('./common');


	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var i=0; i<256; i++) {
	  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
	}
	_utf8len[254]=_utf8len[254]=1; // Invalid sequence start


	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	      c2 = str.charCodeAt(m_pos+1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new utils.Buf8(buf_len);

	  // convert
	  for (i=0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	      c2 = str.charCodeAt(m_pos+1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	};

	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for(var i=0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert byte array to binary string
	exports.buf2binstring = function(buf) {
	  return buf2binstring(buf, buf.length);
	};


	// Convert binary string (typed, when possible)
	exports.binstring2buf = function(str) {
	  var buf = new utils.Buf8(str.length);
	  for(var i=0, len=buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};


	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len*2);

	  for (out=0, i=0; i<len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return buf2binstring(utf16buf, out);
	};


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function(buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max-1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};

	},{"./common":27}],29:[function(_dereq_,module,exports){
	'use strict';

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.

	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0
	    , s2 = ((adler >>> 16) & 0xffff) |0
	    , n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	module.exports = adler32;
	},{}],30:[function(_dereq_,module,exports){
	module.exports = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};
	},{}],31:[function(_dereq_,module,exports){
	'use strict';

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.


	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for(var n =0; n < 256; n++){
	    c = n;
	    for(var k =0; k < 8; k++){
	      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32(crc, buf, len, pos) {
	  var t = crcTable
	    , end = pos + len;

	  crc = crc ^ (-1);

	  for (var i = pos; i < end; i++ ) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	module.exports = crc32;
	},{}],32:[function(_dereq_,module,exports){
	'use strict';

	var utils   = _dereq_('../utils/common');
	var trees   = _dereq_('./trees');
	var adler32 = _dereq_('./adler32');
	var crc32   = _dereq_('./crc32');
	var msg   = _dereq_('./messages');

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only (s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH-1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH-1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length-1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH-1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	};

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);
	  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);

	  s.d_buf = s.lit_bufsize >> 1;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}


	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg){
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}

	/* =========================================================================
	 * Copy the source state to the destination state
	 */
	//function deflateCopy(dest, source) {
	//
	//}

	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';

	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/
	},{"../utils/common":27,"./adler32":29,"./crc32":31,"./messages":37,"./trees":38}],33:[function(_dereq_,module,exports){
	'use strict';


	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	module.exports = GZheader;
	},{}],34:[function(_dereq_,module,exports){
	'use strict';

	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  var window;                 /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};

	},{}],35:[function(_dereq_,module,exports){
	'use strict';


	var utils = _dereq_('../utils/common');
	var adler32 = _dereq_('./adler32');
	var crc32   = _dereq_('./crc32');
	var inflate_fast = _dereq_('./inffast');
	var inflate_table = _dereq_('./inftrees');

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function ZSWAP32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window,src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window,src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//

	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);

	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = ZSWAP32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//

	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;

	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }

	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }

	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }

	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;

	      opts = {bits: state.lenbits};
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;

	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }

	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = {bits: state.distbits};
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;

	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;

	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
	        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}


	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';

	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/
	},{"../utils/common":27,"./adler32":29,"./crc32":31,"./inffast":34,"./inftrees":36}],36:[function(_dereq_,module,exports){
	'use strict';


	var utils = _dereq_('../utils/common');

	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	      base = extra = work;    /* dummy value--not used */
	      end = 19;
	  } else if (type === LENS) {
	      base = lbase;
	      base_index -= 257;
	      extra = lext;
	      extra_index -= 257;
	      end = 256;
	  } else {                    /* DISTS */
	      base = dbase;
	      extra = dext;
	      end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }

	  var i=0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};

	},{"../utils/common":27}],37:[function(_dereq_,module,exports){
	'use strict';

	module.exports = {
	  '2':    'need dictionary',     /* Z_NEED_DICT       2  */
	  '1':    'stream end',          /* Z_STREAM_END      1  */
	  '0':    '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};
	},{}],38:[function(_dereq_,module,exports){
	'use strict';


	var utils = _dereq_('../utils/common');

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;

	/*============================================================================*/


	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES       = 30;
	/* number of distance codes */

	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE     = 2*L_CODES + 1;
	/* maximum heap size */

	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES+2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	};


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	var TreeDesc = function(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	};



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short (s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n*2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n-base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length-1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m*2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;
	        tree[m*2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits-1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n*2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS+1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES-1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1<<extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length-1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0 ; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1<<extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for ( ; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n*2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n*2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n*2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES+1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n*2 + 1]/*.Len*/ = 5;
	    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n*2;
	  var _m2 = m*2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code+LITERALS+1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n*2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node*2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6*2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n+1)*2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count-3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count-3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count-11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3*(max_blindex+1) + 5+5+4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes-1,   5);
	  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES<<1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len+3+7) >>> 3;
	    static_lenb = (s.static_len+3+7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc*2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize-1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;
	},{"../utils/common":27}],39:[function(_dereq_,module,exports){
	'use strict';


	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	module.exports = ZStream;
	},{}]},{},[9])
	(9)
	});


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = __webpack_require__(/*! crypto */ "crypto");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	module.exports = __webpack_require__(/*! stream */ "stream");

/***/ })
/******/ ]);

/***/ }),

/***/ "./wwwroot/ExcelAddIn/FileHandler.ts":
/*!*******************************************!*\
  !*** ./wwwroot/ExcelAddIn/FileHandler.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var XLSX = __webpack_require__(/*! ts-xlsx */ "./node_modules/ts-xlsx/lib/main.js");
function asyncLoadJSONFile(file, callback) {
    var rawFile = new XMLHttpRequest();
    rawFile.overrideMimeType("application/json");
    rawFile.open("GET", file, true);
    rawFile.onreadystatechange = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(rawFile.readyState === 4 && rawFile.status == 200)) return [3 /*break*/, 2];
                        return [4 /*yield*/, callback(rawFile.responseText)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    rawFile.send(null);
}
exports.asyncLoadJSONFile = asyncLoadJSONFile;
function loadExcelFile(file) {
    var wb = XLSX.readFile(file);
    var first_sheet_name = wb.SheetNames[0];
    var sheet = wb.Sheets[first_sheet_name];
    var data = XLSX.utils.sheet_to_json(sheet);
    return data;
}
exports.loadExcelFile = loadExcelFile;
//function loadExcelFile(file, callback) {
//    console.log("Loading excel file");
//    let wb: Workbook = new Workbook();
//    let result = null;
//    try {
//        //console.log("start");
//        wb.xlsx.readFile(file).then(() => {
//            console.log("end");
//            let sheet: Worksheet = wb.getWorksheet("Sheet1");
//            let headers = sheet.getRow(0);
//            let rowId = 1;
//            result = new Array();
//            while (true) {
//                let rowData = sheet.getRow(rowId);
//                if (rowData.hasValues) {
//                    result.push(rowData); rowId++;
//                }
//                else break;
//            };
//        })
//    } catch (error) {
//        return null;
//    }
//    return result;
//}


/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9GaWxlSGFuZGxlci93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vRmlsZUhhbmRsZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vRmlsZUhhbmRsZXIvLi9ub2RlX21vZHVsZXMvdHMteGxzeC9saWIvbWFpbi5qcyIsIndlYnBhY2s6Ly9GaWxlSGFuZGxlci8uL3d3d3Jvb3QvRXhjZWxBZGRJbi9GaWxlSGFuZGxlci50cyIsIndlYnBhY2s6Ly9GaWxlSGFuZGxlci9leHRlcm5hbCBcImNyeXB0b1wiIiwid2VicGFjazovL0ZpbGVIYW5kbGVyL2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly9GaWxlSGFuZGxlci9leHRlcm5hbCBcInN0cmVhbVwiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFB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QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSwwQkFBMEI7QUFDbEMsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSx3Q0FBd0M7QUFDaEQsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSxnQ0FBZ0M7QUFDeEMsUUFBUSw0QkFBNEI7QUFDcEMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSxxQ0FBcUM7QUFDN0MsUUFBUSx5QkFBeUI7QUFDakMsUUFBUSw4Q0FBOEM7QUFDdEQsUUFBUSx5Q0FBeUM7QUFDakQsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSxnQ0FBZ0M7QUFDeEMsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSxpQ0FBaUM7QUFDekMsUUFBUSwwQ0FBMEM7QUFDbEQsUUFBUSxpQ0FBaUM7QUFDekMsUUFBUSxtQ0FBbUM7QUFDM0MsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSw2QkFBNkI7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSwwQkFBMEI7QUFDbEMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSw2QkFBNkI7QUFDckMsUUFBUSw0QkFBNEI7QUFDcEMsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSw4QkFBOEI7QUFDdEMsUUFBUSxnQ0FBZ0M7QUFDeEMsUUFBUSwrQkFBK0I7QUFDdkMsUUFBUSxnQ0FBZ0M7QUFDeEMsUUFBUSxtQ0FBbUM7QUFDM0MsUUFBUSxtQ0FBbUM7QUFDM0MsUUFBUSxvQ0FBb0M7QUFDNUMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSwyQkFBMkI7QUFDbkMsUUFBUSxvQ0FBb0M7QUFDNUMsUUFBUSxrQ0FBa0M7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyx5QkFBeUI7QUFDdkMsY0FBYywyQkFBMkI7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLDZCQUE2Qix1Q0FBdUMsRUFBRSxFQUFFOztBQUUvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxJQUFJLFNBQVMsTUFBTTtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLDZDQUE2Qzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZCQUE2QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscURBQXFEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixVQUFVLFdBQVc7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FB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QyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHdCQUF3QjtBQUNsQyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLHlCQUF5QjtBQUNuQyxVQUFVO0FBQ1Y7O0FBRUE7QUFDQSxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHVCQUF1QjtBQUNqQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLHNCQUFzQjtB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLDJCQUEyQjtBQUNuQyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLDZCQUE2QjtBQUNyQyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLHVDQUF1QztBQUMvQyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLHFDQUFxQztBQUM3QyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLGlDQUFpQztBQUN6QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLHVDQUF1QztBQUMvQyxRQUFRLHlDQUF5QztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0EseUJBQXlCOztBQUV6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFVLHVDQUF1QztBQUNqRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1EQUFtRDtBQUM3RCxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDRDQUE0QztBQUN0RCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDJCQUEyQjtBQUNyQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDBCQUEwQjtBQUNwQyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDhDQUE4QztBQUN4RCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLDRDQUE0QztBQUN0RCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLG1EQUFtRDtBQUM3RCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDhCQUE4QjtBQUN4QyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDhDQUE4QztBQUN4RCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLDhDQUE4QztBQUN4RCxVQUFVLDRDQUE0QztBQUN0RCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDRDQUE0QztBQUN0RCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLDZCQUE2QjtBQUN2QyxVQUFVLHFEQUFxRDtBQUMvRCxVQUFVLG1EQUFtRDtBQUM3RCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLGtEQUFrRDtBQUM1RCxVQUFVLGtEQUFrRDtBQUM1RCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLCtDQUErQztBQUN6RCxVQUFVLDZDQUE2QztBQUN2RCxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLHNDQUFzQztBQUNoRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLCtDQUErQztBQUN6RCxVQUFVLGtEQUFrRDtBQUM1RCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDRDQUE0QztBQUN0RCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHdDQUF3QztBQUNsRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGlEQUFpRDtBQUMzRCxVQUFVLG9DQUFvQztBQUM5QyxVQUFVLGtDQUFrQztBQUM1QyxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLCtCQUErQjtBQUN6QyxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLDRCQUE0QjtBQUN0QyxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLHVDQUF1QztBQUNqRCxVQUFVLG1DQUFtQztBQUM3QyxVQUFVLGdDQUFnQztBQUMxQyxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDhDQUE4QztBQUN4RCxVQUFVLDBDQUEwQztBQUNwRCxVQUFVLHlDQUF5QztBQUNuRCxVQUFVLDRDQUE0QztBQUN0RCxV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eUJBQXlCO0FBQ25DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdURBQXVEO0FBQ2pFLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUscUJBQXFCO0FBQy9CLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUseUJBQXlCO0FBQ25DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0NBQStDO0FBQ3pELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdURBQXVEO0FBQ2pFLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUscUJBQXFCO0FBQy9CLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsb0NBQW9DO0FBQzlDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscUJBQXFCO0FBQy9CLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsaURBQWlEO0FBQzNELFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUscUJBQXFCO0FBQy9CLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsb0NBQW9DO0FBQzlDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscURBQXFEO0FBQy9ELFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsbURBQW1EO0FBQzdELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUsaURBQWlEO0FBQzNELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaURBQWlEO0FBQzNELFVBQVUseURBQXlEO0FBQ25FLFVBQVUsaURBQWlEO0FBQzNELFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsNkNBQTZDO0FBQ3ZELFVBQVUseUNBQXlDO0FBQ25ELFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUseUNBQXlDO0FBQ25ELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsNkJBQTZCO0FBQ3ZDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsdUNBQXVDO0FBQ2pELFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsdUJBQXVCO0FBQ2pDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsK0JBQStCO0FBQ3pDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUseUJBQXlCO0FBQ25DLFVBQVUsbUNBQW1DO0FBQzdDLFVBQVUscUNBQXFDO0FBQy9DLFVBQVUsK0NBQStDO0FBQ3pELFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUsaUNBQWlDO0FBQzNDLFVBQVUs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QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RyxTQUFTLHFCQUFxQixFQUFFO0FBQ2hDLDRCQUE0QixtQkFBbUI7QUFDL0Msa05BQWtOLGlFQUFpRSxFQUFFO0FBQ3JSLFdBQVcsa0JBQWtCLDRDQUE0QyxvQkFBb0I7QUFDN0Y7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkcsU0FBUyxxQkFBcUIsRUFBRTtBQUNoQyw0QkFBNEIsbUJBQW1CO0FBQy9DLGtOQUFrTixpRUFBaUUsRUFBRTtBQUNyUixXQUFXLGtCQUFrQiw0Q0FBNEMsb0JBQW9CO0FBQzdGO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RyxTQUFTLHFCQUFxQixFQUFFO0FBQ2hDLDRCQUE0QixtQkFBbUI7QUFDL0Msa05BQWtOLGlFQUFpRSxFQUFFO0FBQ3JSLFdBQVcsa0JBQWtCLDRDQUE0QyxvQkFBb0I7QUFDN0Y7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4QywwQkFBMEI7QUFDdkc7QUFDQSxXQUFXLG9CQUFvQiw4Q0FBOEMsMEJBQTBCO0FBQ3ZHO0FBQ0EsV0FBVyxvQkFBb0IsOENBQThDLDBCQUEwQjtBQUN2RztBQUNBLFdBQVcsb0JBQW9CLDhDQUE4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QUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHNCQUFzQixvQkFBb0I7O0FBRTFDO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUseUdBQXlHO0FBQzdHOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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O0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThC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O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7O0FBRXRCLHVDQUF1Qzs7QUFFdkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsdUJBQXVCO0FBQ3JEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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Q0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSwwQkFBMEIsaUJBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLDBCQUEwQixpQkFBaUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCLGlCQUFpQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QzFDLG9EQUFvRDtBQUNwRCxtQkFBbUI7QUFDbkIsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osdUJBQXVCO0FBQ3ZCLHNCQUFzQjtBQUN0QixPQUFPO0FBQ1Asb0JBQW9CO0FBQ3BCLEdBQUc7Ozs7Ozs7Ozs7OztBQzlDSCxtQzs7Ozs7Ozs7Ozs7QUNBQSwrQjs7Ozs7Ozs7Ozs7QUNBQSxtQyIsImZpbGUiOiJGaWxlSGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiRmlsZUhhbmRsZXJcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiRmlsZUhhbmRsZXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiRmlsZUhhbmRsZXJcIl0gPSBmYWN0b3J5KCk7XG59KShnbG9iYWwsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vd3d3cm9vdC9FeGNlbEFkZEluL0ZpbGVIYW5kbGVyLnRzXCIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRmdW5jdGlvbiBfX2V4cG9ydChtKSB7XG5cdCAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHRfX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHR2YXIgeGxzeF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0ZXhwb3J0cy5yZWFkRmlsZSA9IHhsc3hfMS5yZWFkRmlsZTtcblx0ZXhwb3J0cy5yZWFkID0geGxzeF8xLnJlYWQ7XG5cdGV4cG9ydHMudXRpbHMgPSB4bHN4XzEudXRpbHM7XG5cdGV4cG9ydHMud3JpdGUgPSB4bHN4XzEud3JpdGU7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIHhsc3guanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuXHQvKiB2aW06IHNldCB0cz0yOiAqL1xuXHQvKmpzaGludCAtVzA0MSAqL1xuXHQvKmpzaGludCBmdW5jc2NvcGU6dHJ1ZSwgZXFudWxsOnRydWUgKi9cblx0LypleHBvcnRlZCBYTFNYICovXG5cdC8qZ2xvYmFsIGV4cG9ydHMsIG1vZHVsZSwgcmVxdWlyZTpmYWxzZSwgcHJvY2VzczpmYWxzZSwgQnVmZmVyOmZhbHNlICovXG5cdHZhciBYTFNYID0ge307XG5cdChmdW5jdGlvbiBtYWtlX3hsc3goWExTWCl7XG5cdFhMU1gudmVyc2lvbiA9ICcwLjEwLjEnO1xuXHR2YXIgY3VycmVudF9jb2RlcGFnZSA9IDEyMDA7XG5cdC8qZ2xvYmFsIGNwdGFibGU6dHJ1ZSAqL1xuXHRpZih0cnVlKSB7XG5cdFx0aWYodHlwZW9mIGNwdGFibGUgPT09ICd1bmRlZmluZWQnKSBjcHRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0fVxuXHRmdW5jdGlvbiByZXNldF9jcCgpIHsgc2V0X2NwKDEyMDApOyB9XG5cdHZhciBzZXRfY3AgPSBmdW5jdGlvbihjcCkgeyBjdXJyZW50X2NvZGVwYWdlID0gY3A7IH07XG5cblx0ZnVuY3Rpb24gY2hhcl9jb2RlcyhkYXRhKSB7IHZhciBvID0gW107IGZvcih2YXIgaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyArK2kpIG9baV0gPSBkYXRhLmNoYXJDb2RlQXQoaSk7IHJldHVybiBvOyB9XG5cdHZhciBkZWJvbSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHR2YXIgYzEgPSBkYXRhLmNoYXJDb2RlQXQoMCksIGMyID0gZGF0YS5jaGFyQ29kZUF0KDEpO1xuXHRcdGlmKGMxID09IDB4RkYgJiYgYzIgPT0gMHhGRSkgcmV0dXJuIGRhdGEuc3Vic3RyKDIpO1xuXHRcdGlmKGMxID09IDB4RkUgJiYgYzIgPT0gMHhGRikgcmV0dXJuIGRhdGEuc3Vic3RyKDIpO1xuXHRcdGlmKGMxID09IDB4RkVGRikgcmV0dXJuIGRhdGEuc3Vic3RyKDEpO1xuXHRcdHJldHVybiBkYXRhO1xuXHR9O1xuXG5cdHZhciBfZ2V0Y2hhciA9IGZ1bmN0aW9uIF9nYzEoeCkgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTsgfTtcblx0aWYodHlwZW9mIGNwdGFibGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0c2V0X2NwID0gZnVuY3Rpb24oY3ApIHsgY3VycmVudF9jb2RlcGFnZSA9IGNwOyB9O1xuXHRcdGRlYm9tID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0aWYoZGF0YS5jaGFyQ29kZUF0KDApID09PSAweEZGICYmIGRhdGEuY2hhckNvZGVBdCgxKSA9PT0gMHhGRSkgeyByZXR1cm4gY3B0YWJsZS51dGlscy5kZWNvZGUoMTIwMCwgY2hhcl9jb2RlcyhkYXRhLnN1YnN0cigyKSkpOyB9XG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9O1xuXHRcdF9nZXRjaGFyID0gZnVuY3Rpb24gX2djMih4KSB7XG5cdFx0XHRpZihjdXJyZW50X2NvZGVwYWdlID09PSAxMjAwKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcblx0XHRcdHJldHVybiBjcHRhYmxlLnV0aWxzLmRlY29kZShjdXJyZW50X2NvZGVwYWdlLCBbeCYyNTUseD4+OF0pWzBdO1xuXHRcdH07XG5cdH1cblx0dmFyIERFTlNFID0gbnVsbDtcblx0dmFyIERJRl9YTCA9IHRydWU7XG5cdHZhciBCYXNlNjQgPSAoZnVuY3Rpb24gbWFrZV9iNjQoKXtcblx0XHR2YXIgbWFwID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuXHRcdHJldHVybiB7XG5cdFx0XHRlbmNvZGU6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdFx0XHRcdHZhciBvID0gXCJcIjtcblx0XHRcdFx0dmFyIGMxLCBjMiwgYzMsIGUxLCBlMiwgZTMsIGU0O1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyApIHtcblx0XHRcdFx0XHRjMSA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblx0XHRcdFx0XHRjMiA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblx0XHRcdFx0XHRjMyA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblx0XHRcdFx0XHRlMSA9IGMxID4+IDI7XG5cdFx0XHRcdFx0ZTIgPSAoYzEgJiAzKSA8PCA0IHwgYzIgPj4gNDtcblx0XHRcdFx0XHRlMyA9IChjMiAmIDE1KSA8PCAyIHwgYzMgPj4gNjtcblx0XHRcdFx0XHRlNCA9IGMzICYgNjM7XG5cdFx0XHRcdFx0aWYgKGlzTmFOKGMyKSkgeyBlMyA9IGU0ID0gNjQ7IH1cblx0XHRcdFx0XHRlbHNlIGlmIChpc05hTihjMykpIHsgZTQgPSA2NDsgfVxuXHRcdFx0XHRcdG8gKz0gbWFwLmNoYXJBdChlMSkgKyBtYXAuY2hhckF0KGUyKSArIG1hcC5jaGFyQXQoZTMpICsgbWFwLmNoYXJBdChlNCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHR9LFxuXHRcdFx0ZGVjb2RlOiBmdW5jdGlvbiBiNjRfZGVjb2RlKGlucHV0KSB7XG5cdFx0XHRcdHZhciBvID0gXCJcIjtcblx0XHRcdFx0dmFyIGMxLCBjMiwgYzM7XG5cdFx0XHRcdHZhciBlMSwgZTIsIGUzLCBlNDtcblx0XHRcdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZywgXCJcIik7XG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XG5cdFx0XHRcdFx0ZTEgPSBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cdFx0XHRcdFx0ZTIgPSBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cdFx0XHRcdFx0ZTMgPSBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cdFx0XHRcdFx0ZTQgPSBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7XG5cdFx0XHRcdFx0YzEgPSBlMSA8PCAyIHwgZTIgPj4gNDtcblx0XHRcdFx0XHRjMiA9IChlMiAmIDE1KSA8PCA0IHwgZTMgPj4gMjtcblx0XHRcdFx0XHRjMyA9IChlMyAmIDMpIDw8IDYgfCBlNDtcblx0XHRcdFx0XHRvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xuXHRcdFx0XHRcdGlmIChlMyAhPSA2NCkgeyBvICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzIpOyB9XG5cdFx0XHRcdFx0aWYgKGU0ICE9IDY0KSB7IG8gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjMyk7IH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbztcblx0XHRcdH1cblx0XHR9O1xuXHR9KSgpO1xuXHR2YXIgaGFzX2J1ZiA9ICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMubm9kZSk7XG5cblx0ZnVuY3Rpb24gbmV3X3Jhd19idWYobGVuKSB7XG5cdFx0LyoganNoaW50IC1XMDU2ICovXG5cdFx0cmV0dXJuIG5ldyAoaGFzX2J1ZiA/IEJ1ZmZlciA6IEFycmF5KShsZW4pO1xuXHRcdC8qIGpzaGludCArVzA1NiAqL1xuXHR9XG5cblx0ZnVuY3Rpb24gczJhKHMpIHtcblx0XHRpZihoYXNfYnVmKSByZXR1cm4gbmV3IEJ1ZmZlcihzLCBcImJpbmFyeVwiKTtcblx0XHRyZXR1cm4gcy5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oeCl7IHJldHVybiB4LmNoYXJDb2RlQXQoMCkgJiAweGZmOyB9KTtcblx0fVxuXG5cdHZhciBiY29uY2F0ID0gZnVuY3Rpb24oYnVmcykgeyByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBidWZzKTsgfTtcblxuXHR2YXIgY2hyMCA9IC9cXHUwMDAwL2csIGNocjEgPSAvW1xcdTAwMDEtXFx1MDAwNl0vO1xuXHQvKiBzc2YuanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuXHQvKmpzaGludCAtVzA0MSAqL1xuXHR2YXIgU1NGID0ge307XG5cdHZhciBtYWtlX3NzZiA9IGZ1bmN0aW9uIG1ha2Vfc3NmKFNTRil7XG5cdFNTRi52ZXJzaW9uID0gJzAuOS4yJztcblx0ZnVuY3Rpb24gX3N0cnJldih4KSB7IHZhciBvID0gXCJcIiwgaSA9IHgubGVuZ3RoLTE7IHdoaWxlKGk+PTApIG8gKz0geC5jaGFyQXQoaS0tKTsgcmV0dXJuIG87IH1cblx0ZnVuY3Rpb24gZmlsbChjLGwpIHsgdmFyIG8gPSBcIlwiOyB3aGlsZShvLmxlbmd0aCA8IGwpIG8rPWM7IHJldHVybiBvOyB9XG5cdGZ1bmN0aW9uIHBhZDAodixkKXt2YXIgdD1cIlwiK3Y7IHJldHVybiB0Lmxlbmd0aD49ZD90OmZpbGwoJzAnLGQtdC5sZW5ndGgpK3Q7fVxuXHRmdW5jdGlvbiBwYWRfKHYsZCl7dmFyIHQ9XCJcIit2O3JldHVybiB0Lmxlbmd0aD49ZD90OmZpbGwoJyAnLGQtdC5sZW5ndGgpK3Q7fVxuXHRmdW5jdGlvbiBycGFkXyh2LGQpe3ZhciB0PVwiXCIrdjsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6dCtmaWxsKCcgJyxkLXQubGVuZ3RoKTt9XG5cdGZ1bmN0aW9uIHBhZDByMSh2LGQpe3ZhciB0PVwiXCIrTWF0aC5yb3VuZCh2KTsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6ZmlsbCgnMCcsZC10Lmxlbmd0aCkrdDt9XG5cdGZ1bmN0aW9uIHBhZDByMih2LGQpe3ZhciB0PVwiXCIrdjsgcmV0dXJuIHQubGVuZ3RoPj1kP3Q6ZmlsbCgnMCcsZC10Lmxlbmd0aCkrdDt9XG5cdHZhciBwMl8zMiA9IE1hdGgucG93KDIsMzIpO1xuXHRmdW5jdGlvbiBwYWQwcih2LGQpe2lmKHY+cDJfMzJ8fHY8LXAyXzMyKSByZXR1cm4gcGFkMHIxKHYsZCk7IHZhciBpID0gTWF0aC5yb3VuZCh2KTsgcmV0dXJuIHBhZDByMihpLGQpOyB9XG5cdGZ1bmN0aW9uIGlzZ2VuZXJhbChzLCBpKSB7IGkgPSBpIHx8IDA7IHJldHVybiBzLmxlbmd0aCA+PSA3ICsgaSAmJiAocy5jaGFyQ29kZUF0KGkpfDMyKSA9PT0gMTAzICYmIChzLmNoYXJDb2RlQXQoaSsxKXwzMikgPT09IDEwMSAmJiAocy5jaGFyQ29kZUF0KGkrMil8MzIpID09PSAxMTAgJiYgKHMuY2hhckNvZGVBdChpKzMpfDMyKSA9PT0gMTAxICYmIChzLmNoYXJDb2RlQXQoaSs0KXwzMikgPT09IDExNCAmJiAocy5jaGFyQ29kZUF0KGkrNSl8MzIpID09PSA5NyAmJiAocy5jaGFyQ29kZUF0KGkrNil8MzIpID09PSAxMDg7IH1cblx0LyogT3B0aW9ucyAqL1xuXHR2YXIgb3B0c19mbXQgPSBbXG5cdFx0W1wiZGF0ZTE5MDRcIiwgMF0sXG5cdFx0W1wib3V0cHV0XCIsIFwiXCJdLFxuXHRcdFtcIldURlwiLCBmYWxzZV1cblx0XTtcblx0ZnVuY3Rpb24gZml4b3B0cyhvKXtcblx0XHRmb3IodmFyIHkgPSAwOyB5ICE9IG9wdHNfZm10Lmxlbmd0aDsgKyt5KSBpZihvW29wdHNfZm10W3ldWzBdXT09PXVuZGVmaW5lZCkgb1tvcHRzX2ZtdFt5XVswXV09b3B0c19mbXRbeV1bMV07XG5cdH1cblx0U1NGLm9wdHMgPSBvcHRzX2ZtdDtcblx0dmFyIGRheXMgPSBbXG5cdFx0WydTdW4nLCAnU3VuZGF5J10sXG5cdFx0WydNb24nLCAnTW9uZGF5J10sXG5cdFx0WydUdWUnLCAnVHVlc2RheSddLFxuXHRcdFsnV2VkJywgJ1dlZG5lc2RheSddLFxuXHRcdFsnVGh1JywgJ1RodXJzZGF5J10sXG5cdFx0WydGcmknLCAnRnJpZGF5J10sXG5cdFx0WydTYXQnLCAnU2F0dXJkYXknXVxuXHRdO1xuXHR2YXIgbW9udGhzID0gW1xuXHRcdFsnSicsICdKYW4nLCAnSmFudWFyeSddLFxuXHRcdFsnRicsICdGZWInLCAnRmVicnVhcnknXSxcblx0XHRbJ00nLCAnTWFyJywgJ01hcmNoJ10sXG5cdFx0WydBJywgJ0FwcicsICdBcHJpbCddLFxuXHRcdFsnTScsICdNYXknLCAnTWF5J10sXG5cdFx0WydKJywgJ0p1bicsICdKdW5lJ10sXG5cdFx0WydKJywgJ0p1bCcsICdKdWx5J10sXG5cdFx0WydBJywgJ0F1ZycsICdBdWd1c3QnXSxcblx0XHRbJ1MnLCAnU2VwJywgJ1NlcHRlbWJlciddLFxuXHRcdFsnTycsICdPY3QnLCAnT2N0b2JlciddLFxuXHRcdFsnTicsICdOb3YnLCAnTm92ZW1iZXInXSxcblx0XHRbJ0QnLCAnRGVjJywgJ0RlY2VtYmVyJ11cblx0XTtcblx0ZnVuY3Rpb24gaW5pdF90YWJsZSh0KSB7XG5cdFx0dFswXT0gICdHZW5lcmFsJztcblx0XHR0WzFdPSAgJzAnO1xuXHRcdHRbMl09ICAnMC4wMCc7XG5cdFx0dFszXT0gICcjLCMjMCc7XG5cdFx0dFs0XT0gICcjLCMjMC4wMCc7XG5cdFx0dFs5XT0gICcwJSc7XG5cdFx0dFsxMF09ICcwLjAwJSc7XG5cdFx0dFsxMV09ICcwLjAwRSswMCc7XG5cdFx0dFsxMl09ICcjID8vPyc7XG5cdFx0dFsxM109ICcjID8/Lz8/Jztcblx0XHR0WzE0XT0gJ20vZC95eSc7XG5cdFx0dFsxNV09ICdkLW1tbS15eSc7XG5cdFx0dFsxNl09ICdkLW1tbSc7XG5cdFx0dFsxN109ICdtbW0teXknO1xuXHRcdHRbMThdPSAnaDptbSBBTS9QTSc7XG5cdFx0dFsxOV09ICdoOm1tOnNzIEFNL1BNJztcblx0XHR0WzIwXT0gJ2g6bW0nO1xuXHRcdHRbMjFdPSAnaDptbTpzcyc7XG5cdFx0dFsyMl09ICdtL2QveXkgaDptbSc7XG5cdFx0dFszN109ICcjLCMjMCA7KCMsIyMwKSc7XG5cdFx0dFszOF09ICcjLCMjMCA7W1JlZF0oIywjIzApJztcblx0XHR0WzM5XT0gJyMsIyMwLjAwOygjLCMjMC4wMCknO1xuXHRcdHRbNDBdPSAnIywjIzAuMDA7W1JlZF0oIywjIzAuMDApJztcblx0XHR0WzQ1XT0gJ21tOnNzJztcblx0XHR0WzQ2XT0gJ1toXTptbTpzcyc7XG5cdFx0dFs0N109ICdtbXNzLjAnO1xuXHRcdHRbNDhdPSAnIyMwLjBFKzAnO1xuXHRcdHRbNDldPSAnQCc7XG5cdFx0dFs1Nl09ICdcIuS4iuWNiC/kuIvljYggXCJoaFwi5pmCXCJtbVwi5YiGXCJzc1wi56eSIFwiJztcblx0XHR0WzY1NTM1XT0gJ0dlbmVyYWwnO1xuXHR9XG5cblx0dmFyIHRhYmxlX2ZtdCA9IHt9O1xuXHRpbml0X3RhYmxlKHRhYmxlX2ZtdCk7XG5cdGZ1bmN0aW9uIGZyYWMoeCwgRCwgbWl4ZWQpIHtcblx0XHR2YXIgc2duID0geCA8IDAgPyAtMSA6IDE7XG5cdFx0dmFyIEIgPSB4ICogc2duO1xuXHRcdHZhciBQXzIgPSAwLCBQXzEgPSAxLCBQID0gMDtcblx0XHR2YXIgUV8yID0gMSwgUV8xID0gMCwgUSA9IDA7XG5cdFx0dmFyIEEgPSBNYXRoLmZsb29yKEIpO1xuXHRcdHdoaWxlKFFfMSA8IEQpIHtcblx0XHRcdEEgPSBNYXRoLmZsb29yKEIpO1xuXHRcdFx0UCA9IEEgKiBQXzEgKyBQXzI7XG5cdFx0XHRRID0gQSAqIFFfMSArIFFfMjtcblx0XHRcdGlmKChCIC0gQSkgPCAwLjAwMDAwMDA1KSBicmVhaztcblx0XHRcdEIgPSAxIC8gKEIgLSBBKTtcblx0XHRcdFBfMiA9IFBfMTsgUF8xID0gUDtcblx0XHRcdFFfMiA9IFFfMTsgUV8xID0gUTtcblx0XHR9XG5cdFx0aWYoUSA+IEQpIHsgaWYoUV8xID4gRCkgeyBRID0gUV8yOyBQID0gUF8yOyB9IGVsc2UgeyBRID0gUV8xOyBQID0gUF8xOyB9IH1cblx0XHRpZighbWl4ZWQpIHJldHVybiBbMCwgc2duICogUCwgUV07XG5cdFx0dmFyIHEgPSBNYXRoLmZsb29yKHNnbiAqIFAvUSk7XG5cdFx0cmV0dXJuIFtxLCBzZ24qUCAtIHEqUSwgUV07XG5cdH1cblx0ZnVuY3Rpb24gZ2VuZXJhbF9mbXRfaW50KHYpIHsgcmV0dXJuIFwiXCIrdjsgfVxuXHRTU0YuX2dlbmVyYWxfaW50ID0gZ2VuZXJhbF9mbXRfaW50O1xuXHR2YXIgZ2VuZXJhbF9mbXRfbnVtID0gKGZ1bmN0aW9uIG1ha2VfZ2VuZXJhbF9mbXRfbnVtKCkge1xuXHR2YXIgZ25yMSA9IC9cXC4oXFxkKlsxLTldKTArJC8sIGducjIgPSAvXFwuMCokLywgZ25yNCA9IC9cXC4oXFxkKlsxLTldKTArLywgZ25yNSA9IC9cXC4wKltFZV0vLCBnbnI2ID0gLyhFWystXSkoXFxkKSQvO1xuXHRmdW5jdGlvbiBnZm4yKHYpIHtcblx0XHR2YXIgdyA9ICh2PDA/MTI6MTEpO1xuXHRcdHZhciBvID0gZ2ZuNSh2LnRvRml4ZWQoMTIpKTsgaWYoby5sZW5ndGggPD0gdykgcmV0dXJuIG87XG5cdFx0byA9IHYudG9QcmVjaXNpb24oMTApOyBpZihvLmxlbmd0aCA8PSB3KSByZXR1cm4gbztcblx0XHRyZXR1cm4gdi50b0V4cG9uZW50aWFsKDUpO1xuXHR9XG5cdGZ1bmN0aW9uIGdmbjModikge1xuXHRcdHZhciBvID0gdi50b0ZpeGVkKDExKS5yZXBsYWNlKGducjEsXCIuJDFcIik7XG5cdFx0aWYoby5sZW5ndGggPiAodjwwPzEyOjExKSkgbyA9IHYudG9QcmVjaXNpb24oNik7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gZ2ZuNChvKSB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBvLmxlbmd0aDsgKytpKSBpZigoby5jaGFyQ29kZUF0KGkpIHwgMHgyMCkgPT09IDEwMSkgcmV0dXJuIG8ucmVwbGFjZShnbnI0LFwiLiQxXCIpLnJlcGxhY2UoZ25yNSxcIkVcIikucmVwbGFjZShcImVcIixcIkVcIikucmVwbGFjZShnbnI2LFwiJDEwJDJcIik7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gZ2ZuNShvKSB7XG5cdFx0cmV0dXJuIG8uaW5kZXhPZihcIi5cIikgPiAtMSA/IG8ucmVwbGFjZShnbnIyLFwiXCIpLnJlcGxhY2UoZ25yMSxcIi4kMVwiKSA6IG87XG5cdH1cblx0cmV0dXJuIGZ1bmN0aW9uIGdlbmVyYWxfZm10X251bSh2KSB7XG5cdFx0dmFyIFYgPSBNYXRoLmZsb29yKE1hdGgubG9nKE1hdGguYWJzKHYpKSpNYXRoLkxPRzEwRSksIG87XG5cdFx0aWYoViA+PSAtNCAmJiBWIDw9IC0xKSBvID0gdi50b1ByZWNpc2lvbigxMCtWKTtcblx0XHRlbHNlIGlmKE1hdGguYWJzKFYpIDw9IDkpIG8gPSBnZm4yKHYpO1xuXHRcdGVsc2UgaWYoViA9PT0gMTApIG8gPSB2LnRvRml4ZWQoMTApLnN1YnN0cigwLDEyKTtcblx0XHRlbHNlIG8gPSBnZm4zKHYpO1xuXHRcdHJldHVybiBnZm41KGdmbjQobykpO1xuXHR9O30pKCk7XG5cdFNTRi5fZ2VuZXJhbF9udW0gPSBnZW5lcmFsX2ZtdF9udW07XG5cdGZ1bmN0aW9uIGdlbmVyYWxfZm10KHYpIHtcblx0XHRzd2l0Y2godHlwZW9mIHYpIHtcblx0XHRcdGNhc2UgJ3N0cmluZyc6IHJldHVybiB2O1xuXHRcdFx0Y2FzZSAnYm9vbGVhbic6IHJldHVybiB2ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCI7XG5cdFx0XHRjYXNlICdudW1iZXInOiByZXR1cm4gKHZ8MCkgPT09IHYgPyBnZW5lcmFsX2ZtdF9pbnQodi8qLCBvcHRzKi8pIDogZ2VuZXJhbF9mbXRfbnVtKHYvKiwgb3B0cyovKTtcblx0XHRcdGNhc2UgJ3VuZGVmaW5lZCc6IHJldHVybiBcIlwiO1xuXHRcdFx0Y2FzZSAnb2JqZWN0JzogaWYodiA9PSBudWxsKSByZXR1cm4gXCJcIjtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgdmFsdWUgaW4gR2VuZXJhbCBmb3JtYXQ6IFwiICsgdik7XG5cdH1cblx0U1NGLl9nZW5lcmFsID0gZ2VuZXJhbF9mbXQ7XG5cdGZ1bmN0aW9uIGZpeF9oaWpyaSgvKmRhdGUsIG8qLykgeyByZXR1cm4gMDsgfVxuXHRmdW5jdGlvbiBwYXJzZV9kYXRlX2NvZGUodixvcHRzLGIyKSB7XG5cdFx0aWYodiA+IDI5NTg0NjUgfHwgdiA8IDApIHJldHVybiBudWxsO1xuXHRcdHZhciBkYXRlID0gKHZ8MCksIHRpbWUgPSBNYXRoLmZsb29yKDg2NDAwICogKHYgLSBkYXRlKSksIGRvdz0wO1xuXHRcdHZhciBkb3V0PVtdO1xuXHRcdHZhciBvdXQ9e0Q6ZGF0ZSwgVDp0aW1lLCB1Ojg2NDAwKih2LWRhdGUpLXRpbWUseTowLG06MCxkOjAsSDowLE06MCxTOjAscTowfTtcblx0XHRpZihNYXRoLmFicyhvdXQudSkgPCAxZS02KSBvdXQudSA9IDA7XG5cdFx0Zml4b3B0cyhvcHRzICE9IG51bGwgPyBvcHRzIDogKG9wdHM9W10pKTtcblx0XHRpZihvcHRzLmRhdGUxOTA0KSBkYXRlICs9IDE0NjI7XG5cdFx0aWYob3V0LnUgPiAwLjk5OSkge1xuXHRcdFx0b3V0LnUgPSAwO1xuXHRcdFx0aWYoKyt0aW1lID09IDg2NDAwKSB7IHRpbWUgPSAwOyArK2RhdGU7IH1cblx0XHR9XG5cdFx0aWYoZGF0ZSA9PT0gNjApIHtkb3V0ID0gYjIgPyBbMTMxNywxMCwyOV0gOiBbMTkwMCwyLDI5XTsgZG93PTM7fVxuXHRcdGVsc2UgaWYoZGF0ZSA9PT0gMCkge2RvdXQgPSBiMiA/IFsxMzE3LDgsMjldIDogWzE5MDAsMSwwXTsgZG93PTY7fVxuXHRcdGVsc2Uge1xuXHRcdFx0aWYoZGF0ZSA+IDYwKSAtLWRhdGU7XG5cdFx0XHQvKiAxID0gSmFuIDEgMTkwMCBpbiBHcmVnb3JpYW4gKi9cblx0XHRcdHZhciBkID0gbmV3IERhdGUoMTkwMCwgMCwgMSk7XG5cdFx0XHRkLnNldERhdGUoZC5nZXREYXRlKCkgKyBkYXRlIC0gMSk7XG5cdFx0XHRkb3V0ID0gW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCldO1xuXHRcdFx0ZG93ID0gZC5nZXREYXkoKTtcblx0XHRcdGlmKGRhdGUgPCA2MCkgZG93ID0gKGRvdyArIDYpICUgNztcblx0XHRcdGlmKGIyKSBkb3cgPSBmaXhfaGlqcmkoZCwgZG91dCk7XG5cdFx0fVxuXHRcdG91dC55ID0gZG91dFswXTsgb3V0Lm0gPSBkb3V0WzFdOyBvdXQuZCA9IGRvdXRbMl07XG5cdFx0b3V0LlMgPSB0aW1lICUgNjA7IHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG5cdFx0b3V0Lk0gPSB0aW1lICUgNjA7IHRpbWUgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG5cdFx0b3V0LkggPSB0aW1lO1xuXHRcdG91dC5xID0gZG93O1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblx0U1NGLnBhcnNlX2RhdGVfY29kZSA9IHBhcnNlX2RhdGVfY29kZTtcblx0Lypqc2hpbnQgLVcwODYgKi9cblx0ZnVuY3Rpb24gd3JpdGVfZGF0ZSh0eXBlLCBmbXQsIHZhbCwgc3MwKSB7XG5cdFx0dmFyIG89XCJcIiwgc3M9MCwgdHQ9MCwgeSA9IHZhbC55LCBvdXQsIG91dGwgPSAwO1xuXHRcdHN3aXRjaCh0eXBlKSB7XG5cdFx0XHRjYXNlIDk4OiAvKiAnYicgYnVkZGhpc3QgeWVhciAqL1xuXHRcdFx0XHR5ID0gdmFsLnkgKyA1NDM7XG5cdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgMTIxOiAvKiAneScgeWVhciAqL1xuXHRcdFx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHkgJSAxMDA7IG91dGwgPSAyOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogb3V0ID0geSAlIDEwMDAwOyBvdXRsID0gNDsgYnJlYWs7XG5cdFx0XHR9IGJyZWFrO1xuXHRcdFx0Y2FzZSAxMDk6IC8qICdtJyBtb250aCAqL1xuXHRcdFx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5tOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMzogcmV0dXJuIG1vbnRoc1t2YWwubS0xXVsxXTtcblx0XHRcdFx0Y2FzZSA1OiByZXR1cm4gbW9udGhzW3ZhbC5tLTFdWzBdO1xuXHRcdFx0XHRkZWZhdWx0OiByZXR1cm4gbW9udGhzW3ZhbC5tLTFdWzJdO1xuXHRcdFx0fSBicmVhaztcblx0XHRcdGNhc2UgMTAwOiAvKiAnZCcgZGF5ICovXG5cdFx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0XHRjYXNlIDE6IGNhc2UgMjogb3V0ID0gdmFsLmQ7IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdFx0Y2FzZSAzOiByZXR1cm4gZGF5c1t2YWwucV1bMF07XG5cdFx0XHRcdGRlZmF1bHQ6IHJldHVybiBkYXlzW3ZhbC5xXVsxXTtcblx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlIDEwNDogLyogJ2gnIDEyLWhvdXIgKi9cblx0XHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRcdGNhc2UgMTogY2FzZSAyOiBvdXQgPSAxKyh2YWwuSCsxMSklMTI7IG91dGwgPSBmbXQubGVuZ3RoOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgJ2JhZCBob3VyIGZvcm1hdDogJyArIGZtdDtcblx0XHRcdH0gYnJlYWs7XG5cdFx0XHRjYXNlIDcyOiAvKiAnSCcgMjQtaG91ciAqL1xuXHRcdFx0c3dpdGNoKGZtdC5sZW5ndGgpIHtcblx0XHRcdFx0Y2FzZSAxOiBjYXNlIDI6IG91dCA9IHZhbC5IOyBvdXRsID0gZm10Lmxlbmd0aDsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IHRocm93ICdiYWQgaG91ciBmb3JtYXQ6ICcgKyBmbXQ7XG5cdFx0XHR9IGJyZWFrO1xuXHRcdFx0Y2FzZSA3NzogLyogJ00nIG1pbnV0ZXMgKi9cblx0XHRcdHN3aXRjaChmbXQubGVuZ3RoKSB7XG5cdFx0XHRcdGNhc2UgMTogY2FzZSAyOiBvdXQgPSB2YWwuTTsgb3V0bCA9IGZtdC5sZW5ndGg7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiB0aHJvdyAnYmFkIG1pbnV0ZSBmb3JtYXQ6ICcgKyBmbXQ7XG5cdFx0XHR9IGJyZWFrO1xuXHRcdFx0Y2FzZSAxMTU6IC8qICdzJyBzZWNvbmRzICovXG5cdFx0XHRpZih2YWwudSA9PT0gMCkgc3dpdGNoKGZtdCkge1xuXHRcdFx0XHRjYXNlICdzJzogY2FzZSAnc3MnOiByZXR1cm4gcGFkMCh2YWwuUywgZm10Lmxlbmd0aCk7XG5cdFx0XHRcdGNhc2UgJy4wJzogY2FzZSAnLjAwJzogY2FzZSAnLjAwMCc6XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2goZm10KSB7XG5cdFx0XHRcdGNhc2UgJ3MnOiBjYXNlICdzcyc6IGNhc2UgJy4wJzogY2FzZSAnLjAwJzogY2FzZSAnLjAwMCc6XG5cdGlmKHNzMCA+PSAyKSB0dCA9IHNzMCA9PT0gMyA/IDEwMDAgOiAxMDA7XG5cdFx0XHRcdFx0ZWxzZSB0dCA9IHNzMCA9PT0gMSA/IDEwIDogMTtcblx0XHRcdFx0XHRzcyA9IE1hdGgucm91bmQoKHR0KSoodmFsLlMgKyB2YWwudSkpO1xuXHRcdFx0XHRcdGlmKHNzID49IDYwKnR0KSBzcyA9IDA7XG5cdFx0XHRcdFx0aWYoZm10ID09PSAncycpIHJldHVybiBzcyA9PT0gMCA/IFwiMFwiIDogXCJcIitzcy90dDtcblx0XHRcdFx0XHRvID0gcGFkMChzcywyICsgc3MwKTtcblx0XHRcdFx0XHRpZihmbXQgPT09ICdzcycpIHJldHVybiBvLnN1YnN0cigwLDIpO1xuXHRcdFx0XHRcdHJldHVybiBcIi5cIiArIG8uc3Vic3RyKDIsZm10Lmxlbmd0aC0xKTtcblx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgJ2JhZCBzZWNvbmQgZm9ybWF0OiAnICsgZm10O1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSA5MDogLyogJ1onIGFic29sdXRlIHRpbWUgKi9cblx0XHRcdHN3aXRjaChmbXQpIHtcblx0XHRcdFx0Y2FzZSAnW2hdJzogY2FzZSAnW2hoXSc6IG91dCA9IHZhbC5EKjI0K3ZhbC5IOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnW21dJzogY2FzZSAnW21tXSc6IG91dCA9ICh2YWwuRCoyNCt2YWwuSCkqNjArdmFsLk07IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdbc10nOiBjYXNlICdbc3NdJzogb3V0ID0gKCh2YWwuRCoyNCt2YWwuSCkqNjArdmFsLk0pKjYwK01hdGgucm91bmQodmFsLlMrdmFsLnUpOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgJ2JhZCBhYnN0aW1lIGZvcm1hdDogJyArIGZtdDtcblx0XHRcdH0gb3V0bCA9IGZtdC5sZW5ndGggPT09IDMgPyAxIDogMjsgYnJlYWs7XG5cdFx0XHRjYXNlIDEwMTogLyogJ2UnIGVyYSAqL1xuXHRcdFx0XHRvdXQgPSB5OyBvdXRsID0gMTtcblx0XHR9XG5cdFx0aWYob3V0bCA+IDApIHJldHVybiBwYWQwKG91dCwgb3V0bCk7IGVsc2UgcmV0dXJuIFwiXCI7XG5cdH1cblx0Lypqc2hpbnQgK1cwODYgKi9cblx0ZnVuY3Rpb24gY29tbWFpZnkocykge1xuXHRcdGlmKHMubGVuZ3RoIDw9IDMpIHJldHVybiBzO1xuXHRcdHZhciBqID0gKHMubGVuZ3RoICUgMyksIG8gPSBzLnN1YnN0cigwLGopO1xuXHRcdGZvcig7IGohPXMubGVuZ3RoOyBqKz0zKSBvKz0oby5sZW5ndGggPiAwID8gXCIsXCIgOiBcIlwiKSArIHMuc3Vic3RyKGosMyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0dmFyIHdyaXRlX251bSA9IChmdW5jdGlvbiBtYWtlX3dyaXRlX251bSgpe1xuXHR2YXIgcGN0MSA9IC8lL2c7XG5cdGZ1bmN0aW9uIHdyaXRlX251bV9wY3QodHlwZSwgZm10LCB2YWwpe1xuXHRcdHZhciBzZm10ID0gZm10LnJlcGxhY2UocGN0MSxcIlwiKSwgbXVsID0gZm10Lmxlbmd0aCAtIHNmbXQubGVuZ3RoO1xuXHRcdHJldHVybiB3cml0ZV9udW0odHlwZSwgc2ZtdCwgdmFsICogTWF0aC5wb3coMTAsMiptdWwpKSArIGZpbGwoXCIlXCIsbXVsKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9udW1fY20odHlwZSwgZm10LCB2YWwpe1xuXHRcdHZhciBpZHggPSBmbXQubGVuZ3RoIC0gMTtcblx0XHR3aGlsZShmbXQuY2hhckNvZGVBdChpZHgtMSkgPT09IDQ0KSAtLWlkeDtcblx0XHRyZXR1cm4gd3JpdGVfbnVtKHR5cGUsIGZtdC5zdWJzdHIoMCxpZHgpLCB2YWwgLyBNYXRoLnBvdygxMCwzKihmbXQubGVuZ3RoLWlkeCkpKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9udW1fZXhwKGZtdCwgdmFsKXtcblx0XHR2YXIgbztcblx0XHR2YXIgaWR4ID0gZm10LmluZGV4T2YoXCJFXCIpIC0gZm10LmluZGV4T2YoXCIuXCIpIC0gMTtcblx0XHRpZihmbXQubWF0Y2goL14jKzAuMEVcXCswJC8pKSB7XG5cdFx0XHRpZih2YWwgPT0gMCkgcmV0dXJuIFwiMC4wRSswXCI7XG5cdFx0XHRlbHNlIGlmKHZhbCA8IDApIHJldHVybiBcIi1cIiArIHdyaXRlX251bV9leHAoZm10LCAtdmFsKTtcblx0XHRcdHZhciBwZXJpb2QgPSBmbXQuaW5kZXhPZihcIi5cIik7IGlmKHBlcmlvZCA9PT0gLTEpIHBlcmlvZD1mbXQuaW5kZXhPZignRScpO1xuXHRcdFx0dmFyIGVlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpKk1hdGguTE9HMTBFKSVwZXJpb2Q7XG5cdFx0XHRpZihlZSA8IDApIGVlICs9IHBlcmlvZDtcblx0XHRcdG8gPSAodmFsL01hdGgucG93KDEwLGVlKSkudG9QcmVjaXNpb24oaWR4KzErKHBlcmlvZCtlZSklcGVyaW9kKTtcblx0XHRcdGlmKG8uaW5kZXhPZihcImVcIikgPT09IC0xKSB7XG5cdFx0XHRcdHZhciBmYWtlZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsKSpNYXRoLkxPRzEwRSk7XG5cdFx0XHRcdGlmKG8uaW5kZXhPZihcIi5cIikgPT09IC0xKSBvID0gby5jaGFyQXQoMCkgKyBcIi5cIiArIG8uc3Vic3RyKDEpICsgXCJFK1wiICsgKGZha2VlIC0gby5sZW5ndGgrZWUpO1xuXHRcdFx0XHRlbHNlIG8gKz0gXCJFK1wiICsgKGZha2VlIC0gZWUpO1xuXHRcdFx0XHR3aGlsZShvLnN1YnN0cigwLDIpID09PSBcIjAuXCIpIHtcblx0XHRcdFx0XHRvID0gby5jaGFyQXQoMCkgKyBvLnN1YnN0cigyLHBlcmlvZCkgKyBcIi5cIiArIG8uc3Vic3RyKDIrcGVyaW9kKTtcblx0XHRcdFx0XHRvID0gby5yZXBsYWNlKC9eMCsoWzEtOV0pLyxcIiQxXCIpLnJlcGxhY2UoL14wK1xcLi8sXCIwLlwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvID0gby5yZXBsYWNlKC9cXCstLyxcIi1cIik7XG5cdFx0XHR9XG5cdFx0XHRvID0gby5yZXBsYWNlKC9eKFsrLV0/KShcXGQqKVxcLihcXGQqKVtFZV0vLGZ1bmN0aW9uKCQkLCQxLCQyLCQzKSB7IHJldHVybiAkMSArICQyICsgJDMuc3Vic3RyKDAsKHBlcmlvZCtlZSklcGVyaW9kKSArIFwiLlwiICsgJDMuc3Vic3RyKGVlKSArIFwiRVwiOyB9KTtcblx0XHR9IGVsc2UgbyA9IHZhbC50b0V4cG9uZW50aWFsKGlkeCk7XG5cdFx0aWYoZm10Lm1hdGNoKC9FXFwrMDAkLykgJiYgby5tYXRjaCgvZVsrLV1cXGQkLykpIG8gPSBvLnN1YnN0cigwLG8ubGVuZ3RoLTEpICsgXCIwXCIgKyBvLmNoYXJBdChvLmxlbmd0aC0xKTtcblx0XHRpZihmbXQubWF0Y2goL0VcXC0vKSAmJiBvLm1hdGNoKC9lXFwrLykpIG8gPSBvLnJlcGxhY2UoL2VcXCsvLFwiZVwiKTtcblx0XHRyZXR1cm4gby5yZXBsYWNlKFwiZVwiLFwiRVwiKTtcblx0fVxuXHR2YXIgZnJhYzEgPSAvIyAoXFw/KykoID8pXFwvKCA/KShcXGQrKS87XG5cdGZ1bmN0aW9uIHdyaXRlX251bV9mMShyLCBhdmFsLCBzaWduKSB7XG5cdFx0dmFyIGRlbiA9IHBhcnNlSW50KHJbNF0sMTApLCByciA9IE1hdGgucm91bmQoYXZhbCAqIGRlbiksIGJhc2UgPSBNYXRoLmZsb29yKHJyL2Rlbik7XG5cdFx0dmFyIG15biA9IChyciAtIGJhc2UqZGVuKSwgbXlkID0gZGVuO1xuXHRcdHJldHVybiBzaWduICsgKGJhc2UgPT09IDAgPyBcIlwiIDogXCJcIitiYXNlKSArIFwiIFwiICsgKG15biA9PT0gMCA/IGZpbGwoXCIgXCIsIHJbMV0ubGVuZ3RoICsgMSArIHJbNF0ubGVuZ3RoKSA6IHBhZF8obXluLHJbMV0ubGVuZ3RoKSArIHJbMl0gKyBcIi9cIiArIHJbM10gKyBwYWQwKG15ZCxyWzRdLmxlbmd0aCkpO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX251bV9mMihyLCBhdmFsLCBzaWduKSB7XG5cdFx0cmV0dXJuIHNpZ24gKyAoYXZhbCA9PT0gMCA/IFwiXCIgOiBcIlwiK2F2YWwpICsgZmlsbChcIiBcIiwgclsxXS5sZW5ndGggKyAyICsgcls0XS5sZW5ndGgpO1xuXHR9XG5cdHZhciBkZWMxID0gL14jKjAqXFwuKDArKS87XG5cdHZhciBjbG9zZXBhcmVuID0gL1xcKS4qWzAjXS87XG5cdHZhciBwaG9uZSA9IC9cXCgjIyNcXCkgIyMjXFxcXD8tIyMjIy87XG5cdGZ1bmN0aW9uIGhhc2hxKHN0cikge1xuXHRcdHZhciBvID0gXCJcIiwgY2M7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBzdHIubGVuZ3RoOyArK2kpIHN3aXRjaCgoY2M9c3RyLmNoYXJDb2RlQXQoaSkpKSB7XG5cdFx0XHRjYXNlIDM1OiBicmVhaztcblx0XHRcdGNhc2UgNjM6IG8rPSBcIiBcIjsgYnJlYWs7XG5cdFx0XHRjYXNlIDQ4OiBvKz0gXCIwXCI7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogbys9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2MpO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiBybmQodmFsLCBkKSB7IHZhciBkZCA9IE1hdGgucG93KDEwLGQpOyByZXR1cm4gXCJcIisoTWF0aC5yb3VuZCh2YWwgKiBkZCkvZGQpOyB9XG5cdGZ1bmN0aW9uIGRlYyh2YWwsIGQpIHtcblx0XHRpZiAoZCA8ICgnJyArIE1hdGgucm91bmQoKHZhbC1NYXRoLmZsb29yKHZhbCkpKk1hdGgucG93KDEwLGQpKSkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoKHZhbC1NYXRoLmZsb29yKHZhbCkpKk1hdGgucG93KDEwLGQpKTtcblx0fVxuXHRmdW5jdGlvbiBjYXJyeSh2YWwsIGQpIHtcblx0XHRpZiAoZCA8ICgnJyArIE1hdGgucm91bmQoKHZhbC1NYXRoLmZsb29yKHZhbCkpKk1hdGgucG93KDEwLGQpKSkubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0ZnVuY3Rpb24gZmxyKHZhbCkgeyBpZih2YWwgPCAyMTQ3NDgzNjQ3ICYmIHZhbCA+IC0yMTQ3NDgzNjQ4KSByZXR1cm4gXCJcIisodmFsID49IDAgPyAodmFsfDApIDogKHZhbC0xfDApKTsgcmV0dXJuIFwiXCIrTWF0aC5mbG9vcih2YWwpOyB9XG5cdGZ1bmN0aW9uIHdyaXRlX251bV9mbHQodHlwZSwgZm10LCB2YWwpIHtcblx0XHRpZih0eXBlLmNoYXJDb2RlQXQoMCkgPT09IDQwICYmICFmbXQubWF0Y2goY2xvc2VwYXJlbikpIHtcblx0XHRcdHZhciBmZm10ID0gZm10LnJlcGxhY2UoL1xcKCAqLyxcIlwiKS5yZXBsYWNlKC8gXFwpLyxcIlwiKS5yZXBsYWNlKC9cXCkvLFwiXCIpO1xuXHRcdFx0aWYodmFsID49IDApIHJldHVybiB3cml0ZV9udW1fZmx0KCduJywgZmZtdCwgdmFsKTtcblx0XHRcdHJldHVybiAnKCcgKyB3cml0ZV9udW1fZmx0KCduJywgZmZtdCwgLXZhbCkgKyAnKSc7XG5cdFx0fVxuXHRcdGlmKGZtdC5jaGFyQ29kZUF0KGZtdC5sZW5ndGggLSAxKSA9PT0gNDQpIHJldHVybiB3cml0ZV9udW1fY20odHlwZSwgZm10LCB2YWwpO1xuXHRcdGlmKGZtdC5pbmRleE9mKCclJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX3BjdCh0eXBlLCBmbXQsIHZhbCk7XG5cdFx0aWYoZm10LmluZGV4T2YoJ0UnKSAhPT0gLTEpIHJldHVybiB3cml0ZV9udW1fZXhwKGZtdCwgdmFsKTtcblx0XHRpZihmbXQuY2hhckNvZGVBdCgwKSA9PT0gMzYpIHJldHVybiBcIiRcIit3cml0ZV9udW1fZmx0KHR5cGUsZm10LnN1YnN0cihmbXQuY2hhckF0KDEpPT0nICc/MjoxKSx2YWwpO1xuXHRcdHZhciBvO1xuXHRcdHZhciByLCByaSwgZmYsIGF2YWwgPSBNYXRoLmFicyh2YWwpLCBzaWduID0gdmFsIDwgMCA/IFwiLVwiIDogXCJcIjtcblx0XHRpZihmbXQubWF0Y2goL14wMCskLykpIHJldHVybiBzaWduICsgcGFkMHIoYXZhbCxmbXQubGVuZ3RoKTtcblx0XHRpZihmbXQubWF0Y2goL15bIz9dKyQvKSkge1xuXHRcdFx0byA9IHBhZDByKHZhbCwwKTsgaWYobyA9PT0gXCIwXCIpIG8gPSBcIlwiO1xuXHRcdFx0cmV0dXJuIG8ubGVuZ3RoID4gZm10Lmxlbmd0aCA/IG8gOiBoYXNocShmbXQuc3Vic3RyKDAsZm10Lmxlbmd0aC1vLmxlbmd0aCkpICsgbztcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goZnJhYzEpKSkgcmV0dXJuIHdyaXRlX251bV9mMShyLCBhdmFsLCBzaWduKTtcblx0XHRpZihmbXQubWF0Y2goL14jKzArJC8pKSByZXR1cm4gc2lnbiArIHBhZDByKGF2YWwsZm10Lmxlbmd0aCAtIGZtdC5pbmRleE9mKFwiMFwiKSk7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goZGVjMSkpKSB7XG5cdFx0XHRvID0gcm5kKHZhbCwgclsxXS5sZW5ndGgpLnJlcGxhY2UoL14oW15cXC5dKykkLyxcIiQxLlwiK3JbMV0pLnJlcGxhY2UoL1xcLiQvLFwiLlwiK3JbMV0pLnJlcGxhY2UoL1xcLihcXGQqKSQvLGZ1bmN0aW9uKCQkLCAkMSkgeyByZXR1cm4gXCIuXCIgKyAkMSArIGZpbGwoXCIwXCIsIHJbMV0ubGVuZ3RoLSQxLmxlbmd0aCk7IH0pO1xuXHRcdFx0cmV0dXJuIGZtdC5pbmRleE9mKFwiMC5cIikgIT09IC0xID8gbyA6IG8ucmVwbGFjZSgvXjBcXC4vLFwiLlwiKTtcblx0XHR9XG5cdFx0Zm10ID0gZm10LnJlcGxhY2UoL14jKyhbMC5dKS8sIFwiJDFcIik7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14oMCopXFwuKCMqKSQvKSkpIHtcblx0XHRcdHJldHVybiBzaWduICsgcm5kKGF2YWwsIHJbMl0ubGVuZ3RoKS5yZXBsYWNlKC9cXC4oXFxkKlsxLTldKTAqJC8sXCIuJDFcIikucmVwbGFjZSgvXigtP1xcZCopJC8sXCIkMS5cIikucmVwbGFjZSgvXjBcXC4vLHJbMV0ubGVuZ3RoP1wiMC5cIjpcIi5cIik7XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eI3sxLDN9LCMjMChcXC4/KSQvKSkpIHJldHVybiBzaWduICsgY29tbWFpZnkocGFkMHIoYXZhbCwwKSk7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14jLCMjMFxcLihbIzBdKjApJC8pKSkge1xuXHRcdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9mbHQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KFwiXCIrKE1hdGguZmxvb3IodmFsKSArIGNhcnJ5KHZhbCwgclsxXS5sZW5ndGgpKSkgKyBcIi5cIiArIHBhZDAoZGVjKHZhbCwgclsxXS5sZW5ndGgpLHJbMV0ubGVuZ3RoKTtcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14jLCMqLCMwLykpKSByZXR1cm4gd3JpdGVfbnVtX2ZsdCh0eXBlLGZtdC5yZXBsYWNlKC9eIywjKiwvLFwiXCIpLHZhbCk7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14oWzAjXSspKFxcXFw/LShbMCNdKykpKyQvKSkpIHtcblx0XHRcdG8gPSBfc3RycmV2KHdyaXRlX251bV9mbHQodHlwZSwgZm10LnJlcGxhY2UoL1tcXFxcLV0vZyxcIlwiKSwgdmFsKSk7XG5cdFx0XHRyaSA9IDA7XG5cdFx0XHRyZXR1cm4gX3N0cnJldihfc3RycmV2KGZtdC5yZXBsYWNlKC9cXFxcL2csXCJcIikpLnJlcGxhY2UoL1swI10vZyxmdW5jdGlvbih4KXtyZXR1cm4gcmk8by5sZW5ndGg/by5jaGFyQXQocmkrKyk6eD09PScwJz8nMCc6XCJcIjt9KSk7XG5cdFx0fVxuXHRcdGlmKGZtdC5tYXRjaChwaG9uZSkpIHtcblx0XHRcdG8gPSB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIyMjIyMjIyMjI1wiLCB2YWwpO1xuXHRcdFx0cmV0dXJuIFwiKFwiICsgby5zdWJzdHIoMCwzKSArIFwiKSBcIiArIG8uc3Vic3RyKDMsIDMpICsgXCItXCIgKyBvLnN1YnN0cig2KTtcblx0XHR9XG5cdFx0dmFyIG9hID0gXCJcIjtcblx0XHRpZigociA9IGZtdC5tYXRjaCgvXihbIzA/XSspKCA/KVxcLyggPykoWyMwP10rKS8pKSkge1xuXHRcdFx0cmkgPSBNYXRoLm1pbihyWzRdLmxlbmd0aCw3KTtcblx0XHRcdGZmID0gZnJhYyhhdmFsLCBNYXRoLnBvdygxMCxyaSktMSwgZmFsc2UpO1xuXHRcdFx0byA9IFwiXCIgKyBzaWduO1xuXHRcdFx0b2EgPSB3cml0ZV9udW0oXCJuXCIsIHJbMV0sIGZmWzFdKTtcblx0XHRcdGlmKG9hLmNoYXJBdChvYS5sZW5ndGgtMSkgPT0gXCIgXCIpIG9hID0gb2Euc3Vic3RyKDAsb2EubGVuZ3RoLTEpICsgXCIwXCI7XG5cdFx0XHRvICs9IG9hICsgclsyXSArIFwiL1wiICsgclszXTtcblx0XHRcdG9hID0gcnBhZF8oZmZbMl0scmkpO1xuXHRcdFx0aWYob2EubGVuZ3RoIDwgcls0XS5sZW5ndGgpIG9hID0gaGFzaHEocls0XS5zdWJzdHIocls0XS5sZW5ndGgtb2EubGVuZ3RoKSkgKyBvYTtcblx0XHRcdG8gKz0gb2E7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14jIChbIzA/XSspKCA/KVxcLyggPykoWyMwP10rKS8pKSkge1xuXHRcdFx0cmkgPSBNYXRoLm1pbihNYXRoLm1heChyWzFdLmxlbmd0aCwgcls0XS5sZW5ndGgpLDcpO1xuXHRcdFx0ZmYgPSBmcmFjKGF2YWwsIE1hdGgucG93KDEwLHJpKS0xLCB0cnVlKTtcblx0XHRcdHJldHVybiBzaWduICsgKGZmWzBdfHwoZmZbMV0gPyBcIlwiIDogXCIwXCIpKSArIFwiIFwiICsgKGZmWzFdID8gcGFkXyhmZlsxXSxyaSkgKyByWzJdICsgXCIvXCIgKyByWzNdICsgcnBhZF8oZmZbMl0scmkpOiBmaWxsKFwiIFwiLCAyKnJpKzEgKyByWzJdLmxlbmd0aCArIHJbM10ubGVuZ3RoKSk7XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eWyMwP10rJC8pKSkge1xuXHRcdFx0byA9IHBhZDByKHZhbCwgMCk7XG5cdFx0XHRpZihmbXQubGVuZ3RoIDw9IG8ubGVuZ3RoKSByZXR1cm4gbztcblx0XHRcdHJldHVybiBoYXNocShmbXQuc3Vic3RyKDAsZm10Lmxlbmd0aC1vLmxlbmd0aCkpICsgbztcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14oWyMwP10rKVxcLihbIzBdKykkLykpKSB7XG5cdFx0XHRvID0gXCJcIiArIHZhbC50b0ZpeGVkKE1hdGgubWluKHJbMl0ubGVuZ3RoLDEwKSkucmVwbGFjZSgvKFteMF0pMCskLyxcIiQxXCIpO1xuXHRcdFx0cmkgPSBvLmluZGV4T2YoXCIuXCIpO1xuXHRcdFx0dmFyIGxyZXMgPSBmbXQuaW5kZXhPZihcIi5cIikgLSByaSwgcnJlcyA9IGZtdC5sZW5ndGggLSBvLmxlbmd0aCAtIGxyZXM7XG5cdFx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGxyZXMpICsgbyArIGZtdC5zdWJzdHIoZm10Lmxlbmd0aC1ycmVzKSk7XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eMDAsMDAwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0XHRyaSA9IGRlYyh2YWwsIHJbMV0ubGVuZ3RoKTtcblx0XHRcdHJldHVybiB2YWwgPCAwID8gXCItXCIgKyB3cml0ZV9udW1fZmx0KHR5cGUsIGZtdCwgLXZhbCkgOiBjb21tYWlmeShmbHIodmFsKSkucmVwbGFjZSgvXlxcZCxcXGR7M30kLyxcIjAkJlwiKS5yZXBsYWNlKC9eXFxkKiQvLGZ1bmN0aW9uKCQkKSB7IHJldHVybiBcIjAwLFwiICsgKCQkLmxlbmd0aCA8IDMgPyBwYWQwKDAsMy0kJC5sZW5ndGgpIDogXCJcIikgKyAkJDsgfSkgKyBcIi5cIiArIHBhZDAocmksclsxXS5sZW5ndGgpO1xuXHRcdH1cblx0XHRzd2l0Y2goZm10KSB7XG5cdFx0XHRjYXNlIFwiIyMjLCMjMC4wMFwiOiByZXR1cm4gd3JpdGVfbnVtX2ZsdCh0eXBlLCBcIiMsIyMwLjAwXCIsIHZhbCk7XG5cdFx0XHRjYXNlIFwiIyMjLCMjI1wiOlxuXHRcdFx0Y2FzZSBcIiMjLCMjI1wiOlxuXHRcdFx0Y2FzZSBcIiMsIyMjXCI6IHZhciB4ID0gY29tbWFpZnkocGFkMHIoYXZhbCwwKSk7IHJldHVybiB4ICE9PSBcIjBcIiA/IHNpZ24gKyB4IDogXCJcIjtcblx0XHRcdGNhc2UgXCIjIyMsIyMjLjAwXCI6IHJldHVybiB3cml0ZV9udW1fZmx0KHR5cGUsIFwiIyMjLCMjMC4wMFwiLHZhbCkucmVwbGFjZSgvXjBcXC4vLFwiLlwiKTtcblx0XHRcdGNhc2UgXCIjLCMjIy4wMFwiOiByZXR1cm4gd3JpdGVfbnVtX2ZsdCh0eXBlLCBcIiMsIyMwLjAwXCIsdmFsKS5yZXBsYWNlKC9eMFxcLi8sXCIuXCIpO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHR9XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgZm9ybWF0IHxcIiArIGZtdCArIFwifFwiKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9udW1fY20yKHR5cGUsIGZtdCwgdmFsKXtcblx0XHR2YXIgaWR4ID0gZm10Lmxlbmd0aCAtIDE7XG5cdFx0d2hpbGUoZm10LmNoYXJDb2RlQXQoaWR4LTEpID09PSA0NCkgLS1pZHg7XG5cdFx0cmV0dXJuIHdyaXRlX251bSh0eXBlLCBmbXQuc3Vic3RyKDAsaWR4KSwgdmFsIC8gTWF0aC5wb3coMTAsMyooZm10Lmxlbmd0aC1pZHgpKSk7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfbnVtX3BjdDIodHlwZSwgZm10LCB2YWwpe1xuXHRcdHZhciBzZm10ID0gZm10LnJlcGxhY2UocGN0MSxcIlwiKSwgbXVsID0gZm10Lmxlbmd0aCAtIHNmbXQubGVuZ3RoO1xuXHRcdHJldHVybiB3cml0ZV9udW0odHlwZSwgc2ZtdCwgdmFsICogTWF0aC5wb3coMTAsMiptdWwpKSArIGZpbGwoXCIlXCIsbXVsKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9udW1fZXhwMihmbXQsIHZhbCl7XG5cdFx0dmFyIG87XG5cdFx0dmFyIGlkeCA9IGZtdC5pbmRleE9mKFwiRVwiKSAtIGZtdC5pbmRleE9mKFwiLlwiKSAtIDE7XG5cdFx0aWYoZm10Lm1hdGNoKC9eIyswLjBFXFwrMCQvKSkge1xuXHRcdFx0aWYodmFsID09IDApIHJldHVybiBcIjAuMEUrMFwiO1xuXHRcdFx0ZWxzZSBpZih2YWwgPCAwKSByZXR1cm4gXCItXCIgKyB3cml0ZV9udW1fZXhwMihmbXQsIC12YWwpO1xuXHRcdFx0dmFyIHBlcmlvZCA9IGZtdC5pbmRleE9mKFwiLlwiKTsgaWYocGVyaW9kID09PSAtMSkgcGVyaW9kPWZtdC5pbmRleE9mKCdFJyk7XG5cdFx0XHR2YXIgZWUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkqTWF0aC5MT0cxMEUpJXBlcmlvZDtcblx0XHRcdGlmKGVlIDwgMCkgZWUgKz0gcGVyaW9kO1xuXHRcdFx0byA9ICh2YWwvTWF0aC5wb3coMTAsZWUpKS50b1ByZWNpc2lvbihpZHgrMSsocGVyaW9kK2VlKSVwZXJpb2QpO1xuXHRcdFx0aWYoIW8ubWF0Y2goL1tFZV0vKSkge1xuXHRcdFx0XHR2YXIgZmFrZWUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkqTWF0aC5MT0cxMEUpO1xuXHRcdFx0XHRpZihvLmluZGV4T2YoXCIuXCIpID09PSAtMSkgbyA9IG8uY2hhckF0KDApICsgXCIuXCIgKyBvLnN1YnN0cigxKSArIFwiRStcIiArIChmYWtlZSAtIG8ubGVuZ3RoK2VlKTtcblx0XHRcdFx0ZWxzZSBvICs9IFwiRStcIiArIChmYWtlZSAtIGVlKTtcblx0XHRcdFx0byA9IG8ucmVwbGFjZSgvXFwrLS8sXCItXCIpO1xuXHRcdFx0fVxuXHRcdFx0byA9IG8ucmVwbGFjZSgvXihbKy1dPykoXFxkKilcXC4oXFxkKilbRWVdLyxmdW5jdGlvbigkJCwkMSwkMiwkMykgeyByZXR1cm4gJDEgKyAkMiArICQzLnN1YnN0cigwLChwZXJpb2QrZWUpJXBlcmlvZCkgKyBcIi5cIiArICQzLnN1YnN0cihlZSkgKyBcIkVcIjsgfSk7XG5cdFx0fSBlbHNlIG8gPSB2YWwudG9FeHBvbmVudGlhbChpZHgpO1xuXHRcdGlmKGZtdC5tYXRjaCgvRVxcKzAwJC8pICYmIG8ubWF0Y2goL2VbKy1dXFxkJC8pKSBvID0gby5zdWJzdHIoMCxvLmxlbmd0aC0xKSArIFwiMFwiICsgby5jaGFyQXQoby5sZW5ndGgtMSk7XG5cdFx0aWYoZm10Lm1hdGNoKC9FXFwtLykgJiYgby5tYXRjaCgvZVxcKy8pKSBvID0gby5yZXBsYWNlKC9lXFwrLyxcImVcIik7XG5cdFx0cmV0dXJuIG8ucmVwbGFjZShcImVcIixcIkVcIik7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfbnVtX2ludCh0eXBlLCBmbXQsIHZhbCkge1xuXHRcdGlmKHR5cGUuY2hhckNvZGVBdCgwKSA9PT0gNDAgJiYgIWZtdC5tYXRjaChjbG9zZXBhcmVuKSkge1xuXHRcdFx0dmFyIGZmbXQgPSBmbXQucmVwbGFjZSgvXFwoICovLFwiXCIpLnJlcGxhY2UoLyBcXCkvLFwiXCIpLnJlcGxhY2UoL1xcKS8sXCJcIik7XG5cdFx0XHRpZih2YWwgPj0gMCkgcmV0dXJuIHdyaXRlX251bV9pbnQoJ24nLCBmZm10LCB2YWwpO1xuXHRcdFx0cmV0dXJuICcoJyArIHdyaXRlX251bV9pbnQoJ24nLCBmZm10LCAtdmFsKSArICcpJztcblx0XHR9XG5cdFx0aWYoZm10LmNoYXJDb2RlQXQoZm10Lmxlbmd0aCAtIDEpID09PSA0NCkgcmV0dXJuIHdyaXRlX251bV9jbTIodHlwZSwgZm10LCB2YWwpO1xuXHRcdGlmKGZtdC5pbmRleE9mKCclJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX3BjdDIodHlwZSwgZm10LCB2YWwpO1xuXHRcdGlmKGZtdC5pbmRleE9mKCdFJykgIT09IC0xKSByZXR1cm4gd3JpdGVfbnVtX2V4cDIoZm10LCB2YWwpO1xuXHRcdGlmKGZtdC5jaGFyQ29kZUF0KDApID09PSAzNikgcmV0dXJuIFwiJFwiK3dyaXRlX251bV9pbnQodHlwZSxmbXQuc3Vic3RyKGZtdC5jaGFyQXQoMSk9PScgJz8yOjEpLHZhbCk7XG5cdFx0dmFyIG87XG5cdFx0dmFyIHIsIHJpLCBmZiwgYXZhbCA9IE1hdGguYWJzKHZhbCksIHNpZ24gPSB2YWwgPCAwID8gXCItXCIgOiBcIlwiO1xuXHRcdGlmKGZtdC5tYXRjaCgvXjAwKyQvKSkgcmV0dXJuIHNpZ24gKyBwYWQwKGF2YWwsZm10Lmxlbmd0aCk7XG5cdFx0aWYoZm10Lm1hdGNoKC9eWyM/XSskLykpIHtcblx0XHRcdG8gPSAoXCJcIit2YWwpOyBpZih2YWwgPT09IDApIG8gPSBcIlwiO1xuXHRcdFx0cmV0dXJuIG8ubGVuZ3RoID4gZm10Lmxlbmd0aCA/IG8gOiBoYXNocShmbXQuc3Vic3RyKDAsZm10Lmxlbmd0aC1vLmxlbmd0aCkpICsgbztcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goZnJhYzEpKSkgcmV0dXJuIHdyaXRlX251bV9mMihyLCBhdmFsLCBzaWduKTtcblx0XHRpZihmbXQubWF0Y2goL14jKzArJC8pKSByZXR1cm4gc2lnbiArIHBhZDAoYXZhbCxmbXQubGVuZ3RoIC0gZm10LmluZGV4T2YoXCIwXCIpKTtcblx0XHRpZigociA9IGZtdC5tYXRjaChkZWMxKSkpIHtcblx0byA9IChcIlwiK3ZhbCkucmVwbGFjZSgvXihbXlxcLl0rKSQvLFwiJDEuXCIrclsxXSkucmVwbGFjZSgvXFwuJC8sXCIuXCIrclsxXSk7XG5cdFx0XHRvID0gby5yZXBsYWNlKC9cXC4oXFxkKikkLyxmdW5jdGlvbigkJCwgJDEpIHtcblx0cmV0dXJuIFwiLlwiICsgJDEgKyBmaWxsKFwiMFwiLCByWzFdLmxlbmd0aC0kMS5sZW5ndGgpOyB9KTtcblx0XHRcdHJldHVybiBmbXQuaW5kZXhPZihcIjAuXCIpICE9PSAtMSA/IG8gOiBvLnJlcGxhY2UoL14wXFwuLyxcIi5cIik7XG5cdFx0fVxuXHRcdGZtdCA9IGZtdC5yZXBsYWNlKC9eIysoWzAuXSkvLCBcIiQxXCIpO1xuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eKDAqKVxcLigjKikkLykpKSB7XG5cdFx0XHRyZXR1cm4gc2lnbiArIChcIlwiK2F2YWwpLnJlcGxhY2UoL1xcLihcXGQqWzEtOV0pMCokLyxcIi4kMVwiKS5yZXBsYWNlKC9eKC0/XFxkKikkLyxcIiQxLlwiKS5yZXBsYWNlKC9eMFxcLi8sclsxXS5sZW5ndGg/XCIwLlwiOlwiLlwiKTtcblx0XHR9XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14jezEsM30sIyMwKFxcLj8pJC8pKSkgcmV0dXJuIHNpZ24gKyBjb21tYWlmeSgoXCJcIithdmFsKSk7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14jLCMjMFxcLihbIzBdKjApJC8pKSkge1xuXHRcdFx0cmV0dXJuIHZhbCA8IDAgPyBcIi1cIiArIHdyaXRlX251bV9pbnQodHlwZSwgZm10LCAtdmFsKSA6IGNvbW1haWZ5KChcIlwiK3ZhbCkpICsgXCIuXCIgKyBmaWxsKCcwJyxyWzFdLmxlbmd0aCk7XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eIywjKiwjMC8pKSkgcmV0dXJuIHdyaXRlX251bV9pbnQodHlwZSxmbXQucmVwbGFjZSgvXiMsIyosLyxcIlwiKSx2YWwpO1xuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eKFswI10rKShcXFxcPy0oWzAjXSspKSskLykpKSB7XG5cdFx0XHRvID0gX3N0cnJldih3cml0ZV9udW1faW50KHR5cGUsIGZtdC5yZXBsYWNlKC9bXFxcXC1dL2csXCJcIiksIHZhbCkpO1xuXHRcdFx0cmkgPSAwO1xuXHRcdFx0cmV0dXJuIF9zdHJyZXYoX3N0cnJldihmbXQucmVwbGFjZSgvXFxcXC9nLFwiXCIpKS5yZXBsYWNlKC9bMCNdL2csZnVuY3Rpb24oeCl7cmV0dXJuIHJpPG8ubGVuZ3RoP28uY2hhckF0KHJpKyspOng9PT0nMCc/JzAnOlwiXCI7fSkpO1xuXHRcdH1cblx0XHRpZihmbXQubWF0Y2gocGhvbmUpKSB7XG5cdFx0XHRvID0gd3JpdGVfbnVtX2ludCh0eXBlLCBcIiMjIyMjIyMjIyNcIiwgdmFsKTtcblx0XHRcdHJldHVybiBcIihcIiArIG8uc3Vic3RyKDAsMykgKyBcIikgXCIgKyBvLnN1YnN0cigzLCAzKSArIFwiLVwiICsgby5zdWJzdHIoNik7XG5cdFx0fVxuXHRcdHZhciBvYSA9IFwiXCI7XG5cdFx0aWYoKHIgPSBmbXQubWF0Y2goL14oWyMwP10rKSggPylcXC8oID8pKFsjMD9dKykvKSkpIHtcblx0XHRcdHJpID0gTWF0aC5taW4ocls0XS5sZW5ndGgsNyk7XG5cdFx0XHRmZiA9IGZyYWMoYXZhbCwgTWF0aC5wb3coMTAscmkpLTEsIGZhbHNlKTtcblx0XHRcdG8gPSBcIlwiICsgc2lnbjtcblx0XHRcdG9hID0gd3JpdGVfbnVtKFwiblwiLCByWzFdLCBmZlsxXSk7XG5cdFx0XHRpZihvYS5jaGFyQXQob2EubGVuZ3RoLTEpID09IFwiIFwiKSBvYSA9IG9hLnN1YnN0cigwLG9hLmxlbmd0aC0xKSArIFwiMFwiO1xuXHRcdFx0byArPSBvYSArIHJbMl0gKyBcIi9cIiArIHJbM107XG5cdFx0XHRvYSA9IHJwYWRfKGZmWzJdLHJpKTtcblx0XHRcdGlmKG9hLmxlbmd0aCA8IHJbNF0ubGVuZ3RoKSBvYSA9IGhhc2hxKHJbNF0uc3Vic3RyKHJbNF0ubGVuZ3RoLW9hLmxlbmd0aCkpICsgb2E7XG5cdFx0XHRvICs9IG9hO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eIyAoWyMwP10rKSggPylcXC8oID8pKFsjMD9dKykvKSkpIHtcblx0XHRcdHJpID0gTWF0aC5taW4oTWF0aC5tYXgoclsxXS5sZW5ndGgsIHJbNF0ubGVuZ3RoKSw3KTtcblx0XHRcdGZmID0gZnJhYyhhdmFsLCBNYXRoLnBvdygxMCxyaSktMSwgdHJ1ZSk7XG5cdFx0XHRyZXR1cm4gc2lnbiArIChmZlswXXx8KGZmWzFdID8gXCJcIiA6IFwiMFwiKSkgKyBcIiBcIiArIChmZlsxXSA/IHBhZF8oZmZbMV0scmkpICsgclsyXSArIFwiL1wiICsgclszXSArIHJwYWRfKGZmWzJdLHJpKTogZmlsbChcIiBcIiwgMipyaSsxICsgclsyXS5sZW5ndGggKyByWzNdLmxlbmd0aCkpO1xuXHRcdH1cblx0XHRpZigociA9IGZtdC5tYXRjaCgvXlsjMD9dKyQvKSkpIHtcblx0XHRcdG8gPSBcIlwiICsgdmFsO1xuXHRcdFx0aWYoZm10Lmxlbmd0aCA8PSBvLmxlbmd0aCkgcmV0dXJuIG87XG5cdFx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGZtdC5sZW5ndGgtby5sZW5ndGgpKSArIG87XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eKFsjMF0rKVxcLihbIzBdKykkLykpKSB7XG5cdFx0XHRvID0gXCJcIiArIHZhbC50b0ZpeGVkKE1hdGgubWluKHJbMl0ubGVuZ3RoLDEwKSkucmVwbGFjZSgvKFteMF0pMCskLyxcIiQxXCIpO1xuXHRcdFx0cmkgPSBvLmluZGV4T2YoXCIuXCIpO1xuXHRcdFx0dmFyIGxyZXMgPSBmbXQuaW5kZXhPZihcIi5cIikgLSByaSwgcnJlcyA9IGZtdC5sZW5ndGggLSBvLmxlbmd0aCAtIGxyZXM7XG5cdFx0XHRyZXR1cm4gaGFzaHEoZm10LnN1YnN0cigwLGxyZXMpICsgbyArIGZtdC5zdWJzdHIoZm10Lmxlbmd0aC1ycmVzKSk7XG5cdFx0fVxuXHRcdGlmKChyID0gZm10Lm1hdGNoKC9eMDAsMDAwXFwuKFsjMF0qMCkkLykpKSB7XG5cdFx0XHRyZXR1cm4gdmFsIDwgMCA/IFwiLVwiICsgd3JpdGVfbnVtX2ludCh0eXBlLCBmbXQsIC12YWwpIDogY29tbWFpZnkoXCJcIit2YWwpLnJlcGxhY2UoL15cXGQsXFxkezN9JC8sXCIwJCZcIikucmVwbGFjZSgvXlxcZCokLyxmdW5jdGlvbigkJCkgeyByZXR1cm4gXCIwMCxcIiArICgkJC5sZW5ndGggPCAzID8gcGFkMCgwLDMtJCQubGVuZ3RoKSA6IFwiXCIpICsgJCQ7IH0pICsgXCIuXCIgKyBwYWQwKDAsclsxXS5sZW5ndGgpO1xuXHRcdH1cblx0XHRzd2l0Y2goZm10KSB7XG5cdFx0XHRjYXNlIFwiIyMjLCMjI1wiOlxuXHRcdFx0Y2FzZSBcIiMjLCMjI1wiOlxuXHRcdFx0Y2FzZSBcIiMsIyMjXCI6IHZhciB4ID0gY29tbWFpZnkoXCJcIithdmFsKTsgcmV0dXJuIHggIT09IFwiMFwiID8gc2lnbiArIHggOiBcIlwiO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYoZm10Lm1hdGNoKC9cXC5bMCM/XSokLykpIHJldHVybiB3cml0ZV9udW1faW50KHR5cGUsIGZtdC5zbGljZSgwLGZtdC5sYXN0SW5kZXhPZihcIi5cIikpLCB2YWwpICsgaGFzaHEoZm10LnNsaWNlKGZtdC5sYXN0SW5kZXhPZihcIi5cIikpKTtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgZm9ybWF0IHxcIiArIGZtdCArIFwifFwiKTtcblx0fVxuXHRyZXR1cm4gZnVuY3Rpb24gd3JpdGVfbnVtKHR5cGUsIGZtdCwgdmFsKSB7XG5cdFx0cmV0dXJuICh2YWx8MCkgPT09IHZhbCA/IHdyaXRlX251bV9pbnQodHlwZSwgZm10LCB2YWwpIDogd3JpdGVfbnVtX2ZsdCh0eXBlLCBmbXQsIHZhbCk7XG5cdH07fSkoKTtcblx0ZnVuY3Rpb24gc3BsaXRfZm10KGZtdCkge1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHR2YXIgaW5fc3RyID0gZmFsc2UvKiwgY2MqLztcblx0XHRmb3IodmFyIGkgPSAwLCBqID0gMDsgaSA8IGZtdC5sZW5ndGg7ICsraSkgc3dpdGNoKCgvKmNjPSovZm10LmNoYXJDb2RlQXQoaSkpKSB7XG5cdFx0XHRjYXNlIDM0OiAvKiAnXCInICovXG5cdFx0XHRcdGluX3N0ciA9ICFpbl9zdHI7IGJyZWFrO1xuXHRcdFx0Y2FzZSA5NTogY2FzZSA0MjogY2FzZSA5MjogLyogJ18nICcqJyAnXFxcXCcgKi9cblx0XHRcdFx0KytpOyBicmVhaztcblx0XHRcdGNhc2UgNTk6IC8qICc7JyAqL1xuXHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSBmbXQuc3Vic3RyKGosaS1qKTtcblx0XHRcdFx0aiA9IGkrMTtcblx0XHR9XG5cdFx0b3V0W291dC5sZW5ndGhdID0gZm10LnN1YnN0cihqKTtcblx0XHRpZihpbl9zdHIgPT09IHRydWUpIHRocm93IG5ldyBFcnJvcihcIkZvcm1hdCB8XCIgKyBmbXQgKyBcInwgdW50ZXJtaW5hdGVkIHN0cmluZyBcIik7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRTU0YuX3NwbGl0ID0gc3BsaXRfZm10O1xuXHR2YXIgYWJzdGltZSA9IC9cXFtbSGhNbVNzXSpcXF0vO1xuXHRmdW5jdGlvbiBmbXRfaXNfZGF0ZShmbXQpIHtcblx0XHR2YXIgaSA9IDAsIC8qY2MgPSAwLCovIGMgPSBcIlwiLCBvID0gXCJcIjtcblx0XHR3aGlsZShpIDwgZm10Lmxlbmd0aCkge1xuXHRcdFx0c3dpdGNoKChjID0gZm10LmNoYXJBdChpKSkpIHtcblx0XHRcdFx0Y2FzZSAnRyc6IGlmKGlzZ2VuZXJhbChmbXQsIGkpKSBpKz0gNjsgaSsrOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnXCInOiBmb3IoOygvKmNjPSovZm10LmNoYXJDb2RlQXQoKytpKSkgIT09IDM0ICYmIGkgPCBmbXQubGVuZ3RoOykgKytpOyArK2k7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdcXFxcJzogaSs9MjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ18nOiBpKz0yOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQCc6ICsraTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0InOiBjYXNlICdiJzpcblx0XHRcdFx0XHRpZihmbXQuY2hhckF0KGkrMSkgPT09IFwiMVwiIHx8IGZtdC5jaGFyQXQoaSsxKSA9PT0gXCIyXCIpIHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAnTSc6IGNhc2UgJ0QnOiBjYXNlICdZJzogY2FzZSAnSCc6IGNhc2UgJ1MnOiBjYXNlICdFJzpcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgJ20nOiBjYXNlICdkJzogY2FzZSAneSc6IGNhc2UgJ2gnOiBjYXNlICdzJzogY2FzZSAnZSc6IGNhc2UgJ2cnOiByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0Y2FzZSAnQSc6XG5cdFx0XHRcdFx0aWYoZm10LnN1YnN0cihpLCAzKSA9PT0gXCJBL1BcIikgcmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0aWYoZm10LnN1YnN0cihpLCA1KSA9PT0gXCJBTS9QTVwiKSByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHQrK2k7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdbJzpcblx0XHRcdFx0XHRvID0gYztcblx0XHRcdFx0XHR3aGlsZShmbXQuY2hhckF0KGkrKykgIT09ICddJyAmJiBpIDwgZm10Lmxlbmd0aCkgbyArPSBmbXQuY2hhckF0KGkpO1xuXHRcdFx0XHRcdGlmKG8ubWF0Y2goYWJzdGltZSkpIHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICcuJzpcblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgJzAnOiBjYXNlICcjJzpcblx0XHRcdFx0XHR3aGlsZShpIDwgZm10Lmxlbmd0aCAmJiAoXCIwIz8uLEUrLSVcIi5pbmRleE9mKGM9Zm10LmNoYXJBdCgrK2kpKSA+IC0xIHx8IChjPT0nXFxcXCcgJiYgZm10LmNoYXJBdChpKzEpID09IFwiLVwiICYmIFwiMCNcIi5pbmRleE9mKGZtdC5jaGFyQXQoaSsyKSk+LTEpKSl7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJz8nOiB3aGlsZShmbXQuY2hhckF0KCsraSkgPT09IGMpey8qIGVtcHR5ICovfSBicmVhaztcblx0XHRcdFx0Y2FzZSAnKic6ICsraTsgaWYoZm10LmNoYXJBdChpKSA9PSAnICcgfHwgZm10LmNoYXJBdChpKSA9PSAnKicpICsraTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJygnOiBjYXNlICcpJzogKytpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnMSc6IGNhc2UgJzInOiBjYXNlICczJzogY2FzZSAnNCc6IGNhc2UgJzUnOiBjYXNlICc2JzogY2FzZSAnNyc6IGNhc2UgJzgnOiBjYXNlICc5Jzpcblx0XHRcdFx0XHR3aGlsZShpIDwgZm10Lmxlbmd0aCAmJiBcIjAxMjM0NTY3ODlcIi5pbmRleE9mKGZtdC5jaGFyQXQoKytpKSkgPiAtMSl7LyogZW1wdHkgKi99IGJyZWFrO1xuXHRcdFx0XHRjYXNlICcgJzogKytpOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogKytpOyBicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdFNTRi5pc19kYXRlID0gZm10X2lzX2RhdGU7XG5cdGZ1bmN0aW9uIGV2YWxfZm10KGZtdCwgdiwgb3B0cywgZmxlbikge1xuXHRcdHZhciBvdXQgPSBbXSwgbyA9IFwiXCIsIGkgPSAwLCBjID0gXCJcIiwgbHN0PSd0JywgcSwgZHQsIGosIGNjO1xuXHRcdHZhciBocj0nSCc7XG5cdFx0LyogVG9rZW5pemUgKi9cblx0XHR3aGlsZShpIDwgZm10Lmxlbmd0aCkge1xuXHRcdFx0c3dpdGNoKChjID0gZm10LmNoYXJBdChpKSkpIHtcblx0XHRcdFx0Y2FzZSAnRyc6IC8qIEdlbmVyYWwgKi9cblx0XHRcdFx0XHRpZighaXNnZW5lcmFsKGZtdCwgaSkpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIGNoYXJhY3RlciAnICsgYyArICcgaW4gJyArZm10KTtcblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonRycsIHY6J0dlbmVyYWwnfTsgaSs9NzsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1wiJzogLyogTGl0ZXJhbCB0ZXh0ICovXG5cdFx0XHRcdFx0Zm9yKG89XCJcIjsoY2M9Zm10LmNoYXJDb2RlQXQoKytpKSkgIT09IDM0ICYmIGkgPCBmbXQubGVuZ3RoOykgbyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNjKTtcblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6b307ICsraTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1xcXFwnOiB2YXIgdyA9IGZtdC5jaGFyQXQoKytpKSwgdCA9ICh3ID09PSBcIihcIiB8fCB3ID09PSBcIilcIikgPyB3IDogJ3QnO1xuXHRcdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHt0OnQsIHY6d307ICsraTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ18nOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsIHY6XCIgXCJ9OyBpKz0yOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQCc6IC8qIFRleHQgUGxhY2Vob2xkZXIgKi9cblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonVCcsIHY6dn07ICsraTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0InOiBjYXNlICdiJzpcblx0XHRcdFx0XHRpZihmbXQuY2hhckF0KGkrMSkgPT09IFwiMVwiIHx8IGZtdC5jaGFyQXQoaSsxKSA9PT0gXCIyXCIpIHtcblx0XHRcdFx0XHRcdGlmKGR0PT1udWxsKSB7IGR0PXBhcnNlX2RhdGVfY29kZSh2LCBvcHRzLCBmbXQuY2hhckF0KGkrMSkgPT09IFwiMlwiKTsgaWYoZHQ9PW51bGwpIHJldHVybiBcIlwiOyB9XG5cdFx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonWCcsIHY6Zm10LnN1YnN0cihpLDIpfTsgbHN0ID0gYzsgaSs9MjsgYnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAnTSc6IGNhc2UgJ0QnOiBjYXNlICdZJzogY2FzZSAnSCc6IGNhc2UgJ1MnOiBjYXNlICdFJzpcblx0XHRcdFx0XHRjID0gYy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0Y2FzZSAnbSc6IGNhc2UgJ2QnOiBjYXNlICd5JzogY2FzZSAnaCc6IGNhc2UgJ3MnOiBjYXNlICdlJzogY2FzZSAnZyc6XG5cdFx0XHRcdFx0aWYodiA8IDApIHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdGlmKGR0PT1udWxsKSB7IGR0PXBhcnNlX2RhdGVfY29kZSh2LCBvcHRzKTsgaWYoZHQ9PW51bGwpIHJldHVybiBcIlwiOyB9XG5cdFx0XHRcdFx0byA9IGM7IHdoaWxlKCsraTxmbXQubGVuZ3RoICYmIGZtdC5jaGFyQXQoaSkudG9Mb3dlckNhc2UoKSA9PT0gYykgbys9Yztcblx0XHRcdFx0XHRpZihjID09PSAnbScgJiYgbHN0LnRvTG93ZXJDYXNlKCkgPT09ICdoJykgYyA9ICdNJztcblx0XHRcdFx0XHRpZihjID09PSAnaCcpIGMgPSBocjtcblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDpjLCB2Om99OyBsc3QgPSBjOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnQSc6XG5cdFx0XHRcdFx0cT17dDpjLCB2OlwiQVwifTtcblx0XHRcdFx0XHRpZihkdD09bnVsbCkgZHQ9cGFyc2VfZGF0ZV9jb2RlKHYsIG9wdHMpO1xuXHRcdFx0XHRcdGlmKGZtdC5zdWJzdHIoaSwgMykgPT09IFwiQS9QXCIpIHsgaWYoZHQhPW51bGwpIHEudiA9IGR0LkggPj0gMTIgPyBcIlBcIiA6IFwiQVwiOyBxLnQgPSAnVCc7IGhyPSdoJztpKz0zO31cblx0XHRcdFx0XHRlbHNlIGlmKGZtdC5zdWJzdHIoaSw1KSA9PT0gXCJBTS9QTVwiKSB7IGlmKGR0IT1udWxsKSBxLnYgPSBkdC5IID49IDEyID8gXCJQTVwiIDogXCJBTVwiOyBxLnQgPSAnVCc7IGkrPTU7IGhyPSdoJzsgfVxuXHRcdFx0XHRcdGVsc2UgeyBxLnQgPSBcInRcIjsgKytpOyB9XG5cdFx0XHRcdFx0aWYoZHQ9PW51bGwgJiYgcS50ID09PSAnVCcpIHJldHVybiBcIlwiO1xuXHRcdFx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHE7IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdbJzpcblx0XHRcdFx0XHRvID0gYztcblx0XHRcdFx0XHR3aGlsZShmbXQuY2hhckF0KGkrKykgIT09ICddJyAmJiBpIDwgZm10Lmxlbmd0aCkgbyArPSBmbXQuY2hhckF0KGkpO1xuXHRcdFx0XHRcdGlmKG8uc2xpY2UoLTEpICE9PSAnXScpIHRocm93ICd1bnRlcm1pbmF0ZWQgXCJbXCIgYmxvY2s6IHwnICsgbyArICd8Jztcblx0XHRcdFx0XHRpZihvLm1hdGNoKGFic3RpbWUpKSB7XG5cdFx0XHRcdFx0XHRpZihkdD09bnVsbCkgeyBkdD1wYXJzZV9kYXRlX2NvZGUodiwgb3B0cyk7IGlmKGR0PT1udWxsKSByZXR1cm4gXCJcIjsgfVxuXHRcdFx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J1onLCB2Om8udG9Mb3dlckNhc2UoKX07XG5cdFx0XHRcdFx0XHRsc3QgPSBvLmNoYXJBdCgxKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoby5pbmRleE9mKFwiJFwiKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRvID0gKG8ubWF0Y2goL1xcJChbXi1cXFtcXF1dKikvKXx8W10pWzFdfHxcIiRcIjtcblx0XHRcdFx0XHRcdGlmKCFmbXRfaXNfZGF0ZShmbXQpKSBvdXRbb3V0Lmxlbmd0aF0gPSB7dDondCcsdjpvfTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdC8qIE51bWJlcnMgKi9cblx0XHRcdFx0Y2FzZSAnLic6XG5cdFx0XHRcdFx0aWYoZHQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0byA9IGM7IHdoaWxlKChjPWZtdC5jaGFyQXQoKytpKSkgPT09IFwiMFwiKSBvICs9IGM7XG5cdFx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDoncycsIHY6b307IGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdGNhc2UgJzAnOiBjYXNlICcjJzpcblx0XHRcdFx0XHRvID0gYzsgd2hpbGUoKCsraSA8IGZtdC5sZW5ndGggJiYgXCIwIz8uLEUrLSVcIi5pbmRleE9mKGM9Zm10LmNoYXJBdChpKSkgPiAtMSkgfHwgKGM9PSdcXFxcJyAmJiBmbXQuY2hhckF0KGkrMSkgPT0gXCItXCIgJiYgaSA8IGZtdC5sZW5ndGggLSAyICYmIFwiMCNcIi5pbmRleE9mKGZtdC5jaGFyQXQoaSsyKSk+LTEpKSBvICs9IGM7XG5cdFx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J24nLCB2Om99OyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPyc6XG5cdFx0XHRcdFx0byA9IGM7IHdoaWxlKGZtdC5jaGFyQXQoKytpKSA9PT0gYykgbys9Yztcblx0XHRcdFx0XHRxPXt0OmMsIHY6b307IG91dFtvdXQubGVuZ3RoXSA9IHE7IGxzdCA9IGM7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICcqJzogKytpOyBpZihmbXQuY2hhckF0KGkpID09ICcgJyB8fCBmbXQuY2hhckF0KGkpID09ICcqJykgKytpOyBicmVhazsgLy8gKipcblx0XHRcdFx0Y2FzZSAnKCc6IGNhc2UgJyknOiBvdXRbb3V0Lmxlbmd0aF0gPSB7dDooZmxlbj09PTE/J3QnOmMpLCB2OmN9OyArK2k7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICcxJzogY2FzZSAnMic6IGNhc2UgJzMnOiBjYXNlICc0JzogY2FzZSAnNSc6IGNhc2UgJzYnOiBjYXNlICc3JzogY2FzZSAnOCc6IGNhc2UgJzknOlxuXHRcdFx0XHRcdG8gPSBjOyB3aGlsZShpIDwgZm10Lmxlbmd0aCAmJiBcIjAxMjM0NTY3ODlcIi5pbmRleE9mKGZtdC5jaGFyQXQoKytpKSkgPiAtMSkgbys9Zm10LmNoYXJBdChpKTtcblx0XHRcdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSB7dDonRCcsIHY6b307IGJyZWFrO1xuXHRcdFx0XHRjYXNlICcgJzogb3V0W291dC5sZW5ndGhdID0ge3Q6YywgdjpjfTsgKytpOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZihcIiwkLSsvKCk6IV4mJ357fTw+PeKCrGFjZmlqa2xvcHFydHV2d3h6XCIuaW5kZXhPZihjKSA9PT0gLTEpIHRocm93IG5ldyBFcnJvcigndW5yZWNvZ25pemVkIGNoYXJhY3RlciAnICsgYyArICcgaW4gJyArIGZtdCk7XG5cdFx0XHRcdFx0b3V0W291dC5sZW5ndGhdID0ge3Q6J3QnLCB2OmN9OyArK2k7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgYnQgPSAwLCBzczAgPSAwLCBzc207XG5cdFx0Zm9yKGk9b3V0Lmxlbmd0aC0xLCBsc3Q9J3QnOyBpID49IDA7IC0taSkge1xuXHRcdFx0c3dpdGNoKG91dFtpXS50KSB7XG5cdFx0XHRcdGNhc2UgJ2gnOiBjYXNlICdIJzogb3V0W2ldLnQgPSBocjsgbHN0PSdoJzsgaWYoYnQgPCAxKSBidCA9IDE7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdzJzpcblx0XHRcdFx0XHRpZigoc3NtPW91dFtpXS52Lm1hdGNoKC9cXC4wKyQvKSkpIHNzMD1NYXRoLm1heChzczAsc3NtWzBdLmxlbmd0aC0xKTtcblx0XHRcdFx0XHRpZihidCA8IDMpIGJ0ID0gMztcblx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdkJzogY2FzZSAneSc6IGNhc2UgJ00nOiBjYXNlICdlJzogbHN0PW91dFtpXS50OyBicmVhaztcblx0XHRcdFx0Y2FzZSAnbSc6IGlmKGxzdCA9PT0gJ3MnKSB7IG91dFtpXS50ID0gJ00nOyBpZihidCA8IDIpIGJ0ID0gMjsgfSBicmVhaztcblx0XHRcdFx0Y2FzZSAnWCc6IC8qaWYob3V0W2ldLnYgPT09IFwiQjJcIik7Ki9cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnWic6XG5cdFx0XHRcdFx0aWYoYnQgPCAxICYmIG91dFtpXS52Lm1hdGNoKC9bSGhdLykpIGJ0ID0gMTtcblx0XHRcdFx0XHRpZihidCA8IDIgJiYgb3V0W2ldLnYubWF0Y2goL1tNbV0vKSkgYnQgPSAyO1xuXHRcdFx0XHRcdGlmKGJ0IDwgMyAmJiBvdXRbaV0udi5tYXRjaCgvW1NzXS8pKSBidCA9IDM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHN3aXRjaChidCkge1xuXHRcdFx0Y2FzZSAwOiBicmVhaztcblx0XHRcdGNhc2UgMTpcblx0aWYoZHQudSA+PSAwLjUpIHsgZHQudSA9IDA7ICsrZHQuUzsgfVxuXHRcdFx0XHRpZihkdC5TID49ICA2MCkgeyBkdC5TID0gMDsgKytkdC5NOyB9XG5cdFx0XHRcdGlmKGR0Lk0gPj0gIDYwKSB7IGR0Lk0gPSAwOyArK2R0Lkg7IH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDI6XG5cdGlmKGR0LnUgPj0gMC41KSB7IGR0LnUgPSAwOyArK2R0LlM7IH1cblx0XHRcdFx0aWYoZHQuUyA+PSAgNjApIHsgZHQuUyA9IDA7ICsrZHQuTTsgfVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0LyogcmVwbGFjZSBmaWVsZHMgKi9cblx0XHR2YXIgbnN0ciA9IFwiXCIsIGpqO1xuXHRcdGZvcihpPTA7IGkgPCBvdXQubGVuZ3RoOyArK2kpIHtcblx0XHRcdHN3aXRjaChvdXRbaV0udCkge1xuXHRcdFx0XHRjYXNlICd0JzogY2FzZSAnVCc6IGNhc2UgJyAnOiBjYXNlICdEJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1gnOiBvdXRbaV0udiA9IFwiXCI7IG91dFtpXS50ID0gXCI7XCI7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdkJzogY2FzZSAnbSc6IGNhc2UgJ3knOiBjYXNlICdoJzogY2FzZSAnSCc6IGNhc2UgJ00nOiBjYXNlICdzJzogY2FzZSAnZSc6IGNhc2UgJ2InOiBjYXNlICdaJzpcblx0b3V0W2ldLnYgPSB3cml0ZV9kYXRlKG91dFtpXS50LmNoYXJDb2RlQXQoMCksIG91dFtpXS52LCBkdCwgc3MwKTtcblx0XHRcdFx0XHRvdXRbaV0udCA9ICd0JzsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ24nOiBjYXNlICcoJzogY2FzZSAnPyc6XG5cdFx0XHRcdFx0amogPSBpKzE7XG5cdFx0XHRcdFx0d2hpbGUob3V0W2pqXSAhPSBudWxsICYmIChcblx0XHRcdFx0XHRcdChjPW91dFtqal0udCkgPT09IFwiP1wiIHx8IGMgPT09IFwiRFwiIHx8XG5cdFx0XHRcdFx0XHQoKGMgPT09IFwiIFwiIHx8IGMgPT09IFwidFwiKSAmJiBvdXRbamorMV0gIT0gbnVsbCAmJiAob3V0W2pqKzFdLnQgPT09ICc/JyB8fCBvdXRbamorMV0udCA9PT0gXCJ0XCIgJiYgb3V0W2pqKzFdLnYgPT09ICcvJykpIHx8XG5cdFx0XHRcdFx0XHQob3V0W2ldLnQgPT09ICcoJyAmJiAoYyA9PT0gJyAnIHx8IGMgPT09ICduJyB8fCBjID09PSAnKScpKSB8fFxuXHRcdFx0XHRcdFx0KGMgPT09ICd0JyAmJiAob3V0W2pqXS52ID09PSAnLycgfHwgb3V0W2pqXS52ID09PSAnICcgJiYgb3V0W2pqKzFdICE9IG51bGwgJiYgb3V0W2pqKzFdLnQgPT0gJz8nKSlcblx0XHRcdFx0XHQpKSB7XG5cdFx0XHRcdFx0XHRvdXRbaV0udiArPSBvdXRbampdLnY7XG5cdFx0XHRcdFx0XHRvdXRbampdID0ge3Y6XCJcIiwgdDpcIjtcIn07ICsramo7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5zdHIgKz0gb3V0W2ldLnY7XG5cdFx0XHRcdFx0aSA9IGpqLTE7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdHJzogb3V0W2ldLnQgPSAndCc7IG91dFtpXS52ID0gZ2VuZXJhbF9mbXQodixvcHRzKTsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciB2diA9IFwiXCIsIG15diwgb3N0cjtcblx0XHRpZihuc3RyLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmKG5zdHIuY2hhckNvZGVBdCgwKSA9PSA0MCkgLyogJygnICovIHtcblx0XHRcdFx0bXl2ID0gKHY8MCYmbnN0ci5jaGFyQ29kZUF0KDApID09PSA0NSA/IC12IDogdik7XG5cdFx0XHRcdG9zdHIgPSB3cml0ZV9udW0oJygnLCBuc3RyLCBteXYpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bXl2ID0gKHY8MCAmJiBmbGVuID4gMSA/IC12IDogdik7XG5cdFx0XHRcdG9zdHIgPSB3cml0ZV9udW0oJ24nLCBuc3RyLCBteXYpO1xuXHRcdFx0XHRpZihteXYgPCAwICYmIG91dFswXSAmJiBvdXRbMF0udCA9PSAndCcpIHtcblx0XHRcdFx0XHRvc3RyID0gb3N0ci5zdWJzdHIoMSk7XG5cdFx0XHRcdFx0b3V0WzBdLnYgPSBcIi1cIiArIG91dFswXS52O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRqaj1vc3RyLmxlbmd0aC0xO1xuXHRcdFx0dmFyIGRlY3B0ID0gb3V0Lmxlbmd0aDtcblx0XHRcdGZvcihpPTA7IGkgPCBvdXQubGVuZ3RoOyArK2kpIGlmKG91dFtpXSAhPSBudWxsICYmIG91dFtpXS50ICE9ICd0JyAmJiBvdXRbaV0udi5pbmRleE9mKFwiLlwiKSA+IC0xKSB7IGRlY3B0ID0gaTsgYnJlYWs7IH1cblx0XHRcdHZhciBsYXN0aT1vdXQubGVuZ3RoO1xuXHRcdFx0aWYoZGVjcHQgPT09IG91dC5sZW5ndGggJiYgb3N0ci5pbmRleE9mKFwiRVwiKSA9PT0gLTEpIHtcblx0XHRcdFx0Zm9yKGk9b3V0Lmxlbmd0aC0xOyBpPj0gMDstLWkpIHtcblx0XHRcdFx0XHRpZihvdXRbaV0gPT0gbnVsbCB8fCAnbj8oJy5pbmRleE9mKG91dFtpXS50KSA9PT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKGpqPj1vdXRbaV0udi5sZW5ndGgtMSkgeyBqaiAtPSBvdXRbaV0udi5sZW5ndGg7IG91dFtpXS52ID0gb3N0ci5zdWJzdHIoamorMSwgb3V0W2ldLnYubGVuZ3RoKTsgfVxuXHRcdFx0XHRcdGVsc2UgaWYoamogPCAwKSBvdXRbaV0udiA9IFwiXCI7XG5cdFx0XHRcdFx0ZWxzZSB7IG91dFtpXS52ID0gb3N0ci5zdWJzdHIoMCwgamorMSk7IGpqID0gLTE7IH1cblx0XHRcdFx0XHRvdXRbaV0udCA9ICd0Jztcblx0XHRcdFx0XHRsYXN0aSA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoamo+PTAgJiYgbGFzdGk8b3V0Lmxlbmd0aCkgb3V0W2xhc3RpXS52ID0gb3N0ci5zdWJzdHIoMCxqaisxKSArIG91dFtsYXN0aV0udjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoZGVjcHQgIT09IG91dC5sZW5ndGggJiYgb3N0ci5pbmRleE9mKFwiRVwiKSA9PT0gLTEpIHtcblx0XHRcdFx0amogPSBvc3RyLmluZGV4T2YoXCIuXCIpLTE7XG5cdFx0XHRcdGZvcihpPWRlY3B0OyBpPj0gMDsgLS1pKSB7XG5cdFx0XHRcdFx0aWYob3V0W2ldID09IG51bGwgfHwgJ24/KCcuaW5kZXhPZihvdXRbaV0udCkgPT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRqPW91dFtpXS52LmluZGV4T2YoXCIuXCIpPi0xJiZpPT09ZGVjcHQ/b3V0W2ldLnYuaW5kZXhPZihcIi5cIiktMTpvdXRbaV0udi5sZW5ndGgtMTtcblx0XHRcdFx0XHR2diA9IG91dFtpXS52LnN1YnN0cihqKzEpO1xuXHRcdFx0XHRcdGZvcig7IGo+PTA7IC0taikge1xuXHRcdFx0XHRcdFx0aWYoamo+PTAgJiYgKG91dFtpXS52LmNoYXJBdChqKSA9PT0gXCIwXCIgfHwgb3V0W2ldLnYuY2hhckF0KGopID09PSBcIiNcIikpIHZ2ID0gb3N0ci5jaGFyQXQoamotLSkgKyB2djtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b3V0W2ldLnYgPSB2djtcblx0XHRcdFx0XHRvdXRbaV0udCA9ICd0Jztcblx0XHRcdFx0XHRsYXN0aSA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoamo+PTAgJiYgbGFzdGk8b3V0Lmxlbmd0aCkgb3V0W2xhc3RpXS52ID0gb3N0ci5zdWJzdHIoMCxqaisxKSArIG91dFtsYXN0aV0udjtcblx0XHRcdFx0amogPSBvc3RyLmluZGV4T2YoXCIuXCIpKzE7XG5cdFx0XHRcdGZvcihpPWRlY3B0OyBpPG91dC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdGlmKG91dFtpXSA9PSBudWxsIHx8ICgnbj8oJy5pbmRleE9mKG91dFtpXS50KSA9PT0gLTEgJiYgaSAhPT0gZGVjcHQpKSBjb250aW51ZTtcblx0XHRcdFx0XHRqPW91dFtpXS52LmluZGV4T2YoXCIuXCIpPi0xJiZpPT09ZGVjcHQ/b3V0W2ldLnYuaW5kZXhPZihcIi5cIikrMTowO1xuXHRcdFx0XHRcdHZ2ID0gb3V0W2ldLnYuc3Vic3RyKDAsaik7XG5cdFx0XHRcdFx0Zm9yKDsgajxvdXRbaV0udi5sZW5ndGg7ICsraikge1xuXHRcdFx0XHRcdFx0aWYoamo8b3N0ci5sZW5ndGgpIHZ2ICs9IG9zdHIuY2hhckF0KGpqKyspO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRvdXRbaV0udiA9IHZ2O1xuXHRcdFx0XHRcdG91dFtpXS50ID0gJ3QnO1xuXHRcdFx0XHRcdGxhc3RpID0gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IoaT0wOyBpPG91dC5sZW5ndGg7ICsraSkgaWYob3V0W2ldICE9IG51bGwgJiYgJ24oPycuaW5kZXhPZihvdXRbaV0udCk+LTEpIHtcblx0XHRcdG15diA9IChmbGVuID4xICYmIHYgPCAwICYmIGk+MCAmJiBvdXRbaS0xXS52ID09PSBcIi1cIiA/IC12OnYpO1xuXHRcdFx0b3V0W2ldLnYgPSB3cml0ZV9udW0ob3V0W2ldLnQsIG91dFtpXS52LCBteXYpO1xuXHRcdFx0b3V0W2ldLnQgPSAndCc7XG5cdFx0fVxuXHRcdHZhciByZXR2YWwgPSBcIlwiO1xuXHRcdGZvcihpPTA7IGkgIT09IG91dC5sZW5ndGg7ICsraSkgaWYob3V0W2ldICE9IG51bGwpIHJldHZhbCArPSBvdXRbaV0udjtcblx0XHRyZXR1cm4gcmV0dmFsO1xuXHR9XG5cdFNTRi5fZXZhbCA9IGV2YWxfZm10O1xuXHR2YXIgY2ZyZWdleCA9IC9cXFtbPTw+XS87XG5cdHZhciBjZnJlZ2V4MiA9IC9cXFsoWz08Pl0qKSgtP1xcZCtcXC4/XFxkKilcXF0vO1xuXHRmdW5jdGlvbiBjaGtjb25kKHYsIHJyKSB7XG5cdFx0aWYocnIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRcdHZhciB0aHJlc2ggPSBwYXJzZUZsb2F0KHJyWzJdKTtcblx0XHRzd2l0Y2gocnJbMV0pIHtcblx0XHRcdGNhc2UgXCI9XCI6ICBpZih2ID09IHRocmVzaCkgcmV0dXJuIHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcIj5cIjogIGlmKHYgPiAgdGhyZXNoKSByZXR1cm4gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiPFwiOiAgaWYodiA8ICB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgXCI8PlwiOiBpZih2ICE9IHRocmVzaCkgcmV0dXJuIHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcIj49XCI6IGlmKHYgPj0gdGhyZXNoKSByZXR1cm4gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiPD1cIjogaWYodiA8PSB0aHJlc2gpIHJldHVybiB0cnVlOyBicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGZ1bmN0aW9uIGNob29zZV9mbXQoZiwgdikge1xuXHRcdHZhciBmbXQgPSBzcGxpdF9mbXQoZik7XG5cdFx0dmFyIGwgPSBmbXQubGVuZ3RoLCBsYXQgPSBmbXRbbC0xXS5pbmRleE9mKFwiQFwiKTtcblx0XHRpZihsPDQgJiYgbGF0Pi0xKSAtLWw7XG5cdFx0aWYoZm10Lmxlbmd0aCA+IDQpIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBmaW5kIHJpZ2h0IGZvcm1hdCBmb3IgfFwiICsgZm10LmpvaW4oXCJ8XCIpICsgXCJ8XCIpO1xuXHRcdGlmKHR5cGVvZiB2ICE9PSBcIm51bWJlclwiKSByZXR1cm4gWzQsIGZtdC5sZW5ndGggPT09IDQgfHwgbGF0Pi0xP2ZtdFtmbXQubGVuZ3RoLTFdOlwiQFwiXTtcblx0XHRzd2l0Y2goZm10Lmxlbmd0aCkge1xuXHRcdFx0Y2FzZSAxOiBmbXQgPSBsYXQ+LTEgPyBbXCJHZW5lcmFsXCIsIFwiR2VuZXJhbFwiLCBcIkdlbmVyYWxcIiwgZm10WzBdXSA6IFtmbXRbMF0sIGZtdFswXSwgZm10WzBdLCBcIkBcIl07IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiBmbXQgPSBsYXQ+LTEgPyBbZm10WzBdLCBmbXRbMF0sIGZtdFswXSwgZm10WzFdXSA6IFtmbXRbMF0sIGZtdFsxXSwgZm10WzBdLCBcIkBcIl07IGJyZWFrO1xuXHRcdFx0Y2FzZSAzOiBmbXQgPSBsYXQ+LTEgPyBbZm10WzBdLCBmbXRbMV0sIGZtdFswXSwgZm10WzJdXSA6IFtmbXRbMF0sIGZtdFsxXSwgZm10WzJdLCBcIkBcIl07IGJyZWFrO1xuXHRcdFx0Y2FzZSA0OiBicmVhaztcblx0XHR9XG5cdFx0dmFyIGZmID0gdiA+IDAgPyBmbXRbMF0gOiB2IDwgMCA/IGZtdFsxXSA6IGZtdFsyXTtcblx0XHRpZihmbXRbMF0uaW5kZXhPZihcIltcIikgPT09IC0xICYmIGZtdFsxXS5pbmRleE9mKFwiW1wiKSA9PT0gLTEpIHJldHVybiBbbCwgZmZdO1xuXHRcdGlmKGZtdFswXS5tYXRjaChjZnJlZ2V4KSAhPSBudWxsIHx8IGZtdFsxXS5tYXRjaChjZnJlZ2V4KSAhPSBudWxsKSB7XG5cdFx0XHR2YXIgbTEgPSBmbXRbMF0ubWF0Y2goY2ZyZWdleDIpO1xuXHRcdFx0dmFyIG0yID0gZm10WzFdLm1hdGNoKGNmcmVnZXgyKTtcblx0XHRcdHJldHVybiBjaGtjb25kKHYsIG0xKSA/IFtsLCBmbXRbMF1dIDogY2hrY29uZCh2LCBtMikgPyBbbCwgZm10WzFdXSA6IFtsLCBmbXRbbTEgIT0gbnVsbCAmJiBtMiAhPSBudWxsID8gMiA6IDFdXTtcblx0XHR9XG5cdFx0cmV0dXJuIFtsLCBmZl07XG5cdH1cblx0ZnVuY3Rpb24gZm9ybWF0KGZtdCx2LG8pIHtcblx0XHRpZihvID09IG51bGwpIG8gPSB7fTtcblx0XHR2YXIgc2ZtdCA9IFwiXCI7XG5cdFx0c3dpdGNoKHR5cGVvZiBmbXQpIHtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0aWYoZm10ID09IFwibS9kL3l5XCIgJiYgby5kYXRlTkYpIHNmbXQgPSBvLmRhdGVORjtcblx0XHRcdFx0ZWxzZSBzZm10ID0gZm10O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJudW1iZXJcIjpcblx0XHRcdFx0aWYoZm10ID09IDE0ICYmIG8uZGF0ZU5GKSBzZm10ID0gby5kYXRlTkY7XG5cdFx0XHRcdGVsc2Ugc2ZtdCA9IChvLnRhYmxlICE9IG51bGwgPyAoby50YWJsZSkgOiB0YWJsZV9mbXQpW2ZtdF07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZihpc2dlbmVyYWwoc2ZtdCwwKSkgcmV0dXJuIGdlbmVyYWxfZm10KHYsIG8pO1xuXHRcdHZhciBmID0gY2hvb3NlX2ZtdChzZm10LCB2KTtcblx0XHRpZihpc2dlbmVyYWwoZlsxXSkpIHJldHVybiBnZW5lcmFsX2ZtdCh2LCBvKTtcblx0XHRpZih2ID09PSB0cnVlKSB2ID0gXCJUUlVFXCI7IGVsc2UgaWYodiA9PT0gZmFsc2UpIHYgPSBcIkZBTFNFXCI7XG5cdFx0ZWxzZSBpZih2ID09PSBcIlwiIHx8IHYgPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdFx0cmV0dXJuIGV2YWxfZm10KGZbMV0sIHYsIG8sIGZbMF0pO1xuXHR9XG5cdFNTRi5fdGFibGUgPSB0YWJsZV9mbXQ7XG5cdFNTRi5sb2FkID0gZnVuY3Rpb24gbG9hZF9lbnRyeShmbXQsIGlkeCkgeyB0YWJsZV9mbXRbaWR4XSA9IGZtdDsgfTtcblx0U1NGLmZvcm1hdCA9IGZvcm1hdDtcblx0U1NGLmdldF90YWJsZSA9IGZ1bmN0aW9uIGdldF90YWJsZSgpIHsgcmV0dXJuIHRhYmxlX2ZtdDsgfTtcblx0U1NGLmxvYWRfdGFibGUgPSBmdW5jdGlvbiBsb2FkX3RhYmxlKHRibCkgeyBmb3IodmFyIGk9MDsgaSE9MHgwMTg4OyArK2kpIGlmKHRibFtpXSAhPT0gdW5kZWZpbmVkKSBTU0YubG9hZCh0YmxbaV0sIGkpOyB9O1xuXHRTU0YuaW5pdF90YWJsZSA9IGluaXRfdGFibGU7XG5cdH07XG5cdG1ha2Vfc3NmKFNTRik7XG5cdC8qIG1hcCBmcm9tIHhsbWwgbmFtZWQgZm9ybWF0cyB0byBTU0YgVE9ETzogbG9jYWxpemUgKi9cblx0dmFyIFhMTUxGb3JtYXRNYXAvKntbc3RyaW5nXTpzdHJpbmd9Ki8gPSAoe1xuXHRcdFwiR2VuZXJhbCBOdW1iZXJcIjogXCJHZW5lcmFsXCIsXG5cdFx0XCJHZW5lcmFsIERhdGVcIjogU1NGLl90YWJsZVsyMl0sXG5cdFx0XCJMb25nIERhdGVcIjogXCJkZGRkLCBtbW1tIGRkLCB5eXl5XCIsXG5cdFx0XCJNZWRpdW0gRGF0ZVwiOiBTU0YuX3RhYmxlWzE1XSxcblx0XHRcIlNob3J0IERhdGVcIjogU1NGLl90YWJsZVsxNF0sXG5cdFx0XCJMb25nIFRpbWVcIjogU1NGLl90YWJsZVsxOV0sXG5cdFx0XCJNZWRpdW0gVGltZVwiOiBTU0YuX3RhYmxlWzE4XSxcblx0XHRcIlNob3J0IFRpbWVcIjogU1NGLl90YWJsZVsyMF0sXG5cdFx0XCJDdXJyZW5jeVwiOiAnXCIkXCIjLCMjMC4wMF8pO1tSZWRdXFxcXChcIiRcIiMsIyMwLjAwXFxcXCknLFxuXHRcdFwiRml4ZWRcIjogU1NGLl90YWJsZVsyXSxcblx0XHRcIlN0YW5kYXJkXCI6IFNTRi5fdGFibGVbNF0sXG5cdFx0XCJQZXJjZW50XCI6IFNTRi5fdGFibGVbMTBdLFxuXHRcdFwiU2NpZW50aWZpY1wiOiBTU0YuX3RhYmxlWzExXSxcblx0XHRcIlllcy9Ob1wiOiAnXCJZZXNcIjtcIlllc1wiO1wiTm9cIjtAJyxcblx0XHRcIlRydWUvRmFsc2VcIjogJ1wiVHJ1ZVwiO1wiVHJ1ZVwiO1wiRmFsc2VcIjtAJyxcblx0XHRcIk9uL09mZlwiOiAnXCJZZXNcIjtcIlllc1wiO1wiTm9cIjtAJ1xuXHR9KTtcblxuXHR2YXIgRE9fTk9UX0VYUE9SVF9DRkIgPSB0cnVlO1xuXHQvKiBjZmIuanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuXHQvKiB2aW06IHNldCB0cz0yOiAqL1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXG5cdC8qIFtNUy1DRkJdIHYyMDEzMDExOCAqL1xuXHR2YXIgQ0ZCID0gKGZ1bmN0aW9uIF9DRkIoKXtcblx0dmFyIGV4cG9ydHMgPSB7fTtcblx0ZXhwb3J0cy52ZXJzaW9uID0gJzAuMTEuMSc7XG5cdGZ1bmN0aW9uIHBhcnNlKGZpbGUpIHtcblx0dmFyIG12ZXIgPSAzOyAvLyBtYWpvciB2ZXJzaW9uXG5cdHZhciBzc3ogPSA1MTI7IC8vIHNlY3RvciBzaXplXG5cdHZhciBubWZzID0gMDsgLy8gbnVtYmVyIG9mIG1pbmkgRkFUIHNlY3RvcnNcblx0dmFyIG5kZnMgPSAwOyAvLyBudW1iZXIgb2YgRElGQVQgc2VjdG9yc1xuXHR2YXIgZGlyX3N0YXJ0ID0gMDsgLy8gZmlyc3QgZGlyZWN0b3J5IHNlY3RvciBsb2NhdGlvblxuXHR2YXIgbWluaWZhdF9zdGFydCA9IDA7IC8vIGZpcnN0IG1pbmkgRkFUIHNlY3RvciBsb2NhdGlvblxuXHR2YXIgZGlmYXRfc3RhcnQgPSAwOyAvLyBmaXJzdCBtaW5pIEZBVCBzZWN0b3IgbG9jYXRpb25cblxuXHR2YXIgZmF0X2FkZHJzID0gW107IC8vIGxvY2F0aW9ucyBvZiBGQVQgc2VjdG9yc1xuXG5cdC8qIFtNUy1DRkJdIDIuMiBDb21wb3VuZCBGaWxlIEhlYWRlciAqL1xuXHR2YXIgYmxvYiA9IGZpbGUuc2xpY2UoMCw1MTIpO1xuXHRwcmVwX2Jsb2IoYmxvYiwgMCk7XG5cblx0LyogbWFqb3IgdmVyc2lvbiAqL1xuXHR2YXIgbXYgPSBjaGVja19nZXRfbXZlcihibG9iKTtcblx0bXZlciA9IG12WzBdO1xuXHRzd2l0Y2gobXZlcikge1xuXHRcdGNhc2UgMzogc3N6ID0gNTEyOyBicmVhazsgY2FzZSA0OiBzc3ogPSA0MDk2OyBicmVhaztcblx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJNYWpvciBWZXJzaW9uOiBFeHBlY3RlZCAzIG9yIDQgc2F3IFwiICsgbXZlcik7XG5cdH1cblxuXHQvKiByZXByb2Nlc3MgaGVhZGVyICovXG5cdGlmKHNzeiAhPT0gNTEyKSB7IGJsb2IgPSBmaWxlLnNsaWNlKDAsc3N6KTsgcHJlcF9ibG9iKGJsb2IsIDI4IC8qIGJsb2IubCAqLyk7IH1cblx0LyogU2F2ZSBoZWFkZXIgZm9yIGZpbmFsIG9iamVjdCAqL1xuXHR2YXIgaGVhZGVyID0gZmlsZS5zbGljZSgwLHNzeik7XG5cblx0Y2hlY2tfc2hpZnRzKGJsb2IsIG12ZXIpO1xuXG5cdC8vIE51bWJlciBvZiBEaXJlY3RvcnkgU2VjdG9yc1xuXHR2YXIgbmRzID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdGlmKG12ZXIgPT09IDMgJiYgbmRzICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJyMgRGlyZWN0b3J5IFNlY3RvcnM6IEV4cGVjdGVkIDAgc2F3ICcgKyBuZHMpO1xuXG5cdC8vIE51bWJlciBvZiBGQVQgU2VjdG9yc1xuXHQvL3ZhciBuZnMgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblx0YmxvYi5sICs9IDQ7XG5cblx0Ly8gRmlyc3QgRGlyZWN0b3J5IFNlY3RvciBMb2NhdGlvblxuXHRkaXJfc3RhcnQgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblxuXHQvLyBUcmFuc2FjdGlvbiBTaWduYXR1cmVcblx0YmxvYi5sICs9IDQ7XG5cblx0Ly8gTWluaSBTdHJlYW0gQ3V0b2ZmIFNpemVcblx0YmxvYi5jaGsoJzAwMTAwMDAwJywgJ01pbmkgU3RyZWFtIEN1dG9mZiBTaXplOiAnKTtcblxuXHQvLyBGaXJzdCBNaW5pIEZBVCBTZWN0b3IgTG9jYXRpb25cblx0bWluaWZhdF9zdGFydCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXG5cdC8vIE51bWJlciBvZiBNaW5pIEZBVCBTZWN0b3JzXG5cdG5tZnMgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblxuXHQvLyBGaXJzdCBESUZBVCBzZWN0b3IgbG9jYXRpb25cblx0ZGlmYXRfc3RhcnQgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblxuXHQvLyBOdW1iZXIgb2YgRElGQVQgU2VjdG9yc1xuXHRuZGZzID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cblx0Ly8gR3JhYiBGQVQgU2VjdG9yIExvY2F0aW9uc1xuXHRmb3IodmFyIHEsIGogPSAwOyBqIDwgMTA5OyArK2opIHsgLyogMTA5ID0gKDUxMiAtIGJsb2IubCk+Pj4yOyAqL1xuXHRcdHEgPSBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKTtcblx0XHRpZihxPDApIGJyZWFrO1xuXHRcdGZhdF9hZGRyc1tqXSA9IHE7XG5cdH1cblxuXHQvKiogQnJlYWsgdGhlIGZpbGUgdXAgaW50byBzZWN0b3JzICovXG5cdHZhciBzZWN0b3JzID0gc2VjdG9yaWZ5KGZpbGUsIHNzeik7XG5cblx0c2xldXRoX2ZhdChkaWZhdF9zdGFydCwgbmRmcywgc2VjdG9ycywgc3N6LCBmYXRfYWRkcnMpO1xuXG5cdC8qKiBDaGFpbnMgKi9cblx0dmFyIHNlY3Rvcl9saXN0ID0gbWFrZV9zZWN0b3JfbGlzdChzZWN0b3JzLCBkaXJfc3RhcnQsIGZhdF9hZGRycywgc3N6KTtcblxuXHRzZWN0b3JfbGlzdFtkaXJfc3RhcnRdLm5hbWUgPSBcIiFEaXJlY3RvcnlcIjtcblx0aWYobm1mcyA+IDAgJiYgbWluaWZhdF9zdGFydCAhPT0gRU5ET0ZDSEFJTikgc2VjdG9yX2xpc3RbbWluaWZhdF9zdGFydF0ubmFtZSA9IFwiIU1pbmlGQVRcIjtcblx0c2VjdG9yX2xpc3RbZmF0X2FkZHJzWzBdXS5uYW1lID0gXCIhRkFUXCI7XG5cdHNlY3Rvcl9saXN0LmZhdF9hZGRycyA9IGZhdF9hZGRycztcblx0c2VjdG9yX2xpc3Quc3N6ID0gc3N6O1xuXG5cdC8qIFtNUy1DRkJdIDIuNi4xIENvbXBvdW5kIEZpbGUgRGlyZWN0b3J5IEVudHJ5ICovXG5cdHZhciBmaWxlcyA9IHt9LCBQYXRocyA9IFtdLCBGaWxlSW5kZXggPSBbXSwgRnVsbFBhdGhzID0gW10sIEZ1bGxQYXRoRGlyID0ge307XG5cdHJlYWRfZGlyZWN0b3J5KGRpcl9zdGFydCwgc2VjdG9yX2xpc3QsIHNlY3RvcnMsIFBhdGhzLCBubWZzLCBmaWxlcywgRmlsZUluZGV4KTtcblxuXHRidWlsZF9mdWxsX3BhdGhzKEZpbGVJbmRleCwgRnVsbFBhdGhEaXIsIEZ1bGxQYXRocywgUGF0aHMpO1xuXG5cdHZhciByb290X25hbWUgPSBQYXRocy5zaGlmdCgpO1xuXHRQYXRocy5yb290ID0gcm9vdF9uYW1lO1xuXG5cdC8qIFtNUy1DRkJdIDIuNi40IChVbmljb2RlIDMuMC4xIGNhc2UgY29udmVyc2lvbikgKi9cblx0dmFyIGZpbmRfcGF0aCA9IG1ha2VfZmluZF9wYXRoKEZ1bGxQYXRocywgUGF0aHMsIEZpbGVJbmRleCwgZmlsZXMsIHJvb3RfbmFtZSk7XG5cblx0cmV0dXJuIHtcblx0XHRyYXc6IHtoZWFkZXI6IGhlYWRlciwgc2VjdG9yczogc2VjdG9yc30sXG5cdFx0RmlsZUluZGV4OiBGaWxlSW5kZXgsXG5cdFx0RnVsbFBhdGhzOiBGdWxsUGF0aHMsXG5cdFx0RnVsbFBhdGhEaXI6IEZ1bGxQYXRoRGlyLFxuXHRcdGZpbmQ6IGZpbmRfcGF0aFxuXHR9O1xuXHR9IC8vIHBhcnNlXG5cblx0LyogW01TLUNGQl0gMi4yIENvbXBvdW5kIEZpbGUgSGVhZGVyIC0tIHJlYWQgdXAgdG8gbWFqb3IgdmVyc2lvbiAqL1xuXHRmdW5jdGlvbiBjaGVja19nZXRfbXZlcihibG9iKSB7XG5cdFx0Ly8gaGVhZGVyIHNpZ25hdHVyZSA4XG5cdFx0YmxvYi5jaGsoSEVBREVSX1NJR05BVFVSRSwgJ0hlYWRlciBTaWduYXR1cmU6ICcpO1xuXG5cdFx0Ly8gY2xzaWQgMTZcblx0XHRibG9iLmNoayhIRUFERVJfQ0xTSUQsICdDTFNJRDogJyk7XG5cblx0XHQvLyBtaW5vciB2ZXJzaW9uIDJcblx0XHR2YXIgbXZlciA9IGJsb2IucmVhZF9zaGlmdCgyLCAndScpO1xuXG5cdFx0cmV0dXJuIFtibG9iLnJlYWRfc2hpZnQoMiwndScpLCBtdmVyXTtcblx0fVxuXHRmdW5jdGlvbiBjaGVja19zaGlmdHMoYmxvYiwgbXZlcikge1xuXHRcdHZhciBzaGlmdCA9IDB4MDk7XG5cblx0XHQvLyBCeXRlIE9yZGVyXG5cdFx0Ly9ibG9iLmNoaygnZmVmZicsICdCeXRlIE9yZGVyOiAnKTsgLy8gbm90ZTogc29tZSB3cml0ZXJzIHB1dCAweGZmZmZcblx0XHRibG9iLmwgKz0gMjtcblxuXHRcdC8vIFNlY3RvciBTaGlmdFxuXHRcdHN3aXRjaCgoc2hpZnQgPSBibG9iLnJlYWRfc2hpZnQoMikpKSB7XG5cdFx0XHRjYXNlIDB4MDk6IGlmKG12ZXIgIT0gMykgdGhyb3cgbmV3IEVycm9yKCdTZWN0b3IgU2hpZnQ6IEV4cGVjdGVkIDkgc2F3ICcgKyBzaGlmdCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDBjOiBpZihtdmVyICE9IDQpIHRocm93IG5ldyBFcnJvcignU2VjdG9yIFNoaWZ0OiBFeHBlY3RlZCAxMiBzYXcgJyArIHNoaWZ0KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1NlY3RvciBTaGlmdDogRXhwZWN0ZWQgOSBvciAxMiBzYXcgJyArIHNoaWZ0KTtcblx0XHR9XG5cblx0XHQvLyBNaW5pIFNlY3RvciBTaGlmdFxuXHRcdGJsb2IuY2hrKCcwNjAwJywgJ01pbmkgU2VjdG9yIFNoaWZ0OiAnKTtcblxuXHRcdC8vIFJlc2VydmVkXG5cdFx0YmxvYi5jaGsoJzAwMDAwMDAwMDAwMCcsICdSZXNlcnZlZDogJyk7XG5cdH1cblxuXHQvKiogQnJlYWsgdGhlIGZpbGUgdXAgaW50byBzZWN0b3JzICovXG5cdGZ1bmN0aW9uIHNlY3RvcmlmeShmaWxlLCBzc3opIHtcblx0XHR2YXIgbnNlY3RvcnMgPSBNYXRoLmNlaWwoZmlsZS5sZW5ndGgvc3N6KS0xO1xuXHRcdHZhciBzZWN0b3JzID0gbmV3IEFycmF5KG5zZWN0b3JzKTtcblx0XHRmb3IodmFyIGk9MTsgaSA8IG5zZWN0b3JzOyArK2kpIHNlY3RvcnNbaS0xXSA9IGZpbGUuc2xpY2UoaSpzc3osKGkrMSkqc3N6KTtcblx0XHRzZWN0b3JzW25zZWN0b3JzLTFdID0gZmlsZS5zbGljZShuc2VjdG9ycypzc3opO1xuXHRcdHJldHVybiBzZWN0b3JzO1xuXHR9XG5cblx0LyogW01TLUNGQl0gMi42LjQgUmVkLUJsYWNrIFRyZWUgKi9cblx0ZnVuY3Rpb24gYnVpbGRfZnVsbF9wYXRocyhGSSwgRlBELCBGUCwgUGF0aHMpIHtcblx0XHR2YXIgaSA9IDAsIEwgPSAwLCBSID0gMCwgQyA9IDAsIGogPSAwLCBwbCA9IFBhdGhzLmxlbmd0aDtcblx0XHR2YXIgZGFkID0gbmV3IEFycmF5KHBsKSwgcSA9IG5ldyBBcnJheShwbCk7XG5cblx0XHRmb3IoOyBpIDwgcGw7ICsraSkgeyBkYWRbaV09cVtpXT1pOyBGUFtpXT1QYXRoc1tpXTsgfVxuXG5cdFx0Zm9yKDsgaiA8IHEubGVuZ3RoOyArK2opIHtcblx0XHRcdGkgPSBxW2pdO1xuXHRcdFx0TCA9IEZJW2ldLkw7IFIgPSBGSVtpXS5SOyBDID0gRklbaV0uQztcblx0XHRcdGlmKGRhZFtpXSA9PT0gaSkge1xuXHRcdFx0XHRpZihMICE9PSAtMSAvKk5PU1RSRUFNKi8gJiYgZGFkW0xdICE9PSBMKSBkYWRbaV0gPSBkYWRbTF07XG5cdFx0XHRcdGlmKFIgIT09IC0xICYmIGRhZFtSXSAhPT0gUikgZGFkW2ldID0gZGFkW1JdO1xuXHRcdFx0fVxuXHRcdFx0aWYoQyAhPT0gLTEgLypOT1NUUkVBTSovKSBkYWRbQ10gPSBpO1xuXHRcdFx0aWYoTCAhPT0gLTEpIHsgZGFkW0xdID0gZGFkW2ldOyBxLnB1c2goTCk7IH1cblx0XHRcdGlmKFIgIT09IC0xKSB7IGRhZFtSXSA9IGRhZFtpXTsgcS5wdXNoKFIpOyB9XG5cdFx0fVxuXHRcdGZvcihpPTE7IGkgIT09IHBsOyArK2kpIGlmKGRhZFtpXSA9PT0gaSkge1xuXHRcdFx0aWYoUiAhPT0gLTEgLypOT1NUUkVBTSovICYmIGRhZFtSXSAhPT0gUikgZGFkW2ldID0gZGFkW1JdO1xuXHRcdFx0ZWxzZSBpZihMICE9PSAtMSAmJiBkYWRbTF0gIT09IEwpIGRhZFtpXSA9IGRhZFtMXTtcblx0XHR9XG5cblx0XHRmb3IoaT0xOyBpIDwgcGw7ICsraSkge1xuXHRcdFx0aWYoRklbaV0udHlwZSA9PT0gMCAvKiB1bmtub3duICovKSBjb250aW51ZTtcblx0XHRcdGogPSBkYWRbaV07XG5cdFx0XHRpZihqID09PSAwKSBGUFtpXSA9IEZQWzBdICsgXCIvXCIgKyBGUFtpXTtcblx0XHRcdGVsc2Ugd2hpbGUoaiAhPT0gMCkge1xuXHRcdFx0XHRGUFtpXSA9IEZQW2pdICsgXCIvXCIgKyBGUFtpXTtcblx0XHRcdFx0aiA9IGRhZFtqXTtcblx0XHRcdH1cblx0XHRcdGRhZFtpXSA9IDA7XG5cdFx0fVxuXG5cdFx0RlBbMF0gKz0gXCIvXCI7XG5cdFx0Zm9yKGk9MTsgaSA8IHBsOyArK2kpIHtcblx0XHRcdGlmKEZJW2ldLnR5cGUgIT09IDIgLyogc3RyZWFtICovKSBGUFtpXSArPSBcIi9cIjtcblx0XHRcdEZQRFtGUFtpXV0gPSBGSVtpXTtcblx0XHR9XG5cdH1cblxuXHQvKiBbTVMtQ0ZCXSAyLjYuNCAqL1xuXHRmdW5jdGlvbiBtYWtlX2ZpbmRfcGF0aChGdWxsUGF0aHMsIFBhdGhzLCBGaWxlSW5kZXgsIGZpbGVzLCByb290X25hbWUpIHtcblx0XHR2YXIgVUNGdWxsUGF0aHMgPSBuZXcgQXJyYXkoRnVsbFBhdGhzLmxlbmd0aCk7XG5cdFx0dmFyIFVDUGF0aHMgPSBuZXcgQXJyYXkoUGF0aHMubGVuZ3RoKSwgaTtcblx0XHRmb3IoaSA9IDA7IGkgPCBGdWxsUGF0aHMubGVuZ3RoOyArK2kpIFVDRnVsbFBhdGhzW2ldID0gRnVsbFBhdGhzW2ldLnRvVXBwZXJDYXNlKCkucmVwbGFjZShjaHIwLCcnKS5yZXBsYWNlKGNocjEsJyEnKTtcblx0XHRmb3IoaSA9IDA7IGkgPCBQYXRocy5sZW5ndGg7ICsraSkgVUNQYXRoc1tpXSA9IFBhdGhzW2ldLnRvVXBwZXJDYXNlKCkucmVwbGFjZShjaHIwLCcnKS5yZXBsYWNlKGNocjEsJyEnKTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gZmluZF9wYXRoKHBhdGgpIHtcblx0XHRcdHZhciBrO1xuXHRcdFx0aWYocGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKiBcIi9cIiAqLykgeyBrPXRydWU7IHBhdGggPSByb290X25hbWUgKyBwYXRoOyB9XG5cdFx0XHRlbHNlIGsgPSBwYXRoLmluZGV4T2YoXCIvXCIpICE9PSAtMTtcblx0XHRcdHZhciBVQ1BhdGggPSBwYXRoLnRvVXBwZXJDYXNlKCkucmVwbGFjZShjaHIwLCcnKS5yZXBsYWNlKGNocjEsJyEnKTtcblx0XHRcdHZhciB3ID0gayA9PT0gdHJ1ZSA/IFVDRnVsbFBhdGhzLmluZGV4T2YoVUNQYXRoKSA6IFVDUGF0aHMuaW5kZXhPZihVQ1BhdGgpO1xuXHRcdFx0aWYodyA9PT0gLTEpIHJldHVybiBudWxsO1xuXHRcdFx0cmV0dXJuIGsgPT09IHRydWUgPyBGaWxlSW5kZXhbd10gOiBmaWxlc1tQYXRoc1t3XV07XG5cdFx0fTtcblx0fVxuXG5cdC8qKiBDaGFzZSBkb3duIHRoZSByZXN0IG9mIHRoZSBESUZBVCBjaGFpbiB0byBidWlsZCBhIGNvbXByZWhlbnNpdmUgbGlzdFxuXHQgICAgRElGQVQgY2hhaW5zIGJ5IHN0b3JpbmcgdGhlIG5leHQgc2VjdG9yIG51bWJlciBhcyB0aGUgbGFzdCAzMiBieXRlcyAqL1xuXHRmdW5jdGlvbiBzbGV1dGhfZmF0KGlkeCwgY250LCBzZWN0b3JzLCBzc3osIGZhdF9hZGRycykge1xuXHRcdHZhciBxO1xuXHRcdGlmKGlkeCA9PT0gRU5ET0ZDSEFJTikge1xuXHRcdFx0aWYoY250ICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJESUZBVCBjaGFpbiBzaG9ydGVyIHRoYW4gZXhwZWN0ZWRcIik7XG5cdFx0fSBlbHNlIGlmKGlkeCAhPT0gLTEgLypGUkVFU0VDVCovKSB7XG5cdFx0XHR2YXIgc2VjdG9yID0gc2VjdG9yc1tpZHhdLCBtID0gKHNzej4+PjIpLTE7XG5cdFx0XHRpZighc2VjdG9yKSByZXR1cm47XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbTsgKytpKSB7XG5cdFx0XHRcdGlmKChxID0gX19yZWFkSW50MzJMRShzZWN0b3IsaSo0KSkgPT09IEVORE9GQ0hBSU4pIGJyZWFrO1xuXHRcdFx0XHRmYXRfYWRkcnMucHVzaChxKTtcblx0XHRcdH1cblx0XHRcdHNsZXV0aF9mYXQoX19yZWFkSW50MzJMRShzZWN0b3Isc3N6LTQpLGNudCAtIDEsIHNlY3RvcnMsIHNzeiwgZmF0X2FkZHJzKTtcblx0XHR9XG5cdH1cblxuXHQvKiogRm9sbG93IHRoZSBsaW5rZWQgbGlzdCBvZiBzZWN0b3JzIGZvciBhIGdpdmVuIHN0YXJ0aW5nIHBvaW50ICovXG5cdGZ1bmN0aW9uIGdldF9zZWN0b3JfbGlzdChzZWN0b3JzLCBzdGFydCwgZmF0X2FkZHJzLCBzc3osIGNoa2QpIHtcblx0XHR2YXIgc2wgPSBzZWN0b3JzLmxlbmd0aDtcblx0XHR2YXIgYnVmLCBidWZfY2hhaW47XG5cdFx0aWYoIWNoa2QpIGNoa2QgPSBuZXcgQXJyYXkoc2wpO1xuXHRcdHZhciBtb2R1bHVzID0gc3N6IC0gMSwgaiwgamo7XG5cdFx0YnVmID0gW107XG5cdFx0YnVmX2NoYWluID0gW107XG5cdFx0Zm9yKGo9c3RhcnQ7IGo+PTA7KSB7XG5cdFx0XHRjaGtkW2pdID0gdHJ1ZTtcblx0XHRcdGJ1ZltidWYubGVuZ3RoXSA9IGo7XG5cdFx0XHRidWZfY2hhaW4ucHVzaChzZWN0b3JzW2pdKTtcblx0XHRcdHZhciBhZGRyID0gZmF0X2FkZHJzW01hdGguZmxvb3Ioaio0L3NzeildO1xuXHRcdFx0amogPSAoKGoqNCkgJiBtb2R1bHVzKTtcblx0XHRcdGlmKHNzeiA8IDQgKyBqaikgdGhyb3cgbmV3IEVycm9yKFwiRkFUIGJvdW5kYXJ5IGNyb3NzZWQ6IFwiICsgaiArIFwiIDQgXCIrc3N6KTtcblx0XHRcdGlmKCFzZWN0b3JzW2FkZHJdKSBicmVhaztcblx0XHRcdGogPSBfX3JlYWRJbnQzMkxFKHNlY3RvcnNbYWRkcl0sIGpqKTtcblx0XHR9XG5cdFx0cmV0dXJuIHtub2RlczogYnVmLCBkYXRhOl9fdG9CdWZmZXIoW2J1Zl9jaGFpbl0pfTtcblx0fVxuXG5cdC8qKiBDaGFzZSBkb3duIHRoZSBzZWN0b3IgbGlua2VkIGxpc3RzICovXG5cdGZ1bmN0aW9uIG1ha2Vfc2VjdG9yX2xpc3Qoc2VjdG9ycywgZGlyX3N0YXJ0LCBmYXRfYWRkcnMsIHNzeikge1xuXHRcdHZhciBzbCA9IHNlY3RvcnMubGVuZ3RoLCBzZWN0b3JfbGlzdCA9IG5ldyBBcnJheShzbCk7XG5cdFx0dmFyIGNoa2QgPSBuZXcgQXJyYXkoc2wpLCBidWYsIGJ1Zl9jaGFpbjtcblx0XHR2YXIgbW9kdWx1cyA9IHNzeiAtIDEsIGksIGosIGssIGpqO1xuXHRcdGZvcihpPTA7IGkgPCBzbDsgKytpKSB7XG5cdFx0XHRidWYgPSBbXTtcblx0XHRcdGsgPSAoaSArIGRpcl9zdGFydCk7IGlmKGsgPj0gc2wpIGstPXNsO1xuXHRcdFx0aWYoY2hrZFtrXSA9PT0gdHJ1ZSkgY29udGludWU7XG5cdFx0XHRidWZfY2hhaW4gPSBbXTtcblx0XHRcdGZvcihqPWs7IGo+PTA7KSB7XG5cdFx0XHRcdGNoa2Rbal0gPSB0cnVlO1xuXHRcdFx0XHRidWZbYnVmLmxlbmd0aF0gPSBqO1xuXHRcdFx0XHRidWZfY2hhaW4ucHVzaChzZWN0b3JzW2pdKTtcblx0XHRcdFx0dmFyIGFkZHIgPSBmYXRfYWRkcnNbTWF0aC5mbG9vcihqKjQvc3N6KV07XG5cdFx0XHRcdGpqID0gKChqKjQpICYgbW9kdWx1cyk7XG5cdFx0XHRcdGlmKHNzeiA8IDQgKyBqaikgdGhyb3cgbmV3IEVycm9yKFwiRkFUIGJvdW5kYXJ5IGNyb3NzZWQ6IFwiICsgaiArIFwiIDQgXCIrc3N6KTtcblx0XHRcdFx0aWYoIXNlY3RvcnNbYWRkcl0pIGJyZWFrO1xuXHRcdFx0XHRqID0gX19yZWFkSW50MzJMRShzZWN0b3JzW2FkZHJdLCBqaik7XG5cdFx0XHR9XG5cdFx0XHRzZWN0b3JfbGlzdFtrXSA9IHtub2RlczogYnVmLCBkYXRhOl9fdG9CdWZmZXIoW2J1Zl9jaGFpbl0pfTtcblx0XHR9XG5cdFx0cmV0dXJuIHNlY3Rvcl9saXN0O1xuXHR9XG5cblx0LyogW01TLUNGQl0gMi42LjEgQ29tcG91bmQgRmlsZSBEaXJlY3RvcnkgRW50cnkgKi9cblx0ZnVuY3Rpb24gcmVhZF9kaXJlY3RvcnkoZGlyX3N0YXJ0LCBzZWN0b3JfbGlzdCwgc2VjdG9ycywgUGF0aHMsIG5tZnMsIGZpbGVzLCBGaWxlSW5kZXgpIHtcblx0XHR2YXIgYmxvYjtcblx0XHR2YXIgbWluaWZhdF9zdG9yZSA9IDAsIHBsID0gKFBhdGhzLmxlbmd0aD8yOjApO1xuXHRcdHZhciBzZWN0b3IgPSBzZWN0b3JfbGlzdFtkaXJfc3RhcnRdLmRhdGE7XG5cdFx0dmFyIGkgPSAwLCBuYW1lbGVuID0gMCwgbmFtZSwgbywgY3RpbWUsIG10aW1lO1xuXHRcdGZvcig7IGkgPCBzZWN0b3IubGVuZ3RoOyBpKz0gMTI4KSB7XG5cdFx0XHRibG9iID0gc2VjdG9yLnNsaWNlKGksIGkrMTI4KTtcblx0XHRcdHByZXBfYmxvYihibG9iLCA2NCk7XG5cdFx0XHRuYW1lbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0aWYobmFtZWxlbiA9PT0gMCkgY29udGludWU7XG5cdFx0XHRuYW1lID0gX191dGYxNmxlKGJsb2IsMCxuYW1lbGVuLXBsKTtcblx0XHRcdFBhdGhzLnB1c2gobmFtZSk7XG5cdFx0XHRvID0gKHtcblx0XHRcdFx0bmFtZTogIG5hbWUsXG5cdFx0XHRcdHR5cGU6ICBibG9iLnJlYWRfc2hpZnQoMSksXG5cdFx0XHRcdGNvbG9yOiBibG9iLnJlYWRfc2hpZnQoMSksXG5cdFx0XHRcdEw6ICAgICBibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSxcblx0XHRcdFx0UjogICAgIGJsb2IucmVhZF9zaGlmdCg0LCAnaScpLFxuXHRcdFx0XHRDOiAgICAgYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyksXG5cdFx0XHRcdGNsc2lkOiBibG9iLnJlYWRfc2hpZnQoMTYpLFxuXHRcdFx0XHRzdGF0ZTogYmxvYi5yZWFkX3NoaWZ0KDQsICdpJylcblx0XHRcdH0pO1xuXHRcdFx0Y3RpbWUgPSBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRpZihjdGltZSAhPT0gMCkge1xuXHRcdFx0XHRvLmN0aW1lID0gY3RpbWU7IG8uY3QgPSByZWFkX2RhdGUoYmxvYiwgYmxvYi5sLTgpO1xuXHRcdFx0fVxuXHRcdFx0bXRpbWUgPSBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMikgKyBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRpZihtdGltZSAhPT0gMCkge1xuXHRcdFx0XHRvLm10aW1lID0gbXRpbWU7IG8ubXQgPSByZWFkX2RhdGUoYmxvYiwgYmxvYi5sLTgpO1xuXHRcdFx0fVxuXHRcdFx0by5zdGFydCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpO1xuXHRcdFx0by5zaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQsICdpJyk7XG5cdFx0XHRpZihvLnR5cGUgPT09IDUpIHsgLyogcm9vdCAqL1xuXHRcdFx0XHRtaW5pZmF0X3N0b3JlID0gby5zdGFydDtcblx0XHRcdFx0aWYobm1mcyA+IDAgJiYgbWluaWZhdF9zdG9yZSAhPT0gRU5ET0ZDSEFJTikgc2VjdG9yX2xpc3RbbWluaWZhdF9zdG9yZV0ubmFtZSA9IFwiIVN0cmVhbURhdGFcIjtcblx0XHRcdFx0LyptaW5pZmF0X3NpemUgPSBvLnNpemU7Ki9cblx0XHRcdH0gZWxzZSBpZihvLnNpemUgPj0gNDA5NiAvKiBNU0NTWiAqLykge1xuXHRcdFx0XHRvLnN0b3JhZ2UgPSAnZmF0Jztcblx0XHRcdFx0aWYoc2VjdG9yX2xpc3Rbby5zdGFydF0gPT09IHVuZGVmaW5lZCkgc2VjdG9yX2xpc3Rbby5zdGFydF0gPSBnZXRfc2VjdG9yX2xpc3Qoc2VjdG9ycywgby5zdGFydCwgc2VjdG9yX2xpc3QuZmF0X2FkZHJzLCBzZWN0b3JfbGlzdC5zc3opO1xuXHRcdFx0XHRzZWN0b3JfbGlzdFtvLnN0YXJ0XS5uYW1lID0gby5uYW1lO1xuXHRcdFx0XHRvLmNvbnRlbnQgPSBzZWN0b3JfbGlzdFtvLnN0YXJ0XS5kYXRhLnNsaWNlKDAsby5zaXplKTtcblx0XHRcdFx0cHJlcF9ibG9iKG8uY29udGVudCwgMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvLnN0b3JhZ2UgPSAnbWluaWZhdCc7XG5cdFx0XHRcdGlmKG1pbmlmYXRfc3RvcmUgIT09IEVORE9GQ0hBSU4gJiYgby5zdGFydCAhPT0gRU5ET0ZDSEFJTikge1xuXHRcdFx0XHRcdG8uY29udGVudCA9IHNlY3Rvcl9saXN0W21pbmlmYXRfc3RvcmVdLmRhdGEuc2xpY2Uoby5zdGFydCpNU1NaLG8uc3RhcnQqTVNTWitvLnNpemUpO1xuXHRcdFx0XHRcdHByZXBfYmxvYihvLmNvbnRlbnQsIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaWxlc1tuYW1lXSA9IG87XG5cdFx0XHRGaWxlSW5kZXgucHVzaChvKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkX2RhdGUoYmxvYiwgb2Zmc2V0KSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCggKCAoX19yZWFkVUludDMyTEUoYmxvYixvZmZzZXQrNCkvMWU3KSpNYXRoLnBvdygyLDMyKStfX3JlYWRVSW50MzJMRShibG9iLG9mZnNldCkvMWU3ICkgLSAxMTY0NDQ3MzYwMCkqMTAwMCk7XG5cdH1cblxuXHR2YXIgZnM7XG5cdGZ1bmN0aW9uIHJlYWRGaWxlU3luYyhmaWxlbmFtZSwgb3B0aW9ucykge1xuXHRcdGlmKGZzID09PSB1bmRlZmluZWQpIGZzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XHRyZXR1cm4gcGFyc2UoZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lKSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkU3luYyhibG9iLCBvcHRpb25zKSB7XG5cdFx0c3dpdGNoKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnR5cGUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudHlwZSA6IFwiYmFzZTY0XCIpIHtcblx0XHRcdGNhc2UgXCJmaWxlXCI6IHJldHVybiByZWFkRmlsZVN5bmMoYmxvYiwgb3B0aW9ucyk7XG5cdFx0XHRjYXNlIFwiYmFzZTY0XCI6IHJldHVybiBwYXJzZShzMmEoQmFzZTY0LmRlY29kZShibG9iKSksIG9wdGlvbnMpO1xuXHRcdFx0Y2FzZSBcImJpbmFyeVwiOiByZXR1cm4gcGFyc2UoczJhKGJsb2IpLCBvcHRpb25zKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcnNlKGJsb2IpO1xuXHR9XG5cblx0LyoqIENGQiBDb25zdGFudHMgKi9cblx0dmFyIE1TU1ogPSA2NDsgLyogTWluaSBTZWN0b3IgU2l6ZSA9IDE8PDYgKi9cblx0Ly92YXIgTVNDU1ogPSA0MDk2OyAvKiBNaW5pIFN0cmVhbSBDdXRvZmYgU2l6ZSAqL1xuXHQvKiAyLjEgQ29tcG91bmQgRmlsZSBTZWN0b3IgTnVtYmVycyBhbmQgVHlwZXMgKi9cblx0dmFyIEVORE9GQ0hBSU4gPSAtMjtcblx0LyogMi4yIENvbXBvdW5kIEZpbGUgSGVhZGVyICovXG5cdHZhciBIRUFERVJfU0lHTkFUVVJFID0gJ2QwY2YxMWUwYTFiMTFhZTEnO1xuXHR2YXIgSEVBREVSX0NMU0lEID0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJztcblx0dmFyIGNvbnN0cyA9IHtcblx0XHQvKiAyLjEgQ29tcHVuZCBGaWxlIFNlY3RvciBOdW1iZXJzIGFuZCBUeXBlcyAqL1xuXHRcdE1BWFJFR1NFQ1Q6IC02LFxuXHRcdERJRlNFQ1Q6IC00LFxuXHRcdEZBVFNFQ1Q6IC0zLFxuXHRcdEVORE9GQ0hBSU46IEVORE9GQ0hBSU4sXG5cdFx0RlJFRVNFQ1Q6IC0xLFxuXHRcdC8qIDIuMiBDb21wb3VuZCBGaWxlIEhlYWRlciAqL1xuXHRcdEhFQURFUl9TSUdOQVRVUkU6IEhFQURFUl9TSUdOQVRVUkUsXG5cdFx0SEVBREVSX01JTk9SX1ZFUlNJT046ICczZTAwJyxcblx0XHRNQVhSRUdTSUQ6IC02LFxuXHRcdE5PU1RSRUFNOiAtMSxcblx0XHRIRUFERVJfQ0xTSUQ6IEhFQURFUl9DTFNJRCxcblx0XHQvKiAyLjYuMSBDb21wb3VuZCBGaWxlIERpcmVjdG9yeSBFbnRyeSAqL1xuXHRcdEVudHJ5VHlwZXM6IFsndW5rbm93bicsJ3N0b3JhZ2UnLCdzdHJlYW0nLCdsb2NrYnl0ZXMnLCdwcm9wZXJ0eScsJ3Jvb3QnXVxuXHR9O1xuXG5cdGV4cG9ydHMucmVhZCA9IHJlYWRTeW5jO1xuXHRleHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cdGV4cG9ydHMudXRpbHMgPSB7XG5cdFx0UmVhZFNoaWZ0OiBSZWFkU2hpZnQsXG5cdFx0Q2hlY2tGaWVsZDogQ2hlY2tGaWVsZCxcblx0XHRwcmVwX2Jsb2I6IHByZXBfYmxvYixcblx0XHRiY29uY2F0OiBiY29uY2F0LFxuXHRcdGNvbnN0czogY29uc3RzXG5cdH07XG5cblx0cmV0dXJuIGV4cG9ydHM7XG5cdH0pKCk7XG5cblx0aWYoXCJmdW5jdGlvblwiICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRE9fTk9UX0VYUE9SVF9DRkIgPT09ICd1bmRlZmluZWQnKSB7IG1vZHVsZS5leHBvcnRzID0gQ0ZCOyB9XG5cdGZ1bmN0aW9uIGlzdmFsKHgpIHsgcmV0dXJuIHggIT09IHVuZGVmaW5lZCAmJiB4ICE9PSBudWxsOyB9XG5cblx0ZnVuY3Rpb24ga2V5cyhvKSB7IHJldHVybiBPYmplY3Qua2V5cyhvKTsgfVxuXG5cdGZ1bmN0aW9uIGV2ZXJ0X2tleShvYmosIGtleSkge1xuXHRcdHZhciBvID0gKFtdKSwgSyA9IGtleXMob2JqKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9PSBLLmxlbmd0aDsgKytpKSBvW29ialtLW2ldXVtrZXldXSA9IEtbaV07XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBldmVydChvYmopIHtcblx0XHR2YXIgbyA9IChbXSksIEsgPSBrZXlzKG9iaik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPT0gSy5sZW5ndGg7ICsraSkgb1tvYmpbS1tpXV1dID0gS1tpXTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGV2ZXJ0X251bShvYmopIHtcblx0XHR2YXIgbyA9IChbXSksIEsgPSBrZXlzKG9iaik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPT0gSy5sZW5ndGg7ICsraSkgb1tvYmpbS1tpXV1dID0gcGFyc2VJbnQoS1tpXSwxMCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBldmVydF9hcnIob2JqKSB7XG5cdFx0dmFyIG8gPSAoW10pLCBLID0ga2V5cyhvYmopO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT09IEsubGVuZ3RoOyArK2kpIHtcblx0XHRcdGlmKG9bb2JqW0tbaV1dXSA9PSBudWxsKSBvW29ialtLW2ldXV0gPSBbXTtcblx0XHRcdG9bb2JqW0tbaV1dXS5wdXNoKEtbaV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGZ1bmN0aW9uIGRhdGVudW0odiwgZGF0ZTE5MDQpIHtcblx0XHR2YXIgZXBvY2ggPSB2LmdldFRpbWUoKTtcblx0XHRpZihkYXRlMTkwNCkgZXBvY2ggKz0gMTQ2MioyNCo2MCo2MCoxMDAwO1xuXHRcdHJldHVybiAoZXBvY2ggKyAyMjA5MTYxNjAwMDAwKSAvICgyNCAqIDYwICogNjAgKiAxMDAwKTtcblx0fVxuXHRmdW5jdGlvbiBudW1kYXRlKHYpIHtcblx0XHR2YXIgZGF0ZSA9IFNTRi5wYXJzZV9kYXRlX2NvZGUodik7XG5cdFx0dmFyIHZhbCA9IG5ldyBEYXRlKCk7XG5cdFx0aWYoZGF0ZSA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgRGF0ZSBDb2RlOiBcIiArIHYpO1xuXHRcdHZhbC5zZXRVVENEYXRlKGRhdGUuZCk7XG5cdFx0dmFsLnNldFVUQ01vbnRoKGRhdGUubS0xKTtcblx0XHR2YWwuc2V0VVRDRnVsbFllYXIoZGF0ZS55KTtcblx0XHR2YWwuc2V0VVRDSG91cnMoZGF0ZS5IKTtcblx0XHR2YWwuc2V0VVRDTWludXRlcyhkYXRlLk0pO1xuXHRcdHZhbC5zZXRVVENTZWNvbmRzKGRhdGUuUyk7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qIElTTyA4NjAxIER1cmF0aW9uICovXG5cdGZ1bmN0aW9uIHBhcnNlX2lzb2R1cihzKSB7XG5cdFx0dmFyIHNlYyA9IDAsIG10ID0gMCwgdGltZSA9IGZhbHNlO1xuXHRcdHZhciBtID0gcy5tYXRjaCgvUChbMC05XFwuXStZKT8oWzAtOVxcLl0rTSk/KFswLTlcXC5dK0QpP1QoWzAtOVxcLl0rSCk/KFswLTlcXC5dK00pPyhbMC05XFwuXStTKT8vKTtcblx0XHRpZighbSkgdGhyb3cgbmV3IEVycm9yKFwifFwiICsgcyArIFwifCBpcyBub3QgYW4gSVNPODYwMSBEdXJhdGlvblwiKTtcblx0XHRmb3IodmFyIGkgPSAxOyBpICE9IG0ubGVuZ3RoOyArK2kpIHtcblx0XHRcdGlmKCFtW2ldKSBjb250aW51ZTtcblx0XHRcdG10ID0gMTtcblx0XHRcdGlmKGkgPiAzKSB0aW1lID0gdHJ1ZTtcblx0XHRcdHN3aXRjaChtW2ldLnN1YnN0cihtW2ldLmxlbmd0aC0xKSkge1xuXHRcdFx0XHRjYXNlICdZJzpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBJU08gRHVyYXRpb24gRmllbGQ6IFwiICsgbVtpXS5zdWJzdHIobVtpXS5sZW5ndGgtMSkpO1xuXHRcdFx0XHRjYXNlICdEJzogbXQgKj0gMjQ7XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdIJzogbXQgKj0gNjA7XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdNJzpcblx0XHRcdFx0XHRpZighdGltZSkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgSVNPIER1cmF0aW9uIEZpZWxkOiBNXCIpO1xuXHRcdFx0XHRcdGVsc2UgbXQgKj0gNjA7XG5cdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRjYXNlICdTJzogYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzZWMgKz0gbXQgKiBwYXJzZUludChtW2ldLCAxMCk7XG5cdFx0fVxuXHRcdHJldHVybiBzZWM7XG5cdH1cblxuXHR2YXIgZ29vZF9wZF9kYXRlID0gbmV3IERhdGUoJzIwMTctMDItMTlUMTk6MDY6MDkuMDAwWicpO1xuXHR2YXIgZ29vZF9wZCA9IGdvb2RfcGRfZGF0ZS5nZXRGdWxsWWVhcigpID09IDIwMTc7XG5cdGZ1bmN0aW9uIHBhcnNlRGF0ZShzdHIpIHtcblx0XHRpZihnb29kX3BkKSByZXR1cm4gbmV3IERhdGUoc3RyKTtcblx0XHRpZihzdHIgaW5zdGFuY2VvZiBEYXRlKSByZXR1cm4gc3RyO1xuXHRcdHZhciBuID0gc3RyLm1hdGNoKC9cXGQrL2cpfHxbXCIyMDE3XCIsXCIyXCIsXCIxOVwiLFwiMFwiLFwiMFwiLFwiMFwiXTtcblx0XHRyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoK25bMF0sICtuWzFdIC0gMSwgK25bMl0sICtuWzNdLCArbls0XSwgK25bNV0pKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNjMnN0cihhcnIpIHtcblx0XHR2YXIgbyA9IFwiXCI7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBhcnIubGVuZ3RoOyArK2kpIG8gKz0gU3RyaW5nLmZyb21DaGFyQ29kZShhcnJbaV0pO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gc3RyMmNjKHN0cikge1xuXHRcdHZhciBvID0gW107XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBzdHIubGVuZ3RoOyArK2kpIG8ucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBkdXAobykge1xuXHRcdGlmKHR5cGVvZiBKU09OICE9ICd1bmRlZmluZWQnICYmICFBcnJheS5pc0FycmF5KG8pKSByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSk7XG5cdFx0aWYodHlwZW9mIG8gIT0gJ29iamVjdCcgfHwgbyA9PSBudWxsKSByZXR1cm4gbztcblx0XHR2YXIgb3V0ID0ge307XG5cdFx0Zm9yKHZhciBrIGluIG8pIGlmKG8uaGFzT3duUHJvcGVydHkoaykpIG91dFtrXSA9IGR1cChvW2tdKTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gZmlsbChjLGwpIHsgdmFyIG8gPSBcIlwiOyB3aGlsZShvLmxlbmd0aCA8IGwpIG8rPWM7IHJldHVybiBvOyB9XG5cblx0LyogVE9ETzogc3RyZXNzIHRlc3QgKi9cblx0ZnVuY3Rpb24gZnV6enlkYXRlKHMpIHtcblx0XHR2YXIgbyA9IG5ldyBEYXRlKHMpLCBuID0gbmV3IERhdGUoTmFOKTtcblx0XHR2YXIgeSA9IG8uZ2V0WWVhcigpLCBtID0gby5nZXRNb250aCgpLCBkID0gby5nZXREYXRlKCk7XG5cdFx0aWYoaXNOYU4oZCkpIHJldHVybiBuO1xuXHRcdGlmKHkgPCAwIHx8IHkgPiA4MDk5KSByZXR1cm4gbjtcblx0XHRpZigobSA+IDAgfHwgZCA+IDEpICYmIHkgIT0gMTAxKSByZXR1cm4gbztcblx0XHRpZihzLnRvTG93ZXJDYXNlKCkubWF0Y2goL2phbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjLykpIHJldHVybiBvO1xuXHRcdGlmKCFzLm1hdGNoKC9bYS16QS1aXS8pKSByZXR1cm4gbztcblx0XHRyZXR1cm4gbjtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldGRhdGFzdHIoZGF0YSkge1xuXHRcdGlmKCFkYXRhKSByZXR1cm4gbnVsbDtcblx0XHRpZihkYXRhLmRhdGEpIHJldHVybiBkZWJvbShkYXRhLmRhdGEpO1xuXHRcdGlmKGRhdGEuYXNOb2RlQnVmZmVyICYmIGhhc19idWYpIHJldHVybiBkZWJvbShkYXRhLmFzTm9kZUJ1ZmZlcigpLnRvU3RyaW5nKCdiaW5hcnknKSk7XG5cdFx0aWYoZGF0YS5hc0JpbmFyeSkgcmV0dXJuIGRlYm9tKGRhdGEuYXNCaW5hcnkoKSk7XG5cdFx0aWYoZGF0YS5fZGF0YSAmJiBkYXRhLl9kYXRhLmdldENvbnRlbnQpIHJldHVybiBkZWJvbShjYzJzdHIoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZGF0YS5fZGF0YS5nZXRDb250ZW50KCksMCkpKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldGRhdGFiaW4oZGF0YSkge1xuXHRcdGlmKCFkYXRhKSByZXR1cm4gbnVsbDtcblx0XHRpZihkYXRhLmRhdGEpIHJldHVybiBjaGFyX2NvZGVzKGRhdGEuZGF0YSk7XG5cdFx0aWYoZGF0YS5hc05vZGVCdWZmZXIgJiYgaGFzX2J1ZikgcmV0dXJuIGRhdGEuYXNOb2RlQnVmZmVyKCk7XG5cdFx0aWYoZGF0YS5fZGF0YSAmJiBkYXRhLl9kYXRhLmdldENvbnRlbnQpIHtcblx0XHRcdHZhciBvID0gZGF0YS5fZGF0YS5nZXRDb250ZW50KCk7XG5cdFx0XHRpZih0eXBlb2YgbyA9PSBcInN0cmluZ1wiKSByZXR1cm4gc3RyMmNjKG8pO1xuXHRcdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG8pO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldGRhdGEoZGF0YSkgeyByZXR1cm4gKGRhdGEgJiYgZGF0YS5uYW1lLnNsaWNlKC00KSA9PT0gXCIuYmluXCIpID8gZ2V0ZGF0YWJpbihkYXRhKSA6IGdldGRhdGFzdHIoZGF0YSk7IH1cblxuXHQvKiBQYXJ0IDIgU2VjdGlvbiAxMC4xLjIgXCJNYXBwaW5nIENvbnRlbnQgVHlwZXNcIiBOYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSAqL1xuXHQvKiBPQVNJUyBkb2VzIG5vdCBjb21tZW50IG9uIGZpbGVuYW1lIGNhc2Ugc2Vuc2l0aXZpdHkgKi9cblx0ZnVuY3Rpb24gc2FmZWdldHppcGZpbGUoemlwLCBmaWxlKSB7XG5cdFx0dmFyIGsgPSBrZXlzKHppcC5maWxlcyk7XG5cdFx0dmFyIGYgPSBmaWxlLnRvTG93ZXJDYXNlKCksIGcgPSBmLnJlcGxhY2UoL1xcLy9nLCdcXFxcJyk7XG5cdFx0Zm9yKHZhciBpPTA7IGk8ay5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIG4gPSBrW2ldLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZihmID09IG4gfHwgZyA9PSBuKSByZXR1cm4gemlwLmZpbGVzW2tbaV1dO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldHppcGZpbGUoemlwLCBmaWxlKSB7XG5cdFx0dmFyIG8gPSBzYWZlZ2V0emlwZmlsZSh6aXAsIGZpbGUpO1xuXHRcdGlmKG8gPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgZmlsZSBcIiArIGZpbGUgKyBcIiBpbiB6aXBcIik7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBnZXR6aXBkYXRhKHppcCwgZmlsZSwgc2FmZSkge1xuXHRcdGlmKCFzYWZlKSByZXR1cm4gZ2V0ZGF0YShnZXR6aXBmaWxlKHppcCwgZmlsZSkpO1xuXHRcdGlmKCFmaWxlKSByZXR1cm4gbnVsbDtcblx0XHR0cnkgeyByZXR1cm4gZ2V0emlwZGF0YSh6aXAsIGZpbGUpOyB9IGNhdGNoKGUpIHsgcmV0dXJuIG51bGw7IH1cblx0fVxuXG5cdGZ1bmN0aW9uIGdldHppcHN0cih6aXAsIGZpbGUsIHNhZmUpIHtcblx0XHRpZighc2FmZSkgcmV0dXJuIGdldGRhdGFzdHIoZ2V0emlwZmlsZSh6aXAsIGZpbGUpKTtcblx0XHRpZighZmlsZSkgcmV0dXJuIG51bGw7XG5cdFx0dHJ5IHsgcmV0dXJuIGdldHppcHN0cih6aXAsIGZpbGUpOyB9IGNhdGNoKGUpIHsgcmV0dXJuIG51bGw7IH1cblx0fVxuXG5cdHZhciBfZnMsIGpzemlwO1xuXHQvKmdsb2JhbCBKU1ppcDp0cnVlICovXG5cdGlmKHR5cGVvZiBKU1ppcCAhPT0gJ3VuZGVmaW5lZCcpIGpzemlwID0gSlNaaXA7XG5cdGlmICh0cnVlKSB7XG5cdFx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0XHRpZih0eXBlb2YganN6aXAgPT09ICd1bmRlZmluZWQnKSBqc3ppcCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFx0XHRfZnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc29sdmVfcGF0aChwYXRoLCBiYXNlKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGJhc2Uuc3BsaXQoJy8nKTtcblx0XHRpZihiYXNlLnNsaWNlKC0xKSAhPSBcIi9cIikgcmVzdWx0LnBvcCgpOyAvLyBmb2xkZXIgcGF0aFxuXHRcdHZhciB0YXJnZXQgPSBwYXRoLnNwbGl0KCcvJyk7XG5cdFx0d2hpbGUgKHRhcmdldC5sZW5ndGggIT09IDApIHtcblx0XHRcdHZhciBzdGVwID0gdGFyZ2V0LnNoaWZ0KCk7XG5cdFx0XHRpZiAoc3RlcCA9PT0gJy4uJykgcmVzdWx0LnBvcCgpO1xuXHRcdFx0ZWxzZSBpZiAoc3RlcCAhPT0gJy4nKSByZXN1bHQucHVzaChzdGVwKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKCcvJyk7XG5cdH1cblx0dmFyIGF0dHJlZ2V4Zz0vKFteXCJcXHM/PlxcL10rKT0oKD86XCIpKFteXCJdKikoPzpcIil8KD86JykoW14nXSopKD86Jyl8KFteJ1wiPlxcc10rKSkvZztcblx0dmFyIHRhZ3JlZ2V4PS88W14+XSo+L2c7XG5cdHZhciBuc3JlZ2V4PS88XFx3KjovLCBuc3JlZ2V4MiA9IC88KFxcLz8pXFx3KzovO1xuXHRmdW5jdGlvbiBwYXJzZXhtbHRhZyh0YWcsIHNraXBfcm9vdCkge1xuXHRcdHZhciB6ID0gKHt9KTtcblx0XHR2YXIgZXEgPSAwLCBjID0gMDtcblx0XHRmb3IoOyBlcSAhPT0gdGFnLmxlbmd0aDsgKytlcSkgaWYoKGMgPSB0YWcuY2hhckNvZGVBdChlcSkpID09PSAzMiB8fCBjID09PSAxMCB8fCBjID09PSAxMykgYnJlYWs7XG5cdFx0aWYoIXNraXBfcm9vdCkgelswXSA9IHRhZy5zdWJzdHIoMCwgZXEpO1xuXHRcdGlmKGVxID09PSB0YWcubGVuZ3RoKSByZXR1cm4gejtcblx0XHR2YXIgbSA9IHRhZy5tYXRjaChhdHRyZWdleGcpLCBqPTAsIHY9XCJcIiwgaT0wLCBxPVwiXCIsIGNjPVwiXCIsIHF1b3QgPSAxO1xuXHRcdGlmKG0pIGZvcihpID0gMDsgaSAhPSBtLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRjYyA9IG1baV07XG5cdFx0XHRmb3IoYz0wOyBjICE9IGNjLmxlbmd0aDsgKytjKSBpZihjYy5jaGFyQ29kZUF0KGMpID09PSA2MSkgYnJlYWs7XG5cdFx0XHRxID0gY2Muc3Vic3RyKDAsYyk7XG5cdFx0XHRxdW90ID0gKChlcT1jYy5jaGFyQ29kZUF0KGMrMSkpID09IDM0IHx8IGVxID09IDM5KSA/IDEgOiAwO1xuXHRcdFx0diA9IGNjLnN1YnN0cmluZyhjKzErcXVvdCwgY2MubGVuZ3RoLXF1b3QpO1xuXHRcdFx0Zm9yKGo9MDtqIT1xLmxlbmd0aDsrK2opIGlmKHEuY2hhckNvZGVBdChqKSA9PT0gNTgpIGJyZWFrO1xuXHRcdFx0aWYoaj09PXEubGVuZ3RoKSB7XG5cdFx0XHRcdGlmKHEuaW5kZXhPZihcIl9cIikgPiAwKSBxID0gcS5zdWJzdHIoMCwgcS5pbmRleE9mKFwiX1wiKSk7IC8vIGZyb20gb2RzXG5cdFx0XHRcdHpbcV0gPSB2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHZhciBrID0gKGo9PT01ICYmIHEuc3Vic3RyKDAsNSk9PT1cInhtbG5zXCI/XCJ4bWxuc1wiOlwiXCIpK3Euc3Vic3RyKGorMSk7XG5cdFx0XHRcdGlmKHpba10gJiYgcS5zdWJzdHIoai0zLDMpID09IFwiZXh0XCIpIGNvbnRpbnVlOyAvLyBmcm9tIG9kc1xuXHRcdFx0XHR6W2tdID0gdjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHo7XG5cdH1cblx0ZnVuY3Rpb24gc3RyaXBfbnMoeCkgeyByZXR1cm4geC5yZXBsYWNlKG5zcmVnZXgyLCBcIjwkMVwiKTsgfVxuXG5cdHZhciBlbmNvZGluZ3MgPSB7XG5cdFx0JyZxdW90Oyc6ICdcIicsXG5cdFx0JyZhcG9zOyc6IFwiJ1wiLFxuXHRcdCcmZ3Q7JzogJz4nLFxuXHRcdCcmbHQ7JzogJzwnLFxuXHRcdCcmYW1wOyc6ICcmJ1xuXHR9O1xuXHR2YXIgcmVuY29kaW5nID0gZXZlcnQoZW5jb2RpbmdzKTtcblx0Ly92YXIgcmVuY3N0ciA9IFwiJjw+J1xcXCJcIi5zcGxpdChcIlwiKTtcblxuXHQvLyBUT0RPOiBDUCByZW1hcCAobmVlZCB0byByZWFkIGZpbGUgdmVyc2lvbiB0byBkZXRlcm1pbmUgT1MpXG5cdHZhciB1bmVzY2FwZXhtbCA9IChmdW5jdGlvbigpIHtcblx0XHQvKiAyMi40LjIuNCBic3RyIChCYXNpYyBTdHJpbmcpICovXG5cdFx0dmFyIGVuY3JlZ2V4ID0gLyYoPzpxdW90fGFwb3N8Z3R8bHR8YW1wfCN4PyhbXFxkYS1mQS1GXSspKTsvZywgY29kZXJlZ2V4ID0gL194KFtcXGRhLWZBLUZdezR9KV8vZztcblx0XHRyZXR1cm4gZnVuY3Rpb24gdW5lc2NhcGV4bWwodGV4dCkge1xuXHRcdFx0dmFyIHMgPSB0ZXh0ICsgJyc7XG5cdFx0XHRyZXR1cm4gcy5yZXBsYWNlKGVuY3JlZ2V4LCBmdW5jdGlvbigkJCwgJDEpIHsgcmV0dXJuIGVuY29kaW5nc1skJF18fFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoJDEsJCQuaW5kZXhPZihcInhcIik+LTE/MTY6MTApKXx8JCQ7IH0pLnJlcGxhY2UoY29kZXJlZ2V4LGZ1bmN0aW9uKG0sYykge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGMsMTYpKTt9KTtcblx0XHR9O1xuXHR9KSgpO1xuXG5cdHZhciBkZWNyZWdleD0vWyY8PidcIl0vZywgY2hhcmVnZXggPSAvW1xcdTAwMDAtXFx1MDAwOFxcdTAwMGItXFx1MDAxZl0vZztcblx0ZnVuY3Rpb24gZXNjYXBleG1sKHRleHQsIHhtbCl7XG5cdFx0dmFyIHMgPSB0ZXh0ICsgJyc7XG5cdFx0cmV0dXJuIHMucmVwbGFjZShkZWNyZWdleCwgZnVuY3Rpb24oeSkgeyByZXR1cm4gcmVuY29kaW5nW3ldOyB9KS5yZXBsYWNlKGNoYXJlZ2V4LGZ1bmN0aW9uKHMpIHsgcmV0dXJuIFwiX3hcIiArIChcIjAwMFwiK3MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KSArIFwiX1wiO30pO1xuXHR9XG5cdGZ1bmN0aW9uIGVzY2FwZXhtbHRhZyh0ZXh0KXsgcmV0dXJuIGVzY2FwZXhtbCh0ZXh0KS5yZXBsYWNlKC8gL2csXCJfeDAwMjBfXCIpOyB9XG5cblx0dmFyIGh0bWxjaGFyZWdleCA9IC9bXFx1MDAwMC1cXHUwMDFmXS9nO1xuXHRmdW5jdGlvbiBlc2NhcGVodG1sKHRleHQpe1xuXHRcdHZhciBzID0gdGV4dCArICcnO1xuXHRcdHJldHVybiBzLnJlcGxhY2UoZGVjcmVnZXgsIGZ1bmN0aW9uKHkpIHsgcmV0dXJuIHJlbmNvZGluZ1t5XTsgfSkucmVwbGFjZShodG1sY2hhcmVnZXgsZnVuY3Rpb24ocykgeyByZXR1cm4gXCImI3hcIiArIChcIjAwMFwiK3MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KSArIFwiO1wiOyB9KTtcblx0fVxuXG5cdC8qIFRPRE86IGhhbmRsZSBjb2RlcGFnZXMgKi9cblx0dmFyIHhsbWxfZml4c3RyID0gKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbnRyZWdleCA9IC8mIyhcXGQrKTsvZztcblx0XHRmdW5jdGlvbiBlbnRyZXBsKCQkLCQxKSB7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCQxLDEwKSk7IH1cblx0XHRyZXR1cm4gZnVuY3Rpb24geGxtbF9maXhzdHIoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZShlbnRyZWdleCxlbnRyZXBsKTsgfTtcblx0fSkoKTtcblx0dmFyIHhsbWxfdW5maXhzdHIgPSAoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHhsbWxfdW5maXhzdHIoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZSgvKFxcclxcbnxbXFxyXFxuXSkvZyxcIlxcJiMxMDtcIik7IH07XG5cdH0pKCk7XG5cblx0ZnVuY3Rpb24gcGFyc2V4bWxib29sKHZhbHVlLCB0YWcpIHtcblx0XHRzd2l0Y2godmFsdWUpIHtcblx0XHRcdGNhc2UgJzEnOiBjYXNlICd0cnVlJzogY2FzZSAnVFJVRSc6IHJldHVybiB0cnVlO1xuXHRcdFx0LyogY2FzZSAnMCc6IGNhc2UgJ2ZhbHNlJzogY2FzZSAnRkFMU0UnOiovXG5cdFx0XHRkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHV0ZjhyZWFkID0gZnVuY3Rpb24gdXRmOHJlYWRhKG9yaWcpIHtcblx0XHR2YXIgb3V0ID0gXCJcIiwgaSA9IDAsIGMgPSAwLCBkID0gMCwgZSA9IDAsIGYgPSAwLCB3ID0gMDtcblx0XHR3aGlsZSAoaSA8IG9yaWcubGVuZ3RoKSB7XG5cdFx0XHRjID0gb3JpZy5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0XHRpZiAoYyA8IDEyOCkgeyBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTsgY29udGludWU7IH1cblx0XHRcdGQgPSBvcmlnLmNoYXJDb2RlQXQoaSsrKTtcblx0XHRcdGlmIChjPjE5MSAmJiBjPDIyNCkgeyBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAzMSkgPDwgNikgfCAoZCAmIDYzKSk7IGNvbnRpbnVlOyB9XG5cdFx0XHRlID0gb3JpZy5jaGFyQ29kZUF0KGkrKyk7XG5cdFx0XHRpZiAoYyA8IDI0MCkgeyBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAxNSkgPDwgMTIpIHwgKChkICYgNjMpIDw8IDYpIHwgKGUgJiA2MykpOyBjb250aW51ZTsgfVxuXHRcdFx0ZiA9IG9yaWcuY2hhckNvZGVBdChpKyspO1xuXHRcdFx0dyA9ICgoKGMgJiA3KSA8PCAxOCkgfCAoKGQgJiA2MykgPDwgMTIpIHwgKChlICYgNjMpIDw8IDYpIHwgKGYgJiA2MykpLTY1NTM2O1xuXHRcdFx0b3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKCh3Pj4+MTApJjEwMjMpKTtcblx0XHRcdG91dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4REMwMCArICh3JjEwMjMpKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dDtcblx0fTtcblxuXG5cdGlmKGhhc19idWYpIHtcblx0XHR2YXIgdXRmOHJlYWRiID0gZnVuY3Rpb24gdXRmOHJlYWRiKGRhdGEpIHtcblx0XHRcdHZhciBvdXQgPSBuZXcgQnVmZmVyKDIqZGF0YS5sZW5ndGgpLCB3LCBpLCBqID0gMSwgayA9IDAsIHd3PTAsIGM7XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSs9aikge1xuXHRcdFx0XHRqID0gMTtcblx0XHRcdFx0aWYoKGM9ZGF0YS5jaGFyQ29kZUF0KGkpKSA8IDEyOCkgdyA9IGM7XG5cdFx0XHRcdGVsc2UgaWYoYyA8IDIyNCkgeyB3ID0gKGMmMzEpKjY0KyhkYXRhLmNoYXJDb2RlQXQoaSsxKSY2Myk7IGo9MjsgfVxuXHRcdFx0XHRlbHNlIGlmKGMgPCAyNDApIHsgdz0oYyYxNSkqNDA5NisoZGF0YS5jaGFyQ29kZUF0KGkrMSkmNjMpKjY0KyhkYXRhLmNoYXJDb2RlQXQoaSsyKSY2Myk7IGo9MzsgfVxuXHRcdFx0XHRlbHNlIHsgaiA9IDQ7XG5cdFx0XHRcdFx0dyA9IChjICYgNykqMjYyMTQ0KyhkYXRhLmNoYXJDb2RlQXQoaSsxKSY2MykqNDA5NisoZGF0YS5jaGFyQ29kZUF0KGkrMikmNjMpKjY0KyhkYXRhLmNoYXJDb2RlQXQoaSszKSY2Myk7XG5cdFx0XHRcdFx0dyAtPSA2NTUzNjsgd3cgPSAweEQ4MDAgKyAoKHc+Pj4xMCkmMTAyMyk7IHcgPSAweERDMDAgKyAodyYxMDIzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih3dyAhPT0gMCkgeyBvdXRbaysrXSA9IHd3JjI1NTsgb3V0W2srK10gPSB3dz4+Pjg7IHd3ID0gMDsgfVxuXHRcdFx0XHRvdXRbaysrXSA9IHclMjU2OyBvdXRbaysrXSA9IHc+Pj44O1xuXHRcdFx0fVxuXHRcdFx0b3V0Lmxlbmd0aCA9IGs7XG5cdFx0XHRyZXR1cm4gb3V0LnRvU3RyaW5nKCd1Y3MyJyk7XG5cdFx0fTtcblx0XHR2YXIgY29ycHVzID0gXCJmb28gYmFyIGJhelxcdTAwZTJcXHUwMDk4XFx1MDA4M1xcdTAwZjBcXHUwMDlmXFx1MDA4ZFxcdTAwYTNcIjtcblx0XHRpZih1dGY4cmVhZChjb3JwdXMpID09IHV0ZjhyZWFkYihjb3JwdXMpKSB1dGY4cmVhZCA9IHV0ZjhyZWFkYjtcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdHZhciB1dGY4cmVhZGMgPSBmdW5jdGlvbiB1dGY4cmVhZGMoZGF0YSkgeyByZXR1cm4gQnVmZmVyKGRhdGEsICdiaW5hcnknKS50b1N0cmluZygndXRmOCcpOyB9O1xuXHRcdGlmKHV0ZjhyZWFkKGNvcnB1cykgPT0gdXRmOHJlYWRjKGNvcnB1cykpIHV0ZjhyZWFkID0gdXRmOHJlYWRjO1xuXHR9XG5cblx0Ly8gbWF0Y2hlcyA8Zm9vPi4uLjwvZm9vPiBleHRyYWN0cyBjb250ZW50XG5cdHZhciBtYXRjaHRhZyA9IChmdW5jdGlvbigpIHtcblx0XHR2YXIgbXRjYWNoZSA9ICh7fSk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIG1hdGNodGFnKGYsZykge1xuXHRcdFx0dmFyIHQgPSBmK1wifFwiKyhnfHxcIlwiKTtcblx0XHRcdGlmKG10Y2FjaGVbdF0pIHJldHVybiBtdGNhY2hlW3RdO1xuXHRcdFx0cmV0dXJuIChtdGNhY2hlW3RdID0gbmV3IFJlZ0V4cCgnPCg/OlxcXFx3KzopPycrZisnKD86IHhtbDpzcGFjZT1cInByZXNlcnZlXCIpPyg/OltePl0qKT4oW15cXHUyNjAzXSopPC8oPzpcXFxcdys6KT8nK2YrJz4nLCgoZ3x8XCJcIikpKSk7XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgdnRyZWdleCA9IChmdW5jdGlvbigpeyB2YXIgdnRfY2FjaGUgPSB7fTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gdnRfcmVnZXgoYnQpIHtcblx0XHRcdGlmKHZ0X2NhY2hlW2J0XSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdnRfY2FjaGVbYnRdO1xuXHRcdFx0cmV0dXJuICh2dF9jYWNoZVtidF0gPSBuZXcgUmVnRXhwKFwiPCg/OnZ0Oik/XCIgKyBidCArIFwiPiguKj8pPC8oPzp2dDopP1wiICsgYnQgKyBcIj5cIiwgJ2cnKSApO1xuXHR9O30pKCk7XG5cdHZhciB2dHZyZWdleCA9IC88XFwvPyg/OnZ0Oik/dmFyaWFudD4vZywgdnRtcmVnZXggPSAvPCg/OnZ0OikoW14+XSopPiguKik8Lztcblx0ZnVuY3Rpb24gcGFyc2VWZWN0b3IoZGF0YSkge1xuXHRcdHZhciBoID0gcGFyc2V4bWx0YWcoZGF0YSk7XG5cblx0XHR2YXIgbWF0Y2hlcyA9IGRhdGEubWF0Y2godnRyZWdleChoLmJhc2VUeXBlKSl8fFtdO1xuXHRcdGlmKG1hdGNoZXMubGVuZ3RoICE9IGguc2l6ZSkgdGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCB2ZWN0b3IgbGVuZ3RoIFwiICsgbWF0Y2hlcy5sZW5ndGggKyBcIiAhPSBcIiArIGguc2l6ZSk7XG5cdFx0dmFyIHJlcyA9IFtdO1xuXHRcdG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0XHR2YXIgdiA9IHgucmVwbGFjZSh2dHZyZWdleCxcIlwiKS5tYXRjaCh2dG1yZWdleCk7XG5cdFx0XHRyZXMucHVzaCh7djp1dGY4cmVhZCh2WzJdKSwgdDp2WzFdfSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHJlcztcblx0fVxuXG5cdHZhciB3dHJlZ2V4ID0gLyheXFxzfFxccyR8XFxuKS87XG5cdGZ1bmN0aW9uIHdyaXRldGFnKGYsZykge3JldHVybiAnPCcgKyBmICsgKGcubWF0Y2god3RyZWdleCk/JyB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiJyA6IFwiXCIpICsgJz4nICsgZyArICc8LycgKyBmICsgJz4nO31cblxuXHRmdW5jdGlvbiB3eHRfaGVscGVyKGgpIHsgcmV0dXJuIGtleXMoaCkubWFwKGZ1bmN0aW9uKGspIHsgcmV0dXJuIFwiIFwiICsgayArICc9XCInICsgaFtrXSArICdcIic7fSkuam9pbihcIlwiKTsgfVxuXHRmdW5jdGlvbiB3cml0ZXh0YWcoZixnLGgpIHsgcmV0dXJuICc8JyArIGYgKyAoaXN2YWwoaCkgPyB3eHRfaGVscGVyKGgpIDogXCJcIikgKyAoaXN2YWwoZykgPyAoZy5tYXRjaCh3dHJlZ2V4KT8nIHhtbDpzcGFjZT1cInByZXNlcnZlXCInIDogXCJcIikgKyAnPicgKyBnICsgJzwvJyArIGYgOiBcIi9cIikgKyAnPic7fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3czY2R0ZihkLCB0KSB7IHRyeSB7IHJldHVybiBkLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuXFxkKi8sXCJcIik7IH0gY2F0Y2goZSkgeyBpZih0KSB0aHJvdyBlOyB9IHJldHVybiBcIlwiOyB9XG5cblx0ZnVuY3Rpb24gd3JpdGVfdnQocykge1xuXHRcdHN3aXRjaCh0eXBlb2Ygcykge1xuXHRcdFx0Y2FzZSAnc3RyaW5nJzogcmV0dXJuIHdyaXRleHRhZygndnQ6bHB3c3RyJywgcyk7XG5cdFx0XHRjYXNlICdudW1iZXInOiByZXR1cm4gd3JpdGV4dGFnKChzfDApPT1zPyd2dDppNCc6J3Z0OnI4JywgU3RyaW5nKHMpKTtcblx0XHRcdGNhc2UgJ2Jvb2xlYW4nOiByZXR1cm4gd3JpdGV4dGFnKCd2dDpib29sJyxzPyd0cnVlJzonZmFsc2UnKTtcblx0XHR9XG5cdFx0aWYocyBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB3cml0ZXh0YWcoJ3Z0OmZpbGV0aW1lJywgd3JpdGVfdzNjZHRmKHMpKTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gc2VyaWFsaXplIFwiICsgcyk7XG5cdH1cblxuXHR2YXIgWE1MX0hFQURFUiA9ICc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiIHN0YW5kYWxvbmU9XCJ5ZXNcIj8+XFxyXFxuJztcblx0dmFyIFhNTE5TID0gKHtcblx0XHQnZGMnOiAnaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8nLFxuXHRcdCdkY3Rlcm1zJzogJ2h0dHA6Ly9wdXJsLm9yZy9kYy90ZXJtcy8nLFxuXHRcdCdkY21pdHlwZSc6ICdodHRwOi8vcHVybC5vcmcvZGMvZGNtaXR5cGUvJyxcblx0XHQnbXgnOiAnaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9vZmZpY2UvbWFjL2V4Y2VsLzIwMDgvbWFpbicsXG5cdFx0J3InOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcycsXG5cdFx0J3Nqcyc6ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3NoZWV0anMvY29yZS1wcm9wZXJ0aWVzJyxcblx0XHQndnQnOiAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvZG9jUHJvcHNWVHlwZXMnLFxuXHRcdCd4c2knOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UnLFxuXHRcdCd4c2QnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEnXG5cdH0pO1xuXG5cdFhNTE5TLm1haW4gPSBbXG5cdFx0J2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9zcHJlYWRzaGVldG1sLzIwMDYvbWFpbicsXG5cdFx0J2h0dHA6Ly9wdXJsLm9jbGMub3JnL29veG1sL3NwcmVhZHNoZWV0bWwvbWFpbicsXG5cdFx0J2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2V4Y2VsLzIwMDYvbWFpbicsXG5cdFx0J2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlL2V4Y2VsLzIwMDYvMidcblx0XTtcblxuXHR2YXIgWExNTE5TID0gKHtcblx0XHQnbyc6ICAgICd1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UnLFxuXHRcdCd4JzogICAgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOmV4Y2VsJyxcblx0XHQnc3MnOiAgICd1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpzcHJlYWRzaGVldCcsXG5cdFx0J2R0JzogICAndXVpZDpDMkY0MTAxMC02NUIzLTExZDEtQTI5Ri0wMEFBMDBDMTQ4ODInLFxuXHRcdCdtdic6ICAgJ2h0dHA6Ly9tYWNWbWxTY2hlbWFVcmknLFxuXHRcdCd2JzogICAgJ3VybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206dm1sJyxcblx0XHQnaHRtbCc6ICdodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMtaHRtbDQwJ1xuXHR9KTtcblx0ZnVuY3Rpb24gcmVhZF9kb3VibGVfbGUoYiwgaWR4KSB7XG5cdFx0dmFyIHMgPSAxIC0gMiAqIChiW2lkeCArIDddID4+PiA3KTtcblx0XHR2YXIgZSA9ICgoYltpZHggKyA3XSAmIDB4N2YpIDw8IDQpICsgKChiW2lkeCArIDZdID4+PiA0KSAmIDB4MGYpO1xuXHRcdHZhciBtID0gKGJbaWR4KzZdJjB4MGYpO1xuXHRcdGZvcih2YXIgaSA9IDU7IGkgPj0gMDsgLS1pKSBtID0gbSAqIDI1NiArIGJbaWR4ICsgaV07XG5cdFx0aWYoZSA9PSAweDdmZikgcmV0dXJuIG0gPT0gMCA/IHMgKiBJbmZpbml0eSA6IE5hTjtcblx0XHRpZihlID09IDApIGUgPSAtMTAyMjtcblx0XHRlbHNlIHsgZSAtPSAxMDIzOyBtICs9IE1hdGgucG93KDIsNTIpOyB9XG5cdFx0cmV0dXJuIHMgKiBNYXRoLnBvdygyLCBlIC0gNTIpICogbTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX2RvdWJsZV9sZShiLCB2LCBpZHgpIHtcblx0XHR2YXIgYnMgPSAoKHYgPCAwIHx8IDEvdiA9PSAtSW5maW5pdHkpID8gMSA6IDApIDw8IDcsIGUgPSAwLCBtID0gMDtcblx0XHR2YXIgYXYgPSBicyA/IC12IDogdjtcblx0XHRpZighaXNGaW5pdGUoYXYpKSB7IGUgPSAweDdmZjsgbSA9IGlzTmFOKHYpID8gMHg2OTY5IDogMDsgfVxuXHRcdGVsc2Uge1xuXHRcdFx0ZSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYXYpICogTWF0aC5MT0cyRSk7XG5cdFx0XHRtID0gdiAqIE1hdGgucG93KDIsIDUyIC0gZSk7XG5cdFx0XHRpZihlIDw9IC0xMDIzICYmICghaXNGaW5pdGUobSkgfHwgbSA8IE1hdGgucG93KDIsNTIpKSkgeyBlID0gLTEwMjI7IH1cblx0XHRcdGVsc2UgeyBtIC09IE1hdGgucG93KDIsNTIpOyBlKz0xMDIzOyB9XG5cdFx0fVxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPD0gNTsgKytpLCBtLz0yNTYpIGJbaWR4ICsgaV0gPSBtICYgMHhmZjtcblx0XHRiW2lkeCArIDZdID0gKChlICYgMHgwZikgPDwgNCkgfCBtICYgMHhmO1xuXHRcdGJbaWR4ICsgN10gPSAoZSA+PiA0KSB8IGJzO1xuXHR9XG5cblx0dmFyIF9fdG9CdWZmZXIsIF9fX3RvQnVmZmVyO1xuXHRfX3RvQnVmZmVyID0gX19fdG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlcl8oYnVmcykgeyB2YXIgeCA9IFtdOyBmb3IodmFyIGkgPSAwOyBpIDwgYnVmc1swXS5sZW5ndGg7ICsraSkgeyB4LnB1c2guYXBwbHkoeCwgYnVmc1swXVtpXSk7IH0gcmV0dXJuIHg7IH07XG5cdHZhciBfX3V0ZjE2bGUsIF9fX3V0ZjE2bGU7XG5cdF9fdXRmMTZsZSA9IF9fX3V0ZjE2bGUgPSBmdW5jdGlvbiB1dGYxNmxlXyhiLHMsZSkgeyB2YXIgc3M9W107IGZvcih2YXIgaT1zOyBpPGU7IGkrPTIpIHNzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShfX3JlYWRVSW50MTZMRShiLGkpKSk7IHJldHVybiBzcy5qb2luKFwiXCIpOyB9O1xuXHR2YXIgX19oZXhsaWZ5LCBfX19oZXhsaWZ5O1xuXHRfX2hleGxpZnkgPSBfX19oZXhsaWZ5ID0gZnVuY3Rpb24gaGV4bGlmeV8oYixzLGwpIHsgcmV0dXJuIGIuc2xpY2UocywocytsKSkubWFwKGZ1bmN0aW9uKHgpe3JldHVybiAoeDwxNj9cIjBcIjpcIlwiKSArIHgudG9TdHJpbmcoMTYpO30pLmpvaW4oXCJcIik7IH07XG5cdHZhciBfX3V0ZjgsIF9fX3V0Zjg7XG5cdF9fdXRmOCA9IF9fX3V0ZjggPSBmdW5jdGlvbihiLHMsZSkgeyB2YXIgc3M9W107IGZvcih2YXIgaT1zOyBpPGU7IGkrKykgc3MucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKF9fcmVhZFVJbnQ4KGIsaSkpKTsgcmV0dXJuIHNzLmpvaW4oXCJcIik7IH07XG5cdHZhciBfX2xwc3RyLCBfX19scHN0cjtcblx0X19scHN0ciA9IF9fX2xwc3RyID0gZnVuY3Rpb24gbHBzdHJfKGIsaSkgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBfX3V0ZjgoYiwgaSs0LGkrNCtsZW4tMSkgOiBcIlwiO307XG5cdHZhciBfX2xwd3N0ciwgX19fbHB3c3RyO1xuXHRfX2xwd3N0ciA9IF9fX2xwd3N0ciA9IGZ1bmN0aW9uIGxwd3N0cl8oYixpKSB7IHZhciBsZW4gPSAyKl9fcmVhZFVJbnQzMkxFKGIsaSk7IHJldHVybiBsZW4gPiAwID8gX191dGY4KGIsIGkrNCxpKzQrbGVuLTEpIDogXCJcIjt9O1xuXHR2YXIgX19scHA0LCBfX19scHA0O1xuXHRfX2xwcDQgPSBfX19scHA0ID0gZnVuY3Rpb24gbHBwNF8oYixpKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IF9fdXRmMTZsZShiLCBpKzQsaSs0K2xlbikgOiBcIlwiO307XG5cdHZhciBfXzhscHA0LCBfX184bHBwNDtcblx0X184bHBwNCA9IF9fXzhscHA0ID0gZnVuY3Rpb24gbHBwNF84KGIsaSkgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBfX3V0ZjgoYiwgaSs0LGkrNCtsZW4pIDogXCJcIjt9O1xuXHR2YXIgX19kb3VibGUsIF9fX2RvdWJsZTtcblx0X19kb3VibGUgPSBfX19kb3VibGUgPSBmdW5jdGlvbihiLCBpZHgpIHsgcmV0dXJuIHJlYWRfZG91YmxlX2xlKGIsIGlkeCk7fTtcblxuXHR2YXIgaXNfYnVmID0gZnVuY3Rpb24gaXNfYnVmX2EoYSkgeyByZXR1cm4gQXJyYXkuaXNBcnJheShhKTsgfTtcblx0aWYoaGFzX2J1Zikge1xuXHRcdF9fdXRmMTZsZSA9IGZ1bmN0aW9uIHV0ZjE2bGVfYihiLHMsZSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fdXRmMTZsZShiLHMsZSk7IHJldHVybiBiLnRvU3RyaW5nKCd1dGYxNmxlJyxzLGUpOyB9O1xuXHRcdF9faGV4bGlmeSA9IGZ1bmN0aW9uKGIscyxsKSB7IHJldHVybiBCdWZmZXIuaXNCdWZmZXIoYikgPyBiLnRvU3RyaW5nKCdoZXgnLHMscytsKSA6IF9fX2hleGxpZnkoYixzLGwpOyB9O1xuXHRcdF9fbHBzdHIgPSBmdW5jdGlvbiBscHN0cl9iKGIsaSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fbHBzdHIoYiwgaSk7IHZhciBsZW4gPSBiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGxlbiA+IDAgPyBiLnRvU3RyaW5nKCd1dGY4JyxpKzQsaSs0K2xlbi0xKSA6IFwiXCI7fTtcblx0XHRfX2xwd3N0ciA9IGZ1bmN0aW9uIGxwd3N0cl9iKGIsaSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fbHB3c3RyKGIsIGkpOyB2YXIgbGVuID0gMipiLnJlYWRVSW50MzJMRShpKTsgcmV0dXJuIGIudG9TdHJpbmcoJ3V0ZjE2bGUnLGkrNCxpKzQrbGVuLTEpO307XG5cdFx0X19scHA0ID0gZnVuY3Rpb24gbHBwNF9iKGIsaSkgeyBpZighQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gX19fbHBwNChiLCBpKTsgdmFyIGxlbiA9IGIucmVhZFVJbnQzMkxFKGkpOyByZXR1cm4gYi50b1N0cmluZygndXRmMTZsZScsaSs0LGkrNCtsZW4pO307XG5cdFx0X184bHBwNCA9IGZ1bmN0aW9uIGxwcDRfOGIoYixpKSB7IGlmKCFCdWZmZXIuaXNCdWZmZXIoYikpIHJldHVybiBfX184bHBwNChiLCBpKTsgdmFyIGxlbiA9IGIucmVhZFVJbnQzMkxFKGkpOyByZXR1cm4gYi50b1N0cmluZygndXRmOCcsaSs0LGkrNCtsZW4pO307XG5cdFx0X191dGY4ID0gZnVuY3Rpb24gdXRmOF9iKGIsIHMsZSkgeyByZXR1cm4gYi50b1N0cmluZygndXRmOCcscyxlKTsgfTtcblx0XHRfX3RvQnVmZmVyID0gZnVuY3Rpb24oYnVmcykgeyByZXR1cm4gKGJ1ZnNbMF0ubGVuZ3RoID4gMCAmJiBCdWZmZXIuaXNCdWZmZXIoYnVmc1swXVswXSkpID8gQnVmZmVyLmNvbmNhdChidWZzWzBdKSA6IF9fX3RvQnVmZmVyKGJ1ZnMpO307XG5cdFx0YmNvbmNhdCA9IGZ1bmN0aW9uKGJ1ZnMpIHsgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihidWZzWzBdKSA/IEJ1ZmZlci5jb25jYXQoYnVmcykgOiBbXS5jb25jYXQuYXBwbHkoW10sIGJ1ZnMpOyB9O1xuXHRcdF9fZG91YmxlID0gZnVuY3Rpb24gZG91YmxlXyhiLGkpIHsgaWYoQnVmZmVyLmlzQnVmZmVyKGIpKSByZXR1cm4gYi5yZWFkRG91YmxlTEUoaSk7IHJldHVybiBfX19kb3VibGUoYixpKTsgfTtcblx0XHRpc19idWYgPSBmdW5jdGlvbiBpc19idWZfYihhKSB7IHJldHVybiBCdWZmZXIuaXNCdWZmZXIoYSkgfHwgQXJyYXkuaXNBcnJheShhKTsgfTtcblx0fVxuXG5cdC8qIGZyb20ganMteGxzICovXG5cdGlmKHR5cGVvZiBjcHRhYmxlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdF9fdXRmMTZsZSA9IGZ1bmN0aW9uKGIscyxlKSB7IHJldHVybiBjcHRhYmxlLnV0aWxzLmRlY29kZSgxMjAwLCBiLnNsaWNlKHMsZSkpOyB9O1xuXHRcdF9fdXRmOCA9IGZ1bmN0aW9uKGIscyxlKSB7IHJldHVybiBjcHRhYmxlLnV0aWxzLmRlY29kZSg2NTAwMSwgYi5zbGljZShzLGUpKTsgfTtcblx0XHRfX2xwc3RyID0gZnVuY3Rpb24oYixpKSB7IHZhciBsZW4gPSBfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY29kZXBhZ2UsIGIuc2xpY2UoaSs0LCBpKzQrbGVuLTEpKSA6IFwiXCI7fTtcblx0XHRfX2xwd3N0ciA9IGZ1bmN0aW9uKGIsaSkgeyB2YXIgbGVuID0gMipfX3JlYWRVSW50MzJMRShiLGkpOyByZXR1cm4gbGVuID4gMCA/IGNwdGFibGUudXRpbHMuZGVjb2RlKDEyMDAsIGIuc2xpY2UoaSs0LGkrNCtsZW4tMSkpIDogXCJcIjt9O1xuXHRcdF9fbHBwNCA9IGZ1bmN0aW9uKGIsaSkgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBjcHRhYmxlLnV0aWxzLmRlY29kZSgxMjAwLCBiLnNsaWNlKGkrNCxpKzQrbGVuKSkgOiBcIlwiO307XG5cdFx0X184bHBwNCA9IGZ1bmN0aW9uKGIsaSkgeyB2YXIgbGVuID0gX19yZWFkVUludDMyTEUoYixpKTsgcmV0dXJuIGxlbiA+IDAgPyBjcHRhYmxlLnV0aWxzLmRlY29kZSg2NTAwMSwgYi5zbGljZShpKzQsaSs0K2xlbikpIDogXCJcIjt9O1xuXHR9XG5cblx0dmFyIF9fcmVhZFVJbnQ4ID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiBiW2lkeF07IH07XG5cdHZhciBfX3JlYWRVSW50MTZMRSA9IGZ1bmN0aW9uKGIsIGlkeCkgeyByZXR1cm4gYltpZHgrMV0qKDE8PDgpK2JbaWR4XTsgfTtcblx0dmFyIF9fcmVhZEludDE2TEUgPSBmdW5jdGlvbihiLCBpZHgpIHsgdmFyIHUgPSBiW2lkeCsxXSooMTw8OCkrYltpZHhdOyByZXR1cm4gKHUgPCAweDgwMDApID8gdSA6ICgweGZmZmYgLSB1ICsgMSkgKiAtMTsgfTtcblx0dmFyIF9fcmVhZFVJbnQzMkxFID0gZnVuY3Rpb24oYiwgaWR4KSB7IHJldHVybiBiW2lkeCszXSooMTw8MjQpKyhiW2lkeCsyXTw8MTYpKyhiW2lkeCsxXTw8OCkrYltpZHhdOyB9O1xuXHR2YXIgX19yZWFkSW50MzJMRSA9IGZ1bmN0aW9uKGIsIGlkeCkgeyByZXR1cm4gKGJbaWR4KzNdPDwyNCl8KGJbaWR4KzJdPDwxNil8KGJbaWR4KzFdPDw4KXxiW2lkeF07IH07XG5cblx0dmFyIF9fX3VuaGV4bGlmeSA9IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMubWF0Y2goLy4uL2cpLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBwYXJzZUludCh4LDE2KTt9KTsgfTtcblx0dmFyIF9fdW5oZXhsaWZ5ID0gdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiA/IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihzKSA/IG5ldyBCdWZmZXIocywgJ2hleCcpIDogX19fdW5oZXhsaWZ5KHMpOyB9IDogX19fdW5oZXhsaWZ5O1xuXG5cdGZ1bmN0aW9uIFJlYWRTaGlmdChzaXplLCB0KSB7XG5cdFx0dmFyIG89XCJcIiwgb0ksIG9SLCBvbz1bXSwgdywgdnYsIGksIGxvYztcblx0XHRzd2l0Y2godCkge1xuXHRcdFx0Y2FzZSAnZGJjcyc6XG5cdFx0XHRcdGxvYyA9IHRoaXMubDtcblx0XHRcdFx0aWYoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIodGhpcykpIG8gPSB0aGlzLnNsaWNlKHRoaXMubCwgdGhpcy5sKzIqc2l6ZSkudG9TdHJpbmcoXCJ1dGYxNmxlXCIpO1xuXHRcdFx0XHRlbHNlIGZvcihpID0gMDsgaSAhPSBzaXplOyArK2kpIHsgbys9U3RyaW5nLmZyb21DaGFyQ29kZShfX3JlYWRVSW50MTZMRSh0aGlzLCBsb2MpKTsgbG9jKz0yOyB9XG5cdFx0XHRcdHNpemUgKj0gMjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3V0ZjgnOiBvID0gX191dGY4KHRoaXMsIHRoaXMubCwgdGhpcy5sICsgc2l6ZSk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAndXRmMTZsZSc6IHNpemUgKj0gMjsgbyA9IF9fdXRmMTZsZSh0aGlzLCB0aGlzLmwsIHRoaXMubCArIHNpemUpOyBicmVhaztcblxuXHRcdFx0Y2FzZSAnd3N0cic6XG5cdFx0XHRcdGlmKHR5cGVvZiBjcHRhYmxlICE9PSAndW5kZWZpbmVkJykgbyA9IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY29kZXBhZ2UsIHRoaXMuc2xpY2UodGhpcy5sLCB0aGlzLmwrMipzaXplKSk7XG5cdFx0XHRcdGVsc2UgcmV0dXJuIFJlYWRTaGlmdC5jYWxsKHRoaXMsIHNpemUsICdkYmNzJyk7XG5cdFx0XHRcdHNpemUgPSAyICogc2l6ZTsgYnJlYWs7XG5cblx0XHRcdC8qIFtNUy1PTEVEU10gMi4xLjQgTGVuZ3RoUHJlZml4ZWRBbnNpU3RyaW5nICovXG5cdFx0XHRjYXNlICdscHN0cic6IG8gPSBfX2xwc3RyKHRoaXMsIHRoaXMubCk7IHNpemUgPSA1ICsgby5sZW5ndGg7IGJyZWFrO1xuXHRcdFx0LyogW01TLU9MRURTXSAyLjEuNSBMZW5ndGhQcmVmaXhlZFVuaWNvZGVTdHJpbmcgKi9cblx0XHRcdGNhc2UgJ2xwd3N0cic6IG8gPSBfX2xwd3N0cih0aGlzLCB0aGlzLmwpOyBzaXplID0gNSArIG8ubGVuZ3RoOyBpZihvW28ubGVuZ3RoLTFdID09ICdcXHUwMDAwJykgc2l6ZSArPSAyOyBicmVhaztcblx0XHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMS4yIExlbmd0aC1QcmVmaXhlZCBQYWRkZWQgVW5pY29kZSBTdHJpbmcgKFVOSUNPREUtTFAtUDQpICovXG5cdFx0XHRjYXNlICdscHA0Jzogc2l6ZSA9IDQgKyAgX19yZWFkVUludDMyTEUodGhpcywgdGhpcy5sKTsgbyA9IF9fbHBwNCh0aGlzLCB0aGlzLmwpOyBpZihzaXplICYgMHgwMikgc2l6ZSArPSAyOyBicmVhaztcblx0XHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMS4zIExlbmd0aC1QcmVmaXhlZCBVVEYtOCBTdHJpbmcgKFVURi04LUxQLVA0KSAqL1xuXHRcdFx0Y2FzZSAnOGxwcDQnOiBzaXplID0gNCArICBfX3JlYWRVSW50MzJMRSh0aGlzLCB0aGlzLmwpOyBvID0gX184bHBwNCh0aGlzLCB0aGlzLmwpOyBpZihzaXplICYgMHgwMykgc2l6ZSArPSA0IC0gKHNpemUgJiAweDAzKTsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ2NzdHInOiBzaXplID0gMDsgbyA9IFwiXCI7XG5cdFx0XHRcdHdoaWxlKCh3PV9fcmVhZFVJbnQ4KHRoaXMsIHRoaXMubCArIHNpemUrKykpIT09MCkgb28ucHVzaChfZ2V0Y2hhcih3KSk7XG5cdFx0XHRcdG8gPSBvby5qb2luKFwiXCIpOyBicmVhaztcblx0XHRcdGNhc2UgJ193c3RyJzogc2l6ZSA9IDA7IG8gPSBcIlwiO1xuXHRcdFx0XHR3aGlsZSgodz1fX3JlYWRVSW50MTZMRSh0aGlzLHRoaXMubCArc2l6ZSkpIT09MCl7b28ucHVzaChfZ2V0Y2hhcih3KSk7c2l6ZSs9Mjt9XG5cdFx0XHRcdHNpemUrPTI7IG8gPSBvby5qb2luKFwiXCIpOyBicmVhaztcblxuXHRcdFx0Lyogc2JjcyBhbmQgZGJjcyBzdXBwb3J0IGNvbnRpbnVlIHJlY29yZHMgaW4gdGhlIFNTVCB3YXkgVE9ETyBjb2RlcGFnZXMgKi9cblx0XHRcdGNhc2UgJ2RiY3MtY29udCc6IG8gPSBcIlwiOyBsb2MgPSB0aGlzLmw7XG5cdFx0XHRcdGZvcihpID0gMDsgaSAhPSBzaXplOyArK2kpIHtcblx0XHRcdFx0XHRpZih0aGlzLmxlbnMgJiYgdGhpcy5sZW5zLmluZGV4T2YobG9jKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHcgPSBfX3JlYWRVSW50OCh0aGlzLCBsb2MpO1xuXHRcdFx0XHRcdFx0dGhpcy5sID0gbG9jICsgMTtcblx0XHRcdFx0XHRcdHZ2ID0gUmVhZFNoaWZ0LmNhbGwodGhpcywgc2l6ZS1pLCB3ID8gJ2RiY3MtY29udCcgOiAnc2Jjcy1jb250Jyk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb28uam9pbihcIlwiKSArIHZ2O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRvby5wdXNoKF9nZXRjaGFyKF9fcmVhZFVJbnQxNkxFKHRoaXMsIGxvYykpKTtcblx0XHRcdFx0XHRsb2MrPTI7XG5cdFx0XHRcdH0gbyA9IG9vLmpvaW4oXCJcIik7IHNpemUgKj0gMjsgYnJlYWs7XG5cblx0XHRcdGNhc2UgJ3NiY3MtY29udCc6IG8gPSBcIlwiOyBsb2MgPSB0aGlzLmw7XG5cdFx0XHRcdGZvcihpID0gMDsgaSAhPSBzaXplOyArK2kpIHtcblx0XHRcdFx0XHRpZih0aGlzLmxlbnMgJiYgdGhpcy5sZW5zLmluZGV4T2YobG9jKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHcgPSBfX3JlYWRVSW50OCh0aGlzLCBsb2MpO1xuXHRcdFx0XHRcdFx0dGhpcy5sID0gbG9jICsgMTtcblx0XHRcdFx0XHRcdHZ2ID0gUmVhZFNoaWZ0LmNhbGwodGhpcywgc2l6ZS1pLCB3ID8gJ2RiY3MtY29udCcgOiAnc2Jjcy1jb250Jyk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb28uam9pbihcIlwiKSArIHZ2O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRvby5wdXNoKF9nZXRjaGFyKF9fcmVhZFVJbnQ4KHRoaXMsIGxvYykpKTtcblx0XHRcdFx0XHRsb2MrPTE7XG5cdFx0XHRcdH0gbyA9IG9vLmpvaW4oXCJcIik7IGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdHN3aXRjaChzaXplKSB7XG5cdFx0XHRjYXNlIDE6IG9JID0gX19yZWFkVUludDgodGhpcywgdGhpcy5sKTsgdGhpcy5sKys7IHJldHVybiBvSTtcblx0XHRcdGNhc2UgMjogb0kgPSAodCA9PT0gJ2knID8gX19yZWFkSW50MTZMRSA6IF9fcmVhZFVJbnQxNkxFKSh0aGlzLCB0aGlzLmwpOyB0aGlzLmwgKz0gMjsgcmV0dXJuIG9JO1xuXHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRpZih0ID09PSAnaScgfHwgKHRoaXNbdGhpcy5sKzNdICYgMHg4MCk9PT0wKSB7IG9JID0gX19yZWFkSW50MzJMRSh0aGlzLCB0aGlzLmwpOyB0aGlzLmwgKz0gNDsgcmV0dXJuIG9JOyB9XG5cdFx0XHRcdGVsc2UgeyBvUiA9IF9fcmVhZFVJbnQzMkxFKHRoaXMsIHRoaXMubCk7IHRoaXMubCArPSA0OyB9IHJldHVybiBvUjtcblx0XHRcdGNhc2UgODogaWYodCA9PT0gJ2YnKSB7IG9SID0gX19kb3VibGUodGhpcywgdGhpcy5sKTsgdGhpcy5sICs9IDg7IHJldHVybiBvUjsgfVxuXHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0Y2FzZSAxNjogbyA9IF9faGV4bGlmeSh0aGlzLCB0aGlzLmwsIHNpemUpOyBicmVhaztcblx0XHR9fVxuXHRcdHRoaXMubCs9c2l6ZTsgcmV0dXJuIG87XG5cdH1cblxuXHR2YXIgX193cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24oYiwgdmFsLCBpZHgpIHsgYltpZHhdID0gKHZhbCAmIDB4RkYpOyBiW2lkeCsxXSA9ICgodmFsID4+PiA4KSAmIDB4RkYpOyB9O1xuXHR2YXIgX193cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24oYiwgdmFsLCBpZHgpIHsgYltpZHhdID0gKHZhbCAmIDB4RkYpOyBiW2lkeCsxXSA9ICgodmFsID4+PiA4KSAmIDB4RkYpOyBiW2lkeCsyXSA9ICgodmFsID4+PiAxNikgJiAweEZGKTsgYltpZHgrM10gPSAoKHZhbCA+Pj4gMjQpICYgMHhGRik7IH07XG5cdHZhciBfX3dyaXRlSW50MzJMRSAgPSBmdW5jdGlvbihiLCB2YWwsIGlkeCkgeyBiW2lkeF0gPSAodmFsICYgMHhGRik7IGJbaWR4KzFdID0gKCh2YWwgPj4gOCkgJiAweEZGKTsgYltpZHgrMl0gPSAoKHZhbCA+PiAxNikgJiAweEZGKTsgYltpZHgrM10gPSAoKHZhbCA+PiAyNCkgJiAweEZGKTsgfTtcblxuXHRmdW5jdGlvbiBXcml0ZVNoaWZ0KHQsIHZhbCwgZikge1xuXHRcdHZhciBzaXplID0gMCwgaSA9IDA7XG5cdFx0aWYoZiA9PT0gJ2RiY3MnKSB7XG5cdGZvcihpID0gMDsgaSAhPSB2YWwubGVuZ3RoOyArK2kpIF9fd3JpdGVVSW50MTZMRSh0aGlzLCB2YWwuY2hhckNvZGVBdChpKSwgdGhpcy5sICsgMiAqIGkpO1xuXHRcdFx0c2l6ZSA9IDIgKiB2YWwubGVuZ3RoO1xuXHRcdH0gZWxzZSBpZihmID09PSAnc2JjcycpIHtcblx0Zm9yKGkgPSAwOyBpICE9IHZhbC5sZW5ndGg7ICsraSkgdGhpc1t0aGlzLmwgKyBpXSA9IHZhbC5jaGFyQ29kZUF0KGkpICYgMHhGRjtcblx0XHRcdHNpemUgPSB2YWwubGVuZ3RoO1xuXHRcdH0gZWxzZSAgc3dpdGNoKHQpIHtcblx0XHRcdGNhc2UgIDE6IHNpemUgPSAxOyB0aGlzW3RoaXMubF0gPSB2YWwmMHhGRjsgYnJlYWs7XG5cdFx0XHRjYXNlICAyOiBzaXplID0gMjsgdGhpc1t0aGlzLmxdID0gdmFsJjB4RkY7IHZhbCA+Pj49IDg7IHRoaXNbdGhpcy5sKzFdID0gdmFsJjB4RkY7IGJyZWFrO1xuXHRcdFx0Y2FzZSAgMzogc2l6ZSA9IDM7IHRoaXNbdGhpcy5sXSA9IHZhbCYweEZGOyB2YWwgPj4+PSA4OyB0aGlzW3RoaXMubCsxXSA9IHZhbCYweEZGOyB2YWwgPj4+PSA4OyB0aGlzW3RoaXMubCsyXSA9IHZhbCYweEZGOyBicmVhaztcblx0XHRcdGNhc2UgIDQ6IHNpemUgPSA0OyBfX3dyaXRlVUludDMyTEUodGhpcywgdmFsLCB0aGlzLmwpOyBicmVhaztcblx0XHRcdGNhc2UgIDg6IHNpemUgPSA4OyBpZihmID09PSAnZicpIHsgd3JpdGVfZG91YmxlX2xlKHRoaXMsIHZhbCwgdGhpcy5sKTsgYnJlYWs7IH1cblx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdGNhc2UgMTY6IGJyZWFrO1xuXHRcdFx0Y2FzZSAtNDogc2l6ZSA9IDQ7IF9fd3JpdGVJbnQzMkxFKHRoaXMsIHZhbCwgdGhpcy5sKTsgYnJlYWs7XG5cdFx0fVxuXHRcdHRoaXMubCArPSBzaXplOyByZXR1cm4gdGhpcztcblx0fVxuXG5cdGZ1bmN0aW9uIENoZWNrRmllbGQoaGV4c3RyLCBmbGQpIHtcblx0XHR2YXIgbSA9IF9faGV4bGlmeSh0aGlzLHRoaXMubCxoZXhzdHIubGVuZ3RoPj4xKTtcblx0XHRpZihtICE9PSBoZXhzdHIpIHRocm93IGZsZCArICdFeHBlY3RlZCAnICsgaGV4c3RyICsgJyBzYXcgJyArIG07XG5cdFx0dGhpcy5sICs9IGhleHN0ci5sZW5ndGg+PjE7XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVwX2Jsb2IoYmxvYiwgcG9zKSB7XG5cdFx0YmxvYi5sID0gcG9zO1xuXHRcdGJsb2IucmVhZF9zaGlmdCA9IFJlYWRTaGlmdDtcblx0XHRibG9iLmNoayA9IENoZWNrRmllbGQ7XG5cdFx0YmxvYi53cml0ZV9zaGlmdCA9IFdyaXRlU2hpZnQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKSB7IGJsb2IubCArPSBsZW5ndGg7IH1cblx0ZnVuY3Rpb24gcGFyc2Vub29wbG9nKGJsb2IsIGxlbmd0aCkgeyBpZih0eXBlb2YgY29uc29sZSAhPSAndW5kZWZpbmVkJykgY29uc29sZS5sb2coYmxvYi5zbGljZShibG9iLmwsIGJsb2IubCArIGxlbmd0aCkpOyBibG9iLmwgKz0gbGVuZ3RoOyB9XG5cblx0ZnVuY3Rpb24gd3JpdGVub29wKGJsb2IsIGxlbmd0aCkgeyBibG9iLmwgKz0gbGVuZ3RoOyB9XG5cblx0ZnVuY3Rpb24gbmV3X2J1Zihzeikge1xuXHRcdHZhciBvID0gbmV3X3Jhd19idWYoc3opO1xuXHRcdHByZXBfYmxvYihvLCAwKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNCBSZWNvcmQgKi9cblx0ZnVuY3Rpb24gcmVjb3JkaG9wcGVyKGRhdGEsIGNiLCBvcHRzKSB7XG5cdFx0aWYoIWRhdGEpIHJldHVybjtcblx0XHR2YXIgdG1wYnl0ZSwgY250Ynl0ZSwgbGVuZ3RoO1xuXHRcdHByZXBfYmxvYihkYXRhLCBkYXRhLmwgfHwgMCk7XG5cdFx0dmFyIEwgPSBkYXRhLmxlbmd0aCwgUlQgPSAwLCB0Z3QgPSAwO1xuXHRcdHdoaWxlKGRhdGEubCA8IEwpIHtcblx0XHRcdFJUID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdFx0aWYoUlQgJiAweDgwKSBSVCA9IChSVCAmIDB4N0YpICsgKChkYXRhLnJlYWRfc2hpZnQoMSkgJiAweDdGKTw8Nyk7XG5cdFx0XHR2YXIgUiA9IFhMU0JSZWNvcmRFbnVtW1JUXSB8fCBYTFNCUmVjb3JkRW51bVsweEZGRkZdO1xuXHRcdFx0dG1wYnl0ZSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHRcdGxlbmd0aCA9IHRtcGJ5dGUgJiAweDdGO1xuXHRcdFx0Zm9yKGNudGJ5dGUgPSAxOyBjbnRieXRlIDw0ICYmICh0bXBieXRlICYgMHg4MCk7ICsrY250Ynl0ZSkgbGVuZ3RoICs9ICgodG1wYnl0ZSA9IGRhdGEucmVhZF9zaGlmdCgxKSkgJiAweDdGKTw8KDcqY250Ynl0ZSk7XG5cdFx0XHR0Z3QgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0XHR2YXIgZCA9IFIuZihkYXRhLCBsZW5ndGgsIG9wdHMpO1xuXHRcdFx0ZGF0YS5sID0gdGd0O1xuXHRcdFx0aWYoY2IoZCwgUi5uLCBSVCkpIHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvKiBjb250cm9sIGJ1ZmZlciB1c2FnZSBmb3IgZml4ZWQtbGVuZ3RoIGJ1ZmZlcnMgKi9cblx0ZnVuY3Rpb24gYnVmX2FycmF5KCkge1xuXHRcdHZhciBidWZzID0gW10sIGJsa3N6ID0gMjA0ODtcblx0XHR2YXIgbmV3YmxrID0gZnVuY3Rpb24gYmFfbmV3YmxrKHN6KSB7XG5cdFx0XHR2YXIgbyA9IChuZXdfYnVmKHN6KSk7XG5cdFx0XHRwcmVwX2Jsb2IobywgMCk7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9O1xuXG5cdFx0dmFyIGN1cmJ1ZiA9IG5ld2JsayhibGtzeik7XG5cblx0XHR2YXIgZW5kYnVmID0gZnVuY3Rpb24gYmFfZW5kYnVmKCkge1xuXHRcdFx0aWYoIWN1cmJ1ZikgcmV0dXJuO1xuXHRcdFx0aWYoY3VyYnVmLmxlbmd0aCA+IGN1cmJ1Zi5sKSBjdXJidWYgPSBjdXJidWYuc2xpY2UoMCwgY3VyYnVmLmwpO1xuXHRcdFx0aWYoY3VyYnVmLmxlbmd0aCA+IDApIGJ1ZnMucHVzaChjdXJidWYpO1xuXHRcdFx0Y3VyYnVmID0gbnVsbDtcblx0XHR9O1xuXG5cdFx0dmFyIG5leHQgPSBmdW5jdGlvbiBiYV9uZXh0KHN6KSB7XG5cdFx0XHRpZihjdXJidWYgJiYgc3ogPCBjdXJidWYubGVuZ3RoIC0gY3VyYnVmLmwpIHJldHVybiBjdXJidWY7XG5cdFx0XHRlbmRidWYoKTtcblx0XHRcdHJldHVybiAoY3VyYnVmID0gbmV3YmxrKE1hdGgubWF4KHN6KzEsIGJsa3N6KSkpO1xuXHRcdH07XG5cblx0XHR2YXIgZW5kID0gZnVuY3Rpb24gYmFfZW5kKCkge1xuXHRcdFx0ZW5kYnVmKCk7XG5cdFx0XHRyZXR1cm4gX190b0J1ZmZlcihbYnVmc10pO1xuXHRcdH07XG5cblx0XHR2YXIgcHVzaCA9IGZ1bmN0aW9uIGJhX3B1c2goYnVmKSB7IGVuZGJ1ZigpOyBjdXJidWYgPSBidWY7IG5leHQoYmxrc3opOyB9O1xuXG5cdFx0cmV0dXJuICh7IG5leHQ6bmV4dCwgcHVzaDpwdXNoLCBlbmQ6ZW5kLCBfYnVmczpidWZzIH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfcmVjb3JkKGJhLCB0eXBlLCBwYXlsb2FkLCBsZW5ndGgpIHtcblx0XHR2YXIgdCA9IE51bWJlcihldmVydF9SRVt0eXBlXSksIGw7XG5cdFx0aWYoaXNOYU4odCkpIHJldHVybjsgLy8gVE9ETzogdGhyb3cgc29tZXRoaW5nIGhlcmU/XG5cdFx0aWYoIWxlbmd0aCkgbGVuZ3RoID0gWExTQlJlY29yZEVudW1bdF0ucCB8fCAocGF5bG9hZHx8W10pLmxlbmd0aCB8fCAwO1xuXHRcdGwgPSAxICsgKHQgPj0gMHg4MCA/IDEgOiAwKSArIDEgKyBsZW5ndGg7XG5cdFx0aWYobGVuZ3RoID49IDB4ODApICsrbDsgaWYobGVuZ3RoID49IDB4NDAwMCkgKytsOyBpZihsZW5ndGggPj0gMHgyMDAwMDApICsrbDtcblx0XHR2YXIgbyA9IGJhLm5leHQobCk7XG5cdFx0aWYodCA8PSAweDdGKSBvLndyaXRlX3NoaWZ0KDEsIHQpO1xuXHRcdGVsc2Uge1xuXHRcdFx0by53cml0ZV9zaGlmdCgxLCAodCAmIDB4N0YpICsgMHg4MCk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsICh0ID4+IDcpKTtcblx0XHR9XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSA0OyArK2kpIHtcblx0XHRcdGlmKGxlbmd0aCA+PSAweDgwKSB7IG8ud3JpdGVfc2hpZnQoMSwgKGxlbmd0aCAmIDB4N0YpKzB4ODApOyBsZW5ndGggPj49IDc7IH1cblx0XHRcdGVsc2UgeyBvLndyaXRlX3NoaWZ0KDEsIGxlbmd0aCk7IGJyZWFrOyB9XG5cdFx0fVxuXHRcdGlmKGxlbmd0aCA+IDAgJiYgaXNfYnVmKHBheWxvYWQpKSBiYS5wdXNoKHBheWxvYWQpO1xuXHR9XG5cdC8qIFhMUyByYW5nZXMgZW5mb3JjZWQgKi9cblx0ZnVuY3Rpb24gc2hpZnRfY2VsbF94bHMoY2VsbCwgdGd0LCBvcHRzKSB7XG5cdFx0dmFyIG91dCA9IGR1cChjZWxsKTtcblx0XHRpZih0Z3Qucykge1xuXHRcdFx0aWYob3V0LmNSZWwpIG91dC5jICs9IHRndC5zLmM7XG5cdFx0XHRpZihvdXQuclJlbCkgb3V0LnIgKz0gdGd0LnMucjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3V0LmMgKz0gdGd0LmM7XG5cdFx0XHRvdXQuciArPSB0Z3Qucjtcblx0XHR9XG5cdFx0aWYoIW9wdHMgfHwgb3B0cy5iaWZmIDwgMTIpIHtcblx0XHRcdHdoaWxlKG91dC5jID49IDB4MTAwKSBvdXQuYyAtPSAweDEwMDtcblx0XHRcdHdoaWxlKG91dC5yID49IDB4MTAwMDApIG91dC5yIC09IDB4MTAwMDA7XG5cdFx0fVxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBzaGlmdF9yYW5nZV94bHMoY2VsbCwgcmFuZ2UsIG9wdHMpIHtcblx0XHR2YXIgb3V0ID0gZHVwKGNlbGwpO1xuXHRcdG91dC5zID0gc2hpZnRfY2VsbF94bHMob3V0LnMsIHJhbmdlLnMsIG9wdHMpO1xuXHRcdG91dC5lID0gc2hpZnRfY2VsbF94bHMob3V0LmUsIHJhbmdlLnMsIG9wdHMpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVfY2VsbF94bHMoYykge1xuXHRcdHZhciBzID0gZW5jb2RlX2NlbGwoYyk7XG5cdFx0aWYoYy5jUmVsID09PSAwKSBzID0gZml4X2NvbChzKTtcblx0XHRpZihjLnJSZWwgPT09IDApIHMgPSBmaXhfcm93KHMpO1xuXHRcdHJldHVybiBzO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW5jb2RlX3JhbmdlX3hscyhyLCBvcHRzKSB7XG5cdFx0aWYoci5zLnIgPT0gMCAmJiAhci5zLnJSZWwpIHtcblx0XHRcdGlmKHIuZS5yID09IG9wdHMuYmlmZiA+PSAxMiA/IDB4RkZGRkYgOiAweEZGRkYgJiYgIXIuZS5yUmVsKSB7XG5cdFx0XHRcdHJldHVybiAoci5zLmNSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX2NvbChyLnMuYykgKyBcIjpcIiArIChyLmUuY1JlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfY29sKHIuZS5jKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoci5zLmMgPT0gMCAmJiAhci5zLmNSZWwpIHtcblx0XHRcdGlmKHIuZS5jID09IG9wdHMuYmlmZiA+PSAxMiA/IDB4RkZGRiA6IDB4RkYgJiYgIXIuZS5jUmVsKSB7XG5cdFx0XHRcdHJldHVybiAoci5zLnJSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX3JvdyhyLnMucikgKyBcIjpcIiArIChyLmUuclJlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfcm93KHIuZS5yKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGVuY29kZV9jZWxsX3hscyhyLnMpICsgXCI6XCIgKyBlbmNvZGVfY2VsbF94bHMoci5lKTtcblx0fVxuXHR2YXIgT0ZGQ1JZUFRPID0ge307XG5cblx0dmFyIG1ha2Vfb2ZmY3J5cHRvID0gZnVuY3Rpb24oTywgX2NyeXB0bykge1xuXHRcdHZhciBjcnlwdG87XG5cdFx0aWYodHlwZW9mIF9jcnlwdG8gIT09ICd1bmRlZmluZWQnKSBjcnlwdG8gPSBfY3J5cHRvO1xuXHRcdGVsc2UgaWYodHJ1ZSkge1xuXHRcdFx0dHJ5IHsgY3J5cHRvID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTsgfVxuXHRcdFx0Y2F0Y2goZSkgeyBjcnlwdG8gPSBudWxsOyB9XG5cdFx0fVxuXG5cdFx0Ty5yYzQgPSBmdW5jdGlvbihrZXksIGRhdGEpIHtcblx0XHRcdHZhciBTID0gbmV3IEFycmF5KDI1Nik7XG5cdFx0XHR2YXIgYyA9IDAsIGkgPSAwLCBqID0gMCwgdCA9IDA7XG5cdFx0XHRmb3IoaSA9IDA7IGkgIT0gMjU2OyArK2kpIFNbaV0gPSBpO1xuXHRcdFx0Zm9yKGkgPSAwOyBpICE9IDI1NjsgKytpKSB7XG5cdFx0XHRcdGogPSAoaiArIFNbaV0gKyAoa2V5W2kla2V5Lmxlbmd0aF0pLmNoYXJDb2RlQXQoMCkpJjI1NTtcblx0XHRcdFx0dCA9IFNbaV07IFNbaV0gPSBTW2pdOyBTW2pdID0gdDtcblx0XHRcdH1cblx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRpID0gaiA9IDA7IHZhciBvdXQgPSBCdWZmZXIoZGF0YS5sZW5ndGgpO1xuXHRcdFx0Zm9yKGMgPSAwOyBjICE9IGRhdGEubGVuZ3RoOyArK2MpIHtcblx0XHRcdFx0aSA9IChpICsgMSkmMjU1O1xuXHRcdFx0XHRqID0gKGogKyBTW2ldKSUyNTY7XG5cdFx0XHRcdHQgPSBTW2ldOyBTW2ldID0gU1tqXTsgU1tqXSA9IHQ7XG5cdFx0XHRcdG91dFtjXSA9IChkYXRhW2NdIF4gU1soU1tpXStTW2pdKSYyNTVdKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvdXQ7XG5cdFx0fTtcblxuXHRcdE8ubWQ1ID0gZnVuY3Rpb24oaGV4KSB7XG5cdFx0XHRpZighY3J5cHRvKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBjcnlwdG9cIik7XG5cdFx0XHRyZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShoZXgpLmRpZ2VzdCgnaGV4Jyk7XG5cdFx0fTtcblx0fTtcblx0LypnbG9iYWwgY3J5cHRvOnRydWUgKi9cblx0bWFrZV9vZmZjcnlwdG8oT0ZGQ1JZUFRPLCB0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiID8gY3J5cHRvIDogdW5kZWZpbmVkKTtcblxuXHRmdW5jdGlvbiBkZWNvZGVfcm93KHJvd3N0cikgeyByZXR1cm4gcGFyc2VJbnQodW5maXhfcm93KHJvd3N0ciksMTApIC0gMTsgfVxuXHRmdW5jdGlvbiBlbmNvZGVfcm93KHJvdykgeyByZXR1cm4gXCJcIiArIChyb3cgKyAxKTsgfVxuXHRmdW5jdGlvbiBmaXhfcm93KGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvKFtBLVpdfF4pKFxcZCspJC8sXCIkMSQkJDJcIik7IH1cblx0ZnVuY3Rpb24gdW5maXhfcm93KGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXFwkKFxcZCspJC8sXCIkMVwiKTsgfVxuXG5cdGZ1bmN0aW9uIGRlY29kZV9jb2woY29sc3RyKSB7IHZhciBjID0gdW5maXhfY29sKGNvbHN0ciksIGQgPSAwLCBpID0gMDsgZm9yKDsgaSAhPT0gYy5sZW5ndGg7ICsraSkgZCA9IDI2KmQgKyBjLmNoYXJDb2RlQXQoaSkgLSA2NDsgcmV0dXJuIGQgLSAxOyB9XG5cdGZ1bmN0aW9uIGVuY29kZV9jb2woY29sKSB7IHZhciBzPVwiXCI7IGZvcigrK2NvbDsgY29sOyBjb2w9TWF0aC5mbG9vcigoY29sLTEpLzI2KSkgcyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2wtMSklMjYpICsgNjUpICsgczsgcmV0dXJuIHM7IH1cblx0ZnVuY3Rpb24gZml4X2NvbChjc3RyKSB7IHJldHVybiBjc3RyLnJlcGxhY2UoL14oW0EtWl0pLyxcIiQkJDFcIik7IH1cblx0ZnVuY3Rpb24gdW5maXhfY29sKGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvXlxcJChbQS1aXSkvLFwiJDFcIik7IH1cblxuXHRmdW5jdGlvbiBzcGxpdF9jZWxsKGNzdHIpIHsgcmV0dXJuIGNzdHIucmVwbGFjZSgvKFxcJD9bQS1aXSopKFxcJD9cXGQqKS8sXCIkMSwkMlwiKS5zcGxpdChcIixcIik7IH1cblx0ZnVuY3Rpb24gZGVjb2RlX2NlbGwoY3N0cikgeyB2YXIgc3BsdCA9IHNwbGl0X2NlbGwoY3N0cik7IHJldHVybiB7IGM6ZGVjb2RlX2NvbChzcGx0WzBdKSwgcjpkZWNvZGVfcm93KHNwbHRbMV0pIH07IH1cblx0ZnVuY3Rpb24gZW5jb2RlX2NlbGwoY2VsbCkgeyByZXR1cm4gZW5jb2RlX2NvbChjZWxsLmMpICsgZW5jb2RlX3JvdyhjZWxsLnIpOyB9XG5cdGZ1bmN0aW9uIGZpeF9jZWxsKGNzdHIpIHsgcmV0dXJuIGZpeF9jb2woZml4X3Jvdyhjc3RyKSk7IH1cblx0ZnVuY3Rpb24gdW5maXhfY2VsbChjc3RyKSB7IHJldHVybiB1bmZpeF9jb2wodW5maXhfcm93KGNzdHIpKTsgfVxuXHRmdW5jdGlvbiBkZWNvZGVfcmFuZ2UocmFuZ2UpIHsgdmFyIHggPXJhbmdlLnNwbGl0KFwiOlwiKS5tYXAoZGVjb2RlX2NlbGwpOyByZXR1cm4ge3M6eFswXSxlOnhbeC5sZW5ndGgtMV19OyB9XG5cdGZ1bmN0aW9uIGVuY29kZV9yYW5nZShjcyxjZSkge1xuXHRcdGlmKHR5cGVvZiBjZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNlID09PSAnbnVtYmVyJykge1xuXHRyZXR1cm4gZW5jb2RlX3JhbmdlKGNzLnMsIGNzLmUpO1xuXHRcdH1cblx0aWYodHlwZW9mIGNzICE9PSAnc3RyaW5nJykgY3MgPSBlbmNvZGVfY2VsbCgoY3MpKTtcblx0XHRpZih0eXBlb2YgY2UgIT09ICdzdHJpbmcnKSBjZSA9IGVuY29kZV9jZWxsKChjZSkpO1xuXHRyZXR1cm4gY3MgPT0gY2UgPyBjcyA6IGNzICsgXCI6XCIgKyBjZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNhZmVfZGVjb2RlX3JhbmdlKHJhbmdlKSB7XG5cdFx0dmFyIG8gPSB7czp7YzowLHI6MH0sZTp7YzowLHI6MH19O1xuXHRcdHZhciBpZHggPSAwLCBpID0gMCwgY2MgPSAwO1xuXHRcdHZhciBsZW4gPSByYW5nZS5sZW5ndGg7XG5cdFx0Zm9yKGlkeCA9IDA7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRcdGlkeCA9IDI2KmlkeCArIGNjO1xuXHRcdH1cblx0XHRvLnMuYyA9IC0taWR4O1xuXG5cdFx0Zm9yKGlkeCA9IDA7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNDgpIDwgMCB8fCBjYyA+IDkpIGJyZWFrO1xuXHRcdFx0aWR4ID0gMTAqaWR4ICsgY2M7XG5cdFx0fVxuXHRcdG8ucy5yID0gLS1pZHg7XG5cblx0XHRpZihpID09PSBsZW4gfHwgcmFuZ2UuY2hhckNvZGVBdCgrK2kpID09PSA1OCkgeyBvLmUuYz1vLnMuYzsgby5lLnI9by5zLnI7IHJldHVybiBvOyB9XG5cblx0XHRmb3IoaWR4ID0gMDsgaSAhPSBsZW47ICsraSkge1xuXHRcdFx0aWYoKGNjPXJhbmdlLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRcdGlkeCA9IDI2KmlkeCArIGNjO1xuXHRcdH1cblx0XHRvLmUuYyA9IC0taWR4O1xuXG5cdFx0Zm9yKGlkeCA9IDA7IGkgIT0gbGVuOyArK2kpIHtcblx0XHRcdGlmKChjYz1yYW5nZS5jaGFyQ29kZUF0KGkpLTQ4KSA8IDAgfHwgY2MgPiA5KSBicmVhaztcblx0XHRcdGlkeCA9IDEwKmlkeCArIGNjO1xuXHRcdH1cblx0XHRvLmUuciA9IC0taWR4O1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2FmZV9mb3JtYXRfY2VsbChjZWxsLCB2KSB7XG5cdFx0dmFyIHEgPSAoY2VsbC50ID09ICdkJyAmJiB2IGluc3RhbmNlb2YgRGF0ZSk7XG5cdFx0aWYoY2VsbC56ICE9IG51bGwpIHRyeSB7IHJldHVybiAoY2VsbC53ID0gU1NGLmZvcm1hdChjZWxsLnosIHEgPyBkYXRlbnVtKHYpIDogdikpOyB9IGNhdGNoKGUpIHsgfVxuXHRcdHRyeSB7IHJldHVybiAoY2VsbC53ID0gU1NGLmZvcm1hdCgoY2VsbC5YRnx8e30pLmlmbXR8fChxID8gMTQgOiAwKSwgIHEgPyBkYXRlbnVtKHYpIDogdikpOyB9IGNhdGNoKGUpIHsgcmV0dXJuICcnK3Y7IH1cblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdF9jZWxsKGNlbGwsIHYsIG8pIHtcblx0XHRpZihjZWxsID09IG51bGwgfHwgY2VsbC50ID09IG51bGwgfHwgY2VsbC50ID09ICd6JykgcmV0dXJuIFwiXCI7XG5cdFx0aWYoY2VsbC53ICE9PSB1bmRlZmluZWQpIHJldHVybiBjZWxsLnc7XG5cdFx0aWYoY2VsbC50ID09ICdkJyAmJiAhY2VsbC56ICYmIG8gJiYgby5kYXRlTkYpIGNlbGwueiA9IG8uZGF0ZU5GO1xuXHRcdGlmKHYgPT0gdW5kZWZpbmVkKSByZXR1cm4gc2FmZV9mb3JtYXRfY2VsbChjZWxsLCBjZWxsLnYsIG8pO1xuXHRcdHJldHVybiBzYWZlX2Zvcm1hdF9jZWxsKGNlbGwsIHYsIG8pO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hlZXRfdG9fd29ya2Jvb2soc2hlZXQsIG9wdHMpIHtcblx0XHR2YXIgbiA9IG9wdHMgJiYgb3B0cy5zaGVldCA/IG9wdHMuc2hlZXQgOiBcIlNoZWV0MVwiO1xuXHRcdHZhciBzaGVldHMgPSB7fTsgc2hlZXRzW25dID0gc2hlZXQ7XG5cdFx0cmV0dXJuIHsgU2hlZXROYW1lczogW25dLCBTaGVldHM6IHNoZWV0cyB9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYW9hX3RvX3NoZWV0KGRhdGEsIG9wdHMpIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvLmRlbnNlID09IG51bGwpIG8uZGVuc2UgPSBERU5TRTtcblx0XHR2YXIgd3MgPSBvLmRlbnNlID8gKFtdKSA6ICh7fSk7XG5cdFx0dmFyIHJhbmdlID0gKHtzOiB7YzoxMDAwMDAwMCwgcjoxMDAwMDAwMH0sIGU6IHtjOjAsIHI6MH19KTtcblx0XHRmb3IodmFyIFIgPSAwOyBSICE9IGRhdGEubGVuZ3RoOyArK1IpIHtcblx0XHRcdGZvcih2YXIgQyA9IDA7IEMgIT0gZGF0YVtSXS5sZW5ndGg7ICsrQykge1xuXHRcdFx0XHRpZih0eXBlb2YgZGF0YVtSXVtDXSA9PT0gJ3VuZGVmaW5lZCcpIGNvbnRpbnVlO1xuXHRcdFx0XHR2YXIgY2VsbCA9ICh7djogZGF0YVtSXVtDXSB9KTtcblx0XHRcdFx0aWYoQXJyYXkuaXNBcnJheShjZWxsLnYpKSB7IGNlbGwuZiA9IGRhdGFbUl1bQ11bMV07IGNlbGwudiA9IGNlbGwudlswXTsgfVxuXHRcdFx0XHRpZihyYW5nZS5zLnIgPiBSKSByYW5nZS5zLnIgPSBSO1xuXHRcdFx0XHRpZihyYW5nZS5zLmMgPiBDKSByYW5nZS5zLmMgPSBDO1xuXHRcdFx0XHRpZihyYW5nZS5lLnIgPCBSKSByYW5nZS5lLnIgPSBSO1xuXHRcdFx0XHRpZihyYW5nZS5lLmMgPCBDKSByYW5nZS5lLmMgPSBDO1xuXHRcdFx0XHRpZihjZWxsLnYgPT09IG51bGwpIHsgaWYoY2VsbC5mKSBjZWxsLnQgPSAnbic7IGVsc2UgaWYoIW8uY2VsbFN0dWJzKSBjb250aW51ZTsgZWxzZSBjZWxsLnQgPSAneic7IH1cblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgY2VsbC52ID09PSAnbnVtYmVyJykgY2VsbC50ID0gJ24nO1xuXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBjZWxsLnYgPT09ICdib29sZWFuJykgY2VsbC50ID0gJ2InO1xuXHRcdFx0XHRlbHNlIGlmKGNlbGwudiBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdFx0XHRjZWxsLnogPSBvLmRhdGVORiB8fCBTU0YuX3RhYmxlWzE0XTtcblx0XHRcdFx0XHRpZihvLmNlbGxEYXRlcykgeyBjZWxsLnQgPSAnZCc7IGNlbGwudyA9IFNTRi5mb3JtYXQoY2VsbC56LCBkYXRlbnVtKGNlbGwudikpOyB9XG5cdFx0XHRcdFx0ZWxzZSB7IGNlbGwudCA9ICduJzsgY2VsbC52ID0gZGF0ZW51bShjZWxsLnYpOyBjZWxsLncgPSBTU0YuZm9ybWF0KGNlbGwueiwgY2VsbC52KTsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgY2VsbC50ID0gJ3MnO1xuXHRcdFx0XHRpZihvLmRlbnNlKSB7XG5cdFx0XHRcdFx0aWYoIXdzW1JdKSB3c1tSXSA9IFtdO1xuXHRcdFx0XHRcdHdzW1JdW0NdID0gY2VsbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgY2VsbF9yZWYgPSBlbmNvZGVfY2VsbCgoe2M6QyxyOlJ9KSk7XG5cdFx0XHRcdFx0d3NbY2VsbF9yZWZdID0gY2VsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihyYW5nZS5zLmMgPCAxMDAwMDAwMCkgd3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0cmV0dXJuIHdzO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfVUludDMyTEUoeCwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1Zig0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHgpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNS4xNjggKi9cblx0ZnVuY3Rpb24gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpIHtcblx0XHR2YXIgY2NoQ2hhcmFjdGVycyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRyZXR1cm4gY2NoQ2hhcmFjdGVycyA9PT0gMCA/IFwiXCIgOiBkYXRhLnJlYWRfc2hpZnQoY2NoQ2hhcmFjdGVycywgJ2RiY3MnKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9YTFdpZGVTdHJpbmcoZGF0YSwgbykge1xuXHRcdHZhciBfbnVsbCA9IGZhbHNlOyBpZihvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1Zig0KzIqZGF0YS5sZW5ndGgpOyB9XG5cdFx0by53cml0ZV9zaGlmdCg0LCBkYXRhLmxlbmd0aCk7XG5cdFx0aWYoZGF0YS5sZW5ndGggPiAwKSBvLndyaXRlX3NoaWZ0KDAsIGRhdGEsICdkYmNzJyk7XG5cdFx0cmV0dXJuIF9udWxsID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjUuMTQzICovXG5cdGZ1bmN0aW9uIHBhcnNlX1N0clJ1bihkYXRhLCBsZW5ndGgpIHtcblx0XHRyZXR1cm4geyBpY2g6IGRhdGEucmVhZF9zaGlmdCgyKSwgaWZudDogZGF0YS5yZWFkX3NoaWZ0KDIpIH07XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfU3RyUnVuKHJ1biwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1Zig0KTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIHJ1bi5pY2ggfHwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBydW4uaWZudCB8fCAwKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy4xMjEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUmljaFN0cihkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgc3RhcnQgPSBkYXRhLmw7XG5cdFx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdHZhciBzdHIgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdFx0dmFyIHJnc1N0clJ1biA9IFtdO1xuXHRcdHZhciB6ID0gKHsgdDogc3RyLCBoOiBzdHIgfSk7XG5cdFx0aWYoKGZsYWdzICYgMSkgIT09IDApIHsgLyogZlJpY2hTdHIgKi9cblx0XHRcdC8qIFRPRE86IGZvcm1hdHRlZCBzdHJpbmcgKi9cblx0XHRcdHZhciBkd1NpemVTdHJSdW4gPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGR3U2l6ZVN0clJ1bjsgKytpKSByZ3NTdHJSdW4ucHVzaChwYXJzZV9TdHJSdW4oZGF0YSkpO1xuXHRcdFx0ei5yID0gcmdzU3RyUnVuO1xuXHRcdH1cblx0XHRlbHNlIHouciA9IFt7aWNoOjAsIGlmbnQ6MH1dO1xuXHRcdC8vaWYoKGZsYWdzICYgMikgIT09IDApIHsgLyogZkV4dFN0ciAqL1xuXHRcdC8vXHQvKiBUT0RPOiBwaG9uZXRpYyBzdHJpbmcgKi9cblx0XHQvL31cblx0XHRkYXRhLmwgPSBzdGFydCArIGxlbmd0aDtcblx0XHRyZXR1cm4gejtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9SaWNoU3RyKHN0ciwgbykge1xuXHRcdC8qIFRPRE86IGZvcm1hdHRlZCBzdHJpbmcgKi9cblx0XHR2YXIgX251bGwgPSBmYWxzZTsgaWYobyA9PSBudWxsKSB7IF9udWxsID0gdHJ1ZTsgbyA9IG5ld19idWYoMTUrNCpzdHIudC5sZW5ndGgpOyB9XG5cdFx0by53cml0ZV9zaGlmdCgxLDApO1xuXHRcdHdyaXRlX1hMV2lkZVN0cmluZyhzdHIudCwgbyk7XG5cdFx0cmV0dXJuIF9udWxsID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0fVxuXHQvKiBbTVMtWExTQl0gMi40LjMyNSBCcnRDb21tZW50VGV4dCAoUmljaFN0ciB3LzEgcnVuKSAqL1xuXHR2YXIgcGFyc2VfQnJ0Q29tbWVudFRleHQgPSBwYXJzZV9SaWNoU3RyO1xuXHRmdW5jdGlvbiB3cml0ZV9CcnRDb21tZW50VGV4dChzdHIsIG8pIHtcblx0XHQvKiBUT0RPOiBmb3JtYXR0ZWQgc3RyaW5nICovXG5cdFx0dmFyIF9udWxsID0gZmFsc2U7IGlmKG8gPT0gbnVsbCkgeyBfbnVsbCA9IHRydWU7IG8gPSBuZXdfYnVmKDIzKzQqc3RyLnQubGVuZ3RoKTsgfVxuXHRcdG8ud3JpdGVfc2hpZnQoMSwxKTtcblx0XHR3cml0ZV9YTFdpZGVTdHJpbmcoc3RyLnQsIG8pO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwxKTtcblx0XHR3cml0ZV9TdHJSdW4oe2ljaDowLGlmbnQ6MH0sIG8pO1xuXHRcdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi41LjkgKi9cblx0ZnVuY3Rpb24gcGFyc2VfWExTQkNlbGwoZGF0YSkge1xuXHRcdHZhciBjb2wgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGlTdHlsZVJlZiA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRpU3R5bGVSZWYgKz0gZGF0YS5yZWFkX3NoaWZ0KDEpIDw8MTY7XG5cdFx0dmFyIGZQaFNob3cgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0cmV0dXJuIHsgYzpjb2wsIGlTdHlsZVJlZjogaVN0eWxlUmVmIH07XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfWExTQkNlbGwoY2VsbCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdFx0by53cml0ZV9zaGlmdCgtNCwgY2VsbC5jKTtcblx0XHRvLndyaXRlX3NoaWZ0KDMsIGNlbGwuaVN0eWxlUmVmIHx8IGNlbGwucyk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZlBoU2hvdyAqL1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblxuXHQvKiBbTVMtWExTQl0gMi41LjIxICovXG5cdHZhciBwYXJzZV9YTFNCQ29kZU5hbWUgPSBwYXJzZV9YTFdpZGVTdHJpbmc7XG5cdHZhciB3cml0ZV9YTFNCQ29kZU5hbWUgPSB3cml0ZV9YTFdpZGVTdHJpbmc7XG5cblx0LyogW01TLVhMU0JdIDIuNS4xNjYgKi9cblx0ZnVuY3Rpb24gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSkge1xuXHRcdHZhciBjY2hDaGFyYWN0ZXJzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdHJldHVybiBjY2hDaGFyYWN0ZXJzID09PSAwIHx8IGNjaENoYXJhY3RlcnMgPT09IDB4RkZGRkZGRkYgPyBcIlwiIDogZGF0YS5yZWFkX3NoaWZ0KGNjaENoYXJhY3RlcnMsICdkYmNzJyk7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSwgbykge1xuXHRcdHZhciBfbnVsbCA9IGZhbHNlOyBpZihvID09IG51bGwpIHsgX251bGwgPSB0cnVlOyBvID0gbmV3X2J1ZigxMjcpOyB9XG5cdFx0by53cml0ZV9zaGlmdCg0LCBkYXRhLmxlbmd0aCA+IDAgPyBkYXRhLmxlbmd0aCA6IDB4RkZGRkZGRkYpO1xuXHRcdGlmKGRhdGEubGVuZ3RoID4gMCkgby53cml0ZV9zaGlmdCgwLCBkYXRhLCAnZGJjcycpO1xuXHRcdHJldHVybiBfbnVsbCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi41LjE2NSAqL1xuXHR2YXIgcGFyc2VfWExOYW1lV2lkZVN0cmluZyA9IHBhcnNlX1hMV2lkZVN0cmluZztcblx0dmFyIHdyaXRlX1hMTmFtZVdpZGVTdHJpbmcgPSB3cml0ZV9YTFdpZGVTdHJpbmc7XG5cblx0LyogW01TLVhMU0JdIDIuNS4xMTQgKi9cblx0dmFyIHBhcnNlX1JlbElEID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmc7XG5cdHZhciB3cml0ZV9SZWxJRCA9IHdyaXRlX1hMTnVsbGFibGVXaWRlU3RyaW5nO1xuXG5cblx0LyogW01TLVhMU0JdIDIuNS4xMjIgKi9cblx0LyogW01TLVhMU10gMi41LjIxNyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Sa051bWJlcihkYXRhKSB7XG5cdFx0dmFyIGIgPSBkYXRhLnNsaWNlKGRhdGEubCwgZGF0YS5sKzQpO1xuXHRcdHZhciBmWDEwMCA9IGJbMF0gJiAxLCBmSW50ID0gYlswXSAmIDI7XG5cdFx0ZGF0YS5sKz00O1xuXHRcdGJbMF0gJj0gMHhGQzsgLy8gYlswXSAmPSB+Mztcblx0XHR2YXIgUksgPSBmSW50ID09PSAwID8gX19kb3VibGUoWzAsMCwwLDAsYlswXSxiWzFdLGJbMl0sYlszXV0sMCkgOiBfX3JlYWRJbnQzMkxFKGIsMCk+PjI7XG5cdFx0cmV0dXJuIGZYMTAwID8gUksvMTAwIDogUks7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfUmtOdW1iZXIoZGF0YSwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNCk7XG5cdFx0dmFyIGZYMTAwID0gMCwgZkludCA9IDAsIGQxMDAgPSBkYXRhICogMTAwO1xuXHRcdGlmKGRhdGEgPT0gKGRhdGEgfCAwKSAmJiBkYXRhID49IC0oMTw8MjkpICYmIGRhdGEgPCAoMSA8PCAyOSkpIHsgZkludCA9IDE7IH1cblx0XHRlbHNlIGlmKGQxMDAgPT0gKGQxMDAgfCAwKSAmJiBkMTAwID49IC0oMTw8MjkpICYmIGQxMDAgPCAoMSA8PCAyOSkpIHsgZkludCA9IDE7IGZYMTAwID0gMTsgfVxuXHRcdGlmKGZJbnQpIG8ud3JpdGVfc2hpZnQoLTQsICgoZlgxMDAgPyBkMTAwIDogZGF0YSkgPDwgMikgKyAoZlgxMDAgKyAyKSk7XG5cdFx0ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBSa051bWJlciBcIiArIGRhdGEpOyAvLyBUT0RPXG5cdH1cblxuXG5cdC8qIFtNUy1YTFNCXSAyLjUuMTE3IFJmWCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SZlgoZGF0YSkge1xuXHRcdHZhciBjZWxsID0gKHtzOiB7fSwgZToge319KTtcblx0XHRjZWxsLnMuciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRjZWxsLmUuciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRjZWxsLnMuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRjZWxsLmUuYyA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRyZXR1cm4gY2VsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX1JmWChyLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDE2KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHIucy5yKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHIuZS5yKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHIucy5jKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHIuZS5jKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjUuMTUzIFVuY2hlY2tlZFJmWCAqL1xuXHR2YXIgcGFyc2VfVW5jaGVja2VkUmZYID0gcGFyc2VfUmZYO1xuXHR2YXIgd3JpdGVfVW5jaGVja2VkUmZYID0gd3JpdGVfUmZYO1xuXG5cdC8qIFtNUy1YTFNCXSAyLjUuMTcxICovXG5cdC8qIFtNUy1YTFNdIDIuNS4zNDIgKi9cblx0LyogVE9ETzogZXJyb3IgY2hlY2tpbmcsIE5hTiBhbmQgSW5maW5pdHkgdmFsdWVzIGFyZSBub3QgdmFsaWQgWG51bSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9YbnVtKGRhdGEsIGxlbmd0aCkgeyByZXR1cm4gZGF0YS5yZWFkX3NoaWZ0KDgsICdmJyk7IH1cblx0ZnVuY3Rpb24gd3JpdGVfWG51bShkYXRhLCBvKSB7IHJldHVybiAobyB8fCBuZXdfYnVmKDgpKS53cml0ZV9zaGlmdCg4LCBkYXRhLCAnZicpOyB9XG5cblx0LyogW01TLVhMU0JdIDIuNS4xOTguMiAqL1xuXHR2YXIgQkVyciA9IHtcblx0MHgwMDogXCIjTlVMTCFcIixcblx0MHgwNzogXCIjRElWLzAhXCIsXG5cdDB4MEY6IFwiI1ZBTFVFIVwiLFxuXHQweDE3OiBcIiNSRUYhXCIsXG5cdDB4MUQ6IFwiI05BTUU/XCIsXG5cdDB4MjQ6IFwiI05VTSFcIixcblx0MHgyQTogXCIjTi9BXCIsXG5cdDB4MkI6IFwiI0dFVFRJTkdfREFUQVwiLFxuXHQweEZGOiBcIiNXVEY/XCJcblx0fTtcblx0dmFyIFJCRXJyID0gZXZlcnRfbnVtKEJFcnIpO1xuXG5cdC8qIFtNUy1YTFNCXSAyLjQuMzIxIEJydENvbG9yICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydENvbG9yKGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciBvdXQgPSB7fTtcblx0XHR2YXIgZCA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblxuXHRcdHZhciBmVmFsaWRSR0IgPSBkICYgMTtcblx0XHR2YXIgeENvbG9yVHlwZSA9IGQgPj4+IDE7XG5cblx0XHR2YXIgaW5kZXggPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0dmFyIG5UUyA9IGRhdGEucmVhZF9zaGlmdCgyLCAnaScpO1xuXHRcdHZhciBiUiA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgYkcgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0dmFyIGJCID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdHZhciBiQWxwaGEgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cblx0XHRzd2l0Y2goeENvbG9yVHlwZSkge1xuXHRcdFx0Y2FzZSAwOiBvdXQuYXV0byA9IDE7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRvdXQuaW5kZXggPSBpbmRleDtcblx0XHRcdFx0dmFyIGljdiA9IFhMU0ljdltpbmRleF07XG5cdFx0XHRcdC8qIGF1dG9tYXRpYyBwc2V1ZG8gaW5kZXggODEgKi9cblx0XHRcdFx0aWYoaWN2KSBvdXQucmdiID0gaWN2WzBdLnRvU3RyaW5nKDE2KSArIGljdlsxXS50b1N0cmluZygxNikgKyBpY3ZbMl0udG9TdHJpbmcoMTYpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0LyogaWYoIWZWYWxpZFJHQikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZFwiKTsgKi9cblx0XHRcdFx0b3V0LnJnYiA9IGJSLnRvU3RyaW5nKDE2KSArIGJHLnRvU3RyaW5nKDE2KSArIGJCLnRvU3RyaW5nKDE2KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM6IG91dC50aGVtZSA9IGluZGV4OyBicmVhaztcblx0XHR9XG5cdFx0aWYoblRTICE9IDApIG91dC50aW50ID0gblRTID4gMCA/IG5UUyAvIDMyNzY3IDogblRTIC8gMzI3Njg7XG5cblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydENvbG9yKGNvbG9yLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDgpO1xuXHRcdGlmKCFjb2xvcnx8Y29sb3IuYXV0bykgeyBvLndyaXRlX3NoaWZ0KDQsIDApOyBvLndyaXRlX3NoaWZ0KDQsIDApOyByZXR1cm4gbzsgfVxuXHRcdGlmKGNvbG9yLmluZGV4KSB7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MDIpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgxLCBjb2xvci5pbmRleCk7XG5cdFx0fSBlbHNlIGlmKGNvbG9yLnRoZW1lKSB7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MDYpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgxLCBjb2xvci50aGVtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG8ud3JpdGVfc2hpZnQoMSwgMHgwNSk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdH1cblx0XHR2YXIgblRTID0gY29sb3IudGludCB8fCAwO1xuXHRcdGlmKG5UUyA+IDApIG5UUyAqPSAzMjc2Nztcblx0XHRlbHNlIGlmKG5UUyA8IDApIG5UUyAqPSAzMjc2ODtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIG5UUyk7XG5cdFx0aWYoIWNvbG9yLnJnYikge1xuXHRcdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcmdiID0gKGNvbG9yLnJnYiB8fCAnRkZGRkZGJyk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIHBhcnNlSW50KHJnYi5zdWJzdHIoMCwyKSwxNikpO1xuXHRcdFx0by53cml0ZV9zaGlmdCgxLCBwYXJzZUludChyZ2Iuc3Vic3RyKDIsMiksMTYpKTtcblx0XHRcdG8ud3JpdGVfc2hpZnQoMSwgcGFyc2VJbnQocmdiLnN1YnN0cig0LDIpLDE2KSk7XG5cdFx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4RkYpO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjUuNTIgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRm9udEZsYWdzKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBkID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdGRhdGEubCsrO1xuXHRcdHZhciBvdXQgPSB7XG5cdFx0XHQvKiBmQm9sZDogZCAmIDB4MDEgKi9cblx0XHRcdGZJdGFsaWM6IGQgJiAweDAyLFxuXHRcdFx0LyogZlVuZGVybGluZTogZCAmIDB4MDQgKi9cblx0XHRcdGZTdHJpa2VvdXQ6IGQgJiAweDA4LFxuXHRcdFx0Zk91dGxpbmU6IGQgJiAweDEwLFxuXHRcdFx0ZlNoYWRvdzogZCAmIDB4MjAsXG5cdFx0XHRmQ29uZGVuc2U6IGQgJiAweDQwLFxuXHRcdFx0ZkV4dGVuZDogZCAmIDB4ODBcblx0XHR9O1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfRm9udEZsYWdzKGZvbnQsIG8pIHtcblx0XHRpZighbykgbyA9IG5ld19idWYoMik7XG5cdFx0dmFyIGdyYml0ID1cblx0XHRcdChmb250Lml0YWxpYyAgID8gMHgwMiA6IDApIHxcblx0XHRcdChmb250LnN0cmlrZSAgID8gMHgwOCA6IDApIHxcblx0XHRcdChmb250Lm91dGxpbmUgID8gMHgxMCA6IDApIHxcblx0XHRcdChmb250LnNoYWRvdyAgID8gMHgyMCA6IDApIHxcblx0XHRcdChmb250LmNvbmRlbnNlID8gMHg0MCA6IDApIHxcblx0XHRcdChmb250LmV4dGVuZCAgID8gMHg4MCA6IDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgZ3JiaXQpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtT0xFUFNdIDIuMiBQcm9wZXJ0eVR5cGUgKi9cblx0e1xuXHRcdC8vdmFyIFZUX0VNUFRZICAgID0gMHgwMDAwO1xuXHRcdC8vdmFyIFZUX05VTEwgICAgID0gMHgwMDAxO1xuXHRcdHZhciBWVF9JMiAgICAgICA9IDB4MDAwMjtcblx0XHR2YXIgVlRfSTQgICAgICAgPSAweDAwMDM7XG5cdFx0Ly92YXIgVlRfUjQgICAgICAgPSAweDAwMDQ7XG5cdFx0Ly92YXIgVlRfUjggICAgICAgPSAweDAwMDU7XG5cdFx0Ly92YXIgVlRfQ1kgICAgICAgPSAweDAwMDY7XG5cdFx0Ly92YXIgVlRfREFURSAgICAgPSAweDAwMDc7XG5cdFx0Ly92YXIgVlRfQlNUUiAgICAgPSAweDAwMDg7XG5cdFx0Ly92YXIgVlRfRVJST1IgICAgPSAweDAwMEE7XG5cdFx0dmFyIFZUX0JPT0wgICAgID0gMHgwMDBCO1xuXHRcdHZhciBWVF9WQVJJQU5UICA9IDB4MDAwQztcblx0XHQvL3ZhciBWVF9ERUNJTUFMICA9IDB4MDAwRTtcblx0XHQvL3ZhciBWVF9JMSAgICAgICA9IDB4MDAxMDtcblx0XHQvL3ZhciBWVF9VSTEgICAgICA9IDB4MDAxMTtcblx0XHQvL3ZhciBWVF9VSTIgICAgICA9IDB4MDAxMjtcblx0XHR2YXIgVlRfVUk0ICAgICAgPSAweDAwMTM7XG5cdFx0Ly92YXIgVlRfSTggICAgICAgPSAweDAwMTQ7XG5cdFx0dmFyIFZUX1VJOCAgICAgID0gMHgwMDE1O1xuXHRcdC8vdmFyIFZUX0lOVCAgICAgID0gMHgwMDE2O1xuXHRcdC8vdmFyIFZUX1VJTlQgICAgID0gMHgwMDE3O1xuXHRcdHZhciBWVF9MUFNUUiAgICA9IDB4MDAxRTtcblx0XHQvL3ZhciBWVF9MUFdTVFIgICA9IDB4MDAxRjtcblx0XHR2YXIgVlRfRklMRVRJTUUgPSAweDAwNDA7XG5cdFx0Ly92YXIgVlRfQkxPQiAgICAgPSAweDAwNDE7XG5cdFx0Ly92YXIgVlRfU1RSRUFNICAgPSAweDAwNDI7XG5cdFx0Ly92YXIgVlRfU1RPUkFHRSAgPSAweDAwNDM7XG5cdFx0Ly92YXIgVlRfU1RSRUFNRURfT2JqZWN0ICA9IDB4MDA0NDtcblx0XHQvL3ZhciBWVF9TVE9SRURfT2JqZWN0ICAgID0gMHgwMDQ1O1xuXHRcdC8vdmFyIFZUX0JMT0JfT2JqZWN0ICAgICAgPSAweDAwNDY7XG5cdFx0dmFyIFZUX0NGICAgICAgID0gMHgwMDQ3O1xuXHRcdC8vdmFyIFZUX0NMU0lEICAgID0gMHgwMDQ4O1xuXHRcdC8vdmFyIFZUX1ZFUlNJT05FRF9TVFJFQU0gPSAweDAwNDk7XG5cdFx0dmFyIFZUX1ZFQ1RPUiAgID0gMHgxMDAwO1xuXHRcdC8vdmFyIFZUX0FSUkFZICAgID0gMHgyMDAwO1xuXG5cdFx0dmFyIFZUX1NUUklORyAgID0gMHgwMDUwOyAvLyAyLjMuMy4xLjExIFZ0U3RyaW5nXG5cdFx0dmFyIFZUX1VTVFIgICAgID0gMHgwMDUxOyAvLyAyLjMuMy4xLjEyIFZ0VW5hbGlnbmVkU3RyaW5nXG5cdFx0dmFyIFZUX0NVU1RPTSAgID0gW1ZUX1NUUklORywgVlRfVVNUUl07XG5cdH1cblxuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi4yLjEgRG9jdW1lbnQgU3VtbWFyeSBJbmZvcm1hdGlvbiBQSUREU0kgKi9cblx0dmFyIERvY1N1bW1hcnlQSUREU0kgPSB7XG5cdDB4MDE6IHsgbjogJ0NvZGVQYWdlJywgdDogVlRfSTIgfSxcblx0MHgwMjogeyBuOiAnQ2F0ZWdvcnknLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgwMzogeyBuOiAnUHJlc2VudGF0aW9uRm9ybWF0JywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDQ6IHsgbjogJ0J5dGVDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MDU6IHsgbjogJ0xpbmVDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MDY6IHsgbjogJ1BhcmFncmFwaENvdW50JywgdDogVlRfSTQgfSxcblx0MHgwNzogeyBuOiAnU2xpZGVDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MDg6IHsgbjogJ05vdGVDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MDk6IHsgbjogJ0hpZGRlbkNvdW50JywgdDogVlRfSTQgfSxcblx0MHgwYTogeyBuOiAnTXVsdGltZWRpYUNsaXBDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MGI6IHsgbjogJ1NjYWxlJywgdDogVlRfQk9PTCB9LFxuXHQweDBjOiB7IG46ICdIZWFkaW5nUGFpcicsIHQ6IFZUX1ZFQ1RPUiB8IFZUX1ZBUklBTlQgfSxcblx0MHgwZDogeyBuOiAnRG9jUGFydHMnLCB0OiBWVF9WRUNUT1IgfCBWVF9MUFNUUiB9LFxuXHQweDBlOiB7IG46ICdNYW5hZ2VyJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MGY6IHsgbjogJ0NvbXBhbnknLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgxMDogeyBuOiAnTGlua3NEaXJ0eScsIHQ6IFZUX0JPT0wgfSxcblx0MHgxMTogeyBuOiAnQ2hhcmFjdGVyQ291bnQnLCB0OiBWVF9JNCB9LFxuXHQweDEzOiB7IG46ICdTaGFyZWREb2MnLCB0OiBWVF9CT09MIH0sXG5cdDB4MTY6IHsgbjogJ0hMaW5rc0NoYW5nZWQnLCB0OiBWVF9CT09MIH0sXG5cdDB4MTc6IHsgbjogJ0FwcFZlcnNpb24nLCB0OiBWVF9JNCwgcDogJ3ZlcnNpb24nIH0sXG5cdDB4MUE6IHsgbjogJ0NvbnRlbnRUeXBlJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MUI6IHsgbjogJ0NvbnRlbnRTdGF0dXMnLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgxQzogeyBuOiAnTGFuZ3VhZ2UnLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgxRDogeyBuOiAnVmVyc2lvbicsIHQ6IFZUX1NUUklORyB9LFxuXHQweEZGOiB7fVxuXHR9O1xuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLjEuMSBTdW1tYXJ5IEluZm9ybWF0aW9uIFByb3BlcnR5IFNldCBQSURTSSAqL1xuXHR2YXIgU3VtbWFyeVBJRFNJID0ge1xuXHQweDAxOiB7IG46ICdDb2RlUGFnZScsIHQ6IFZUX0kyIH0sXG5cdDB4MDI6IHsgbjogJ1RpdGxlJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDM6IHsgbjogJ1N1YmplY3QnLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgwNDogeyBuOiAnQXV0aG9yJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDU6IHsgbjogJ0tleXdvcmRzJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDY6IHsgbjogJ0NvbW1lbnRzJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDc6IHsgbjogJ1RlbXBsYXRlJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MDg6IHsgbjogJ0xhc3RBdXRob3InLCB0OiBWVF9TVFJJTkcgfSxcblx0MHgwOTogeyBuOiAnUmV2TnVtYmVyJywgdDogVlRfU1RSSU5HIH0sXG5cdDB4MEE6IHsgbjogJ0VkaXRUaW1lJywgdDogVlRfRklMRVRJTUUgfSxcblx0MHgwQjogeyBuOiAnTGFzdFByaW50ZWQnLCB0OiBWVF9GSUxFVElNRSB9LFxuXHQweDBDOiB7IG46ICdDcmVhdGVkRGF0ZScsIHQ6IFZUX0ZJTEVUSU1FIH0sXG5cdDB4MEQ6IHsgbjogJ01vZGlmaWVkRGF0ZScsIHQ6IFZUX0ZJTEVUSU1FIH0sXG5cdDB4MEU6IHsgbjogJ1BhZ2VDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MEY6IHsgbjogJ1dvcmRDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MTA6IHsgbjogJ0NoYXJDb3VudCcsIHQ6IFZUX0k0IH0sXG5cdDB4MTE6IHsgbjogJ1RodW1ibmFpbCcsIHQ6IFZUX0NGIH0sXG5cdDB4MTI6IHsgbjogJ0FwcGxpY2F0aW9uTmFtZScsIHQ6IFZUX0xQU1RSIH0sXG5cdDB4MTM6IHsgbjogJ0RvY3VtZW50U2VjdXJpdHknLCB0OiBWVF9JNCB9LFxuXHQweEZGOiB7fVxuXHR9O1xuXG5cdC8qIFtNUy1PTEVQU10gMi4xOCAqL1xuXHR2YXIgU3BlY2lhbFByb3BlcnRpZXMgPSB7XG5cdDB4ODAwMDAwMDA6IHsgbjogJ0xvY2FsZScsIHQ6IFZUX1VJNCB9LFxuXHQweDgwMDAwMDAzOiB7IG46ICdCZWhhdmlvcicsIHQ6IFZUX1VJNCB9LFxuXHQweDcyNjI3MjYyOiB7fVxuXHR9O1xuXG5cdChmdW5jdGlvbigpIHtcblx0XHRmb3IodmFyIHkgaW4gU3BlY2lhbFByb3BlcnRpZXMpIGlmKFNwZWNpYWxQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHkpKVxuXHRcdERvY1N1bW1hcnlQSUREU0lbeV0gPSBTdW1tYXJ5UElEU0lbeV0gPSBTcGVjaWFsUHJvcGVydGllc1t5XTtcblx0fSkoKTtcblxuXHQvKiBbTVMtWExTXSAyLjQuNjMgQ291bnRyeS9SZWdpb24gY29kZXMgKi9cblx0dmFyIENvdW50cnlFbnVtID0ge1xuXHQweDAwMDE6IFwiVVNcIiwgLy8gVW5pdGVkIFN0YXRlc1xuXHQweDAwMDI6IFwiQ0FcIiwgLy8gQ2FuYWRhXG5cdDB4MDAwMzogXCJcIiwgLy8gTGF0aW4gQW1lcmljYSAoZXhjZXB0IEJyYXppbClcblx0MHgwMDA3OiBcIlJVXCIsIC8vIFJ1c3NpYVxuXHQweDAwMTQ6IFwiRUdcIiwgLy8gRWd5cHRcblx0MHgwMDFFOiBcIkdSXCIsIC8vIEdyZWVjZVxuXHQweDAwMUY6IFwiTkxcIiwgLy8gTmV0aGVybGFuZHNcblx0MHgwMDIwOiBcIkJFXCIsIC8vIEJlbGdpdW1cblx0MHgwMDIxOiBcIkZSXCIsIC8vIEZyYW5jZVxuXHQweDAwMjI6IFwiRVNcIiwgLy8gU3BhaW5cblx0MHgwMDI0OiBcIkhVXCIsIC8vIEh1bmdhcnlcblx0MHgwMDI3OiBcIklUXCIsIC8vIEl0YWx5XG5cdDB4MDAyOTogXCJDSFwiLCAvLyBTd2l0emVybGFuZFxuXHQweDAwMkI6IFwiQVRcIiwgLy8gQXVzdHJpYVxuXHQweDAwMkM6IFwiR0JcIiwgLy8gVW5pdGVkIEtpbmdkb21cblx0MHgwMDJEOiBcIkRLXCIsIC8vIERlbm1hcmtcblx0MHgwMDJFOiBcIlNFXCIsIC8vIFN3ZWRlblxuXHQweDAwMkY6IFwiTk9cIiwgLy8gTm9yd2F5XG5cdDB4MDAzMDogXCJQTFwiLCAvLyBQb2xhbmRcblx0MHgwMDMxOiBcIkRFXCIsIC8vIEdlcm1hbnlcblx0MHgwMDM0OiBcIk1YXCIsIC8vIE1leGljb1xuXHQweDAwMzc6IFwiQlJcIiwgLy8gQnJhemlsXG5cdDB4MDAzZDogXCJBVVwiLCAvLyBBdXN0cmFsaWFcblx0MHgwMDQwOiBcIk5aXCIsIC8vIE5ldyBaZWFsYW5kXG5cdDB4MDA0MjogXCJUSFwiLCAvLyBUaGFpbGFuZFxuXHQweDAwNTE6IFwiSlBcIiwgLy8gSmFwYW5cblx0MHgwMDUyOiBcIktSXCIsIC8vIEtvcmVhXG5cdDB4MDA1NDogXCJWTlwiLCAvLyBWaWV0IE5hbVxuXHQweDAwNTY6IFwiQ05cIiwgLy8gQ2hpbmFcblx0MHgwMDVBOiBcIlRSXCIsIC8vIFR1cmtleVxuXHQweDAwNjk6IFwiSlNcIiwgLy8gUmFtYXN0YW5cblx0MHgwMEQ1OiBcIkRaXCIsIC8vIEFsZ2VyaWFcblx0MHgwMEQ4OiBcIk1BXCIsIC8vIE1vcm9jY29cblx0MHgwMERBOiBcIkxZXCIsIC8vIExpYnlhXG5cdDB4MDE1RjogXCJQVFwiLCAvLyBQb3J0dWdhbFxuXHQweDAxNjI6IFwiSVNcIiwgLy8gSWNlbGFuZFxuXHQweDAxNjY6IFwiRklcIiwgLy8gRmlubGFuZFxuXHQweDAxQTQ6IFwiQ1pcIiwgLy8gQ3plY2ggUmVwdWJsaWNcblx0MHgwMzc2OiBcIlRXXCIsIC8vIFRhaXdhblxuXHQweDAzQzE6IFwiTEJcIiwgLy8gTGViYW5vblxuXHQweDAzQzI6IFwiSk9cIiwgLy8gSm9yZGFuXG5cdDB4MDNDMzogXCJTWVwiLCAvLyBTeXJpYVxuXHQweDAzQzQ6IFwiSVFcIiwgLy8gSXJhcVxuXHQweDAzQzU6IFwiS1dcIiwgLy8gS3V3YWl0XG5cdDB4MDNDNjogXCJTQVwiLCAvLyBTYXVkaSBBcmFiaWFcblx0MHgwM0NCOiBcIkFFXCIsIC8vIFVuaXRlZCBBcmFiIEVtaXJhdGVzXG5cdDB4MDNDQzogXCJJTFwiLCAvLyBJc3JhZWxcblx0MHgwM0NFOiBcIlFBXCIsIC8vIFFhdGFyXG5cdDB4MDNENTogXCJJUlwiLCAvLyBJcmFuXG5cdDB4RkZGRjogXCJVU1wiICAvLyBVbml0ZWQgU3RhdGVzXG5cdH07XG5cblx0LyogW01TLVhMU10gMi41LjEyNyAqL1xuXHR2YXIgWExTRmlsbFBhdHRlcm4gPSBbXG5cdFx0bnVsbCxcblx0XHQnc29saWQnLFxuXHRcdCdtZWRpdW1HcmF5Jyxcblx0XHQnZGFya0dyYXknLFxuXHRcdCdsaWdodEdyYXknLFxuXHRcdCdkYXJrSG9yaXpvbnRhbCcsXG5cdFx0J2RhcmtWZXJ0aWNhbCcsXG5cdFx0J2RhcmtEb3duJyxcblx0XHQnZGFya1VwJyxcblx0XHQnZGFya0dyaWQnLFxuXHRcdCdkYXJrVHJlbGxpcycsXG5cdFx0J2xpZ2h0SG9yaXpvbnRhbCcsXG5cdFx0J2xpZ2h0VmVydGljYWwnLFxuXHRcdCdsaWdodERvd24nLFxuXHRcdCdsaWdodFVwJyxcblx0XHQnbGlnaHRHcmlkJyxcblx0XHQnbGlnaHRUcmVsbGlzJyxcblx0XHQnZ3JheTEyNScsXG5cdFx0J2dyYXkwNjI1J1xuXHRdO1xuXG5cdGZ1bmN0aW9uIHJnYmlmeShhcnIpIHsgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gWyh4Pj4xNikmMjU1LCh4Pj44KSYyNTUseCYyNTVdOyB9KTsgfVxuXG5cdC8qIFtNUy1YTFNdIDIuNS4xNjEgKi9cblx0LyogW01TLVhMU0JdIDIuNS43NSAqL1xuXHR2YXIgWExTSWN2ID0gcmdiaWZ5KFtcblx0XHQvKiBDb2xvciBDb25zdGFudHMgKi9cblx0XHQweDAwMDAwMCxcblx0XHQweEZGRkZGRixcblx0XHQweEZGMDAwMCxcblx0XHQweDAwRkYwMCxcblx0XHQweDAwMDBGRixcblx0XHQweEZGRkYwMCxcblx0XHQweEZGMDBGRixcblx0XHQweDAwRkZGRixcblxuXHRcdC8qIE92ZXJyaWRhYmxlIERlZmF1bHRzICovXG5cdFx0MHgwMDAwMDAsXG5cdFx0MHhGRkZGRkYsXG5cdFx0MHhGRjAwMDAsXG5cdFx0MHgwMEZGMDAsXG5cdFx0MHgwMDAwRkYsXG5cdFx0MHhGRkZGMDAsXG5cdFx0MHhGRjAwRkYsXG5cdFx0MHgwMEZGRkYsXG5cblx0XHQweDgwMDAwMCxcblx0XHQweDAwODAwMCxcblx0XHQweDAwMDA4MCxcblx0XHQweDgwODAwMCxcblx0XHQweDgwMDA4MCxcblx0XHQweDAwODA4MCxcblx0XHQweEMwQzBDMCxcblx0XHQweDgwODA4MCxcblx0XHQweDk5OTlGRixcblx0XHQweDk5MzM2Nixcblx0XHQweEZGRkZDQyxcblx0XHQweENDRkZGRixcblx0XHQweDY2MDA2Nixcblx0XHQweEZGODA4MCxcblx0XHQweDAwNjZDQyxcblx0XHQweENDQ0NGRixcblxuXHRcdDB4MDAwMDgwLFxuXHRcdDB4RkYwMEZGLFxuXHRcdDB4RkZGRjAwLFxuXHRcdDB4MDBGRkZGLFxuXHRcdDB4ODAwMDgwLFxuXHRcdDB4ODAwMDAwLFxuXHRcdDB4MDA4MDgwLFxuXHRcdDB4MDAwMEZGLFxuXHRcdDB4MDBDQ0ZGLFxuXHRcdDB4Q0NGRkZGLFxuXHRcdDB4Q0NGRkNDLFxuXHRcdDB4RkZGRjk5LFxuXHRcdDB4OTlDQ0ZGLFxuXHRcdDB4RkY5OUNDLFxuXHRcdDB4Q0M5OUZGLFxuXHRcdDB4RkZDQzk5LFxuXG5cdFx0MHgzMzY2RkYsXG5cdFx0MHgzM0NDQ0MsXG5cdFx0MHg5OUNDMDAsXG5cdFx0MHhGRkNDMDAsXG5cdFx0MHhGRjk5MDAsXG5cdFx0MHhGRjY2MDAsXG5cdFx0MHg2NjY2OTksXG5cdFx0MHg5Njk2OTYsXG5cdFx0MHgwMDMzNjYsXG5cdFx0MHgzMzk5NjYsXG5cdFx0MHgwMDMzMDAsXG5cdFx0MHgzMzMzMDAsXG5cdFx0MHg5OTMzMDAsXG5cdFx0MHg5OTMzNjYsXG5cdFx0MHgzMzMzOTksXG5cdFx0MHgzMzMzMzMsXG5cblx0XHQvKiBPdGhlciBlbnRyaWVzIHRvIGFwcGVhc2UgQklGRjgvMTIgKi9cblx0XHQweEZGRkZGRiwgLyogMHg0MCBpY3ZGb3JlZ3JvdW5kID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NDEgaWN2QmFja2dyb3VuZCA/PyAqL1xuXHRcdDB4MDAwMDAwLCAvKiAweDQyIGljdkZyYW1lID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NDMgaWN2M0QgPz8gKi9cblx0XHQweDAwMDAwMCwgLyogMHg0NCBpY3YzRFRleHQgPz8gKi9cblx0XHQweDAwMDAwMCwgLyogMHg0NSBpY3YzREhpbGl0ZSA/PyAqL1xuXHRcdDB4MDAwMDAwLCAvKiAweDQ2IGljdjNEU2hhZG93ID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NDcgaWN2SGlsaXRlID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NDggaWN2Q3RsVGV4dCA/PyAqL1xuXHRcdDB4MDAwMDAwLCAvKiAweDQ5IGljdkN0bFNjcmwgPz8gKi9cblx0XHQweDAwMDAwMCwgLyogMHg0QSBpY3ZDdGxJbnYgPz8gKi9cblx0XHQweDAwMDAwMCwgLyogMHg0QiBpY3ZDdGxCb2R5ID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NEMgaWN2Q3RsRnJhbWUgPz8gKi9cblx0XHQweDAwMDAwMCwgLyogMHg0RCBpY3ZDdGxGb3JlID8/ICovXG5cdFx0MHgwMDAwMDAsIC8qIDB4NEUgaWN2Q3RsQmFjayA/PyAqL1xuXHRcdDB4MDAwMDAwLCAvKiAweDRGIGljdkN0bE5ldXRyYWwgKi9cblx0XHQweDAwMDAwMCwgLyogMHg1MCBpY3ZJbmZvQmsgPz8gKi9cblx0XHQweDAwMDAwMCAvKiAweDUxIGljdkluZm9UZXh0ID8/ICovXG5cdF0pO1xuXG5cdC8qIFBhcnRzIGVudW1lcmF0ZWQgaW4gT1BDIHNwZWMsIE1TLVhMU0IgYW5kIE1TLVhMU1ggKi9cblx0LyogMTIuMyBQYXJ0IFN1bW1hcnkgPFNwcmVhZHNoZWV0TUw+ICovXG5cdC8qIDE0LjIgUGFydCBTdW1tYXJ5IDxEcmF3aW5nTUw+ICovXG5cdC8qIFtNUy1YTFNYXSAyLjEgUGFydCBFbnVtZXJhdGlvbnMgKi9cblx0LyogW01TLVhMU0JdIDIuMS43IFBhcnQgRW51bWVyYXRpb24gKi9cblx0dmFyIGN0MnR5cGUvKntbc3RyaW5nXTpzdHJpbmd9Ki8gPSAoe1xuXHRcdC8qIFdvcmtib29rICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldC5tYWluK3htbFwiOiBcIndvcmtib29rc1wiLFxuXG5cdFx0LyogV29ya3NoZWV0ICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYmluSW5kZXhXc1wiOiBcIlRPRE9cIiwgLyogQmluYXJ5IEluZGV4ICovXG5cblx0XHQvKiBNYWNyb3NoZWV0ICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuaW50bG1hY3Jvc2hlZXRcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYmluSW5kZXhNc1wiOiBcIlRPRE9cIiwgLyogQmluYXJ5IEluZGV4ICovXG5cblx0XHQvKiBGaWxlIFByb3BlcnRpZXMgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIjogXCJjb3JlcHJvcHNcIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b20tcHJvcGVydGllcyt4bWxcIjogXCJjdXN0cHJvcHNcIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5leHRlbmRlZC1wcm9wZXJ0aWVzK3htbFwiOiBcImV4dHByb3BzXCIsXG5cblx0XHQvKiBDdXN0b20gRGF0YSBQcm9wZXJ0aWVzICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuY3VzdG9tWG1sUHJvcGVydGllcyt4bWxcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jdXN0b21Qcm9wZXJ0eVwiOiBcIlRPRE9cIixcblxuXHRcdC8qIFBpdm90VGFibGUgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5waXZvdFRhYmxlXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RUYWJsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBDaGFydCBDb2xvcnMgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UuY2hhcnRjb2xvcnN0eWxlK3htbFwiOiBcIlRPRE9cIixcblxuXHRcdC8qIENoYXJ0IFN0eWxlICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmNoYXJ0c3R5bGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogQ2FsY3VsYXRpb24gQ2hhaW4gKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5jYWxjQ2hhaW5cIjogXCJjYWxjY2hhaW5zXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jYWxjQ2hhaW4reG1sXCI6IFwiY2FsY2NoYWluc1wiLFxuXG5cdFx0LyogUHJpbnRlciBTZXR0aW5ncyAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucHJpbnRlclNldHRpbmdzXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogQWN0aXZlWCAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS5hY3RpdmVYXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLW9mZmljZS5hY3RpdmVYK3htbFwiOiBcIlRPRE9cIixcblxuXHRcdC8qIEN1c3RvbSBUb29sYmFycyAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmF0dGFjaGVkVG9vbGJhcnNcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBFeHRlcm5hbCBEYXRhIENvbm5lY3Rpb25zICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29ubmVjdGlvbnNcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5jb25uZWN0aW9ucyt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBFeHRlcm5hbCBMaW5rcyAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmV4dGVybmFsTGlua1wiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmV4dGVybmFsTGluayt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBNZXRhZGF0YSAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0TWV0YWRhdGFcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldE1ldGFkYXRhK3htbFwiOiBcIlRPRE9cIixcblxuXHRcdC8qIFBpdm90Q2FjaGUgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5waXZvdENhY2hlRGVmaW5pdGlvblwiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5waXZvdENhY2hlUmVjb3Jkc1wiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90Q2FjaGVEZWZpbml0aW9uK3htbFwiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90Q2FjaGVSZWNvcmRzK3htbFwiOiBcIlRPRE9cIixcblxuXHRcdC8qIFF1ZXJ5IFRhYmxlICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwucXVlcnlUYWJsZVwiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnF1ZXJ5VGFibGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogU2hhcmVkIFdvcmtib29rICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudXNlck5hbWVzXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnJldmlzaW9uSGVhZGVyc1wiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5yZXZpc2lvbkxvZ1wiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnJldmlzaW9uSGVhZGVycyt4bWxcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5yZXZpc2lvbkxvZyt4bWxcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC51c2VyTmFtZXMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogU2luZ2xlIENlbGwgVGFibGUgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50YWJsZVNpbmdsZUNlbGxzXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGFibGVTaW5nbGVDZWxscyt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBTbGljZXIgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zbGljZXJcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2xpY2VyQ2FjaGVcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2xpY2VyK3htbFwiOiBcIlRPRE9cIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zbGljZXJDYWNoZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBTb3J0IE1hcCAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLndzU29ydE1hcFwiOiBcIlRPRE9cIixcblxuXHRcdC8qIFRhYmxlICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwudGFibGVcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC50YWJsZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBUaGVtZXMgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC50aGVtZSt4bWxcIjogXCJ0aGVtZXNcIixcblxuXHRcdC8qIFRoZW1lIE92ZXJyaWRlICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWVPdmVycmlkZSt4bWxcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBUaW1lbGluZSAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLlRpbWVsaW5lK3htbFwiOiBcIlRPRE9cIiwgLyogdmVyaWZ5ICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuVGltZWxpbmVDYWNoZSt4bWxcIjogXCJUT0RPXCIsIC8qIHZlcmlmeSAqL1xuXG5cdFx0LyogVkJBICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLnZiYVByb2plY3RcIjogXCJ2YmFcIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2UudmJhUHJvamVjdFNpZ25hdHVyZVwiOiBcInZiYVwiLFxuXG5cdFx0LyogVm9sYXRpbGUgRGVwZW5kZW5jaWVzICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLnZvbGF0aWxlRGVwZW5kZW5jaWVzXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudm9sYXRpbGVEZXBlbmRlbmNpZXMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogQ29udHJvbCBQcm9wZXJ0aWVzICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuY29udHJvbHByb3BlcnRpZXMreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogRGF0YSBNb2RlbCAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50Lm1vZGVsK2RhdGFcIjogXCJUT0RPXCIsXG5cblx0XHQvKiBTdXJ2ZXkgKi9cblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5TdXJ2ZXkreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogRHJhd2luZyAqL1xuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmcreG1sXCI6IFwiZHJhd2luZ3NcIixcblx0XHRcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuY2hhcnQreG1sXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5jaGFydHNoYXBlcyt4bWxcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1Db2xvcnMreG1sXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtRGF0YSt4bWxcIjogXCJUT0RPXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1MYXlvdXQreG1sXCI6IFwiVE9ET1wiLFxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtU3R5bGUreG1sXCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogVk1MICovXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudm1sRHJhd2luZ1wiOiBcIlRPRE9cIixcblxuXHRcdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UucmVsYXRpb25zaGlwcyt4bWxcIjogXCJyZWxzXCIsXG5cdFx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQub2xlT2JqZWN0XCI6IFwiVE9ET1wiLFxuXG5cdFx0LyogSW1hZ2UgKi9cblx0XHRcImltYWdlL3BuZ1wiOiBcIlRPRE9cIixcblxuXHRcdFwic2hlZXRcIjogXCJqc1wiXG5cdH0pO1xuXG5cdHZhciBDVF9MSVNUID0gKGZ1bmN0aW9uKCl7XG5cdFx0dmFyIG8gPSB7XG5cdFx0XHR3b3JrYm9va3M6IHtcblx0XHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldC5tYWluK3htbFwiLFxuXHRcdFx0XHR4bHNtOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb0VuYWJsZWQubWFpbit4bWxcIixcblx0XHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuc2hlZXQuYmluYXJ5Lm1hY3JvRW5hYmxlZC5tYWluXCIsXG5cdFx0XHRcdHhsdHg6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGUubWFpbit4bWxcIlxuXHRcdFx0fSxcblx0XHRcdHN0cnM6IHsgLyogU2hhcmVkIFN0cmluZ3MgKi9cblx0XHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGFyZWRTdHJpbmdzK3htbFwiLFxuXHRcdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGFyZWRTdHJpbmdzXCJcblx0XHRcdH0sXG5cdFx0XHRjb21tZW50czogeyAvKiBDb21tZW50cyAqL1xuXHRcdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNvbW1lbnRzK3htbFwiLFxuXHRcdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5jb21tZW50c1wiXG5cdFx0XHR9LFxuXHRcdFx0c2hlZXRzOiB7IC8qIFdvcmtzaGVldCAqL1xuXHRcdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLndvcmtzaGVldCt4bWxcIixcblx0XHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwud29ya3NoZWV0XCJcblx0XHRcdH0sXG5cdFx0XHRjaGFydHM6IHsgLyogQ2hhcnRzaGVldCAqL1xuXHRcdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNoYXJ0c2hlZXQreG1sXCIsXG5cdFx0XHRcdHhsc2I6IFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLmNoYXJ0c2hlZXRcIlxuXHRcdFx0fSxcblx0XHRcdGRpYWxvZ3M6IHsgLyogRGlhbG9nc2hlZXQgKi9cblx0XHRcdFx0eGxzeDogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5kaWFsb2dzaGVldCt4bWxcIixcblx0XHRcdFx0eGxzYjogXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuZGlhbG9nc2hlZXRcIlxuXHRcdFx0fSxcblx0XHRcdG1hY3JvczogeyAvKiBNYWNyb3NoZWV0IChFeGNlbCA0LjAgTWFjcm9zKSAqL1xuXHRcdFx0XHR4bHN4OiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0K3htbFwiLFxuXHRcdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5tYWNyb3NoZWV0XCJcblx0XHRcdH0sXG5cdFx0XHRzdHlsZXM6IHsgLyogU3R5bGVzICovXG5cdFx0XHRcdHhsc3g6IFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc3R5bGVzK3htbFwiLFxuXHRcdFx0XHR4bHNiOiBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zdHlsZXNcIlxuXHRcdFx0fVxuXHRcdH07XG5cdFx0a2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsgaWYoIW9ba10ueGxzbSkgb1trXS54bHNtID0gb1trXS54bHN4OyB9KTtcblx0XHRrZXlzKG8pLmZvckVhY2goZnVuY3Rpb24oayl7IGtleXMob1trXSkuZm9yRWFjaChmdW5jdGlvbih2KSB7IGN0MnR5cGVbb1trXVt2XV0gPSBrOyB9KTsgfSk7XG5cdFx0cmV0dXJuIG87XG5cdH0pKCk7XG5cblx0dmFyIHR5cGUyY3QvKntbc3RyaW5nXTpBcnJheTxzdHJpbmc+fSovID0gZXZlcnRfYXJyKGN0MnR5cGUpO1xuXG5cdFhNTE5TLkNUID0gJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvY29udGVudC10eXBlcyc7XG5cblx0ZnVuY3Rpb24gcGFyc2VfY3QoZGF0YSwgb3B0cykge1xuXHRcdHZhciBjdCA9ICh7XG5cdFx0XHR3b3JrYm9va3M6W10sIHNoZWV0czpbXSwgY2hhcnRzOltdLCBkaWFsb2dzOltdLCBtYWNyb3M6W10sXG5cdFx0XHRyZWxzOltdLCBzdHJzOltdLCBjb21tZW50czpbXSxcblx0XHRcdGNvcmVwcm9wczpbXSwgZXh0cHJvcHM6W10sIGN1c3Rwcm9wczpbXSwgdGhlbWVzOltdLCBzdHlsZXM6W10sXG5cdFx0XHRjYWxjY2hhaW5zOltdLCB2YmE6IFtdLCBkcmF3aW5nczogW10sXG5cdFx0XHRUT0RPOltdLCB4bWxuczogXCJcIiB9KTtcblx0XHRpZighZGF0YSB8fCAhZGF0YS5tYXRjaCkgcmV0dXJuIGN0O1xuXHRcdHZhciBjdGV4dCA9IHt9O1xuXHRcdChkYXRhLm1hdGNoKHRhZ3JlZ2V4KXx8W10pLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRcdHN3aXRjaCh5WzBdLnJlcGxhY2UobnNyZWdleCxcIjxcIikpIHtcblx0XHRcdFx0Y2FzZSAnPD94bWwnOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPFR5cGVzJzogY3QueG1sbnMgPSB5Wyd4bWxucycgKyAoeVswXS5tYXRjaCgvPChcXHcrKTovKXx8W1wiXCIsXCJcIl0pWzFdIF07IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8RGVmYXVsdCc6IGN0ZXh0W3kuRXh0ZW5zaW9uXSA9IHkuQ29udGVudFR5cGU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8T3ZlcnJpZGUnOlxuXHRcdFx0XHRcdGlmKGN0W2N0MnR5cGVbeS5Db250ZW50VHlwZV1dICE9PSB1bmRlZmluZWQpIGN0W2N0MnR5cGVbeS5Db250ZW50VHlwZV1dLnB1c2goeS5QYXJ0TmFtZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0aWYoY3QueG1sbnMgIT09IFhNTE5TLkNUKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIE5hbWVzcGFjZTogXCIgKyBjdC54bWxucyk7XG5cdFx0Y3QuY2FsY2NoYWluID0gY3QuY2FsY2NoYWlucy5sZW5ndGggPiAwID8gY3QuY2FsY2NoYWluc1swXSA6IFwiXCI7XG5cdFx0Y3Quc3N0ID0gY3Quc3Rycy5sZW5ndGggPiAwID8gY3Quc3Ryc1swXSA6IFwiXCI7XG5cdFx0Y3Quc3R5bGUgPSBjdC5zdHlsZXMubGVuZ3RoID4gMCA/IGN0LnN0eWxlc1swXSA6IFwiXCI7XG5cdFx0Y3QuZGVmYXVsdHMgPSBjdGV4dDtcblx0XHRkZWxldGUgY3QuY2FsY2NoYWlucztcblx0XHRyZXR1cm4gY3Q7XG5cdH1cblxuXHR2YXIgQ1RZUEVfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ1R5cGVzJywgbnVsbCwge1xuXHRcdCd4bWxucyc6IFhNTE5TLkNULFxuXHRcdCd4bWxuczp4c2QnOiBYTUxOUy54c2QsXG5cdFx0J3htbG5zOnhzaSc6IFhNTE5TLnhzaVxuXHR9KTtcblxuXHR2YXIgQ1RZUEVfREVGQVVMVFMgPSBbXG5cdFx0Wyd4bWwnLCAnYXBwbGljYXRpb24veG1sJ10sXG5cdFx0WydiaW4nLCAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQubWFpbiddLFxuXHRcdFsndm1sJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC52bWxEcmF3aW5nJ10sXG5cdFx0LyogZnJvbSB0ZXN0IGZpbGVzICovXG5cdFx0WydibXAnLCAnaW1hZ2UvYm1wJ10sXG5cdFx0WydwbmcnLCAnaW1hZ2UvcG5nJ10sXG5cdFx0WydnaWYnLCAnaW1hZ2UvZ2lmJ10sXG5cdFx0WydlbWYnLCAnaW1hZ2UveC1lbWYnXSxcblx0XHRbJ3dtZicsICdpbWFnZS94LXdtZiddLFxuXHRcdFsnanBnJywgJ2ltYWdlL2pwZWcnXSwgWydqcGVnJywgJ2ltYWdlL2pwZWcnXSxcblx0XHRbJ3RpZicsICdpbWFnZS90aWZmJ10sIFsndGlmZicsICdpbWFnZS90aWZmJ10sXG5cdFx0WydwZGYnLCAnYXBwbGljYXRpb24vcGRmJ10sXG5cdFx0WydyZWxzJywgdHlwZTJjdC5yZWxzWzBdXVxuXHRdLm1hcChmdW5jdGlvbih4KSB7XG5cdFx0cmV0dXJuIHdyaXRleHRhZygnRGVmYXVsdCcsIG51bGwsIHsnRXh0ZW5zaW9uJzp4WzBdLCAnQ29udGVudFR5cGUnOiB4WzFdfSk7XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHdyaXRlX2N0KGN0LCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBbXSwgdjtcblx0XHRvW28ubGVuZ3RoXSA9IChYTUxfSEVBREVSKTtcblx0XHRvW28ubGVuZ3RoXSA9IChDVFlQRV9YTUxfUk9PVCk7XG5cdFx0byA9IG8uY29uY2F0KENUWVBFX0RFRkFVTFRTKTtcblx0XHR2YXIgZjEgPSBmdW5jdGlvbih3KSB7XG5cdFx0XHRpZihjdFt3XSAmJiBjdFt3XS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHYgPSBjdFt3XVswXTtcblx0XHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdPdmVycmlkZScsIG51bGwsIHtcblx0XHRcdFx0XHQnUGFydE5hbWUnOiAodlswXSA9PSAnLycgPyBcIlwiOlwiL1wiKSArIHYsXG5cdFx0XHRcdFx0J0NvbnRlbnRUeXBlJzogQ1RfTElTVFt3XVtvcHRzLmJvb2tUeXBlIHx8ICd4bHN4J11cblx0XHRcdFx0fSkpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dmFyIGYyID0gZnVuY3Rpb24odykge1xuXHRcdFx0KGN0W3ddfHxbXSkuZm9yRWFjaChmdW5jdGlvbih2KSB7XG5cdFx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnT3ZlcnJpZGUnLCBudWxsLCB7XG5cdFx0XHRcdFx0J1BhcnROYW1lJzogKHZbMF0gPT0gJy8nID8gXCJcIjpcIi9cIikgKyB2LFxuXHRcdFx0XHRcdCdDb250ZW50VHlwZSc6IENUX0xJU1Rbd11bb3B0cy5ib29rVHlwZSB8fCAneGxzeCddXG5cdFx0XHRcdH0pKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdFx0dmFyIGYzID0gZnVuY3Rpb24odCkge1xuXHRcdFx0KGN0W3RdfHxbXSkuZm9yRWFjaChmdW5jdGlvbih2KSB7XG5cdFx0XHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnT3ZlcnJpZGUnLCBudWxsLCB7XG5cdFx0XHRcdFx0J1BhcnROYW1lJzogKHZbMF0gPT0gJy8nID8gXCJcIjpcIi9cIikgKyB2LFxuXHRcdFx0XHRcdCdDb250ZW50VHlwZSc6IHR5cGUyY3RbdF1bMF1cblx0XHRcdFx0fSkpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0XHRmMSgnd29ya2Jvb2tzJyk7XG5cdFx0ZjIoJ3NoZWV0cycpO1xuXHRcdGYyKCdjaGFydHMnKTtcblx0XHRmMygndGhlbWVzJyk7XG5cdFx0WydzdHJzJywgJ3N0eWxlcyddLmZvckVhY2goZjEpO1xuXHRcdFsnY29yZXByb3BzJywgJ2V4dHByb3BzJywgJ2N1c3Rwcm9wcyddLmZvckVhY2goZjMpO1xuXHRcdGYzKCd2YmEnKTtcblx0XHRmMygnY29tbWVudHMnKTtcblx0XHRmMygnZHJhd2luZ3MnKTtcblx0XHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvVHlwZXM+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cdC8qIDkuMyBSZWxhdGlvbnNoaXBzICovXG5cdHZhciBSRUxTID0gKHtcblx0XHRXQjogXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL29mZmljZURvY3VtZW50XCIsXG5cdFx0U0hFRVQ6IFwiaHR0cDovL3NoZWV0anMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9vZmZpY2VEb2N1bWVudFwiLFxuXHRcdEhMSU5LOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaHlwZXJsaW5rXCIsXG5cdFx0Vk1MOiBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvdm1sRHJhd2luZ1wiLFxuXHRcdFZCQTogXCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMDA2L3JlbGF0aW9uc2hpcHMvdmJhUHJvamVjdFwiXG5cdH0pO1xuXG5cdC8qIDkuMy4zIFJlcHJlc2VudGluZyBSZWxhdGlvbnNoaXBzICovXG5cdGZ1bmN0aW9uIGdldF9yZWxzX3BhdGgoZmlsZSkge1xuXHRcdHZhciBuID0gZmlsZS5sYXN0SW5kZXhPZihcIi9cIik7XG5cdFx0cmV0dXJuIGZpbGUuc3Vic3RyKDAsbisxKSArICdfcmVscy8nICsgZmlsZS5zdWJzdHIobisxKSArIFwiLnJlbHNcIjtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX3JlbHMoZGF0YSwgY3VycmVudEZpbGVQYXRoKSB7XG5cdFx0aWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblx0XHRpZiAoY3VycmVudEZpbGVQYXRoLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG5cdFx0XHRjdXJyZW50RmlsZVBhdGggPSAnLycrY3VycmVudEZpbGVQYXRoO1xuXHRcdH1cblx0XHR2YXIgcmVscyA9IHt9O1xuXHRcdHZhciBoYXNoID0ge307XG5cblx0XHQoZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0XHQvKiA5LjMuMi4yIE9QQ19SZWxhdGlvbnNoaXBzICovXG5cdFx0XHRpZiAoeVswXSA9PT0gJzxSZWxhdGlvbnNoaXAnKSB7XG5cdFx0XHRcdHZhciByZWwgPSB7fTsgcmVsLlR5cGUgPSB5LlR5cGU7IHJlbC5UYXJnZXQgPSB5LlRhcmdldDsgcmVsLklkID0geS5JZDsgcmVsLlRhcmdldE1vZGUgPSB5LlRhcmdldE1vZGU7XG5cdFx0XHRcdHZhciBjYW5vbmljdGFyZ2V0ID0geS5UYXJnZXRNb2RlID09PSAnRXh0ZXJuYWwnID8geS5UYXJnZXQgOiByZXNvbHZlX3BhdGgoeS5UYXJnZXQsIGN1cnJlbnRGaWxlUGF0aCk7XG5cdFx0XHRcdHJlbHNbY2Fub25pY3RhcmdldF0gPSByZWw7XG5cdFx0XHRcdGhhc2hbeS5JZF0gPSByZWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmVsc1tcIiFpZFwiXSA9IGhhc2g7XG5cdFx0cmV0dXJuIHJlbHM7XG5cdH1cblxuXHRYTUxOUy5SRUxTID0gJ2h0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9wYWNrYWdlLzIwMDYvcmVsYXRpb25zaGlwcyc7XG5cblx0dmFyIFJFTFNfUk9PVCA9IHdyaXRleHRhZygnUmVsYXRpb25zaGlwcycsIG51bGwsIHtcblx0XHQvLyd4bWxuczpuczAnOiBYTUxOUy5SRUxTLFxuXHRcdCd4bWxucyc6IFhNTE5TLlJFTFNcblx0fSk7XG5cblx0LyogVE9ETyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9yZWxzKHJlbHMpIHtcblx0XHR2YXIgbyA9IFtYTUxfSEVBREVSLCBSRUxTX1JPT1RdO1xuXHRcdGtleXMocmVsc1snIWlkJ10pLmZvckVhY2goZnVuY3Rpb24ocmlkKSB7XG5cdFx0XHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ1JlbGF0aW9uc2hpcCcsIG51bGwsIHJlbHNbJyFpZCddW3JpZF0pKTtcblx0XHR9KTtcblx0XHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvUmVsYXRpb25zaGlwcz4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRfcmVscyhyZWxzLCBySWQsIGYsIHR5cGUsIHJlbG9iaikge1xuXHRcdGlmKCFyZWxvYmopIHJlbG9iaiA9IHt9O1xuXHRcdGlmKCFyZWxzWychaWQnXSkgcmVsc1snIWlkJ10gPSB7fTtcblx0XHRpZihySWQgPCAwKSBmb3IocklkID0gMTsgcmVsc1snIWlkJ11bJ3JJZCcgKyBySWRdOyArK3JJZCl7LyogZW1wdHkgKi99XG5cdFx0cmVsb2JqLklkID0gJ3JJZCcgKyBySWQ7XG5cdFx0cmVsb2JqLlR5cGUgPSB0eXBlO1xuXHRcdHJlbG9iai5UYXJnZXQgPSBmO1xuXHRcdGlmKHJlbG9iai5UeXBlID09IFJFTFMuSExJTkspIHJlbG9iai5UYXJnZXRNb2RlID0gXCJFeHRlcm5hbFwiO1xuXHRcdGlmKHJlbHNbJyFpZCddW3JlbG9iai5JZF0pIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXdyaXRlIHJJZCBcIiArIHJJZCk7XG5cdFx0cmVsc1snIWlkJ11bcmVsb2JqLklkXSA9IHJlbG9iajtcblx0XHRyZWxzWygnLycgKyByZWxvYmouVGFyZ2V0KS5yZXBsYWNlKFwiLy9cIixcIi9cIildID0gcmVsb2JqO1xuXHRcdHJldHVybiBySWQ7XG5cdH1cblx0LyogT3BlbiBEb2N1bWVudCBGb3JtYXQgZm9yIE9mZmljZSBBcHBsaWNhdGlvbnMgKE9wZW5Eb2N1bWVudCkgVmVyc2lvbiAxLjIgKi9cblx0LyogUGFydCAzIFNlY3Rpb24gNCBNYW5pZmVzdCBGaWxlICovXG5cdHZhciBDVF9PRFMgPSBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIjtcblx0ZnVuY3Rpb24gcGFyc2VfbWFuaWZlc3QoZCwgb3B0cykge1xuXHRcdHZhciBzdHIgPSB4bG1sX25vcm1hbGl6ZShkKTtcblx0XHR2YXIgUm47XG5cdFx0dmFyIEZFdGFnO1xuXHRcdHdoaWxlKChSbiA9IHhsbWxyZWdleC5leGVjKHN0cikpKSBzd2l0Y2goUm5bM10pIHtcblx0XHRcdGNhc2UgJ21hbmlmZXN0JzogYnJlYWs7IC8vIDQuMiA8bWFuaWZlc3Q6bWFuaWZlc3Q+XG5cdFx0XHRjYXNlICdmaWxlLWVudHJ5JzogLy8gNC4zIDxtYW5pZmVzdDpmaWxlLWVudHJ5PlxuXHRcdFx0XHRGRXRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdGlmKEZFdGFnLnBhdGggPT0gJy8nICYmIEZFdGFnLnR5cGUgIT09IENUX09EUykgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBPcGVuRG9jdW1lbnQgaXMgbm90IGEgc3ByZWFkc2hlZXRcIik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnZW5jcnlwdGlvbi1kYXRhJzogLy8gNC40IDxtYW5pZmVzdDplbmNyeXB0aW9uLWRhdGE+XG5cdFx0XHRjYXNlICdhbGdvcml0aG0nOiAvLyA0LjUgPG1hbmlmZXN0OmFsZ29yaXRobT5cblx0XHRcdGNhc2UgJ3N0YXJ0LWtleS1nZW5lcmF0aW9uJzogLy8gNC42IDxtYW5pZmVzdDpzdGFydC1rZXktZ2VuZXJhdGlvbj5cblx0XHRcdGNhc2UgJ2tleS1kZXJpdmF0aW9uJzogLy8gNC43IDxtYW5pZmVzdDprZXktZGVyaXZhdGlvbj5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgT0RTIEVuY3J5cHRpb25cIik7XG5cdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBSbjtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9tYW5pZmVzdChtYW5pZmVzdCwgb3B0cykge1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRcdG8ucHVzaCgnPG1hbmlmZXN0Om1hbmlmZXN0IHhtbG5zOm1hbmlmZXN0PVwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptYW5pZmVzdDoxLjBcIiBtYW5pZmVzdDp2ZXJzaW9uPVwiMS4yXCI+XFxuJyk7XG5cdFx0by5wdXNoKCcgIDxtYW5pZmVzdDpmaWxlLWVudHJ5IG1hbmlmZXN0OmZ1bGwtcGF0aD1cIi9cIiBtYW5pZmVzdDp2ZXJzaW9uPVwiMS4yXCIgbWFuaWZlc3Q6bWVkaWEtdHlwZT1cImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIi8+XFxuJyk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1hbmlmZXN0Lmxlbmd0aDsgKytpKSBvLnB1c2goJyAgPG1hbmlmZXN0OmZpbGUtZW50cnkgbWFuaWZlc3Q6ZnVsbC1wYXRoPVwiJyArIG1hbmlmZXN0W2ldWzBdICsgJ1wiIG1hbmlmZXN0Om1lZGlhLXR5cGU9XCInICsgbWFuaWZlc3RbaV1bMV0gKyAnXCIvPlxcbicpO1xuXHRcdG8ucHVzaCgnPC9tYW5pZmVzdDptYW5pZmVzdD4nKTtcblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cblx0LyogUGFydCAzIFNlY3Rpb24gNiBNZXRhZGF0YSBNYW5pZmVzdCBGaWxlICovXG5cdGZ1bmN0aW9uIHdyaXRlX3JkZl90eXBlKGZpbGUsIHJlcywgdGFnKSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdCcgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PVwiJyArIGZpbGUgKyAnXCI+XFxuJyxcblx0XHRcdCcgICAgPHJkZjp0eXBlIHJkZjpyZXNvdXJjZT1cImh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL25zL29mZmljZS8xLjIvbWV0YS8nICsgKHRhZyB8fCBcIm9kZlwiKSArICcjJyArIHJlcyArICdcIi8+XFxuJyxcblx0XHRcdCcgIDwvcmRmOkRlc2NyaXB0aW9uPlxcbidcblx0XHRdLmpvaW4oXCJcIik7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfcmRmX2hhcyhiYXNlLCBmaWxlKSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdCcgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PVwiJyArIGJhc2UgKyAnXCI+XFxuJyxcblx0XHRcdCcgICAgPG5zMDpoYXNQYXJ0IHhtbG5zOm5zMD1cImh0dHA6Ly9kb2NzLm9hc2lzLW9wZW4ub3JnL25zL29mZmljZS8xLjIvbWV0YS9wa2cjXCIgcmRmOnJlc291cmNlPVwiJyArIGZpbGUgKyAnXCIvPlxcbicsXG5cdFx0XHQnICA8L3JkZjpEZXNjcmlwdGlvbj5cXG4nXG5cdFx0XS5qb2luKFwiXCIpO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX3JkZihyZGYsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0XHRvLnB1c2goJzxyZGY6UkRGIHhtbG5zOnJkZj1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyNcIj5cXG4nKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IHJkZi5sZW5ndGg7ICsraSkge1xuXHRcdFx0by5wdXNoKHdyaXRlX3JkZl90eXBlKHJkZltpXVswXSwgcmRmW2ldWzFdKSk7XG5cdFx0XHRvLnB1c2god3JpdGVfcmRmX2hhcyhcIlwiLHJkZltpXVswXSkpO1xuXHRcdH1cblx0XHRvLnB1c2god3JpdGVfcmRmX3R5cGUoXCJcIixcIkRvY3VtZW50XCIsIFwicGtnXCIpKTtcblx0XHRvLnB1c2goJzwvcmRmOlJERj4nKTtcblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cdC8qIFRPRE86IHB1bGwgcHJvcGVydGllcyAqL1xuXHR2YXIgd3JpdGVfbWV0YV9vZHMgPSAoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBheWxvYWQgPSAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwieWVzXCI/PjxvZmZpY2U6ZG9jdW1lbnQtbWV0YSB4bWxuczpvZmZpY2U9XCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOm9mZmljZToxLjBcIiB4bWxuczptZXRhPVwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczptZXRhOjEuMFwiIHhtbG5zOmRjPVwiaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS9cIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiBvZmZpY2U6dmVyc2lvbj1cIjEuMlwiPjxvZmZpY2U6bWV0YT48bWV0YTpnZW5lcmF0b3I+U2hlZXQnICsgJ0pTICcgKyBYTFNYLnZlcnNpb24gKyAnPC9tZXRhOmdlbmVyYXRvcj48L29mZmljZTptZXRhPjwvb2ZmaWNlOmRvY3VtZW50LW1ldGE+Jztcblx0XHRyZXR1cm4gZnVuY3Rpb24gd21vKHdiLCBvcHRzKSB7XG5cdFx0XHRyZXR1cm4gcGF5bG9hZDtcblx0XHR9O1xuXHR9KSgpO1xuXG5cdC8qIEVDTUEtMzc2IFBhcnQgSUkgMTEuMSBDb3JlIFByb3BlcnRpZXMgUGFydCAqL1xuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi5bMS0yXS4xIChQSURTSS9QSUREU0kpICovXG5cdHZhciBDT1JFX1BST1BTID0gW1xuXHRcdFtcImNwOmNhdGVnb3J5XCIsIFwiQ2F0ZWdvcnlcIl0sXG5cdFx0W1wiY3A6Y29udGVudFN0YXR1c1wiLCBcIkNvbnRlbnRTdGF0dXNcIl0sXG5cdFx0W1wiY3A6a2V5d29yZHNcIiwgXCJLZXl3b3Jkc1wiXSxcblx0XHRbXCJjcDpsYXN0TW9kaWZpZWRCeVwiLCBcIkxhc3RBdXRob3JcIl0sXG5cdFx0W1wiY3A6bGFzdFByaW50ZWRcIiwgXCJMYXN0UHJpbnRlZFwiXSxcblx0XHRbXCJjcDpyZXZpc2lvblwiLCBcIlJldk51bWJlclwiXSxcblx0XHRbXCJjcDp2ZXJzaW9uXCIsIFwiVmVyc2lvblwiXSxcblx0XHRbXCJkYzpjcmVhdG9yXCIsIFwiQXV0aG9yXCJdLFxuXHRcdFtcImRjOmRlc2NyaXB0aW9uXCIsIFwiQ29tbWVudHNcIl0sXG5cdFx0W1wiZGM6aWRlbnRpZmllclwiLCBcIklkZW50aWZpZXJcIl0sXG5cdFx0W1wiZGM6bGFuZ3VhZ2VcIiwgXCJMYW5ndWFnZVwiXSxcblx0XHRbXCJkYzpzdWJqZWN0XCIsIFwiU3ViamVjdFwiXSxcblx0XHRbXCJkYzp0aXRsZVwiLCBcIlRpdGxlXCJdLFxuXHRcdFtcImRjdGVybXM6Y3JlYXRlZFwiLCBcIkNyZWF0ZWREYXRlXCIsICdkYXRlJ10sXG5cdFx0W1wiZGN0ZXJtczptb2RpZmllZFwiLCBcIk1vZGlmaWVkRGF0ZVwiLCAnZGF0ZSddXG5cdF07XG5cblx0WE1MTlMuQ09SRV9QUk9QUyA9IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL3BhY2thZ2UvMjAwNi9tZXRhZGF0YS9jb3JlLXByb3BlcnRpZXNcIjtcblx0UkVMUy5DT1JFX1BST1BTICA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvcGFja2FnZS8yMDA2L3JlbGF0aW9uc2hpcHMvbWV0YWRhdGEvY29yZS1wcm9wZXJ0aWVzJztcblxuXHR2YXIgQ09SRV9QUk9QU19SRUdFWCA9IChmdW5jdGlvbigpIHtcblx0XHR2YXIgciA9IG5ldyBBcnJheShDT1JFX1BST1BTLmxlbmd0aCk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBmID0gQ09SRV9QUk9QU1tpXTtcblx0XHRcdHZhciBnID0gXCIoPzpcIisgZlswXS5zdWJzdHIoMCxmWzBdLmluZGV4T2YoXCI6XCIpKSArXCI6KVwiKyBmWzBdLnN1YnN0cihmWzBdLmluZGV4T2YoXCI6XCIpKzEpO1xuXHRcdFx0cltpXSA9IG5ldyBSZWdFeHAoXCI8XCIgKyBnICsgXCJbXj5dKj4oLiopPFxcL1wiICsgZyArIFwiPlwiKTtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH0pKCk7XG5cblx0ZnVuY3Rpb24gcGFyc2VfY29yZV9wcm9wcyhkYXRhKSB7XG5cdFx0dmFyIHAgPSB7fTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBDT1JFX1BST1BTLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgZiA9IENPUkVfUFJPUFNbaV0sIGN1ciA9IGRhdGEubWF0Y2goQ09SRV9QUk9QU19SRUdFWFtpXSk7XG5cdFx0XHRpZihjdXIgIT0gbnVsbCAmJiBjdXIubGVuZ3RoID4gMCkgcFtmWzFdXSA9IGN1clsxXTtcblx0XHRcdGlmKGZbMl0gPT09ICdkYXRlJyAmJiBwW2ZbMV1dKSBwW2ZbMV1dID0gcGFyc2VEYXRlKHBbZlsxXV0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBwO1xuXHR9XG5cblx0dmFyIENPUkVfUFJPUFNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ2NwOmNvcmVQcm9wZXJ0aWVzJywgbnVsbCwge1xuXHRcdC8vJ3htbG5zJzogWE1MTlMuQ09SRV9QUk9QUyxcblx0XHQneG1sbnM6Y3AnOiBYTUxOUy5DT1JFX1BST1BTLFxuXHRcdCd4bWxuczpkYyc6IFhNTE5TLmRjLFxuXHRcdCd4bWxuczpkY3Rlcm1zJzogWE1MTlMuZGN0ZXJtcyxcblx0XHQneG1sbnM6ZGNtaXR5cGUnOiBYTUxOUy5kY21pdHlwZSxcblx0XHQneG1sbnM6eHNpJzogWE1MTlMueHNpXG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGNwX2RvaXQoZiwgZywgaCwgbywgcCkge1xuXHRcdGlmKHBbZl0gIT0gbnVsbCB8fCBnID09IG51bGwgfHwgZyA9PT0gXCJcIikgcmV0dXJuO1xuXHRcdHBbZl0gPSBnO1xuXHRcdG9bby5sZW5ndGhdID0gKGggPyB3cml0ZXh0YWcoZixnLGgpIDogd3JpdGV0YWcoZixnKSk7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9jb3JlX3Byb3BzKGNwLCBfb3B0cykge1xuXHRcdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdFx0dmFyIG8gPSBbWE1MX0hFQURFUiwgQ09SRV9QUk9QU19YTUxfUk9PVF0sIHAgPSB7fTtcblx0XHRpZighY3AgJiYgIW9wdHMuUHJvcHMpIHJldHVybiBvLmpvaW4oXCJcIik7XG5cblx0XHRpZihjcCkge1xuXHRcdFx0aWYoY3AuQ3JlYXRlZERhdGUgIT0gbnVsbCkgY3BfZG9pdChcImRjdGVybXM6Y3JlYXRlZFwiLCB0eXBlb2YgY3AuQ3JlYXRlZERhdGUgPT09IFwic3RyaW5nXCIgPyBjcC5DcmVhdGVkRGF0ZSA6IHdyaXRlX3czY2R0ZihjcC5DcmVhdGVkRGF0ZSwgb3B0cy5XVEYpLCB7XCJ4c2k6dHlwZVwiOlwiZGN0ZXJtczpXM0NEVEZcIn0sIG8sIHApO1xuXHRcdFx0aWYoY3AuTW9kaWZpZWREYXRlICE9IG51bGwpIGNwX2RvaXQoXCJkY3Rlcm1zOm1vZGlmaWVkXCIsIHR5cGVvZiBjcC5Nb2RpZmllZERhdGUgPT09IFwic3RyaW5nXCIgPyBjcC5Nb2RpZmllZERhdGUgOiB3cml0ZV93M2NkdGYoY3AuTW9kaWZpZWREYXRlLCBvcHRzLldURiksIHtcInhzaTp0eXBlXCI6XCJkY3Rlcm1zOlczQ0RURlwifSwgbywgcCk7XG5cdFx0fVxuXG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBDT1JFX1BST1BTLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgZiA9IENPUkVfUFJPUFNbaV07XG5cdFx0XHR2YXIgdiA9IG9wdHMuUHJvcHMgJiYgb3B0cy5Qcm9wc1tmWzFdXSAhPSBudWxsID8gb3B0cy5Qcm9wc1tmWzFdXSA6IGNwID8gY3BbZlsxXV0gOiBudWxsO1xuXHRcdFx0aWYodiA9PT0gdHJ1ZSkgdiA9IFwiMVwiO1xuXHRcdFx0ZWxzZSBpZih2ID09PSBmYWxzZSkgdiA9IFwiMFwiO1xuXHRcdFx0ZWxzZSBpZih0eXBlb2YgdiA9PSBcIm51bWJlclwiKSB2ID0gU3RyaW5nKHYpO1xuXHRcdFx0aWYodiAhPSBudWxsKSBjcF9kb2l0KGZbMF0sIHYsIG51bGwsIG8sIHApO1xuXHRcdH1cblx0XHRpZihvLmxlbmd0aD4yKXsgb1tvLmxlbmd0aF0gPSAoJzwvY3A6Y29yZVByb3BlcnRpZXM+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cdC8qIDE1LjIuMTIuMyBFeHRlbmRlZCBGaWxlIFByb3BlcnRpZXMgUGFydCAqL1xuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMi5bMS0yXS4xIChQSURTSS9QSUREU0kpICovXG5cdHZhciBFWFRfUFJPUFMgPSBbXG5cdFx0W1wiQXBwbGljYXRpb25cIiwgXCJBcHBsaWNhdGlvblwiLCBcInN0cmluZ1wiXSxcblx0XHRbXCJBcHBWZXJzaW9uXCIsIFwiQXBwVmVyc2lvblwiLCBcInN0cmluZ1wiXSxcblx0XHRbXCJDb21wYW55XCIsIFwiQ29tcGFueVwiLCBcInN0cmluZ1wiXSxcblx0XHRbXCJEb2NTZWN1cml0eVwiLCBcIkRvY1NlY3VyaXR5XCIsIFwic3RyaW5nXCJdLFxuXHRcdFtcIk1hbmFnZXJcIiwgXCJNYW5hZ2VyXCIsIFwic3RyaW5nXCJdLFxuXHRcdFtcIkh5cGVybGlua3NDaGFuZ2VkXCIsIFwiSHlwZXJsaW5rc0NoYW5nZWRcIiwgXCJib29sXCJdLFxuXHRcdFtcIlNoYXJlZERvY1wiLCBcIlNoYXJlZERvY1wiLCBcImJvb2xcIl0sXG5cdFx0W1wiTGlua3NVcFRvRGF0ZVwiLCBcIkxpbmtzVXBUb0RhdGVcIiwgXCJib29sXCJdLFxuXHRcdFtcIlNjYWxlQ3JvcFwiLCBcIlNjYWxlQ3JvcFwiLCBcImJvb2xcIl0sXG5cdFx0W1wiSGVhZGluZ1BhaXJzXCIsIFwiSGVhZGluZ1BhaXJzXCIsIFwicmF3XCJdLFxuXHRcdFtcIlRpdGxlc09mUGFydHNcIiwgXCJUaXRsZXNPZlBhcnRzXCIsIFwicmF3XCJdXG5cdF07XG5cblx0WE1MTlMuRVhUX1BST1BTID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9leHRlbmRlZC1wcm9wZXJ0aWVzXCI7XG5cdFJFTFMuRVhUX1BST1BTICA9ICdodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2V4dGVuZGVkLXByb3BlcnRpZXMnO1xuXG5cdGZ1bmN0aW9uIHBhcnNlX2V4dF9wcm9wcyhkYXRhLCBwKSB7XG5cdFx0dmFyIHEgPSB7fTsgaWYoIXApIHAgPSB7fTtcblxuXHRcdEVYVF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcblx0XHRcdHN3aXRjaChmWzJdKSB7XG5cdFx0XHRcdGNhc2UgXCJzdHJpbmdcIjogcFtmWzFdXSA9IChkYXRhLm1hdGNoKG1hdGNodGFnKGZbMF0pKXx8W10pWzFdOyBicmVhaztcblx0XHRcdFx0Y2FzZSBcImJvb2xcIjogcFtmWzFdXSA9IChkYXRhLm1hdGNoKG1hdGNodGFnKGZbMF0pKXx8W10pWzFdID09PSBcInRydWVcIjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyYXdcIjpcblx0XHRcdFx0XHR2YXIgY3VyID0gZGF0YS5tYXRjaChuZXcgUmVnRXhwKFwiPFwiICsgZlswXSArIFwiW14+XSo+KC4qKTxcXC9cIiArIGZbMF0gKyBcIj5cIikpO1xuXHRcdFx0XHRcdGlmKGN1ciAmJiBjdXIubGVuZ3RoID4gMCkgcVtmWzFdXSA9IGN1clsxXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmKHEuSGVhZGluZ1BhaXJzICYmIHEuVGl0bGVzT2ZQYXJ0cykge1xuXHRcdFx0dmFyIHYgPSBwYXJzZVZlY3RvcihxLkhlYWRpbmdQYWlycyk7XG5cdFx0XHR2YXIgcGFydHMgPSBwYXJzZVZlY3RvcihxLlRpdGxlc09mUGFydHMpLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4LnY7IH0pO1xuXHRcdFx0dmFyIGlkeCA9IDAsIGxlbiA9IDA7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpICE9PSB2Lmxlbmd0aDsgaSs9Mikge1xuXHRcdFx0XHRsZW4gPSArKHZbaSsxXS52KTtcblx0XHRcdFx0c3dpdGNoKHZbaV0udikge1xuXHRcdFx0XHRcdGNhc2UgXCJXb3Jrc2hlZXRzXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIuW3peS9nOihqFwiOlxuXHRcdFx0XHRcdGNhc2UgXCLQm9C40YHRgtGLXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIuODr+ODvOOCr+OCt+ODvOODiFwiOlxuXHRcdFx0XHRcdGNhc2UgXCLXktec15nXldeg15XXqiDXoteR15XXk9eUXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIkFyYmVpdHNibMOkdHRlclwiOlxuXHRcdFx0XHRcdGNhc2UgXCLDh2FsxLHFn21hIFNheWZhbGFyxLFcIjpcblx0XHRcdFx0XHRjYXNlIFwiRmV1aWxsZXMgZGUgY2FsY3VsXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIkZvZ2xpIGRpIGxhdm9yb1wiOlxuXHRcdFx0XHRcdGNhc2UgXCJGb2xoYXMgZGUgY8OhbGN1bG9cIjpcblx0XHRcdFx0XHRjYXNlIFwiUGxhbmlsaGFzXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIldlcmtibGFkZW5cIjpcblx0XHRcdFx0XHRcdHAuV29ya3NoZWV0cyA9IGxlbjtcblx0XHRcdFx0XHRcdHAuU2hlZXROYW1lcyA9IHBhcnRzLnNsaWNlKGlkeCwgaWR4ICsgbGVuKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSBcIk5hbWVkIFJhbmdlc1wiOlxuXHRcdFx0XHRcdGNhc2UgXCJCZW5hbm50ZSBCZXJlaWNoZVwiOlxuXHRcdFx0XHRcdFx0cC5OYW1lZFJhbmdlcyA9IGxlbjtcblx0XHRcdFx0XHRcdHAuRGVmaW5lZE5hbWVzID0gcGFydHMuc2xpY2UoaWR4LCBpZHggKyBsZW4pO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFwiQ2hhcnRzXCI6XG5cdFx0XHRcdFx0Y2FzZSBcIkRpYWdyYW1tZVwiOlxuXHRcdFx0XHRcdFx0cC5DaGFydHNoZWV0cyA9IGxlbjtcblx0XHRcdFx0XHRcdHAuQ2hhcnROYW1lcyA9IHBhcnRzLnNsaWNlKGlkeCwgaWR4ICsgbGVuKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlkeCArPSBsZW47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHA7XG5cdH1cblxuXHR2YXIgRVhUX1BST1BTX1hNTF9ST09UID0gd3JpdGV4dGFnKCdQcm9wZXJ0aWVzJywgbnVsbCwge1xuXHRcdCd4bWxucyc6IFhNTE5TLkVYVF9QUk9QUyxcblx0XHQneG1sbnM6dnQnOiBYTUxOUy52dFxuXHR9KTtcblxuXHRmdW5jdGlvbiB3cml0ZV9leHRfcHJvcHMoY3AsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFtdLCBwID0ge30sIFcgPSB3cml0ZXh0YWc7XG5cdFx0aWYoIWNwKSBjcCA9IHt9O1xuXHRcdGNwLkFwcGxpY2F0aW9uID0gXCJTaGVldEpTXCI7XG5cdFx0b1tvLmxlbmd0aF0gPSAoWE1MX0hFQURFUik7XG5cdFx0b1tvLmxlbmd0aF0gPSAoRVhUX1BST1BTX1hNTF9ST09UKTtcblxuXHRcdEVYVF9QUk9QUy5mb3JFYWNoKGZ1bmN0aW9uKGYpIHtcblx0XHRcdGlmKGNwW2ZbMV1dID09PSB1bmRlZmluZWQpIHJldHVybjtcblx0XHRcdHZhciB2O1xuXHRcdFx0c3dpdGNoKGZbMl0pIHtcblx0XHRcdFx0Y2FzZSAnc3RyaW5nJzogdiA9IFN0cmluZyhjcFtmWzFdXSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdib29sJzogdiA9IGNwW2ZbMV1dID8gJ3RydWUnIDogJ2ZhbHNlJzsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZih2ICE9PSB1bmRlZmluZWQpIG9bby5sZW5ndGhdID0gKFcoZlswXSwgdikpO1xuXHRcdH0pO1xuXG5cdFx0LyogVE9ETzogSGVhZGluZ1BhaXJzLCBUaXRsZXNPZlBhcnRzICovXG5cdFx0b1tvLmxlbmd0aF0gPSAoVygnSGVhZGluZ1BhaXJzJywgVygndnQ6dmVjdG9yJywgVygndnQ6dmFyaWFudCcsICc8dnQ6bHBzdHI+V29ya3NoZWV0czwvdnQ6bHBzdHI+JykrVygndnQ6dmFyaWFudCcsIFcoJ3Z0Omk0JywgU3RyaW5nKGNwLldvcmtzaGVldHMpKSksIHtzaXplOjIsIGJhc2VUeXBlOlwidmFyaWFudFwifSkpKTtcblx0XHRvW28ubGVuZ3RoXSA9IChXKCdUaXRsZXNPZlBhcnRzJywgVygndnQ6dmVjdG9yJywgY3AuU2hlZXROYW1lcy5tYXAoZnVuY3Rpb24ocykgeyByZXR1cm4gXCI8dnQ6bHBzdHI+XCIgKyBlc2NhcGV4bWwocykgKyBcIjwvdnQ6bHBzdHI+XCI7IH0pLmpvaW4oXCJcIiksIHtzaXplOiBjcC5Xb3Jrc2hlZXRzLCBiYXNlVHlwZTpcImxwc3RyXCJ9KSkpO1xuXHRcdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICgnPC9Qcm9wZXJ0aWVzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHQvKiAxNS4yLjEyLjIgQ3VzdG9tIEZpbGUgUHJvcGVydGllcyBQYXJ0ICovXG5cdFhNTE5TLkNVU1RfUFJPUFMgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L2N1c3RvbS1wcm9wZXJ0aWVzXCI7XG5cdFJFTFMuQ1VTVF9QUk9QUyAgPSAnaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9jdXN0b20tcHJvcGVydGllcyc7XG5cblx0dmFyIGN1c3RyZWdleCA9IC88W14+XSs+W148XSovZztcblx0ZnVuY3Rpb24gcGFyc2VfY3VzdF9wcm9wcyhkYXRhLCBvcHRzKSB7XG5cdFx0dmFyIHAgPSB7fSwgbmFtZSA9IFwiXCI7XG5cdFx0dmFyIG0gPSBkYXRhLm1hdGNoKGN1c3RyZWdleCk7XG5cdFx0aWYobSkgZm9yKHZhciBpID0gMDsgaSAhPSBtLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgeCA9IG1baV0sIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRcdHN3aXRjaCh5WzBdKSB7XG5cdFx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxQcm9wZXJ0aWVzJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxwcm9wZXJ0eSc6IG5hbWUgPSB5Lm5hbWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L3Byb3BlcnR5Pic6IG5hbWUgPSBudWxsOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogaWYgKHguaW5kZXhPZignPHZ0OicpID09PSAwKSB7XG5cdFx0XHRcdFx0dmFyIHRva3MgPSB4LnNwbGl0KCc+Jyk7XG5cdFx0XHRcdFx0dmFyIHR5cGUgPSB0b2tzWzBdLnN1YnN0cmluZyg0KSwgdGV4dCA9IHRva3NbMV07XG5cdFx0XHRcdFx0LyogMjIuNC4yLjMyIChDVF9WYXJpYW50KS4gT21pdCB0aGUgYmluYXJ5IHR5cGVzIGZyb20gMjIuNCAoVmFyaWFudCBUeXBlcykgKi9cblx0XHRcdFx0XHRzd2l0Y2godHlwZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnbHBzdHInOiBjYXNlICdic3RyJzogY2FzZSAnbHB3c3RyJzpcblx0XHRcdFx0XHRcdFx0cFtuYW1lXSA9IHVuZXNjYXBleG1sKHRleHQpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2Jvb2wnOlxuXHRcdFx0XHRcdFx0XHRwW25hbWVdID0gcGFyc2V4bWxib29sKHRleHQsICc8dnQ6Ym9vbD4nKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdpMSc6IGNhc2UgJ2kyJzogY2FzZSAnaTQnOiBjYXNlICdpOCc6IGNhc2UgJ2ludCc6IGNhc2UgJ3VpbnQnOlxuXHRcdFx0XHRcdFx0XHRwW25hbWVdID0gcGFyc2VJbnQodGV4dCwgMTApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ3I0JzogY2FzZSAncjgnOiBjYXNlICdkZWNpbWFsJzpcblx0XHRcdFx0XHRcdFx0cFtuYW1lXSA9IHBhcnNlRmxvYXQodGV4dCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZmlsZXRpbWUnOiBjYXNlICdkYXRlJzpcblx0XHRcdFx0XHRcdFx0cFtuYW1lXSA9IHBhcnNlRGF0ZSh0ZXh0KTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdjeSc6IGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRcdFx0cFtuYW1lXSA9IHVuZXNjYXBleG1sKHRleHQpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykgY29uc29sZS53YXJuKCdVbmV4cGVjdGVkJywgeCwgdHlwZSwgdG9rcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYoeC5zdWJzdHIoMCwyKSA9PT0gXCI8L1wiKSB7LyogZW1wdHkgKi9cblx0XHRcdFx0fSBlbHNlIGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoeCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwO1xuXHR9XG5cblx0dmFyIENVU1RfUFJPUFNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ1Byb3BlcnRpZXMnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlMuQ1VTVF9QUk9QUyxcblx0XHQneG1sbnM6dnQnOiBYTUxOUy52dFxuXHR9KTtcblxuXHRmdW5jdGlvbiB3cml0ZV9jdXN0X3Byb3BzKGNwLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBbWE1MX0hFQURFUiwgQ1VTVF9QUk9QU19YTUxfUk9PVF07XG5cdFx0aWYoIWNwKSByZXR1cm4gby5qb2luKFwiXCIpO1xuXHRcdHZhciBwaWQgPSAxO1xuXHRcdGtleXMoY3ApLmZvckVhY2goZnVuY3Rpb24gY3VzdHByb3AoaykgeyArK3BpZDtcblx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ3Byb3BlcnR5Jywgd3JpdGVfdnQoY3Bba10pLCB7XG5cdFx0XHRcdCdmbXRpZCc6ICd7RDVDREQ1MDUtMkU5Qy0xMDFCLTkzOTctMDgwMDJCMkNGOUFFfScsXG5cdFx0XHRcdCdwaWQnOiBwaWQsXG5cdFx0XHRcdCduYW1lJzoga1xuXHRcdFx0fSkpO1xuXHRcdH0pO1xuXHRcdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICc8L1Byb3BlcnRpZXM+Jzsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblx0LyogQ29tbW9uIE5hbWUgLT4gWExNTCBOYW1lICovXG5cdHZhciBYTE1MRG9jUHJvcHNNYXAgPSB7XG5cdFx0VGl0bGU6ICdUaXRsZScsXG5cdFx0U3ViamVjdDogJ1N1YmplY3QnLFxuXHRcdEF1dGhvcjogJ0F1dGhvcicsXG5cdFx0S2V5d29yZHM6ICdLZXl3b3JkcycsXG5cdFx0Q29tbWVudHM6ICdEZXNjcmlwdGlvbicsXG5cdFx0TGFzdEF1dGhvcjogJ0xhc3RBdXRob3InLFxuXHRcdFJldk51bWJlcjogJ1JldmlzaW9uJyxcblx0XHRBcHBsaWNhdGlvbjogJ0FwcE5hbWUnLFxuXHRcdC8qIFRvdGFsVGltZTogJ1RvdGFsVGltZScsICovXG5cdFx0TGFzdFByaW50ZWQ6ICdMYXN0UHJpbnRlZCcsXG5cdFx0Q3JlYXRlZERhdGU6ICdDcmVhdGVkJyxcblx0XHRNb2RpZmllZERhdGU6ICdMYXN0U2F2ZWQnLFxuXHRcdC8qIFBhZ2VzICovXG5cdFx0LyogV29yZHMgKi9cblx0XHQvKiBDaGFyYWN0ZXJzICovXG5cdFx0Q2F0ZWdvcnk6ICdDYXRlZ29yeScsXG5cdFx0LyogUHJlc2VudGF0aW9uRm9ybWF0ICovXG5cdFx0TWFuYWdlcjogJ01hbmFnZXInLFxuXHRcdENvbXBhbnk6ICdDb21wYW55Jyxcblx0XHQvKiBHdWlkICovXG5cdFx0LyogSHlwZXJsaW5rQmFzZSAqL1xuXHRcdC8qIEJ5dGVzICovXG5cdFx0LyogTGluZXMgKi9cblx0XHQvKiBQYXJhZ3JhcGhzICovXG5cdFx0LyogQ2hhcmFjdGVyc1dpdGhTcGFjZXMgKi9cblx0XHRBcHBWZXJzaW9uOiAnVmVyc2lvbicsXG5cblx0XHRDb250ZW50U3RhdHVzOiAnQ29udGVudFN0YXR1cycsIC8qIE5PVEU6IG1pc3NpbmcgZnJvbSBzY2hlbWEgKi9cblx0XHRJZGVudGlmaWVyOiAnSWRlbnRpZmllcicsIC8qIE5PVEU6IG1pc3NpbmcgZnJvbSBzY2hlbWEgKi9cblx0XHRMYW5ndWFnZTogJ0xhbmd1YWdlJyAvKiBOT1RFOiBtaXNzaW5nIGZyb20gc2NoZW1hICovXG5cdH07XG5cdHZhciBldmVydF9YTE1MRFBNID0gZXZlcnQoWExNTERvY1Byb3BzTWFwKTtcblxuXHRmdW5jdGlvbiB4bG1sX3NldF9wcm9wKFByb3BzLCB0YWcsIHZhbCkge1xuXHRcdHRhZyA9IGV2ZXJ0X1hMTUxEUE1bdGFnXSB8fCB0YWc7XG5cdFx0UHJvcHNbdGFnXSA9IHZhbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHhsbWxfd3JpdGVfZG9jcHJvcHMoUHJvcHMsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdGtleXMoWExNTERvY1Byb3BzTWFwKS5tYXAoZnVuY3Rpb24obSkge1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIGlmKENPUkVfUFJPUFNbaV1bMV0gPT0gbSkgcmV0dXJuIENPUkVfUFJPUFNbaV07XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBFWFRfUFJPUFMubGVuZ3RoOyArK2kpIGlmKEVYVF9QUk9QU1tpXVsxXSA9PSBtKSByZXR1cm4gRVhUX1BST1BTW2ldO1xuXHRcdFx0dGhyb3cgbTtcblx0XHR9KS5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcblx0XHRcdGlmKFByb3BzW3BbMV1dID09IG51bGwpIHJldHVybjtcblx0XHRcdHZhciBtID0gb3B0cyAmJiBvcHRzLlByb3BzICYmIG9wdHMuUHJvcHNbcFsxXV0gIT0gbnVsbCA/IG9wdHMuUHJvcHNbcFsxXV0gOiBQcm9wc1twWzFdXTtcblx0XHRcdHN3aXRjaChwWzJdKSB7XG5cdFx0XHRcdGNhc2UgJ2RhdGUnOiBtID0gbmV3IERhdGUobSkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9cXC5cXGQqWi8sXCJaXCIpOyBicmVhaztcblx0XHRcdH1cblx0XHRcdGlmKHR5cGVvZiBtID09ICdudW1iZXInKSBtID0gU3RyaW5nKG0pO1xuXHRcdFx0ZWxzZSBpZihtID09PSB0cnVlIHx8IG0gPT09IGZhbHNlKSB7IG0gPSBtID8gXCIxXCIgOiBcIjBcIjsgfVxuXHRcdFx0ZWxzZSBpZihtIGluc3RhbmNlb2YgRGF0ZSkgbSA9IG5ldyBEYXRlKG0pLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuXFxkKlovLFwiXCIpO1xuXHRcdFx0by5wdXNoKHdyaXRldGFnKFhMTUxEb2NQcm9wc01hcFtwWzFdXSB8fCBwWzFdLCBtKSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHdyaXRleHRhZygnRG9jdW1lbnRQcm9wZXJ0aWVzJywgby5qb2luKFwiXCIpLCB7eG1sbnM6WExNTE5TLm8gfSk7XG5cdH1cblx0ZnVuY3Rpb24geGxtbF93cml0ZV9jdXN0cHJvcHMoUHJvcHMsIEN1c3Rwcm9wcywgb3B0cykge1xuXHRcdHZhciBCTEFDS0xJU1QgPSBbXCJXb3Jrc2hlZXRzXCIsXCJTaGVldE5hbWVzXCJdO1xuXHRcdHZhciBUID0gJ0N1c3RvbURvY3VtZW50UHJvcGVydGllcyc7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHRpZihQcm9wcykga2V5cyhQcm9wcykuZm9yRWFjaChmdW5jdGlvbihrKSB7XG5cdGlmKCFQcm9wcy5oYXNPd25Qcm9wZXJ0eShrKSkgcmV0dXJuO1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IENPUkVfUFJPUFMubGVuZ3RoOyArK2kpIGlmKGsgPT0gQ09SRV9QUk9QU1tpXVsxXSkgcmV0dXJuO1xuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgRVhUX1BST1BTLmxlbmd0aDsgKytpKSBpZihrID09IEVYVF9QUk9QU1tpXVsxXSkgcmV0dXJuO1xuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgQkxBQ0tMSVNULmxlbmd0aDsgKytpKSBpZihrID09IEJMQUNLTElTVFtpXSkgcmV0dXJuO1xuXG5cdFx0XHR2YXIgbSA9IFByb3BzW2tdO1xuXHRcdFx0dmFyIHQgPSBcInN0cmluZ1wiO1xuXHRcdFx0aWYodHlwZW9mIG0gPT0gJ251bWJlcicpIHsgdCA9IFwiZmxvYXRcIjsgbSA9IFN0cmluZyhtKTsgfVxuXHRcdFx0ZWxzZSBpZihtID09PSB0cnVlIHx8IG0gPT09IGZhbHNlKSB7IHQgPSBcImJvb2xlYW5cIjsgbSA9IG0gPyBcIjFcIiA6IFwiMFwiOyB9XG5cdFx0XHRlbHNlIG0gPSBTdHJpbmcobSk7XG5cdFx0XHRvLnB1c2god3JpdGV4dGFnKGVzY2FwZXhtbHRhZyhrKSwgbSwge1wiZHQ6ZHRcIjp0fSkpO1xuXHRcdH0pO1xuXHRcdGlmKEN1c3Rwcm9wcykga2V5cyhDdXN0cHJvcHMpLmZvckVhY2goZnVuY3Rpb24oaykge1xuXHRpZighQ3VzdHByb3BzLmhhc093blByb3BlcnR5KGspKSByZXR1cm47XG5cdFx0XHR2YXIgbSA9IEN1c3Rwcm9wc1trXTtcblx0XHRcdHZhciB0ID0gXCJzdHJpbmdcIjtcblx0XHRcdGlmKHR5cGVvZiBtID09ICdudW1iZXInKSB7IHQgPSBcImZsb2F0XCI7IG0gPSBTdHJpbmcobSk7IH1cblx0XHRcdGVsc2UgaWYobSA9PT0gdHJ1ZSB8fCBtID09PSBmYWxzZSkgeyB0ID0gXCJib29sZWFuXCI7IG0gPSBtID8gXCIxXCIgOiBcIjBcIjsgfVxuXHRcdFx0ZWxzZSBpZihtIGluc3RhbmNlb2YgRGF0ZSkgeyB0ID0gXCJkYXRlVGltZS50elwiOyBtID0gbS50b0lTT1N0cmluZygpOyB9XG5cdFx0XHRlbHNlIG0gPSBTdHJpbmcobSk7XG5cdFx0XHRvLnB1c2god3JpdGV4dGFnKGVzY2FwZXhtbHRhZyhrKSwgbSwge1wiZHQ6ZHRcIjp0fSkpO1xuXHRcdH0pO1xuXHRcdHJldHVybiAnPCcgKyBUICsgJyB4bWxucz1cIicgKyBYTE1MTlMubyArICdcIj4nICsgby5qb2luKFwiXCIpICsgJzwvJyArIFQgKyAnPic7XG5cdH1cblx0LyogW01TLURUWVBdIDIuMy4zIEZJTEVUSU1FICovXG5cdC8qIFtNUy1PTEVEU10gMi4xLjMgRklMRVRJTUUgKFBhY2tldCBWZXJzaW9uKSAqL1xuXHQvKiBbTVMtT0xFUFNdIDIuOCBGSUxFVElNRSAoUGFja2V0IFZlcnNpb24pICovXG5cdGZ1bmN0aW9uIHBhcnNlX0ZJTEVUSU1FKGJsb2IpIHtcblx0XHR2YXIgZHdMb3dEYXRlVGltZSA9IGJsb2IucmVhZF9zaGlmdCg0KSwgZHdIaWdoRGF0ZVRpbWUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCgoZHdIaWdoRGF0ZVRpbWUvMWU3Kk1hdGgucG93KDIsMzIpICsgZHdMb3dEYXRlVGltZS8xZTcpIC0gMTE2NDQ0NzM2MDApKjEwMDApLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuMDAwLyxcIlwiKTtcblx0fVxuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjQgTHBzdHIgKi9cblx0ZnVuY3Rpb24gcGFyc2VfbHBzdHIoYmxvYiwgdHlwZSwgcGFkKSB7XG5cdFx0dmFyIHN0ciA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBzdHInKTtcblx0XHRpZihwYWQpIGJsb2IubCArPSAoNCAtICgoc3RyLmxlbmd0aCsxKSAmIDMpKSAmIDM7XG5cdFx0cmV0dXJuIHN0cjtcblx0fVxuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuMy4xLjYgTHB3c3RyICovXG5cdGZ1bmN0aW9uIHBhcnNlX2xwd3N0cihibG9iLCB0eXBlLCBwYWQpIHtcblx0XHR2YXIgc3RyID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHdzdHInKTtcblx0XHRpZihwYWQpIGJsb2IubCArPSAoNCAtICgoc3RyLmxlbmd0aCsxKSAmIDMpKSAmIDM7XG5cdFx0cmV0dXJuIHN0cjtcblx0fVxuXG5cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTEgVnRTdHJpbmcgKi9cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTIgVnRVbmFsaWduZWRTdHJpbmcgKi9cblx0ZnVuY3Rpb24gcGFyc2VfVnRTdHJpbmdCYXNlKGJsb2IsIHN0cmluZ1R5cGUsIHBhZCkge1xuXHRcdGlmKHN0cmluZ1R5cGUgPT09IDB4MUYgLypWVF9MUFdTVFIqLykgcmV0dXJuIHBhcnNlX2xwd3N0cihibG9iKTtcblx0XHRyZXR1cm4gcGFyc2VfbHBzdHIoYmxvYiwgc3RyaW5nVHlwZSwgcGFkKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX1Z0U3RyaW5nKGJsb2IsIHQsIHBhZCkgeyByZXR1cm4gcGFyc2VfVnRTdHJpbmdCYXNlKGJsb2IsIHQsIHBhZCA9PT0gZmFsc2UgPyAwOiA0KTsgfVxuXHRmdW5jdGlvbiBwYXJzZV9WdFVuYWxpZ25lZFN0cmluZyhibG9iLCB0KSB7IGlmKCF0KSB0aHJvdyBuZXcgRXJyb3IoXCJkYWZ1cT9cIik7IHJldHVybiBwYXJzZV9WdFN0cmluZ0Jhc2UoYmxvYiwgdCwgMCk7IH1cblxuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS45IFZ0VmVjVW5hbGlnbmVkTHBzdHJWYWx1ZSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9WdFZlY1VuYWxpZ25lZExwc3RyVmFsdWUoYmxvYikge1xuXHRcdHZhciBsZW5ndGggPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHJldCA9IFtdO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gbGVuZ3RoOyArK2kpIHJldFtpXSA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBzdHInKTtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTAgVnRWZWNVbmFsaWduZWRMcHN0ciAqL1xuXHRmdW5jdGlvbiBwYXJzZV9WdFZlY1VuYWxpZ25lZExwc3RyKGJsb2IpIHtcblx0XHRyZXR1cm4gcGFyc2VfVnRWZWNVbmFsaWduZWRMcHN0clZhbHVlKGJsb2IpO1xuXHR9XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTMgVnRIZWFkaW5nUGFpciAqL1xuXHRmdW5jdGlvbiBwYXJzZV9WdEhlYWRpbmdQYWlyKGJsb2IpIHtcblx0XHR2YXIgaGVhZGluZ1N0cmluZyA9IHBhcnNlX1R5cGVkUHJvcGVydHlWYWx1ZShibG9iLCBWVF9VU1RSKTtcblx0XHR2YXIgaGVhZGVyUGFydHMgPSBwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgVlRfSTQpO1xuXHRcdHJldHVybiBbaGVhZGluZ1N0cmluZywgaGVhZGVyUGFydHNdO1xuXHR9XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy4zLjEuMTQgVnRWZWNIZWFkaW5nUGFpclZhbHVlICovXG5cdGZ1bmN0aW9uIHBhcnNlX1Z0VmVjSGVhZGluZ1BhaXJWYWx1ZShibG9iKSB7XG5cdFx0dmFyIGNFbGVtZW50cyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgb3V0ID0gW107XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBjRWxlbWVudHMgLyAyOyArK2kpIG91dC5wdXNoKHBhcnNlX1Z0SGVhZGluZ1BhaXIoYmxvYikpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHQvKiBbTVMtT1NIQVJFRF0gMi4zLjMuMS4xNSBWdFZlY0hlYWRpbmdQYWlyICovXG5cdGZ1bmN0aW9uIHBhcnNlX1Z0VmVjSGVhZGluZ1BhaXIoYmxvYikge1xuXHRcdC8vIE5PVEU6IFdoZW4gaW52b2tlZCwgd1R5cGUgJiBwYWRkaW5nIHdlcmUgYWxyZWFkeSBjb25zdW1lZFxuXHRcdHJldHVybiBwYXJzZV9WdFZlY0hlYWRpbmdQYWlyVmFsdWUoYmxvYik7XG5cdH1cblxuXHQvKiBbTVMtT0xFUFNdIDIuMTguMSBEaWN0aW9uYXJ5ICh1c2VzIDIuMTcsIDIuMTYpICovXG5cdGZ1bmN0aW9uIHBhcnNlX2RpY3Rpb25hcnkoYmxvYixDb2RlUGFnZSkge1xuXHRcdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGRpY3QgPSAoe30pO1xuXHRcdGZvcih2YXIgaiA9IDA7IGogIT0gY250OyArK2opIHtcblx0XHRcdHZhciBwaWQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0ZGljdFtwaWRdID0gYmxvYi5yZWFkX3NoaWZ0KGxlbiwgKENvZGVQYWdlID09PSAweDRCMCA/J3V0ZjE2bGUnOid1dGY4JykpLnJlcGxhY2UoY2hyMCwnJykucmVwbGFjZShjaHIxLCchJyk7XG5cdFx0fVxuXHRcdGlmKGJsb2IubCAmIDMpIGJsb2IubCA9IChibG9iLmw+PjIrMSk8PDI7XG5cdFx0cmV0dXJuIGRpY3Q7XG5cdH1cblxuXHQvKiBbTVMtT0xFUFNdIDIuOSBCTE9CICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JMT0IoYmxvYikge1xuXHRcdHZhciBzaXplID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBieXRlcyA9IGJsb2Iuc2xpY2UoYmxvYi5sLGJsb2IubCtzaXplKTtcblx0XHRpZigoc2l6ZSAmIDMpID4gMCkgYmxvYi5sICs9ICg0IC0gKHNpemUgJiAzKSkgJiAzO1xuXHRcdHJldHVybiBieXRlcztcblx0fVxuXG5cdC8qIFtNUy1PTEVQU10gMi4xMSBDbGlwYm9hcmREYXRhICovXG5cdGZ1bmN0aW9uIHBhcnNlX0NsaXBib2FyZERhdGEoYmxvYikge1xuXHRcdC8vIFRPRE9cblx0XHR2YXIgbyA9IHt9O1xuXHRcdG8uU2l6ZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHQvL28uRm9ybWF0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdGJsb2IubCArPSBvLlNpemU7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtT0xFUFNdIDIuMTQgVmVjdG9yIGFuZCBBcnJheSBQcm9wZXJ0eSBUeXBlcyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9WdFZlY3RvcihibG9iLCBjYikge1xuXHRcdC8qIFtNUy1PTEVQU10gMi4xNC4yIFZlY3RvckhlYWRlciAqL1xuXHQvKlx0dmFyIExlbmd0aCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gTGVuZ3RoOyArK2kpIHtcblx0XHRcdG8ucHVzaChjYihibG9iKSk7XG5cdFx0fVxuXHRcdHJldHVybiBvOyovXG5cdH1cblxuXHQvKiBbTVMtT0xFUFNdIDIuMTUgVHlwZWRQcm9wZXJ0eVZhbHVlICovXG5cdGZ1bmN0aW9uIHBhcnNlX1R5cGVkUHJvcGVydHlWYWx1ZShibG9iLCB0eXBlLCBfb3B0cykge1xuXHRcdHZhciB0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCByZXQsIG9wdHMgPSBfb3B0c3x8e307XG5cdFx0YmxvYi5sICs9IDI7XG5cdFx0aWYodHlwZSAhPT0gVlRfVkFSSUFOVClcblx0XHRpZih0ICE9PSB0eXBlICYmIFZUX0NVU1RPTS5pbmRleE9mKHR5cGUpPT09LTEpIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdHlwZSAnICsgdHlwZSArICcgc2F3ICcgKyB0KTtcblx0XHRzd2l0Y2godHlwZSA9PT0gVlRfVkFSSUFOVCA/IHQgOiB0eXBlKSB7XG5cdFx0XHRjYXNlIDB4MDIgLypWVF9JMiovOiByZXQgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTsgaWYoIW9wdHMucmF3KSBibG9iLmwgKz0gMjsgcmV0dXJuIHJldDtcblx0XHRcdGNhc2UgMHgwMyAvKlZUX0k0Ki86IHJldCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpOyByZXR1cm4gcmV0O1xuXHRcdFx0Y2FzZSAweDBCIC8qVlRfQk9PTCovOiByZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDQpICE9PSAweDA7XG5cdFx0XHRjYXNlIDB4MTMgLypWVF9VSTQqLzogcmV0ID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyByZXR1cm4gcmV0O1xuXHRcdFx0Y2FzZSAweDFFIC8qVlRfTFBTVFIqLzogcmV0dXJuIHBhcnNlX2xwc3RyKGJsb2IsIHQsIDQpLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0XHRjYXNlIDB4MUYgLypWVF9MUFdTVFIqLzogcmV0dXJuIHBhcnNlX2xwd3N0cihibG9iKTtcblx0XHRcdGNhc2UgMHg0MCAvKlZUX0ZJTEVUSU1FKi86IHJldHVybiBwYXJzZV9GSUxFVElNRShibG9iKTtcblx0XHRcdGNhc2UgMHg0MSAvKlZUX0JMT0IqLzogcmV0dXJuIHBhcnNlX0JMT0IoYmxvYik7XG5cdFx0XHRjYXNlIDB4NDcgLypWVF9DRiovOiByZXR1cm4gcGFyc2VfQ2xpcGJvYXJkRGF0YShibG9iKTtcblx0XHRcdGNhc2UgMHg1MCAvKlZUX1NUUklORyovOiByZXR1cm4gcGFyc2VfVnRTdHJpbmcoYmxvYiwgdCwgIW9wdHMucmF3ICYmIDQpLnJlcGxhY2UoY2hyMCwnJyk7XG5cdFx0XHRjYXNlIDB4NTEgLypWVF9VU1RSKi86IHJldHVybiBwYXJzZV9WdFVuYWxpZ25lZFN0cmluZyhibG9iLCB0LCA0KS5yZXBsYWNlKGNocjAsJycpO1xuXHRcdFx0Y2FzZSAweDEwMEMgLypWVF9WRUNUT1J8VlRfVkFSSUFOVCovOiByZXR1cm4gcGFyc2VfVnRWZWNIZWFkaW5nUGFpcihibG9iKTtcblx0XHRcdGNhc2UgMHgxMDFFIC8qVlRfTFBTVFIqLzogcmV0dXJuIHBhcnNlX1Z0VmVjVW5hbGlnbmVkTHBzdHIoYmxvYik7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJUeXBlZFByb3BlcnR5VmFsdWUgdW5yZWNvZ25pemVkIHR5cGUgXCIgKyB0eXBlICsgXCIgXCIgKyB0KTtcblx0XHR9XG5cdH1cblx0LyogW01TLU9MRVBTXSAyLjE0LjIgVmVjdG9ySGVhZGVyICovXG5cdC8qZnVuY3Rpb24gcGFyc2VfVlRWZWN0b3JWYXJpYW50KGJsb2IpIHtcblx0XHR2YXIgTGVuZ3RoID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdFx0aWYoTGVuZ3RoICYgMSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKFwiVmVjdG9ySGVhZGVyIExlbmd0aD1cIiArIExlbmd0aCArIFwiIG11c3QgYmUgZXZlblwiKTtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gTGVuZ3RoOyArK2kpIHtcblx0XHRcdG8ucHVzaChwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgVlRfVkFSSUFOVCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fSovXG5cblx0LyogW01TLU9MRVBTXSAyLjIwIFByb3BlcnR5U2V0ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIFBJRFNJKSB7XG5cdFx0dmFyIHN0YXJ0X2FkZHIgPSBibG9iLmw7XG5cdFx0dmFyIHNpemUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIE51bVByb3BzID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBQcm9wcyA9IFtdLCBpID0gMDtcblx0XHR2YXIgQ29kZVBhZ2UgPSAwO1xuXHRcdHZhciBEaWN0aW9uYXJ5ID0gLTEsIERpY3RPYmogPSAoe30pO1xuXHRcdGZvcihpID0gMDsgaSAhPSBOdW1Qcm9wczsgKytpKSB7XG5cdFx0XHR2YXIgUHJvcElEID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0dmFyIE9mZnNldCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRcdFByb3BzW2ldID0gW1Byb3BJRCwgT2Zmc2V0ICsgc3RhcnRfYWRkcl07XG5cdFx0fVxuXHRcdHZhciBQcm9wSCA9IHt9O1xuXHRcdGZvcihpID0gMDsgaSAhPSBOdW1Qcm9wczsgKytpKSB7XG5cdFx0XHRpZihibG9iLmwgIT09IFByb3BzW2ldWzFdKSB7XG5cdFx0XHRcdHZhciBmYWlsID0gdHJ1ZTtcblx0XHRcdFx0aWYoaT4wICYmIFBJRFNJKSBzd2l0Y2goUElEU0lbUHJvcHNbaS0xXVswXV0udCkge1xuXHRcdFx0XHRcdGNhc2UgMHgwMiAvKlZUX0kyKi86IGlmKGJsb2IubCArMiA9PT0gUHJvcHNbaV1bMV0pIHsgYmxvYi5sKz0yOyBmYWlsID0gZmFsc2U7IH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAweDUwIC8qVlRfU1RSSU5HKi86IGlmKGJsb2IubCA8PSBQcm9wc1tpXVsxXSkgeyBibG9iLmw9UHJvcHNbaV1bMV07IGZhaWwgPSBmYWxzZTsgfSBicmVhaztcblx0XHRcdFx0XHRjYXNlIDB4MTAwQyAvKlZUX1ZFQ1RPUnxWVF9WQVJJQU5UKi86IGlmKGJsb2IubCA8PSBQcm9wc1tpXVsxXSkgeyBibG9iLmw9UHJvcHNbaV1bMV07IGZhaWwgPSBmYWxzZTsgfSBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZighUElEU0kgJiYgYmxvYi5sIDw9IFByb3BzW2ldWzFdKSB7IGZhaWw9ZmFsc2U7IGJsb2IubCA9IFByb3BzW2ldWzFdOyB9XG5cdFx0XHRcdGlmKGZhaWwpIHRocm93IG5ldyBFcnJvcihcIlJlYWQgRXJyb3I6IEV4cGVjdGVkIGFkZHJlc3MgXCIgKyBQcm9wc1tpXVsxXSArICcgYXQgJyArIGJsb2IubCArICcgOicgKyBpKTtcblx0XHRcdH1cblx0XHRcdGlmKFBJRFNJKSB7XG5cdFx0XHRcdHZhciBwaWRkc2kgPSBQSURTSVtQcm9wc1tpXVswXV07XG5cdFx0XHRcdFByb3BIW3BpZGRzaS5uXSA9IHBhcnNlX1R5cGVkUHJvcGVydHlWYWx1ZShibG9iLCBwaWRkc2kudCwge3Jhdzp0cnVlfSk7XG5cdFx0XHRcdGlmKHBpZGRzaS5wID09PSAndmVyc2lvbicpIFByb3BIW3BpZGRzaS5uXSA9IFN0cmluZyhQcm9wSFtwaWRkc2kubl0gPj4gMTYpICsgXCIuXCIgKyBTdHJpbmcoUHJvcEhbcGlkZHNpLm5dICYgMHhGRkZGKTtcblx0XHRcdFx0aWYocGlkZHNpLm4gPT0gXCJDb2RlUGFnZVwiKSBzd2l0Y2goUHJvcEhbcGlkZHNpLm5dKSB7XG5cdFx0XHRcdFx0Y2FzZSAwOiBQcm9wSFtwaWRkc2kubl0gPSAxMjUyO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGNhc2UgODc0OlxuXHRcdFx0XHRcdGNhc2UgOTMyOlxuXHRcdFx0XHRcdGNhc2UgOTM2OlxuXHRcdFx0XHRcdGNhc2UgOTQ5OlxuXHRcdFx0XHRcdGNhc2UgOTUwOlxuXHRcdFx0XHRcdGNhc2UgMTI1MDpcblx0XHRcdFx0XHRjYXNlIDEyNTE6XG5cdFx0XHRcdFx0Y2FzZSAxMjUzOlxuXHRcdFx0XHRcdGNhc2UgMTI1NDpcblx0XHRcdFx0XHRjYXNlIDEyNTU6XG5cdFx0XHRcdFx0Y2FzZSAxMjU2OlxuXHRcdFx0XHRcdGNhc2UgMTI1Nzpcblx0XHRcdFx0XHRjYXNlIDEyNTg6XG5cdFx0XHRcdFx0Y2FzZSAxMDAwMDpcblx0XHRcdFx0XHRjYXNlIDEyMDA6XG5cdFx0XHRcdFx0Y2FzZSAxMjAxOlxuXHRcdFx0XHRcdGNhc2UgMTI1Mjpcblx0XHRcdFx0XHRjYXNlIDY1MDAwOiBjYXNlIC01MzY6XG5cdFx0XHRcdFx0Y2FzZSA2NTAwMTogY2FzZSAtNTM1OlxuXHRcdFx0XHRcdFx0c2V0X2NwKENvZGVQYWdlID0gUHJvcEhbcGlkZHNpLm5dKTsgYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgQ29kZVBhZ2U6IFwiICsgUHJvcEhbcGlkZHNpLm5dKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYoUHJvcHNbaV1bMF0gPT09IDB4MSkge1xuXHRcdFx0XHRcdENvZGVQYWdlID0gUHJvcEguQ29kZVBhZ2UgPSBwYXJzZV9UeXBlZFByb3BlcnR5VmFsdWUoYmxvYiwgVlRfSTIpO1xuXHRcdFx0XHRcdHNldF9jcChDb2RlUGFnZSk7XG5cdFx0XHRcdFx0aWYoRGljdGlvbmFyeSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHZhciBvbGRwb3MgPSBibG9iLmw7XG5cdFx0XHRcdFx0XHRibG9iLmwgPSBQcm9wc1tEaWN0aW9uYXJ5XVsxXTtcblx0XHRcdFx0XHRcdERpY3RPYmogPSBwYXJzZV9kaWN0aW9uYXJ5KGJsb2IsQ29kZVBhZ2UpO1xuXHRcdFx0XHRcdFx0YmxvYi5sID0gb2xkcG9zO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmKFByb3BzW2ldWzBdID09PSAwKSB7XG5cdFx0XHRcdFx0aWYoQ29kZVBhZ2UgPT09IDApIHsgRGljdGlvbmFyeSA9IGk7IGJsb2IubCA9IFByb3BzW2krMV1bMV07IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0RGljdE9iaiA9IHBhcnNlX2RpY3Rpb25hcnkoYmxvYixDb2RlUGFnZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBEaWN0T2JqW1Byb3BzW2ldWzBdXTtcblx0XHRcdFx0XHR2YXIgdmFsO1xuXHRcdFx0XHRcdC8qIFtNUy1PU0hBUkVEXSAyLjMuMy4yLjMuMS4yICsgUFJPUFZBUklBTlQgKi9cblx0XHRcdFx0XHRzd2l0Y2goYmxvYltibG9iLmxdKSB7XG5cdFx0XHRcdFx0XHRjYXNlIDB4NDEgLypWVF9CTE9CKi86IGJsb2IubCArPSA0OyB2YWwgPSBwYXJzZV9CTE9CKGJsb2IpOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMHgxRSAvKlZUX0xQU1RSKi86IGJsb2IubCArPSA0OyB2YWwgPSBwYXJzZV9WdFN0cmluZyhibG9iLCBibG9iW2Jsb2IubC00XSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAweDFGIC8qVlRfTFBXU1RSKi86IGJsb2IubCArPSA0OyB2YWwgPSBwYXJzZV9WdFN0cmluZyhibG9iLCBibG9iW2Jsb2IubC00XSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAweDAzIC8qVlRfSTQqLzogYmxvYi5sICs9IDQ7IHZhbCA9IGJsb2IucmVhZF9zaGlmdCg0LCAnaScpOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMHgxMyAvKlZUX1VJNCovOiBibG9iLmwgKz0gNDsgdmFsID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMHgwNSAvKlZUX1I4Ki86IGJsb2IubCArPSA0OyB2YWwgPSBibG9iLnJlYWRfc2hpZnQoOCwgJ2YnKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDB4MEIgLypWVF9CT09MKi86IGJsb2IubCArPSA0OyB2YWwgPSBwYXJzZWJvb2woYmxvYiwgNCk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAweDQwIC8qVlRfRklMRVRJTUUqLzogYmxvYi5sICs9IDQ7IHZhbCA9IHBhcnNlRGF0ZShwYXJzZV9GSUxFVElNRShibG9iKSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwidW5wYXJzZWQgdmFsdWU6IFwiICsgYmxvYltibG9iLmxdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0UHJvcEhbbmFtZV0gPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0YmxvYi5sID0gc3RhcnRfYWRkciArIHNpemU7IC8qIHN0ZXAgYWhlYWQgdG8gc2tpcCBwYWRkaW5nICovXG5cdFx0cmV0dXJuIFByb3BIO1xuXHR9XG5cblx0LyogW01TLU9MRVBTXSAyLjIxIFByb3BlcnR5U2V0U3RyZWFtICovXG5cdGZ1bmN0aW9uIHBhcnNlX1Byb3BlcnR5U2V0U3RyZWFtKGZpbGUsIFBJRFNJKSB7XG5cdFx0dmFyIGJsb2IgPSBmaWxlLmNvbnRlbnQ7XG5cdFx0cHJlcF9ibG9iKGJsb2IsIDApO1xuXG5cdFx0dmFyIE51bVNldHMsIEZNVElEMCwgRk1USUQxLCBPZmZzZXQwLCBPZmZzZXQxID0gMDtcblx0XHRibG9iLmNoaygnZmVmZicsICdCeXRlIE9yZGVyOiAnKTtcblxuXHRcdHZhciB2ZXJzID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBUT0RPOiBjaGVjayB2ZXJzaW9uXG5cdFx0dmFyIFN5c3RlbUlkZW50aWZpZXIgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0YmxvYi5jaGsoQ0ZCLnV0aWxzLmNvbnN0cy5IRUFERVJfQ0xTSUQsICdDTFNJRDogJyk7XG5cdFx0TnVtU2V0cyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRpZihOdW1TZXRzICE9PSAxICYmIE51bVNldHMgIT09IDIpIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCAjU2V0czogXCIgKyBOdW1TZXRzKTtcblx0XHRGTVRJRDAgPSBibG9iLnJlYWRfc2hpZnQoMTYpOyBPZmZzZXQwID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXG5cdFx0aWYoTnVtU2V0cyA9PT0gMSAmJiBPZmZzZXQwICE9PSBibG9iLmwpIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBtaXNtYXRjaDogXCIgKyBPZmZzZXQwICsgXCIgIT09IFwiICsgYmxvYi5sKTtcblx0XHRlbHNlIGlmKE51bVNldHMgPT09IDIpIHsgRk1USUQxID0gYmxvYi5yZWFkX3NoaWZ0KDE2KTsgT2Zmc2V0MSA9IGJsb2IucmVhZF9zaGlmdCg0KTsgfVxuXHRcdHZhciBQU2V0MCA9IHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIFBJRFNJKTtcblxuXHRcdHZhciBydmFsID0gKHsgU3lzdGVtSWRlbnRpZmllcjogU3lzdGVtSWRlbnRpZmllciB9KTtcblx0XHRmb3IodmFyIHkgaW4gUFNldDApIHJ2YWxbeV0gPSBQU2V0MFt5XTtcblx0XHQvL3J2YWwuYmxvYiA9IGJsb2I7XG5cdFx0cnZhbC5GTVRJRCA9IEZNVElEMDtcblx0XHQvL3J2YWwuUFNldDAgPSBQU2V0MDtcblx0XHRpZihOdW1TZXRzID09PSAxKSByZXR1cm4gcnZhbDtcblx0XHRpZihibG9iLmwgIT09IE9mZnNldDEpIHRocm93IG5ldyBFcnJvcihcIkxlbmd0aCBtaXNtYXRjaCAyOiBcIiArIGJsb2IubCArIFwiICE9PSBcIiArIE9mZnNldDEpO1xuXHRcdHZhciBQU2V0MTtcblx0XHR0cnkgeyBQU2V0MSA9IHBhcnNlX1Byb3BlcnR5U2V0KGJsb2IsIG51bGwpOyB9IGNhdGNoKGUpIHsvKiBlbXB0eSAqL31cblx0XHRmb3IoeSBpbiBQU2V0MSkgcnZhbFt5XSA9IFBTZXQxW3ldO1xuXHRcdHJ2YWwuRk1USUQgPSBbRk1USUQwLCBGTVRJRDFdOyAvLyBUT0RPOiB2ZXJpZnkgRk1USUQwLzFcblx0XHRyZXR1cm4gcnZhbDtcblx0fVxuXG5cblx0ZnVuY3Rpb24gcGFyc2Vub29wMihibG9iLCBsZW5ndGgpIHsgYmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCk7IHJldHVybiBudWxsOyB9XG5cblx0ZnVuY3Rpb24gcGFyc2x1cnAoYmxvYiwgbGVuZ3RoLCBjYikge1xuXHRcdHZhciBhcnIgPSBbXSwgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHdoaWxlKGJsb2IubCA8IHRhcmdldCkgYXJyLnB1c2goY2IoYmxvYiwgdGFyZ2V0IC0gYmxvYi5sKSk7XG5cdFx0aWYodGFyZ2V0ICE9PSBibG9iLmwpIHRocm93IG5ldyBFcnJvcihcIlNsdXJwIGVycm9yXCIpO1xuXHRcdHJldHVybiBhcnI7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZWJvb2woYmxvYiwgbGVuZ3RoKSB7IHJldHVybiBibG9iLnJlYWRfc2hpZnQobGVuZ3RoKSA9PT0gMHgxOyB9XG5cblx0ZnVuY3Rpb24gcGFyc2V1aW50MTYoYmxvYikgeyByZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDIsICd1Jyk7IH1cblx0ZnVuY3Rpb24gcGFyc2V1aW50MTZhKGJsb2IsIGxlbmd0aCkgeyByZXR1cm4gcGFyc2x1cnAoYmxvYixsZW5ndGgscGFyc2V1aW50MTYpO31cblxuXHQvKiAtLS0gMi41IFN0cnVjdHVyZXMgLS0tICovXG5cblx0LyogW01TLVhMU10gMi41LjE0IEJvb2xlYW4gKi9cblx0dmFyIHBhcnNlX0Jvb2xlYW4gPSBwYXJzZWJvb2w7XG5cblx0LyogW01TLVhMU10gMi41LjEwIEJlcyAoYm9vbGVhbiBvciBlcnJvcikgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQmVzKGJsb2IpIHtcblx0XHR2YXIgdiA9IGJsb2IucmVhZF9zaGlmdCgxKSwgdCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRyZXR1cm4gdCA9PT0gMHgwMSA/IHYgOiB2ID09PSAweDAxO1xuXHR9XG5cblx0LyogW01TLVhMU10gMi41LjI0MCBTaG9ydFhMVW5pY29kZVN0cmluZyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID49IDEyID8gMiA6IDEpO1xuXHRcdHZhciB3aWR0aCA9IDEsIGVuY29kaW5nID0gJ3NiY3MtY29udCc7XG5cdFx0dmFyIGNwID0gY3VycmVudF9jb2RlcGFnZTtcblx0XHRpZihvcHRzICYmIG9wdHMuYmlmZiA+PSA4KSBjdXJyZW50X2NvZGVwYWdlID0gMTIwMDtcblx0XHRpZighb3B0cyB8fCBvcHRzLmJpZmYgPT0gOCApIHtcblx0XHRcdHZhciBmSGlnaEJ5dGUgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRpZihmSGlnaEJ5dGUpIHsgd2lkdGggPSAyOyBlbmNvZGluZyA9ICdkYmNzLWNvbnQnOyB9XG5cdFx0fSBlbHNlIGlmKG9wdHMuYmlmZiA9PSAxMikge1xuXHRcdFx0d2lkdGggPSAyOyBlbmNvZGluZyA9ICd3c3RyJztcblx0XHR9XG5cdFx0dmFyIG8gPSBjY2ggPyBibG9iLnJlYWRfc2hpZnQoY2NoLCBlbmNvZGluZykgOiBcIlwiO1xuXHRcdGN1cnJlbnRfY29kZXBhZ2UgPSBjcDtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIDIuNS4yOTMgWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMVW5pY29kZVJpY2hFeHRlbmRlZFN0cmluZyhibG9iKSB7XG5cdFx0dmFyIGNwID0gY3VycmVudF9jb2RlcGFnZTtcblx0XHRjdXJyZW50X2NvZGVwYWdlID0gMTIwMDtcblx0XHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgZkhpZ2hCeXRlID0gZmxhZ3MgJiAweDEsIGZFeHRTdCA9IGZsYWdzICYgMHg0LCBmUmljaFN0ID0gZmxhZ3MgJiAweDg7XG5cdFx0dmFyIHdpZHRoID0gMSArIChmbGFncyAmIDB4MSk7IC8vIDB4MCAtPiB1dGY4LCAweDEgLT4gZGJjc1xuXHRcdHZhciBjUnVuID0gMCwgY2JFeHRSc3Q7XG5cdFx0dmFyIHogPSB7fTtcblx0XHRpZihmUmljaFN0KSBjUnVuID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGlmKGZFeHRTdCkgY2JFeHRSc3QgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGVuY29kaW5nID0gKGZsYWdzICYgMHgxKSA/ICdkYmNzLWNvbnQnIDogJ3NiY3MtY29udCc7XG5cdFx0dmFyIG1zZyA9IGNjaCA9PT0gMCA/IFwiXCIgOiBibG9iLnJlYWRfc2hpZnQoY2NoLCBlbmNvZGluZyk7XG5cdFx0aWYoZlJpY2hTdCkgYmxvYi5sICs9IDQgKiBjUnVuOyAvL1RPRE86IHBhcnNlIHRoaXNcblx0XHRpZihmRXh0U3QpIGJsb2IubCArPSBjYkV4dFJzdDsgLy9UT0RPOiBwYXJzZSB0aGlzXG5cdFx0ei50ID0gbXNnO1xuXHRcdGlmKCFmUmljaFN0KSB7IHoucmF3ID0gXCI8dD5cIiArIHoudCArIFwiPC90PlwiOyB6LnIgPSB6LnQ7IH1cblx0XHRjdXJyZW50X2NvZGVwYWdlID0gY3A7XG5cdFx0cmV0dXJuIHo7XG5cdH1cblxuXHQvKiAyLjUuMjk2IFhMVW5pY29kZVN0cmluZ05vQ2NoICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaCwgb3B0cykge1xuXHRcdHZhciByZXR2YWw7XG5cdFx0aWYob3B0cykge1xuXHRcdFx0aWYob3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDw9IDUpIHJldHVybiBibG9iLnJlYWRfc2hpZnQoY2NoLCAnc2Jjcy1jb250Jyk7XG5cdFx0XHRpZihvcHRzLmJpZmYgPj0gMTIpIHJldHVybiBibG9iLnJlYWRfc2hpZnQoY2NoLCAnZGJjcy1jb250Jyk7XG5cdFx0fVxuXHRcdHZhciBmSGlnaEJ5dGUgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0aWYoZkhpZ2hCeXRlPT09MCkgeyByZXR2YWwgPSBibG9iLnJlYWRfc2hpZnQoY2NoLCAnc2Jjcy1jb250Jyk7IH1cblx0XHRlbHNlIHsgcmV0dmFsID0gYmxvYi5yZWFkX3NoaWZ0KGNjaCwgJ2RiY3MtY29udCcpOyB9XG5cdFx0cmV0dXJuIHJldHZhbDtcblx0fVxuXG5cdC8qIDIuNS4yOTQgWExVbmljb2RlU3RyaW5nICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgY2NoID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdFx0aWYoY2NoID09PSAwKSB7IGJsb2IubCsrOyByZXR1cm4gXCJcIjsgfVxuXHRcdHJldHVybiBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2gsIG9wdHMpO1xuXHR9XG5cdC8qIEJJRkY1IG92ZXJyaWRlICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMVW5pY29kZVN0cmluZzIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0aWYob3B0cy5iaWZmID4gNSkgcmV0dXJuIHBhcnNlX1hMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdHZhciBjY2ggPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0aWYoY2NoID09PSAwKSB7IGJsb2IubCsrOyByZXR1cm4gXCJcIjsgfVxuXHRcdHJldHVybiBibG9iLnJlYWRfc2hpZnQoY2NoLCAnc2Jjcy1jb250Jyk7XG5cdH1cblxuXHQvKiBbTVMtWExTXSAyLjUuNjEgQ29udHJvbEluZm8gKi9cblx0dmFyIHBhcnNlX0NvbnRyb2xJbmZvID0gcGFyc2Vub29wO1xuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuNy42IFVSTE1vbmlrZXIgVE9ETzogZmxhZ3MgKi9cblx0dmFyIHBhcnNlX1VSTE1vbmlrZXIgPSBmdW5jdGlvbihibG9iLyosIGxlbmd0aCwgb3B0cyovKSB7XG5cdFx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCg0KSwgc3RhcnQgPSBibG9iLmw7XG5cdFx0dmFyIGV4dHJhID0gZmFsc2U7XG5cdFx0aWYobGVuID4gMjQpIHtcblx0XHRcdC8qIGxvb2sgYWhlYWQgKi9cblx0XHRcdGJsb2IubCArPSBsZW4gLSAyNDtcblx0XHRcdGlmKGJsb2IucmVhZF9zaGlmdCgxNikgPT09IFwiNzk1ODgxZjQzYjFkN2Y0OGFmMmM4MjVkYzQ4NTI3NjNcIikgZXh0cmEgPSB0cnVlO1xuXHRcdFx0YmxvYi5sID0gc3RhcnQ7XG5cdFx0fVxuXHRcdHZhciB1cmwgPSBibG9iLnJlYWRfc2hpZnQoKGV4dHJhP2xlbi0yNDpsZW4pPj4xLCAndXRmMTZsZScpLnJlcGxhY2UoY2hyMCxcIlwiKTtcblx0XHRpZihleHRyYSkgYmxvYi5sICs9IDI0O1xuXHRcdHJldHVybiB1cmw7XG5cdH07XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy43LjggRmlsZU1vbmlrZXIgVE9ETzogYWxsIGZpZWxkcyAqL1xuXHR2YXIgcGFyc2VfRmlsZU1vbmlrZXIgPSBmdW5jdGlvbihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgY0FudGkgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGFuc2lMZW5ndGggPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGFuc2lQYXRoID0gYmxvYi5yZWFkX3NoaWZ0KGFuc2lMZW5ndGgsICdjc3RyJyk7XG5cdFx0dmFyIGVuZFNlcnZlciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgdmVyc2lvbk51bWJlciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY2JVbmljb2RlUGF0aFNpemUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0aWYoY2JVbmljb2RlUGF0aFNpemUgPT09IDApIHJldHVybiBhbnNpUGF0aC5yZXBsYWNlKC9cXFxcL2csXCIvXCIpO1xuXHRcdHZhciBjYlVuaWNvZGVQYXRoQnl0ZXMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHVzS2V5VmFsdWUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHVuaWNvZGVQYXRoID0gYmxvYi5yZWFkX3NoaWZ0KGNiVW5pY29kZVBhdGhCeXRlcz4+MSwgJ3V0ZjE2bGUnKS5yZXBsYWNlKGNocjAsXCJcIik7XG5cdFx0cmV0dXJuIHVuaWNvZGVQYXRoO1xuXHR9O1xuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuNy4yIEh5cGVybGlua01vbmlrZXIgVE9ETzogYWxsIHRoZSBtb25pa2VycyAqL1xuXHR2YXIgcGFyc2VfSHlwZXJsaW5rTW9uaWtlciA9IGZ1bmN0aW9uKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBjbHNpZCA9IGJsb2IucmVhZF9zaGlmdCgxNik7IGxlbmd0aCAtPSAxNjtcblx0XHRzd2l0Y2goY2xzaWQpIHtcblx0XHRcdGNhc2UgXCJlMGM5ZWE3OWY5YmFjZTExOGM4MjAwYWEwMDRiYTkwYlwiOiByZXR1cm4gcGFyc2VfVVJMTW9uaWtlcihibG9iLCBsZW5ndGgpO1xuXHRcdFx0Y2FzZSBcIjAzMDMwMDAwMDAwMDAwMDBjMDAwMDAwMDAwMDAwMDQ2XCI6IHJldHVybiBwYXJzZV9GaWxlTW9uaWtlcihibG9iLCBsZW5ndGgpO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgTW9uaWtlciBcIiArIGNsc2lkKTtcblx0XHR9XG5cdH07XG5cblx0LyogW01TLU9TSEFSRURdIDIuMy43LjkgSHlwZXJsaW5rU3RyaW5nICovXG5cdHZhciBwYXJzZV9IeXBlcmxpbmtTdHJpbmcgPSBmdW5jdGlvbihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBvID0gYmxvYi5yZWFkX3NoaWZ0KGxlbiwgJ3V0ZjE2bGUnKS5yZXBsYWNlKGNocjAsIFwiXCIpO1xuXHRcdHJldHVybiBvO1xuXHR9O1xuXG5cdC8qIFtNUy1PU0hBUkVEXSAyLjMuNy4xIEh5cGVybGluayBPYmplY3QgVE9ETzogdW5pZnkgcGFyYW1zIHdpdGggWExTWCAqL1xuXHR2YXIgcGFyc2VfSHlwZXJsaW5rID0gZnVuY3Rpb24oYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgc1ZlciA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRpZihzVmVyICE9PSAyKSB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgc3RyZWFtVmVyc2lvbjogXCIgKyBzVmVyKTtcblx0XHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sICs9IDI7XG5cdFx0dmFyIGRpc3BsYXlOYW1lLCB0YXJnZXRGcmFtZU5hbWUsIG1vbmlrZXIsIG9sZU1vbmlrZXIsIGxvY2F0aW9uLCBndWlkLCBmaWxlVGltZTtcblx0XHRpZihmbGFncyAmIDB4MDAxMCkgZGlzcGxheU5hbWUgPSBwYXJzZV9IeXBlcmxpbmtTdHJpbmcoYmxvYiwgZW5kIC0gYmxvYi5sKTtcblx0XHRpZihmbGFncyAmIDB4MDA4MCkgdGFyZ2V0RnJhbWVOYW1lID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdFx0aWYoKGZsYWdzICYgMHgwMTAxKSA9PT0gMHgwMTAxKSBtb25pa2VyID0gcGFyc2VfSHlwZXJsaW5rU3RyaW5nKGJsb2IsIGVuZCAtIGJsb2IubCk7XG5cdFx0aWYoKGZsYWdzICYgMHgwMTAxKSA9PT0gMHgwMDAxKSBvbGVNb25pa2VyID0gcGFyc2VfSHlwZXJsaW5rTW9uaWtlcihibG9iLCBlbmQgLSBibG9iLmwpO1xuXHRcdGlmKGZsYWdzICYgMHgwMDA4KSBsb2NhdGlvbiA9IHBhcnNlX0h5cGVybGlua1N0cmluZyhibG9iLCBlbmQgLSBibG9iLmwpO1xuXHRcdGlmKGZsYWdzICYgMHgwMDIwKSBndWlkID0gYmxvYi5yZWFkX3NoaWZ0KDE2KTtcblx0XHRpZihmbGFncyAmIDB4MDA0MCkgZmlsZVRpbWUgPSBwYXJzZV9GSUxFVElNRShibG9iLCA4KTtcblx0XHRibG9iLmwgPSBlbmQ7XG5cdFx0dmFyIHRhcmdldCA9ICh0YXJnZXRGcmFtZU5hbWV8fG1vbmlrZXJ8fG9sZU1vbmlrZXIpO1xuXHRcdGlmKGxvY2F0aW9uKSB0YXJnZXQrPVwiI1wiK2xvY2F0aW9uO1xuXHRcdHJldHVybiB7VGFyZ2V0OiB0YXJnZXR9O1xuXHR9O1xuXG5cdC8qIDIuNS4xNzggTG9uZ1JHQkEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfTG9uZ1JHQkEoYmxvYiwgbGVuZ3RoKSB7IHZhciByID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBnID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBiID0gYmxvYi5yZWFkX3NoaWZ0KDEpLCBhID0gYmxvYi5yZWFkX3NoaWZ0KDEpOyByZXR1cm4gW3IsZyxiLGFdOyB9XG5cblx0LyogMi41LjE3NyBMb25nUkdCICovXG5cdGZ1bmN0aW9uIHBhcnNlX0xvbmdSR0IoYmxvYiwgbGVuZ3RoKSB7IHZhciB4ID0gcGFyc2VfTG9uZ1JHQkEoYmxvYiwgbGVuZ3RoKTsgeFszXSA9IDA7IHJldHVybiB4OyB9XG5cblxuXHQvKiAtLS0gTVMtWExTIC0tLSAqL1xuXG5cdC8qIDIuNS4xOSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9YTFNDZWxsKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBydyA9IGJsb2IucmVhZF9zaGlmdCgyKTsgLy8gMC1pbmRleGVkXG5cdFx0dmFyIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRyZXR1cm4gKHtyOnJ3LCBjOmNvbCwgaXhmZTppeGZlfSk7XG5cdH1cblxuXHQvKiAyLjUuMTM0ICovXG5cdGZ1bmN0aW9uIHBhcnNlX2ZydEhlYWRlcihibG9iKSB7XG5cdFx0dmFyIHJ0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTsgLy8gVE9ETzogcGFyc2UgdGhlc2UgZmxhZ3Ncblx0XHRibG9iLmwgKz0gODtcblx0XHRyZXR1cm4ge3R5cGU6IHJ0LCBmbGFnczogZmxhZ3N9O1xuXHR9XG5cblxuXG5cdGZ1bmN0aW9uIHBhcnNlX09wdFhMVW5pY29kZVN0cmluZyhibG9iLCBsZW5ndGgsIG9wdHMpIHsgcmV0dXJuIGxlbmd0aCA9PT0gMCA/IFwiXCIgOiBwYXJzZV9YTFVuaWNvZGVTdHJpbmcyKGJsb2IsIGxlbmd0aCwgb3B0cyk7IH1cblxuXHQvKiAyLjUuMTU4ICovXG5cdC8vdmFyIEhJREVPQkpFTlVNID0gWydTSE9XQUxMJywgJ1NIT1dQTEFDRUhPTERFUicsICdISURFQUxMJ107XG5cdHZhciBwYXJzZV9IaWRlT2JqRW51bSA9IHBhcnNldWludDE2O1xuXG5cdC8qIDIuNS4zNDQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfWFRJKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBpU3VwQm9vayA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaXRhYkZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIsJ2knKSwgaXRhYkxhc3QgPSBibG9iLnJlYWRfc2hpZnQoMiwnaScpO1xuXHRcdHJldHVybiBbaVN1cEJvb2ssIGl0YWJGaXJzdCwgaXRhYkxhc3RdO1xuXHR9XG5cblx0LyogMi41LjIxOCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Sa1JlYyhibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgUksgPSBwYXJzZV9Sa051bWJlcihibG9iKTtcblx0XHRyZXR1cm4gW2l4ZmUsIFJLXTtcblx0fVxuXG5cdC8qIDIuNS4xICovXG5cdGZ1bmN0aW9uIHBhcnNlX0FkZGluVWRmKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdGJsb2IubCArPSA0OyBsZW5ndGggLT0gNDtcblx0XHR2YXIgbCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgdWRmTmFtZSA9IHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0dmFyIGNiID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGwgLT0gYmxvYi5sO1xuXHRcdGlmKGNiICE9PSBsKSB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgQWRkaW5VZGY6IHBhZGRpbmcgPSBcIiArIGwgKyBcIiAhPSBcIiArIGNiKTtcblx0XHRibG9iLmwgKz0gY2I7XG5cdFx0cmV0dXJuIHVkZk5hbWU7XG5cdH1cblxuXHQvKiAyLjUuMjA5IFRPRE86IENoZWNrIHNpemVzICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JlZjhVKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciByd0ZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciByd0xhc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNvbEZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBjb2xMYXN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHJldHVybiB7czp7Yzpjb2xGaXJzdCwgcjpyd0ZpcnN0fSwgZTp7Yzpjb2xMYXN0LHI6cndMYXN0fX07XG5cdH1cblxuXHQvKiAyLjUuMjExICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JlZlUoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHJ3Rmlyc3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHJ3TGFzdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY29sRmlyc3QgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0dmFyIGNvbExhc3QgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0cmV0dXJuIHtzOntjOmNvbEZpcnN0LCByOnJ3Rmlyc3R9LCBlOntjOmNvbExhc3Qscjpyd0xhc3R9fTtcblx0fVxuXG5cdC8qIDIuNS4yMDcgKi9cblx0dmFyIHBhcnNlX1JlZiA9IHBhcnNlX1JlZlU7XG5cblx0LyogMi41LjE0MyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9GdENtbyhibG9iLCBsZW5ndGgpIHtcblx0XHRibG9iLmwgKz0gNDtcblx0XHR2YXIgb3QgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGlkID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwrPTEyO1xuXHRcdHJldHVybiBbaWQsIG90LCBmbGFnc107XG5cdH1cblxuXHQvKiAyLjUuMTQ5ICovXG5cdGZ1bmN0aW9uIHBhcnNlX0Z0TnRzKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvdXQgPSB7fTtcblx0XHRibG9iLmwgKz0gNDtcblx0XHRibG9iLmwgKz0gMTY7IC8vIEdVSUQgVE9ET1xuXHRcdG91dC5mU2hhcmVkTm90ZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwgKz0gNDtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0LyogMi41LjE0MiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9GdENmKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvdXQgPSB7fTtcblx0XHRibG9iLmwgKz0gNDtcblx0XHRibG9iLmNmID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHQvKiAyLjUuMTQwIC0gMi41LjE1NCBhbmQgZnJpZW5kcyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9GdFNraXAoYmxvYiwgbGVuZ3RoKSB7IGJsb2IubCArPSAyOyBibG9iLmwgKz0gYmxvYi5yZWFkX3NoaWZ0KDIpOyB9XG5cdHZhciBGdFRhYiA9IHtcblx0MHgwMDogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0RW5kICovXG5cdDB4MDQ6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdE1hY3JvICovXG5cdDB4MDU6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdEJ1dHRvbiAqL1xuXHQweDA2OiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRHbW8gKi9cblx0MHgwNzogcGFyc2VfRnRDZiwgICAgICAgIC8qIEZ0Q2YgKi9cblx0MHgwODogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UGlvR3JiaXQgKi9cblx0MHgwOTogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0UGljdEZtbGEgKi9cblx0MHgwQTogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0Q2JscyAqL1xuXHQweDBCOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRSYm8gKi9cblx0MHgwQzogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0U2JzICovXG5cdDB4MEQ6IHBhcnNlX0Z0TnRzLCAgICAgICAvKiBGdE50cyAqL1xuXHQweDBFOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRTYnNGbWxhICovXG5cdDB4MEY6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdEdib0RhdGEgKi9cblx0MHgxMDogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0RWRvRGF0YSAqL1xuXHQweDExOiBwYXJzZV9GdFNraXAsICAgICAgLyogRnRSYm9EYXRhICovXG5cdDB4MTI6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdENibHNEYXRhICovXG5cdDB4MTM6IHBhcnNlX0Z0U2tpcCwgICAgICAvKiBGdExic0RhdGEgKi9cblx0MHgxNDogcGFyc2VfRnRTa2lwLCAgICAgIC8qIEZ0Q2Jsc0ZtbGEgKi9cblx0MHgxNTogcGFyc2VfRnRDbW9cblx0fTtcblx0ZnVuY3Rpb24gcGFyc2VfRnRBcnJheShibG9iLCBsZW5ndGgsIG90KSB7XG5cdFx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgZnRzID0gW107XG5cdFx0d2hpbGUoYmxvYi5sIDwgdGd0KSB7XG5cdFx0XHR2YXIgZnQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRibG9iLmwtPTI7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRmdHMucHVzaChGdFRhYltmdF0oYmxvYiwgdGd0IC0gYmxvYi5sKSk7XG5cdFx0XHR9IGNhdGNoKGUpIHsgYmxvYi5sID0gdGd0OyByZXR1cm4gZnRzOyB9XG5cdFx0fVxuXHRcdGlmKGJsb2IubCAhPSB0Z3QpIGJsb2IubCA9IHRndDsgLy90aHJvdyBuZXcgRXJyb3IoXCJiYWQgT2JqZWN0IEZ0LXNlcXVlbmNlXCIpO1xuXHRcdHJldHVybiBmdHM7XG5cdH1cblxuXHQvKiAyLjUuMTI5ICovXG5cdHZhciBwYXJzZV9Gb250SW5kZXggPSBwYXJzZXVpbnQxNjtcblxuXHQvKiAtLS0gMi40IFJlY29yZHMgLS0tICovXG5cblx0LyogMi40LjIxICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JPRihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHtCSUZGVmVyOjAsIGR0OjB9O1xuXHRcdG8uQklGRlZlciA9IGJsb2IucmVhZF9zaGlmdCgyKTsgbGVuZ3RoIC09IDI7XG5cdFx0aWYobGVuZ3RoID49IDIpIHsgby5kdCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgYmxvYi5sIC09IDI7IH1cblx0XHRzd2l0Y2goby5CSUZGVmVyKSB7XG5cdFx0XHRjYXNlIDB4MDYwMDogLyogQklGRjggKi9cblx0XHRcdGNhc2UgMHgwNTAwOiAvKiBCSUZGNSAqL1xuXHRcdFx0Y2FzZSAweDAwMDI6IGNhc2UgMHgwMDA3OiAvKiBCSUZGMiAqL1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKGxlbmd0aCA+IDYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgQklGRiBWZXIgXCIgKyBvLkJJRkZWZXIpO1xuXHRcdH1cblxuXHRcdGJsb2IucmVhZF9zaGlmdChsZW5ndGgpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblxuXHQvKiAyLjQuMTQ2ICovXG5cdGZ1bmN0aW9uIHBhcnNlX0ludGVyZmFjZUhkcihibG9iLCBsZW5ndGgpIHtcblx0XHRpZihsZW5ndGggPT09IDApIHJldHVybiAweDA0YjA7XG5cdFx0dmFyIHE7XG5cdFx0aWYoKHE9YmxvYi5yZWFkX3NoaWZ0KDIpKSE9PTB4MDRiMCl7LyogZW1wdHkgKi99XG5cdFx0cmV0dXJuIDB4MDRiMDtcblx0fVxuXG5cblx0LyogMi40LjM0OSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Xcml0ZUFjY2VzcyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHRpZihvcHRzLmVuYykgeyBibG9iLmwgKz0gbGVuZ3RoOyByZXR1cm4gXCJcIjsgfVxuXHRcdHZhciBsID0gYmxvYi5sO1xuXHRcdC8vIFRPRE86IG1ha2Ugc3VyZSBYTFVuaWNvZGVTdHJpbmcgZG9lc250IG92ZXJydW5cblx0XHR2YXIgVXNlck5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmcoYmxvYiwgMCwgb3B0cyk7XG5cdFx0YmxvYi5yZWFkX3NoaWZ0KGxlbmd0aCArIGwgLSBibG9iLmwpO1xuXHRcdHJldHVybiBVc2VyTmFtZTtcblx0fVxuXG5cdC8qIDIuNC4yOCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Cb3VuZFNoZWV0OChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgcG9zID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBoaWRkZW4gPSBibG9iLnJlYWRfc2hpZnQoMSkgJiAweDAzO1xuXHRcdHZhciBkdCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRzd2l0Y2goZHQpIHtcblx0XHRcdGNhc2UgMDogZHQgPSAnV29ya3NoZWV0JzsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IGR0ID0gJ01hY3Jvc2hlZXQnOyBicmVhaztcblx0XHRcdGNhc2UgMjogZHQgPSAnQ2hhcnRzaGVldCc7IGJyZWFrO1xuXHRcdFx0Y2FzZSA2OiBkdCA9ICdWQkFNb2R1bGUnOyBicmVhaztcblx0XHR9XG5cdFx0dmFyIG5hbWUgPSBwYXJzZV9TaG9ydFhMVW5pY29kZVN0cmluZyhibG9iLCAwLCBvcHRzKTtcblx0XHRpZihuYW1lLmxlbmd0aCA9PT0gMCkgbmFtZSA9IFwiU2hlZXQxXCI7XG5cdFx0cmV0dXJuIHsgcG9zOnBvcywgaHM6aGlkZGVuLCBkdDpkdCwgbmFtZTpuYW1lIH07XG5cdH1cblxuXHQvKiAyLjQuMjY1IFRPRE8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfU1NUKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHVjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHN0cnMgPSAoW10pO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gdWNudDsgKytpKSB7XG5cdFx0XHRzdHJzLnB1c2gocGFyc2VfWExVbmljb2RlUmljaEV4dGVuZGVkU3RyaW5nKGJsb2IpKTtcblx0XHR9XG5cdFx0c3Rycy5Db3VudCA9IGNudDsgc3Rycy5VbmlxdWUgPSB1Y250O1xuXHRcdHJldHVybiBzdHJzO1xuXHR9XG5cblx0LyogMi40LjEwNyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9FeHRTU1QoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGV4dHNzdCA9IHt9O1xuXHRcdGV4dHNzdC5kc3N0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGJsb2IubCArPSBsZW5ndGgtMjtcblx0XHRyZXR1cm4gZXh0c3N0O1xuXHR9XG5cblxuXHQvKiAyLjQuMjIxIFRPRE86IGNoZWNrIEJJRkYyLTQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUm93KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciB6ID0gKHt9KTtcblx0XHR6LnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0ei5jID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHouY250ID0gYmxvYi5yZWFkX3NoaWZ0KDIpIC0gei5jO1xuXHRcdHZhciBtaXlSdyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwgKz0gNDsgLy8gcmVzZXJ2ZWQoMiksIHVudXNlZCgyKVxuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgxKTsgLy8gdmFyaW91cyBmbGFnc1xuXHRcdGJsb2IubCArPSAzOyAvLyByZXNlcnZlZCg4KSwgaXhmZSgxMiksIGZsYWdzKDQpXG5cdFx0aWYoZmxhZ3MgJiAweDIwKSB6LmhpZGRlbiA9IHRydWU7XG5cdFx0aWYoZmxhZ3MgJiAweDQwKSB6LmhwdCA9IG1peVJ3IC8gMjA7XG5cdFx0cmV0dXJuIHo7XG5cdH1cblxuXG5cdC8qIDIuNC4xMjUgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRm9yY2VGdWxsQ2FsY3VsYXRpb24oYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGhlYWRlciA9IHBhcnNlX2ZydEhlYWRlcihibG9iKTtcblx0XHRpZihoZWFkZXIudHlwZSAhPSAweDA4QTMpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRnV0dXJlIFJlY29yZCBcIiArIGhlYWRlci50eXBlKTtcblx0XHR2YXIgZnVsbGNhbGMgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0cmV0dXJuIGZ1bGxjYWxjICE9PSAweDA7XG5cdH1cblxuXG5cdHZhciBwYXJzZV9Db21wcmVzc1BpY3R1cmVzID0gcGFyc2Vub29wMjsgLyogMi40LjU1IE5vdCBpbnRlcmVzdGluZyAqL1xuXG5cblxuXHQvKiAyLjQuMjE1IHJ0ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JlY2FsY0lkKGJsb2IsIGxlbmd0aCkge1xuXHRcdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRyZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHR9XG5cblx0LyogMi40Ljg3ICovXG5cdGZ1bmN0aW9uIHBhcnNlX0RlZmF1bHRSb3dIZWlnaHQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGYgPSAwO1xuXHRcdGlmKCEob3B0cyAmJiBvcHRzLmJpZmYgPT0gMikpIHtcblx0XHRcdGYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0fVxuXHRcdHZhciBtaXlSdyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZigob3B0cyAmJiBvcHRzLmJpZmYgPT0gMikpIHtcblx0XHRcdGYgPSAxIC0gKG1peVJ3ID4+IDE1KTsgbWl5UncgJj0gMHg3ZmZmO1xuXHRcdH1cblx0XHR2YXIgZmwgPSB7VW5zeW5jZWQ6ZiYxLER5WmVybzooZiYyKT4+MSxFeEFzYzooZiY0KT4+MixFeERzYzooZiY4KT4+M307XG5cdFx0cmV0dXJuIFtmbCwgbWl5UnddO1xuXHR9XG5cblx0LyogMi40LjM0NSBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1dpbmRvdzEoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHhXbiA9IGJsb2IucmVhZF9zaGlmdCgyKSwgeVduID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBkeFduID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBkeVduID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaVRhYkN1ciA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaVRhYkZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBjdGFiU2VsID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCB3VGFiUmF0aW8gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0cmV0dXJuIHsgUG9zOiBbeFduLCB5V25dLCBEaW06IFtkeFduLCBkeVduXSwgRmxhZ3M6IGZsYWdzLCBDdXJUYWI6IGlUYWJDdXIsXG5cdFx0XHRGaXJzdFRhYjogaVRhYkZpcnN0LCBTZWxlY3RlZDogY3RhYlNlbCwgVGFiUmF0aW86IHdUYWJSYXRpbyB9O1xuXHR9XG5cblx0LyogMi40LjEyMiBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX0ZvbnQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSB7XG5cdFx0XHRkeUhlaWdodDogYmxvYi5yZWFkX3NoaWZ0KDIpLFxuXHRcdFx0Zmw6IGJsb2IucmVhZF9zaGlmdCgyKVxuXHRcdH07XG5cdFx0c3dpdGNoKG9wdHMgJiYgb3B0cy5iaWZmIHx8IDgpIHtcblx0XHRcdGNhc2UgMjogYnJlYWs7XG5cdFx0XHRjYXNlIDM6IGNhc2UgNDogYmxvYi5sICs9IDI7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogYmxvYi5sICs9IDEwOyBicmVhaztcblx0XHR9XG5cdFx0by5uYW1lID0gcGFyc2VfU2hvcnRYTFVuaWNvZGVTdHJpbmcoYmxvYiwgMCwgb3B0cyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiAyLjQuMTQ5ICovXG5cdGZ1bmN0aW9uIHBhcnNlX0xhYmVsU3N0KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iKTtcblx0XHRjZWxsLmlzc3QgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0cmV0dXJuIGNlbGw7XG5cdH1cblxuXHQvKiAyLjQuMTQ4ICovXG5cdGZ1bmN0aW9uIHBhcnNlX0xhYmVsKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHRcdGlmKG9wdHMuYmlmZiA9PSAyKSBibG9iLmwrKztcblx0XHR2YXIgc3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nKGJsb2IsIHRhcmdldCAtIGJsb2IubCwgb3B0cyk7XG5cdFx0Y2VsbC52YWwgPSBzdHI7XG5cdFx0cmV0dXJuIGNlbGw7XG5cdH1cblxuXHQvKiAyLjQuMTI2IE51bWJlciBGb3JtYXRzICovXG5cdGZ1bmN0aW9uIHBhcnNlX0Zvcm1hdChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgaWZtdCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgZm10c3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCBvcHRzKTtcblx0XHRyZXR1cm4gW2lmbXQsIGZtdHN0cl07XG5cdH1cblx0dmFyIHBhcnNlX0JJRkYyRm9ybWF0ID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMjtcblxuXHQvKiAyLjQuOTAgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRGltZW5zaW9ucyhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHZhciB3ID0gb3B0cy5iaWZmID09IDggfHwgIW9wdHMuYmlmZiA/IDQgOiAyO1xuXHRcdHZhciByID0gYmxvYi5yZWFkX3NoaWZ0KHcpLCBSID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHRcdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBDID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGJsb2IubCA9IGVuZDtcblx0XHRyZXR1cm4ge3M6IHtyOnIsIGM6Y30sIGU6IHtyOlIsIGM6Q319O1xuXHR9XG5cblx0LyogMi40LjIyMCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SSyhibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgcncgPSBibG9iLnJlYWRfc2hpZnQoMiksIGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgcmtyZWMgPSBwYXJzZV9Sa1JlYyhibG9iKTtcblx0XHRyZXR1cm4ge3I6cncsIGM6Y29sLCBpeGZlOnJrcmVjWzBdLCBya251bTpya3JlY1sxXX07XG5cdH1cblxuXHQvKiAyLjQuMTc1ICovXG5cdGZ1bmN0aW9uIHBhcnNlX011bFJrKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGggLSAyO1xuXHRcdHZhciBydyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgY29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBya3JlY3MgPSBbXTtcblx0XHR3aGlsZShibG9iLmwgPCB0YXJnZXQpIHJrcmVjcy5wdXNoKHBhcnNlX1JrUmVjKGJsb2IpKTtcblx0XHRpZihibG9iLmwgIT09IHRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiTXVsUksgcmVhZCBlcnJvclwiKTtcblx0XHR2YXIgbGFzdGNvbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRpZihya3JlY3MubGVuZ3RoICE9IGxhc3Rjb2wgLSBjb2wgKyAxKSB0aHJvdyBuZXcgRXJyb3IoXCJNdWxSSyBsZW5ndGggbWlzbWF0Y2hcIik7XG5cdFx0cmV0dXJuIHtyOnJ3LCBjOmNvbCwgQzpsYXN0Y29sLCBya3JlYzpya3JlY3N9O1xuXHR9XG5cdC8qIDIuNC4xNzQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfTXVsQmxhbmsoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aCAtIDI7XG5cdFx0dmFyIHJ3ID0gYmxvYi5yZWFkX3NoaWZ0KDIpLCBjb2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGl4ZmVzID0gW107XG5cdFx0d2hpbGUoYmxvYi5sIDwgdGFyZ2V0KSBpeGZlcy5wdXNoKGJsb2IucmVhZF9zaGlmdCgyKSk7XG5cdFx0aWYoYmxvYi5sICE9PSB0YXJnZXQpIHRocm93IG5ldyBFcnJvcihcIk11bEJsYW5rIHJlYWQgZXJyb3JcIik7XG5cdFx0dmFyIGxhc3Rjb2wgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0aWYoaXhmZXMubGVuZ3RoICE9IGxhc3Rjb2wgLSBjb2wgKyAxKSB0aHJvdyBuZXcgRXJyb3IoXCJNdWxCbGFuayBsZW5ndGggbWlzbWF0Y2hcIik7XG5cdFx0cmV0dXJuIHtyOnJ3LCBjOmNvbCwgQzpsYXN0Y29sLCBpeGZlOml4ZmVzfTtcblx0fVxuXG5cdC8qIDIuNS4yMCAyLjUuMjQ5IFRPRE86IGludGVycHJldCB2YWx1ZXMgaGVyZSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9DZWxsU3R5bGVYRihibG9iLCBsZW5ndGgsIHN0eWxlLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSB7fTtcblx0XHR2YXIgYSA9IGJsb2IucmVhZF9zaGlmdCg0KSwgYiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCg0KSwgZCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRvLnBhdHRlcm5UeXBlID0gWExTRmlsbFBhdHRlcm5bYyA+PiAyNl07XG5cblx0XHRpZighb3B0cy5jZWxsU3R5bGVzKSByZXR1cm4gbztcblx0XHRvLmFsYyA9IGEgJiAweDA3O1xuXHRcdG8uZldyYXAgPSAoYSA+PiAzKSAmIDB4MDE7XG5cdFx0by5hbGNWID0gKGEgPj4gNCkgJiAweDA3O1xuXHRcdG8uZkp1c3RMYXN0ID0gKGEgPj4gNykgJiAweDAxO1xuXHRcdG8udHJvdCA9IChhID4+IDgpICYgMHhGRjtcblx0XHRvLmNJbmRlbnQgPSAoYSA+PiAxNikgJiAweDBGO1xuXHRcdG8uZlNocmlua1RvRml0ID0gKGEgPj4gMjApICYgMHgwMTtcblx0XHRvLmlSZWFkT3JkZXIgPSAoYSA+PiAyMikgJiAweDAyO1xuXHRcdG8uZkF0ck51bSA9IChhID4+IDI2KSAmIDB4MDE7XG5cdFx0by5mQXRyRm50ID0gKGEgPj4gMjcpICYgMHgwMTtcblx0XHRvLmZBdHJBbGMgPSAoYSA+PiAyOCkgJiAweDAxO1xuXHRcdG8uZkF0ckJkciA9IChhID4+IDI5KSAmIDB4MDE7XG5cdFx0by5mQXRyUGF0ID0gKGEgPj4gMzApICYgMHgwMTtcblx0XHRvLmZBdHJQcm90ID0gKGEgPj4gMzEpICYgMHgwMTtcblxuXHRcdG8uZGdMZWZ0ID0gYiAmIDB4MEY7XG5cdFx0by5kZ1JpZ2h0ID0gKGIgPj4gNCkgJiAweDBGO1xuXHRcdG8uZGdUb3AgPSAoYiA+PiA4KSAmIDB4MEY7XG5cdFx0by5kZ0JvdHRvbSA9IChiID4+IDEyKSAmIDB4MEY7XG5cdFx0by5pY3ZMZWZ0ID0gKGIgPj4gMTYpICYgMHg3Rjtcblx0XHRvLmljdlJpZ2h0ID0gKGIgPj4gMjMpICYgMHg3Rjtcblx0XHRvLmdyYml0RGlhZyA9IChiID4+IDMwKSAmIDB4MDM7XG5cblx0XHRvLmljdlRvcCA9IGMgJiAweDdGO1xuXHRcdG8uaWN2Qm90dG9tID0gKGMgPj4gNykgJiAweDdGO1xuXHRcdG8uaWN2RGlhZyA9IChjID4+IDE0KSAmIDB4N0Y7XG5cdFx0by5kZ0RpYWcgPSAoYyA+PiAyMSkgJiAweDBGO1xuXG5cdFx0by5pY3ZGb3JlID0gZCAmIDB4N0Y7XG5cdFx0by5pY3ZCYWNrID0gKGQgPj4gNykgJiAweDdGO1xuXHRcdG8uZnN4QnV0dG9uID0gKGQgPj4gMTQpICYgMHgwMTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiBwYXJzZV9DZWxsWEYoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7cmV0dXJuIHBhcnNlX0NlbGxTdHlsZVhGKGJsb2IsbGVuZ3RoLDAsIG9wdHMpO31cblx0ZnVuY3Rpb24gcGFyc2VfU3R5bGVYRihibG9iLCBsZW5ndGgsIG9wdHMpIHtyZXR1cm4gcGFyc2VfQ2VsbFN0eWxlWEYoYmxvYixsZW5ndGgsMSwgb3B0cyk7fVxuXG5cdC8qIDIuNC4zNTMgVE9ETzogYWN0dWFsbHkgZG8gdGhpcyByaWdodCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9YRihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgbyA9IHt9O1xuXHRcdG8uaWZudCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgby5pZm10ID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBvLmZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdG8uZlN0eWxlID0gKG8uZmxhZ3MgPj4gMikgJiAweDAxO1xuXHRcdGxlbmd0aCAtPSA2O1xuXHRcdG8uZGF0YSA9IHBhcnNlX0NlbGxTdHlsZVhGKGJsb2IsIGxlbmd0aCwgby5mU3R5bGUsIG9wdHMpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjEzNCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9HdXRzKGJsb2IsIGxlbmd0aCkge1xuXHRcdGJsb2IubCArPSA0O1xuXHRcdHZhciBvdXQgPSBbYmxvYi5yZWFkX3NoaWZ0KDIpLCBibG9iLnJlYWRfc2hpZnQoMildO1xuXHRcdGlmKG91dFswXSAhPT0gMCkgb3V0WzBdLS07XG5cdFx0aWYob3V0WzFdICE9PSAwKSBvdXRbMV0tLTtcblx0XHRpZihvdXRbMF0gPiA3IHx8IG91dFsxXSA+IDcpIHRocm93IG5ldyBFcnJvcihcIkJhZCBHdXR0ZXJzOiBcIiArIG91dC5qb2luKFwifFwiKSk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdC8qIDIuNC4yNCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Cb29sRXJyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iLCA2KTtcblx0XHRpZihvcHRzLmJpZmYgPT0gMikgKytibG9iLmw7XG5cdFx0dmFyIHZhbCA9IHBhcnNlX0JlcyhibG9iLCAyKTtcblx0XHRjZWxsLnZhbCA9IHZhbDtcblx0XHRjZWxsLnQgPSAodmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2UpID8gJ2InIDogJ2UnO1xuXHRcdHJldHVybiBjZWxsO1xuXHR9XG5cblx0LyogMi40LjE4MCBOdW1iZXIgKi9cblx0ZnVuY3Rpb24gcGFyc2VfTnVtYmVyKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iLCA2KTtcblx0XHR2YXIgeG51bSA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdFx0Y2VsbC52YWwgPSB4bnVtO1xuXHRcdHJldHVybiBjZWxsO1xuXHR9XG5cblx0dmFyIHBhcnNlX1hMSGVhZGVyRm9vdGVyID0gcGFyc2VfT3B0WExVbmljb2RlU3RyaW5nOyAvLyBUT0RPOiBwYXJzZSAyLjQuMTM2XG5cblx0LyogMi40LjI3MSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9TdXBCb29rKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGN0YWIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgdmlydFBhdGg7XG5cdFx0aWYoY2NoID49MHgwMSAmJiBjY2ggPD0weGZmKSB2aXJ0UGF0aCA9IHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaCk7XG5cdFx0dmFyIHJnc3QgPSBibG9iLnJlYWRfc2hpZnQoZW5kIC0gYmxvYi5sKTtcblx0XHRvcHRzLnNiY2NoID0gY2NoO1xuXHRcdHJldHVybiBbY2NoLCBjdGFiLCB2aXJ0UGF0aCwgcmdzdF07XG5cdH1cblxuXHQvKiAyLjQuMTA1IFRPRE8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfRXh0ZXJuTmFtZShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGJvZHk7XG5cdFx0dmFyIG8gPSAoe1xuXHRcdFx0ZkJ1aWx0SW46IGZsYWdzICYgMHgwMSxcblx0XHRcdGZXYW50QWR2aXNlOiAoZmxhZ3MgPj4+IDEpICYgMHgwMSxcblx0XHRcdGZXYW50UGljdDogKGZsYWdzID4+PiAyKSAmIDB4MDEsXG5cdFx0XHRmT2xlOiAoZmxhZ3MgPj4+IDMpICYgMHgwMSxcblx0XHRcdGZPbGVMaW5rOiAoZmxhZ3MgPj4+IDQpICYgMHgwMSxcblx0XHRcdGNmOiAoZmxhZ3MgPj4+IDUpICYgMHgzRkYsXG5cdFx0XHRmSWNvbjogZmxhZ3MgPj4+IDE1ICYgMHgwMVxuXHRcdH0pO1xuXHRcdGlmKG9wdHMuc2JjY2ggPT09IDB4M0EwMSkgYm9keSA9IHBhcnNlX0FkZGluVWRmKGJsb2IsIGxlbmd0aC0yLCBvcHRzKTtcblx0XHQvL2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgU3VwQm9vayBjY2g6IFwiICsgb3B0cy5zYmNjaCk7XG5cdFx0by5ib2R5ID0gYm9keSB8fCBibG9iLnJlYWRfc2hpZnQobGVuZ3RoLTIpO1xuXHRcdGlmKHR5cGVvZiBib2R5ID09PSBcInN0cmluZ1wiKSBvLk5hbWUgPSBib2R5O1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjE1MCBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX0xibChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY2hLZXkgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdFx0dmFyIGl0YWIgPSAwO1xuXHRcdGlmKCFvcHRzIHx8IG9wdHMuYmlmZiA+PSA1KSB7XG5cdFx0XHRibG9iLmwgKz0gMjtcblx0XHRcdGl0YWIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRibG9iLmwgKz0gNDtcblx0XHR9XG5cdFx0dmFyIG5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2gsIG9wdHMpO1xuXHRcdHZhciBucGZsZW4gPSB0YXJnZXQgLSBibG9iLmw7IGlmKG9wdHMgJiYgb3B0cy5iaWZmID09IDIpIC0tbnBmbGVuO1xuXHRcdHZhciByZ2NlID0gdGFyZ2V0ID09IGJsb2IubCB8fCBjY2UgPT0gMCA/IFtdIDogcGFyc2VfTmFtZVBhcnNlZEZvcm11bGEoYmxvYiwgbnBmbGVuLCBvcHRzLCBjY2UpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRjaEtleTogY2hLZXksXG5cdFx0XHROYW1lOiBuYW1lLFxuXHRcdFx0aXRhYjogaXRhYixcblx0XHRcdHJnY2U6IHJnY2Vcblx0XHR9O1xuXHR9XG5cblx0LyogMi40LjEwNiBUT0RPOiB2ZXJpZnkgc3VwYm9vayBtYW5pcHVsYXRpb24gKi9cblx0ZnVuY3Rpb24gcGFyc2VfRXh0ZXJuU2hlZXQoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0aWYob3B0cy5iaWZmIDwgOCkgcmV0dXJuIHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0dmFyIG8gPSBbXSwgdGFyZ2V0ID0gYmxvYi5sICsgbGVuZ3RoLCBsZW4gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0d2hpbGUobGVuLS0gIT09IDApIG8ucHVzaChwYXJzZV9YVEkoYmxvYiwgNikpO1xuXHRcdFx0Ly8gW2lTdXBCb29rLCBpdGFiRmlyc3QsIGl0YWJMYXN0XTtcblx0XHR2YXIgb28gPSBbXTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIDIuNC4xNzYgVE9ETzogY2hlY2sgb2xkZXIgYmlmZiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9OYW1lQ210KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdGlmKG9wdHMuYmlmZiA8IDgpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuOyB9XG5cdFx0dmFyIGNjaE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNjaENvbW1lbnQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIG5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBjY2hOYW1lLCBvcHRzKTtcblx0XHR2YXIgY29tbWVudCA9IHBhcnNlX1hMVW5pY29kZVN0cmluZ05vQ2NoKGJsb2IsIGNjaENvbW1lbnQsIG9wdHMpO1xuXHRcdHJldHVybiBbbmFtZSwgY29tbWVudF07XG5cdH1cblxuXHQvKiAyLjQuMjYwICovXG5cdGZ1bmN0aW9uIHBhcnNlX1NockZtbGEoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHJlZiA9IHBhcnNlX1JlZlUoYmxvYiwgNik7XG5cdFx0YmxvYi5sKys7XG5cdFx0dmFyIGNVc2UgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0bGVuZ3RoIC09IDg7XG5cdFx0cmV0dXJuIFtwYXJzZV9TaGFyZWRQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cyksIGNVc2VdO1xuXHR9XG5cblx0LyogMi40LjQgVE9ETyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9BcnJheShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgcmVmID0gcGFyc2VfUmVmKGJsb2IsIDYpO1xuXHRcdC8qIFRPRE86IGZBbHdheXNDYWxjICovXG5cdFx0c3dpdGNoKG9wdHMuYmlmZikge1xuXHRcdFx0Y2FzZSAyOiBibG9iLmwgKys7IGxlbmd0aCAtPSA3OyBicmVhaztcblx0XHRcdGNhc2UgMzogY2FzZSA0OiBibG9iLmwgKz0gMjsgbGVuZ3RoIC09IDg7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogYmxvYi5sICs9IDY7IGxlbmd0aCAtPSAxMjtcblx0XHR9XG5cdFx0cmV0dXJuIFtyZWYsIHBhcnNlX0FycmF5UGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMsIHJlZildO1xuXHR9XG5cblx0LyogMi40LjE3MyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9NVFJTZXR0aW5ncyhibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgZk1UUkVuYWJsZWQgPSBibG9iLnJlYWRfc2hpZnQoNCkgIT09IDB4MDA7XG5cdFx0dmFyIGZVc2VyU2V0VGhyZWFkQ291bnQgPSBibG9iLnJlYWRfc2hpZnQoNCkgIT09IDB4MDA7XG5cdFx0dmFyIGNVc2VyVGhyZWFkQ291bnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0cmV0dXJuIFtmTVRSRW5hYmxlZCwgZlVzZXJTZXRUaHJlYWRDb3VudCwgY1VzZXJUaHJlYWRDb3VudF07XG5cdH1cblxuXHQvKiAyLjUuMTg2IFRPRE86IEJJRkY1ICovXG5cdGZ1bmN0aW9uIHBhcnNlX05vdGVTaChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHRpZihvcHRzLmJpZmYgPCA4KSByZXR1cm47XG5cdFx0dmFyIHJvdyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgY29sID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCgyKSwgaWRPYmogPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHN0QXV0aG9yID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCAwLCBvcHRzKTtcblx0XHRpZihvcHRzLmJpZmYgPCA4KSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0cmV0dXJuIFt7cjpyb3csYzpjb2x9LCBzdEF1dGhvciwgaWRPYmosIGZsYWdzXTtcblx0fVxuXG5cdC8qIDIuNC4xNzkgKi9cblx0ZnVuY3Rpb24gcGFyc2VfTm90ZShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHQvKiBUT0RPOiBTdXBwb3J0IHJldmlzaW9ucyAqL1xuXHRcdHJldHVybiBwYXJzZV9Ob3RlU2goYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0fVxuXG5cdC8qIDIuNC4xNjggKi9cblx0ZnVuY3Rpb24gcGFyc2VfTWVyZ2VDZWxscyhibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbWVyZ2VzID0gW107XG5cdFx0dmFyIGNtY3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0d2hpbGUgKGNtY3MtLSkgbWVyZ2VzLnB1c2gocGFyc2VfUmVmOFUoYmxvYixsZW5ndGgpKTtcblx0XHRyZXR1cm4gbWVyZ2VzO1xuXHR9XG5cblx0LyogMi40LjE4MSBUT0RPOiBwYXJzZSBhbGwgdGhlIHRoaW5ncyEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfT2JqKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdGlmKG9wdHMgJiYgb3B0cy5iaWZmIDwgOCkgcmV0dXJuIHBhcnNlX0JJRkY1T2JqKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0dmFyIGNtbyA9IHBhcnNlX0Z0Q21vKGJsb2IsIDIyKTsgLy8gaWQsIG90LCBmbGFnc1xuXHRcdHZhciBmdHMgPSBwYXJzZV9GdEFycmF5KGJsb2IsIGxlbmd0aC0yMiwgY21vWzFdKTtcblx0XHRyZXR1cm4geyBjbW86IGNtbywgZnQ6ZnRzIH07XG5cdH1cblx0LyogZnJvbSBvbGRlciBzcGVjICovXG5cdHZhciBwYXJzZV9CSUZGNU9UID0gW107XG5cdHBhcnNlX0JJRkY1T1RbMHgwOF0gPSBmdW5jdGlvbihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdGd0ID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdGJsb2IubCArPSAxMDsgLy8gdG9kb1xuXHRcdHZhciBjZiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwgKz0gNDtcblx0XHR2YXIgY2JQaWN0Rm1sYSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwgKz0gMjtcblx0XHR2YXIgZ3JiaXQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sICs9IDQ7XG5cdFx0dmFyIGNjaE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0YmxvYi5sICs9IGNjaE5hbWU7IC8vIFRPRE86IHN0TmFtZVxuXHRcdGJsb2IubCA9IHRndDsgLy8gVE9ETzogZm1sYVxuXHRcdHJldHVybiB7IGZtdDpjZiB9O1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHBhcnNlX0JJRkY1T2JqKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIG90ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBpZCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgZ3JiaXQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNvbEwgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGR4TCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgcndUID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBkeVQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNvbFIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGR4UiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgcndCID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBkeUIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNiTWFjcm8gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sICs9IDY7XG5cdFx0bGVuZ3RoIC09IDM2O1xuXHRcdHZhciBmdHMgPSBbXTtcblx0XHRmdHMucHVzaCgocGFyc2VfQklGRjVPVFtvdF18fHBhcnNlbm9vcCkoYmxvYiwgbGVuZ3RoLCBvcHRzKSk7XG5cdFx0cmV0dXJuIHsgY21vOiBbaWQsIG90LCBncmJpdF0sIGZ0OmZ0cyB9O1xuXHR9XG5cblx0LyogMi40LjMyOSBUT0RPOiBwYXJzZSBwcm9wZXJseSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9UeE8oYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHMgPSBibG9iLmw7XG5cdFx0dmFyIHRleHRzID0gXCJcIjtcblx0dHJ5IHtcblx0XHRibG9iLmwgKz0gNDtcblx0XHR2YXIgb3QgPSAob3B0cy5sYXN0b2JqfHx7Y21vOlswLDBdfSkuY21vWzFdO1xuXHRcdHZhciBjb250cm9sSW5mbztcblx0XHRpZihbMCw1LDcsMTEsMTIsMTRdLmluZGV4T2Yob3QpID09IC0xKSBibG9iLmwgKz0gNjtcblx0XHRlbHNlIGNvbnRyb2xJbmZvID0gcGFyc2VfQ29udHJvbEluZm8oYmxvYiwgNiwgb3B0cyk7XG5cdFx0dmFyIGNjaFRleHQgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGNiUnVucyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgaWZudEVtcHR5ID0gcGFyc2VfRm9udEluZGV4KGJsb2IsIDIpO1xuXHRcdHZhciBsZW4gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0YmxvYi5sICs9IGxlbjtcblx0XHQvL3ZhciBmbWxhID0gcGFyc2VfT2JqRm1sYShibG9iLCBzICsgbGVuZ3RoIC0gYmxvYi5sKTtcblxuXHRcdGZvcih2YXIgaSA9IDE7IGkgPCBibG9iLmxlbnMubGVuZ3RoLTE7ICsraSkge1xuXHRcdFx0aWYoYmxvYi5sLXMgIT0gYmxvYi5sZW5zW2ldKSB0aHJvdyBuZXcgRXJyb3IoXCJUeE86IGJhZCBjb250aW51ZSByZWNvcmRcIik7XG5cdFx0XHR2YXIgaGRyID0gYmxvYltibG9iLmxdO1xuXHRcdFx0dmFyIHQgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmdOb0NjaChibG9iLCBibG9iLmxlbnNbaSsxXS1ibG9iLmxlbnNbaV0tMSk7XG5cdFx0XHR0ZXh0cyArPSB0O1xuXHRcdFx0aWYodGV4dHMubGVuZ3RoID49IChoZHIgPyBjY2hUZXh0IDogMipjY2hUZXh0KSkgYnJlYWs7XG5cdFx0fVxuXHRcdGlmKHRleHRzLmxlbmd0aCAhPT0gY2NoVGV4dCAmJiB0ZXh0cy5sZW5ndGggIT09IGNjaFRleHQqMikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2NoVGV4dDogXCIgKyBjY2hUZXh0ICsgXCIgIT0gXCIgKyB0ZXh0cy5sZW5ndGgpO1xuXHRcdH1cblxuXHRcdGJsb2IubCA9IHMgKyBsZW5ndGg7XG5cdFx0LyogMi41LjI3MiBUeE9SdW5zICovXG5cdC8vXHR2YXIgcmdUeG9SdW5zID0gW107XG5cdC8vXHRmb3IodmFyIGogPSAwOyBqICE9IGNiUnVucy84LTE7ICsraikgYmxvYi5sICs9IDg7XG5cdC8vXHR2YXIgY2NoVGV4dDIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdC8vXHRpZihjY2hUZXh0MiAhPT0gY2NoVGV4dCkgdGhyb3cgbmV3IEVycm9yKFwiVHhPTGFzdFJ1biBtaXNtYXRjaDogXCIgKyBjY2hUZXh0MiArIFwiIFwiICsgY2NoVGV4dCk7XG5cdC8vXHRibG9iLmwgKz0gNjtcblx0Ly9cdGlmKHMgKyBsZW5ndGggIT0gYmxvYi5sKSB0aHJvdyBuZXcgRXJyb3IoXCJUeE8gXCIgKyAocyArIGxlbmd0aCkgKyBcIiwgYXQgXCIgKyBibG9iLmwpO1xuXHRcdHJldHVybiB7IHQ6IHRleHRzIH07XG5cdH0gY2F0Y2goZSkgeyBibG9iLmwgPSBzICsgbGVuZ3RoOyByZXR1cm4geyB0OiB0ZXh0cyB9OyB9XG5cdH1cblxuXHQvKiAyLjQuMTQwICovXG5cdHZhciBwYXJzZV9ITGluayA9IGZ1bmN0aW9uKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciByZWYgPSBwYXJzZV9SZWY4VShibG9iLCA4KTtcblx0XHRibG9iLmwgKz0gMTY7IC8qIENMU0lEICovXG5cdFx0dmFyIGhsaW5rID0gcGFyc2VfSHlwZXJsaW5rKGJsb2IsIGxlbmd0aC0yNCk7XG5cdFx0cmV0dXJuIFtyZWYsIGhsaW5rXTtcblx0fTtcblxuXHQvKiAyLjQuMTQxICovXG5cdHZhciBwYXJzZV9ITGlua1Rvb2x0aXAgPSBmdW5jdGlvbihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgcmVmID0gcGFyc2VfUmVmOFUoYmxvYiwgOCk7XG5cdFx0dmFyIHd6VG9vbHRpcCA9IGJsb2IucmVhZF9zaGlmdCgobGVuZ3RoLTEwKS8yLCAnZGJjcy1jb250Jyk7XG5cdFx0d3pUb29sdGlwID0gd3pUb29sdGlwLnJlcGxhY2UoY2hyMCxcIlwiKTtcblx0XHRyZXR1cm4gW3JlZiwgd3pUb29sdGlwXTtcblx0fTtcblxuXHQvKiAyLjQuNjMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQ291bnRyeShibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IFtdLCBkO1xuXHRcdGQgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bMF0gPSBDb3VudHJ5RW51bVtkXSB8fCBkO1xuXHRcdGQgPSBibG9iLnJlYWRfc2hpZnQoMik7IG9bMV0gPSBDb3VudHJ5RW51bVtkXSB8fCBkO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjUwIENscnRDbGllbnQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQ2xydENsaWVudChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgY2N2ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBvID0gW107XG5cdFx0d2hpbGUoY2N2LS0+MCkgby5wdXNoKHBhcnNlX0xvbmdSR0IoYmxvYiwgOCkpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjE4OCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QYWxldHRlKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBjY3YgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHR3aGlsZShjY3YtLT4wKSBvLnB1c2gocGFyc2VfTG9uZ1JHQihibG9iLCA4KSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiAyLjQuMzU0ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hGQ1JDKGJsb2IsIGxlbmd0aCkge1xuXHRcdGJsb2IubCArPSAyO1xuXHRcdHZhciBvID0ge2N4ZnM6MCwgY3JjOjB9O1xuXHRcdG8uY3hmcyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRvLmNyYyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIDIuNC41MyBUT0RPOiBwYXJzZSBmbGFncyAqL1xuXHQvKiBbTVMtWExTQl0gMi40LjMyMyBUT0RPOiBwYXJzZSBmbGFncyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Db2xJbmZvKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdGlmKCFvcHRzLmNlbGxTdHlsZXMpIHJldHVybiBwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKTtcblx0XHR2YXIgdyA9IG9wdHMgJiYgb3B0cy5iaWZmID49IDEyID8gNCA6IDI7XG5cdFx0dmFyIGNvbEZpcnN0ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHRcdHZhciBjb2xMYXN0ID0gYmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHRcdHZhciBjb2xkeCA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0XHR2YXIgaXhmZSA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0XHR2YXIgZmxhZ3MgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0aWYodyA9PSAyKSBibG9iLmwgKz0gMjtcblx0XHRyZXR1cm4ge3M6Y29sRmlyc3QsIGU6Y29sTGFzdCwgdzpjb2xkeCwgaXhmZTppeGZlLCBmbGFnczpmbGFnc307XG5cdH1cblxuXHQvKiAyLjQuMjU3ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1NldHVwKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBvID0ge307XG5cdFx0YmxvYi5sICs9IDE2O1xuXHRcdG8uaGVhZGVyID0gcGFyc2VfWG51bShibG9iLCA4KTtcblx0XHRvLmZvb3RlciA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdFx0YmxvYi5sICs9IDI7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiAyLjQuMjYxICovXG5cdGZ1bmN0aW9uIHBhcnNlX1NodFByb3BzKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBkZWYgPSB7YXJlYTpmYWxzZX07XG5cdFx0aWYob3B0cy5iaWZmICE9IDUpIHsgYmxvYi5sICs9IGxlbmd0aDsgcmV0dXJuIGRlZjsgfVxuXHRcdHZhciBkID0gYmxvYi5yZWFkX3NoaWZ0KDEpOyBibG9iLmwgKz0gMztcblx0XHRpZigoZCAmIDB4MTApKSBkZWYuYXJlYSA9IHRydWU7XG5cdFx0cmV0dXJuIGRlZjtcblx0fVxuXG5cdHZhciBwYXJzZV9TdHlsZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N0eWxlRXh0ID0gcGFyc2Vub29wO1xuXG5cdHZhciBwYXJzZV9XaW5kb3cyID0gcGFyc2Vub29wO1xuXG5cdHZhciBwYXJzZV9CYWNrdXAgPSBwYXJzZWJvb2w7IC8qIDIuNC4xNCAqL1xuXHR2YXIgcGFyc2VfQmxhbmsgPSBwYXJzZV9YTFNDZWxsOyAvKiAyLjQuMjAgSnVzdCB0aGUgY2VsbCAqL1xuXHR2YXIgcGFyc2VfQm90dG9tTWFyZ2luID0gcGFyc2VfWG51bTsgLyogMi40LjI3ICovXG5cdHZhciBwYXJzZV9CdWlsdEluRm5Hcm91cENvdW50ID0gcGFyc2V1aW50MTY7IC8qIDIuNC4zMCAweDBFIG9yIDB4MTAgYnV0IGV4Y2VsIDIwMTEgZ2VuZXJhdGVzIDB4MTE/ICovXG5cdHZhciBwYXJzZV9DYWxjQ291bnQgPSBwYXJzZXVpbnQxNjsgLyogMi40LjMxICNJdGVyYXRpb25zICovXG5cdHZhciBwYXJzZV9DYWxjRGVsdGEgPSBwYXJzZV9YbnVtOyAvKiAyLjQuMzIgKi9cblx0dmFyIHBhcnNlX0NhbGNJdGVyID0gcGFyc2Vib29sOyAgLyogMi40LjMzIDE9aXRlcmF0aXZlIGNhbGMgKi9cblx0dmFyIHBhcnNlX0NhbGNNb2RlID0gcGFyc2V1aW50MTY7IC8qIDIuNC4zNCAwPW1hbnVhbCwgMT1hdXRvIChkZWYpLCAyPXRhYmxlICovXG5cdHZhciBwYXJzZV9DYWxjUHJlY2lzaW9uID0gcGFyc2Vib29sOyAvKiAyLjQuMzUgKi9cblx0dmFyIHBhcnNlX0NhbGNSZWZNb2RlID0gcGFyc2Vub29wMjsgLyogMi40LjM2ICovXG5cdHZhciBwYXJzZV9DYWxjU2F2ZVJlY2FsYyA9IHBhcnNlYm9vbDsgLyogMi40LjM3ICovXG5cdHZhciBwYXJzZV9Db2RlUGFnZSA9IHBhcnNldWludDE2OyAvKiAyLjQuNTIgKi9cblx0dmFyIHBhcnNlX0NvbXBhdDEyID0gcGFyc2Vib29sOyAvKiAyLjQuNTQgdHJ1ZSA9IG5vIGNvbXBhdGliaWxpdHkgY2hlY2sgKi9cblx0dmFyIHBhcnNlX0RhdGUxOTA0ID0gcGFyc2Vib29sOyAvKiAyLjQuNzcgLSAxPTE5MDQsMD0xOTAwICovXG5cdHZhciBwYXJzZV9EZWZDb2xXaWR0aCA9IHBhcnNldWludDE2OyAvKiAyLjQuODkgKi9cblx0dmFyIHBhcnNlX0RTRiA9IHBhcnNlbm9vcDI7IC8qIDIuNC45NCAtLSBNVVNUIGJlIGlnbm9yZWQgKi9cblx0dmFyIHBhcnNlX0VudEV4VTIgPSBwYXJzZW5vb3AyOyAvKiAyLjQuMTAyIC0tIEV4cGxpY2l0bHkgc2F5cyB0byBpZ25vcmUgKi9cblx0dmFyIHBhcnNlX0VPRiA9IHBhcnNlbm9vcDI7IC8qIDIuNC4xMDMgKi9cblx0dmFyIHBhcnNlX0V4Y2VsOUZpbGUgPSBwYXJzZW5vb3AyOyAvKiAyLjQuMTA0IC0tIE9wdGlvbmFsIGFuZCB1bnVzZWQgKi9cblx0dmFyIHBhcnNlX0ZlYXRIZHIgPSBwYXJzZW5vb3AyOyAvKiAyLjQuMTEyICovXG5cdHZhciBwYXJzZV9Gb250WCA9IHBhcnNldWludDE2OyAvKiAyLjQuMTIzICovXG5cdHZhciBwYXJzZV9Gb290ZXIgPSBwYXJzZV9YTEhlYWRlckZvb3RlcjsgLyogMi40LjEyNCAqL1xuXHR2YXIgcGFyc2VfR3JpZFNldCA9IHBhcnNldWludDE2OyAvKiAyLjQuMTMyLCA9MSAqL1xuXHR2YXIgcGFyc2VfSENlbnRlciA9IHBhcnNlYm9vbDsgLyogMi40LjEzNSBzaGVldCBjZW50ZXJlZCBob3Jpem9udGFsIG9uIHByaW50ICovXG5cdHZhciBwYXJzZV9IZWFkZXIgPSBwYXJzZV9YTEhlYWRlckZvb3RlcjsgLyogMi40LjEzNiAqL1xuXHR2YXIgcGFyc2VfSGlkZU9iaiA9IHBhcnNlX0hpZGVPYmpFbnVtOyAvKiAyLjQuMTM5ICovXG5cdHZhciBwYXJzZV9JbnRlcmZhY2VFbmQgPSBwYXJzZW5vb3AyOyAvKiAyLjQuMTQ1IC0tIG5vb3AgKi9cblx0dmFyIHBhcnNlX0xlZnRNYXJnaW4gPSBwYXJzZV9YbnVtOyAvKiAyLjQuMTUxICovXG5cdHZhciBwYXJzZV9NbXMgPSBwYXJzZW5vb3AyOyAvKiAyLjQuMTY5IC0tIEV4cGxpY2l0bHkgc2F5cyB0byBpZ25vcmUgKi9cblx0dmFyIHBhcnNlX09ialByb3RlY3QgPSBwYXJzZWJvb2w7IC8qIDIuNC4xODMgLS0gbXVzdCBiZSAxIGlmIHByZXNlbnQgKi9cblx0dmFyIHBhcnNlX1Bhc3N3b3JkID0gcGFyc2V1aW50MTY7IC8qIDIuNC4xOTEgKi9cblx0dmFyIHBhcnNlX1ByaW50R3JpZCA9IHBhcnNlYm9vbDsgLyogMi40LjIwMiAqL1xuXHR2YXIgcGFyc2VfUHJpbnRSb3dDb2wgPSBwYXJzZWJvb2w7IC8qIDIuNC4yMDMgKi9cblx0dmFyIHBhcnNlX1ByaW50U2l6ZSA9IHBhcnNldWludDE2OyAvKiAyLjQuMjA0IDA6MyAqL1xuXHR2YXIgcGFyc2VfUHJvdDRSZXYgPSBwYXJzZWJvb2w7IC8qIDIuNC4yMDUgKi9cblx0dmFyIHBhcnNlX1Byb3Q0UmV2UGFzcyA9IHBhcnNldWludDE2OyAvKiAyLjQuMjA2ICovXG5cdHZhciBwYXJzZV9Qcm90ZWN0ID0gcGFyc2Vib29sOyAvKiAyLjQuMjA3ICovXG5cdHZhciBwYXJzZV9SZWZyZXNoQWxsID0gcGFyc2Vib29sOyAvKiAyLjQuMjE3IC0tIG11c3QgYmUgMCBpZiBub3QgdGVtcGxhdGUgKi9cblx0dmFyIHBhcnNlX1JpZ2h0TWFyZ2luID0gcGFyc2VfWG51bTsgLyogMi40LjIxOSAqL1xuXHR2YXIgcGFyc2VfUlJUYWJJZCA9IHBhcnNldWludDE2YTsgLyogMi40LjI0MSAqL1xuXHR2YXIgcGFyc2VfU2NlbmFyaW9Qcm90ZWN0ID0gcGFyc2Vib29sOyAvKiAyLjQuMjQ1ICovXG5cdHZhciBwYXJzZV9TY2wgPSBwYXJzZXVpbnQxNmE7IC8qIDIuNC4yNDcgbnVtLCBkZW4gKi9cblx0dmFyIHBhcnNlX1N0cmluZyA9IHBhcnNlX1hMVW5pY29kZVN0cmluZzsgLyogMi40LjI2OCAqL1xuXHR2YXIgcGFyc2VfU3hCb29sID0gcGFyc2Vib29sOyAvKiAyLjQuMjc0ICovXG5cdHZhciBwYXJzZV9Ub3BNYXJnaW4gPSBwYXJzZV9YbnVtOyAvKiAyLjQuMzI4ICovXG5cdHZhciBwYXJzZV9Vc2VzRUxGcyA9IHBhcnNlYm9vbDsgLyogMi40LjMzNyAtLSBzaG91bGQgYmUgMCAqL1xuXHR2YXIgcGFyc2VfVkNlbnRlciA9IHBhcnNlYm9vbDsgLyogMi40LjM0MiAqL1xuXHR2YXIgcGFyc2VfV2luUHJvdGVjdCA9IHBhcnNlYm9vbDsgLyogMi40LjM0NyAqL1xuXHR2YXIgcGFyc2VfV3JpdGVQcm90ZWN0ID0gcGFyc2Vub29wOyAvKiAyLjQuMzUwIGVtcHR5IHJlY29yZCAqL1xuXG5cblx0LyogLS0tLSAqL1xuXHR2YXIgcGFyc2VfVmVydGljYWxQYWdlQnJlYWtzID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfSG9yaXpvbnRhbFBhZ2VCcmVha3MgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZWxlY3Rpb24gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Db250aW51ZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1BhbmUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9QbHMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9EQ29uID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRENvblJlZiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0RDb25OYW1lID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfWENUID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ1JOID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRmlsZVNoYXJpbmcgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9VbmNhbGNlZCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1RlbXBsYXRlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfSW50bCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1dzQm9vbCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NvcnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeW5jID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfTFByID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRHhHQ29sID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRm5Hcm91cE5hbWUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9GaWx0ZXJNb2RlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQXV0b0ZpbHRlckluZm8gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9BdXRvRmlsdGVyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU2Nlbk1hbiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NDRU5BUklPID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3hWaWV3ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3h2ZCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYVkkgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeEl2ZCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYTEkgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFBJID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRG9jUm91dGUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SZWNpcE5hbWUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWERJID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hEQiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYRkRCID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hEQkIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWE51bSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N4RXJyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hJbnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFN0cmluZyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYRHRyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3hOaWwgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFRibCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYVEJSR0lJVE0gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeFRicGcgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9PYlByb2ogPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFN0cmVhbUlEID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfREJDZWxsID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hSbmcgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeElzeG9wZXIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Cb29rQm9vbCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0RiT3JQYXJhbVFyeSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX09sZU9iamVjdFNpemUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFZTID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQmtIaW0gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Nc29EcmF3aW5nR3JvdXAgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Nc29EcmF3aW5nID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfTXNvRHJhd2luZ1NlbGVjdGlvbiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1Bob25ldGljSW5mbyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N4UnVsZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYRXggPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeEZpbHQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeERYRiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N4SXRtID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3hOYW1lID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3hTZWxlY3QgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFBhaXIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeEZtbGEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TeEZvcm1hdCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYVkRFeCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYRm9ybXVsYSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYREJFeCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JSREluc0RlbCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JSREhlYWQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkRDaGdDZWxsID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJEUmVuU2hlZXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUlNvcnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkRNb3ZlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJGb3JtYXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkF1dG9GbXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkluc2VydFNoID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJETW92ZUJlZ2luID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJETW92ZUVuZCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JSREluc0RlbEJlZ2luID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJESW5zRGVsRW5kID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJEQ29uZmxpY3QgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkREZWZOYW1lID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJEUnN0RXR4cCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0xSbmcgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DVXNyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ2JVc3IgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Vc3JJbmZvID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfVXNyRXhjbCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0ZpbGVMb2NrID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJESW5mbyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0JDVXNycyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1VzckNoayA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1VzZXJCVmlldyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1VzZXJTVmlld0JlZ2luID0gcGFyc2Vub29wOyAvLyBvdmVybG9hZGVkXG5cdHZhciBwYXJzZV9Vc2VyU1ZpZXdFbmQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9SUkRVc2VyVmlldyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1FzaSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NvbmRGbXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DRiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0RWYWwgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9EQ29uQmluID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfTGVsID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfWExTQ29kZU5hbWUgPSBwYXJzZV9YTFVuaWNvZGVTdHJpbmc7XG5cdHZhciBwYXJzZV9TWEZEQlR5cGUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9PYk5vTWFjcm9zID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRHYgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9JbmRleCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1RhYmxlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQmlnTmFtZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NvbnRpbnVlQmlnTmFtZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1dlYlB1YiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1FzaVNYVGFnID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfREJRdWVyeUV4dCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0V4dFN0cmluZyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1R4dFFyeSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1FzaXIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Rc2lmID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUlJEVFFTSUYgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9PbGVEYkNvbm4gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9XT3B0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hWaWV3RXggPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFRIID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hQSUV4ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU1hWRFRFeCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYVmlld0V4OSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NvbnRpbnVlRnJ0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUmVhbFRpbWVEYXRhID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ2hhcnRGcnRJbmZvID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRnJ0V3JhcHBlciA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N0YXJ0QmxvY2sgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9FbmRCbG9jayA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1N0YXJ0T2JqZWN0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRW5kT2JqZWN0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ2F0TGFiID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfWU11bHQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TWFZpZXdMaW5rID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUGl2b3RDaGFydEJpdHMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9GcnRGb250TGlzdCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NoZWV0RXh0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQm9va0V4dCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NYQWRkbCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NyRXJyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfSEZQaWN0dXJlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRmVhdCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0RhdGFMYWJFeHQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9EYXRhTGFiRXh0Q29udGVudHMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DZWxsV2F0Y2ggPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9GZWF0SGRyMTEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9GZWF0dXJlMTEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Ecm9wRG93bk9iaklkcyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NvbnRpbnVlRnJ0MTEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9EQ29ubiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0xpc3QxMiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0ZlYXR1cmUxMiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NvbmRGbXQxMiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NGMTIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DRkV4ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQXV0b0ZpbHRlcjEyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ29udGludWVGcnQxMiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX01EVEluZm8gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9NRFhTdHIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9NRFhUdXBsZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX01EWFNldCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX01EWFByb3AgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9NRFhLUEkgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9NREIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9QTFYgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9EWEYgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9UYWJsZVN0eWxlcyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1RhYmxlU3R5bGUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9UYWJsZVN0eWxlRWxlbWVudCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX05hbWVQdWJsaXNoID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU29ydERhdGEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9HVUlEVHlwZUxpYiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0ZuR3JwMTIgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9OYW1lRm5HcnAxMiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0hlYWRlckZvb3RlciA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NydExheW91dDEyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ3J0TWxGcnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DcnRNbEZydENvbnRpbnVlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU2hhcGVQcm9wc1N0cmVhbSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1RleHRQcm9wc1N0cmVhbSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JpY2hUZXh0U3RyZWFtID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ3J0TGF5b3V0MTJBID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfVW5pdHMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DaGFydCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NlcmllcyA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0RhdGFGb3JtYXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9MaW5lRm9ybWF0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfTWFya2VyRm9ybWF0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQXJlYUZvcm1hdCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1BpZUZvcm1hdCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0F0dGFjaGVkTGFiZWwgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZXJpZXNUZXh0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ2hhcnRGb3JtYXQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9MZWdlbmQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZXJpZXNMaXN0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQmFyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfTGluZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1BpZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0FyZWEgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TY2F0dGVyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ3J0TGluZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0F4aXMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9UaWNrID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfVmFsdWVSYW5nZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NhdFNlclJhbmdlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQXhpc0xpbmUgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9DcnRMaW5rID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRGVmYXVsdFRleHQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9UZXh0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfT2JqZWN0TGluayA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0ZyYW1lID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQmVnaW4gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9FbmQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9QbG90QXJlYSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0NoYXJ0M2QgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9QaWNGID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRHJvcEJhciA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JhZGFyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU3VyZiA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1JhZGFyQXJlYSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0F4aXNQYXJlbnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9MZWdlbmRFeGNlcHRpb24gPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZXJUb0NydCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0F4ZXNVc2VkID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU0Jhc2VSZWYgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZXJQYXJlbnQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9TZXJBdXhUcmVuZCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0lGbXRSZWNvcmQgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9Qb3MgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9BbFJ1bnMgPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9CUkFJID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU2VyQXV4RXJyQmFyID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfU2VyRm10ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQ2hhcnQzREJhclNoYXBlID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRmJpID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQm9wUG9wID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfQXhjRXh0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfRGF0ID0gcGFyc2Vub29wO1xuXHR2YXIgcGFyc2VfUGxvdEdyb3d0aCA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX1NJSW5kZXggPSBwYXJzZW5vb3A7XG5cdHZhciBwYXJzZV9HZWxGcmFtZSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0JvcFBvcEN1c3RvbSA9IHBhcnNlbm9vcDtcblx0dmFyIHBhcnNlX0ZiaTIgPSBwYXJzZW5vb3A7XG5cblx0LyogLS0tIFNwZWNpZmljIHRvIHZlcnNpb25zIGJlZm9yZSBCSUZGOCAtLS0gKi9cblx0ZnVuY3Rpb24gcGFyc2VfSW1EYXRhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0Z3QgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGNmID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBlbnYgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIGxjYiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgbyA9IHtmbXQ6Y2YsIGVudjplbnYsIGxlbjpsY2IsIGRhdGE6YmxvYi5zbGljZShibG9iLmwsYmxvYi5sK2xjYil9O1xuXHRcdGJsb2IubCArPSBsY2I7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9CSUZGNVN0cmluZyhibG9iKSB7XG5cdFx0dmFyIGxlbiA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRyZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KGxlbiwgJ3NiY3MtY29udCcpO1xuXHR9XG5cblx0LyogQklGRjJfPz8/IHdoZXJlID8/PyBpcyB0aGUgbmFtZSBmcm9tIFtYTFNdICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JJRkYyU1RSKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBjZWxsID0gcGFyc2VfWExTQ2VsbChibG9iLCA2KTtcblx0XHQrK2Jsb2IubDtcblx0XHR2YXIgc3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nMihibG9iLCBsZW5ndGgtNywgb3B0cyk7XG5cdFx0Y2VsbC50ID0gJ3N0cic7XG5cdFx0Y2VsbC52YWwgPSBzdHI7XG5cdFx0cmV0dXJuIGNlbGw7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9CSUZGMk5VTShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdFx0KytibG9iLmw7XG5cdFx0dmFyIG51bSA9IHBhcnNlX1hudW0oYmxvYiwgOCk7XG5cdFx0Y2VsbC50ID0gJ24nO1xuXHRcdGNlbGwudmFsID0gbnVtO1xuXHRcdHJldHVybiBjZWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfQklGRjJJTlQoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHRcdCsrYmxvYi5sO1xuXHRcdHZhciBudW0gPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0Y2VsbC50ID0gJ24nO1xuXHRcdGNlbGwudmFsID0gbnVtO1xuXHRcdHJldHVybiBjZWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfQklGRjJTVFJJTkcoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRpZihjY2ggPT09IDApIHsgYmxvYi5sKys7IHJldHVybiBcIlwiOyB9XG5cdFx0cmV0dXJuIGJsb2IucmVhZF9zaGlmdChjY2gsICdzYmNzLWNvbnQnKTtcblx0fVxuXG5cdC8qIFRPRE86IGNvbnZlcnQgdG8gQklGRjggZm9udCBzdHJ1Y3QgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQklGRjJGT05UWFRSQShibG9iLCBsZW5ndGgpIHtcblx0XHRibG9iLmwgKz0gNjsgLy8gdW5rbm93blxuXHRcdGJsb2IubCArPSAyOyAvLyBmb250IHdlaWdodCBcImJsc1wiXG5cdFx0YmxvYi5sICs9IDE7IC8vIGNoYXJzZXRcblx0XHRibG9iLmwgKz0gMzsgLy8gdW5rbm93blxuXHRcdGJsb2IubCArPSAxOyAvLyBmb250IGZhbWlseVxuXHRcdGJsb2IubCArPSBsZW5ndGggLSAxMztcblx0fVxuXG5cdC8qIFRPRE86IHBhcnNlIHJpY2ggdGV4dCBydW5zICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JTdHJpbmcoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGVuZCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0NlbGwoYmxvYiwgNik7XG5cdFx0dmFyIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgc3RyID0gcGFyc2VfWExVbmljb2RlU3RyaW5nTm9DY2goYmxvYiwgY2NoLCBvcHRzKTtcblx0XHRibG9iLmwgPSBlbmQ7XG5cdFx0Y2VsbC50ID0gJ3N0cic7XG5cdFx0Y2VsbC52YWwgPSBzdHI7XG5cdFx0cmV0dXJuIGNlbGw7XG5cdH1cblx0LyogZnJvbSBqcy1oYXJiIChDKSAyMDE0LXByZXNlbnQgIFNoZWV0SlMgKi9cblx0dmFyIERCRiA9IChmdW5jdGlvbigpIHtcblx0dmFyIGRiZl9jb2RlcGFnZV9tYXAgPSB7XG5cdFx0LyogQ29kZSBQYWdlcyBTdXBwb3J0ZWQgYnkgVmlzdWFsIEZveFBybyAqL1xuXHQweDAxOiAgIDQzNywgICAgICAgICAgIDB4MDI6ICAgODUwLFxuXHQweDAzOiAgMTI1MiwgICAgICAgICAgIDB4MDQ6IDEwMDAwLFxuXHQweDY0OiAgIDg1MiwgICAgICAgICAgIDB4NjU6ICAgODY2LFxuXHQweDY2OiAgIDg2NSwgICAgICAgICAgIDB4Njc6ICAgODYxLFxuXHQweDY4OiAgIDg5NSwgICAgICAgICAgIDB4Njk6ICAgNjIwLFxuXHQweDZBOiAgIDczNywgICAgICAgICAgIDB4NkI6ICAgODU3LFxuXHQweDc4OiAgIDk1MCwgICAgICAgICAgIDB4Nzk6ICAgOTQ5LFxuXHQweDdBOiAgIDkzNiwgICAgICAgICAgIDB4N0I6ICAgOTMyLFxuXHQweDdDOiAgIDg3NCwgICAgICAgICAgIDB4N0Q6ICAxMjU1LFxuXHQweDdFOiAgMTI1NiwgICAgICAgICAgIDB4OTY6IDEwMDA3LFxuXHQweDk3OiAxMDAyOSwgICAgICAgICAgIDB4OTg6IDEwMDA2LFxuXHQweEM4OiAgMTI1MCwgICAgICAgICAgIDB4Qzk6ICAxMjUxLFxuXHQweENBOiAgMTI1NCwgICAgICAgICAgIDB4Q0I6ICAxMjUzLFxuXG5cdFx0Lyogc2hhcGVmaWxlIERCRiBleHRlbnNpb24gKi9cblx0MHgwMDogMjAxMjcsICAgICAgICAgICAweDA4OiAgIDg2NSxcblx0MHgwOTogICA0MzcsICAgICAgICAgICAweDBBOiAgIDg1MCxcblx0MHgwQjogICA0MzcsICAgICAgICAgICAweDBEOiAgIDQzNyxcblx0MHgwRTogICA4NTAsICAgICAgICAgICAweDBGOiAgIDQzNyxcblx0MHgxMDogICA4NTAsICAgICAgICAgICAweDExOiAgIDQzNyxcblx0MHgxMjogICA4NTAsICAgICAgICAgICAweDEzOiAgIDkzMixcblx0MHgxNDogICA4NTAsICAgICAgICAgICAweDE1OiAgIDQzNyxcblx0MHgxNjogICA4NTAsICAgICAgICAgICAweDE3OiAgIDg2NSxcblx0MHgxODogICA0MzcsICAgICAgICAgICAweDE5OiAgIDQzNyxcblx0MHgxQTogICA4NTAsICAgICAgICAgICAweDFCOiAgIDQzNyxcblx0MHgxQzogICA4NjMsICAgICAgICAgICAweDFEOiAgIDg1MCxcblx0MHgxRjogICA4NTIsICAgICAgICAgICAweDIyOiAgIDg1Mixcblx0MHgyMzogICA4NTIsICAgICAgICAgICAweDI0OiAgIDg2MCxcblx0MHgyNTogICA4NTAsICAgICAgICAgICAweDI2OiAgIDg2Nixcblx0MHgzNzogICA4NTAsICAgICAgICAgICAweDQwOiAgIDg1Mixcblx0MHg0RDogICA5MzYsICAgICAgICAgICAweDRFOiAgIDk0OSxcblx0MHg0RjogICA5NTAsICAgICAgICAgICAweDUwOiAgIDg3NCxcblx0MHg1NzogIDEyNTIsICAgICAgICAgICAweDU4OiAgMTI1Mixcblx0MHg1OTogIDEyNTIsXG5cblx0MHhGRjogMTY5Njlcblx0fTtcblxuXHQvKiBUT0RPOiBmaW5kIGFuIGFjdHVhbCBzcGVjaWZpY2F0aW9uICovXG5cdGZ1bmN0aW9uIGRiZl90b19hb2EoYnVmLCBvcHRzKSB7XG5cdFx0dmFyIG91dCA9IFtdO1xuXHRcdC8qIFRPRE86IGJyb3dzZXIgYmFzZWQgKi9cblx0XHR2YXIgZCA9IChuZXdfcmF3X2J1ZigxKSk7XG5cdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0Y2FzZSAnYmFzZTY0JzogZCA9IHMyYShCYXNlNjQuZGVjb2RlKGJ1ZikpOyBicmVhaztcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IGQgPSBzMmEoYnVmKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdidWZmZXInOlxuXHRcdFx0Y2FzZSAnYXJyYXknOiBkID0gYnVmOyBicmVhaztcblx0XHR9XG5cdFx0cHJlcF9ibG9iKGQsIDApO1xuXHRcdC8qIGhlYWRlciAqL1xuXHRcdHZhciBmdCA9IGQucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgbWVtbyA9IGZhbHNlO1xuXHRcdHZhciB2ZnAgPSBmYWxzZTtcblx0XHRzd2l0Y2goZnQpIHtcblx0XHRcdGNhc2UgMHgwMjogY2FzZSAweDAzOiBicmVhaztcblx0XHRcdGNhc2UgMHgzMDogdmZwID0gdHJ1ZTsgbWVtbyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDMxOiB2ZnAgPSB0cnVlOyBicmVhaztcblx0XHRcdGNhc2UgMHg4MzogbWVtbyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDhCOiBtZW1vID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4RjU6IG1lbW8gPSB0cnVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIkRCRiBVbnN1cHBvcnRlZCBWZXJzaW9uOiBcIiArIGZ0LnRvU3RyaW5nKDE2KSk7XG5cdFx0fVxuXHRcdHZhciBmaWxlZGF0ZSA9IG5ldyBEYXRlKCksIG5yb3cgPSAwLCBmcG9zID0gMDtcblx0XHRpZihmdCA9PSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDIpO1xuXHRcdGZpbGVkYXRlID0gbmV3IERhdGUoZC5yZWFkX3NoaWZ0KDEpICsgMTkwMCwgZC5yZWFkX3NoaWZ0KDEpIC0gMSwgZC5yZWFkX3NoaWZ0KDEpKTtcblx0XHRpZihmdCAhPSAweDAyKSBucm93ID0gZC5yZWFkX3NoaWZ0KDQpO1xuXHRcdGlmKGZ0ICE9IDB4MDIpIGZwb3MgPSBkLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHJsZW4gPSBkLnJlYWRfc2hpZnQoMik7XG5cblx0XHR2YXIgZmxhZ3MgPSAwLCBjdXJyZW50X2NwID0gMTI1Mjtcblx0XHRpZihmdCAhPSAweDAyKSB7XG5cdFx0ZC5sKz0xNjtcblx0XHRmbGFncyA9IGQucmVhZF9zaGlmdCgxKTtcblx0XHQvL2lmKG1lbW8gJiYgKChmbGFncyAmIDB4MDIpID09PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEZsYWdzIFwiICsgZmxhZ3MudG9TdHJpbmcoMTYpICsgXCIgZnQgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXG5cdFx0LyogY29kZXBhZ2UgcHJlc2VudCBpbiBGb3hQcm8gKi9cblx0XHRpZihkW2QubF0gIT09IDApIGN1cnJlbnRfY3AgPSBkYmZfY29kZXBhZ2VfbWFwW2RbZC5sXV07XG5cdFx0ZC5sKz0xO1xuXG5cdFx0ZC5sKz0yO1xuXHRcdH1cblx0XHR2YXIgZmllbGRzID0gW10sIGZpZWxkID0ge307XG5cdFx0dmFyIGhlbmQgPSBmcG9zIC0gMTAgLSAodmZwID8gMjY0IDogMCk7XG5cdFx0d2hpbGUoZnQgPT0gMHgwMiA/IGQubCA8IGQubGVuZ3RoICYmIGRbZC5sXSAhPSAweDBkOiBkLmwgPCBoZW5kKSB7XG5cdFx0XHRmaWVsZCA9IHt9O1xuXHRcdFx0ZmllbGQubmFtZSA9IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY3AsIGQuc2xpY2UoZC5sLCBkLmwrMTApKS5yZXBsYWNlKC9bXFx1MDAwMFxcclxcbl0uKiQvZyxcIlwiKTtcblx0XHRcdGQubCArPSAxMTtcblx0XHRcdGZpZWxkLnR5cGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGQucmVhZF9zaGlmdCgxKSk7XG5cdFx0XHRpZihmdCAhPSAweDAyKSBmaWVsZC5vZmZzZXQgPSBkLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRmaWVsZC5sZW4gPSBkLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRpZihmdCA9PSAweDAyKSBmaWVsZC5vZmZzZXQgPSBkLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRmaWVsZC5kZWMgPSBkLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRpZihmaWVsZC5uYW1lLmxlbmd0aCkgZmllbGRzLnB1c2goZmllbGQpO1xuXHRcdFx0aWYoZnQgIT0gMHgwMikgZC5sICs9IDE0O1xuXHRcdFx0c3dpdGNoKGZpZWxkLnR5cGUpIHtcblx0XHRcdFx0Ly8gY2FzZSAnQic6IGJyZWFrOyAvLyBCaW5hcnlcblx0XHRcdFx0Y2FzZSAnQyc6IGJyZWFrOyAvLyBjaGFyYWN0ZXJcblx0XHRcdFx0Y2FzZSAnRCc6IGJyZWFrOyAvLyBkYXRlXG5cdFx0XHRcdGNhc2UgJ0YnOiBicmVhazsgLy8gZmxvYXRpbmcgcG9pbnRcblx0XHRcdFx0Ly8gY2FzZSAnRyc6IGJyZWFrOyAvLyBHZW5lcmFsXG5cdFx0XHRcdGNhc2UgJ0knOiBicmVhazsgLy8gbG9uZ1xuXHRcdFx0XHRjYXNlICdMJzogYnJlYWs7IC8vIGJvb2xlYW5cblx0XHRcdFx0Y2FzZSAnTSc6IGJyZWFrOyAvLyBtZW1vXG5cdFx0XHRcdGNhc2UgJ04nOiBicmVhazsgLy8gbnVtYmVyXG5cdFx0XHRcdC8vIGNhc2UgJ08nOiBicmVhazsgLy8gZG91YmxlXG5cdFx0XHRcdC8vIGNhc2UgJ1AnOiBicmVhazsgLy8gUGljdHVyZVxuXHRcdFx0XHRjYXNlICdUJzogYnJlYWs7IC8vIGRhdGV0aW1lXG5cdFx0XHRcdGNhc2UgJ1knOiBicmVhazsgLy8gY3VycmVuY3lcblx0XHRcdFx0Y2FzZSAnMCc6IGJyZWFrOyAvLyBudWxsID9cblx0XHRcdFx0Y2FzZSAnKyc6IGJyZWFrOyAvLyBhdXRvaW5jcmVtZW50XG5cdFx0XHRcdGNhc2UgJ0AnOiBicmVhazsgLy8gdGltZXN0YW1wXG5cdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biBGaWVsZCBUeXBlOiAnICsgZmllbGQudHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGRbZC5sXSAhPT0gMHgwRCkgZC5sID0gZnBvcy0xO1xuXHRcdGVsc2UgaWYoZnQgPT0gMHgwMikgZC5sID0gMHgyMDk7XG5cdFx0aWYoZnQgIT0gMHgwMikge1xuXHRcdFx0aWYoZC5yZWFkX3NoaWZ0KDEpICE9PSAweDBEKSB0aHJvdyBuZXcgRXJyb3IoXCJEQkYgVGVybWluYXRvciBub3QgZm91bmQgXCIgKyBkLmwgKyBcIiBcIiArIGRbZC5sXSk7XG5cdFx0XHRkLmwgPSBmcG9zO1xuXHRcdH1cblx0XHQvKiBkYXRhICovXG5cdFx0dmFyIFIgPSAwLCBDID0gMDtcblx0XHRvdXRbMF0gPSBbXTtcblx0XHRmb3IoQyA9IDA7IEMgIT0gZmllbGRzLmxlbmd0aDsgKytDKSBvdXRbMF1bQ10gPSBmaWVsZHNbQ10ubmFtZTtcblx0XHR3aGlsZShucm93LS0gPiAwKSB7XG5cdFx0XHRpZihkW2QubF0gPT09IDB4MkEpIHsgZC5sKz1ybGVuOyBjb250aW51ZTsgfVxuXHRcdFx0KytkLmw7XG5cdFx0XHRvdXRbKytSXSA9IFtdOyBDID0gMDtcblx0XHRcdGZvcihDID0gMDsgQyAhPSBmaWVsZHMubGVuZ3RoOyArK0MpIHtcblx0XHRcdFx0dmFyIGRkID0gZC5zbGljZShkLmwsIGQubCtmaWVsZHNbQ10ubGVuKTsgZC5sKz1maWVsZHNbQ10ubGVuO1xuXHRcdFx0XHRwcmVwX2Jsb2IoZGQsIDApO1xuXHRcdFx0XHR2YXIgcyA9IGNwdGFibGUudXRpbHMuZGVjb2RlKGN1cnJlbnRfY3AsIGRkKTtcblx0XHRcdFx0c3dpdGNoKGZpZWxkc1tDXS50eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSAnQyc6XG5cdFx0XHRcdFx0XHRvdXRbUl1bQ10gPSBjcHRhYmxlLnV0aWxzLmRlY29kZShjdXJyZW50X2NwLCBkZCk7XG5cdFx0XHRcdFx0XHRvdXRbUl1bQ10gPSBvdXRbUl1bQ10udHJpbSgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRCc6XG5cdFx0XHRcdFx0XHRpZihzLmxlbmd0aCA9PT0gOCkgb3V0W1JdW0NdID0gbmV3IERhdGUoK3Muc3Vic3RyKDAsNCksICtzLnN1YnN0cig0LDIpLTEsICtzLnN1YnN0cig2LDIpKTtcblx0XHRcdFx0XHRcdGVsc2Ugb3V0W1JdW0NdID0gcztcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0YnOiBvdXRbUl1bQ10gPSBwYXJzZUZsb2F0KHMudHJpbSgpKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnSSc6IG91dFtSXVtDXSA9IGRkLnJlYWRfc2hpZnQoNCwgJ2knKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTCc6IHN3aXRjaChzLnRvVXBwZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRcdGNhc2UgJ1knOiBjYXNlICdUJzogb3V0W1JdW0NdID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdOJzogY2FzZSAnRic6IG91dFtSXVtDXSA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJyAnOiBjYXNlICc/Jzogb3V0W1JdW0NdID0gZmFsc2U7IGJyZWFrOyAvKiBOT1RFOiB0ZWNobmljYWxseSB1bml0aWFsaXplZCAqL1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiREJGIFVucmVjb2duaXplZCBMOnxcIiArIHMgKyBcInxcIik7XG5cdFx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ00nOiAvKiBUT0RPOiBoYW5kbGUgbWVtbyBmaWxlcyAqL1xuXHRcdFx0XHRcdFx0aWYoIW1lbW8pIHRocm93IG5ldyBFcnJvcihcIkRCRiBVbmV4cGVjdGVkIE1FTU8gZm9yIHR5cGUgXCIgKyBmdC50b1N0cmluZygxNikpO1xuXHRcdFx0XHRcdFx0b3V0W1JdW0NdID0gXCIjI01FTU8jI1wiICsgZGQucmVhZF9zaGlmdCg0KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ04nOiBvdXRbUl1bQ10gPSArcy5yZXBsYWNlKC9cXHUwMDAwL2csXCJcIikudHJpbSgpOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdUJzpcblx0XHRcdFx0XHRcdHZhciBkYXkgPSBkZC5yZWFkX3NoaWZ0KDQpLCBtcyA9IGRkLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoZGF5ICsgXCIgfCBcIiArIG1zKTtcblx0XHRcdFx0XHRcdC8vb3V0W1JdW0NdID0gbmV3IERhdGUoKTsgLy8gVE9ET1xuXHRcdFx0XHRcdFx0Ly9icmVhaztcblx0XHRcdFx0XHRjYXNlICdZJzogb3V0W1JdW0NdID0gZGQucmVhZCg0LCdpJykvMWU0OyBicmVhaztcblx0XHRcdFx0XHRjYXNlICcwJzpcblx0XHRcdFx0XHRcdGlmKGZpZWxkc1tDXS5uYW1lID09PSAnX051bGxGbGFncycpIGJyZWFrO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIkRCRiBVbnN1cHBvcnRlZCBkYXRhIHR5cGUgXCIgKyBmaWVsZHNbQ10udHlwZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnQgIT0gMHgwMikgaWYoZC5sIDwgZC5sZW5ndGggJiYgZFtkLmwrK10gIT0gMHgxQSkgdGhyb3cgbmV3IEVycm9yKFwiREJGIEVPRiBNYXJrZXIgbWlzc2luZyBcIiArIChkLmwtMSkgKyBcIiBvZiBcIiArIGQubGVuZ3RoICsgXCIgXCIgKyBkW2QubC0xXS50b1N0cmluZygxNikpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBkYmZfdG9fc2hlZXQoYnVmLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdGlmKCFvLmRhdGVORikgby5kYXRlTkYgPSBcInl5eXltbWRkXCI7XG5cdFx0cmV0dXJuIGFvYV90b19zaGVldChkYmZfdG9fYW9hKGJ1ZiwgbyksIG8pO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGJmX3RvX3dvcmtib29rKGJ1Ziwgb3B0cykge1xuXHRcdHRyeSB7IHJldHVybiBzaGVldF90b193b3JrYm9vayhkYmZfdG9fc2hlZXQoYnVmLCBvcHRzKSwgb3B0cyk7IH1cblx0XHRjYXRjaChlKSB7IGlmKG9wdHMgJiYgb3B0cy5XVEYpIHRocm93IGU7IH1cblx0XHRyZXR1cm4gKHtTaGVldE5hbWVzOltdLFNoZWV0czp7fX0pO1xuXHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvX3dvcmtib29rOiBkYmZfdG9fd29ya2Jvb2ssXG5cdFx0XHR0b19zaGVldDogZGJmX3RvX3NoZWV0XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgU1lMSyA9IChmdW5jdGlvbigpIHtcblx0XHQvKiBUT0RPOiBmaW5kIGFuIGFjdHVhbCBzcGVjaWZpY2F0aW9uICovXG5cdFx0ZnVuY3Rpb24gc3lsa190b19hb2EoZCwgb3B0cykge1xuXHRcdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKEJhc2U2NC5kZWNvZGUoZCksIG9wdHMpO1xuXHRcdFx0XHRjYXNlICdiaW5hcnknOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGQsIG9wdHMpO1xuXHRcdFx0XHRjYXNlICdidWZmZXInOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGQudG9TdHJpbmcoJ2JpbmFyeScpLCBvcHRzKTtcblx0XHRcdFx0Y2FzZSAnYXJyYXknOiByZXR1cm4gc3lsa190b19hb2Ffc3RyKGNjMnN0cihkKSwgb3B0cyk7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIHN5bGtfdG9fYW9hX3N0cihzdHIsIG9wdHMpIHtcblx0XHRcdHZhciByZWNvcmRzID0gc3RyLnNwbGl0KC9bXFxuXFxyXSsvKSwgUiA9IC0xLCBDID0gLTEsIHJpID0gMCwgcmogPSAwLCBhcnIgPSBbXTtcblx0XHRcdHZhciBmb3JtYXRzID0gW107XG5cdFx0XHR2YXIgbmV4dF9jZWxsX2Zvcm1hdCA9IG51bGw7XG5cdFx0XHR2YXIgc2h0ID0ge30sIHJvd2luZm8gPSBbXSwgY29saW5mbyA9IFtdLCBjdyA9IFtdO1xuXHRcdFx0dmFyIE12YWwgPSAwLCBqO1xuXHRcdFx0Zm9yICg7IHJpICE9PSByZWNvcmRzLmxlbmd0aDsgKytyaSkge1xuXHRcdFx0XHRNdmFsID0gMDtcblx0XHRcdFx0dmFyIHJzdHI9cmVjb3Jkc1tyaV0udHJpbSgpO1xuXHRcdFx0XHR2YXIgcmVjb3JkPXJzdHIucmVwbGFjZSgvOzsvZywgXCJcXHUwMDAxXCIpLnNwbGl0KFwiO1wiKS5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5yZXBsYWNlKC9cXHUwMDAxL2csIFwiO1wiKTsgfSk7XG5cdFx0XHRcdHZhciBSVD1yZWNvcmRbMF0sIHZhbDtcblx0XHRcdFx0aWYocnN0ci5sZW5ndGggPiAwKSBzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAnSUQnOiBicmVhazsgLyogaGVhZGVyICovXG5cdFx0XHRcdGNhc2UgJ0UnOiBicmVhazsgLyogRU9GICovXG5cdFx0XHRcdGNhc2UgJ0InOiBicmVhazsgLyogZGltZW5zaW9ucyAqL1xuXHRcdFx0XHRjYXNlICdPJzogYnJlYWs7IC8qIG9wdGlvbnM/ICovXG5cdFx0XHRcdGNhc2UgJ1AnOlxuXHRcdFx0XHRcdGlmKHJlY29yZFsxXS5jaGFyQXQoMCkgPT0gJ1AnKVxuXHRcdFx0XHRcdFx0Zm9ybWF0cy5wdXNoKHJzdHIuc3Vic3RyKDMpLnJlcGxhY2UoLzs7L2csIFwiO1wiKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0MnOlxuXHRcdFx0XHRmb3Iocmo9MTsgcmo8cmVjb3JkLmxlbmd0aDsgKytyaikgc3dpdGNoKHJlY29yZFtyal0uY2hhckF0KDApKSB7XG5cdFx0XHRcdFx0Y2FzZSAnWCc6IEMgPSBwYXJzZUludChyZWNvcmRbcmpdLnN1YnN0cigxKSktMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnWSc6XG5cdFx0XHRcdFx0XHRSID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zdWJzdHIoMSkpLTE7IEMgPSAwO1xuXHRcdFx0XHRcdFx0Zm9yKGogPSBhcnIubGVuZ3RoOyBqIDw9IFI7ICsraikgYXJyW2pdID0gW107XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdLJzpcblx0XHRcdFx0XHRcdHZhbCA9IHJlY29yZFtyal0uc3Vic3RyKDEpO1xuXHRcdFx0XHRcdFx0aWYodmFsLmNoYXJBdCgwKSA9PT0gJ1wiJykgdmFsID0gdmFsLnN1YnN0cigxLHZhbC5sZW5ndGggLSAyKTtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsID09PSAnVFJVRScpIHZhbCA9IHRydWU7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKHZhbCA9PT0gJ0ZBTFNFJykgdmFsID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKCt2YWwgPT09ICt2YWwpIHtcblx0XHRcdFx0XHRcdFx0dmFsID0gK3ZhbDtcblx0XHRcdFx0XHRcdFx0aWYobmV4dF9jZWxsX2Zvcm1hdCAhPT0gbnVsbCAmJiBTU0YuaXNfZGF0ZShuZXh0X2NlbGxfZm9ybWF0KSkgdmFsID0gbnVtZGF0ZSh2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YXJyW1JdW0NdID0gdmFsO1xuXHRcdFx0XHRcdFx0bmV4dF9jZWxsX2Zvcm1hdCA9IG51bGw7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdFJzpcblx0XHRcdFx0XHRcdGZvcm11bGEgPSByY190b19hMShyZWNvcmRbcmpdLnN1YnN0cigxKSwge3I6UixjOkN9KTtcblx0XHRcdFx0XHRcdGFycltSXVtDXSA9IFthcnJbUl1bQ10sIGZvcm11bGFdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBiYWQgcmVjb3JkIFwiICsgcnN0cik7XG5cdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ0YnOlxuXHRcdFx0XHR2YXIgRl9zZWVuID0gMDtcblx0XHRcdFx0Zm9yKHJqPTE7IHJqPHJlY29yZC5sZW5ndGg7ICsrcmopIHN3aXRjaChyZWNvcmRbcmpdLmNoYXJBdCgwKSkge1xuXHRcdFx0XHRcdGNhc2UgJ1gnOiBDID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zdWJzdHIoMSkpLTE7ICsrRl9zZWVuOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdZJzpcblx0XHRcdFx0XHRcdFIgPSBwYXJzZUludChyZWNvcmRbcmpdLnN1YnN0cigxKSktMTsgLypDID0gMDsqL1xuXHRcdFx0XHRcdFx0Zm9yKGogPSBhcnIubGVuZ3RoOyBqIDw9IFI7ICsraikgYXJyW2pdID0gW107XG5cdFx0XHRcdFx0XHQrK0Zfc2VlbjsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTSc6IE12YWwgPSBwYXJzZUludChyZWNvcmRbcmpdLnN1YnN0cigxKSkgLyAyMDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRic6IGJyZWFrOyAvKiA/Pz8gKi9cblx0XHRcdFx0XHRjYXNlICdQJzpcblx0XHRcdFx0XHRcdG5leHRfY2VsbF9mb3JtYXQgPSBmb3JtYXRzW3BhcnNlSW50KHJlY29yZFtyal0uc3Vic3RyKDEpKV07XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdTJzogYnJlYWs7IC8qIGNlbGwgc3R5bGUgKi9cblx0XHRcdFx0XHRjYXNlICdEJzogYnJlYWs7IC8qIGNvbHVtbiAqL1xuXHRcdFx0XHRcdGNhc2UgJ04nOiBicmVhazsgLyogZm9udCAqL1xuXHRcdFx0XHRcdGNhc2UgJ1cnOlxuXHRcdFx0XHRcdFx0Y3cgPSByZWNvcmRbcmpdLnN1YnN0cigxKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0XHRmb3IoaiA9IHBhcnNlSW50KGN3WzBdLCAxMCk7IGogPD0gcGFyc2VJbnQoY3dbMV0sIDEwKTsgKytqKSB7XG5cdFx0XHRcdFx0XHRcdE12YWwgPSBwYXJzZUludChjd1syXSwgMTApO1xuXHRcdFx0XHRcdFx0XHRjb2xpbmZvW2otMV0gPSBNdmFsID09IDAgPyB7aGlkZGVuOnRydWV9OiB7d2NoOk12YWx9OyBwcm9jZXNzX2NvbChjb2xpbmZvW2otMV0pO1xuXHRcdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDJzogLyogZGVmYXVsdCBjb2x1bW4gZm9ybWF0ICovXG5cdFx0XHRcdFx0XHRDID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zdWJzdHIoMSkpLTE7XG5cdFx0XHRcdFx0XHRpZighY29saW5mb1tDXSkgY29saW5mb1tDXSA9IHt9O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnUic6IC8qIHJvdyBwcm9wZXJ0aWVzICovXG5cdFx0XHRcdFx0XHRSID0gcGFyc2VJbnQocmVjb3JkW3JqXS5zdWJzdHIoMSkpLTE7XG5cdFx0XHRcdFx0XHRpZighcm93aW5mb1tSXSkgcm93aW5mb1tSXSA9IHt9O1xuXHRcdFx0XHRcdFx0aWYoTXZhbCA+IDApIHsgcm93aW5mb1tSXS5ocHQgPSBNdmFsOyByb3dpbmZvW1JdLmhweCA9IHB0MnB4KE12YWwpOyB9XG5cdFx0XHRcdFx0XHRlbHNlIGlmKE12YWwgPT0gMCkgcm93aW5mb1tSXS5oaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiU1lMSyBiYWQgcmVjb3JkIFwiICsgcnN0cik7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoRl9zZWVuIDwgMikgbmV4dF9jZWxsX2Zvcm1hdCA9IG51bGw7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJTWUxLIGJhZCByZWNvcmQgXCIgKyByc3RyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBzaHRbJyFyb3dzJ10gPSByb3dpbmZvO1xuXHRcdFx0aWYoY29saW5mby5sZW5ndGggPiAwKSBzaHRbJyFjb2xzJ10gPSBjb2xpbmZvO1xuXHRcdFx0YXJyW2Fyci5sZW5ndGhdID0gc2h0O1xuXHRcdFx0cmV0dXJuIGFycjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzeWxrX3RvX3NoZWV0KHN0ciwgb3B0cykge1xuXHRcdFx0dmFyIGFvYSA9IHN5bGtfdG9fYW9hKHN0ciwgb3B0cyk7XG5cdFx0XHR2YXIgd3MgPSBhb2EucG9wKCk7XG5cdFx0XHR2YXIgbyA9IGFvYV90b19zaGVldChhb2EsIG9wdHMpO1xuXHRcdFx0a2V5cyh3cykuZm9yRWFjaChmdW5jdGlvbihrKSB7IG9ba10gPSB3c1trXTsgfSk7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzeWxrX3RvX3dvcmtib29rKHN0ciwgb3B0cykgeyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soc3lsa190b19zaGVldChzdHIsIG9wdHMpLCBvcHRzKTsgfVxuXG5cdFx0ZnVuY3Rpb24gd3JpdGVfd3NfY2VsbF9zeWxrKGNlbGwsIHdzLCBSLCBDLCBvcHRzKSB7XG5cdFx0XHR2YXIgbyA9IFwiQztZXCIgKyAoUisxKSArIFwiO1hcIiArIChDKzEpICsgXCI7S1wiO1xuXHRcdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0XHRjYXNlICduJzpcblx0XHRcdFx0XHRvICs9IChjZWxsLnZ8fDApO1xuXHRcdFx0XHRcdGlmKGNlbGwuZiAmJiAhY2VsbC5GKSBvICs9IFwiO0VcIiArIGExX3RvX3JjKGNlbGwuZiwge3I6UiwgYzpDfSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdiJzogbyArPSBjZWxsLnYgPyBcIlRSVUVcIiA6IFwiRkFMU0VcIjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2UnOiBvICs9IGNlbGwudyB8fCBjZWxsLnY7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdkJzogbyArPSAnXCInICsgKGNlbGwudyB8fCBjZWxsLnYpICsgJ1wiJzsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3MnOiBvICs9ICdcIicgKyBjZWxsLnYucmVwbGFjZSgvXCIvZyxcIlwiKSArICdcIic7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gd3JpdGVfd3NfY29sc19zeWxrKG91dCwgY29scykge1xuXHRcdFx0Y29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCwgaSkge1xuXHRcdFx0XHR2YXIgcmVjID0gXCJGO1dcIiArIChpKzEpICsgXCIgXCIgKyAoaSsxKSArIFwiIFwiO1xuXHRcdFx0XHRpZihjb2wuaGlkZGVuKSByZWMgKz0gXCIwXCI7XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBjb2wud2lkdGggPT0gJ251bWJlcicpIGNvbC53cHggPSB3aWR0aDJweChjb2wud2lkdGgpO1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBjb2wud3B4ID09ICdudW1iZXInKSBjb2wud2NoID0gcHgyY2hhcihjb2wud3B4KTtcblx0XHRcdFx0XHRpZih0eXBlb2YgY29sLndjaCA9PSAnbnVtYmVyJykgcmVjICs9IE1hdGgucm91bmQoY29sLndjaCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYocmVjLmNoYXJBdChyZWMubGVuZ3RoIC0gMSkgIT0gXCIgXCIpIG91dC5wdXNoKHJlYyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB3cml0ZV93c19yb3dzX3N5bGsob3V0LCByb3dzKSB7XG5cdFx0XHRyb3dzLmZvckVhY2goZnVuY3Rpb24ocm93LCBpKSB7XG5cdFx0XHRcdHZhciByZWMgPSBcIkY7XCI7XG5cdFx0XHRcdGlmKHJvdy5oaWRkZW4pIHJlYyArPSBcIk0wO1wiO1xuXHRcdFx0XHRlbHNlIGlmKHJvdy5ocHQpIHJlYyArPSBcIk1cIiArIDIwICogcm93LmhwdCArIFwiO1wiO1xuXHRcdFx0XHRlbHNlIGlmKHJvdy5ocHgpIHJlYyArPSBcIk1cIiArIDIwICogcHgycHQocm93LmhweCkgKyBcIjtcIjtcblx0XHRcdFx0aWYocmVjLmxlbmd0aCA+IDIpIG91dC5wdXNoKHJlYyArIFwiUlwiICsgKGkrMSkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2hlZXRfdG9fc3lsayh3cywgb3B0cykge1xuXHRcdFx0dmFyIHByZWFtYmxlID0gW1wiSUQ7UFdYTDtOO0VcIl0sIG8gPSBbXTtcblx0XHRcdHZhciByID0gZGVjb2RlX3JhbmdlKHdzWychcmVmJ10pLCBjZWxsO1xuXHRcdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0XHR2YXIgUlMgPSBcIlxcclxcblwiO1xuXG5cdFx0XHRwcmVhbWJsZS5wdXNoKFwiUDtQR2VuZXJhbFwiKTtcblx0XHRcdHByZWFtYmxlLnB1c2goXCJGO1AwO0RHMEc4O00yNTVcIik7XG5cdFx0XHRpZih3c1snIWNvbHMnXSkgd3JpdGVfd3NfY29sc19zeWxrKHByZWFtYmxlLCB3c1snIWNvbHMnXSk7XG5cdFx0XHRpZih3c1snIXJvd3MnXSkgd3JpdGVfd3Nfcm93c19zeWxrKHByZWFtYmxlLCB3c1snIXJvd3MnXSk7XG5cblx0XHRcdHByZWFtYmxlLnB1c2goXCJCO1lcIiArIChyLmUuciAtIHIucy5yICsgMSkgKyBcIjtYXCIgKyAoci5lLmMgLSByLnMuYyArIDEpICsgXCI7RFwiICsgW3Iucy5jLHIucy5yLHIuZS5jLHIuZS5yXS5qb2luKFwiIFwiKSk7XG5cdFx0XHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0XHRcdGZvcih2YXIgQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRcdFx0XHR2YXIgY29vcmQgPSBlbmNvZGVfY2VsbCh7cjpSLGM6Q30pO1xuXHRcdFx0XHRcdGNlbGwgPSBkZW5zZSA/ICh3c1tSXXx8W10pW0NdOiB3c1tjb29yZF07XG5cdFx0XHRcdFx0aWYoIWNlbGwgfHwgY2VsbC52ID09IG51bGwgJiYgKCFjZWxsLmYgfHwgY2VsbC5GKSkgY29udGludWU7XG5cdFx0XHRcdFx0by5wdXNoKHdyaXRlX3dzX2NlbGxfc3lsayhjZWxsLCB3cywgUiwgQywgb3B0cykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHJlYW1ibGUuam9pbihSUykgKyBSUyArIG8uam9pbihSUykgKyBSUyArIFwiRVwiICsgUlM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvX3dvcmtib29rOiBzeWxrX3RvX3dvcmtib29rLFxuXHRcdFx0dG9fc2hlZXQ6IHN5bGtfdG9fc2hlZXQsXG5cdFx0XHRmcm9tX3NoZWV0OiBzaGVldF90b19zeWxrXG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgRElGID0gKGZ1bmN0aW9uKCkge1xuXHRcdGZ1bmN0aW9uIGRpZl90b19hb2EoZCwgb3B0cykge1xuXHRcdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0XHRjYXNlICdiYXNlNjQnOiByZXR1cm4gZGlmX3RvX2FvYV9zdHIoQmFzZTY0LmRlY29kZShkKSwgb3B0cyk7XG5cdFx0XHRcdGNhc2UgJ2JpbmFyeSc6IHJldHVybiBkaWZfdG9fYW9hX3N0cihkLCBvcHRzKTtcblx0XHRcdFx0Y2FzZSAnYnVmZmVyJzogcmV0dXJuIGRpZl90b19hb2Ffc3RyKGQudG9TdHJpbmcoJ2JpbmFyeScpLCBvcHRzKTtcblx0XHRcdFx0Y2FzZSAnYXJyYXknOiByZXR1cm4gZGlmX3RvX2FvYV9zdHIoY2Myc3RyKGQpLCBvcHRzKTtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgb3B0cy50eXBlKTtcblx0XHR9XG5cdFx0ZnVuY3Rpb24gZGlmX3RvX2FvYV9zdHIoc3RyLCBvcHRzKSB7XG5cdFx0XHR2YXIgcmVjb3JkcyA9IHN0ci5zcGxpdCgnXFxuJyksIFIgPSAtMSwgQyA9IC0xLCByaSA9IDAsIGFyciA9IFtdO1xuXHRcdFx0Zm9yICg7IHJpICE9PSByZWNvcmRzLmxlbmd0aDsgKytyaSkge1xuXHRcdFx0XHRpZiAocmVjb3Jkc1tyaV0udHJpbSgpID09PSAnQk9UJykgeyBhcnJbKytSXSA9IFtdOyBDID0gMDsgY29udGludWU7IH1cblx0XHRcdFx0aWYgKFIgPCAwKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIG1ldGFkYXRhID0gcmVjb3Jkc1tyaV0udHJpbSgpLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0dmFyIHR5cGUgPSBtZXRhZGF0YVswXSwgdmFsdWUgPSBtZXRhZGF0YVsxXTtcblx0XHRcdFx0KytyaTtcblx0XHRcdFx0dmFyIGRhdGEgPSByZWNvcmRzW3JpXS50cmltKCk7XG5cdFx0XHRcdHN3aXRjaCAoK3R5cGUpIHtcblx0XHRcdFx0XHRjYXNlIC0xOlxuXHRcdFx0XHRcdFx0aWYgKGRhdGEgPT09ICdCT1QnKSB7IGFyclsrK1JdID0gW107IEMgPSAwOyBjb250aW51ZTsgfVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAoZGF0YSAhPT0gJ0VPRCcpIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBESUYgc3BlY2lhbCBjb21tYW5kIFwiICsgZGF0YSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHRpZihkYXRhID09PSAnVFJVRScpIGFycltSXVtDXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKGRhdGEgPT09ICdGQUxTRScpIGFycltSXVtDXSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0ZWxzZSBpZigrdmFsdWUgPT0gK3ZhbHVlKSBhcnJbUl1bQ10gPSArdmFsdWU7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKCFpc05hTihmdXp6eWRhdGUodmFsdWUpLmdldERhdGUoKSkpIGFycltSXVtDXSA9IHBhcnNlRGF0ZSh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRlbHNlIGFycltSXVtDXSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0KytDOyBicmVhaztcblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRkYXRhID0gZGF0YS5zdWJzdHIoMSxkYXRhLmxlbmd0aC0yKTtcblx0XHRcdFx0XHRcdGFycltSXVtDKytdID0gZGF0YSAhPT0gJycgPyBkYXRhIDogbnVsbDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkYXRhID09PSAnRU9EJykgYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYXJyO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGRpZl90b19zaGVldChzdHIsIG9wdHMpIHsgcmV0dXJuIGFvYV90b19zaGVldChkaWZfdG9fYW9hKHN0ciwgb3B0cyksIG9wdHMpOyB9XG5cdFx0ZnVuY3Rpb24gZGlmX3RvX3dvcmtib29rKHN0ciwgb3B0cykgeyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2soZGlmX3RvX3NoZWV0KHN0ciwgb3B0cyksIG9wdHMpOyB9XG5cblx0XHR2YXIgc2hlZXRfdG9fZGlmID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHB1c2hfZmllbGQgPSBmdW5jdGlvbiBwZihvLCB0b3BpYywgdiwgbiwgcykge1xuXHRcdFx0XHRvLnB1c2godG9waWMpO1xuXHRcdFx0XHRvLnB1c2godiArIFwiLFwiICsgbik7XG5cdFx0XHRcdG8ucHVzaCgnXCInICsgcy5yZXBsYWNlKC9cIi9nLCdcIlwiJykgKyAnXCInKTtcblx0XHRcdH07XG5cdFx0XHR2YXIgcHVzaF92YWx1ZSA9IGZ1bmN0aW9uIHBvKG8sIHR5cGUsIHYsIHMpIHtcblx0XHRcdFx0by5wdXNoKHR5cGUgKyBcIixcIiArIHYpO1xuXHRcdFx0XHRvLnB1c2godHlwZSA9PSAxID8gJ1wiJyArIHMucmVwbGFjZSgvXCIvZywnXCJcIicpICsgJ1wiJyA6IHMpO1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiBzaGVldF90b19kaWYod3MsIG9wdHMpIHtcblx0XHRcdFx0dmFyIG8gPSBbXTtcblx0XHRcdFx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGw7XG5cdFx0XHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdFx0XHRwdXNoX2ZpZWxkKG8sIFwiVEFCTEVcIiwgMCwgMSwgXCJzaGVldGpzXCIpO1xuXHRcdFx0XHRwdXNoX2ZpZWxkKG8sIFwiVkVDVE9SU1wiLCAwLCByLmUuciAtIHIucy5yICsgMSxcIlwiKTtcblx0XHRcdFx0cHVzaF9maWVsZChvLCBcIlRVUExFU1wiLCAwLCByLmUuYyAtIHIucy5jICsgMSxcIlwiKTtcblx0XHRcdFx0cHVzaF9maWVsZChvLCBcIkRBVEFcIiwgMCwgMCxcIlwiKTtcblx0XHRcdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0XHRcdHB1c2hfdmFsdWUobywgLTEsIDAsIFwiQk9UXCIpO1xuXHRcdFx0XHRcdGZvcih2YXIgQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRcdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdFx0XHRjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXSA6IHdzW2Nvb3JkXTtcblx0XHRcdFx0XHRcdGlmKCFjZWxsKSB7IHB1c2hfdmFsdWUobywgMSwgMCwgXCJcIik7IGNvbnRpbnVlO31cblx0XHRcdFx0XHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSAnbic6XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHZhbCA9IERJRl9YTCA/IGNlbGwudyA6IGNlbGwudjtcblx0XHRcdFx0XHRcdFx0XHRpZighdmFsICYmIGNlbGwudiAhPSBudWxsKSB2YWwgPSBjZWxsLnY7XG5cdFx0XHRcdFx0XHRcdFx0aWYodmFsID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKERJRl9YTCAmJiBjZWxsLmYgJiYgIWNlbGwuRikgcHVzaF92YWx1ZShvLCAxLCAwLCBcIj1cIiArIGNlbGwuZik7XG5cdFx0XHRcdFx0XHRcdFx0XHRlbHNlIHB1c2hfdmFsdWUobywgMSwgMCwgXCJcIik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGVsc2UgcHVzaF92YWx1ZShvLCAwLCB2YWwsIFwiVlwiKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRcdFx0cHVzaF92YWx1ZShvLCAwLCBjZWxsLnYgPyAxIDogMCwgY2VsbC52ID8gXCJUUlVFXCIgOiBcIkZBTFNFXCIpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdzJzpcblx0XHRcdFx0XHRcdFx0XHRwdXNoX3ZhbHVlKG8sIDEsIDAsICghRElGX1hMIHx8IGlzTmFOKGNlbGwudikpID8gY2VsbC52IDogJz1cIicgKyBjZWxsLnYgKyAnXCInKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnZCc6XG5cdFx0XHRcdFx0XHRcdFx0aWYoIWNlbGwudykgY2VsbC53ID0gU1NGLmZvcm1hdChjZWxsLnogfHwgU1NGLl90YWJsZVsxNF0sIGRhdGVudW0ocGFyc2VEYXRlKGNlbGwudikpKTtcblx0XHRcdFx0XHRcdFx0XHRpZihESUZfWEwpIHB1c2hfdmFsdWUobywgMCwgY2VsbC53LCBcIlZcIik7XG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBwdXNoX3ZhbHVlKG8sIDEsIDAsIGNlbGwudyk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6IHB1c2hfdmFsdWUobywgMSwgMCwgXCJcIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB1c2hfdmFsdWUobywgLTEsIDAsIFwiRU9EXCIpO1xuXHRcdFx0XHR2YXIgUlMgPSBcIlxcclxcblwiO1xuXHRcdFx0XHR2YXIgb28gPSBvLmpvaW4oUlMpO1xuXHRcdFx0XHQvL3doaWxlKChvby5sZW5ndGggJiAweDdGKSAhPSAwKSBvbyArPSBcIlxcMFwiO1xuXHRcdFx0XHRyZXR1cm4gb287XG5cdFx0XHR9O1xuXHRcdH0pKCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvX3dvcmtib29rOiBkaWZfdG9fd29ya2Jvb2ssXG5cdFx0XHR0b19zaGVldDogZGlmX3RvX3NoZWV0LFxuXHRcdFx0ZnJvbV9zaGVldDogc2hlZXRfdG9fZGlmXG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgUFJOID0gKGZ1bmN0aW9uKCkge1xuXHRcdGZ1bmN0aW9uIHNldF90ZXh0X2FycihkYXRhLCBhcnIsIFIsIEMpIHtcblx0XHRcdGlmKGRhdGEgPT09ICdUUlVFJykgYXJyW1JdW0NdID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYoZGF0YSA9PT0gJ0ZBTFNFJykgYXJyW1JdW0NdID0gZmFsc2U7XG5cdFx0XHRlbHNlIGlmKGRhdGEgPT09IFwiXCIpey8qIGVtcHR5ICovfVxuXHRcdFx0ZWxzZSBpZigrZGF0YSA9PSArZGF0YSkgYXJyW1JdW0NdID0gK2RhdGE7XG5cdFx0XHRlbHNlIGFycltSXVtDXSA9IGRhdGE7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcHJuX3RvX2FvYV9zdHIoZiwgb3B0cykge1xuXHRcdFx0dmFyIGFyciA9IChbXSk7XG5cdFx0XHRpZighZiB8fCBmLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGFycjtcblx0XHRcdHZhciBsaW5lcyA9IGYuc3BsaXQoL1tcXHJcXG5dLyk7XG5cdFx0XHR2YXIgTCA9IGxpbmVzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZShMID49IDAgJiYgbGluZXNbTF0ubGVuZ3RoID09PSAwKSAtLUw7XG5cdFx0XHR2YXIgc3RhcnQgPSAxMCwgaWR4ID0gMDtcblx0XHRcdHZhciBSID0gMDtcblx0XHRcdGZvcig7IFIgPD0gTDsgKytSKSB7XG5cdFx0XHRcdGlkeCA9IGxpbmVzW1JdLmluZGV4T2YoXCIgXCIpO1xuXHRcdFx0XHRpZihpZHggPT0gLTEpIGlkeCA9IGxpbmVzW1JdLmxlbmd0aDsgZWxzZSBpZHgrKztcblx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heChzdGFydCwgaWR4KTtcblx0XHRcdH1cblx0XHRcdGZvcihSID0gMDsgUiA8PSBMOyArK1IpIHtcblx0XHRcdFx0YXJyW1JdID0gW107XG5cdFx0XHRcdC8qIFRPRE86IGNvbmZpcm0gdGhhdCB3aWR0aHMgYXJlIGFsd2F5cyAxMCAqL1xuXHRcdFx0XHR2YXIgQyA9IDA7XG5cdFx0XHRcdHNldF90ZXh0X2FycihsaW5lc1tSXS5zbGljZSgwLCBzdGFydCkudHJpbSgpLCBhcnIsIFIsIEMpO1xuXHRcdFx0XHRmb3IoQyA9IDE7IEMgPD0gKGxpbmVzW1JdLmxlbmd0aCAtIHN0YXJ0KS8xMCArIDE7ICsrQylcblx0XHRcdFx0XHRzZXRfdGV4dF9hcnIobGluZXNbUl0uc2xpY2Uoc3RhcnQrKEMtMSkqMTAsc3RhcnQrQyoxMCkudHJpbSgpLGFycixSLEMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFycjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkc3ZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cykge1xuXHRcdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdFx0dmFyIHNlcCA9IFwiXCI7XG5cdFx0XHRpZihERU5TRSAhPSBudWxsICYmIG8uZGVuc2UgPT0gbnVsbCkgby5kZW5zZSA9IERFTlNFO1xuXHRcdFx0dmFyIHdzID0gby5kZW5zZSA/IChbXSkgOiAoe30pO1xuXHRcdFx0dmFyIHJhbmdlID0gKHtzOiB7YzowLCByOjB9LCBlOiB7YzowLCByOjB9fSk7XG5cblx0XHRcdC8qIGtub3duIHNlcCAqL1xuXHRcdFx0aWYoc3RyLnN1YnN0cigwLDQpID09IFwic2VwPVwiICYmIHN0ci5jaGFyQ29kZUF0KDUpID09IDEwKSB7IHNlcCA9IHN0ci5jaGFyQXQoNCk7IHN0ciA9IHN0ci5zdWJzdHIoNik7IH1cblx0XHRcdGVsc2UgaWYoc3RyLnN1YnN0cigwLDEwMjQpLmluZGV4T2YoXCJcXHRcIikgPT0gLTEpIHNlcCA9IFwiLFwiOyBlbHNlIHNlcCA9IFwiXFx0XCI7XG5cdFx0XHR2YXIgUiA9IDAsIEMgPSAwLCB2ID0gMDtcblx0XHRcdHZhciBzdGFydCA9IDAsIGVuZCA9IDAsIHNlcGNjID0gc2VwLmNoYXJDb2RlQXQoMCksIGluc3RyID0gZmFsc2UsIGNjPTA7XG5cdFx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxyXFxuL21nLCBcIlxcblwiKTtcblx0XHRcdGZ1bmN0aW9uIGZpbmlzaF9jZWxsKCkge1xuXHRcdFx0XHR2YXIgcyA9IHN0ci5zbGljZShzdGFydCwgZW5kKTtcblx0XHRcdFx0dmFyIGNlbGwgPSAoe30pO1xuXHRcdFx0XHRpZihzLmNoYXJDb2RlQXQoMCkgPT0gMHgzRCkgeyBjZWxsLnQgPSAnbic7IGNlbGwuZiA9IHMuc3Vic3RyKDEpOyB9XG5cdFx0XHRcdGVsc2UgaWYocyA9PSBcIlRSVUVcIikgeyBjZWxsLnQgPSAnYic7IGNlbGwudiA9IHRydWU7IH1cblx0XHRcdFx0ZWxzZSBpZihzID09IFwiRkFMU0VcIikgeyBjZWxsLnQgPSAnYic7IGNlbGwudiA9IGZhbHNlOyB9XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKHYgPSArcykpIHsgY2VsbC50ID0gJ24nOyBjZWxsLncgPSBzOyBjZWxsLnYgPSB2OyB9XG5cdFx0XHRcdGVsc2UgaWYoIWlzTmFOKGZ1enp5ZGF0ZShzKS5nZXREYXRlKCkpKSB7IGNlbGwudCA9ICdkJzsgY2VsbC52ID0gcGFyc2VEYXRlKHMpOyB9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGNlbGwudCA9ICdzJztcblx0XHRcdFx0XHRpZihzLmNoYXJBdCgwKSA9PSAnXCInICYmIHMuY2hhckF0KHMubGVuZ3RoIC0gMSkgPT0gJ1wiJykgcyA9IHMuc2xpY2UoMSwtMSkucmVwbGFjZSgvXCJcIi9nLCdcIicpO1xuXHRcdFx0XHRcdGNlbGwudiA9IHM7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoby5kZW5zZSkgeyBpZighd3NbUl0pIHdzW1JdID0gW107IHdzW1JdW0NdID0gY2VsbDsgfVxuXHRcdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtjOkMscjpSfSldID0gY2VsbDtcblx0XHRcdFx0c3RhcnQgPSBlbmQrMTtcblx0XHRcdFx0aWYocmFuZ2UuZS5jIDwgQykgcmFuZ2UuZS5jID0gQztcblx0XHRcdFx0aWYocmFuZ2UuZS5yIDwgUikgcmFuZ2UuZS5yID0gUjtcblx0XHRcdFx0aWYoY2MgPT0gc2VwY2MpICsrQzsgZWxzZSB7IEMgPSAwOyArK1I7IH1cblx0XHRcdH1cblx0XHRcdGZvcig7ZW5kIDwgc3RyLmxlbmd0aDsrK2VuZCkgc3dpdGNoKChjYz1zdHIuY2hhckNvZGVBdChlbmQpKSkge1xuXHRcdFx0XHRjYXNlIDB4MjI6IGlmKGluc3RyIHx8IChlbmQgLSBzdGFydCA9PSAwKSkgaW5zdHIgPSAhaW5zdHI7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIHNlcGNjOiBjYXNlIDB4MGE6IGNhc2UgMHgwZDogaWYoIWluc3RyKSBmaW5pc2hfY2VsbCgpOyBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogYnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZihlbmQgLSBzdGFydCA+IDApIGZpbmlzaF9jZWxsKCk7XG5cblx0XHRcdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0cmV0dXJuIHdzO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBybl90b19zaGVldF9zdHIoc3RyLCBvcHRzKSB7XG5cdFx0XHRpZihzdHIuc3Vic3RyKDAsNCkgPT0gXCJzZXA9XCIpIHJldHVybiBkc3ZfdG9fc2hlZXRfc3RyKHN0ciwgb3B0cyk7XG5cdFx0XHRpZihzdHIuaW5kZXhPZihcIlxcdFwiKSA+PSAwIHx8IHN0ci5pbmRleE9mKFwiLFwiKSA+PSAwKSByZXR1cm4gZHN2X3RvX3NoZWV0X3N0cihzdHIsIG9wdHMpO1xuXHRcdFx0cmV0dXJuIGFvYV90b19zaGVldChwcm5fdG9fYW9hX3N0cihzdHIsIG9wdHMpLCBvcHRzKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwcm5fdG9fc2hlZXQoZCwgb3B0cykge1xuXHRcdFx0dmFyIHN0ciA9IFwiXCIsIGJ5dGVzID0gZmlyc3RieXRlKGQsIG9wdHMpO1xuXHRcdFx0c3dpdGNoKG9wdHMudHlwZSkge1xuXHRcdFx0XHRjYXNlICdiYXNlNjQnOiBzdHIgPSBCYXNlNjQuZGVjb2RlKGQpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnYmluYXJ5Jzogc3RyID0gZDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2J1ZmZlcic6IHN0ciA9IGQudG9TdHJpbmcoJ2JpbmFyeScpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnYXJyYXknOiBzdHIgPSBjYzJzdHIoZCk7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRpZihieXRlc1swXSA9PSAweEVGICYmIGJ5dGVzWzFdID09IDB4QkIgJiYgYnl0ZXNbMl0gPT0gMHhCRikgc3RyID0gdXRmOHJlYWQoc3RyKTtcblx0XHRcdHJldHVybiBwcm5fdG9fc2hlZXRfc3RyKHN0ciwgb3B0cyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcHJuX3RvX3dvcmtib29rKHN0ciwgb3B0cykgeyByZXR1cm4gc2hlZXRfdG9fd29ya2Jvb2socHJuX3RvX3NoZWV0KHN0ciwgb3B0cyksIG9wdHMpOyB9XG5cblx0XHRmdW5jdGlvbiBzaGVldF90b19wcm4od3MsIG9wdHMpIHtcblx0XHRcdHZhciBvID0gW107XG5cdFx0XHR2YXIgciA9IGRlY29kZV9yYW5nZSh3c1snIXJlZiddKSwgY2VsbDtcblx0XHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0XHR2YXIgb28gPSBbXTtcblx0XHRcdFx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0XHRcdHZhciBjb29yZCA9IGVuY29kZV9jZWxsKHtyOlIsYzpDfSk7XG5cdFx0XHRcdFx0Y2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tjb29yZF07XG5cdFx0XHRcdFx0aWYoIWNlbGwgfHwgY2VsbC52ID09IG51bGwpIHsgb28ucHVzaChcIiAgICAgICAgICBcIik7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0dmFyIHcgPSAoY2VsbC53IHx8IChmb3JtYXRfY2VsbChjZWxsKSwgY2VsbC53KSB8fCBcIlwiKS5zdWJzdHIoMCwxMCk7XG5cdFx0XHRcdFx0d2hpbGUody5sZW5ndGggPCAxMCkgdyArPSBcIiBcIjtcblx0XHRcdFx0XHRvby5wdXNoKHcgKyAoQyA9PSAwID8gXCIgXCIgOiBcIlwiKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0by5wdXNoKG9vLmpvaW4oXCJcIikpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG8uam9pbihcIlxcblwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9fd29ya2Jvb2s6IHBybl90b193b3JrYm9vayxcblx0XHRcdHRvX3NoZWV0OiBwcm5fdG9fc2hlZXQsXG5cdFx0XHRmcm9tX3NoZWV0OiBzaGVldF90b19wcm5cblx0XHR9O1xuXHR9KSgpO1xuXG5cdC8qIEV4Y2VsIGRlZmF1bHRzIHRvIFNZTEsgYnV0IHdhcm5zIGlmIGRhdGEgaXMgbm90IHZhbGlkICovXG5cdGZ1bmN0aW9uIHJlYWRfd2JfSUQoZCwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fSwgT0xEX1dURiA9ICEhby5XVEY7IG8uV1RGID0gdHJ1ZTtcblx0XHR0cnkge1xuXHRcdFx0dmFyIG91dCA9IFNZTEsudG9fd29ya2Jvb2soZCwgbyk7XG5cdFx0XHRvLldURiA9IE9MRF9XVEY7XG5cdFx0XHRyZXR1cm4gb3V0O1xuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0by5XVEYgPSBPTERfV1RGO1xuXHRcdFx0aWYoIWUubWVzc2FnZS5tYXRjaCgvU1lMSyBiYWQgcmVjb3JkIElELykgJiYgT0xEX1dURikgdGhyb3cgZTtcblx0XHRcdHJldHVybiBQUk4udG9fd29ya2Jvb2soZCwgb3B0cyk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIFdLXyA9IChmdW5jdGlvbigpIHtcblx0XHRmdW5jdGlvbiBsb3R1c2hvcHBlcihkYXRhLCBjYiwgb3B0cykge1xuXHRcdFx0aWYoIWRhdGEpIHJldHVybjtcblx0XHRcdHByZXBfYmxvYihkYXRhLCBkYXRhLmwgfHwgMCk7XG5cdFx0XHR2YXIgRW51bSA9IG9wdHMuRW51bSB8fCBXSzFFbnVtO1xuXHRcdFx0d2hpbGUoZGF0YS5sIDwgZGF0YS5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIFJUID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0XHR2YXIgUiA9IEVudW1bUlRdIHx8IEVudW1bMHhGRl07XG5cdFx0XHRcdHZhciBsZW5ndGggPSBkYXRhLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRcdHZhciB0Z3QgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0XHRcdHZhciBkID0gUi5mKGRhdGEsIGxlbmd0aCwgb3B0cyk7XG5cdFx0XHRcdGRhdGEubCA9IHRndDtcblx0XHRcdFx0aWYoY2IoZCwgUi5uLCBSVCkpIHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBsb3R1c190b193b3JrYm9vayhkLCBvcHRzKSB7XG5cdFx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ2Jhc2U2NCc6IHJldHVybiBsb3R1c190b193b3JrYm9va19idWYoczJhKEJhc2U2NC5kZWNvZGUoZCkpLCBvcHRzKTtcblx0XHRcdFx0Y2FzZSAnYmluYXJ5JzogcmV0dXJuIGxvdHVzX3RvX3dvcmtib29rX2J1ZihzMmEoZCksIG9wdHMpO1xuXHRcdFx0XHRjYXNlICdidWZmZXInOlxuXHRcdFx0XHRjYXNlICdhcnJheSc6IHJldHVybiBsb3R1c190b193b3JrYm9va19idWYoZCwgb3B0cyk7XG5cdFx0XHR9XG5cdFx0XHR0aHJvdyBcIlVuc3VwcG9ydGVkIHR5cGUgXCIgKyBvcHRzLnR5cGU7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbG90dXNfdG9fd29ya2Jvb2tfYnVmKGQsb3B0cykge1xuXHRcdFx0aWYoIWQpIHJldHVybiBkO1xuXHRcdFx0dmFyIG8gPSBvcHRzIHx8IHt9O1xuXHRcdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvLmRlbnNlID09IG51bGwpIG8uZGVuc2UgPSBERU5TRTtcblx0XHRcdHZhciBzID0gKChvLmRlbnNlID8gW10gOiB7fSkpLCBuID0gXCJTaGVldDFcIiwgc2lkeCA9IDA7XG5cdFx0XHR2YXIgc2hlZXRzID0ge30sIHNuYW1lcyA9IFtuXTtcblxuXHRcdFx0dmFyIHJlZmd1ZXNzID0ge3M6IHtyOjAsIGM6MH0sIGU6IHtyOjAsIGM6MH0gfTtcblxuXHRcdFx0aWYoZFsyXSA9PSAweDAyKSBvLkVudW0gPSBXSzFFbnVtO1xuXHRcdFx0ZWxzZSBpZihkWzJdID09IDB4MWEpIG8uRW51bSA9IFdLM0VudW07XG5cdFx0XHRlbHNlIGlmKGRbMl0gPT0gMHgwZSkgeyBvLkVudW0gPSBXSzNFbnVtOyBvLnFwcm8gPSB0cnVlOyBkLmwgPSAwOyB9XG5cdFx0XHRlbHNlIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBMT1RVUyBCT0YgXCIgKyBkWzJdKTtcblx0XHRcdGxvdHVzaG9wcGVyKGQsIGZ1bmN0aW9uKHZhbCwgUm4sIFJUKSB7XG5cdFx0XHRcdGlmKGRbMl0gPT0gMHgwMikgc3dpdGNoKFJUKSB7XG5cdFx0XHRcdFx0Y2FzZSAweDAwOlxuXHRcdFx0XHRcdFx0by52ZXJzID0gdmFsO1xuXHRcdFx0XHRcdFx0aWYodmFsID49IDB4MTAwMCkgby5xcHJvID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMHgwNjogcmVmZ3Vlc3MgPSB2YWw7IGJyZWFrOyAvKiBSQU5HRSAqL1xuXHRcdFx0XHRcdGNhc2UgMHgwRjogLyogTEFCRUwgKi9cblx0XHRcdFx0XHRcdGlmKCFvLnFwcm8pIHZhbFsxXS52ID0gdmFsWzFdLnYuc3Vic3RyKDEpO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGNhc2UgMHgwRDogLyogSU5URUdFUiAqL1xuXHRcdFx0XHRcdGNhc2UgMHgwRTogLyogTlVNQkVSICovXG5cdFx0XHRcdFx0Y2FzZSAweDEwOiAvKiBGT1JNVUxBICovXG5cdFx0XHRcdFx0Y2FzZSAweDMzOiAvKiBTVFJJTkcgKi9cblx0XHRcdFx0XHRcdGlmKG8uZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0aWYoIXNbdmFsWzBdLnJdKSBzW3ZhbFswXS5yXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRzW3ZhbFswXS5yXVt2YWxbMF0uY10gPSB2YWxbMV07XG5cdFx0XHRcdFx0XHR9IGVsc2Ugc1tlbmNvZGVfY2VsbCh2YWxbMF0pXSA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdC8qIFRPRE86IEZPUk1BVCAqL1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH0gZWxzZSBzd2l0Y2goUlQpIHtcblx0XHRcdFx0XHRjYXNlIDB4MTY6IC8qIExBQkVMMTYgKi9cblx0XHRcdFx0XHRcdHZhbFsxXS52ID0gdmFsWzFdLnYuc3Vic3RyKDEpO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGNhc2UgMHgxNzogLyogTlVNQkVSMTcgKi9cblx0XHRcdFx0XHRjYXNlIDB4MTg6IC8qIE5VTUJFUjE4ICovXG5cdFx0XHRcdFx0Y2FzZSAweDE5OiAvKiBGT1JNVUxBMTkgKi9cblx0XHRcdFx0XHRjYXNlIDB4MjU6IC8qIE5VTUJFUjI1ICovXG5cdFx0XHRcdFx0Y2FzZSAweDI3OiAvKiBOVU1CRVIyNyAqL1xuXHRcdFx0XHRcdGNhc2UgMHgyODogLyogRk9STVVMQTI4ICovXG5cdFx0XHRcdFx0XHRpZih2YWxbM10gPiBzaWR4KSB7XG5cdFx0XHRcdFx0XHRcdHNbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKHJlZmd1ZXNzKTtcblx0XHRcdFx0XHRcdFx0c2hlZXRzW25dID0gcztcblx0XHRcdFx0XHRcdFx0cyA9IChvLmRlbnNlID8gW10gOiB7fSk7XG5cdFx0XHRcdFx0XHRcdHJlZmd1ZXNzID0ge3M6IHtyOjAsIGM6MH0sIGU6IHtyOjAsIGM6MH0gfTtcblx0XHRcdFx0XHRcdFx0c2lkeCA9IHZhbFszXTsgbiA9IFwiU2hlZXRcIiArIChzaWR4ICsgMSk7XG5cdFx0XHRcdFx0XHRcdHNuYW1lcy5wdXNoKG4pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c1tlbmNvZGVfY2VsbCh2YWxbMF0pXSA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuYyA8IHZhbFswXS5jKSByZWZndWVzcy5lLmMgPSB2YWxbMF0uYztcblx0XHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHZhbFswXS5yKSByZWZndWVzcy5lLnIgPSB2YWxbMF0ucjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBvKTtcblxuXHRcdFx0c1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdFx0c2hlZXRzW25dID0gcztcblx0XHRcdHJldHVybiB7IFNoZWV0TmFtZXM6IHNuYW1lcywgU2hlZXRzOnNoZWV0cyB9O1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlX1JBTkdFKGJsb2IsIGxlbmd0aCkge1xuXHRcdFx0dmFyIG8gPSB7czp7YzowLHI6MH0sZTp7YzowLHI6MH19O1xuXHRcdFx0by5zLmMgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRvLnMuciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdG8uZS5jID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0by5lLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRpZihvLnMuYyA9PSAweEZGRkYpIG8ucy5jID0gby5lLmMgPSBvLnMuciA9IG8uZS5yID0gMDtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlX2NlbGwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0XHR2YXIgbyA9IFt7YzowLHI6MH0sIHt0OiduJyx2OjB9LCAwXTtcblx0XHRcdGlmKG9wdHMucXBybyAmJiBvcHRzLnZlcnMgIT0gMHg1MTIwKSB7XG5cdFx0XHRcdG9bMF0uYyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRcdFx0YmxvYi5sKys7XG5cdFx0XHRcdG9bMF0uciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdFx0YmxvYi5sKz0yO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b1syXSA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRcdFx0b1swXS5jID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBvWzBdLnIgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9MQUJFTChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHRcdHZhciB0Z3QgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0XHR2YXIgbyA9IHBhcnNlX2NlbGwoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHRcdG9bMV0udCA9ICdzJztcblx0XHRcdGlmKG9wdHMudmVycyA9PSAweDUxMjApIHtcblx0XHRcdFx0YmxvYi5sKys7XG5cdFx0XHRcdHZhciBsZW4gPSBibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdChsZW4sICd1dGY4Jyk7XG5cdFx0XHRcdHJldHVybiBvO1xuXHRcdFx0fVxuXHRcdFx0aWYob3B0cy5xcHJvKSBibG9iLmwrKztcblx0XHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdCh0Z3QgLSBibG9iLmwsICdjc3RyJyk7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9JTlRFR0VSKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9jZWxsKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0XHRvWzFdLnYgPSBibG9iLnJlYWRfc2hpZnQoMiwgJ2knKTtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlX05VTUJFUihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHRcdHZhciBvID0gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KDgsICdmJyk7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9GT1JNVUxBKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdFx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHRcdHZhciBvID0gcGFyc2VfY2VsbChibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdFx0LyogVE9ETzogZm9ybXVsYSAqL1xuXHRcdFx0b1sxXS52ID0gYmxvYi5yZWFkX3NoaWZ0KDgsICdmJyk7XG5cdFx0XHRpZihvcHRzLnFwcm8pIGJsb2IubCA9IHRndDtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YXIgZmxlbiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdFx0YmxvYi5sICs9IGZsZW47XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0XHR2YXIgbyA9IFt7YzowLHI6MH0sIHt0OiduJyx2OjB9LCAwXTtcblx0XHRcdG9bMF0uciA9IGJsb2IucmVhZF9zaGlmdCgyKTsgb1szXSA9IGJsb2JbYmxvYi5sKytdOyBvWzBdLmMgPSBibG9iW2Jsb2IubCsrXTtcblx0XHRcdHJldHVybiBvO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHBhcnNlX0xBQkVMXzE2KGJsb2IsIGxlbmd0aCkge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHRcdG9bMV0udCA9ICdzJztcblx0XHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdChsZW5ndGggLSA0LCAnY3N0cicpO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSXzE4KGJsb2IsIGxlbmd0aCkge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHRcdG9bMV0udiA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRcdHZhciB2ID0gb1sxXS52ID4+IDE7XG5cdFx0XHQvKiBUT0RPOiBmaWd1cmUgb3V0IGFsbCBvZiB0aGUgY29ybmVyIGNhc2VzICovXG5cdFx0XHRpZihvWzFdLnYgJiAweDEpIHtcblx0XHRcdFx0c3dpdGNoKHYgJiAweDA3KSB7XG5cdFx0XHRcdFx0Y2FzZSAxOiB2ID0gKHYgPj4gMykgKiA1MDA7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgMjogdiA9ICh2ID4+IDMpIC8gMjA7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgNDogdiA9ICh2ID4+IDMpIC8gMjAwMDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSA2OiB2ID0gKHYgPj4gMykgLyAxNjsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSA3OiB2ID0gKHYgPj4gMykgLyA2NDsgYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgXCJ1bmtub3duIE5VTUJFUl8xOCBlbmNvZGluZyBcIiArICh2ICYgMHgwNyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9bMV0udiA9IHY7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMTcoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0XHR2YXIgbyA9IHBhcnNlX2NlbGxfMyhibG9iLCBsZW5ndGgpO1xuXHRcdFx0dmFyIHYxID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0dmFyIHYyID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0dmFyIGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0XHRpZihlID09IDB4RkZGRikgeyBvWzFdLnYgPSAwOyByZXR1cm4gbzsgfVxuXHRcdFx0dmFyIHMgPSBlICYgMHg4MDAwOyBlID0gKGUmMHg3RkZGKSAtIDE2NDQ2O1xuXHRcdFx0b1sxXS52ID0gKChlID4gMCA/ICh2MiA8PCBlKSA6ICh2MiA+Pj4gLWUpKSArIChlID4gLTMyID8gKHYxIDw8IChlICsgMzIpKSA6ICh2MSA+Pj4gLShlICsgMzIpKSkpO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VfRk9STVVMQV8xOShibG9iLCBsZW5ndGgpIHtcblx0XHRcdHZhciBvID0gcGFyc2VfTlVNQkVSXzE3KGJsb2IsIDE0KTtcblx0XHRcdGJsb2IubCArPSBsZW5ndGggLSAxNDsgLyogVE9ETzogZm9ybXVsYSAqL1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VfTlVNQkVSXzI1KGJsb2IsIGxlbmd0aCkge1xuXHRcdFx0dmFyIG8gPSBwYXJzZV9jZWxsXzMoYmxvYiwgbGVuZ3RoKTtcblx0XHRcdHZhciB2MSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRcdG9bMV0udiA9IHYxID4+IDY7XG5cdFx0XHRyZXR1cm4gbztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwYXJzZV9OVU1CRVJfMjcoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0XHR2YXIgbyA9IHBhcnNlX2NlbGxfMyhibG9iLCBsZW5ndGgpO1xuXHRcdFx0dmFyIHYxID0gYmxvYi5yZWFkX3NoaWZ0KDgsJ2YnKTtcblx0XHRcdG9bMV0udiA9IHYxO1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VfRk9STVVMQV8yOChibG9iLCBsZW5ndGgpIHtcblx0XHRcdHZhciBvID0gcGFyc2VfTlVNQkVSXzI3KGJsb2IsIDE0KTtcblx0XHRcdGJsb2IubCArPSBsZW5ndGggLSAxMDsgLyogVE9ETzogZm9ybXVsYSAqL1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXG5cdFx0dmFyIFdLMUVudW0gPSB7XG5cdDB4MDAwMDogeyBuOlwiQk9GXCIsIGY6cGFyc2V1aW50MTYgfSxcblx0MHgwMDAxOiB7IG46XCJFT0ZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDAyOiB7IG46IFwiQ0FMQ01PREVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDAzOiB7IG46XCJDQUxDT1JERVJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDA0OiB7IG46XCJTUExJVFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMDU6IHsgbjpcIlNZTkNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDA2OiB7IG46XCJSQU5HRVwiLCBmOnBhcnNlX1JBTkdFIH0sXG5cdDB4MDAwNzogeyBuOlwiV0lORE9XMVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMDg6IHsgbjpcIkNPTFcxXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwOTogeyBuOlwiV0lOVFdPXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwQTogeyBuOlwiQ09MVzJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDBCOiB7IG46XCJOQU1FXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwQzogeyBuOlwiQkxBTktcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDBEOiB7IG46XCJJTlRFR0VSXCIsIGY6cGFyc2VfSU5URUdFUiB9LFxuXHQweDAwMEU6IHsgbjpcIk5VTUJFUlwiLCBmOnBhcnNlX05VTUJFUiB9LFxuXHQweDAwMEY6IHsgbjpcIkxBQkVMXCIsIGY6cGFyc2VfTEFCRUwgfSxcblx0MHgwMDEwOiB7IG46XCJGT1JNVUxBXCIsIGY6cGFyc2VfRk9STVVMQSB9LFxuXHQweDAwMTg6IHsgbjpcIlRBQkxFXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxOTogeyBuOlwiT1JBTkdFXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxQTogeyBuOlwiUFJBTkdFXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxQjogeyBuOlwiU1JBTkdFXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxQzogeyBuOlwiRlJBTkdFXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxRDogeyBuOlwiS1JBTkdFMVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjA6IHsgbjpcIkhSQU5HRVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjM6IHsgbjpcIktSQU5HRTJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI0OiB7IG46XCJQUk9URUNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI1OiB7IG46XCJGT09URVJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI2OiB7IG46XCJIRUFERVJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI3OiB7IG46XCJTRVRVUFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjg6IHsgbjpcIk1BUkdJTlNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI5OiB7IG46XCJMQUJFTEZNVFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkE6IHsgbjpcIlRJVExFU1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkI6IHsgbjpcIlNIRUVUSlNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDJEOiB7IG46XCJHUkFQSFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkU6IHsgbjpcIk5HUkFQSFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkY6IHsgbjpcIkNBTENDT1VOVFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMzA6IHsgbjpcIlVORk9STUFUVEVEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzMTogeyBuOlwiQ1VSU09SVzEyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzMjogeyBuOlwiV0lORE9XXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzMzogeyBuOlwiU1RSSU5HXCIsIGY6cGFyc2VfTEFCRUwgfSxcblx0MHgwMDM3OiB7IG46XCJQQVNTV09SRFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMzg6IHsgbjpcIkxPQ0tFRFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwM0M6IHsgbjpcIlFVRVJZXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzRDogeyBuOlwiUVVFUllOQU1FXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzRTogeyBuOlwiUFJJTlRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDNGOiB7IG46XCJQUklOVE5BTUVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQwOiB7IG46XCJHUkFQSDJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQxOiB7IG46XCJHUkFQSE5BTUVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQyOiB7IG46XCJaT09NXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0MzogeyBuOlwiU1lNU1BMSVRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQ0OiB7IG46XCJOU1JPV1NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQ1OiB7IG46XCJOU0NPTFNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQ2OiB7IG46XCJSVUxFUlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwNDc6IHsgbjpcIk5OQU1FXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0ODogeyBuOlwiQUNPTU1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQ5OiB7IG46XCJBTUFDUk9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDRBOiB7IG46XCJQQVJTRVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRkY6IHsgbjpcIlwiLCBmOnBhcnNlbm9vcCB9XG5cdFx0fTtcblxuXHRcdHZhciBXSzNFbnVtID0ge1xuXHQweDAwMDA6IHsgbjpcIkJPRlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMDE6IHsgbjpcIkVPRlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMDM6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwNDogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDA1OiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMDY6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwNzogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDA5OiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMGE6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwYjogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDBjOiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMGU6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwZjogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDEwOiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMTE6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxMjogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDEzOiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMTU6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxNjogeyBuOlwiTEFCRUwxNlwiLCBmOnBhcnNlX0xBQkVMXzE2fSxcblx0MHgwMDE3OiB7IG46XCJOVU1CRVIxN1wiLCBmOnBhcnNlX05VTUJFUl8xNyB9LFxuXHQweDAwMTg6IHsgbjpcIk5VTUJFUjE4XCIsIGY6cGFyc2VfTlVNQkVSXzE4IH0sXG5cdDB4MDAxOTogeyBuOlwiRk9STVVMQTE5XCIsIGY6cGFyc2VfRk9STVVMQV8xOX0sXG5cdDB4MDAxYTogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFiOiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMWM6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxZDogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFlOiB7IG46XCI/P1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMWY6IHsgbjpcIj8/XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAyMTogeyBuOlwiPz9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDI1OiB7IG46XCJOVU1CRVIyNVwiLCBmOnBhcnNlX05VTUJFUl8yNSB9LFxuXHQweDAwMjc6IHsgbjpcIk5VTUJFUjI3XCIsIGY6cGFyc2VfTlVNQkVSXzI3IH0sXG5cdDB4MDAyODogeyBuOlwiRk9STVVMQTI4XCIsIGY6cGFyc2VfRk9STVVMQV8yOCB9LFxuXHQweDAwRkY6IHsgbjpcIlwiLCBmOnBhcnNlbm9vcCB9XG5cdFx0fTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9fd29ya2Jvb2s6IGxvdHVzX3RvX3dvcmtib29rXG5cdFx0fTtcblx0fSkoKTtcblx0LyogMTguNC4xIGNoYXJzZXQgdG8gY29kZXBhZ2UgbWFwcGluZyAqL1xuXHR2YXIgQ1MyQ1AgPSAoe1xuXHQwOiAgICAxMjUyLCAvKiBBTlNJICovXG5cdDE6ICAgNjUwMDEsIC8qIERFRkFVTFQgKi9cblx0MjogICA2NTAwMSwgLyogU1lNQk9MICovXG5cdDc3OiAgMTAwMDAsIC8qIE1BQyAqL1xuXHQxMjg6ICAgOTMyLCAvKiBTSElGVEpJUyAqL1xuXHQxMjk6ICAgOTQ5LCAvKiBIQU5HVUwgKi9cblx0MTMwOiAgMTM2MSwgLyogSk9IQUIgKi9cblx0MTM0OiAgIDkzNiwgLyogR0IyMzEyICovXG5cdDEzNjogICA5NTAsIC8qIENISU5FU0VCSUc1ICovXG5cdDE2MTogIDEyNTMsIC8qIEdSRUVLICovXG5cdDE2MjogIDEyNTQsIC8qIFRVUktJU0ggKi9cblx0MTYzOiAgMTI1OCwgLyogVklFVE5BTUVTRSAqL1xuXHQxNzc6ICAxMjU1LCAvKiBIRUJSRVcgKi9cblx0MTc4OiAgMTI1NiwgLyogQVJBQklDICovXG5cdDE4NjogIDEyNTcsIC8qIEJBTFRJQyAqL1xuXHQyMDQ6ICAxMjUxLCAvKiBSVVNTSUFOICovXG5cdDIyMjogICA4NzQsIC8qIFRIQUkgKi9cblx0MjM4OiAgMTI1MCwgLyogRUFTVEVVUk9QRSAqL1xuXHQyNTU6ICAxMjUyLCAvKiBPRU0gKi9cblx0Njk6ICAgNjk2OSAgLyogTUlTQyAqL1xuXHR9KTtcblxuXHQvKiBQYXJzZSBhIGxpc3Qgb2YgPHI+IHRhZ3MgKi9cblx0dmFyIHBhcnNlX3JzID0gKGZ1bmN0aW9uIHBhcnNlX3JzX2ZhY3RvcnkoKSB7XG5cdFx0dmFyIHRyZWdleCA9IG1hdGNodGFnKFwidFwiKSwgcnByZWdleCA9IG1hdGNodGFnKFwiclByXCIpLCBycmVnZXggPSAvPCg/Olxcdys6KT9yPi9nLCByZW5kID0gLzxcXC8oPzpcXHcrOik/cj4vLCBubHJlZ2V4ID0gL1xcclxcbi9nO1xuXHRcdC8qIDE4LjQuNyByUHIgQ1RfUlByRWx0ICovXG5cdFx0dmFyIHBhcnNlX3JwciA9IGZ1bmN0aW9uIHBhcnNlX3JwcihycHIsIGludHJvLCBvdXRybykge1xuXHRcdFx0dmFyIGZvbnQgPSB7fSwgY3AgPSA2NTAwMSwgYWxpZ24gPSBcIlwiO1xuXHRcdFx0dmFyIG0gPSBycHIubWF0Y2godGFncmVnZXgpLCBpID0gMDtcblx0XHRcdGlmKG0pIGZvcig7aSE9bS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKG1baV0pO1xuXHRcdFx0XHRzd2l0Y2goeVswXS5yZXBsYWNlKC9cXHcqOi9nLFwiXCIpKSB7XG5cdFx0XHRcdFx0LyogMTguOC4xMiBjb25kZW5zZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdFx0XHQvKiAqKiBub3QgcmVxdWlyZWQgLiAqL1xuXHRcdFx0XHRcdGNhc2UgJzxjb25kZW5zZSc6IGJyZWFrO1xuXHRcdFx0XHRcdC8qIDE4LjguMTcgZXh0ZW5kIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRcdC8qICoqIG5vdCByZXF1aXJlZCAuICovXG5cdFx0XHRcdFx0Y2FzZSAnPGV4dGVuZCc6IGJyZWFrO1xuXHRcdFx0XHRcdC8qIDE4LjguMzYgc2hhZG93IENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRcdC8qICoqIG5vdCByZXF1aXJlZCAuICovXG5cdFx0XHRcdFx0Y2FzZSAnPHNoYWRvdyc6XG5cdFx0XHRcdFx0XHRpZigheS52YWwpIGJyZWFrO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGNhc2UgJzxzaGFkb3c+Jzpcblx0XHRcdFx0XHRjYXNlICc8c2hhZG93Lz4nOiBmb250LnNoYWRvdyA9IDE7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzwvc2hhZG93Pic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogMTguNC4xIGNoYXJzZXQgQ1RfSW50UHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0XHRcdGNhc2UgJzxjaGFyc2V0Jzpcblx0XHRcdFx0XHRcdGlmKHkudmFsID09ICcxJykgYnJlYWs7XG5cdFx0XHRcdFx0XHRjcCA9IENTMkNQW3BhcnNlSW50KHkudmFsLCAxMCldO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHQvKiAxOC40LjIgb3V0bGluZSBDVF9Cb29sZWFuUHJvcGVydHkgVE9ETyAqL1xuXHRcdFx0XHRcdGNhc2UgJzxvdXRsaW5lJzpcblx0XHRcdFx0XHRcdGlmKCF5LnZhbCkgYnJlYWs7XG5cdFx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdFx0Y2FzZSAnPG91dGxpbmU+Jzpcblx0XHRcdFx0XHRjYXNlICc8b3V0bGluZS8+JzogZm9udC5vdXRsaW5lID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnPC9vdXRsaW5lPic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogMTguNC41IHJGb250IENUX0ZvbnROYW1lICovXG5cdFx0XHRcdFx0Y2FzZSAnPHJGb250JzogZm9udC5uYW1lID0geS52YWw7IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogMTguNC4xMSBzeiBDVF9Gb250U2l6ZSAqL1xuXHRcdFx0XHRcdGNhc2UgJzxzeic6IGZvbnQuc3ogPSB5LnZhbDsgYnJlYWs7XG5cblx0XHRcdFx0XHQvKiAxOC40LjEwIHN0cmlrZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdFx0XHRjYXNlICc8c3RyaWtlJzpcblx0XHRcdFx0XHRcdGlmKCF5LnZhbCkgYnJlYWs7XG5cdFx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdFx0Y2FzZSAnPHN0cmlrZT4nOlxuXHRcdFx0XHRcdGNhc2UgJzxzdHJpa2UvPic6IGZvbnQuc3RyaWtlID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnPC9zdHJpa2U+JzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiAxOC40LjEzIHUgQ1RfVW5kZXJsaW5lUHJvcGVydHkgKi9cblx0XHRcdFx0XHRjYXNlICc8dSc6XG5cdFx0XHRcdFx0XHRpZigheS52YWwpIGJyZWFrO1xuXHRcdFx0XHRcdFx0c3dpdGNoKHkudmFsKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2RvdWJsZSc6IGZvbnQudXZhbCA9IFwiZG91YmxlXCI7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdzaW5nbGVBY2NvdW50aW5nJzogZm9udC51dmFsID0gXCJzaW5nbGUtYWNjb3VudGluZ1wiOyBicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnZG91YmxlQWNjb3VudGluZyc6IGZvbnQudXZhbCA9IFwiZG91YmxlLWFjY291bnRpbmdcIjsgYnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdFx0Y2FzZSAnPHU+Jzpcblx0XHRcdFx0XHRjYXNlICc8dS8+JzogZm9udC51ID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnPC91Pic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogMTguOC4yIGIgKi9cblx0XHRcdFx0XHRjYXNlICc8Yic6XG5cdFx0XHRcdFx0XHRpZih5LnZhbCA9PSAnMCcpIGJyZWFrO1xuXHRcdFx0XHRcdFx0LyogZmFsbHMgdGhyb3VnaCAqL1xuXHRcdFx0XHRcdGNhc2UgJzxiPic6XG5cdFx0XHRcdFx0Y2FzZSAnPGIvPic6IGZvbnQuYiA9IDE7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJzwvYj4nOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIDE4LjguMjYgaSAqL1xuXHRcdFx0XHRcdGNhc2UgJzxpJzpcblx0XHRcdFx0XHRcdGlmKHkudmFsID09ICcwJykgYnJlYWs7XG5cdFx0XHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRcdFx0Y2FzZSAnPGk+Jzpcblx0XHRcdFx0XHRjYXNlICc8aS8+JzogZm9udC5pID0gMTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnPC9pPic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogMTguMy4xLjE1IGNvbG9yIENUX0NvbG9yIFRPRE86IHRpbnQsIHRoZW1lLCBhdXRvLCBpbmRleGVkICovXG5cdFx0XHRcdFx0Y2FzZSAnPGNvbG9yJzpcblx0XHRcdFx0XHRcdGlmKHkucmdiKSBmb250LmNvbG9yID0geS5yZ2Iuc3Vic3RyKDIsNik7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdC8qIDE4LjguMTggZmFtaWx5IFNUX0ZvbnRGYW1pbHkgKi9cblx0XHRcdFx0XHRjYXNlICc8ZmFtaWx5JzogZm9udC5mYW1pbHkgPSB5LnZhbDsgYnJlYWs7XG5cblx0XHRcdFx0XHQvKiAxOC40LjE0IHZlcnRBbGlnbiBDVF9WZXJ0aWNhbEFsaWduRm9udFByb3BlcnR5IFRPRE8gKi9cblx0XHRcdFx0XHRjYXNlICc8dmVydEFsaWduJzogYWxpZ24gPSB5LnZhbDsgYnJlYWs7XG5cblx0XHRcdFx0XHQvKiAxOC44LjM1IHNjaGVtZSBDVF9Gb250U2NoZW1lIFRPRE8gKi9cblx0XHRcdFx0XHRjYXNlICc8c2NoZW1lJzogYnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0aWYoeVswXS5jaGFyQ29kZUF0KDEpICE9PSA0NykgdGhyb3cgJ1VucmVjb2duaXplZCByaWNoIGZvcm1hdCAnICsgeVswXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIHN0eWxlID0gW107XG5cblx0XHRcdGlmKGZvbnQudSkgc3R5bGUucHVzaChcInRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1wiKTtcblx0XHRcdGlmKGZvbnQudXZhbCkgc3R5bGUucHVzaChcInRleHQtdW5kZXJsaW5lLXN0eWxlOlwiICsgZm9udC51dmFsICsgXCI7XCIpO1xuXHRcdFx0aWYoZm9udC5zeikgc3R5bGUucHVzaChcImZvbnQtc2l6ZTpcIiArIGZvbnQuc3ogKyBcIjtcIik7XG5cdFx0XHRpZihmb250Lm91dGxpbmUpIHN0eWxlLnB1c2goXCJ0ZXh0LWVmZmVjdDogb3V0bGluZTtcIik7XG5cdFx0XHRpZihmb250LnNoYWRvdykgc3R5bGUucHVzaChcInRleHQtc2hhZG93OiBhdXRvO1wiKTtcblx0XHRcdGludHJvLnB1c2goJzxzcGFuIHN0eWxlPVwiJyArIHN0eWxlLmpvaW4oXCJcIikgKyAnXCI+Jyk7XG5cblx0XHRcdGlmKGZvbnQuYikgeyBpbnRyby5wdXNoKFwiPGI+XCIpOyBvdXRyby5wdXNoKFwiPC9iPlwiKTsgfVxuXHRcdFx0aWYoZm9udC5pKSB7IGludHJvLnB1c2goXCI8aT5cIik7IG91dHJvLnB1c2goXCI8L2k+XCIpOyB9XG5cdFx0XHRpZihmb250LnN0cmlrZSkgeyBpbnRyby5wdXNoKFwiPHM+XCIpOyBvdXRyby5wdXNoKFwiPC9zPlwiKTsgfVxuXG5cdFx0XHRpZihhbGlnbiA9PSBcInN1cGVyc2NyaXB0XCIpIGFsaWduID0gXCJzdXBcIjtcblx0XHRcdGVsc2UgaWYoYWxpZ24gPT0gXCJzdWJzY3JpcHRcIikgYWxpZ24gPSBcInN1YlwiO1xuXHRcdFx0aWYoYWxpZ24gIT0gXCJcIikgeyBpbnRyby5wdXNoKFwiPFwiICsgYWxpZ24gKyBcIj5cIik7IG91dHJvLnB1c2goXCI8L1wiICsgYWxpZ24gKyBcIj5cIik7IH1cblxuXHRcdFx0b3V0cm8ucHVzaChcIjwvc3Bhbj5cIik7XG5cdFx0XHRyZXR1cm4gY3A7XG5cdFx0fTtcblxuXHRcdC8qIDE4LjQuNCByIENUX1JFbHQgKi9cblx0XHRmdW5jdGlvbiBwYXJzZV9yKHIpIHtcblx0XHRcdHZhciB0ZXJtcyA9IFtbXSxcIlwiLFtdXTtcblx0XHRcdC8qIDE4LjQuMTIgdCBTVF9Yc3RyaW5nICovXG5cdFx0XHR2YXIgdCA9IHIubWF0Y2godHJlZ2V4KSwgY3AgPSA2NTAwMTtcblx0XHRcdGlmKCFpc3ZhbCh0KSkgcmV0dXJuIFwiXCI7XG5cdFx0XHR0ZXJtc1sxXSA9IHRbMV07XG5cblx0XHRcdHZhciBycHIgPSByLm1hdGNoKHJwcmVnZXgpO1xuXHRcdFx0aWYoaXN2YWwocnByKSkgY3AgPSBwYXJzZV9ycHIocnByWzFdLCB0ZXJtc1swXSwgdGVybXNbMl0pO1xuXG5cdFx0XHRyZXR1cm4gdGVybXNbMF0uam9pbihcIlwiKSArIHRlcm1zWzFdLnJlcGxhY2UobmxyZWdleCwnPGJyLz4nKSArIHRlcm1zWzJdLmpvaW4oXCJcIik7XG5cdFx0fVxuXHRcdHJldHVybiBmdW5jdGlvbiBwYXJzZV9ycyhycykge1xuXHRcdFx0cmV0dXJuIHJzLnJlcGxhY2UocnJlZ2V4LFwiXCIpLnNwbGl0KHJlbmQpLm1hcChwYXJzZV9yKS5qb2luKFwiXCIpO1xuXHRcdH07XG5cdH0pKCk7XG5cblx0LyogMTguNC44IHNpIENUX1JzdCAqL1xuXHR2YXIgc2l0cmVnZXggPSAvPCg/Olxcdys6KT90W14+XSo+KFtePF0qKTxcXC8oPzpcXHcrOik/dD4vZywgc2lycmVnZXggPSAvPCg/Olxcdys6KT9yPi87XG5cdHZhciBzaXJwaHJlZ2V4ID0gLzwoPzpcXHcrOik/clBoLio/PiguKj8pPFxcLyg/Olxcdys6KT9yUGg+L2c7XG5cdGZ1bmN0aW9uIHBhcnNlX3NpKHgsIG9wdHMpIHtcblx0XHR2YXIgaHRtbCA9IG9wdHMgPyBvcHRzLmNlbGxIVE1MIDogdHJ1ZTtcblx0XHR2YXIgeiA9IHt9O1xuXHRcdGlmKCF4KSByZXR1cm4gbnVsbDtcblx0XHR2YXIgeTtcblx0XHQvKiAxOC40LjEyIHQgU1RfWHN0cmluZyAoUGxhaW50ZXh0IFN0cmluZykgKi9cblx0XHQvLyBUT0RPOiBpcyB3aGl0ZXNwYWNlIGFjdHVhbGx5IHZhbGlkIGhlcmU/XG5cdFx0aWYoeC5tYXRjaCgvXlxccyo8KD86XFx3KzopP3RbXj5dKj4vKSkge1xuXHRcdFx0ei50ID0gdXRmOHJlYWQodW5lc2NhcGV4bWwoeC5zdWJzdHIoeC5pbmRleE9mKFwiPlwiKSsxKS5zcGxpdCgvPFxcLyg/Olxcdys6KT90Pi8pWzBdKSk7XG5cdFx0XHR6LnIgPSB1dGY4cmVhZCh4KTtcblx0XHRcdGlmKGh0bWwpIHouaCA9IGVzY2FwZWh0bWwoei50KTtcblx0XHR9XG5cdFx0LyogMTguNC40IHIgQ1RfUkVsdCAoUmljaCBUZXh0IFJ1bikgKi9cblx0XHRlbHNlIGlmKCh5ID0geC5tYXRjaChzaXJyZWdleCkpKSB7XG5cdFx0XHR6LnIgPSB1dGY4cmVhZCh4KTtcblx0XHRcdHoudCA9IHV0ZjhyZWFkKHVuZXNjYXBleG1sKCh4LnJlcGxhY2Uoc2lycGhyZWdleCwgJycpLm1hdGNoKHNpdHJlZ2V4KXx8W10pLmpvaW4oXCJcIikucmVwbGFjZSh0YWdyZWdleCxcIlwiKSkpO1xuXHRcdFx0aWYoaHRtbCkgei5oID0gcGFyc2VfcnMoei5yKTtcblx0XHR9XG5cdFx0LyogMTguNC4zIHBob25ldGljUHIgQ1RfUGhvbmV0aWNQciAoVE9ETzogbmVlZGVkIGZvciBBc2lhbiBzdXBwb3J0KSAqL1xuXHRcdC8qIDE4LjQuNiByUGggQ1RfUGhvbmV0aWNSdW4gKFRPRE86IG5lZWRlZCBmb3IgQXNpYW4gc3VwcG9ydCkgKi9cblx0XHRyZXR1cm4gejtcblx0fVxuXG5cdC8qIDE4LjQgU2hhcmVkIFN0cmluZyBUYWJsZSAqL1xuXHR2YXIgc3N0cjAgPSAvPCg/Olxcdys6KT9zc3QoW14+XSopPihbXFxzXFxTXSopPFxcLyg/Olxcdys6KT9zc3Q+Lztcblx0dmFyIHNzdHIxID0gLzwoPzpcXHcrOik/KD86c2l8c3N0SXRlbSk+L2c7XG5cdHZhciBzc3RyMiA9IC88XFwvKD86XFx3KzopPyg/OnNpfHNzdEl0ZW0pPi87XG5cdGZ1bmN0aW9uIHBhcnNlX3NzdF94bWwoZGF0YSwgb3B0cykge1xuXHRcdHZhciBzID0gKFtdKSwgc3MgPSBcIlwiO1xuXHRcdGlmKCFkYXRhKSByZXR1cm4gcztcblx0XHQvKiAxOC40Ljkgc3N0IENUX1NzdCAqL1xuXHRcdHZhciBzc3QgPSBkYXRhLm1hdGNoKHNzdHIwKTtcblx0XHRpZihpc3ZhbChzc3QpKSB7XG5cdFx0XHRzcyA9IHNzdFsyXS5yZXBsYWNlKHNzdHIxLFwiXCIpLnNwbGl0KHNzdHIyKTtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gc3MubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dmFyIG8gPSBwYXJzZV9zaShzc1tpXS50cmltKCksIG9wdHMpO1xuXHRcdFx0XHRpZihvICE9IG51bGwpIHNbcy5sZW5ndGhdID0gbztcblx0XHRcdH1cblx0XHRcdHNzdCA9IHBhcnNleG1sdGFnKHNzdFsxXSk7IHMuQ291bnQgPSBzc3QuY291bnQ7IHMuVW5pcXVlID0gc3N0LnVuaXF1ZUNvdW50O1xuXHRcdH1cblx0XHRyZXR1cm4gcztcblx0fVxuXG5cdFJFTFMuU1NUID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3NoYXJlZFN0cmluZ3NcIjtcblx0dmFyIHN0cmF5d3NyZWdleCA9IC9eXFxzfFxccyR8W1xcdFxcblxccl0vO1xuXHRmdW5jdGlvbiB3cml0ZV9zc3RfeG1sKHNzdCwgb3B0cykge1xuXHRcdGlmKCFvcHRzLmJvb2tTU1QpIHJldHVybiBcIlwiO1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVJdO1xuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc3N0JywgbnVsbCwge1xuXHRcdFx0eG1sbnM6IFhNTE5TLm1haW5bMF0sXG5cdFx0XHRjb3VudDogc3N0LkNvdW50LFxuXHRcdFx0dW5pcXVlQ291bnQ6IHNzdC5VbmlxdWVcblx0XHR9KSk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBzc3QubGVuZ3RoOyArK2kpIHsgaWYoc3N0W2ldID09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0dmFyIHMgPSBzc3RbaV07XG5cdFx0XHR2YXIgc2l0YWcgPSBcIjxzaT5cIjtcblx0XHRcdGlmKHMucikgc2l0YWcgKz0gcy5yO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHNpdGFnICs9IFwiPHRcIjtcblx0XHRcdFx0aWYoIXMudCkgcy50ID0gXCJcIjtcblx0XHRcdFx0aWYocy50Lm1hdGNoKHN0cmF5d3NyZWdleCkpIHNpdGFnICs9ICcgeG1sOnNwYWNlPVwicHJlc2VydmVcIic7XG5cdFx0XHRcdHNpdGFnICs9IFwiPlwiICsgZXNjYXBleG1sKHMudCkgKyBcIjwvdD5cIjtcblx0XHRcdH1cblx0XHRcdHNpdGFnICs9IFwiPC9zaT5cIjtcblx0XHRcdG9bby5sZW5ndGhdID0gKHNpdGFnKTtcblx0XHR9XG5cdFx0aWYoby5sZW5ndGg+Mil7IG9bby5sZW5ndGhdID0gKCc8L3NzdD4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblx0LyogW01TLVhMU0JdIDIuNC4yMTkgQnJ0QmVnaW5Tc3QgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0QmVnaW5Tc3QoZGF0YSwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIFtkYXRhLnJlYWRfc2hpZnQoNCksIGRhdGEucmVhZF9zaGlmdCg0KV07XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi4xLjcuNDUgU2hhcmVkIFN0cmluZ3MgKi9cblx0ZnVuY3Rpb24gcGFyc2Vfc3N0X2JpbihkYXRhLCBvcHRzKSB7XG5cdFx0dmFyIHMgPSAoW10pO1xuXHRcdHZhciBwYXNzID0gZmFsc2U7XG5cdFx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIGhvcHBlcl9zc3QodmFsLCBSX24sIFJUKSB7XG5cdFx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDAwOUY6IC8qICdCcnRCZWdpblNzdCcgKi9cblx0XHRcdFx0XHRzLkNvdW50ID0gdmFsWzBdOyBzLlVuaXF1ZSA9IHZhbFsxXTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDEzOiAvKiAnQnJ0U1NUSXRlbScgKi9cblx0XHRcdFx0XHRzLnB1c2godmFsKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMEEwOiAvKiAnQnJ0RW5kU3N0JyAqL1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdGNhc2UgMHgwMDIzOiAvKiAnQnJ0RlJUQmVnaW4nICovXG5cdFx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0XHRwYXNzID0gZmFsc2U7IGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYoUl9uLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoUl9uLmluZGV4T2YoXCJFbmRcIikgPiAwKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0XHRpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVCArIFwiIFwiICsgUl9uKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gcztcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luU3N0KHNzdCwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1Zig4KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIHNzdC5Db3VudCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBzc3QuVW5pcXVlKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdHZhciB3cml0ZV9CcnRTU1RJdGVtID0gd3JpdGVfUmljaFN0cjtcblxuXHRmdW5jdGlvbiB3cml0ZV9zc3RfYmluKHNzdCwgb3B0cykge1xuXHRcdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpblNzdFwiLCB3cml0ZV9CcnRCZWdpblNzdChzc3QpKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc3N0Lmxlbmd0aDsgKytpKSB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0U1NUSXRlbVwiLCB3cml0ZV9CcnRTU1RJdGVtKHNzdFtpXSkpO1xuXHRcdC8qIEZSVFNTVCAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRTc3RcIik7XG5cdFx0cmV0dXJuIGJhLmVuZCgpO1xuXHR9XG5cdGZ1bmN0aW9uIF9KUzJBTlNJKHN0cikge1xuXHRcdGlmKHR5cGVvZiBjcHRhYmxlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGNwdGFibGUudXRpbHMuZW5jb2RlKDEyNTIsIHN0cik7XG5cdFx0dmFyIG8gPSBbXSwgb28gPSBzdHIuc3BsaXQoXCJcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9vLmxlbmd0aDsgKytpKSBvW2ldID0gb29baV0uY2hhckNvZGVBdCgwKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMS40IFZlcnNpb24gKi9cblx0ZnVuY3Rpb24gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IHt9O1xuXHRcdG8uTWFqb3IgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0by5NaW5vciA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMS41IERhdGFTcGFjZVZlcnNpb25JbmZvICovXG5cdGZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZVZlcnNpb25JbmZvKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0ge307XG5cdFx0by5pZCA9IGJsb2IucmVhZF9zaGlmdCgwLCAnbHBwNCcpO1xuXHRcdG8uUiA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYiwgNCk7XG5cdFx0by5VID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0XHRvLlcgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLU9GRkNSWVBUT10gMi4xLjYuMSBEYXRhU3BhY2VNYXBFbnRyeSBTdHJ1Y3R1cmUgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRGF0YVNwYWNlTWFwRW50cnkoYmxvYikge1xuXHRcdHZhciBsZW4gPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIGVuZCA9IGJsb2IubCArIGxlbiAtIDQ7XG5cdFx0dmFyIG8gPSB7fTtcblx0XHR2YXIgY250ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBjb21wcyA9IFtdO1xuXHRcdHdoaWxlKGNudC0tID4gMCkge1xuXHRcdFx0LyogW01TLU9GRkNSWVBUT10gMi4xLjYuMiBEYXRhU3BhY2VSZWZlcmVuY2VDb21wb25lbnQgU3RydWN0dXJlICovXG5cdFx0XHR2YXIgcmMgPSB7fTtcblx0XHRcdHJjLnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRyYy52ID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0Jyk7XG5cdFx0XHRjb21wcy5wdXNoKHJjKTtcblx0XHR9XG5cdFx0by5uYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0Jyk7XG5cdFx0by5jb21wcyA9IGNvbXBzO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLU9GRkNSWVBUT10gMi4xLjYgRGF0YVNwYWNlTWFwICovXG5cdGZ1bmN0aW9uIHBhcnNlX0RhdGFTcGFjZU1hcChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdGJsb2IubCArPSA0OyAvLyBtdXN0IGJlIDB4OFxuXHRcdHZhciBjbnQgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0d2hpbGUoY250LS0gPiAwKSBvLnB1c2gocGFyc2VfRGF0YVNwYWNlTWFwRW50cnkoYmxvYikpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLU9GRkNSWVBUT10gMi4xLjcgRGF0YVNwYWNlRGVmaW5pdGlvbiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9EYXRhU3BhY2VEZWZpbml0aW9uKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0gW107XG5cdFx0YmxvYi5sICs9IDQ7IC8vIG11c3QgYmUgMHg4XG5cdFx0dmFyIGNudCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR3aGlsZShjbnQtLSA+IDApIG8ucHVzaChibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjEuOCBEYXRhU3BhY2VEZWZpbml0aW9uICovXG5cdGZ1bmN0aW9uIHBhcnNlX1RyYW5zZm9ybUluZm9IZWFkZXIoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSB7fTtcblx0XHR2YXIgbGVuID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciB0Z3QgPSBibG9iLmwgKyBsZW4gLSA0O1xuXHRcdGJsb2IubCArPSA0OyAvLyBtdXN0IGJlIDB4MVxuXHRcdG8uaWQgPSBibG9iLnJlYWRfc2hpZnQoMCwgJ2xwcDQnKTtcblx0XHQvLyB0Z3QgPT0gbGVuXG5cdFx0by5uYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDAsICdscHA0Jyk7XG5cdFx0by5SID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTtcblx0XHRvLlUgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IsIDQpO1xuXHRcdG8uVyA9IHBhcnNlX0NSWVBUT1ZlcnNpb24oYmxvYiwgNCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9QcmltYXJ5KGJsb2IsIGxlbmd0aCkge1xuXHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMi42IElSTURTVHJhbnNmb3JtSW5mbyAqL1xuXHRcdHZhciBoZHIgPSBwYXJzZV9UcmFuc2Zvcm1JbmZvSGVhZGVyKGJsb2IpO1xuXHRcdC8qIFtNUy1PRkZDUllQVE9dIDIuMS45IEVuY3J5cHRpb25UcmFuc2Zvcm1JbmZvICovXG5cdFx0aGRyLmVuYW1lID0gYmxvYi5yZWFkX3NoaWZ0KDAsICc4bHBwNCcpO1xuXHRcdGhkci5ibGtzeiA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRoZHIuY21vZGUgPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0aWYoYmxvYi5yZWFkX3NoaWZ0KDQpICE9IDB4MDQpIHRocm93IG5ldyBFcnJvcihcIkJhZCAhUHJpbWFyeSByZWNvcmRcIik7XG5cdFx0cmV0dXJuIGhkcjtcblx0fVxuXG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMy4yIEVuY3J5cHRpb24gSGVhZGVyICovXG5cdGZ1bmN0aW9uIHBhcnNlX0VuY3J5cHRpb25IZWFkZXIoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHRndCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgbyA9IHt9O1xuXHRcdG8uRmxhZ3MgPSAoYmxvYi5yZWFkX3NoaWZ0KDQpICYgMHgzRik7XG5cdFx0YmxvYi5sICs9IDQ7XG5cdFx0by5BbGdJRCA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgdmFsaWQgPSBmYWxzZTtcblx0XHRzd2l0Y2goby5BbGdJRCkge1xuXHRcdFx0Y2FzZSAweDY2MEU6IGNhc2UgMHg2NjBGOiBjYXNlIDB4NjYxMDogdmFsaWQgPSAoby5GbGFncyA9PSAweDI0KTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4NjgwMTogdmFsaWQgPSAoby5GbGFncyA9PSAweDA0KTsgYnJlYWs7XG5cdFx0XHRjYXNlIDA6IHZhbGlkID0gKG8uRmxhZ3MgPT0gMHgxMCB8fCBvLkZsYWdzID09IDB4MDQgfHwgby5GbGFncyA9PSAweDI0KTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyAnVW5yZWNvZ25pemVkIGVuY3J5cHRpb24gYWxnb3JpdGhtOiAnICsgby5BbGdJRDtcblx0XHR9XG5cdFx0aWYoIXZhbGlkKSB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uIEZsYWdzL0FsZ0lEIG1pc21hdGNoXCIpO1xuXHRcdG8uQWxnSURIYXNoID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdG8uS2V5U2l6ZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRvLlByb3ZpZGVyVHlwZSA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRibG9iLmwgKz0gODtcblx0XHRvLkNTUE5hbWUgPSBibG9iLnJlYWRfc2hpZnQoKHRndC1ibG9iLmwpPj4xLCAndXRmMTZsZScpLnNsaWNlKDAsLTEpO1xuXHRcdGJsb2IubCA9IHRndDtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMy4zIEVuY3J5cHRpb24gVmVyaWZpZXIgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRW5jcnlwdGlvblZlcmlmaWVyKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0ge307XG5cdFx0YmxvYi5sICs9IDQ7IC8vIFNhbHRTaXplIG11c3QgYmUgMHgxMFxuXHRcdG8uU2FsdCA9IGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwrMTYpOyBibG9iLmwgKz0gMTY7XG5cdFx0by5WZXJpZmllciA9IGJsb2Iuc2xpY2UoYmxvYi5sLCBibG9iLmwrMTYpOyBibG9iLmwgKz0gMTY7XG5cdFx0dmFyIHN6ID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdG8uVmVyaWZpZXJIYXNoID0gYmxvYi5zbGljZShibG9iLmwsIGJsb2IubCArIHN6KTsgYmxvYi5sICs9IHN6O1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLU9GRkNSWVBUT10gMi4zLjQuKiBFbmNyeXB0aW9uSW5mbyBTdHJlYW0gKi9cblx0ZnVuY3Rpb24gcGFyc2VfRW5jcnlwdGlvbkluZm8oYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHZlcnMgPSBwYXJzZV9DUllQVE9WZXJzaW9uKGJsb2IpO1xuXHRcdHN3aXRjaCh2ZXJzLk1pbm9yKSB7XG5cdFx0XHRjYXNlIDB4MDI6IHJldHVybiBwYXJzZV9FbmNJbmZvU3RkKGJsb2IsIHZlcnMpO1xuXHRcdFx0Y2FzZSAweDAzOiByZXR1cm4gcGFyc2VfRW5jSW5mb0V4dChibG9iLCB2ZXJzKTtcblx0XHRcdGNhc2UgMHgwNDogcmV0dXJuIHBhcnNlX0VuY0luZm9BZ2woYmxvYiwgdmVycyk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cGVkIGZpbGUgdW5yZWNvZ25pemVkIFZlcnNpb246IFwiICsgdmVycy5NaW5vcik7XG5cdH1cblxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNC41ICBFbmNyeXB0aW9uSW5mbyBTdHJlYW0gKFN0YW5kYXJkIEVuY3J5cHRpb24pICovXG5cdGZ1bmN0aW9uIHBhcnNlX0VuY0luZm9TdGQoYmxvYiwgdmVycykge1xuXHRcdHZhciBmbGFncyA9IGJsb2IucmVhZF9zaGlmdCg0KTtcblx0XHRpZigoZmxhZ3MgJiAweDNGKSAhPSAweDI0KSB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0aW9uSW5mbyBtaXNtYXRjaFwiKTtcblx0XHR2YXIgc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHRndCA9IGJsb2IubCArIHN6O1xuXHRcdHZhciBoZHIgPSBwYXJzZV9FbmNyeXB0aW9uSGVhZGVyKGJsb2IsIHN6KTtcblx0XHR2YXIgdmVyaWZpZXIgPSBwYXJzZV9FbmNyeXB0aW9uVmVyaWZpZXIoYmxvYiwgYmxvYi5sZW5ndGggLSBibG9iLmwpO1xuXHRcdHJldHVybiB7IHQ6XCJTdGRcIiwgaDpoZHIsIHY6dmVyaWZpZXIgfTtcblx0fVxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNC42ICBFbmNyeXB0aW9uSW5mbyBTdHJlYW0gKEV4dGVuc2libGUgRW5jcnlwdGlvbikgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRW5jSW5mb0V4dChibG9iLCB2ZXJzKSB7IHRocm93IG5ldyBFcnJvcihcIkZpbGUgaXMgcGFzc3dvcmQtcHJvdGVjdGVkOiBFQ01BLTM3NiBFeHRlbnNpYmxlXCIpOyB9XG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMy40LjEwIEVuY3J5cHRpb25JbmZvIFN0cmVhbSAoQWdpbGUgRW5jcnlwdGlvbikgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRW5jSW5mb0FnbChibG9iLCB2ZXJzKSB7IHRocm93IG5ldyBFcnJvcihcIkZpbGUgaXMgcGFzc3dvcmQtcHJvdGVjdGVkOiBFQ01BLTM3NiBBZ2lsZVwiKTsgfVxuXG5cblxuXG5cdC8qIFtNUy1PRkZDUllQVE9dIDIuMy41LjEgUkM0IENyeXB0b0FQSSBFbmNyeXB0aW9uIEhlYWRlciAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SQzRDcnlwdG9IZWFkZXIoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSB7fTtcblx0XHR2YXIgdmVycyA9IG8uRW5jcnlwdGlvblZlcnNpb25JbmZvID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTsgbGVuZ3RoIC09IDQ7XG5cdFx0aWYodmVycy5NaW5vciAhPSAyKSB0aHJvdyAndW5yZWNvZ25pemVkIG1pbm9yIHZlcnNpb24gY29kZTogJyArIHZlcnMuTWlub3I7XG5cdFx0aWYodmVycy5NYWpvciA+IDQgfHwgdmVycy5NYWpvciA8IDIpIHRocm93ICd1bnJlY29nbml6ZWQgbWFqb3IgdmVyc2lvbiBjb2RlOiAnICsgdmVycy5NYWpvcjtcblx0XHRvLkZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyBsZW5ndGggLT0gNDtcblx0XHR2YXIgc3ogPSBibG9iLnJlYWRfc2hpZnQoNCk7IGxlbmd0aCAtPSA0O1xuXHRcdG8uRW5jcnlwdGlvbkhlYWRlciA9IHBhcnNlX0VuY3J5cHRpb25IZWFkZXIoYmxvYiwgc3opOyBsZW5ndGggLT0gc3o7XG5cdFx0by5FbmNyeXB0aW9uVmVyaWZpZXIgPSBwYXJzZV9FbmNyeXB0aW9uVmVyaWZpZXIoYmxvYiwgbGVuZ3RoKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNi4xIFJDNCBFbmNyeXB0aW9uIEhlYWRlciAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SQzRIZWFkZXIoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIG8gPSB7fTtcblx0XHR2YXIgdmVycyA9IG8uRW5jcnlwdGlvblZlcnNpb25JbmZvID0gcGFyc2VfQ1JZUFRPVmVyc2lvbihibG9iLCA0KTsgbGVuZ3RoIC09IDQ7XG5cdFx0aWYodmVycy5NYWpvciAhPSAxIHx8IHZlcnMuTWlub3IgIT0gMSkgdGhyb3cgJ3VucmVjb2duaXplZCB2ZXJzaW9uIGNvZGUgJyArIHZlcnMuTWFqb3IgKyAnIDogJyArIHZlcnMuTWlub3I7XG5cdFx0by5TYWx0ID0gYmxvYi5yZWFkX3NoaWZ0KDE2KTtcblx0XHRvLkVuY3J5cHRlZFZlcmlmaWVyID0gYmxvYi5yZWFkX3NoaWZ0KDE2KTtcblx0XHRvLkVuY3J5cHRlZFZlcmlmaWVySGFzaCA9IGJsb2IucmVhZF9zaGlmdCgxNik7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNy4xIEJpbmFyeSBEb2N1bWVudCBQYXNzd29yZCBWZXJpZmllciBEZXJpdmF0aW9uICovXG5cdGZ1bmN0aW9uIGNyeXB0b19DcmVhdGVQYXNzd29yZFZlcmlmaWVyX01ldGhvZDEoUGFzc3dvcmQpIHtcblx0XHR2YXIgVmVyaWZpZXIgPSAweDAwMDAsIFBhc3N3b3JkQXJyYXk7XG5cdFx0dmFyIFBhc3N3b3JkRGVjb2RlZCA9IF9KUzJBTlNJKFBhc3N3b3JkKTtcblx0XHR2YXIgbGVuID0gUGFzc3dvcmREZWNvZGVkLmxlbmd0aCArIDEsIGksIFBhc3N3b3JkQnl0ZTtcblx0XHR2YXIgSW50ZXJtZWRpYXRlMSwgSW50ZXJtZWRpYXRlMiwgSW50ZXJtZWRpYXRlMztcblx0XHRQYXNzd29yZEFycmF5ID0gbmV3X3Jhd19idWYobGVuKTtcblx0XHRQYXNzd29yZEFycmF5WzBdID0gUGFzc3dvcmREZWNvZGVkLmxlbmd0aDtcblx0XHRmb3IoaSA9IDE7IGkgIT0gbGVuOyArK2kpIFBhc3N3b3JkQXJyYXlbaV0gPSBQYXNzd29yZERlY29kZWRbaS0xXTtcblx0XHRmb3IoaSA9IGxlbi0xOyBpID49IDA7IC0taSkge1xuXHRcdFx0UGFzc3dvcmRCeXRlID0gUGFzc3dvcmRBcnJheVtpXTtcblx0XHRcdEludGVybWVkaWF0ZTEgPSAoKFZlcmlmaWVyICYgMHg0MDAwKSA9PT0gMHgwMDAwKSA/IDAgOiAxO1xuXHRcdFx0SW50ZXJtZWRpYXRlMiA9IChWZXJpZmllciA8PCAxKSAmIDB4N0ZGRjtcblx0XHRcdEludGVybWVkaWF0ZTMgPSBJbnRlcm1lZGlhdGUxIHwgSW50ZXJtZWRpYXRlMjtcblx0XHRcdFZlcmlmaWVyID0gSW50ZXJtZWRpYXRlMyBeIFBhc3N3b3JkQnl0ZTtcblx0XHR9XG5cdFx0cmV0dXJuIFZlcmlmaWVyIF4gMHhDRTRCO1xuXHR9XG5cblx0LyogW01TLU9GRkNSWVBUT10gMi4zLjcuMiBCaW5hcnkgRG9jdW1lbnQgWE9SIEFycmF5IEluaXRpYWxpemF0aW9uICovXG5cdHZhciBjcnlwdG9fQ3JlYXRlWG9yQXJyYXlfTWV0aG9kMSA9IChmdW5jdGlvbigpIHtcblx0XHR2YXIgUGFkQXJyYXkgPSBbMHhCQiwgMHhGRiwgMHhGRiwgMHhCQSwgMHhGRiwgMHhGRiwgMHhCOSwgMHg4MCwgMHgwMCwgMHhCRSwgMHgwRiwgMHgwMCwgMHhCRiwgMHgwRiwgMHgwMF07XG5cdFx0dmFyIEluaXRpYWxDb2RlID0gWzB4RTFGMCwgMHgxRDBGLCAweENDOUMsIDB4ODRDMCwgMHgxMTBDLCAweDBFMTAsIDB4RjFDRSwgMHgzMTNFLCAweDE4NzIsIDB4RTEzOSwgMHhENDBGLCAweDg0RjksIDB4MjgwQywgMHhBOTZBLCAweDRFQzNdO1xuXHRcdHZhciBYb3JNYXRyaXggPSBbMHhBRUZDLCAweDRERDksIDB4OUJCMiwgMHgyNzQ1LCAweDRFOEEsIDB4OUQxNCwgMHgyQTA5LCAweDdCNjEsIDB4RjZDMiwgMHhGREE1LCAweEVCNkIsIDB4QzZGNywgMHg5RENGLCAweDJCQkYsIDB4NDU2MywgMHg4QUM2LCAweDA1QUQsIDB4MEI1QSwgMHgxNkI0LCAweDJENjgsIDB4NUFEMCwgMHgwMzc1LCAweDA2RUEsIDB4MERENCwgMHgxQkE4LCAweDM3NTAsIDB4NkVBMCwgMHhERDQwLCAweEQ4NDksIDB4QTBCMywgMHg1MTQ3LCAweEEyOEUsIDB4NTUzRCwgMHhBQTdBLCAweDQ0RDUsIDB4NkY0NSwgMHhERThBLCAweEFEMzUsIDB4NEE0QiwgMHg5NDk2LCAweDM5MEQsIDB4NzIxQSwgMHhFQjIzLCAweEM2NjcsIDB4OUNFRiwgMHgyOUZGLCAweDUzRkUsIDB4QTdGQywgMHg1RkQ5LCAweDQ3RDMsIDB4OEZBNiwgMHgwRjZELCAweDFFREEsIDB4M0RCNCwgMHg3QjY4LCAweEY2RDAsIDB4Qjg2MSwgMHg2MEUzLCAweEMxQzYsIDB4OTNBRCwgMHgzNzdCLCAweDZFRjYsIDB4RERFQywgMHg0NUEwLCAweDhCNDAsIDB4MDZBMSwgMHgwRDQyLCAweDFBODQsIDB4MzUwOCwgMHg2QTEwLCAweEFBNTEsIDB4NDQ4MywgMHg4OTA2LCAweDAyMkQsIDB4MDQ1QSwgMHgwOEI0LCAweDExNjgsIDB4NzZCNCwgMHhFRDY4LCAweENBRjEsIDB4ODVDMywgMHgxQkE3LCAweDM3NEUsIDB4NkU5QywgMHgzNzMwLCAweDZFNjAsIDB4RENDMCwgMHhBOUExLCAweDQzNjMsIDB4ODZDNiwgMHgxREFELCAweDMzMzEsIDB4NjY2MiwgMHhDQ0M0LCAweDg5QTksIDB4MDM3MywgMHgwNkU2LCAweDBEQ0MsIDB4MTAyMSwgMHgyMDQyLCAweDQwODQsIDB4ODEwOCwgMHgxMjMxLCAweDI0NjIsIDB4NDhDNF07XG5cdFx0dmFyIFJvciA9IGZ1bmN0aW9uKEJ5dGUpIHsgcmV0dXJuICgoQnl0ZS8yKSB8IChCeXRlKjEyOCkpICYgMHhGRjsgfTtcblx0XHR2YXIgWG9yUm9yID0gZnVuY3Rpb24oYnl0ZTEsIGJ5dGUyKSB7IHJldHVybiBSb3IoYnl0ZTEgXiBieXRlMik7IH07XG5cdFx0dmFyIENyZWF0ZVhvcktleV9NZXRob2QxID0gZnVuY3Rpb24oUGFzc3dvcmQpIHtcblx0XHRcdHZhciBYb3JLZXkgPSBJbml0aWFsQ29kZVtQYXNzd29yZC5sZW5ndGggLSAxXTtcblx0XHRcdHZhciBDdXJyZW50RWxlbWVudCA9IDB4Njg7XG5cdFx0XHRmb3IodmFyIGkgPSBQYXNzd29yZC5sZW5ndGgtMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdFx0dmFyIENoYXIgPSBQYXNzd29yZFtpXTtcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiAhPSA3OyArK2opIHtcblx0XHRcdFx0XHRpZihDaGFyICYgMHg0MCkgWG9yS2V5IF49IFhvck1hdHJpeFtDdXJyZW50RWxlbWVudF07XG5cdFx0XHRcdFx0Q2hhciAqPSAyOyAtLUN1cnJlbnRFbGVtZW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gWG9yS2V5O1xuXHRcdH07XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHBhc3N3b3JkKSB7XG5cdFx0XHR2YXIgUGFzc3dvcmQgPSBfSlMyQU5TSShwYXNzd29yZCk7XG5cdFx0XHR2YXIgWG9yS2V5ID0gQ3JlYXRlWG9yS2V5X01ldGhvZDEoUGFzc3dvcmQpO1xuXHRcdFx0dmFyIEluZGV4ID0gUGFzc3dvcmQubGVuZ3RoO1xuXHRcdFx0dmFyIE9iZnVzY2F0aW9uQXJyYXkgPSBuZXdfcmF3X2J1ZigxNik7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpICE9IDE2OyArK2kpIE9iZnVzY2F0aW9uQXJyYXlbaV0gPSAweDAwO1xuXHRcdFx0dmFyIFRlbXAsIFBhc3N3b3JkTGFzdENoYXIsIFBhZEluZGV4O1xuXHRcdFx0aWYoKEluZGV4ICYgMSkgPT09IDEpIHtcblx0XHRcdFx0VGVtcCA9IFhvcktleSA+PiA4O1xuXHRcdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYWRBcnJheVswXSwgVGVtcCk7XG5cdFx0XHRcdC0tSW5kZXg7XG5cdFx0XHRcdFRlbXAgPSBYb3JLZXkgJiAweEZGO1xuXHRcdFx0XHRQYXNzd29yZExhc3RDaGFyID0gUGFzc3dvcmRbUGFzc3dvcmQubGVuZ3RoIC0gMV07XG5cdFx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkTGFzdENoYXIsIFRlbXApO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUoSW5kZXggPiAwKSB7XG5cdFx0XHRcdC0tSW5kZXg7XG5cdFx0XHRcdFRlbXAgPSBYb3JLZXkgPj4gODtcblx0XHRcdFx0T2JmdXNjYXRpb25BcnJheVtJbmRleF0gPSBYb3JSb3IoUGFzc3dvcmRbSW5kZXhdLCBUZW1wKTtcblx0XHRcdFx0LS1JbmRleDtcblx0XHRcdFx0VGVtcCA9IFhvcktleSAmIDB4RkY7XG5cdFx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhc3N3b3JkW0luZGV4XSwgVGVtcCk7XG5cdFx0XHR9XG5cdFx0XHRJbmRleCA9IDE1O1xuXHRcdFx0UGFkSW5kZXggPSAxNSAtIFBhc3N3b3JkLmxlbmd0aDtcblx0XHRcdHdoaWxlKFBhZEluZGV4ID4gMCkge1xuXHRcdFx0XHRUZW1wID0gWG9yS2V5ID4+IDg7XG5cdFx0XHRcdE9iZnVzY2F0aW9uQXJyYXlbSW5kZXhdID0gWG9yUm9yKFBhZEFycmF5W1BhZEluZGV4XSwgVGVtcCk7XG5cdFx0XHRcdC0tSW5kZXg7XG5cdFx0XHRcdC0tUGFkSW5kZXg7XG5cdFx0XHRcdFRlbXAgPSBYb3JLZXkgJiAweEZGO1xuXHRcdFx0XHRPYmZ1c2NhdGlvbkFycmF5W0luZGV4XSA9IFhvclJvcihQYXNzd29yZFtJbmRleF0sIFRlbXApO1xuXHRcdFx0XHQtLUluZGV4O1xuXHRcdFx0XHQtLVBhZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE9iZnVzY2F0aW9uQXJyYXk7XG5cdFx0fTtcblx0fSkoKTtcblxuXHQvKiBbTVMtT0ZGQ1JZUFRPXSAyLjMuNy4zIEJpbmFyeSBEb2N1bWVudCBYT1IgRGF0YSBUcmFuc2Zvcm1hdGlvbiBNZXRob2QgMSAqL1xuXHR2YXIgY3J5cHRvX0RlY3J5cHREYXRhX01ldGhvZDEgPSBmdW5jdGlvbihwYXNzd29yZCwgRGF0YSwgWG9yQXJyYXlJbmRleCwgWG9yQXJyYXksIE8pIHtcblx0XHQvKiBJZiBYb3JBcnJheSBpcyBzZXQsIHVzZSBpdDsgaWYgTyBpcyBub3Qgc2V0LCBtYWtlIGNoYW5nZXMgaW4tcGxhY2UgKi9cblx0XHRpZighTykgTyA9IERhdGE7XG5cdFx0aWYoIVhvckFycmF5KSBYb3JBcnJheSA9IGNyeXB0b19DcmVhdGVYb3JBcnJheV9NZXRob2QxKHBhc3N3b3JkKTtcblx0XHR2YXIgSW5kZXgsIFZhbHVlO1xuXHRcdGZvcihJbmRleCA9IDA7IEluZGV4ICE9IERhdGEubGVuZ3RoOyArK0luZGV4KSB7XG5cdFx0XHRWYWx1ZSA9IERhdGFbSW5kZXhdO1xuXHRcdFx0VmFsdWUgXj0gWG9yQXJyYXlbWG9yQXJyYXlJbmRleF07XG5cdFx0XHRWYWx1ZSA9ICgoVmFsdWU+PjUpIHwgKFZhbHVlPDwzKSkgJiAweEZGO1xuXHRcdFx0T1tJbmRleF0gPSBWYWx1ZTtcblx0XHRcdCsrWG9yQXJyYXlJbmRleDtcblx0XHR9XG5cdFx0cmV0dXJuIFtPLCBYb3JBcnJheUluZGV4LCBYb3JBcnJheV07XG5cdH07XG5cblx0dmFyIGNyeXB0b19NYWtlWG9yRGVjcnlwdG9yID0gZnVuY3Rpb24ocGFzc3dvcmQpIHtcblx0XHR2YXIgWG9yQXJyYXlJbmRleCA9IDAsIFhvckFycmF5ID0gY3J5cHRvX0NyZWF0ZVhvckFycmF5X01ldGhvZDEocGFzc3dvcmQpO1xuXHRcdHJldHVybiBmdW5jdGlvbihEYXRhKSB7XG5cdFx0XHR2YXIgTyA9IGNyeXB0b19EZWNyeXB0RGF0YV9NZXRob2QxKFwiXCIsIERhdGEsIFhvckFycmF5SW5kZXgsIFhvckFycmF5KTtcblx0XHRcdFhvckFycmF5SW5kZXggPSBPWzFdO1xuXHRcdFx0cmV0dXJuIE9bMF07XG5cdFx0fTtcblx0fTtcblxuXHQvKiAyLjUuMzQzICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hPUk9iZnVzY2F0aW9uKGJsb2IsIGxlbmd0aCwgb3B0cywgb3V0KSB7XG5cdFx0dmFyIG8gPSAoeyBrZXk6IHBhcnNldWludDE2KGJsb2IpLCB2ZXJpZmljYXRpb25CeXRlczogcGFyc2V1aW50MTYoYmxvYikgfSk7XG5cdFx0aWYob3B0cy5wYXNzd29yZCkgby52ZXJpZmllciA9IGNyeXB0b19DcmVhdGVQYXNzd29yZFZlcmlmaWVyX01ldGhvZDEob3B0cy5wYXNzd29yZCk7XG5cdFx0b3V0LnZhbGlkID0gby52ZXJpZmljYXRpb25CeXRlcyA9PT0gby52ZXJpZmllcjtcblx0XHRpZihvdXQudmFsaWQpIG91dC5pbnNpdHVfZGVjcnlwdCA9IGNyeXB0b19NYWtlWG9yRGVjcnlwdG9yKG9wdHMucGFzc3dvcmQpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjExNyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9GaWxlUGFzc0hlYWRlcihibG9iLCBsZW5ndGgsIG9vKSB7XG5cdFx0dmFyIG8gPSBvbyB8fCB7fTsgby5JbmZvID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyBibG9iLmwgLT0gMjtcblx0XHRpZihvLkluZm8gPT09IDEpIG8uRGF0YSA9IHBhcnNlX1JDNEhlYWRlcihibG9iLCBsZW5ndGgpO1xuXHRcdGVsc2Ugby5EYXRhID0gcGFyc2VfUkM0Q3J5cHRvSGVhZGVyKGJsb2IsIGxlbmd0aCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblx0ZnVuY3Rpb24gcGFyc2VfRmlsZVBhc3MoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSB7IFR5cGU6IGJsb2IucmVhZF9zaGlmdCgyKSB9OyAvKiB3RW5jcnlwdGlvblR5cGUgKi9cblx0XHRpZihvLlR5cGUpIHBhcnNlX0ZpbGVQYXNzSGVhZGVyKGJsb2IsIGxlbmd0aC0yLCBvKTtcblx0XHRlbHNlIHBhcnNlX1hPUk9iZnVzY2F0aW9uKGJsb2IsIGxlbmd0aC0yLCBvcHRzLCBvKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cblx0ZnVuY3Rpb24gaGV4MlJHQihoKSB7XG5cdFx0dmFyIG8gPSBoLnN1YnN0cihoWzBdPT09XCIjXCI/MTowLDYpO1xuXHRcdHJldHVybiBbcGFyc2VJbnQoby5zdWJzdHIoMCwyKSwxNikscGFyc2VJbnQoby5zdWJzdHIoMiwyKSwxNikscGFyc2VJbnQoby5zdWJzdHIoNCwyKSwxNildO1xuXHR9XG5cdGZ1bmN0aW9uIHJnYjJIZXgocmdiKSB7XG5cdFx0Zm9yKHZhciBpPTAsbz0xOyBpIT0zOyArK2kpIG8gPSBvKjI1NiArIChyZ2JbaV0+MjU1PzI1NTpyZ2JbaV08MD8wOnJnYltpXSk7XG5cdFx0cmV0dXJuIG8udG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkuc3Vic3RyKDEpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmdiMkhTTChyZ2IpIHtcblx0XHR2YXIgUiA9IHJnYlswXS8yNTUsIEcgPSByZ2JbMV0vMjU1LCBCPXJnYlsyXS8yNTU7XG5cdFx0dmFyIE0gPSBNYXRoLm1heChSLCBHLCBCKSwgbSA9IE1hdGgubWluKFIsIEcsIEIpLCBDID0gTSAtIG07XG5cdFx0aWYoQyA9PT0gMCkgcmV0dXJuIFswLCAwLCBSXTtcblxuXHRcdHZhciBINiA9IDAsIFMgPSAwLCBMMiA9IChNICsgbSk7XG5cdFx0UyA9IEMgLyAoTDIgPiAxID8gMiAtIEwyIDogTDIpO1xuXHRcdHN3aXRjaChNKXtcblx0XHRcdGNhc2UgUjogSDYgPSAoKEcgLSBCKSAvIEMgKyA2KSU2OyBicmVhaztcblx0XHRcdGNhc2UgRzogSDYgPSAoKEIgLSBSKSAvIEMgKyAyKTsgYnJlYWs7XG5cdFx0XHRjYXNlIEI6IEg2ID0gKChSIC0gRykgLyBDICsgNCk7IGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gW0g2IC8gNiwgUywgTDIgLyAyXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGhzbDJSR0IoaHNsKXtcblx0XHR2YXIgSCA9IGhzbFswXSwgUyA9IGhzbFsxXSwgTCA9IGhzbFsyXTtcblx0XHR2YXIgQyA9IFMgKiAyICogKEwgPCAwLjUgPyBMIDogMSAtIEwpLCBtID0gTCAtIEMvMjtcblx0XHR2YXIgcmdiID0gW20sbSxtXSwgaDYgPSA2Kkg7XG5cblx0XHR2YXIgWDtcblx0XHRpZihTICE9PSAwKSBzd2l0Y2goaDZ8MCkge1xuXHRcdFx0Y2FzZSAwOiBjYXNlIDY6IFggPSBDICogaDY7IHJnYlswXSArPSBDOyByZ2JbMV0gKz0gWDsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IFggPSBDICogKDIgLSBoNik7ICAgcmdiWzBdICs9IFg7IHJnYlsxXSArPSBDOyBicmVhaztcblx0XHRcdGNhc2UgMjogWCA9IEMgKiAoaDYgLSAyKTsgICByZ2JbMV0gKz0gQzsgcmdiWzJdICs9IFg7IGJyZWFrO1xuXHRcdFx0Y2FzZSAzOiBYID0gQyAqICg0IC0gaDYpOyAgIHJnYlsxXSArPSBYOyByZ2JbMl0gKz0gQzsgYnJlYWs7XG5cdFx0XHRjYXNlIDQ6IFggPSBDICogKGg2IC0gNCk7ICAgcmdiWzJdICs9IEM7IHJnYlswXSArPSBYOyBicmVhaztcblx0XHRcdGNhc2UgNTogWCA9IEMgKiAoNiAtIGg2KTsgICByZ2JbMl0gKz0gWDsgcmdiWzBdICs9IEM7IGJyZWFrO1xuXHRcdH1cblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IDM7ICsraSkgcmdiW2ldID0gTWF0aC5yb3VuZChyZ2JbaV0qMjU1KTtcblx0XHRyZXR1cm4gcmdiO1xuXHR9XG5cblx0LyogMTguOC4zIGJnQ29sb3IgdGludCBhbGdvcml0aG0gKi9cblx0ZnVuY3Rpb24gcmdiX3RpbnQoaGV4LCB0aW50KSB7XG5cdFx0aWYodGludCA9PT0gMCkgcmV0dXJuIGhleDtcblx0XHR2YXIgaHNsID0gcmdiMkhTTChoZXgyUkdCKGhleCkpO1xuXHRcdGlmICh0aW50IDwgMCkgaHNsWzJdID0gaHNsWzJdICogKDEgKyB0aW50KTtcblx0XHRlbHNlIGhzbFsyXSA9IDEgLSAoMSAtIGhzbFsyXSkgKiAoMSAtIHRpbnQpO1xuXHRcdHJldHVybiByZ2IySGV4KGhzbDJSR0IoaHNsKSk7XG5cdH1cblxuXHQvKiAxOC4zLjEuMTMgd2lkdGggY2FsY3VsYXRpb25zICovXG5cdC8qIFtNUy1PSTI5NTAwXSAyLjEuNTk1IENvbHVtbiBXaWR0aCAmIEZvcm1hdHRpbmcgKi9cblx0dmFyIERFRl9NRFcgPSA2LCBNQVhfTURXID0gMTUsIE1JTl9NRFcgPSAxLCBNRFcgPSBERUZfTURXO1xuXHRmdW5jdGlvbiB3aWR0aDJweCh3aWR0aCkgeyByZXR1cm4gTWF0aC5mbG9vcigoIHdpZHRoICsgKE1hdGgucm91bmQoMTI4L01EVykpLzI1NiApKiBNRFcgKTsgfVxuXHRmdW5jdGlvbiBweDJjaGFyKHB4KSB7IHJldHVybiAoTWF0aC5mbG9vcigocHggLSA1KS9NRFcgKiAxMDAgKyAwLjUpKS8xMDA7IH1cblx0ZnVuY3Rpb24gY2hhcjJ3aWR0aChjaHIpIHsgcmV0dXJuIChNYXRoLnJvdW5kKChjaHIgKiBNRFcgKyA1KS9NRFcqMjU2KSkvMjU2OyB9XG5cdGZ1bmN0aW9uIHB4MmNoYXJfKHB4KSB7IHJldHVybiAoKChweCAtIDUpL01EVyAqIDEwMCArIDAuNSkpLzEwMDsgfVxuXHRmdW5jdGlvbiBjaGFyMndpZHRoXyhjaHIpIHsgcmV0dXJuICgoKGNociAqIE1EVyArIDUpL01EVyoyNTYpKS8yNTY7IH1cblx0ZnVuY3Rpb24gY3ljbGVfd2lkdGgoY29sbHcpIHsgcmV0dXJuIGNoYXIyd2lkdGgocHgyY2hhcih3aWR0aDJweChjb2xsdykpKTsgfVxuXHQvKiBYTFNYL1hMU0IvWExTIHNwZWNpZnkgd2lkdGggaW4gdW5pdHMgb2YgTURXICovXG5cdGZ1bmN0aW9uIGZpbmRfbWR3X2NvbHcoY29sbHcpIHtcblx0XHR2YXIgZGVsdGEgPSBJbmZpbml0eSwgX01EVyA9IE1JTl9NRFc7XG5cdFx0Zm9yKE1EVz1NSU5fTURXOyBNRFc8TUFYX01EVzsgKytNRFcpIGlmKE1hdGguYWJzKGNvbGx3IC0gY3ljbGVfd2lkdGgoY29sbHcpKSA8PSBkZWx0YSkgeyBkZWx0YSA9IE1hdGguYWJzKGNvbGx3IC0gY3ljbGVfd2lkdGgoY29sbHcpKTsgX01EVyA9IE1EVzsgfVxuXHRcdE1EVyA9IF9NRFc7XG5cdH1cblx0LyogWExNTCBzcGVjaWZpZXMgd2lkdGggaW4gdGVybXMgb2YgcGl4ZWxzICovXG5cdGZ1bmN0aW9uIGZpbmRfbWR3X3dweCh3cHgpIHtcblx0XHR2YXIgZGVsdGEgPSBJbmZpbml0eSwgZ3Vlc3MgPSAwLCBfTURXID0gTUlOX01EVztcblx0XHRmb3IoTURXPU1JTl9NRFc7IE1EVzxNQVhfTURXOyArK01EVykge1xuXHRcdFx0Z3Vlc3MgPSBjaGFyMndpZHRoXyhweDJjaGFyXyh3cHgpKSoyNTY7XG5cdFx0XHRndWVzcyA9IChndWVzcykgJSAxO1xuXHRcdFx0aWYoZ3Vlc3MgPiAwLjUpIGd1ZXNzLS07XG5cdFx0XHRpZihNYXRoLmFicyhndWVzcykgPCBkZWx0YSkgeyBkZWx0YSA9IE1hdGguYWJzKGd1ZXNzKTsgX01EVyA9IE1EVzsgfVxuXHRcdH1cblx0XHRNRFcgPSBfTURXO1xuXHR9XG5cblx0ZnVuY3Rpb24gcHJvY2Vzc19jb2woY29sbCkge1xuXHRcdGlmKGNvbGwud2lkdGgpIHtcblx0XHRcdGNvbGwud3B4ID0gd2lkdGgycHgoY29sbC53aWR0aCk7XG5cdFx0XHRjb2xsLndjaCA9IHB4MmNoYXIoY29sbC53cHgpO1xuXHRcdFx0Y29sbC5NRFcgPSBNRFc7XG5cdFx0fSBlbHNlIGlmKGNvbGwud3B4KSB7XG5cdFx0XHRjb2xsLndjaCA9IHB4MmNoYXIoY29sbC53cHgpO1xuXHRcdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdFx0Y29sbC5NRFcgPSBNRFc7XG5cdFx0fSBlbHNlIGlmKHR5cGVvZiBjb2xsLndjaCA9PSAnbnVtYmVyJykge1xuXHRcdFx0Y29sbC53aWR0aCA9IGNoYXIyd2lkdGgoY29sbC53Y2gpO1xuXHRcdFx0Y29sbC53cHggPSB3aWR0aDJweChjb2xsLndpZHRoKTtcblx0XHRcdGNvbGwuTURXID0gTURXO1xuXHRcdH1cblx0XHRpZihjb2xsLmN1c3RvbVdpZHRoKSBkZWxldGUgY29sbC5jdXN0b21XaWR0aDtcblx0fVxuXG5cdHZhciBERUZfUFBJID0gOTYsIFBQSSA9IERFRl9QUEk7XG5cdGZ1bmN0aW9uIHB4MnB0KHB4KSB7IHJldHVybiBweCAqIDk2IC8gUFBJOyB9XG5cdGZ1bmN0aW9uIHB0MnB4KHB0KSB7IHJldHVybiBwdCAqIFBQSSAvIDk2OyB9XG5cblx0LyogW01TLUVYU1BYTUwzXSAyLjQuNTQgU1RfZW5tUGF0dGVybiAqL1xuXHR2YXIgWExNTFBhdHRlcm5UeXBlTWFwID0ge1xuXHRcdFwiTm9uZVwiOiBcIm5vbmVcIixcblx0XHRcIlNvbGlkXCI6IFwic29saWRcIixcblx0XHRcIkdyYXk1MFwiOiBcIm1lZGl1bUdyYXlcIixcblx0XHRcIkdyYXk3NVwiOiBcImRhcmtHcmF5XCIsXG5cdFx0XCJHcmF5MjVcIjogXCJsaWdodEdyYXlcIixcblx0XHRcIkhvcnpTdHJpcGVcIjogXCJkYXJrSG9yaXpvbnRhbFwiLFxuXHRcdFwiVmVydFN0cmlwZVwiOiBcImRhcmtWZXJ0aWNhbFwiLFxuXHRcdFwiUmV2ZXJzZURpYWdTdHJpcGVcIjogXCJkYXJrRG93blwiLFxuXHRcdFwiRGlhZ1N0cmlwZVwiOiBcImRhcmtVcFwiLFxuXHRcdFwiRGlhZ0Nyb3NzXCI6IFwiZGFya0dyaWRcIixcblx0XHRcIlRoaWNrRGlhZ0Nyb3NzXCI6IFwiZGFya1RyZWxsaXNcIixcblx0XHRcIlRoaW5Ib3J6U3RyaXBlXCI6IFwibGlnaHRIb3Jpem9udGFsXCIsXG5cdFx0XCJUaGluVmVydFN0cmlwZVwiOiBcImxpZ2h0VmVydGljYWxcIixcblx0XHRcIlRoaW5SZXZlcnNlRGlhZ1N0cmlwZVwiOiBcImxpZ2h0RG93blwiLFxuXHRcdFwiVGhpbkhvcnpDcm9zc1wiOiBcImxpZ2h0R3JpZFwiXG5cdH07XG5cblx0LyogMTguOC41IGJvcmRlcnMgQ1RfQm9yZGVycyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9ib3JkZXJzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKSB7XG5cdFx0c3R5bGVzLkJvcmRlcnMgPSBbXTtcblx0XHR2YXIgYm9yZGVyID0ge30sIHN1Yl9ib3JkZXIgPSB7fTtcblx0XHR0WzBdLm1hdGNoKHRhZ3JlZ2V4KS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0XHRzd2l0Y2ggKHlbMF0pIHtcblx0XHRcdFx0Y2FzZSAnPGJvcmRlcnMnOiBjYXNlICc8Ym9yZGVycz4nOiBjYXNlICc8L2JvcmRlcnM+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC40IGJvcmRlciBDVF9Cb3JkZXIgKi9cblx0XHRcdFx0Y2FzZSAnPGJvcmRlcic6IGNhc2UgJzxib3JkZXI+Jzpcblx0XHRcdFx0XHRib3JkZXIgPSB7fTtcblx0XHRcdFx0XHRpZiAoeS5kaWFnb25hbFVwKSB7IGJvcmRlci5kaWFnb25hbFVwID0geS5kaWFnb25hbFVwOyB9XG5cdFx0XHRcdFx0aWYgKHkuZGlhZ29uYWxEb3duKSB7IGJvcmRlci5kaWFnb25hbERvd24gPSB5LmRpYWdvbmFsRG93bjsgfVxuXHRcdFx0XHRcdHN0eWxlcy5Cb3JkZXJzLnB1c2goYm9yZGVyKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9ib3JkZXI+JzogYnJlYWs7XG5cblx0XHRcdFx0Lyogbm90ZTogbm90IGluIHNwZWMsIGFwcGVhcnMgdG8gYmUgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdFx0Y2FzZSAnPGxlZnQnOiBjYXNlICc8bGVmdC8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvbGVmdD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiBub3RlOiBub3QgaW4gc3BlYywgYXBwZWFycyB0byBiZSBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0XHRjYXNlICc8cmlnaHQnOiBjYXNlICc8cmlnaHQvPic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L3JpZ2h0Pic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguNDMgdG9wIENUX0JvcmRlclByICovXG5cdFx0XHRcdGNhc2UgJzx0b3AnOiBjYXNlICc8dG9wLz4nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC90b3A+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC42IGJvdHRvbSBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0XHRjYXNlICc8Ym90dG9tJzogY2FzZSAnPGJvdHRvbS8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvYm90dG9tPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMTMgZGlhZ29uYWwgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdFx0Y2FzZSAnPGRpYWdvbmFsJzogY2FzZSAnPGRpYWdvbmFsLz4nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9kaWFnb25hbD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjI1IGhvcml6b250YWwgQ1RfQm9yZGVyUHIgKi9cblx0XHRcdFx0Y2FzZSAnPGhvcml6b250YWwnOiBjYXNlICc8aG9yaXpvbnRhbC8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvaG9yaXpvbnRhbD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjQ0IHZlcnRpY2FsIENUX0JvcmRlclByICovXG5cdFx0XHRcdGNhc2UgJzx2ZXJ0aWNhbCc6IGNhc2UgJzx2ZXJ0aWNhbC8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvdmVydGljYWw+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4zNyBzdGFydCBDVF9Cb3JkZXJQciAqL1xuXHRcdFx0XHRjYXNlICc8c3RhcnQnOiBjYXNlICc8c3RhcnQvPic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L3N0YXJ0Pic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMTYgZW5kIENUX0JvcmRlclByICovXG5cdFx0XHRcdGNhc2UgJzxlbmQnOiBjYXNlICc8ZW5kLz4nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9lbmQ+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4/IGNvbG9yIENUX0NvbG9yICovXG5cdFx0XHRcdGNhc2UgJzxjb2xvcic6IGNhc2UgJzxjb2xvci8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvY29sb3I+JzogYnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIGJvcmRlcnMnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8qIDE4LjguMjEgZmlsbHMgQ1RfRmlsbHMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfZmlsbHModCwgc3R5bGVzLCB0aGVtZXMsIG9wdHMpIHtcblx0XHRzdHlsZXMuRmlsbHMgPSBbXTtcblx0XHR2YXIgZmlsbCA9IHt9O1xuXHRcdHRbMF0ubWF0Y2godGFncmVnZXgpLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRcdHN3aXRjaCh5WzBdKSB7XG5cdFx0XHRcdGNhc2UgJzxmaWxscyc6IGNhc2UgJzxmaWxscz4nOiBjYXNlICc8L2ZpbGxzPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMjAgZmlsbCBDVF9GaWxsICovXG5cdFx0XHRcdGNhc2UgJzxmaWxsPic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L2ZpbGw+Jzogc3R5bGVzLkZpbGxzLnB1c2goZmlsbCk7IGZpbGwgPSB7fTsgYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4yNCBncmFkaWVudEZpbGwgQ1RfR3JhZGllbnRGaWxsICovXG5cdFx0XHRcdGNhc2UgJzxncmFkaWVudEZpbGw+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvZ3JhZGllbnRGaWxsPic6IHN0eWxlcy5GaWxscy5wdXNoKGZpbGwpOyBmaWxsID0ge307IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMzIgcGF0dGVybkZpbGwgQ1RfUGF0dGVybkZpbGwgKi9cblx0XHRcdFx0Y2FzZSAnPHBhdHRlcm5GaWxsJzogY2FzZSAnPHBhdHRlcm5GaWxsPic6XG5cdFx0XHRcdFx0aWYoeS5wYXR0ZXJuVHlwZSkgZmlsbC5wYXR0ZXJuVHlwZSA9IHkucGF0dGVyblR5cGU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxwYXR0ZXJuRmlsbC8+JzogY2FzZSAnPC9wYXR0ZXJuRmlsbD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjMgYmdDb2xvciBDVF9Db2xvciAqL1xuXHRcdFx0XHRjYXNlICc8YmdDb2xvcic6XG5cdFx0XHRcdFx0aWYoIWZpbGwuYmdDb2xvcikgZmlsbC5iZ0NvbG9yID0ge307XG5cdFx0XHRcdFx0aWYoeS5pbmRleGVkKSBmaWxsLmJnQ29sb3IuaW5kZXhlZCA9IHBhcnNlSW50KHkuaW5kZXhlZCwgMTApO1xuXHRcdFx0XHRcdGlmKHkudGhlbWUpIGZpbGwuYmdDb2xvci50aGVtZSA9IHBhcnNlSW50KHkudGhlbWUsIDEwKTtcblx0XHRcdFx0XHRpZih5LnRpbnQpIGZpbGwuYmdDb2xvci50aW50ID0gcGFyc2VGbG9hdCh5LnRpbnQpO1xuXHRcdFx0XHRcdC8qIEV4Y2VsIHVzZXMgQVJHQiBzdHJpbmdzICovXG5cdFx0XHRcdFx0aWYoeS5yZ2IpIGZpbGwuYmdDb2xvci5yZ2IgPSB5LnJnYi5zbGljZSgtNik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxiZ0NvbG9yLz4nOiBjYXNlICc8L2JnQ29sb3I+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4xOSBmZ0NvbG9yIENUX0NvbG9yICovXG5cdFx0XHRcdGNhc2UgJzxmZ0NvbG9yJzpcblx0XHRcdFx0XHRpZighZmlsbC5mZ0NvbG9yKSBmaWxsLmZnQ29sb3IgPSB7fTtcblx0XHRcdFx0XHRpZih5LnRoZW1lKSBmaWxsLmZnQ29sb3IudGhlbWUgPSBwYXJzZUludCh5LnRoZW1lLCAxMCk7XG5cdFx0XHRcdFx0aWYoeS50aW50KSBmaWxsLmZnQ29sb3IudGludCA9IHBhcnNlRmxvYXQoeS50aW50KTtcblx0XHRcdFx0XHQvKiBFeGNlbCB1c2VzIEFSR0Igc3RyaW5ncyAqL1xuXHRcdFx0XHRcdGlmKHkucmdiKSBmaWxsLmZnQ29sb3IucmdiID0geS5yZ2Iuc2xpY2UoLTYpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8ZmdDb2xvci8+JzogY2FzZSAnPC9mZ0NvbG9yPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMzggc3RvcCBDVF9HcmFkaWVudFN0b3AgKi9cblx0XHRcdFx0Y2FzZSAnPHN0b3AnOiBjYXNlICc8c3RvcC8+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvc3RvcD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44Lj8gY29sb3IgQ1RfQ29sb3IgKi9cblx0XHRcdFx0Y2FzZSAnPGNvbG9yJzogY2FzZSAnPGNvbG9yLz4nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9jb2xvcj4nOiBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gZmlsbHMnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8qIDE4LjguMjMgZm9udHMgQ1RfRm9udHMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfZm9udHModCwgc3R5bGVzLCB0aGVtZXMsIG9wdHMpIHtcblx0XHRzdHlsZXMuRm9udHMgPSBbXTtcblx0XHR2YXIgZm9udCA9IHt9O1xuXHRcdHRbMF0ubWF0Y2godGFncmVnZXgpLmZvckVhY2goZnVuY3Rpb24oeCkge1xuXHRcdFx0dmFyIHkgPSBwYXJzZXhtbHRhZyh4KTtcblx0XHRcdHN3aXRjaCAoeVswXSkge1xuXHRcdFx0XHRjYXNlICc8Zm9udHMnOiBjYXNlICc8Zm9udHM+JzogY2FzZSAnPC9mb250cz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjIyIGZvbnQgQ1RfRm9udCAqL1xuXHRcdFx0XHRjYXNlICc8Zm9udCc6IGNhc2UgJzxmb250Pic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L2ZvbnQ+JzogY2FzZSAnPGZvbnQvPic6XG5cdFx0XHRcdFx0c3R5bGVzLkZvbnRzLnB1c2goZm9udCk7XG5cdFx0XHRcdFx0Zm9udCA9IHt9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMjkgbmFtZSBDVF9Gb250TmFtZSAqL1xuXHRcdFx0XHRjYXNlICc8bmFtZSc6IGlmKHkudmFsKSBmb250Lm5hbWUgPSB5LnZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxuYW1lLz4nOiBjYXNlICc8L25hbWU+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4yICBiIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8Yic6IGZvbnQuYm9sZCA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8Yi8+JzogZm9udC5ib2xkID0gMTsgYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4yNiBpIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8aSc6IGZvbnQuaXRhbGljID0geS52YWwgPyBwYXJzZXhtbGJvb2woeS52YWwpIDogMTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxpLz4nOiBmb250Lml0YWxpYyA9IDE7IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjQuMTMgdSBDVF9VbmRlcmxpbmVQcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8dSc6XG5cdFx0XHRcdFx0c3dpdGNoKHkudmFsKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwibm9uZVwiOiBmb250LnVuZGVybGluZSA9IDB4MDA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInNpbmdsZVwiOiBmb250LnVuZGVybGluZSA9IDB4MDE7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcImRvdWJsZVwiOiBmb250LnVuZGVybGluZSA9IDB4MDI7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInNpbmdsZUFjY291bnRpbmdcIjogZm9udC51bmRlcmxpbmUgPSAweDIxOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgXCJkb3VibGVBY2NvdW50aW5nXCI6IGZvbnQudW5kZXJsaW5lID0gMHgyMjsgYnJlYWs7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnPHUvPic6IGZvbnQudW5kZXJsaW5lID0gMTsgYnJlYWs7XG5cblx0XHRcdFx0LyogMTguNC4xMCBzdHJpa2UgQ1RfQm9vbGVhblByb3BlcnR5ICovXG5cdFx0XHRcdGNhc2UgJzxzdHJpa2UnOiBmb250LnN0cmlrZSA9IHkudmFsID8gcGFyc2V4bWxib29sKHkudmFsKSA6IDE7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8c3RyaWtlLz4nOiBmb250LnN0cmlrZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjQuMiAgb3V0bGluZSBDVF9Cb29sZWFuUHJvcGVydHkgKi9cblx0XHRcdFx0Y2FzZSAnPG91dGxpbmUnOiBmb250Lm91dGxpbmUgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPG91dGxpbmUvPic6IGZvbnQub3V0bGluZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMzYgc2hhZG93IENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8c2hhZG93JzogZm9udC5zaGFkb3cgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPHNoYWRvdy8+JzogZm9udC5zaGFkb3cgPSAxOyBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjEyIGNvbmRlbnNlIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8Y29uZGVuc2UnOiBmb250LmNvbmRlbnNlID0geS52YWwgPyBwYXJzZXhtbGJvb2woeS52YWwpIDogMTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxjb25kZW5zZS8+JzogZm9udC5jb25kZW5zZSA9IDE7IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguMTcgZXh0ZW5kIENUX0Jvb2xlYW5Qcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8ZXh0ZW5kJzogZm9udC5leHRlbmQgPSB5LnZhbCA/IHBhcnNleG1sYm9vbCh5LnZhbCkgOiAxOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPGV4dGVuZC8+JzogZm9udC5leHRlbmQgPSAxOyBicmVhaztcblxuXHRcdFx0XHQvKiAxOC40LjExIHN6IENUX0ZvbnRTaXplICovXG5cdFx0XHRcdGNhc2UgJzxzeic6IGlmKHkudmFsKSBmb250LnN6ID0gK3kudmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPHN6Lz4nOiBjYXNlICc8L3N6Pic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjQuMTQgdmVydEFsaWduIENUX1ZlcnRpY2FsQWxpZ25Gb250UHJvcGVydHkgKi9cblx0XHRcdFx0Y2FzZSAnPHZlcnRBbGlnbic6IGlmKHkudmFsKSBmb250LnZlcnRBbGlnbiA9IHkudmFsOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPHZlcnRBbGlnbi8+JzogY2FzZSAnPC92ZXJ0QWxpZ24+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4xOCBmYW1pbHkgQ1RfRm9udEZhbWlseSAqL1xuXHRcdFx0XHRjYXNlICc8ZmFtaWx5JzogaWYoeS52YWwpIGZvbnQuZmFtaWx5ID0gcGFyc2VJbnQoeS52YWwsMTApOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPGZhbWlseS8+JzogY2FzZSAnPC9mYW1pbHk+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4zNSBzY2hlbWUgQ1RfRm9udFNjaGVtZSAqL1xuXHRcdFx0XHRjYXNlICc8c2NoZW1lJzogaWYoeS52YWwpIGZvbnQuc2NoZW1lID0geS52YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8c2NoZW1lLz4nOiBjYXNlICc8L3NjaGVtZT4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC40LjEgY2hhcnNldCBDVF9JbnRQcm9wZXJ0eSAqL1xuXHRcdFx0XHRjYXNlICc8Y2hhcnNldCc6XG5cdFx0XHRcdFx0aWYoeS52YWwgPT0gJzEnKSBicmVhaztcblx0XHRcdFx0XHR5LmNvZGVwYWdlID0gQ1MyQ1BbcGFyc2VJbnQoeS52YWwsIDEwKV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0LyogMTguPy4/IGNvbG9yIENUX0NvbG9yICovXG5cdFx0XHRcdGNhc2UgJzxjb2xvcic6XG5cdFx0XHRcdFx0aWYoIWZvbnQuY29sb3IpIGZvbnQuY29sb3IgPSB7fTtcblx0XHRcdFx0XHRpZih5LmF1dG8pIGZvbnQuY29sb3IuYXV0byA9IHBhcnNleG1sYm9vbCh5LmF1dG8pO1xuXG5cdFx0XHRcdFx0aWYoeS5yZ2IpIGZvbnQuY29sb3IucmdiID0geS5yZ2I7XG5cdFx0XHRcdFx0ZWxzZSBpZih5LmluZGV4ZWQpIHtcblx0XHRcdFx0XHRcdGZvbnQuY29sb3IuaW5kZXggPSBwYXJzZUludCh5LmluZGV4ZWQsIDEwKTtcblx0XHRcdFx0XHRcdHZhciBpY3YgPSBYTFNJY3ZbZm9udC5jb2xvci5pbmRleF07XG5cdFx0XHRcdFx0XHRpZihmb250LmNvbG9yLmluZGV4ID09IDgxKSBpY3YgPSBYTFNJY3ZbMV07XG5cdFx0XHRcdFx0XHRpZighaWN2KSB0aHJvdyBuZXcgRXJyb3IoeCk7XG5cdFx0XHRcdFx0XHRmb250LmNvbG9yLnJnYiA9IGljdlswXS50b1N0cmluZygxNikgKyBpY3ZbMV0udG9TdHJpbmcoMTYpICsgaWN2WzJdLnRvU3RyaW5nKDE2KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoeS50aGVtZSkge1xuXHRcdFx0XHRcdFx0Zm9udC5jb2xvci50aGVtZSA9IHBhcnNlSW50KHkudGhlbWUsIDEwKTtcblx0XHRcdFx0XHRcdGlmKHkudGludCkgZm9udC5jb2xvci50aW50ID0gcGFyc2VGbG9hdCh5LnRpbnQpO1xuXHRcdFx0XHRcdFx0aWYoeS50aGVtZSAmJiB0aGVtZXMudGhlbWVFbGVtZW50cyAmJiB0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWUpIHtcblx0XHRcdFx0XHRcdFx0Zm9udC5jb2xvci5yZ2IgPSByZ2JfdGludCh0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWVbZm9udC5jb2xvci50aGVtZV0ucmdiLCBmb250LmNvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxjb2xvci8+JzogY2FzZSAnPC9jb2xvcj4nOiBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiBpZihvcHRzICYmIG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gZm9udHMnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8qIDE4LjguMzEgbnVtRm10cyBDVF9OdW1GbXRzICovXG5cdGZ1bmN0aW9uIHBhcnNlX251bUZtdHModCwgc3R5bGVzLCBvcHRzKSB7XG5cdFx0c3R5bGVzLk51bWJlckZtdCA9IFtdO1xuXHRcdHZhciBrLypBcnJheTxudW1iZXI+Ki8gPSAoa2V5cyhTU0YuX3RhYmxlKSk7XG5cdFx0Zm9yKHZhciBpPTA7IGkgPCBrLmxlbmd0aDsgKytpKSBzdHlsZXMuTnVtYmVyRm10W2tbaV1dID0gU1NGLl90YWJsZVtrW2ldXTtcblx0XHR2YXIgbSA9IHRbMF0ubWF0Y2godGFncmVnZXgpO1xuXHRcdGlmKCFtKSByZXR1cm47XG5cdFx0Zm9yKGk9MDsgaSA8IG0ubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciB5ID0gcGFyc2V4bWx0YWcobVtpXSk7XG5cdFx0XHRzd2l0Y2goeVswXSkge1xuXHRcdFx0XHRjYXNlICc8bnVtRm10cyc6IGNhc2UgJzwvbnVtRm10cz4nOiBjYXNlICc8bnVtRm10cy8+JzogY2FzZSAnPG51bUZtdHM+JzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzxudW1GbXQnOiB7XG5cdFx0XHRcdFx0dmFyIGY9dW5lc2NhcGV4bWwodXRmOHJlYWQoeS5mb3JtYXRDb2RlKSksIGo9cGFyc2VJbnQoeS5udW1GbXRJZCwxMCk7XG5cdFx0XHRcdFx0c3R5bGVzLk51bWJlckZtdFtqXSA9IGY7IGlmKGo+MCkgU1NGLmxvYWQoZixqKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9udW1GbXQ+JzogYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gbnVtRm10cycpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX251bUZtdHMoTkYsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFtcIjxudW1GbXRzPlwiXTtcblx0XHRbWzUsOF0sWzIzLDI2XSxbNDEsNDRdLFsvKjYzKi81MCwvKjY2XSxbMTY0LCovMzkyXV0uZm9yRWFjaChmdW5jdGlvbihyKSB7XG5cdFx0XHRmb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdudW1GbXQnLG51bGwse251bUZtdElkOmksZm9ybWF0Q29kZTplc2NhcGV4bWwoTkZbaV0pfSkpO1xuXHRcdH0pO1xuXHRcdGlmKG8ubGVuZ3RoID09PSAxKSByZXR1cm4gXCJcIjtcblx0XHRvW28ubGVuZ3RoXSA9IChcIjwvbnVtRm10cz5cIik7XG5cdFx0b1swXSA9IHdyaXRleHRhZygnbnVtRm10cycsIG51bGwsIHsgY291bnQ6by5sZW5ndGgtMiB9KS5yZXBsYWNlKFwiLz5cIiwgXCI+XCIpO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblxuXHQvKiAxOC44LjEwIGNlbGxYZnMgQ1RfQ2VsbFhmcyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9jZWxsWGZzKHQsIHN0eWxlcywgb3B0cykge1xuXHRcdHN0eWxlcy5DZWxsWGYgPSBbXTtcblx0XHR2YXIgeGY7XG5cdFx0dFswXS5tYXRjaCh0YWdyZWdleCkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdFx0c3dpdGNoKHlbMF0pIHtcblx0XHRcdFx0Y2FzZSAnPGNlbGxYZnMnOiBjYXNlICc8Y2VsbFhmcz4nOiBjYXNlICc8Y2VsbFhmcy8+JzogY2FzZSAnPC9jZWxsWGZzPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjguNDUgeGYgQ1RfWGYgKi9cblx0XHRcdFx0Y2FzZSAnPHhmJzpcblx0XHRcdFx0XHR4ZiA9IHk7XG5cdFx0XHRcdFx0ZGVsZXRlIHhmWzBdO1xuXHRcdFx0XHRcdGlmKHhmLm51bUZtdElkKSB4Zi5udW1GbXRJZCA9IHBhcnNlSW50KHhmLm51bUZtdElkLCAxMCk7XG5cdFx0XHRcdFx0aWYoeGYuZmlsbElkKSB4Zi5maWxsSWQgPSBwYXJzZUludCh4Zi5maWxsSWQsIDEwKTtcblx0XHRcdFx0XHRzdHlsZXMuQ2VsbFhmLnB1c2goeGYpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC94Zj4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC44LjEgYWxpZ25tZW50IENUX0NlbGxBbGlnbm1lbnQgKi9cblx0XHRcdFx0Y2FzZSAnPGFsaWdubWVudCc6IGNhc2UgJzxhbGlnbm1lbnQvPic6XG5cdFx0XHRcdFx0dmFyIGFsaWdubWVudCA9IHt9O1xuXHRcdFx0XHRcdGlmKHkudmVydGljYWwpIGFsaWdubWVudC52ZXJ0aWNhbCA9IHkudmVydGljYWw7XG5cdFx0XHRcdFx0aWYoeS5ob3Jpem9udGFsKSBhbGlnbm1lbnQuaG9yaXpvbnRhbCA9IHkuaG9yaXpvbnRhbDtcblx0XHRcdFx0XHRpZih5LnRleHRSb3RhdGlvbiAhPSBudWxsKSBhbGlnbm1lbnQudGV4dFJvdGF0aW9uID0geS50ZXh0Um90YXRpb247XG5cdFx0XHRcdFx0aWYoeS5pbmRlbnQpIGFsaWdubWVudC5pbmRlbnQgPSB5LmluZGVudDtcblx0XHRcdFx0XHRpZih5LndyYXBUZXh0KSBhbGlnbm1lbnQud3JhcFRleHQgPSB5LndyYXBUZXh0O1xuXHRcdFx0XHRcdHhmLmFsaWdubWVudCA9IGFsaWdubWVudDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9hbGlnbm1lbnQ+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguOC4zMyBwcm90ZWN0aW9uIENUX0NlbGxQcm90ZWN0aW9uICovXG5cdFx0XHRcdGNhc2UgJzxwcm90ZWN0aW9uJzogY2FzZSAnPC9wcm90ZWN0aW9uPic6IGNhc2UgJzxwcm90ZWN0aW9uLz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjEwIGV4dExzdCBDVF9FeHRlbnNpb25MaXN0ID8gKi9cblx0XHRcdFx0Y2FzZSAnPGV4dExzdCc6IGNhc2UgJzwvZXh0THN0Pic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8ZXh0JzogYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCAnICsgeVswXSArICcgaW4gY2VsbFhmcycpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfY2VsbFhmcyhjZWxsWGZzKSB7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHRvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ2NlbGxYZnMnLG51bGwpKTtcblx0XHRjZWxsWGZzLmZvckVhY2goZnVuY3Rpb24oYykgeyBvW28ubGVuZ3RoXSA9ICh3cml0ZXh0YWcoJ3hmJywgbnVsbCwgYykpOyB9KTtcblx0XHRvW28ubGVuZ3RoXSA9IChcIjwvY2VsbFhmcz5cIik7XG5cdFx0aWYoby5sZW5ndGggPT09IDIpIHJldHVybiBcIlwiO1xuXHRcdG9bMF0gPSB3cml0ZXh0YWcoJ2NlbGxYZnMnLG51bGwsIHtjb3VudDpvLmxlbmd0aC0yfSkucmVwbGFjZShcIi8+XCIsXCI+XCIpO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblxuXHQvKiAxOC44IFN0eWxlcyBDVF9TdHlsZXNoZWV0Ki9cblx0dmFyIHBhcnNlX3N0eV94bWw9IChmdW5jdGlvbiBtYWtlX3BzdHl4KCkge1xuXHR2YXIgbnVtRm10UmVnZXggPSAvPG51bUZtdHMoW14+XSopPi4qPFxcL251bUZtdHM+Lztcblx0dmFyIGNlbGxYZlJlZ2V4ID0gLzxjZWxsWGZzKFtePl0qKT4uKjxcXC9jZWxsWGZzPi87XG5cdHZhciBmaWxsc1JlZ2V4ID0gLzxmaWxscyhbXj5dKik+Lio8XFwvZmlsbHM+Lztcblx0dmFyIGZvbnRzUmVnZXggPSAvPGZvbnRzKFtePl0qKT4uKjxcXC9mb250cz4vO1xuXHR2YXIgYm9yZGVyc1JlZ2V4ID0gLzxib3JkZXJzKFtePl0qKT4uKjxcXC9ib3JkZXJzPi87XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHBhcnNlX3N0eV94bWwoZGF0YSwgdGhlbWVzLCBvcHRzKSB7XG5cdFx0dmFyIHN0eWxlcyA9IHt9O1xuXHRcdGlmKCFkYXRhKSByZXR1cm4gc3R5bGVzO1xuXHRcdC8qIDE4LjguMzkgc3R5bGVTaGVldCBDVF9TdHlsZXNoZWV0ICovXG5cdFx0dmFyIHQ7XG5cblx0XHQvKiAxOC44LjMxIG51bUZtdHMgQ1RfTnVtRm10cyA/ICovXG5cdFx0aWYoKHQ9ZGF0YS5tYXRjaChudW1GbXRSZWdleCkpKSBwYXJzZV9udW1GbXRzKHQsIHN0eWxlcywgb3B0cyk7XG5cblx0XHQvKiAxOC44LjIzIGZvbnRzIENUX0ZvbnRzID8gKi9cblx0XHRpZigodD1kYXRhLm1hdGNoKGZvbnRzUmVnZXgpKSkgcGFyc2VfZm9udHModCwgc3R5bGVzLCB0aGVtZXMsIG9wdHMpO1xuXG5cdFx0LyogMTguOC4yMSBmaWxscyBDVF9GaWxscyA/ICovXG5cdFx0aWYoKHQ9ZGF0YS5tYXRjaChmaWxsc1JlZ2V4KSkpIHBhcnNlX2ZpbGxzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKTtcblxuXHRcdC8qIDE4LjguNSAgYm9yZGVycyBDVF9Cb3JkZXJzID8gKi9cblx0XHRpZigodD1kYXRhLm1hdGNoKGJvcmRlcnNSZWdleCkpKSBwYXJzZV9ib3JkZXJzKHQsIHN0eWxlcywgdGhlbWVzLCBvcHRzKTtcblxuXHRcdC8qIDE4LjguOSAgY2VsbFN0eWxlWGZzIENUX0NlbGxTdHlsZVhmcyA/ICovXG5cblx0XHQvKiAxOC44LjEwIGNlbGxYZnMgQ1RfQ2VsbFhmcyA/ICovXG5cdFx0aWYoKHQ9ZGF0YS5tYXRjaChjZWxsWGZSZWdleCkpKSBwYXJzZV9jZWxsWGZzKHQsIHN0eWxlcywgb3B0cyk7XG5cblx0XHQvKiAxOC44LjggIGNlbGxTdHlsZXMgQ1RfQ2VsbFN0eWxlcyA/ICovXG5cdFx0LyogMTguOC4xNSBkeGZzIENUX0R4ZnMgPyAqL1xuXHRcdC8qIDE4LjguNDIgdGFibGVTdHlsZXMgQ1RfVGFibGVTdHlsZXMgPyAqL1xuXHRcdC8qIDE4LjguMTEgY29sb3JzIENUX0NvbG9ycyA/ICovXG5cdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cblx0XHRyZXR1cm4gc3R5bGVzO1xuXHR9O1xuXHR9KSgpO1xuXG5cdHZhciBTVFlMRVNfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ3N0eWxlU2hlZXQnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlMubWFpblswXSxcblx0XHQneG1sbnM6dnQnOiBYTUxOUy52dFxuXHR9KTtcblxuXHRSRUxTLlNUWSA9IFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy9zdHlsZXNcIjtcblxuXHRmdW5jdGlvbiB3cml0ZV9zdHlfeG1sKHdiLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBbWE1MX0hFQURFUiwgU1RZTEVTX1hNTF9ST09UXSwgdztcblx0XHRpZih3Yi5TU0YgJiYgKHcgPSB3cml0ZV9udW1GbXRzKHdiLlNTRikpICE9IG51bGwpIG9bby5sZW5ndGhdID0gdztcblx0XHRvW28ubGVuZ3RoXSA9ICgnPGZvbnRzIGNvdW50PVwiMVwiPjxmb250PjxzeiB2YWw9XCIxMlwiLz48Y29sb3IgdGhlbWU9XCIxXCIvPjxuYW1lIHZhbD1cIkNhbGlicmlcIi8+PGZhbWlseSB2YWw9XCIyXCIvPjxzY2hlbWUgdmFsPVwibWlub3JcIi8+PC9mb250PjwvZm9udHM+Jyk7XG5cdFx0b1tvLmxlbmd0aF0gPSAoJzxmaWxscyBjb3VudD1cIjJcIj48ZmlsbD48cGF0dGVybkZpbGwgcGF0dGVyblR5cGU9XCJub25lXCIvPjwvZmlsbD48ZmlsbD48cGF0dGVybkZpbGwgcGF0dGVyblR5cGU9XCJncmF5MTI1XCIvPjwvZmlsbD48L2ZpbGxzPicpO1xuXHRcdG9bby5sZW5ndGhdID0gKCc8Ym9yZGVycyBjb3VudD1cIjFcIj48Ym9yZGVyPjxsZWZ0Lz48cmlnaHQvPjx0b3AvPjxib3R0b20vPjxkaWFnb25hbC8+PC9ib3JkZXI+PC9ib3JkZXJzPicpO1xuXHRcdG9bby5sZW5ndGhdID0gKCc8Y2VsbFN0eWxlWGZzIGNvdW50PVwiMVwiPjx4ZiBudW1GbXRJZD1cIjBcIiBmb250SWQ9XCIwXCIgZmlsbElkPVwiMFwiIGJvcmRlcklkPVwiMFwiLz48L2NlbGxTdHlsZVhmcz4nKTtcblx0XHRpZigodyA9IHdyaXRlX2NlbGxYZnMob3B0cy5jZWxsWGZzKSkpIG9bby5sZW5ndGhdID0gKHcpO1xuXHRcdG9bby5sZW5ndGhdID0gKCc8Y2VsbFN0eWxlcyBjb3VudD1cIjFcIj48Y2VsbFN0eWxlIG5hbWU9XCJOb3JtYWxcIiB4ZklkPVwiMFwiIGJ1aWx0aW5JZD1cIjBcIi8+PC9jZWxsU3R5bGVzPicpO1xuXHRcdG9bby5sZW5ndGhdID0gKCc8ZHhmcyBjb3VudD1cIjBcIi8+Jyk7XG5cdFx0b1tvLmxlbmd0aF0gPSAoJzx0YWJsZVN0eWxlcyBjb3VudD1cIjBcIiBkZWZhdWx0VGFibGVTdHlsZT1cIlRhYmxlU3R5bGVNZWRpdW05XCIgZGVmYXVsdFBpdm90U3R5bGU9XCJQaXZvdFN0eWxlTWVkaXVtNFwiLz4nKTtcblxuXHRcdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICgnPC9zdHlsZVNoZWV0PicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHQvKiBbTVMtWExTQl0gMi40LjY1MSBCcnRGbXQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0Rm10KGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciBpZm10ID0gZGF0YS5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBzdEZtdENvZGUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSxsZW5ndGgtMik7XG5cdFx0cmV0dXJuIFtpZm10LCBzdEZtdENvZGVdO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydEZtdChpLCBmLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDYgKyA0ICogZi5sZW5ndGgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgaSk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKGYsIG8pO1xuXHRcdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjY1MyBCcnRGb250IFRPRE8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0Rm9udChkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgb3V0ID0gKHt9KTtcblxuXHRcdG91dC5zeiA9IGRhdGEucmVhZF9zaGlmdCgyKSAvIDIwO1xuXG5cdFx0dmFyIGdyYml0ID0gcGFyc2VfRm9udEZsYWdzKGRhdGEsIDIsIG9wdHMpO1xuXHRcdGlmKGdyYml0LmZDb25kZW5zZSkgb3V0LmNvbmRlbnNlID0gMTtcblx0XHRpZihncmJpdC5mRXh0ZW5kKSBvdXQuZXh0ZW5kID0gMTtcblx0XHRpZihncmJpdC5mU2hhZG93KSBvdXQuc2hhZG93ID0gMTtcblx0XHRpZihncmJpdC5mT3V0bGluZSkgb3V0Lm91dGxpbmUgPSAxO1xuXHRcdGlmKGdyYml0LmZTdHJpa2VvdXQpIG91dC5zdHJpa2UgPSAxO1xuXHRcdGlmKGdyYml0LmZJdGFsaWMpIG91dC5pdGFsaWMgPSAxO1xuXG5cdFx0dmFyIGJscyA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRpZihibHMgPT09IDB4MDJCQykgb3V0LmJvbGQgPSAxO1xuXG5cdFx0c3dpdGNoKGRhdGEucmVhZF9zaGlmdCgyKSkge1xuXHRcdFx0LyogY2FzZSAwOiBvdXQudmVydEFsaWduID0gXCJiYXNlbGluZVwiOyBicmVhazsgKi9cblx0XHRcdGNhc2UgMTogb3V0LnZlcnRBbGlnbiA9IFwic3VwZXJzY3JpcHRcIjsgYnJlYWs7XG5cdFx0XHRjYXNlIDI6IG91dC52ZXJ0QWxpZ24gPSBcInN1YnNjcmlwdFwiOyBicmVhaztcblx0XHR9XG5cblx0XHR2YXIgdW5kZXJsaW5lID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKHVuZGVybGluZSAhPSAwKSBvdXQudW5kZXJsaW5lID0gdW5kZXJsaW5lO1xuXG5cdFx0dmFyIGZhbWlseSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHRpZihmYW1pbHkgPiAwKSBvdXQuZmFtaWx5ID0gZmFtaWx5O1xuXG5cdFx0dmFyIGJDaGFyU2V0ID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKGJDaGFyU2V0ID4gMCkgb3V0LmNoYXJzZXQgPSBiQ2hhclNldDtcblxuXHRcdGRhdGEubCsrO1xuXHRcdG91dC5jb2xvciA9IHBhcnNlX0JydENvbG9yKGRhdGEsIDgpO1xuXG5cdFx0c3dpdGNoKGRhdGEucmVhZF9zaGlmdCgxKSkge1xuXHRcdFx0LyogY2FzZSAwOiBvdXQuc2NoZW1lID0gXCJub25lXCI6IGJyZWFrOyAqL1xuXHRcdFx0Y2FzZSAxOiBvdXQuc2NoZW1lID0gXCJtYWpvclwiOyBicmVhaztcblx0XHRcdGNhc2UgMjogb3V0LnNjaGVtZSA9IFwibWlub3JcIjsgYnJlYWs7XG5cdFx0fVxuXG5cdFx0b3V0Lm5hbWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSwgbGVuZ3RoIC0gMjEpO1xuXG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRGb250KGZvbnQsIG8pIHtcblx0XHRpZighbykgbyA9IG5ld19idWYoMjUrNCozMik7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBmb250LnN6ICogMjApO1xuXHRcdHdyaXRlX0ZvbnRGbGFncyhmb250LCBvKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIGZvbnQuYm9sZCA/IDB4MDJCQyA6IDB4MDE5MCk7XG5cdFx0dmFyIHNzcyA9IDA7XG5cdFx0aWYoZm9udC52ZXJ0QWxpZ24gPT0gXCJzdXBlcnNjcmlwdFwiKSBzc3MgPSAxO1xuXHRcdGVsc2UgaWYoZm9udC52ZXJ0QWxpZ24gPT0gXCJzdWJzY3JpcHRcIikgc3NzID0gMjtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIHNzcyk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCBmb250LnVuZGVybGluZSB8fCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIGZvbnQuZmFtaWx5IHx8IDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgZm9udC5jaGFyc2V0IHx8IDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0d3JpdGVfQnJ0Q29sb3IoZm9udC5jb2xvciwgbyk7XG5cdFx0dmFyIHNjaGVtZSA9IDA7XG5cdFx0aWYoZm9udC5zY2hlbWUgPT0gXCJtYWpvclwiKSBzY2hlbWUgPSAxO1xuXHRcdGlmKGZvbnQuc2NoZW1lID09IFwibWlub3JcIikgc2NoZW1lID0gMjtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIHNjaGVtZSk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKGZvbnQubmFtZSwgbyk7XG5cdFx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuNjQ0IEJydEZpbGwgKi9cblx0dmFyIFhMU0JGaWxsUFROYW1lcyA9IFtcblx0XHRcIm5vbmVcIixcblx0XHRcInNvbGlkXCIsXG5cdFx0XCJtZWRpdW1HcmF5XCIsXG5cdFx0XCJkYXJrR3JheVwiLFxuXHRcdFwibGlnaHRHcmF5XCIsXG5cdFx0XCJkYXJrSG9yaXpvbnRhbFwiLFxuXHRcdFwiZGFya1ZlcnRpY2FsXCIsXG5cdFx0XCJkYXJrRG93blwiLFxuXHRcdFwiZGFya1VwXCIsXG5cdFx0XCJkYXJrR3JpZFwiLFxuXHRcdFwiZGFya1RyZWxsaXNcIixcblx0XHRcImxpZ2h0SG9yaXpvbnRhbFwiLFxuXHRcdFwibGlnaHRWZXJ0aWNhbFwiLFxuXHRcdFwibGlnaHREb3duXCIsXG5cdFx0XCJsaWdodFVwXCIsXG5cdFx0XCJsaWdodEdyaWRcIixcblx0XHRcImxpZ2h0VHJlbGxpc1wiLFxuXHRcdFwiZ3JheTEyNVwiLFxuXHRcdFwiZ3JheTA2MjVcIlxuXHRdO1xuXHR2YXIgcmV2X1hMU0JGaWxsUFROYW1lcyA9IGV2ZXJ0KFhMU0JGaWxsUFROYW1lcyk7XG5cdC8qIFRPRE86IGdyYWRpZW50IGZpbGwgcmVwcmVzZW50YXRpb24gKi9cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0RmlsbChmaWxsLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDQqMyArIDgqNyArIDE2KjEpO1xuXHRcdHZhciBmbHMgPSByZXZfWExTQkZpbGxQVE5hbWVzW2ZpbGwucGF0dGVyblR5cGVdO1xuXHRcdGlmKGZscyA9PSBudWxsKSBmbHMgPSAweDI4O1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZmxzKTtcblx0XHR2YXIgaiA9IDA7XG5cdFx0aWYoZmxzICE9IDB4MjgpIHtcblx0XHRcdC8qIFRPRE86IGN1c3RvbSBGRyBDb2xvciAqL1xuXHRcdFx0d3JpdGVfQnJ0Q29sb3Ioe2F1dG86MX0sIG8pO1xuXHRcdFx0LyogVE9ETzogY3VzdG9tIEJHIENvbG9yICovXG5cdFx0XHR3cml0ZV9CcnRDb2xvcih7YXV0bzoxfSwgbyk7XG5cblx0XHRcdGZvcig7IGogPCAxMjsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IoOyBqIDwgNDsgKytqKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXG5cdFx0XHRmb3IoOyBqIDwgMTI7ICsraikgby53cml0ZV9zaGlmdCg0LCAwKTsgLyogVE9ETyAqL1xuXHRcdFx0LyogaUdyYWRpZW50VHlwZSAqL1xuXHRcdFx0LyogeG51bURlZ3JlZSAqL1xuXHRcdFx0LyogeG51bUZpbGxUb0xlZnQgKi9cblx0XHRcdC8qIHhudW1GaWxsVG9SaWdodCAqL1xuXHRcdFx0LyogeG51bUZpbGxUb1RvcCAqL1xuXHRcdFx0LyogeG51bUZpbGxUb0JvdHRvbSAqL1xuXHRcdFx0LyogY051bVN0b3AgKi9cblx0XHRcdC8qIHhmaWxsR3JhZGllbnRTdG9wICovXG5cdFx0fVxuXHRcdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjgxNiBCcnRYRiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRYRihkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgaXhmZVBhcmVudCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgaWZtdCA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRwYXJzZW5vb3AoZGF0YSwgbGVuZ3RoLTQpO1xuXHRcdHJldHVybiB7aXhmZTppeGZlUGFyZW50LCBpZm10OmlmbXQgfTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRYRihkYXRhLCBpeGZlUCwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1ZigxNik7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBpeGZlUHx8MCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCBkYXRhLm51bUZtdElkfHwwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApOyAvKiBpRm9udCAqL1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7IC8qIGlGaWxsICovXG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTsgLyogaXhCb3JkZXIgKi9cblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiB0cm90ICovXG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogaW5kZW50ICovXG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZmxhZ3MgKi9cblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvKiBmbGFncyAqL1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIHhmR3JiaXRBdHIgKi9cblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNS40IEJseGYgVE9ETyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CbHhmKGRhdGEsIG8pIHtcblx0XHRpZighbykgbyA9IG5ld19idWYoMTApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIGRnICovXG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApOyAvKiBjb2xvciAqL1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIGNvbG9yICovXG5cdFx0cmV0dXJuIG87XG5cdH1cblx0LyogW01TLVhMU0JdIDIuNC4yOTkgQnJ0Qm9yZGVyIFRPRE8gKi9cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0Qm9yZGVyKGJvcmRlciwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1Zig1MSk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogZGlhZ29uYWwgKi9cblx0XHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiB0b3AgKi9cblx0XHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBib3R0b20gKi9cblx0XHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBsZWZ0ICovXG5cdFx0d3JpdGVfQmx4ZihudWxsLCBvKTsgLyogcmlnaHQgKi9cblx0XHR3cml0ZV9CbHhmKG51bGwsIG8pOyAvKiBkaWFnICovXG5cdFx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuNzU1IEJydFN0eWxlIFRPRE8gKi9cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0U3R5bGUoc3R5bGUsIG8pIHtcblx0XHRpZighbykgbyA9IG5ld19idWYoMTIrNCoxMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBzdHlsZS54ZklkKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgK3N0eWxlLmJ1aWx0aW5JZCk7XG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogaUxldmVsICovXG5cdFx0d3JpdGVfWExOdWxsYWJsZVdpZGVTdHJpbmcoc3R5bGUubmFtZSB8fCBcIlwiLCBvKTtcblx0XHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4yNjkgQnJ0QmVnaW5UYWJsZVN0eWxlcyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CcnRCZWdpblRhYmxlU3R5bGVzKGNudCwgZGVmVGFibGVTdHlsZSwgZGVmUGl2b3RTdHlsZSkge1xuXHRcdHZhciBvID0gbmV3X2J1Zig0KzI1NioyKjQpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgY250KTtcblx0XHR3cml0ZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkZWZUYWJsZVN0eWxlLCBvKTtcblx0XHR3cml0ZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkZWZQaXZvdFN0eWxlLCBvKTtcblx0XHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuMS43LjUwIFN0eWxlcyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9zdHlfYmluKGRhdGEsIHRoZW1lcywgb3B0cykge1xuXHRcdHZhciBzdHlsZXMgPSB7fTtcblx0XHRzdHlsZXMuTnVtYmVyRm10ID0gKFtdKTtcblx0XHRmb3IodmFyIHkgaW4gU1NGLl90YWJsZSkgc3R5bGVzLk51bWJlckZtdFt5XSA9IFNTRi5fdGFibGVbeV07XG5cblx0XHRzdHlsZXMuQ2VsbFhmID0gW107XG5cdFx0c3R5bGVzLkZvbnRzID0gW107XG5cdFx0dmFyIHN0YXRlID0gW107XG5cdFx0dmFyIHBhc3MgPSBmYWxzZTtcblx0XHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX3N0eSh2YWwsIFJfbiwgUlQpIHtcblx0XHRcdHN3aXRjaChSVCkge1xuXHRcdFx0XHRjYXNlIDB4MDAyQzogLyogJ0JydEZtdCcgKi9cblx0XHRcdFx0XHRzdHlsZXMuTnVtYmVyRm10W3ZhbFswXV0gPSB2YWxbMV07IFNTRi5sb2FkKHZhbFsxXSwgdmFsWzBdKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMkI6IC8qICdCcnRGb250JyAqL1xuXHRcdFx0XHRcdHN0eWxlcy5Gb250cy5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0aWYodmFsLmNvbG9yLnRoZW1lICE9IG51bGwgJiYgdGhlbWVzICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzICYmIHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZSkge1xuXHRcdFx0XHRcdFx0dmFsLmNvbG9yLnJnYiA9IHJnYl90aW50KHRoZW1lcy50aGVtZUVsZW1lbnRzLmNsclNjaGVtZVt2YWwuY29sb3IudGhlbWVdLnJnYiwgdmFsLmNvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDQwMTogLyogJ0JydEtub3duRm9udHMnICovIGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyRDogLyogJ0JydEZpbGwnICovIGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyRTogLyogJ0JydEJvcmRlcicgKi8gYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDJGOiAvKiAnQnJ0WEYnICovXG5cdFx0XHRcdFx0aWYoc3RhdGVbc3RhdGUubGVuZ3RoIC0gMV0gPT0gXCJCcnRCZWdpbkNlbGxYRnNcIikge1xuXHRcdFx0XHRcdFx0c3R5bGVzLkNlbGxYZi5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAzMDogLyogJ0JydFN0eWxlJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDFGQjogLyogJ0JydERYRicgKi9cblx0XHRcdFx0Y2FzZSAweDAyM0M6IC8qICdCcnRNUlVDb2xvcicgKi9cblx0XHRcdFx0Y2FzZSAweDAxREI6IC8qICdCcnRJbmRleGVkQ29sb3InOiAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwNDkzOiAvKiAnQnJ0RFhGMTQnICovXG5cdFx0XHRcdGNhc2UgMHgwODM2OiAvKiAnQnJ0RFhGMTUnICovXG5cdFx0XHRcdGNhc2UgMHgwNDZBOiAvKiAnQnJ0U2xpY2VyU3R5bGVFbGVtZW50JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDIwMDogLyogJ0JydFRhYmxlU3R5bGVFbGVtZW50JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDgyRjogLyogJ0JydFRpbWVsaW5lU3R5bGVFbGVtZW50JyAqL1xuXHRcdFx0XHQvKiBjYXNlICdCcnRVaWQnICovXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDAwMjM6IC8qICdCcnRGUlRCZWdpbicgKi9cblx0XHRcdFx0XHRwYXNzID0gdHJ1ZTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDI0OiAvKiAnQnJ0RlJURW5kJyAqL1xuXHRcdFx0XHRcdHBhc3MgPSBmYWxzZTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDI1OiAvKiAnQnJ0QUNCZWdpbicgKi9cblx0XHRcdFx0XHRzdGF0ZS5wdXNoKFJfbik7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqL1xuXHRcdFx0XHRcdHN0YXRlLnBvcCgpOyBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApIHN0YXRlLnB1c2goUl9uKTtcblx0XHRcdFx0XHRlbHNlIGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJFbmRcIikgPiAwKSBzdGF0ZS5wb3AoKTtcblx0XHRcdFx0XHRlbHNlIGlmKCFwYXNzIHx8IG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlY29yZCBcIiArIFJUICsgXCIgXCIgKyBSX24pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzdHlsZXM7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9GTVRTX2JpbihiYSwgTkYpIHtcblx0XHRpZighTkYpIHJldHVybjtcblx0XHR2YXIgY250ID0gMDtcblx0XHRbWzUsOF0sWzIzLDI2XSxbNDEsNDRdLFsvKjYzKi81NywvKjY2XSxbMTY0LCovMzkyXV0uZm9yRWFjaChmdW5jdGlvbihyKSB7XG5cdFx0XHRmb3IodmFyIGkgPSByWzBdOyBpIDw9IHJbMV07ICsraSkgaWYoTkZbaV0gIT0gbnVsbCkgKytjbnQ7XG5cdFx0fSk7XG5cblx0XHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkZtdHNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdFx0W1s1LDhdLFsyMywyNl0sWzQxLDQ0XSxbLyo2MyovNTcsLyo2Nl0sWzE2NCwqLzM5Ml1dLmZvckVhY2goZnVuY3Rpb24ocikge1xuXHRcdFx0Zm9yKHZhciBpID0gclswXTsgaSA8PSByWzFdOyArK2kpIGlmKE5GW2ldICE9IG51bGwpIHdyaXRlX3JlY29yZChiYSwgXCJCcnRGbXRcIiwgd3JpdGVfQnJ0Rm10KGksIE5GW2ldKSk7XG5cdFx0fSk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEZtdHNcIik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9GT05UU19iaW4oYmEsIGRhdGEpIHtcblx0XHR2YXIgY250ID0gMTtcblxuXHRcdGlmKGNudCA9PSAwKSByZXR1cm47XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luRm9udHNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEZvbnRcIiwgd3JpdGVfQnJ0Rm9udCh7XG5cdFx0XHRzejoxMixcblx0XHRcdGNvbG9yOiB7dGhlbWU6MX0sXG5cdFx0XHRuYW1lOiBcIkNhbGlicmlcIixcblx0XHRcdGZhbWlseTogMixcblx0XHRcdHNjaGVtZTogXCJtaW5vclwiXG5cdFx0fSkpO1xuXHRcdC8qIDEqNjU0OTFCcnRGb250IFtBQ0ZPTlRTXSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRGb250c1wiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0ZJTExTX2JpbihiYSwgZGF0YSkge1xuXHRcdHZhciBjbnQgPSAyO1xuXG5cdFx0aWYoY250ID09IDApIHJldHVybjtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5GaWxsc1wiLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RmlsbFwiLCB3cml0ZV9CcnRGaWxsKHtwYXR0ZXJuVHlwZTpcIm5vbmVcIn0pKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RmlsbFwiLCB3cml0ZV9CcnRGaWxsKHtwYXR0ZXJuVHlwZTpcImdyYXkxMjVcIn0pKTtcblx0XHQvKiAxKjY1NDMxQnJ0RmlsbCAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRGaWxsc1wiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JPUkRFUlNfYmluKGJhLCBkYXRhKSB7XG5cdFx0dmFyIGNudCA9IDE7XG5cblx0XHRpZihjbnQgPT0gMCkgcmV0dXJuO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkJvcmRlcnNcIiwgd3JpdGVfVUludDMyTEUoY250KSk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJvcmRlclwiLCB3cml0ZV9CcnRCb3JkZXIoe30pKTtcblx0XHQvKiAxKjY1NDMwQnJ0Qm9yZGVyICovXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEJvcmRlcnNcIik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9DRUxMU1RZTEVYRlNfYmluKGJhLCBkYXRhKSB7XG5cdFx0dmFyIGNudCA9IDE7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQ2VsbFN0eWxlWEZzXCIsIHdyaXRlX1VJbnQzMkxFKGNudCkpO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRYRlwiLCB3cml0ZV9CcnRYRih7XG5cdFx0XHRudW1GbXRJZDowLFxuXHRcdFx0Zm9udElkOjAsXG5cdFx0XHRmaWxsSWQ6MCxcblx0XHRcdGJvcmRlcklkOjBcblx0XHR9LCAweEZGRkYpKTtcblx0XHQvKiAxKjY1NDMwKEJydFhGICpGUlQpICovXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENlbGxTdHlsZVhGc1wiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0NFTExYRlNfYmluKGJhLCBkYXRhKSB7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQ2VsbFhGc1wiLCB3cml0ZV9VSW50MzJMRShkYXRhLmxlbmd0aCkpO1xuXHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihjKSB7IHdyaXRlX3JlY29yZChiYSwgXCJCcnRYRlwiLCB3cml0ZV9CcnRYRihjLDApKTsgfSk7XG5cdFx0LyogMSo2NTQzMChCcnRYRiAqRlJUKSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRDZWxsWEZzXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfU1RZTEVTX2JpbihiYSwgZGF0YSkge1xuXHRcdHZhciBjbnQgPSAxO1xuXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luU3R5bGVzXCIsIHdyaXRlX1VJbnQzMkxFKDEpKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0U3R5bGVcIiwgd3JpdGVfQnJ0U3R5bGUoe1xuXHRcdFx0eGZJZDowLFxuXHRcdFx0YnVpbHRpbklkOjAsXG5cdFx0XHRuYW1lOlwiTm9ybWFsXCJcblx0XHR9KSk7XG5cdFx0LyogMSo2NTQzMChCcnRTdHlsZSAqRlJUKSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRTdHlsZXNcIik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9EWEZTX2JpbihiYSwgZGF0YSkge1xuXHRcdHZhciBjbnQgPSAwO1xuXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luRFhGc1wiLCB3cml0ZV9VSW50MzJMRShjbnQpKTtcblx0XHQvKiAqMjE0NzQ4MzY0NyhCcnREWEYgKkZSVCkgKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kRFhGc1wiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX1RBQkxFU1RZTEVTX2JpbihiYSwgZGF0YSkge1xuXHRcdHZhciBjbnQgPSAwO1xuXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luVGFibGVTdHlsZXNcIiwgd3JpdGVfQnJ0QmVnaW5UYWJsZVN0eWxlcyhjbnQsIFwiVGFibGVTdHlsZU1lZGl1bTlcIiwgXCJQaXZvdFN0eWxlTWVkaXVtNFwiKSk7XG5cdFx0LyogKlRBQkxFU1RZTEUgKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kVGFibGVTdHlsZXNcIik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9DT0xPUlBBTEVUVEVfYmluKGJhLCBkYXRhKSB7XG5cdFx0cmV0dXJuO1xuXHRcdC8qIEJydEJlZ2luQ29sb3JQYWxldHRlIFtJTkRFWEVEQ09MT1JTXSBbTVJVQ09MT1JTXSBCcnRFbmRDb2xvclBhbGV0dGUgKi9cblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy41MCBTdHlsZXMgKi9cblx0ZnVuY3Rpb24gd3JpdGVfc3R5X2Jpbih3Yiwgb3B0cykge1xuXHRcdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpblN0eWxlU2hlZXRcIik7XG5cdFx0d3JpdGVfRk1UU19iaW4oYmEsIHdiLlNTRik7XG5cdFx0d3JpdGVfRk9OVFNfYmluKGJhLCB3Yik7XG5cdFx0d3JpdGVfRklMTFNfYmluKGJhLCB3Yik7XG5cdFx0d3JpdGVfQk9SREVSU19iaW4oYmEsIHdiKTtcblx0XHR3cml0ZV9DRUxMU1RZTEVYRlNfYmluKGJhLCB3Yik7XG5cdFx0d3JpdGVfQ0VMTFhGU19iaW4oYmEsIG9wdHMuY2VsbFhmcyk7XG5cdFx0d3JpdGVfU1RZTEVTX2JpbihiYSwgd2IpO1xuXHRcdHdyaXRlX0RYRlNfYmluKGJhLCB3Yik7XG5cdFx0d3JpdGVfVEFCTEVTVFlMRVNfYmluKGJhLCB3Yik7XG5cdFx0d3JpdGVfQ09MT1JQQUxFVFRFX2JpbihiYSwgd2IpO1xuXHRcdC8qIEZSVFNUWUxFU0hFRVQqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRTdHlsZVNoZWV0XCIpO1xuXHRcdHJldHVybiBiYS5lbmQoKTtcblx0fVxuXHRSRUxTLlRIRU1FID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL3RoZW1lXCI7XG5cblx0LyogMjAuMS42LjIgY2xyU2NoZW1lIENUX0NvbG9yU2NoZW1lICovXG5cdGZ1bmN0aW9uIHBhcnNlX2NsclNjaGVtZSh0LCB0aGVtZXMsIG9wdHMpIHtcblx0XHR0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWUgPSBbXTtcblx0XHR2YXIgY29sb3IgPSB7fTtcblx0XHQodFswXS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0XHRzd2l0Y2goeVswXSkge1xuXHRcdFx0XHQvKiAyMC4xLjYuMiBjbHJTY2hlbWUgKENvbG9yIFNjaGVtZSkgQ1RfQ29sb3JTY2hlbWUgKi9cblx0XHRcdFx0Y2FzZSAnPGE6Y2xyU2NoZW1lJzogY2FzZSAnPC9hOmNsclNjaGVtZT4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAyMC4xLjIuMy4zMiBzcmdiQ2xyIENUX1NSZ2JDb2xvciAqL1xuXHRcdFx0XHRjYXNlICc8YTpzcmdiQ2xyJzpcblx0XHRcdFx0XHRjb2xvci5yZ2IgPSB5LnZhbDsgYnJlYWs7XG5cblx0XHRcdFx0LyogMjAuMS4yLjMuMzMgc3lzQ2xyIENUX1N5c3RlbUNvbG9yICovXG5cdFx0XHRcdGNhc2UgJzxhOnN5c0Nscic6XG5cdFx0XHRcdFx0Y29sb3IucmdiID0geS5sYXN0Q2xyOyBicmVhaztcblxuXHRcdFx0XHQvKiAyMC4xLjQuMS4xIGFjY2VudDEgKEFjY2VudCAxKSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS4yIGFjY2VudDIgKEFjY2VudCAyKSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS4zIGFjY2VudDMgKEFjY2VudCAzKSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS40IGFjY2VudDQgKEFjY2VudCA0KSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS41IGFjY2VudDUgKEFjY2VudCA1KSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS42IGFjY2VudDYgKEFjY2VudCA2KSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS45IGRrMSAoRGFyayAxKSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS4xMCBkazIgKERhcmsgMikgKi9cblx0XHRcdFx0LyogMjAuMS40LjEuMTUgZm9sSGxpbmsgKEZvbGxvd2VkIEh5cGVybGluaykgKi9cblx0XHRcdFx0LyogMjAuMS40LjEuMTkgaGxpbmsgKEh5cGVybGluaykgKi9cblx0XHRcdFx0LyogMjAuMS40LjEuMjIgbHQxIChMaWdodCAxKSAqL1xuXHRcdFx0XHQvKiAyMC4xLjQuMS4yMyBsdDIgKExpZ2h0IDIpICovXG5cdFx0XHRcdGNhc2UgJzxhOmRrMT4nOiBjYXNlICc8L2E6ZGsxPic6XG5cdFx0XHRcdGNhc2UgJzxhOmx0MT4nOiBjYXNlICc8L2E6bHQxPic6XG5cdFx0XHRcdGNhc2UgJzxhOmRrMj4nOiBjYXNlICc8L2E6ZGsyPic6XG5cdFx0XHRcdGNhc2UgJzxhOmx0Mj4nOiBjYXNlICc8L2E6bHQyPic6XG5cdFx0XHRcdGNhc2UgJzxhOmFjY2VudDE+JzogY2FzZSAnPC9hOmFjY2VudDE+Jzpcblx0XHRcdFx0Y2FzZSAnPGE6YWNjZW50Mj4nOiBjYXNlICc8L2E6YWNjZW50Mj4nOlxuXHRcdFx0XHRjYXNlICc8YTphY2NlbnQzPic6IGNhc2UgJzwvYTphY2NlbnQzPic6XG5cdFx0XHRcdGNhc2UgJzxhOmFjY2VudDQ+JzogY2FzZSAnPC9hOmFjY2VudDQ+Jzpcblx0XHRcdFx0Y2FzZSAnPGE6YWNjZW50NT4nOiBjYXNlICc8L2E6YWNjZW50NT4nOlxuXHRcdFx0XHRjYXNlICc8YTphY2NlbnQ2Pic6IGNhc2UgJzwvYTphY2NlbnQ2Pic6XG5cdFx0XHRcdGNhc2UgJzxhOmhsaW5rPic6IGNhc2UgJzwvYTpobGluaz4nOlxuXHRcdFx0XHRjYXNlICc8YTpmb2xIbGluaz4nOiBjYXNlICc8L2E6Zm9sSGxpbms+Jzpcblx0XHRcdFx0XHRpZiAoeVswXVsxXSA9PT0gJy8nKSB7XG5cdFx0XHRcdFx0XHR0aGVtZXMudGhlbWVFbGVtZW50cy5jbHJTY2hlbWUucHVzaChjb2xvcik7XG5cdFx0XHRcdFx0XHRjb2xvciA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb2xvci5uYW1lID0geVswXS5zdWJzdHJpbmcoMywgeVswXS5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogaWYob3B0cyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIGNsclNjaGVtZScpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0LyogMjAuMS40LjEuMTggZm9udFNjaGVtZSBDVF9Gb250U2NoZW1lICovXG5cdGZ1bmN0aW9uIHBhcnNlX2ZvbnRTY2hlbWUodCwgdGhlbWVzLCBvcHRzKSB7IH1cblxuXHQvKiAyMC4xLjQuMS4xNSBmbXRTY2hlbWUgQ1RfU3R5bGVNYXRyaXggKi9cblx0ZnVuY3Rpb24gcGFyc2VfZm10U2NoZW1lKHQsIHRoZW1lcywgb3B0cykgeyB9XG5cblx0dmFyIGNscnNyZWdleCA9IC88YTpjbHJTY2hlbWUoW14+XSopPlteXFx1MjYwM10qPFxcL2E6Y2xyU2NoZW1lPi87XG5cdHZhciBmbnRzcmVnZXggPSAvPGE6Zm9udFNjaGVtZShbXj5dKik+W15cXHUyNjAzXSo8XFwvYTpmb250U2NoZW1lPi87XG5cdHZhciBmbXRzcmVnZXggPSAvPGE6Zm10U2NoZW1lKFtePl0qKT5bXlxcdTI2MDNdKjxcXC9hOmZtdFNjaGVtZT4vO1xuXG5cdC8qIDIwLjEuNi4xMCB0aGVtZUVsZW1lbnRzIENUX0Jhc2VTdHlsZXMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfdGhlbWVFbGVtZW50cyhkYXRhLCB0aGVtZXMsIG9wdHMpIHtcblx0XHR0aGVtZXMudGhlbWVFbGVtZW50cyA9IHt9O1xuXG5cdFx0dmFyIHQ7XG5cblx0XHRbXG5cdFx0XHQvKiBjbHJTY2hlbWUgQ1RfQ29sb3JTY2hlbWUgKi9cblx0XHRcdFsnY2xyU2NoZW1lJywgY2xyc3JlZ2V4LCBwYXJzZV9jbHJTY2hlbWVdLFxuXHRcdFx0LyogZm9udFNjaGVtZSBDVF9Gb250U2NoZW1lICovXG5cdFx0XHRbJ2ZvbnRTY2hlbWUnLCBmbnRzcmVnZXgsIHBhcnNlX2ZvbnRTY2hlbWVdLFxuXHRcdFx0LyogZm10U2NoZW1lIENUX1N0eWxlTWF0cml4ICovXG5cdFx0XHRbJ2ZtdFNjaGVtZScsIGZtdHNyZWdleCwgcGFyc2VfZm10U2NoZW1lXVxuXHRcdF0uZm9yRWFjaChmdW5jdGlvbihtKSB7XG5cdFx0XHRpZighKHQ9ZGF0YS5tYXRjaChtWzFdKSkpIHRocm93IG5ldyBFcnJvcihtWzBdICsgJyBub3QgZm91bmQgaW4gdGhlbWVFbGVtZW50cycpO1xuXHRcdFx0bVsyXSh0LCB0aGVtZXMsIG9wdHMpO1xuXHRcdH0pO1xuXHR9XG5cblx0dmFyIHRoZW1lbHRyZWdleCA9IC88YTp0aGVtZUVsZW1lbnRzKFtePl0qKT5bXlxcdTI2MDNdKjxcXC9hOnRoZW1lRWxlbWVudHM+LztcblxuXHQvKiAxNC4yLjcgVGhlbWUgUGFydCAqL1xuXHRmdW5jdGlvbiBwYXJzZV90aGVtZV94bWwoZGF0YSwgb3B0cykge1xuXHRcdC8qIDIwLjEuNi45IHRoZW1lIENUX09mZmljZVN0eWxlU2hlZXQgKi9cblx0XHRpZighZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHBhcnNlX3RoZW1lX3htbCh3cml0ZV90aGVtZSgpKTtcblxuXHRcdHZhciB0O1xuXHRcdHZhciB0aGVtZXMgPSB7fTtcblxuXHRcdC8qIHRoZW1lRWxlbWVudHMgQ1RfQmFzZVN0eWxlcyAqL1xuXHRcdGlmKCEodD1kYXRhLm1hdGNoKHRoZW1lbHRyZWdleCkpKSB0aHJvdyBuZXcgRXJyb3IoJ3RoZW1lRWxlbWVudHMgbm90IGZvdW5kIGluIHRoZW1lJyk7XG5cdFx0cGFyc2VfdGhlbWVFbGVtZW50cyh0WzBdLCB0aGVtZXMsIG9wdHMpO1xuXG5cdFx0cmV0dXJuIHRoZW1lcztcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3RoZW1lKFRoZW1lcywgb3B0cykge1xuXHRcdGlmKG9wdHMgJiYgb3B0cy50aGVtZVhMU1gpIHJldHVybiBvcHRzLnRoZW1lWExTWDtcblx0XHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0XHRvW28ubGVuZ3RoXSA9ICc8YTp0aGVtZSB4bWxuczphPVwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL2RyYXdpbmdtbC8yMDA2L21haW5cIiBuYW1lPVwiT2ZmaWNlIFRoZW1lXCI+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAnPGE6dGhlbWVFbGVtZW50cz4nO1xuXG5cdFx0b1tvLmxlbmd0aF0gPSAgICc8YTpjbHJTY2hlbWUgbmFtZT1cIk9mZmljZVwiPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6ZGsxPjxhOnN5c0NsciB2YWw9XCJ3aW5kb3dUZXh0XCIgbGFzdENscj1cIjAwMDAwMFwiLz48L2E6ZGsxPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bHQxPjxhOnN5c0NsciB2YWw9XCJ3aW5kb3dcIiBsYXN0Q2xyPVwiRkZGRkZGXCIvPjwvYTpsdDE+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8YTpkazI+PGE6c3JnYkNsciB2YWw9XCIxRjQ5N0RcIi8+PC9hOmRrMj4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzxhOmx0Mj48YTpzcmdiQ2xyIHZhbD1cIkVFRUNFMVwiLz48L2E6bHQyPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50MT48YTpzcmdiQ2xyIHZhbD1cIjRGODFCRFwiLz48L2E6YWNjZW50MT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDI+PGE6c3JnYkNsciB2YWw9XCJDMDUwNERcIi8+PC9hOmFjY2VudDI+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQzPjxhOnNyZ2JDbHIgdmFsPVwiOUJCQjU5XCIvPjwvYTphY2NlbnQzPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6YWNjZW50ND48YTpzcmdiQ2xyIHZhbD1cIjgwNjRBMlwiLz48L2E6YWNjZW50ND4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzxhOmFjY2VudDU+PGE6c3JnYkNsciB2YWw9XCI0QkFDQzZcIi8+PC9hOmFjY2VudDU+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8YTphY2NlbnQ2PjxhOnNyZ2JDbHIgdmFsPVwiRjc5NjQ2XCIvPjwvYTphY2NlbnQ2Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6aGxpbms+PGE6c3JnYkNsciB2YWw9XCIwMDAwRkZcIi8+PC9hOmhsaW5rPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6Zm9sSGxpbms+PGE6c3JnYkNsciB2YWw9XCI4MDAwODBcIi8+PC9hOmZvbEhsaW5rPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICc8L2E6Y2xyU2NoZW1lPic7XG5cblx0XHRvW28ubGVuZ3RoXSA9ICAgJzxhOmZvbnRTY2hlbWUgbmFtZT1cIk9mZmljZVwiPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bWFqb3JGb250Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxhdGluIHR5cGVmYWNlPVwiQ2FtYnJpYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTplYSB0eXBlZmFjZT1cIlwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpjcyB0eXBlZmFjZT1cIlwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkpwYW5cIiB0eXBlZmFjZT1cIu+8re+8syDvvLDjgrTjgrfjg4Pjgq9cIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW5nXCIgdHlwZWZhY2U9XCLrp5HsnYAg6rOg65SVXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFuc1wiIHR5cGVmYWNlPVwi5a6L5L2TXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFudFwiIHR5cGVmYWNlPVwi5paw57Sw5piO6auUXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQXJhYlwiIHR5cGVmYWNlPVwiVGltZXMgTmV3IFJvbWFuXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGViclwiIHR5cGVmYWNlPVwiVGltZXMgTmV3IFJvbWFuXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGhhaVwiIHR5cGVmYWNlPVwiVGFob21hXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiRXRoaVwiIHR5cGVmYWNlPVwiTnlhbGFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJCZW5nXCIgdHlwZWZhY2U9XCJWcmluZGFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJHdWpyXCIgdHlwZWZhY2U9XCJTaHJ1dGlcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLaG1yXCIgdHlwZWZhY2U9XCJNb29sQm9yYW5cIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLbmRhXCIgdHlwZWZhY2U9XCJUdW5nYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkd1cnVcIiB0eXBlZmFjZT1cIlJhYXZpXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2Fuc1wiIHR5cGVmYWNlPVwiRXVwaGVtaWFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJDaGVyXCIgdHlwZWZhY2U9XCJQbGFudGFnZW5ldCBDaGVyb2tlZVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIllpaWlcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBZaSBCYWl0aVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRpYnRcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBIaW1hbGF5YVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRoYWFcIiB0eXBlZmFjZT1cIk1WIEJvbGlcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJEZXZhXCIgdHlwZWZhY2U9XCJNYW5nYWxcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUZWx1XCIgdHlwZWZhY2U9XCJHYXV0YW1pXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGFtbFwiIHR5cGVmYWNlPVwiTGF0aGFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJTeXJjXCIgdHlwZWZhY2U9XCJFc3RyYW5nZWxvIEVkZXNzYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk9yeWFcIiB0eXBlZmFjZT1cIkthbGluZ2FcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJNbHltXCIgdHlwZWZhY2U9XCJLYXJ0aWthXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTGFvb1wiIHR5cGVmYWNlPVwiRG9rQ2hhbXBhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiU2luaFwiIHR5cGVmYWNlPVwiSXNrb29sYSBQb3RhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTW9uZ1wiIHR5cGVmYWNlPVwiTW9uZ29saWFuIEJhaXRpXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVmlldFwiIHR5cGVmYWNlPVwiVGltZXMgTmV3IFJvbWFuXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVWlnaFwiIHR5cGVmYWNlPVwiTWljcm9zb2Z0IFVpZ2h1clwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkdlb3JcIiB0eXBlZmFjZT1cIlN5bGZhZW5cIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6bWFqb3JGb250Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bWlub3JGb250Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmxhdGluIHR5cGVmYWNlPVwiQ2FsaWJyaVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTplYSB0eXBlZmFjZT1cIlwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpjcyB0eXBlZmFjZT1cIlwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkpwYW5cIiB0eXBlZmFjZT1cIu+8re+8syDvvLDjgrTjgrfjg4Pjgq9cIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIYW5nXCIgdHlwZWZhY2U9XCLrp5HsnYAg6rOg65SVXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFuc1wiIHR5cGVmYWNlPVwi5a6L5L2TXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiSGFudFwiIHR5cGVmYWNlPVwi5paw57Sw5piO6auUXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQXJhYlwiIHR5cGVmYWNlPVwiQXJpYWxcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJIZWJyXCIgdHlwZWZhY2U9XCJBcmlhbFwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRoYWlcIiB0eXBlZmFjZT1cIlRhaG9tYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkV0aGlcIiB0eXBlZmFjZT1cIk55YWxhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQmVuZ1wiIHR5cGVmYWNlPVwiVnJpbmRhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR3VqclwiIHR5cGVmYWNlPVwiU2hydXRpXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiS2htclwiIHR5cGVmYWNlPVwiRGF1blBlbmhcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJLbmRhXCIgdHlwZWZhY2U9XCJUdW5nYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIkd1cnVcIiB0eXBlZmFjZT1cIlJhYXZpXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiQ2Fuc1wiIHR5cGVmYWNlPVwiRXVwaGVtaWFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJDaGVyXCIgdHlwZWZhY2U9XCJQbGFudGFnZW5ldCBDaGVyb2tlZVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIllpaWlcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBZaSBCYWl0aVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRpYnRcIiB0eXBlZmFjZT1cIk1pY3Jvc29mdCBIaW1hbGF5YVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIlRoYWFcIiB0eXBlZmFjZT1cIk1WIEJvbGlcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJEZXZhXCIgdHlwZWZhY2U9XCJNYW5nYWxcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJUZWx1XCIgdHlwZWZhY2U9XCJHYXV0YW1pXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVGFtbFwiIHR5cGVmYWNlPVwiTGF0aGFcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJTeXJjXCIgdHlwZWZhY2U9XCJFc3RyYW5nZWxvIEVkZXNzYVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpmb250IHNjcmlwdD1cIk9yeWFcIiB0eXBlZmFjZT1cIkthbGluZ2FcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJNbHltXCIgdHlwZWZhY2U9XCJLYXJ0aWthXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTGFvb1wiIHR5cGVmYWNlPVwiRG9rQ2hhbXBhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiU2luaFwiIHR5cGVmYWNlPVwiSXNrb29sYSBQb3RhXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiTW9uZ1wiIHR5cGVmYWNlPVwiTW9uZ29saWFuIEJhaXRpXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiVmlldFwiIHR5cGVmYWNlPVwiQXJpYWxcIi8+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Zm9udCBzY3JpcHQ9XCJVaWdoXCIgdHlwZWZhY2U9XCJNaWNyb3NvZnQgVWlnaHVyXCIvPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmZvbnQgc2NyaXB0PVwiR2VvclwiIHR5cGVmYWNlPVwiU3lsZmFlblwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzwvYTptaW5vckZvbnQ+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgJzwvYTpmb250U2NoZW1lPic7XG5cblx0XHRvW28ubGVuZ3RoXSA9ICAgJzxhOmZtdFNjaGVtZSBuYW1lPVwiT2ZmaWNlXCI+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8YTpmaWxsU3R5bGVMc3Q+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOmdyYWRGaWxsIHJvdFdpdGhTaGFwZT1cIjFcIj4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6Z3NMc3Q+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI1MDAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzAwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMzUwMDBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjM3MDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgICc8YTpncyBwb3M9XCIxMDAwMDBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjE1MDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzNTAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6bGluIGFuZz1cIjE2MjAwMDAwXCIgc2NhbGVkPVwiMVwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8L2E6Z3JhZEZpbGw+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6Z3JhZEZpbGwgcm90V2l0aFNoYXBlPVwiMVwiPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpnc0xzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjBcIj48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTp0aW50IHZhbD1cIjEwMDAwMFwiLz48YTpzaGFkZSB2YWw9XCIxMDAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjEzMDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiNTAwMDBcIi8+PGE6c2hhZGUgdmFsPVwiMTAwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIzNTAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6bGluIGFuZz1cIjE2MjAwMDAwXCIgc2NhbGVkPVwiMFwiLz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8L2E6Z3JhZEZpbGw+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8L2E6ZmlsbFN0eWxlTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6bG5TdHlsZUxzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpsbiB3PVwiOTUyNVwiIGNhcD1cImZsYXRcIiBjbXBkPVwic25nXCIgYWxnbj1cImN0clwiPjxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIj48YTpzaGFkZSB2YWw9XCI5NTAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMTA1MDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOnNvbGlkRmlsbD48YTpwcnN0RGFzaCB2YWw9XCJzb2xpZFwiLz48L2E6bG4+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPGE6bG4gdz1cIjI1NDAwXCIgY2FwPVwiZmxhdFwiIGNtcGQ9XCJzbmdcIiBhbGduPVwiY3RyXCI+PGE6c29saWRGaWxsPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiLz48L2E6c29saWRGaWxsPjxhOnByc3REYXNoIHZhbD1cInNvbGlkXCIvPjwvYTpsbj4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpsbiB3PVwiMzgxMDBcIiBjYXA9XCJmbGF0XCIgY21wZD1cInNuZ1wiIGFsZ249XCJjdHJcIj48YTpzb2xpZEZpbGw+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCIvPjwvYTpzb2xpZEZpbGw+PGE6cHJzdERhc2ggdmFsPVwic29saWRcIi8+PC9hOmxuPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOmxuU3R5bGVMc3Q+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICc8YTplZmZlY3RTdHlsZUxzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9XCI0MDAwMFwiIGRpc3Q9XCIyMDAwMFwiIGRpcj1cIjU0MDAwMDBcIiByb3RXaXRoU2hhcGU9XCIwXCI+PGE6c3JnYkNsciB2YWw9XCIwMDAwMDBcIj48YTphbHBoYSB2YWw9XCIzODAwMFwiLz48L2E6c3JnYkNscj48L2E6b3V0ZXJTaGR3Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9XCI0MDAwMFwiIGRpc3Q9XCIyMzAwMFwiIGRpcj1cIjU0MDAwMDBcIiByb3RXaXRoU2hhcGU9XCIwXCI+PGE6c3JnYkNsciB2YWw9XCIwMDAwMDBcIj48YTphbHBoYSB2YWw9XCIzNTAwMFwiLz48L2E6c3JnYkNscj48L2E6b3V0ZXJTaGR3Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6b3V0ZXJTaGR3IGJsdXJSYWQ9XCI0MDAwMFwiIGRpc3Q9XCIyMzAwMFwiIGRpcj1cIjU0MDAwMDBcIiByb3RXaXRoU2hhcGU9XCIwXCI+PGE6c3JnYkNsciB2YWw9XCIwMDAwMDBcIj48YTphbHBoYSB2YWw9XCIzNTAwMFwiLz48L2E6c3JnYkNscj48L2E6b3V0ZXJTaGR3Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8L2E6ZWZmZWN0THN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpzY2VuZTNkPjxhOmNhbWVyYSBwcnN0PVwib3J0aG9ncmFwaGljRnJvbnRcIj48YTpyb3QgbGF0PVwiMFwiIGxvbj1cIjBcIiByZXY9XCIwXCIvPjwvYTpjYW1lcmE+PGE6bGlnaHRSaWcgcmlnPVwidGhyZWVQdFwiIGRpcj1cInRcIj48YTpyb3QgbGF0PVwiMFwiIGxvbj1cIjBcIiByZXY9XCIxMjAwMDAwXCIvPjwvYTpsaWdodFJpZz48L2E6c2NlbmUzZD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6c3AzZD48YTpiZXZlbFQgdz1cIjYzNTAwXCIgaD1cIjI1NDAwXCIvPjwvYTpzcDNkPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTplZmZlY3RTdHlsZT4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzwvYTplZmZlY3RTdHlsZUxzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgJzxhOmJnRmlsbFN0eWxlTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzxhOnNvbGlkRmlsbD48YTpzY2hlbWVDbHIgdmFsPVwicGhDbHJcIi8+PC9hOnNvbGlkRmlsbD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmdzTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiNDAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjM1MDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjQwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6dGludCB2YWw9XCI0NTAwMFwiLz48YTpzaGFkZSB2YWw9XCI5OTAwMFwiLz48YTpzYXRNb2QgdmFsPVwiMzUwMDAwXCIvPjwvYTpzY2hlbWVDbHI+PC9hOmdzPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMTAwMDAwXCI+PGE6c2NoZW1lQ2xyIHZhbD1cInBoQ2xyXCI+PGE6c2hhZGUgdmFsPVwiMjAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjI1NTAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPC9hOmdzTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICc8YTpwYXRoIHBhdGg9XCJjaXJjbGVcIj48YTpmaWxsVG9SZWN0IGw9XCI1MDAwMFwiIHQ9XCItODAwMDBcIiByPVwiNTAwMDBcIiBiPVwiMTgwMDAwXCIvPjwvYTpwYXRoPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgJzwvYTpncmFkRmlsbD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICc8YTpncmFkRmlsbCByb3RXaXRoU2hhcGU9XCIxXCI+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgJzxhOmdzTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAgICAnPGE6Z3MgcG9zPVwiMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnRpbnQgdmFsPVwiODAwMDBcIi8+PGE6c2F0TW9kIHZhbD1cIjMwMDAwMFwiLz48L2E6c2NoZW1lQ2xyPjwvYTpncz4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAgJzxhOmdzIHBvcz1cIjEwMDAwMFwiPjxhOnNjaGVtZUNsciB2YWw9XCJwaENsclwiPjxhOnNoYWRlIHZhbD1cIjMwMDAwXCIvPjxhOnNhdE1vZCB2YWw9XCIyMDAwMDBcIi8+PC9hOnNjaGVtZUNscj48L2E6Z3M+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAgJzwvYTpnc0xzdD4nO1xuXHRcdG9bby5sZW5ndGhdID0gICAgICAnPGE6cGF0aCBwYXRoPVwiY2lyY2xlXCI+PGE6ZmlsbFRvUmVjdCBsPVwiNTAwMDBcIiB0PVwiNTAwMDBcIiByPVwiNTAwMDBcIiBiPVwiNTAwMDBcIi8+PC9hOnBhdGg+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgICAnPC9hOmdyYWRGaWxsPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPC9hOmJnRmlsbFN0eWxlTHN0Pic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICc8L2E6Zm10U2NoZW1lPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgJzwvYTp0aGVtZUVsZW1lbnRzPic7XG5cblx0XHRvW28ubGVuZ3RoXSA9ICAnPGE6b2JqZWN0RGVmYXVsdHM+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgJzxhOnNwRGVmPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6c3BQci8+PGE6Ym9keVByLz48YTpsc3RTdHlsZS8+PGE6c3R5bGU+PGE6bG5SZWYgaWR4PVwiMVwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpsblJlZj48YTpmaWxsUmVmIGlkeD1cIjNcIj48YTpzY2hlbWVDbHIgdmFsPVwiYWNjZW50MVwiLz48L2E6ZmlsbFJlZj48YTplZmZlY3RSZWYgaWR4PVwiMlwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTplZmZlY3RSZWY+PGE6Zm9udFJlZiBpZHg9XCJtaW5vclwiPjxhOnNjaGVtZUNsciB2YWw9XCJsdDFcIi8+PC9hOmZvbnRSZWY+PC9hOnN0eWxlPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICc8L2E6c3BEZWY+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAgJzxhOmxuRGVmPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICAnPGE6c3BQci8+PGE6Ym9keVByLz48YTpsc3RTdHlsZS8+PGE6c3R5bGU+PGE6bG5SZWYgaWR4PVwiMlwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTpsblJlZj48YTpmaWxsUmVmIGlkeD1cIjBcIj48YTpzY2hlbWVDbHIgdmFsPVwiYWNjZW50MVwiLz48L2E6ZmlsbFJlZj48YTplZmZlY3RSZWYgaWR4PVwiMVwiPjxhOnNjaGVtZUNsciB2YWw9XCJhY2NlbnQxXCIvPjwvYTplZmZlY3RSZWY+PGE6Zm9udFJlZiBpZHg9XCJtaW5vclwiPjxhOnNjaGVtZUNsciB2YWw9XCJ0eDFcIi8+PC9hOmZvbnRSZWY+PC9hOnN0eWxlPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgICc8L2E6bG5EZWY+Jztcblx0XHRvW28ubGVuZ3RoXSA9ICAnPC9hOm9iamVjdERlZmF1bHRzPic7XG5cdFx0b1tvLmxlbmd0aF0gPSAgJzxhOmV4dHJhQ2xyU2NoZW1lTHN0Lz4nO1xuXHRcdG9bby5sZW5ndGhdID0gJzwvYTp0aGVtZT4nO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblx0LyogW01TLVhMU10gMi40LjMyNiBUT0RPOiBwYXlsb2FkIGlzIGEgemlwIGZpbGUgKi9cblx0ZnVuY3Rpb24gcGFyc2VfVGhlbWUoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGR3VGhlbWVWZXJzaW9uID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdGlmKGR3VGhlbWVWZXJzaW9uID09PSAxMjQyMjYpIHJldHVybjtcblx0XHRibG9iLmwgKz0gbGVuZ3RoLTQ7XG5cdH1cblxuXHQvKiAyLjUuNDkgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQ29sb3JUaGVtZShibG9iLCBsZW5ndGgpIHsgcmV0dXJuIGJsb2IucmVhZF9zaGlmdCg0KTsgfVxuXG5cdC8qIDIuNS4xNTUgKi9cblx0ZnVuY3Rpb24gcGFyc2VfRnVsbENvbG9yRXh0KGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBvID0ge307XG5cdFx0by54Y2xyVHlwZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRvLm5UaW50U2hhZGUgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0c3dpdGNoKG8ueGNsclR5cGUpIHtcblx0XHRcdGNhc2UgMDogYmxvYi5sICs9IDQ7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiBvLnhjbHJWYWx1ZSA9IHBhcnNlX0ljdlhGKGJsb2IsIDQpOyBicmVhaztcblx0XHRcdGNhc2UgMjogby54Y2xyVmFsdWUgPSBwYXJzZV9Mb25nUkdCQShibG9iLCA0KTsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IG8ueGNsclZhbHVlID0gcGFyc2VfQ29sb3JUaGVtZShibG9iLCA0KTsgYnJlYWs7XG5cdFx0XHRjYXNlIDQ6IGJsb2IubCArPSA0OyBicmVhaztcblx0XHR9XG5cdFx0YmxvYi5sICs9IDg7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiAyLjUuMTY0IFRPRE86IHJlYWQgNyBiaXRzKi9cblx0ZnVuY3Rpb24gcGFyc2VfSWN2WEYoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHBhcnNlbm9vcChibG9iLCBsZW5ndGgpO1xuXHR9XG5cblx0LyogMi41LjI4MCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9YRkV4dEdyYWRpZW50KGJsb2IsIGxlbmd0aCkge1xuXHRcdHJldHVybiBwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKTtcblx0fVxuXG5cdC8qIDIuNS4xMDggKi9cblx0ZnVuY3Rpb24gcGFyc2VfRXh0UHJvcChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgZXh0VHlwZSA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY2IgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIG8gPSBbZXh0VHlwZV07XG5cdFx0c3dpdGNoKGV4dFR5cGUpIHtcblx0XHRcdGNhc2UgMHgwNDogY2FzZSAweDA1OiBjYXNlIDB4MDc6IGNhc2UgMHgwODpcblx0XHRcdGNhc2UgMHgwOTogY2FzZSAweDBBOiBjYXNlIDB4MEI6IGNhc2UgMHgwRDpcblx0XHRcdFx0b1sxXSA9IHBhcnNlX0Z1bGxDb2xvckV4dChibG9iLCBjYik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDA2OiBvWzFdID0gcGFyc2VfWEZFeHRHcmFkaWVudChibG9iLCBjYik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDBFOiBjYXNlIDB4MEY6IG9bMV0gPSBibG9iLnJlYWRfc2hpZnQoY2IgPT09IDUgPyAxIDogMik7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIEV4dFByb3AgdHlwZTogXCIgKyBleHRUeXBlICsgXCIgXCIgKyBjYik7XG5cdFx0fVxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi40LjM1NSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9YRkV4dChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgZW5kID0gYmxvYi5sICsgbGVuZ3RoO1xuXHRcdGJsb2IubCArPSAyO1xuXHRcdHZhciBpeGZlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdGJsb2IubCArPSAyO1xuXHRcdHZhciBjZXh0cyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgZXh0ID0gW107XG5cdFx0d2hpbGUoY2V4dHMtLSA+IDApIGV4dC5wdXNoKHBhcnNlX0V4dFByb3AoYmxvYiwgZW5kLWJsb2IubCkpO1xuXHRcdHJldHVybiB7aXhmZTppeGZlLCBleHQ6ZXh0fTtcblx0fVxuXG5cdC8qIHhmIGlzIGFuIFhGLCBzZWUgcGFyc2VfWEZFeHQgZm9yIHhmZXh0ICovXG5cdGZ1bmN0aW9uIHVwZGF0ZV94ZmV4dCh4ZiwgeGZleHQpIHtcblx0XHR4ZmV4dC5mb3JFYWNoKGZ1bmN0aW9uKHhmZSkge1xuXHRcdFx0c3dpdGNoKHhmZVswXSkgeyAvKiAyLjUuMTA4IGV4dFByb3BEYXRhICovXG5cdFx0XHRcdGNhc2UgMHgwNDogYnJlYWs7IC8qIGZvcmVncm91bmQgY29sb3IgKi9cblx0XHRcdFx0Y2FzZSAweDA1OiBicmVhazsgLyogYmFja2dyb3VuZCBjb2xvciAqL1xuXHRcdFx0XHRjYXNlIDB4MDY6IGJyZWFrOyAvKiBncmFkaWVudCBmaWxsICovXG5cdFx0XHRcdGNhc2UgMHgwNzogYnJlYWs7IC8qIHRvcCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0XHRjYXNlIDB4MDg6IGJyZWFrOyAvKiBib3R0b20gY2VsbCBib3JkZXIgY29sb3IgKi9cblx0XHRcdFx0Y2FzZSAweDA5OiBicmVhazsgLyogbGVmdCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0XHRjYXNlIDB4MGE6IGJyZWFrOyAvKiByaWdodCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0XHRjYXNlIDB4MGI6IGJyZWFrOyAvKiBkaWFnb25hbCBjZWxsIGJvcmRlciBjb2xvciAqL1xuXHRcdFx0XHRjYXNlIDB4MGQ6IGJyZWFrOyAvKiB0ZXh0IGNvbG9yICovXG5cdFx0XHRcdGNhc2UgMHgwZTogYnJlYWs7IC8qIGZvbnQgc2NoZW1lICovXG5cdFx0XHRcdGNhc2UgMHgwZjogYnJlYWs7IC8qIGluZGVudGF0aW9uIGxldmVsICovXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvKiAxOC42IENhbGN1bGF0aW9uIENoYWluICovXG5cdGZ1bmN0aW9uIHBhcnNlX2NjX3htbChkYXRhLCBvcHRzKSB7XG5cdFx0dmFyIGQgPSBbXTtcblx0XHRpZighZGF0YSkgcmV0dXJuIGQ7XG5cdFx0dmFyIGwgPSAwLCBpID0gMTtcblx0XHQoZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHtcblx0XHRcdHZhciB5ID0gcGFyc2V4bWx0YWcoeCk7XG5cdFx0XHRzd2l0Y2goeVswXSkge1xuXHRcdFx0XHRjYXNlICc8P3htbCc6IGJyZWFrO1xuXHRcdFx0XHQvKiAxOC42LjIgIGNhbGNDaGFpbiBDVF9DYWxjQ2hhaW4gMSAqL1xuXHRcdFx0XHRjYXNlICc8Y2FsY0NoYWluJzogY2FzZSAnPGNhbGNDaGFpbj4nOiBjYXNlICc8L2NhbGNDaGFpbj4nOiBicmVhaztcblx0XHRcdFx0LyogMTguNi4xICBjIENUX0NhbGNDZWxsIDEgKi9cblx0XHRcdFx0Y2FzZSAnPGMnOiBkZWxldGUgeVswXTsgaWYoeS5pKSBpID0geS5pOyBlbHNlIHkuaSA9IGk7IGQucHVzaCh5KTsgYnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGQ7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9jY194bWwoZGF0YSwgb3B0cykgeyB9XG5cdC8qIFtNUy1YTFNCXSAyLjYuNC4xICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydENhbGNDaGFpbkl0ZW0kKGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciBvdXQgPSB7fTtcblx0XHRvdXQuaSA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgY2VsbCA9IHt9O1xuXHRcdGNlbGwuciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRjZWxsLmMgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0b3V0LnIgPSBlbmNvZGVfY2VsbChjZWxsKTtcblx0XHR2YXIgZmxhZ3MgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0aWYoZmxhZ3MgJiAweDIpIG91dC5sID0gJzEnO1xuXHRcdGlmKGZsYWdzICYgMHg4KSBvdXQuYSA9ICcxJztcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0LyogMTguNiBDYWxjdWxhdGlvbiBDaGFpbiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9jY19iaW4oZGF0YSwgb3B0cykge1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRcdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiBob3BwZXJfY2ModmFsLCBSX24sIFJUKSB7XG5cdFx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDAwM0Y6IC8qICdCcnRDYWxjQ2hhaW5JdGVtJCcgKi9cblx0XHRcdFx0XHRvdXQucHVzaCh2YWwpOyBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX2NjX2JpbihkYXRhLCBvcHRzKSB7IH1cblx0UkVMUy5JTUcgPSBcImh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9vZmZpY2VEb2N1bWVudC8yMDA2L3JlbGF0aW9uc2hpcHMvaW1hZ2VcIjtcblx0UkVMUy5EUkFXID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RyYXdpbmdcIjtcblx0LyogMjAuNSBEcmF3aW5nTUwgLSBTcHJlYWRzaGVldE1MIERyYXdpbmcgKi9cblx0ZnVuY3Rpb24gcGFyc2VfZHJhd2luZyhkYXRhLCByZWxzKSB7XG5cdFx0aWYoIWRhdGEpIHJldHVybiBcIj8/XCI7XG5cdFx0Lypcblx0XHQgIENoYXJ0c2hlZXQgRHJhd2luZzpcblx0XHQgICAtIDIwLjUuMi4zNSB3c0RyIENUX0RyYXdpbmdcblx0XHQgICAgLSAyMC41LjIuMSAgYWJzb2x1dGVBbmNob3IgQ1RfQWJzb2x1dGVBbmNob3Jcblx0XHQgICAgIC0gMjAuNS4yLjE2IGdyYXBoaWNGcmFtZSBDVF9HcmFwaGljYWxPYmplY3RGcmFtZVxuXHRcdCAgICAgIC0gMjAuMS4yLjIuMTYgZ3JhcGhpYyBDVF9HcmFwaGljYWxPYmplY3Rcblx0XHQgICAgICAgLSAyMC4xLjIuMi4xNyBncmFwaGljRGF0YSBDVF9HcmFwaGljYWxPYmplY3REYXRhXG5cdCAgICAgICAgICAtIGNoYXJ0IHJlZmVyZW5jZVxuXHRcdCAgIHRoZSBhY3R1YWwgdHlwZSBpcyBiYXNlZCBvbiB0aGUgVVJJIG9mIHRoZSBncmFwaGljRGF0YVxuXHRcdFx0VE9ETzogaGFuZGxlIGVtYmVkZGVkIGNoYXJ0cyBhbmQgb3RoZXIgdHlwZXMgb2YgZ3JhcGhpY3Ncblx0XHQqL1xuXHRcdHZhciBpZCA9IChkYXRhLm1hdGNoKC88YzpjaGFydCBbXj5dKnI6aWQ9XCIoW15cIl0qKVwiLyl8fFtcIlwiLFwiXCJdKVsxXTtcblxuXHRcdHJldHVybiByZWxzWychaWQnXVtpZF0uVGFyZ2V0O1xuXHR9XG5cblx0LyogTC41LjUuMiBTcHJlYWRzaGVldE1MIENvbW1lbnRzICsgVk1MIFNjaGVtYSAqL1xuXHR2YXIgX3NoYXBlaWQgPSAxMDI0O1xuXHRmdW5jdGlvbiB3cml0ZV9jb21tZW50c192bWwocklkLCBjb21tZW50cykge1xuXHRcdHZhciBjc2l6ZSA9IFsyMTYwMCwgMjE2MDBdO1xuXHRcdC8qIEwuNS4yLjEuMiBQYXRoIEF0dHJpYnV0ZSAqL1xuXHRcdHZhciBiYm94ID0gW1wibTAsMGwwXCIsY3NpemVbMV0sY3NpemVbMF0sY3NpemVbMV0sY3NpemVbMF0sXCIweGVcIl0uam9pbihcIixcIik7XG5cdFx0dmFyIG8gPSBbXG5cdFx0XHR3cml0ZXh0YWcoXCJ4bWxcIiwgbnVsbCwgeyAneG1sbnM6dic6IFhMTUxOUy52LCAneG1sbnM6byc6IFhMTUxOUy5vLCAneG1sbnM6eCc6IFhMTUxOUy54LCAneG1sbnM6bXYnOiBYTE1MTlMubXYgfSkucmVwbGFjZSgvXFwvPi8sXCI+XCIpLFxuXHRcdFx0d3JpdGV4dGFnKFwibzpzaGFwZWxheW91dFwiLCB3cml0ZXh0YWcoXCJvOmlkbWFwXCIsIG51bGwsIHsndjpleHQnOlwiZWRpdFwiLCAnZGF0YSc6cklkfSksIHsndjpleHQnOlwiZWRpdFwifSksXG5cdFx0XHR3cml0ZXh0YWcoXCJ2OnNoYXBldHlwZVwiLCBbXG5cdFx0XHRcdHdyaXRleHRhZyhcInY6c3Ryb2tlXCIsIG51bGwsIHtqb2luc3R5bGU6XCJtaXRlclwifSksXG5cdFx0XHRcdHdyaXRleHRhZyhcInY6cGF0aFwiLCBudWxsLCB7Z3JhZGllbnRzaGFwZW9rOlwidFwiLCAnbzpjb25uZWN0dHlwZSc6XCJyZWN0XCJ9KVxuXHRcdFx0XS5qb2luKFwiXCIpLCB7aWQ6XCJfeDAwMDBfdDIwMlwiLCAnbzpzcHQnOjIwMiwgY29vcmRzaXplOmNzaXplLmpvaW4oXCIsXCIpLHBhdGg6YmJveH0pXG5cdFx0XTtcblx0XHR3aGlsZShfc2hhcGVpZCA8IHJJZCAqIDEwMDApIF9zaGFwZWlkICs9IDEwMDA7XG5cblx0XHRjb21tZW50cy5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gZGVjb2RlX2NlbGwoeFswXSk7IH0pLmZvckVhY2goZnVuY3Rpb24oYyxpKSB7IG8gPSBvLmNvbmNhdChbXG5cdFx0Jzx2OnNoYXBlJyArIHd4dF9oZWxwZXIoe1xuXHRcdFx0aWQ6J194MDAwMF9zJyArICgrK19zaGFwZWlkKSxcblx0XHRcdHR5cGU6XCIjX3gwMDAwX3QyMDJcIixcblx0XHRcdHN0eWxlOlwicG9zaXRpb246YWJzb2x1dGU7IG1hcmdpbi1sZWZ0OjgwcHQ7bWFyZ2luLXRvcDo1cHQ7d2lkdGg6MTA0cHQ7aGVpZ2h0OjY0cHQ7ei1pbmRleDoxMDt2aXNpYmlsaXR5OmhpZGRlblwiLFxuXHRcdFx0ZmlsbGNvbG9yOlwiI0VDRkFENFwiLFxuXHRcdFx0c3Ryb2tlY29sb3I6XCIjZWRlYWExXCJcblx0XHR9KSArICc+Jyxcblx0XHRcdHdyaXRleHRhZygndjpmaWxsJywgd3JpdGV4dGFnKFwibzpmaWxsXCIsIG51bGwsIHt0eXBlOlwiZ3JhZGllbnRVbnNjYWxlZFwiLCAndjpleHQnOlwidmlld1wifSksIHsnY29sb3IyJzpcIiNCRUZGODJcIiwgJ2FuZ2xlJzpcIi0xODBcIiwgJ3R5cGUnOlwiZ3JhZGllbnRcIn0pLFxuXHRcdFx0d3JpdGV4dGFnKFwidjpzaGFkb3dcIiwgbnVsbCwge29uOlwidFwiLCAnb2JzY3VyZWQnOlwidFwifSksXG5cdFx0XHR3cml0ZXh0YWcoXCJ2OnBhdGhcIiwgbnVsbCwgeydvOmNvbm5lY3R0eXBlJzpcIm5vbmVcIn0pLFxuXHRcdFx0Jzx2OnRleHRib3g+PGRpdiBzdHlsZT1cInRleHQtYWxpZ246bGVmdFwiPjwvZGl2Pjwvdjp0ZXh0Ym94PicsXG5cdFx0XHQnPHg6Q2xpZW50RGF0YSBPYmplY3RUeXBlPVwiTm90ZVwiPicsXG5cdFx0XHRcdCc8eDpNb3ZlV2l0aENlbGxzLz4nLFxuXHRcdFx0XHQnPHg6U2l6ZVdpdGhDZWxscy8+Jyxcblx0XHRcdFx0LyogUGFydCA0IDE5LjQuMi4zIEFuY2hvciAoQW5jaG9yKSAqL1xuXHRcdFx0XHR3cml0ZXRhZygneDpBbmNob3InLCBbYy5jLCAwLCBjLnIsIDAsIGMuYyszLCAxMDAsIGMucis1LCAxMDBdLmpvaW4oXCIsXCIpKSxcblx0XHRcdFx0d3JpdGV0YWcoJ3g6QXV0b0ZpbGwnLCBcIkZhbHNlXCIpLFxuXHRcdFx0XHR3cml0ZXRhZygneDpSb3cnLCBTdHJpbmcoYy5yKSksXG5cdFx0XHRcdHdyaXRldGFnKCd4OkNvbHVtbicsIFN0cmluZyhjLmMpKSxcblx0XHRcdFx0Jzx4OlZpc2libGUvPicsXG5cdFx0XHQnPC94OkNsaWVudERhdGE+Jyxcblx0XHQnPC92OnNoYXBlPidcblx0XHRdKTsgfSk7XG5cdFx0by5wdXNoKCc8L3htbD4nKTtcblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cblx0UkVMUy5DTU5UID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NvbW1lbnRzXCI7XG5cblx0ZnVuY3Rpb24gcGFyc2VfY29tbWVudHMoemlwLCBkaXJDb21tZW50cywgc2hlZXRzLCBzaGVldFJlbHMsIG9wdHMpIHtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGRpckNvbW1lbnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHR2YXIgY2Fub25pY2FscGF0aD1kaXJDb21tZW50c1tpXTtcblx0XHRcdHZhciBjb21tZW50cz1wYXJzZV9jbW50KGdldHppcGRhdGEoemlwLCBjYW5vbmljYWxwYXRoLnJlcGxhY2UoL15cXC8vLCcnKSwgdHJ1ZSksIGNhbm9uaWNhbHBhdGgsIG9wdHMpO1xuXHRcdFx0aWYoIWNvbW1lbnRzIHx8ICFjb21tZW50cy5sZW5ndGgpIGNvbnRpbnVlO1xuXHRcdFx0Ly8gZmluZCB0aGUgc2hlZXRzIHRhcmdldGVkIGJ5IHRoZXNlIGNvbW1lbnRzXG5cdFx0XHR2YXIgc2hlZXROYW1lcyA9IGtleXMoc2hlZXRzKTtcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogIT0gc2hlZXROYW1lcy5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR2YXIgc2hlZXROYW1lID0gc2hlZXROYW1lc1tqXTtcblx0XHRcdFx0dmFyIHJlbHMgPSBzaGVldFJlbHNbc2hlZXROYW1lXTtcblx0XHRcdFx0aWYocmVscykge1xuXHRcdFx0XHRcdHZhciByZWwgPSByZWxzW2Nhbm9uaWNhbHBhdGhdO1xuXHRcdFx0XHRcdGlmKHJlbCkgaW5zZXJ0Q29tbWVudHNJbnRvU2hlZXQoc2hlZXROYW1lLCBzaGVldHNbc2hlZXROYW1lXSwgY29tbWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gaW5zZXJ0Q29tbWVudHNJbnRvU2hlZXQoc2hlZXROYW1lLCBzaGVldCwgY29tbWVudHMpIHtcblx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHNoZWV0KTtcblx0XHR2YXIgY2VsbCwgcjtcblx0XHRjb21tZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbW1lbnQpIHtcblx0XHRcdGlmKGRlbnNlKSB7XG5cdFx0XHRcdHIgPSBkZWNvZGVfY2VsbChjb21tZW50LnJlZik7XG5cdFx0XHRcdGlmKCFzaGVldFtyLnJdKSBzaGVldFtyLnJdID0gW107XG5cdFx0XHRcdGNlbGwgPSBzaGVldFtyLnJdW3IuY107XG5cdFx0XHR9IGVsc2UgY2VsbCA9IHNoZWV0W2NvbW1lbnQucmVmXTtcblx0XHRcdGlmICghY2VsbCkge1xuXHRcdFx0XHRjZWxsID0ge307XG5cdFx0XHRcdGlmKGRlbnNlKSBzaGVldFtyLnJdW3IuY10gPSBjZWxsO1xuXHRcdFx0XHRlbHNlIHNoZWV0W2NvbW1lbnQucmVmXSA9IGNlbGw7XG5cdFx0XHRcdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHNoZWV0W1wiIXJlZlwiXXx8XCJCRFdHTzEwMDAwMDE6QTFcIik7XG5cdFx0XHRcdHZhciB0aGlzQ2VsbCA9IGRlY29kZV9jZWxsKGNvbW1lbnQucmVmKTtcblx0XHRcdFx0aWYocmFuZ2Uucy5yID4gdGhpc0NlbGwucikgcmFuZ2Uucy5yID0gdGhpc0NlbGwucjtcblx0XHRcdFx0aWYocmFuZ2UuZS5yIDwgdGhpc0NlbGwucikgcmFuZ2UuZS5yID0gdGhpc0NlbGwucjtcblx0XHRcdFx0aWYocmFuZ2Uucy5jID4gdGhpc0NlbGwuYykgcmFuZ2Uucy5jID0gdGhpc0NlbGwuYztcblx0XHRcdFx0aWYocmFuZ2UuZS5jIDwgdGhpc0NlbGwuYykgcmFuZ2UuZS5jID0gdGhpc0NlbGwuYztcblx0XHRcdFx0dmFyIGVuY29kZWQgPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0XHRpZiAoZW5jb2RlZCAhPT0gc2hlZXRbXCIhcmVmXCJdKSBzaGVldFtcIiFyZWZcIl0gPSBlbmNvZGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWNlbGwuYykgY2VsbC5jID0gW107XG5cdFx0XHR2YXIgbyA9ICh7YTogY29tbWVudC5hdXRob3IsIHQ6IGNvbW1lbnQudCwgcjogY29tbWVudC5yfSk7XG5cdFx0XHRpZihjb21tZW50LmgpIG8uaCA9IGNvbW1lbnQuaDtcblx0XHRcdGNlbGwuYy5wdXNoKG8pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyogMTguNyBDb21tZW50cyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9jb21tZW50c194bWwoZGF0YSwgb3B0cykge1xuXHRcdC8qIDE4LjcuNiBDVF9Db21tZW50cyAqL1xuXHRcdGlmKGRhdGEubWF0Y2goLzwoPzpcXHcrOik/Y29tbWVudHMgKlxcLz4vKSkgcmV0dXJuIFtdO1xuXHRcdHZhciBhdXRob3JzID0gW107XG5cdFx0dmFyIGNvbW1lbnRMaXN0ID0gW107XG5cdFx0dmFyIGF1dGh0YWcgPSBkYXRhLm1hdGNoKC88KD86XFx3KzopP2F1dGhvcnM+KFteXFx1MjYwM10qKTxcXC8oPzpcXHcrOik/YXV0aG9ycz4vKTtcblx0XHRpZihhdXRodGFnICYmIGF1dGh0YWdbMV0pIGF1dGh0YWdbMV0uc3BsaXQoLzxcXC9cXHcqOj9hdXRob3I+LykuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0XHRpZih4ID09PSBcIlwiIHx8IHgudHJpbSgpID09PSBcIlwiKSByZXR1cm47XG5cdFx0XHR2YXIgYSA9IHgubWF0Y2goLzwoPzpcXHcrOik/YXV0aG9yW14+XSo+KC4qKS8pO1xuXHRcdFx0aWYoYSkgYXV0aG9ycy5wdXNoKGFbMV0pO1xuXHRcdH0pO1xuXHRcdHZhciBjbW50dGFnID0gZGF0YS5tYXRjaCgvPCg/Olxcdys6KT9jb21tZW50TGlzdD4oW15cXHUyNjAzXSopPFxcLyg/Olxcdys6KT9jb21tZW50TGlzdD4vKTtcblx0XHRpZihjbW50dGFnICYmIGNtbnR0YWdbMV0pIGNtbnR0YWdbMV0uc3BsaXQoLzxcXC9cXHcqOj9jb21tZW50Pi8pLmZvckVhY2goZnVuY3Rpb24oeCwgaW5kZXgpIHtcblx0XHRcdGlmKHggPT09IFwiXCIgfHwgeC50cmltKCkgPT09IFwiXCIpIHJldHVybjtcblx0XHRcdHZhciBjbSA9IHgubWF0Y2goLzwoPzpcXHcrOik/Y29tbWVudFtePl0qPi8pO1xuXHRcdFx0aWYoIWNtKSByZXR1cm47XG5cdFx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKGNtWzBdKTtcblx0XHRcdHZhciBjb21tZW50ID0gKHsgYXV0aG9yOiB5LmF1dGhvcklkICYmIGF1dGhvcnNbeS5hdXRob3JJZF0gPyBhdXRob3JzW3kuYXV0aG9ySWRdIDogXCJzaGVldGpzZ2hvc3RcIiwgcmVmOiB5LnJlZiwgZ3VpZDogeS5ndWlkIH0pO1xuXHRcdFx0dmFyIGNlbGwgPSBkZWNvZGVfY2VsbCh5LnJlZik7XG5cdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8PSBjZWxsLnIpIHJldHVybjtcblx0XHRcdHZhciB0ZXh0TWF0Y2ggPSB4Lm1hdGNoKC88KD86XFx3KzopP3RleHQ+KFteXFx1MjYwM10qKTxcXC8oPzpcXHcrOik/dGV4dD4vKTtcblx0XHRcdHZhciBydCA9ICEhdGV4dE1hdGNoICYmICEhdGV4dE1hdGNoWzFdICYmIHBhcnNlX3NpKHRleHRNYXRjaFsxXSkgfHwge3I6XCJcIix0OlwiXCIsaDpcIlwifTtcblx0XHRcdGNvbW1lbnQuciA9IHJ0LnI7XG5cdFx0XHRpZihydC5yID09IFwiPHQ+PC90PlwiKSBydC50ID0gcnQuaCA9IFwiXCI7XG5cdFx0XHRjb21tZW50LnQgPSBydC50LnJlcGxhY2UoL1xcclxcbi9nLFwiXFxuXCIpLnJlcGxhY2UoL1xcci9nLFwiXFxuXCIpO1xuXHRcdFx0aWYob3B0cy5jZWxsSFRNTCkgY29tbWVudC5oID0gcnQuaDtcblx0XHRcdGNvbW1lbnRMaXN0LnB1c2goY29tbWVudCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGNvbW1lbnRMaXN0O1xuXHR9XG5cblx0dmFyIENNTlRfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ2NvbW1lbnRzJywgbnVsbCwgeyAneG1sbnMnOiBYTUxOUy5tYWluWzBdIH0pO1xuXHRmdW5jdGlvbiB3cml0ZV9jb21tZW50c194bWwoZGF0YSwgb3B0cykge1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVIsIENNTlRfWE1MX1JPT1RdO1xuXG5cdFx0dmFyIGlhdXRob3IgPSBbXTtcblx0XHRvLnB1c2goXCI8YXV0aG9ycz5cIik7XG5cdFx0ZGF0YS5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4geFsxXTsgfSkuZm9yRWFjaChmdW5jdGlvbihjb21tZW50KSB7XG5cdFx0XHRjb21tZW50Lm1hcChmdW5jdGlvbih4KSB7IHJldHVybiBlc2NhcGV4bWwoeC5hKTsgfSkuZm9yRWFjaChmdW5jdGlvbihhKSB7XG5cdFx0XHRcdGlmKGlhdXRob3IuaW5kZXhPZihhKSA+IC0xKSByZXR1cm47XG5cdFx0XHRcdGlhdXRob3IucHVzaChhKTtcblx0XHRcdFx0by5wdXNoKFwiPGF1dGhvcj5cIiArIGEgKyBcIjwvYXV0aG9yPlwiKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdG8ucHVzaChcIjwvYXV0aG9ycz5cIik7XG5cdFx0by5wdXNoKFwiPGNvbW1lbnRMaXN0PlwiKTtcblx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oZCkge1xuXHRcdFx0ZFsxXS5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcblx0XHRcdFx0LyogMTguNy4zIENUX0NvbW1lbnQgKi9cblx0XHRcdFx0by5wdXNoKCc8Y29tbWVudCByZWY9XCInICsgZFswXSArICdcIiBhdXRob3JJZD1cIicgKyBpYXV0aG9yLmluZGV4T2YoZXNjYXBleG1sKGMuYSkpICsgJ1wiPjx0ZXh0PicpO1xuXHRcdFx0XHRvLnB1c2god3JpdGV0YWcoXCJ0XCIsIGMudCA9PSBudWxsID8gXCJcIiA6IGMudCkpO1xuXHRcdFx0XHRvLnB1c2goJzwvdGV4dD48L2NvbW1lbnQ+Jyk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRvLnB1c2goXCI8L2NvbW1lbnRMaXN0PlwiKTtcblx0XHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L2NvbW1lbnRzPicpOyBvWzFdPW9bMV0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHQvKiBbTVMtWExTQl0gMi40LjI4IEJydEJlZ2luQ29tbWVudCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRCZWdpbkNvbW1lbnQoZGF0YSwgbGVuZ3RoKSB7XG5cdFx0dmFyIG91dCA9IHt9O1xuXHRcdG91dC5pYXV0aG9yID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciByZnggPSBwYXJzZV9VbmNoZWNrZWRSZlgoZGF0YSwgMTYpO1xuXHRcdG91dC5yZnggPSByZngucztcblx0XHRvdXQucmVmID0gZW5jb2RlX2NlbGwocmZ4LnMpO1xuXHRcdGRhdGEubCArPSAxNjsgLyp2YXIgZ3VpZCA9IHBhcnNlX0dVSUQoZGF0YSk7ICovXG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRCZWdpbkNvbW1lbnQoZGF0YSwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMzYpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgZGF0YVsxXS5pYXV0aG9yKTtcblx0XHR3cml0ZV9VbmNoZWNrZWRSZlgoKGRhdGFbMF0pLCBvKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4zMjQgQnJ0Q29tbWVudEF1dGhvciAqL1xuXHR2YXIgcGFyc2VfQnJ0Q29tbWVudEF1dGhvciA9IHBhcnNlX1hMV2lkZVN0cmluZztcblxuXHQvKiBbTVMtWExTQl0gMi4xLjcuOCBDb21tZW50cyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9jb21tZW50c19iaW4oZGF0YSwgb3B0cykge1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHR2YXIgYXV0aG9ycyA9IFtdO1xuXHRcdHZhciBjID0ge307XG5cdFx0dmFyIHBhc3MgPSBmYWxzZTtcblx0XHRyZWNvcmRob3BwZXIoZGF0YSwgZnVuY3Rpb24gaG9wcGVyX2NtbnQodmFsLCBSX24sIFJUKSB7XG5cdFx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDAyNzg6IC8qICdCcnRDb21tZW50QXV0aG9yJyAqL1xuXHRcdFx0XHRcdGF1dGhvcnMucHVzaCh2YWwpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAyN0I6IC8qICdCcnRCZWdpbkNvbW1lbnQnICovXG5cdFx0XHRcdFx0YyA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMjdEOiAvKiAnQnJ0Q29tbWVudFRleHQnICovXG5cdFx0XHRcdFx0Yy50ID0gdmFsLnQ7IGMuaCA9IHZhbC5oOyBjLnIgPSB2YWwucjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMjdDOiAvKiAnQnJ0RW5kQ29tbWVudCcgKi9cblx0XHRcdFx0XHRjLmF1dGhvciA9IGF1dGhvcnNbYy5pYXV0aG9yXTtcblx0XHRcdFx0XHRkZWxldGUgYy5pYXV0aG9yO1xuXHRcdFx0XHRcdGlmKG9wdHMuc2hlZXRSb3dzICYmIG9wdHMuc2hlZXRSb3dzIDw9IGMucmZ4LnIpIGJyZWFrO1xuXHRcdFx0XHRcdGlmKCFjLnQpIGMudCA9IFwiXCI7XG5cdFx0XHRcdFx0ZGVsZXRlIGMucmZ4OyBvdXQucHVzaChjKTsgYnJlYWs7XG5cblx0XHRcdFx0LyogY2FzZSAnQnJ0VWlkJzogKi9cblxuXHRcdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRcdHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjU6IC8qICdCcnRBQ0JlZ2luJyAqLyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjY6IC8qICdCcnRBQ0VuZCcgKi8gYnJlYWs7XG5cblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX2NvbW1lbnRzX2JpbihkYXRhLCBvcHRzKSB7XG5cdFx0dmFyIGJhID0gYnVmX2FycmF5KCk7XG5cdFx0dmFyIGlhdXRob3IgPSBbXTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Db21tZW50c1wiKTtcblx0XHR7IC8qIENPTU1FTlRBVVRIT1JTICovXG5cdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Db21tZW50QXV0aG9yc1wiKTtcblx0XHRcdGRhdGEuZm9yRWFjaChmdW5jdGlvbihjb21tZW50KSB7XG5cdFx0XHRcdGNvbW1lbnRbMV0uZm9yRWFjaChmdW5jdGlvbihjKSB7XG5cdFx0XHRcdFx0aWYoaWF1dGhvci5pbmRleE9mKGMuYSkgPiAtMSkgcmV0dXJuO1xuXHRcdFx0XHRcdGlhdXRob3IucHVzaChjLmEuc3Vic3RyKDAsNTQpKTtcblx0XHRcdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q29tbWVudEF1dGhvclwiLCB3cml0ZV9YTFdpZGVTdHJpbmcoYy5hLnN1YnN0cigwLCA1NCkpKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRDb21tZW50QXV0aG9yc1wiKTtcblx0XHR9XG5cdFx0eyAvKiBDT01NRU5UTElTVCAqL1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQ29tbWVudExpc3RcIik7XG5cdFx0XHRkYXRhLmZvckVhY2goZnVuY3Rpb24oY29tbWVudCkge1xuXHRcdFx0XHRjb21tZW50WzFdLmZvckVhY2goZnVuY3Rpb24oYykge1xuXHRcdFx0XHRcdGMuaWF1dGhvciA9IGlhdXRob3IuaW5kZXhPZihjLmEpO1xuXHRcdFx0XHRcdHZhciByYW5nZSA9IHtzOmRlY29kZV9jZWxsKGNvbW1lbnRbMF0pLGU6ZGVjb2RlX2NlbGwoY29tbWVudFswXSl9O1xuXHRcdFx0XHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkNvbW1lbnRcIiwgd3JpdGVfQnJ0QmVnaW5Db21tZW50KFtyYW5nZSwgY10pKTtcblx0XHRcdFx0XHRpZihjLnQgJiYgYy50Lmxlbmd0aCA+IDApIHdyaXRlX3JlY29yZChiYSwgXCJCcnRDb21tZW50VGV4dFwiLCB3cml0ZV9CcnRDb21tZW50VGV4dChjKSk7XG5cdFx0XHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENvbW1lbnRcIik7XG5cdFx0XHRcdFx0ZGVsZXRlIGMuaWF1dGhvcjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRDb21tZW50TGlzdFwiKTtcblx0XHR9XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZENvbW1lbnRzXCIpO1xuXHRcdHJldHVybiBiYS5lbmQoKTtcblx0fVxuXHRSRUxTLkRTID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2RpYWxvZ3NoZWV0XCI7XG5cdFJFTFMuTVMgPSBcImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vb2ZmaWNlLzIwMDYvcmVsYXRpb25zaGlwcy94bE1hY3Jvc2hlZXRcIjtcblxuXHQvKiBtYWNybyBhbmQgZGlhbG9nIHNoZWV0IHN0dWJzICovXG5cdGZ1bmN0aW9uIHBhcnNlX2RzX2JpbigpIHsgcmV0dXJuIHsnIXR5cGUnOidkaWFsb2cnfTsgfVxuXHRmdW5jdGlvbiBwYXJzZV9kc194bWwoKSB7IHJldHVybiB7JyF0eXBlJzonZGlhbG9nJ307IH1cblx0ZnVuY3Rpb24gcGFyc2VfbXNfYmluKCkgeyByZXR1cm4geychdHlwZSc6J21hY3JvJ307IH1cblx0ZnVuY3Rpb24gcGFyc2VfbXNfeG1sKCkgeyByZXR1cm4geychdHlwZSc6J21hY3JvJ307IH1cblx0LyogVE9ETzogaXQgd2lsbCBiZSB1c2VmdWwgdG8gcGFyc2UgdGhlIGZ1bmN0aW9uIHN0ciAqL1xuXHR2YXIgcmNfdG9fYTEgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcmNyZWdleCA9IC8oXnxbXkEtWmEtel0pUihcXFs/KSgtP1xcZCt8KVxcXT9DKFxcWz8pKC0/XFxkK3wpXFxdPy9nO1xuXHRcdHZhciByY2Jhc2UgPSAoe3I6MCxjOjB9KTtcblx0XHRmdW5jdGlvbiByY2Z1bmMoJCQsJDEsJDIsJDMsJDQsJDUpIHtcblx0XHRcdHZhciBSID0gJDMubGVuZ3RoPjA/cGFyc2VJbnQoJDMsMTApfDA6MCwgQyA9ICQ1Lmxlbmd0aD4wP3BhcnNlSW50KCQ1LDEwKXwwOjA7XG5cdFx0XHRpZihDPDAgJiYgJDQubGVuZ3RoID09PSAwKSBDPTA7XG5cdFx0XHR2YXIgY1JlbCA9IGZhbHNlLCByUmVsID0gZmFsc2U7XG5cdFx0XHRpZigkNC5sZW5ndGggPiAwIHx8ICQ1Lmxlbmd0aCA9PSAwKSBjUmVsID0gdHJ1ZTsgaWYoY1JlbCkgQyArPSByY2Jhc2UuYzsgZWxzZSAtLUM7XG5cdFx0XHRpZigkMi5sZW5ndGggPiAwIHx8ICQzLmxlbmd0aCA9PSAwKSByUmVsID0gdHJ1ZTsgaWYoclJlbCkgUiArPSByY2Jhc2UucjsgZWxzZSAtLVI7XG5cdFx0XHRyZXR1cm4gJDEgKyAoY1JlbCA/IFwiXCIgOiBcIiRcIikgKyBlbmNvZGVfY29sKEMpICsgKHJSZWwgPyBcIlwiIDogXCIkXCIpICsgZW5jb2RlX3JvdyhSKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJjX3RvX2ExKGZzdHIsIGJhc2UpIHtcblx0XHRcdHJjYmFzZSA9IGJhc2U7XG5cdFx0XHRyZXR1cm4gZnN0ci5yZXBsYWNlKHJjcmVnZXgsIHJjZnVuYyk7XG5cdFx0fTtcblx0fSkoKTtcblxuXHR2YXIgY3JlZnJlZ2V4ID0gLyhefFteLl9BLVowLTldKShbJF0/KShbQS1aXXsxLDJ9fFtBLVddW0EtWl17Mn18WFtBLUVdW0EtWl18WEZbQS1EXSkoWyRdPykoWzEtOV1cXGR7MCw1fXwxMFswLTNdXFxkezR9fDEwNFswLTddXFxkezN9fDEwNDhbMC00XVxcZHsyfXwxMDQ4NVswLTZdXFxkfDEwNDg1N1swLTZdKSg/IVtfLlxcKEEtWmEtejAtOV0pL2c7XG5cdHZhciBhMV90b19yYyA9KGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGExX3RvX3JjKGZzdHIsIGJhc2UpIHtcblx0XHRcdHJldHVybiBmc3RyLnJlcGxhY2UoY3JlZnJlZ2V4LCBmdW5jdGlvbigkMCwgJDEsICQyLCAkMywgJDQsICQ1LCBvZmYsIHN0cikge1xuXHRcdFx0XHQvKiBUT0RPOiBoYW5kbGUgZml4Y29sIC8gZml4cm93ICovXG5cdFx0XHRcdHZhciBjID0gZGVjb2RlX2NvbCgkMykgLSBiYXNlLmM7XG5cdFx0XHRcdHZhciByID0gZGVjb2RlX3JvdygkNSkgLSBiYXNlLnI7XG5cdFx0XHRcdHJldHVybiAkMSArIFwiUlwiICsgKHIgPT0gMCA/IFwiXCIgOiBcIltcIiArIHIgKyBcIl1cIikgKyBcIkNcIiArIChjID09IDAgPyBcIlwiIDogXCJbXCIgKyBjICsgXCJdXCIpO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fSkoKTtcblxuXHQvKiBubyBkZWZpbmVkIG5hbWUgY2FuIGNvbGxpZGUgd2l0aCBhIHZhbGlkIGNlbGwgYWRkcmVzcyBBMTpYRkQxMDQ4NTc2IC4uLiBleGNlcHQgTE9HMTAhICovXG5cdGZ1bmN0aW9uIHNoaWZ0X2Zvcm11bGFfc3RyKGYsIGRlbHRhKSB7XG5cdFx0cmV0dXJuIGYucmVwbGFjZShjcmVmcmVnZXgsIGZ1bmN0aW9uKCQwLCAkMSwgJDIsICQzLCAkNCwgJDUsIG9mZiwgc3RyKSB7XG5cdFx0XHRyZXR1cm4gJDErKCQyPT1cIiRcIiA/ICQyKyQzIDogZW5jb2RlX2NvbChkZWNvZGVfY29sKCQzKStkZWx0YS5jKSkrKCQ0PT1cIiRcIiA/ICQ0KyQ1IDogZW5jb2RlX3JvdyhkZWNvZGVfcm93KCQ1KSArIGRlbHRhLnIpKTtcblx0XHR9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNoaWZ0X2Zvcm11bGFfeGxzeChmLCByYW5nZSwgY2VsbCkge1xuXHRcdHZhciByID0gZGVjb2RlX3JhbmdlKHJhbmdlKSwgcyA9IHIucywgYyA9IGRlY29kZV9jZWxsKGNlbGwpO1xuXHRcdHZhciBkZWx0YSA9IHtyOmMuciAtIHMuciwgYzpjLmMgLSBzLmN9O1xuXHRcdHJldHVybiBzaGlmdF9mb3JtdWxhX3N0cihmLCBkZWx0YSk7XG5cdH1cblx0LyogLS0tIGZvcm11bGEgcmVmZXJlbmNlcyBwb2ludCB0byBNUy1YTFMgLS0tICovXG5cdC8qIFNtYWxsIGhlbHBlcnMgKi9cblx0ZnVuY3Rpb24gcGFyc2VyZWFkKGwpIHsgcmV0dXJuIGZ1bmN0aW9uKGJsb2IsIGxlbmd0aCkgeyBibG9iLmwrPWw7IHJldHVybjsgfTsgfVxuXHRmdW5jdGlvbiBwYXJzZXJlYWQxKGJsb2IpIHsgYmxvYi5sKz0xOyByZXR1cm47IH1cblxuXHQvKiBSZ2NlIEhlbHBlcnMgKi9cblxuXHQvKiAyLjUuNTEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQ29sUmVsVShibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdChsZW5ndGggPT0gMSA/IDEgOiAyKTtcblx0XHRyZXR1cm4gW2MgJiAweDNGRkYsIChjID4+IDE0KSAmIDEsIChjID4+IDE1KSAmIDFdO1xuXHR9XG5cblx0LyogW01TLVhMU10gMi41LjE5OC4xMDUgKi9cblx0LyogW01TLVhMU0JdIDIuNS45Ny44OSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SZ2NlQXJlYShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdyA9IDI7XG5cdFx0aWYob3B0cykge1xuXHRcdFx0aWYob3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDw9IDUpIHJldHVybiBwYXJzZV9SZ2NlQXJlYV9CSUZGMihibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdFx0ZWxzZSBpZihvcHRzLmJpZmYgPT0gMTIpIHcgPSA0O1xuXHRcdH1cblx0XHR2YXIgcj1ibG9iLnJlYWRfc2hpZnQodyksIFI9YmxvYi5yZWFkX3NoaWZ0KHcpO1xuXHRcdHZhciBjPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdFx0dmFyIEM9cGFyc2VfQ29sUmVsVShibG9iLCAyKTtcblx0XHRyZXR1cm4geyBzOntyOnIsIGM6Y1swXSwgY1JlbDpjWzFdLCByUmVsOmNbMl19LCBlOntyOlIsIGM6Q1swXSwgY1JlbDpDWzFdLCByUmVsOkNbMl19IH07XG5cdH1cblx0LyogQklGRiAyLTUgZW5jb2RlcyBmbGFncyBpbiB0aGUgcm93IGZpZWxkICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JnY2VBcmVhX0JJRkYyKGJsb2IvKiwgbGVuZ3RoLCBvcHRzKi8pIHtcblx0XHR2YXIgcj1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpLCBSPXBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdFx0dmFyIGM9YmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdHZhciBDPWJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRyZXR1cm4geyBzOntyOnJbMF0sIGM6YywgY1JlbDpyWzFdLCByUmVsOnJbMl19LCBlOntyOlJbMF0sIGM6QywgY1JlbDpSWzFdLCByUmVsOlJbMl19IH07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjEwNSBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JnY2VBcmVhUmVsKGJsb2IsIGxlbmd0aC8qLCBvcHRzKi8pIHtcblx0XHR2YXIgcj1ibG9iLnJlYWRfc2hpZnQobGVuZ3RoID09IDEyID8gNCA6IDIpLCBSPWJsb2IucmVhZF9zaGlmdChsZW5ndGggPT0gMTIgPyA0IDogMik7XG5cdFx0dmFyIGM9cGFyc2VfQ29sUmVsVShibG9iLCAyKTtcblx0XHR2YXIgQz1wYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHRcdHJldHVybiB7IHM6e3I6ciwgYzpjWzBdLCBjUmVsOmNbMV0sIHJSZWw6Y1syXX0sIGU6e3I6UiwgYzpDWzBdLCBjUmVsOkNbMV0sIHJSZWw6Q1syXX0gfTtcblx0fVxuXG5cdC8qIDIuNS4xOTguMTA5ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JnY2VMb2MoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0aWYob3B0cyAmJiBvcHRzLmJpZmYgPj0gMiAmJiBvcHRzLmJpZmYgPD0gNSkgcmV0dXJuIHBhcnNlX1JnY2VMb2NfQklGRjIoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHR2YXIgciA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAxMiA/IDQgOiAyKTtcblx0XHR2YXIgYyA9IHBhcnNlX0NvbFJlbFUoYmxvYiwgMik7XG5cdFx0cmV0dXJuIHtyOnIsIGM6Y1swXSwgY1JlbDpjWzFdLCByUmVsOmNbMl19O1xuXHR9XG5cdGZ1bmN0aW9uIHBhcnNlX1JnY2VMb2NfQklGRjIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHIgPSBwYXJzZV9Db2xSZWxVKGJsb2IsIDIpO1xuXHRcdHZhciBjID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdHJldHVybiB7cjpyWzBdLCBjOmMsIGNSZWw6clsxXSwgclJlbDpyWzJdfTtcblx0fVxuXG5cdC8qIFtNUy1YTFNdIDIuNS4xOTguMTExIFRPRE8gKi9cblx0LyogW01TLVhMU0JdIDIuNS45Ny45MiBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1JnY2VMb2NSZWwoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGJpZmYgPSBvcHRzICYmIG9wdHMuYmlmZiA/IG9wdHMuYmlmZiA6IDg7XG5cdFx0aWYoYmlmZiA+PSAyICYmIGJpZmYgPD0gNSkgcmV0dXJuIHBhcnNlX1JnY2VMb2NSZWxfQklGRjIoYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHR2YXIgciA9IGJsb2IucmVhZF9zaGlmdChiaWZmID49IDEyID8gNCA6IDIpO1xuXHRcdHZhciBjbCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY1JlbCA9IChjbCAmIDB4ODAwMCkgPj4gMTUsIHJSZWwgPSAoY2wgJiAweDQwMDApID4+IDE0O1xuXHRcdGNsICY9IDB4M0ZGRjtcblx0XHRpZihyUmVsID09IDEpIHdoaWxlKHIgPiAweDdGRkZGKSByIC09IDB4MTAwMDAwO1xuXHRcdGlmKGNSZWwgPT0gMSkgd2hpbGUoY2wgPiAweDFGRkYpIGNsID0gY2wgLSAweDQwMDA7XG5cdFx0cmV0dXJuIHtyOnIsYzpjbCxjUmVsOmNSZWwsclJlbDpyUmVsfTtcblx0fVxuXHRmdW5jdGlvbiBwYXJzZV9SZ2NlTG9jUmVsX0JJRkYyKGJsb2IsIGxlbmd0aCkge1xuXHRcdHZhciBybCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgYyA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgclJlbCA9IChybCAmIDB4ODAwMCkgPj4gMTUsIGNSZWwgPSAocmwgJiAweDQwMDApID4+IDE0O1xuXHRcdHJsICY9IDB4M0ZGRjtcblx0XHRpZihyUmVsID09IDEgJiYgcmwgPj0gMHgyMDAwKSBybCA9IHJsIC0gMHg0MDAwO1xuXHRcdGlmKGNSZWwgPT0gMSAmJiBjID49IDB4ODApIGMgPSBjIC0gMHgxMDA7XG5cdFx0cmV0dXJuIHtyOnJsLGM6YyxjUmVsOmNSZWwsclJlbDpyUmVsfTtcblx0fVxuXG5cdC8qIFB0ZyBUb2tlbnMgKi9cblxuXHQvKiAyLjUuMTk4LjI3ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWEoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRcdHZhciBhcmVhID0gcGFyc2VfUmdjZUFyZWEoYmxvYiwgb3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDw9IDUgPyA2IDogOCwgb3B0cyk7XG5cdFx0cmV0dXJuIFt0eXBlLCBhcmVhXTtcblx0fVxuXG5cdC8qIFtNUy1YTFNdIDIuNS4xOTguMjggKi9cblx0LyogW01TLVhMU0JdIDIuNS45Ny4xOSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdBcmVhM2QoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRcdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIsICdpJyk7XG5cdFx0dmFyIHcgPSA4O1xuXHRcdGlmKG9wdHMpIHN3aXRjaChvcHRzLmJpZmYpIHtcblx0XHRcdGNhc2UgNTogYmxvYi5sICs9IDEyOyB3ID0gNjsgYnJlYWs7XG5cdFx0XHRjYXNlIDEyOiB3ID0gMTI7IGJyZWFrO1xuXHRcdH1cblx0XHR2YXIgYXJlYSA9IHBhcnNlX1JnY2VBcmVhKGJsb2IsIHcsIG9wdHMpO1xuXHRcdHJldHVybiBbdHlwZSwgaXh0aSwgYXJlYV07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjI5ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWFFcnIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRcdGJsb2IubCArPSBvcHRzICYmIG9wdHMuYmlmZiA+IDggPyAxMiA6IDg7XG5cdFx0cmV0dXJuIFt0eXBlXTtcblx0fVxuXHQvKiAyLjUuMTk4LjMwICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0FyZWFFcnIzZChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdFx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0dmFyIHcgPSA4O1xuXHRcdGlmKG9wdHMpIHN3aXRjaChvcHRzLmJpZmYpIHtcblx0XHRcdGNhc2UgNTogYmxvYi5sICs9IDEyOyB3ID0gNjsgYnJlYWs7XG5cdFx0XHRjYXNlIDEyOiB3ID0gMTI7IGJyZWFrO1xuXHRcdH1cblx0XHRibG9iLmwgKz0gdztcblx0XHRyZXR1cm4gW3R5cGUsIGl4dGldO1xuXHR9XG5cblx0LyogMi41LjE5OC4zMSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdBcmVhTihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubCsrXSAmIDB4NjApID4+IDU7XG5cdFx0dmFyIGFyZWEgPSBwYXJzZV9SZ2NlQXJlYVJlbChibG9iLCBvcHRzICYmIG9wdHMuYmlmZiA+IDggPyAxMiA6IDgsIG9wdHMpO1xuXHRcdHJldHVybiBbdHlwZSwgYXJlYV07XG5cdH1cblxuXHQvKiBbTVMtWExTXSAyLjUuMTk4LjMyICovXG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuMjMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnQXJyYXkoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRcdGJsb2IubCArPSBvcHRzLmJpZmYgPT0gMiA/IDYgOiBvcHRzLmJpZmYgPT0gMTIgPyAxNCA6IDc7XG5cdFx0cmV0dXJuIFt0eXBlXTtcblx0fVxuXG5cdC8qIDIuNS4xOTguMzMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnQXR0ckJheGNlbChibG9iLCBsZW5ndGgpIHtcblx0XHR2YXIgYml0U2VtaSA9IGJsb2JbYmxvYi5sKzFdICYgMHgwMTsgLyogMSA9IHZvbGF0aWxlICovXG5cdFx0dmFyIGJpdEJheGNlbCA9IDE7XG5cdFx0YmxvYi5sICs9IDQ7XG5cdFx0cmV0dXJuIFtiaXRTZW1pLCBiaXRCYXhjZWxdO1xuXHR9XG5cblx0LyogMi41LjE5OC4zNCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdBdHRyQ2hvb3NlKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdGJsb2IubCArPTI7XG5cdFx0dmFyIG9mZnNldCA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpO1xuXHRcdHZhciBvID0gW107XG5cdFx0Lyogb2Zmc2V0IGlzIDEgbGVzcyB0aGFuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgKi9cblx0XHRmb3IodmFyIGkgPSAwOyBpIDw9IG9mZnNldDsgKytpKSBvLnB1c2goYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMikpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi41LjE5OC4zNSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdBdHRyR290byhibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgYml0R290byA9IChibG9iW2Jsb2IubCsxXSAmIDB4RkYpID8gMSA6IDA7XG5cdFx0YmxvYi5sICs9IDI7XG5cdFx0cmV0dXJuIFtiaXRHb3RvLCBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKV07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjM2ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJJZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgYml0SWYgPSAoYmxvYltibG9iLmwrMV0gJiAweEZGKSA/IDEgOiAwO1xuXHRcdGJsb2IubCArPSAyO1xuXHRcdHJldHVybiBbYml0SWYsIGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA9PSAyID8gMSA6IDIpXTtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuMjggKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnQXR0cklmRXJyb3IoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIGJpdElmID0gKGJsb2JbYmxvYi5sKzFdICYgMHhGRikgPyAxIDogMDtcblx0XHRibG9iLmwgKz0gMjtcblx0XHRyZXR1cm4gW2JpdElmLCBibG9iLnJlYWRfc2hpZnQoMildO1xuXHR9XG5cblx0LyogMi41LjE5OC4zNyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdBdHRyU2VtaShibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgYml0U2VtaSA9IChibG9iW2Jsb2IubCsxXSAmIDB4RkYpID8gMSA6IDA7XG5cdFx0YmxvYi5sICs9IG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAzIDogNDtcblx0XHRyZXR1cm4gW2JpdFNlbWldO1xuXHR9XG5cblx0LyogMi41LjE5OC40MCAodXNlZCBieSBQdGdBdHRyU3BhY2UgYW5kIFB0Z0F0dHJTcGFjZVNlbWkpICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTcGFjZVR5cGUoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0dmFyIHR5cGUgPSBibG9iLnJlYWRfc2hpZnQoMSksIGNjaCA9IGJsb2IucmVhZF9zaGlmdCgxKTtcblx0XHRyZXR1cm4gW3R5cGUsIGNjaF07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjM4ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTcGFjZShibG9iLCBsZW5ndGgpIHtcblx0XHRibG9iLnJlYWRfc2hpZnQoMik7XG5cdFx0cmV0dXJuIHBhcnNlX1B0Z0F0dHJTcGFjZVR5cGUoYmxvYiwgMik7XG5cdH1cblxuXHQvKiAyLjUuMTk4LjM5ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTcGFjZVNlbWkoYmxvYiwgbGVuZ3RoKSB7XG5cdFx0YmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHJldHVybiBwYXJzZV9QdGdBdHRyU3BhY2VUeXBlKGJsb2IsIDIpO1xuXHR9XG5cblx0LyogMi41LjE5OC44NCBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z1JlZihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgcHRnID0gYmxvYltibG9iLmxdICYgMHgxRjtcblx0XHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0XHRibG9iLmwgKz0gMTtcblx0XHR2YXIgbG9jID0gcGFyc2VfUmdjZUxvYyhibG9iLCAwLCBvcHRzKTtcblx0XHRyZXR1cm4gW3R5cGUsIGxvY107XG5cdH1cblxuXHQvKiAyLjUuMTk4Ljg4IFRPRE8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnUmVmTihibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgdHlwZSA9IChibG9iW2Jsb2IubF0gJiAweDYwKT4+NTtcblx0XHRibG9iLmwgKz0gMTtcblx0XHR2YXIgbG9jID0gcGFyc2VfUmdjZUxvY1JlbChibG9iLCAwLCBvcHRzKTtcblx0XHRyZXR1cm4gW3R5cGUsIGxvY107XG5cdH1cblxuXHQvKiAyLjUuMTk4Ljg1IFRPRE8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnUmVmM2QoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmxdICYgMHg2MCk+PjU7XG5cdFx0YmxvYi5sICs9IDE7XG5cdFx0dmFyIGl4dGkgPSBibG9iLnJlYWRfc2hpZnQoMik7IC8vIFh0aUluZGV4XG5cdFx0dmFyIGxvYyA9IHBhcnNlX1JnY2VMb2MoYmxvYiwgMCwgb3B0cyk7IC8vIFRPRE86IG9yIFJnY2VMb2NSZWxcblx0XHRyZXR1cm4gW3R5cGUsIGl4dGksIGxvY107XG5cdH1cblxuXG5cdC8qIDIuNS4xOTguNjIgVE9ETyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdGdW5jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBwdGcgPSBibG9iW2Jsb2IubF0gJiAweDFGO1xuXHRcdHZhciB0eXBlID0gKGJsb2JbYmxvYi5sXSAmIDB4NjApPj41O1xuXHRcdGJsb2IubCArPSAxO1xuXHRcdHZhciBpZnRhYiA9IGJsb2IucmVhZF9zaGlmdChvcHRzICYmIG9wdHMuYmlmZiA8PSAzID8gMSA6IDIpO1xuXHRcdHJldHVybiBbRnRhYkFyZ2NbaWZ0YWJdLCBGdGFiW2lmdGFiXSwgdHlwZV07XG5cdH1cblx0LyogMi41LjE5OC42MyBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0Z1bmNWYXIoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0YmxvYi5sKys7XG5cdFx0dmFyIGNwYXJhbXMgPSBibG9iLnJlYWRfc2hpZnQoMSksIHRhYiA9IG9wdHMgJiYgb3B0cy5iaWZmIDw9IDMgPyBbMCwgYmxvYi5yZWFkX3NoaWZ0KDEpXTogcGFyc2V0YWIoYmxvYik7XG5cdFx0cmV0dXJuIFtjcGFyYW1zLCAodGFiWzBdID09PSAwID8gRnRhYiA6IENldGFiKVt0YWJbMV1dXTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNldGFiKGJsb2IsIGxlbmd0aCkge1xuXHRcdHJldHVybiBbYmxvYltibG9iLmwrMV0+PjcsIGJsb2IucmVhZF9zaGlmdCgyKSAmIDB4N0ZGRl07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjQxICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0F0dHJTdW0oYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0YmxvYi5sICs9IG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAzIDogNDsgcmV0dXJuO1xuXHR9XG5cblx0LyogMi41LjE5OC40MyAqL1xuXHR2YXIgcGFyc2VfUHRnQ29uY2F0ID0gcGFyc2VyZWFkMTtcblxuXHQvKiAyLjUuMTk4LjU4ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0V4cChibG9iLCBsZW5ndGgsIG9wdHMpIHtcblx0XHRibG9iLmwrKztcblx0XHRpZihvcHRzICYmIG9wdHMuYmlmZiA9PSAxMikgcmV0dXJuIFtibG9iLnJlYWRfc2hpZnQoNCwgJ2knKSwgMF07XG5cdFx0dmFyIHJvdyA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHR2YXIgY29sID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdFx0cmV0dXJuIFtyb3csIGNvbF07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjU3ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0VycihibG9iLCBsZW5ndGgpIHsgYmxvYi5sKys7IHJldHVybiBCRXJyW2Jsb2IucmVhZF9zaGlmdCgxKV07IH1cblxuXHQvKiAyLjUuMTk4LjY2ICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0ludChibG9iLCBsZW5ndGgpIHsgYmxvYi5sKys7IHJldHVybiBibG9iLnJlYWRfc2hpZnQoMik7IH1cblxuXHQvKiAyLjUuMTk4LjQyICovXG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z0Jvb2woYmxvYiwgbGVuZ3RoKSB7IGJsb2IubCsrOyByZXR1cm4gYmxvYi5yZWFkX3NoaWZ0KDEpIT09MDt9XG5cblx0LyogMi41LjE5OC43OSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdOdW0oYmxvYiwgbGVuZ3RoKSB7IGJsb2IubCsrOyByZXR1cm4gcGFyc2VfWG51bShibG9iLCA4KTsgfVxuXG5cdC8qIDIuNS4xOTguODkgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnU3RyKGJsb2IsIGxlbmd0aCwgb3B0cykgeyBibG9iLmwrKzsgcmV0dXJuIHBhcnNlX1Nob3J0WExVbmljb2RlU3RyaW5nKGJsb2IsIGxlbmd0aC0xLCBvcHRzKTsgfVxuXG5cdC8qIFtNUy1YTFNdIDIuNS4xOTIuMTEyICsgMi41LjE5Mi4xMXszLDQsNSw2LDd9ICovXG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuOTMgKyAyLjUuOTcuOXs0LDUsNiw3fSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9TZXJBcihibG9iLCBiaWZmKSB7XG5cdFx0dmFyIHZhbCA9IFtibG9iLnJlYWRfc2hpZnQoMSldO1xuXHRcdGlmKGJpZmYgPT0gMTIpIHN3aXRjaCh2YWxbMF0pIHtcblx0XHRcdGNhc2UgMHgwMjogdmFsWzBdID0gMHgwNDsgYnJlYWs7IC8qIFNlckJvb2wgKi9cblx0XHRcdGNhc2UgMHgwNDogdmFsWzBdID0gMHgxMDsgYnJlYWs7IC8qIFNlckVyciAqL1xuXHRcdFx0Y2FzZSAweDAwOiB2YWxbMF0gPSAweDAxOyBicmVhazsgLyogU2VyTnVtICovXG5cdFx0XHRjYXNlIDB4MDE6IHZhbFswXSA9IDB4MDI7IGJyZWFrOyAvKiBTZXJTdHIgKi9cblx0XHR9XG5cdFx0c3dpdGNoKHZhbFswXSkge1xuXHRcdFx0LyogMi41LjE5Mi4xMTMgKi9cblx0XHRcdGNhc2UgMHgwNDogLyogU2VyQm9vbCAtLSBib29sZWFuICovXG5cdFx0XHRcdHZhbFsxXSA9IHBhcnNlYm9vbChibG9iLCAxKSA/ICdUUlVFJyA6ICdGQUxTRSc7XG5cdFx0XHRcdGJsb2IubCArPSA3OyBicmVhaztcblx0XHRcdC8qIDIuNS4xOTIuMTE0ICovXG5cdFx0XHRjYXNlIDB4MTA6IC8qIFNlckVyciAtLSBlcnJvciAqL1xuXHRcdFx0XHR2YWxbMV0gPSBCRXJyW2Jsb2JbYmxvYi5sXV07XG5cdFx0XHRcdGJsb2IubCArPSA4OyBicmVhaztcblx0XHRcdC8qIDIuNS4xOTIuMTE1ICovXG5cdFx0XHRjYXNlIDB4MDA6IC8qIFNlck5pbCAtLSBob25lc3RseSwgSSdtIG5vdCBzdXJlIGhvdyB0byByZXByb2R1Y2UgdGhpcyAqL1xuXHRcdFx0XHRibG9iLmwgKz0gODsgYnJlYWs7XG5cdFx0XHQvKiAyLjUuMTkyLjExNiAqL1xuXHRcdFx0Y2FzZSAweDAxOiAvKiBTZXJOdW0gLS0gWG51bSAqL1xuXHRcdFx0XHR2YWxbMV0gPSBwYXJzZV9YbnVtKGJsb2IsIDgpOyBicmVhaztcblx0XHRcdC8qIDIuNS4xOTIuMTE3ICovXG5cdFx0XHRjYXNlIDB4MDI6IC8qIFNlclN0ciAtLSBYTFVuaWNvZGVTdHJpbmcgKDwyNTYgY2hhcnMpICovXG5cdFx0XHRcdHZhbFsxXSA9IHBhcnNlX1hMVW5pY29kZVN0cmluZzIoYmxvYiwgMCwge2JpZmY6YmlmZiA+IDAgJiYgYmlmZiA8IDggPyAyIDogYmlmZn0pOyBicmVhaztcblx0XHRcdC8vIGRlZmF1bHQ6IHRocm93IFwiQmFkIFNlckFyOiBcIiArIHZhbFswXTsgLyogVW5yZWFjaGFibGUgKi9cblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qIDIuNS4xOTguNjEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnRXh0cmFNZW0oYmxvYiwgY2NlKSB7XG5cdFx0dmFyIGNvdW50ID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciBvdXQgPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGNvdW50OyArK2kpIG91dC5wdXNoKHBhcnNlX1JlZjhVKGJsb2IsIDgpKTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0LyogMi41LjE5OC41OSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdFeHRyYUFycmF5KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciByb3dzID0gMCwgY29scyA9IDA7XG5cdFx0aWYob3B0cy5iaWZmID09IDEyKSB7XG5cdFx0XHRyb3dzID0gYmxvYi5yZWFkX3NoaWZ0KDQpOyAvLyBEUndcblx0XHRcdGNvbHMgPSBibG9iLnJlYWRfc2hpZnQoNCk7IC8vIERDb2xcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29scyA9IDEgKyBibG9iLnJlYWRfc2hpZnQoMSk7IC8vRENvbEJ5dGVVXG5cdFx0XHRyb3dzID0gMSArIGJsb2IucmVhZF9zaGlmdCgyKTsgLy9EUndcblx0XHR9XG5cdFx0aWYob3B0cy5iaWZmID49IDIgJiYgb3B0cy5iaWZmIDwgOCkgeyAtLXJvd3M7IGlmKC0tY29scyA9PSAwKSBjb2xzID0gMHgxMDA7IH1cblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGZvcih2YXIgaSA9IDAsIG89W107IGkgIT0gcm93cyAmJiAob1tpXSA9IFtdKTsgKytpKVxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiAhPSBjb2xzOyArK2opIG9baV1bal0gPSBwYXJzZV9TZXJBcihibG9iLCBvcHRzLmJpZmYpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogMi41LjE5OC43NiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdOYW1lKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdHZhciB3ID0gKCFvcHRzIHx8IChvcHRzLmJpZmYgPj0gOCkpID8gNCA6IDI7XG5cdFx0dmFyIG5hbWVpbmRleCA9IGJsb2IucmVhZF9zaGlmdCh3KTtcblx0XHRzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0XHRjYXNlIDI6IGJsb2IubCArPSA1OyBicmVhaztcblx0XHRcdGNhc2UgMzogY2FzZSA0OiBibG9iLmwgKz0gODsgYnJlYWs7XG5cdFx0XHRjYXNlIDU6IGJsb2IubCArPSAxMjsgYnJlYWs7XG5cdFx0fVxuXHRcdHJldHVybiBbdHlwZSwgMCwgbmFtZWluZGV4XTtcblx0fVxuXG5cdC8qIDIuNS4xOTguNzcgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnTmFtZVgoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0aWYob3B0cy5iaWZmID09IDUpIHJldHVybiBwYXJzZV9QdGdOYW1lWF9CSUZGNShibG9iLCBsZW5ndGgsIG9wdHMpO1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBYdGlJbmRleFxuXHRcdHZhciBuYW1laW5kZXggPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0cmV0dXJuIFt0eXBlLCBpeHRpLCBuYW1laW5kZXhdO1xuXHR9XG5cdGZ1bmN0aW9uIHBhcnNlX1B0Z05hbWVYX0JJRkY1KGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIsICdpJyk7IC8vIFh0aUluZGV4XG5cdFx0YmxvYi5sICs9IDg7XG5cdFx0dmFyIG5hbWVpbmRleCA9IGJsb2IucmVhZF9zaGlmdCgyKTtcblx0XHRibG9iLmwgKz0gMTI7XG5cdFx0cmV0dXJuIFt0eXBlLCBpeHRpLCBuYW1laW5kZXhdO1xuXHR9XG5cblx0LyogMi41LjE5OC43MCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdNZW1BcmVhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdGJsb2IubCArPSAob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDMgOiA0KTtcblx0XHR2YXIgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KG9wdHMgJiYgb3B0cy5iaWZmID09IDIgPyAxIDogMik7XG5cdFx0cmV0dXJuIFt0eXBlLCBjY2VdO1xuXHR9XG5cblx0LyogMi41LjE5OC43MiAqL1xuXHRmdW5jdGlvbiBwYXJzZV9QdGdNZW1GdW5jKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdHZhciBjY2UgPSBibG9iLnJlYWRfc2hpZnQob3B0cyAmJiBvcHRzLmJpZmYgPT0gMiA/IDEgOiAyKTtcblx0XHRyZXR1cm4gW3R5cGUsIGNjZV07XG5cdH1cblxuXG5cdC8qIDIuNS4xOTguODYgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnUmVmRXJyKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0eXBlID0gKGJsb2IucmVhZF9zaGlmdCgxKSA+Pj4gNSkgJiAweDAzO1xuXHRcdGJsb2IubCArPSA0O1xuXHRcdGlmKG9wdHMuYmlmZiA9PSAxMikgYmxvYi5sICs9IDI7XG5cdFx0cmV0dXJuIFt0eXBlXTtcblx0fVxuXG5cdC8qIDIuNS4xOTguODcgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUHRnUmVmRXJyM2QoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHR5cGUgPSAoYmxvYltibG9iLmwrK10gJiAweDYwKSA+PiA1O1xuXHRcdHZhciBpeHRpID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdHZhciB3ID0gNDtcblx0XHRpZihvcHRzKSBzd2l0Y2gob3B0cy5iaWZmKSB7XG5cdFx0XHRjYXNlIDU6IHRocm93IG5ldyBFcnJvcihcIlB0Z1JlZkVycjNkIC0tIDVcIik7IC8vIFRPRE86IGZpbmQgdGVzdCBjYXNlXG5cdFx0XHRjYXNlIDEyOiB3ID0gNjsgYnJlYWs7XG5cdFx0fVxuXHRcdGJsb2IubCArPSB3O1xuXHRcdHJldHVybiBbdHlwZSwgaXh0aV07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjI2ICovXG5cdHZhciBwYXJzZV9QdGdBZGQgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4LjQ1ICovXG5cdHZhciBwYXJzZV9QdGdEaXYgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4LjU2ICovXG5cdHZhciBwYXJzZV9QdGdFcSA9IHBhcnNlcmVhZDE7XG5cdC8qIDIuNS4xOTguNjQgKi9cblx0dmFyIHBhcnNlX1B0Z0dlID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC42NSAqL1xuXHR2YXIgcGFyc2VfUHRnR3QgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4LjY3ICovXG5cdHZhciBwYXJzZV9QdGdJc2VjdCA9IHBhcnNlcmVhZDE7XG5cdC8qIDIuNS4xOTguNjggKi9cblx0dmFyIHBhcnNlX1B0Z0xlID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC42OSAqL1xuXHR2YXIgcGFyc2VfUHRnTHQgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4Ljc0ICovXG5cdHZhciBwYXJzZV9QdGdNaXNzQXJnID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC43NSAqL1xuXHR2YXIgcGFyc2VfUHRnTXVsID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC43OCAqL1xuXHR2YXIgcGFyc2VfUHRnTmUgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4LjgwICovXG5cdHZhciBwYXJzZV9QdGdQYXJlbiA9IHBhcnNlcmVhZDE7XG5cdC8qIDIuNS4xOTguODEgKi9cblx0dmFyIHBhcnNlX1B0Z1BlcmNlbnQgPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4LjgyICovXG5cdHZhciBwYXJzZV9QdGdQb3dlciA9IHBhcnNlcmVhZDE7XG5cdC8qIDIuNS4xOTguODMgKi9cblx0dmFyIHBhcnNlX1B0Z1JhbmdlID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC45MCAqL1xuXHR2YXIgcGFyc2VfUHRnU3ViID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC45MyAqL1xuXHR2YXIgcGFyc2VfUHRnVW1pbnVzID0gcGFyc2VyZWFkMTtcblx0LyogMi41LjE5OC45NCAqL1xuXHR2YXIgcGFyc2VfUHRnVW5pb24gPSBwYXJzZXJlYWQxO1xuXHQvKiAyLjUuMTk4Ljk1ICovXG5cdHZhciBwYXJzZV9QdGdVcGx1cyA9IHBhcnNlcmVhZDE7XG5cblx0LyogMi41LjE5OC43MSAqL1xuXHR2YXIgcGFyc2VfUHRnTWVtRXJyID0gcGFyc2Vub29wO1xuXHQvKiAyLjUuMTk4LjczICovXG5cdHZhciBwYXJzZV9QdGdNZW1Ob01lbSA9IHBhcnNlbm9vcDtcblx0LyogMi41LjE5OC45MiAqL1xuXHR2YXIgcGFyc2VfUHRnVGJsID0gcGFyc2Vub29wO1xuXG5cdC8qIDIuNS4xOTguMjUgKi9cblx0dmFyIFB0Z1R5cGVzID0ge1xuXHQweDAxOiB7IG46J1B0Z0V4cCcsIGY6cGFyc2VfUHRnRXhwIH0sXG5cdDB4MDI6IHsgbjonUHRnVGJsJywgZjpwYXJzZV9QdGdUYmwgfSxcblx0MHgwMzogeyBuOidQdGdBZGQnLCBmOnBhcnNlX1B0Z0FkZCB9LFxuXHQweDA0OiB7IG46J1B0Z1N1YicsIGY6cGFyc2VfUHRnU3ViIH0sXG5cdDB4MDU6IHsgbjonUHRnTXVsJywgZjpwYXJzZV9QdGdNdWwgfSxcblx0MHgwNjogeyBuOidQdGdEaXYnLCBmOnBhcnNlX1B0Z0RpdiB9LFxuXHQweDA3OiB7IG46J1B0Z1Bvd2VyJywgZjpwYXJzZV9QdGdQb3dlciB9LFxuXHQweDA4OiB7IG46J1B0Z0NvbmNhdCcsIGY6cGFyc2VfUHRnQ29uY2F0IH0sXG5cdDB4MDk6IHsgbjonUHRnTHQnLCBmOnBhcnNlX1B0Z0x0IH0sXG5cdDB4MEE6IHsgbjonUHRnTGUnLCBmOnBhcnNlX1B0Z0xlIH0sXG5cdDB4MEI6IHsgbjonUHRnRXEnLCBmOnBhcnNlX1B0Z0VxIH0sXG5cdDB4MEM6IHsgbjonUHRnR2UnLCBmOnBhcnNlX1B0Z0dlIH0sXG5cdDB4MEQ6IHsgbjonUHRnR3QnLCBmOnBhcnNlX1B0Z0d0IH0sXG5cdDB4MEU6IHsgbjonUHRnTmUnLCBmOnBhcnNlX1B0Z05lIH0sXG5cdDB4MEY6IHsgbjonUHRnSXNlY3QnLCBmOnBhcnNlX1B0Z0lzZWN0IH0sXG5cdDB4MTA6IHsgbjonUHRnVW5pb24nLCBmOnBhcnNlX1B0Z1VuaW9uIH0sXG5cdDB4MTE6IHsgbjonUHRnUmFuZ2UnLCBmOnBhcnNlX1B0Z1JhbmdlIH0sXG5cdDB4MTI6IHsgbjonUHRnVXBsdXMnLCBmOnBhcnNlX1B0Z1VwbHVzIH0sXG5cdDB4MTM6IHsgbjonUHRnVW1pbnVzJywgZjpwYXJzZV9QdGdVbWludXMgfSxcblx0MHgxNDogeyBuOidQdGdQZXJjZW50JywgZjpwYXJzZV9QdGdQZXJjZW50IH0sXG5cdDB4MTU6IHsgbjonUHRnUGFyZW4nLCBmOnBhcnNlX1B0Z1BhcmVuIH0sXG5cdDB4MTY6IHsgbjonUHRnTWlzc0FyZycsIGY6cGFyc2VfUHRnTWlzc0FyZyB9LFxuXHQweDE3OiB7IG46J1B0Z1N0cicsIGY6cGFyc2VfUHRnU3RyIH0sXG5cdDB4MUM6IHsgbjonUHRnRXJyJywgZjpwYXJzZV9QdGdFcnIgfSxcblx0MHgxRDogeyBuOidQdGdCb29sJywgZjpwYXJzZV9QdGdCb29sIH0sXG5cdDB4MUU6IHsgbjonUHRnSW50JywgZjpwYXJzZV9QdGdJbnQgfSxcblx0MHgxRjogeyBuOidQdGdOdW0nLCBmOnBhcnNlX1B0Z051bSB9LFxuXHQweDIwOiB7IG46J1B0Z0FycmF5JywgZjpwYXJzZV9QdGdBcnJheSB9LFxuXHQweDIxOiB7IG46J1B0Z0Z1bmMnLCBmOnBhcnNlX1B0Z0Z1bmMgfSxcblx0MHgyMjogeyBuOidQdGdGdW5jVmFyJywgZjpwYXJzZV9QdGdGdW5jVmFyIH0sXG5cdDB4MjM6IHsgbjonUHRnTmFtZScsIGY6cGFyc2VfUHRnTmFtZSB9LFxuXHQweDI0OiB7IG46J1B0Z1JlZicsIGY6cGFyc2VfUHRnUmVmIH0sXG5cdDB4MjU6IHsgbjonUHRnQXJlYScsIGY6cGFyc2VfUHRnQXJlYSB9LFxuXHQweDI2OiB7IG46J1B0Z01lbUFyZWEnLCBmOnBhcnNlX1B0Z01lbUFyZWEgfSxcblx0MHgyNzogeyBuOidQdGdNZW1FcnInLCBmOnBhcnNlX1B0Z01lbUVyciB9LFxuXHQweDI4OiB7IG46J1B0Z01lbU5vTWVtJywgZjpwYXJzZV9QdGdNZW1Ob01lbSB9LFxuXHQweDI5OiB7IG46J1B0Z01lbUZ1bmMnLCBmOnBhcnNlX1B0Z01lbUZ1bmMgfSxcblx0MHgyQTogeyBuOidQdGdSZWZFcnInLCBmOnBhcnNlX1B0Z1JlZkVyciB9LFxuXHQweDJCOiB7IG46J1B0Z0FyZWFFcnInLCBmOnBhcnNlX1B0Z0FyZWFFcnIgfSxcblx0MHgyQzogeyBuOidQdGdSZWZOJywgZjpwYXJzZV9QdGdSZWZOIH0sXG5cdDB4MkQ6IHsgbjonUHRnQXJlYU4nLCBmOnBhcnNlX1B0Z0FyZWFOIH0sXG5cdDB4Mzk6IHsgbjonUHRnTmFtZVgnLCBmOnBhcnNlX1B0Z05hbWVYIH0sXG5cdDB4M0E6IHsgbjonUHRnUmVmM2QnLCBmOnBhcnNlX1B0Z1JlZjNkIH0sXG5cdDB4M0I6IHsgbjonUHRnQXJlYTNkJywgZjpwYXJzZV9QdGdBcmVhM2QgfSxcblx0MHgzQzogeyBuOidQdGdSZWZFcnIzZCcsIGY6cGFyc2VfUHRnUmVmRXJyM2QgfSxcblx0MHgzRDogeyBuOidQdGdBcmVhRXJyM2QnLCBmOnBhcnNlX1B0Z0FyZWFFcnIzZCB9LFxuXHQweEZGOiB7fVxuXHR9O1xuXHQvKiBUaGVzZSBhcmUgZHVwbGljYXRlZCBpbiB0aGUgUHRnVHlwZXMgdGFibGUgKi9cblx0dmFyIFB0Z0R1cGVzID0ge1xuXHQweDQwOiAweDIwLCAweDYwOiAweDIwLFxuXHQweDQxOiAweDIxLCAweDYxOiAweDIxLFxuXHQweDQyOiAweDIyLCAweDYyOiAweDIyLFxuXHQweDQzOiAweDIzLCAweDYzOiAweDIzLFxuXHQweDQ0OiAweDI0LCAweDY0OiAweDI0LFxuXHQweDQ1OiAweDI1LCAweDY1OiAweDI1LFxuXHQweDQ2OiAweDI2LCAweDY2OiAweDI2LFxuXHQweDQ3OiAweDI3LCAweDY3OiAweDI3LFxuXHQweDQ4OiAweDI4LCAweDY4OiAweDI4LFxuXHQweDQ5OiAweDI5LCAweDY5OiAweDI5LFxuXHQweDRBOiAweDJBLCAweDZBOiAweDJBLFxuXHQweDRCOiAweDJCLCAweDZCOiAweDJCLFxuXHQweDRDOiAweDJDLCAweDZDOiAweDJDLFxuXHQweDREOiAweDJELCAweDZEOiAweDJELFxuXHQweDU5OiAweDM5LCAweDc5OiAweDM5LFxuXHQweDVBOiAweDNBLCAweDdBOiAweDNBLFxuXHQweDVCOiAweDNCLCAweDdCOiAweDNCLFxuXHQweDVDOiAweDNDLCAweDdDOiAweDNDLFxuXHQweDVEOiAweDNELCAweDdEOiAweDNEXG5cdH07XG5cdChmdW5jdGlvbigpe2Zvcih2YXIgeSBpbiBQdGdEdXBlcykgUHRnVHlwZXNbeV0gPSBQdGdUeXBlc1tQdGdEdXBlc1t5XV07fSkoKTtcblxuXHR2YXIgUHRnMTggPSB7XG5cdC8vXHQweDE5OiB7IG46J1B0Z0xpc3QnLCBmOnBhcnNlX1B0Z0xpc3QgfSwgLy8gVE9ET1xuXHQvL1x0MHgxRDogeyBuOidQdGdTeE5hbWUnLCBmOnBhcnNlX1B0Z1N4TmFtZSB9LCAvLyBUT0RPXG5cdH07XG5cdHZhciBQdGcxOSA9IHtcblx0MHgwMTogeyBuOidQdGdBdHRyU2VtaScsIGY6cGFyc2VfUHRnQXR0clNlbWkgfSxcblx0MHgwMjogeyBuOidQdGdBdHRySWYnLCBmOnBhcnNlX1B0Z0F0dHJJZiB9LFxuXHQweDA0OiB7IG46J1B0Z0F0dHJDaG9vc2UnLCBmOnBhcnNlX1B0Z0F0dHJDaG9vc2UgfSxcblx0MHgwODogeyBuOidQdGdBdHRyR290bycsIGY6cGFyc2VfUHRnQXR0ckdvdG8gfSxcblx0MHgxMDogeyBuOidQdGdBdHRyU3VtJywgZjpwYXJzZV9QdGdBdHRyU3VtIH0sXG5cdDB4MjA6IHsgbjonUHRnQXR0ckJheGNlbCcsIGY6cGFyc2VfUHRnQXR0ckJheGNlbCB9LFxuXHQweDQwOiB7IG46J1B0Z0F0dHJTcGFjZScsIGY6cGFyc2VfUHRnQXR0clNwYWNlIH0sXG5cdDB4NDE6IHsgbjonUHRnQXR0clNwYWNlU2VtaScsIGY6cGFyc2VfUHRnQXR0clNwYWNlU2VtaSB9LFxuXHQweDgwOiB7IG46J1B0Z0F0dHJJZkVycm9yJywgZjpwYXJzZV9QdGdBdHRySWZFcnJvciB9LFxuXHQweEZGOiB7fVxuXHR9O1xuXG5cdC8qIDIuNC4xMjcgVE9ETyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9Gb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNDZWxsKGJsb2IsIDYpO1xuXHRcdGlmKG9wdHMuYmlmZiA9PSAyKSArK2Jsb2IubDtcblx0XHR2YXIgdmFsID0gcGFyc2VfRm9ybXVsYVZhbHVlKGJsb2IsOCk7XG5cdFx0dmFyIGZsYWdzID0gYmxvYi5yZWFkX3NoaWZ0KDEpO1xuXHRcdGlmKG9wdHMuYmlmZiAhPSAyKSB7XG5cdFx0XHRibG9iLnJlYWRfc2hpZnQoMSk7XG5cdFx0XHRpZihvcHRzLmJpZmYgPj0gNSkge1xuXHRcdFx0XHR2YXIgY2huID0gYmxvYi5yZWFkX3NoaWZ0KDQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgY2JmID0gcGFyc2VfWExTQ2VsbFBhcnNlZEZvcm11bGEoYmxvYiwgZW5kIC0gYmxvYi5sLCBvcHRzKTtcblx0XHRyZXR1cm4ge2NlbGw6Y2VsbCwgdmFsOnZhbFswXSwgZm9ybXVsYTpjYmYsIHNoYXJlZDogKGZsYWdzID4+IDMpICYgMSwgdHQ6dmFsWzFdfTtcblx0fVxuXG5cdC8qIDIuNS4xMzMgVE9ETzogaG93IHRvIGVtaXQgZW1wdHkgc3RyaW5ncz8gKi9cblx0ZnVuY3Rpb24gcGFyc2VfRm9ybXVsYVZhbHVlKGJsb2IpIHtcblx0XHR2YXIgYjtcblx0XHRpZihfX3JlYWRVSW50MTZMRShibG9iLGJsb2IubCArIDYpICE9PSAweEZGRkYpIHJldHVybiBbcGFyc2VfWG51bShibG9iKSwnbiddO1xuXHRcdHN3aXRjaChibG9iW2Jsb2IubF0pIHtcblx0XHRcdGNhc2UgMHgwMDogYmxvYi5sICs9IDg7IHJldHVybiBbXCJTdHJpbmdcIiwgJ3MnXTtcblx0XHRcdGNhc2UgMHgwMTogYiA9IGJsb2JbYmxvYi5sKzJdID09PSAweDE7IGJsb2IubCArPSA4OyByZXR1cm4gW2IsJ2InXTtcblx0XHRcdGNhc2UgMHgwMjogYiA9IGJsb2JbYmxvYi5sKzJdOyBibG9iLmwgKz0gODsgcmV0dXJuIFtiLCdlJ107XG5cdFx0XHRjYXNlIDB4MDM6IGJsb2IubCArPSA4OyByZXR1cm4gW1wiXCIsJ3MnXTtcblx0XHR9XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0LyogMi41LjE5OC4xMDMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfUmdiRXh0cmEoYmxvYiwgbGVuZ3RoLCByZ2NlLCBvcHRzKSB7XG5cdFx0aWYob3B0cy5iaWZmIDwgOCkgcmV0dXJuIHBhcnNlbm9vcChibG9iLCBsZW5ndGgpO1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9PSByZ2NlLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRzd2l0Y2gocmdjZVtpXVswXSkge1xuXHRcdFx0XHRjYXNlICdQdGdBcnJheSc6IC8qIFB0Z0FycmF5IC0+IFB0Z0V4dHJhQXJyYXkgKi9cblx0XHRcdFx0XHRyZ2NlW2ldWzFdID0gcGFyc2VfUHRnRXh0cmFBcnJheShibG9iLCAwLCBvcHRzKTtcblx0XHRcdFx0XHRvLnB1c2gocmdjZVtpXVsxXSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1B0Z01lbUFyZWEnOiAvKiBQdGdNZW1BcmVhIC0+IFB0Z0V4dHJhTWVtICovXG5cdFx0XHRcdFx0cmdjZVtpXVsyXSA9IHBhcnNlX1B0Z0V4dHJhTWVtKGJsb2IsIHJnY2VbaV1bMV0pO1xuXHRcdFx0XHRcdG8ucHVzaChyZ2NlW2ldWzJdKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnRXhwJzogLyogUHRnRXhwIC0+IFB0Z0V4dHJhQ29sICovXG5cdFx0XHRcdFx0aWYob3B0cyAmJiBvcHRzLmJpZmYgPT0gMTIpIHtcblx0XHRcdFx0XHRcdHJnY2VbaV1bMV1bMV0gPSBibG9iLnJlYWRfc2hpZnQoNCk7XG5cdFx0XHRcdFx0XHRvLnB1c2gocmdjZVtpXVsxXSk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0ZGVmYXVsdDogYnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGxlbmd0aCA9IHRhcmdldCAtIGJsb2IubDtcblx0XHQvKiBub3RlOiB0aGlzIGlzIHRlY2huaWNhbGx5IGFuIGVycm9yIGJ1dCBFeGNlbCBkaXNyZWdhcmRzICovXG5cdFx0Ly9pZih0YXJnZXQgIT09IGJsb2IubCAmJiBibG9iLmwgIT09IHRhcmdldCAtIGxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKHRhcmdldCArIFwiICE9IFwiICsgYmxvYi5sKTtcblx0XHRpZihsZW5ndGggIT09IDApIG8ucHVzaChwYXJzZW5vb3AoYmxvYiwgbGVuZ3RoKSk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiAyLjUuMTk4LjIxICovXG5cdGZ1bmN0aW9uIHBhcnNlX05hbWVQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cywgY2NlKSB7XG5cdFx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoYmxvYiwgY2NlLCBvcHRzKTtcblx0XHR2YXIgcmdjYjtcblx0XHRpZih0YXJnZXQgIT09IGJsb2IubCkgcmdjYiA9IHBhcnNlX1JnYkV4dHJhKGJsb2IsIHRhcmdldCAtIGJsb2IubCwgcmdjZSwgb3B0cyk7XG5cdFx0cmV0dXJuIFtyZ2NlLCByZ2NiXTtcblx0fVxuXG5cdC8qIDIuNS4xOTguMyBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMU0NlbGxQYXJzZWRGb3JtdWxhKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGgsIGxlbiA9IG9wdHMuYmlmZiA9PSAyID8gMSA6IDI7XG5cdFx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRcdGlmKGNjZSA9PSAweEZGRkYpIHJldHVybiBbW10scGFyc2Vub29wKGJsb2IsIGxlbmd0aC0yKV07XG5cdFx0dmFyIHJnY2UgPSBwYXJzZV9SZ2NlKGJsb2IsIGNjZSwgb3B0cyk7XG5cdFx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRcdHJldHVybiBbcmdjZSwgcmdjYl07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjExOCBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX1NoYXJlZFBhcnNlZEZvcm11bGEoYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIHRhcmdldCA9IGJsb2IubCArIGxlbmd0aDtcblx0XHR2YXIgcmdjYiwgY2NlID0gYmxvYi5yZWFkX3NoaWZ0KDIpOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRcdHZhciByZ2NlID0gcGFyc2VfUmdjZShibG9iLCBjY2UsIG9wdHMpO1xuXHRcdGlmKGNjZSA9PSAweEZGRkYpIHJldHVybiBbW10scGFyc2Vub29wKGJsb2IsIGxlbmd0aC0yKV07XG5cdFx0aWYobGVuZ3RoICE9PSBjY2UgKyAyKSByZ2NiID0gcGFyc2VfUmdiRXh0cmEoYmxvYiwgdGFyZ2V0IC0gY2NlIC0gMiwgcmdjZSwgb3B0cyk7XG5cdFx0cmV0dXJuIFtyZ2NlLCByZ2NiXTtcblx0fVxuXG5cdC8qIDIuNS4xOTguMSBUT0RPICovXG5cdGZ1bmN0aW9uIHBhcnNlX0FycmF5UGFyc2VkRm9ybXVsYShibG9iLCBsZW5ndGgsIG9wdHMsIHJlZikge1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGgsIGxlbiA9IG9wdHMuYmlmZiA9PSAyID8gMSA6IDI7XG5cdFx0dmFyIHJnY2IsIGNjZSA9IGJsb2IucmVhZF9zaGlmdChsZW4pOyAvLyBsZW5ndGggb2YgcmdjZVxuXHRcdGlmKGNjZSA9PSAweEZGRkYpIHJldHVybiBbW10scGFyc2Vub29wKGJsb2IsIGxlbmd0aC0yKV07XG5cdFx0dmFyIHJnY2UgPSBwYXJzZV9SZ2NlKGJsb2IsIGNjZSwgb3B0cyk7XG5cdFx0aWYobGVuZ3RoICE9PSBjY2UgKyBsZW4pIHJnY2IgPSBwYXJzZV9SZ2JFeHRyYShibG9iLCBsZW5ndGggLSBjY2UgLSBsZW4sIHJnY2UsIG9wdHMpO1xuXHRcdHJldHVybiBbcmdjZSwgcmdjYl07XG5cdH1cblxuXHQvKiAyLjUuMTk4LjEwNCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9SZ2NlKGJsb2IsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciB0YXJnZXQgPSBibG9iLmwgKyBsZW5ndGg7XG5cdFx0dmFyIFIsIGlkLCBwdGdzID0gW107XG5cdFx0d2hpbGUodGFyZ2V0ICE9IGJsb2IubCkge1xuXHRcdFx0bGVuZ3RoID0gdGFyZ2V0IC0gYmxvYi5sO1xuXHRcdFx0aWQgPSBibG9iW2Jsb2IubF07XG5cdFx0XHRSID0gUHRnVHlwZXNbaWRdO1xuXHRcdFx0aWYoaWQgPT09IDB4MTggfHwgaWQgPT09IDB4MTkpIHtcblx0XHRcdFx0aWQgPSBibG9iW2Jsb2IubCArIDFdO1xuXHRcdFx0XHRSID0gKGlkID09PSAweDE4ID8gUHRnMTggOiBQdGcxOSlbaWRdO1xuXHRcdFx0fVxuXHRcdFx0aWYoIVIgfHwgIVIuZikgeyAvKnB0Z3MucHVzaCovKHBhcnNlbm9vcChibG9iLCBsZW5ndGgpKTsgfVxuXHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdGVsc2UgeyBwdGdzLnB1c2goW1IubiwgUi5mKGJsb2IsIGxlbmd0aCwgb3B0cyldKTsgfVxuXHRcdH1cblx0XHRyZXR1cm4gcHRncztcblx0fVxuXG5cdGZ1bmN0aW9uIHN0cmluZ2lmeV9hcnJheShmKSB7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZi5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIHggPSBmW2ldLCByID0gW107XG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgeC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR2YXIgeSA9IHhbal07XG5cdFx0XHRcdGlmKHkpIHN3aXRjaCh5WzBdKSB7XG5cdFx0XHRcdFx0Ly8gVE9ETzogaGFuZGxlIGVtYmVkZGVkIHF1b3Rlc1xuXHRcdFx0XHRcdGNhc2UgMHgwMjpcblx0ci5wdXNoKCdcIicgKyB5WzFdLnJlcGxhY2UoL1wiL2csJ1wiXCInKSArICdcIicpOyBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiByLnB1c2goeVsxXSk7XG5cdFx0XHRcdH0gZWxzZSByLnB1c2goXCJcIik7XG5cdFx0XHR9XG5cdFx0XHRvLnB1c2goci5qb2luKFwiLFwiKSk7XG5cdFx0fVxuXHRcdHJldHVybiBvLmpvaW4oXCI7XCIpO1xuXHR9XG5cblx0LyogW01TLVhMU10gMi4yLjIgVE9ETyAqL1xuXHQvKiBbTVMtWExTQl0gMi4yLjIgKi9cblx0dmFyIFB0Z0Jpbk9wID0ge1xuXHRcdFB0Z0FkZDogXCIrXCIsXG5cdFx0UHRnQ29uY2F0OiBcIiZcIixcblx0XHRQdGdEaXY6IFwiL1wiLFxuXHRcdFB0Z0VxOiBcIj1cIixcblx0XHRQdGdHZTogXCI+PVwiLFxuXHRcdFB0Z0d0OiBcIj5cIixcblx0XHRQdGdMZTogXCI8PVwiLFxuXHRcdFB0Z0x0OiBcIjxcIixcblx0XHRQdGdNdWw6IFwiKlwiLFxuXHRcdFB0Z05lOiBcIjw+XCIsXG5cdFx0UHRnUG93ZXI6IFwiXlwiLFxuXHRcdFB0Z1N1YjogXCItXCJcblx0fTtcblx0ZnVuY3Rpb24gc3RyaW5naWZ5X2Zvcm11bGEoZm9ybXVsYS8qQXJyYXk8YW55PiovLCByYW5nZSwgY2VsbCwgc3VwYm9va3MsIG9wdHMpIHtcblx0XHQvL2NvbnNvbGUubG9nKGZvcm11bGEpO1xuXHRcdHZhciBfcmFuZ2UgPSAvKnJhbmdlICE9IG51bGwgPyByYW5nZSA6Ki8ge3M6e2M6MCwgcjowfSxlOntjOjAsIHI6MH19O1xuXHRcdHZhciBzdGFjayA9IFtdLCBlMSwgZTIsIHR5cGUsIGMsIGl4dGk9MCwgbmFtZWlkeD0wLCByLCBzbmFtZT1cIlwiO1xuXHRcdGlmKCFmb3JtdWxhWzBdIHx8ICFmb3JtdWxhWzBdWzBdKSByZXR1cm4gXCJcIjtcblx0XHR2YXIgbGFzdF9zcCA9IC0xLCBzcCA9IFwiXCI7XG5cdFx0Ly9jb25zb2xlLmxvZyhcIi0tXCIsY2VsbCxmb3JtdWxhWzBdKVxuXHRcdGZvcih2YXIgZmYgPSAwLCBmZmxlbiA9IGZvcm11bGFbMF0ubGVuZ3RoOyBmZiA8IGZmbGVuOyArK2ZmKSB7XG5cdFx0XHR2YXIgZiA9IGZvcm11bGFbMF1bZmZdO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcIisrXCIsZiwgc3RhY2spXG5cdFx0XHRzd2l0Y2goZlswXSkge1xuXHRcdFx0XHRjYXNlICdQdGdVbWludXMnOiAvKiAyLjUuMTk4LjkzICovXG5cdFx0XHRcdFx0c3RhY2sucHVzaChcIi1cIiArIHN0YWNrLnBvcCgpKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1B0Z1VwbHVzJzogLyogMi41LjE5OC45NSAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goXCIrXCIgKyBzdGFjay5wb3AoKSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdQZXJjZW50JzogLyogMi41LjE5OC44MSAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goc3RhY2sucG9wKCkgKyBcIiVcIik7IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1B0Z0FkZCc6ICAgIC8qIDIuNS4xOTguMjYgKi9cblx0XHRcdFx0Y2FzZSAnUHRnQ29uY2F0JzogLyogMi41LjE5OC40MyAqL1xuXHRcdFx0XHRjYXNlICdQdGdEaXYnOiAgICAvKiAyLjUuMTk4LjQ1ICovXG5cdFx0XHRcdGNhc2UgJ1B0Z0VxJzogICAgIC8qIDIuNS4xOTguNTYgKi9cblx0XHRcdFx0Y2FzZSAnUHRnR2UnOiAgICAgLyogMi41LjE5OC42NCAqL1xuXHRcdFx0XHRjYXNlICdQdGdHdCc6ICAgICAvKiAyLjUuMTk4LjY1ICovXG5cdFx0XHRcdGNhc2UgJ1B0Z0xlJzogICAgIC8qIDIuNS4xOTguNjggKi9cblx0XHRcdFx0Y2FzZSAnUHRnTHQnOiAgICAgLyogMi41LjE5OC42OSAqL1xuXHRcdFx0XHRjYXNlICdQdGdNdWwnOiAgICAvKiAyLjUuMTk4Ljc1ICovXG5cdFx0XHRcdGNhc2UgJ1B0Z05lJzogICAgIC8qIDIuNS4xOTguNzggKi9cblx0XHRcdFx0Y2FzZSAnUHRnUG93ZXInOiAgLyogMi41LjE5OC44MiAqL1xuXHRcdFx0XHRjYXNlICdQdGdTdWInOiAgICAvKiAyLjUuMTk4LjkwICovXG5cdFx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRpZihsYXN0X3NwID49IDApIHtcblx0XHRcdFx0XHRcdHN3aXRjaChmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzBdKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0XHRcdHNwID0gZmlsbChcIiBcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdFx0XHRzcCA9IGZpbGwoXCJcXHJcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdHNwID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFB0Z0F0dHJTcGFjZVR5cGUgXCIgKyBmb3JtdWxhWzBdW2xhc3Rfc3BdWzFdWzBdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGUyID0gZTIgKyBzcDtcblx0XHRcdFx0XHRcdGxhc3Rfc3AgPSAtMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3RhY2sucHVzaChlMitQdGdCaW5PcFtmWzBdXStlMSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnSXNlY3QnOiAvKiAyLjUuMTk4LjY3ICovXG5cdFx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRzdGFjay5wdXNoKGUyK1wiIFwiK2UxKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnVW5pb24nOiAvKiAyLjUuMTk4Ljk0ICovXG5cdFx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRzdGFjay5wdXNoKGUyK1wiLFwiK2UxKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnUmFuZ2UnOiAvKiAyLjUuMTk4LjgzICovXG5cdFx0XHRcdFx0ZTEgPSBzdGFjay5wb3AoKTsgZTIgPSBzdGFjay5wb3AoKTtcblx0XHRcdFx0XHRzdGFjay5wdXNoKGUyK1wiOlwiK2UxKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdBdHRyQ2hvb3NlJzogLyogMi41LjE5OC4zNCAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdBdHRyR290byc6IC8qIDIuNS4xOTguMzUgKi9cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnQXR0cklmJzogLyogMi41LjE5OC4zNiAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdBdHRySWZFcnJvcic6IC8qIFtNUy1YTFNCXSAyLjUuOTcuMjggKi9cblx0XHRcdFx0XHRicmVhaztcblxuXG5cdFx0XHRcdGNhc2UgJ1B0Z1JlZic6IC8qIDIuNS4xOTguODQgKi9cblx0XHRcdFx0XHR0eXBlID0gZlsxXVswXTsgYyA9IHNoaWZ0X2NlbGxfeGxzKGZbMV1bMV0sIF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdFx0c3RhY2sucHVzaChlbmNvZGVfY2VsbF94bHMoYykpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdSZWZOJzogLyogMi41LjE5OC44OCAqL1xuXHRcdFx0XHRcdHR5cGUgPSBmWzFdWzBdOyBjID0gY2VsbCA/IHNoaWZ0X2NlbGxfeGxzKGZbMV1bMV0sIGNlbGwsIG9wdHMpIDogZlsxXVsxXTtcblx0XHRcdFx0XHRzdGFjay5wdXNoKGVuY29kZV9jZWxsX3hscyhjKSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1B0Z1JlZjNkJzogLyogMi41LjE5OC44NSAqL1xuXHRcdFx0XHRcdHR5cGUgPSBmWzFdWzBdOyBpeHRpID0gZlsxXVsxXTsgYyA9IHNoaWZ0X2NlbGxfeGxzKGZbMV1bMl0sIF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdFx0c25hbWUgPSBzdXBib29rcy5TaGVldE5hbWVzW2l4dGldO1xuXHRcdFx0XHRcdHZhciB3ID0gc25hbWU7IC8qIElFOSBmYWlscyBvbiBkZWZpbmVkIG5hbWVzICovXG5cdFx0XHRcdFx0c3RhY2sucHVzaChzbmFtZSArIFwiIVwiICsgZW5jb2RlX2NlbGxfeGxzKGMpKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdGdW5jJzogLyogMi41LjE5OC42MiAqL1xuXHRcdFx0XHRjYXNlICdQdGdGdW5jVmFyJzogLyogMi41LjE5OC42MyAqL1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coZlsxXSk7XG5cdFx0XHRcdFx0LyogZlsxXSA9IFthcmdjLCBmdW5jLCB0eXBlXSAqL1xuXHRcdFx0XHRcdHZhciBhcmdjID0gZlsxXVswXSwgZnVuYyA9IGZbMV1bMV07XG5cdFx0XHRcdFx0aWYoIWFyZ2MpIGFyZ2MgPSAwO1xuXHRcdFx0XHRcdHZhciBhcmdzID0gYXJnYyA9PSAwID8gW10gOiBzdGFjay5zbGljZSgtYXJnYyk7XG5cdFx0XHRcdFx0c3RhY2subGVuZ3RoIC09IGFyZ2M7XG5cdFx0XHRcdFx0aWYoZnVuYyA9PT0gJ1VzZXInKSBmdW5jID0gYXJncy5zaGlmdCgpO1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goZnVuYyArIFwiKFwiICsgYXJncy5qb2luKFwiLFwiKSArIFwiKVwiKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdCb29sJzogLyogMi41LjE5OC40MiAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goZlsxXSA/IFwiVFJVRVwiIDogXCJGQUxTRVwiKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ1B0Z0ludCc6IC8qIDIuNS4xOTguNjYgKi9cblx0XHRcdFx0XHRzdGFjay5wdXNoKGZbMV0pOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnTnVtJzogLyogMi41LjE5OC43OSBUT0RPOiBwcmVjaXNpb24/ICovXG5cdFx0XHRcdFx0c3RhY2sucHVzaChTdHJpbmcoZlsxXSkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnU3RyJzogLyogMi41LjE5OC44OSAqL1xuXHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0c3RhY2sucHVzaCgnXCInICsgZlsxXSArICdcIicpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnRXJyJzogLyogMi41LjE5OC41NyAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goZlsxXSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdBcmVhTic6IC8qIDIuNS4xOTguMzEgVE9ETyAqL1xuXHRcdFx0XHRcdHR5cGUgPSBmWzFdWzBdOyByID0gc2hpZnRfcmFuZ2VfeGxzKGZbMV1bMV0sIF9yYW5nZSwgb3B0cyk7XG5cdFx0XHRcdFx0c3RhY2sucHVzaChlbmNvZGVfcmFuZ2VfeGxzKChyKSwgb3B0cykpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdQdGdBcmVhJzogLyogMi41LjE5OC4yNyBUT0RPOiBmaXhlZCBwb2ludHMgKi9cblx0XHRcdFx0XHR0eXBlID0gZlsxXVswXTsgciA9IHNoaWZ0X3JhbmdlX3hscyhmWzFdWzFdLCBfcmFuZ2UsIG9wdHMpO1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goZW5jb2RlX3JhbmdlX3hscygociksIG9wdHMpKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnQXJlYTNkJzogLyogMi41LjE5OC4yOCBUT0RPICovXG5cdFx0XHRcdFx0dHlwZSA9IGZbMV1bMF07IGl4dGkgPSBmWzFdWzFdOyByID0gZlsxXVsyXTtcblx0XHRcdFx0XHRzbmFtZSA9IChzdXBib29rcyAmJiBzdXBib29rc1sxXSA/IHN1cGJvb2tzWzFdW2l4dGkrMV0gOiBcIioqTUlTU0lORyoqXCIpO1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goc25hbWUgKyBcIiFcIiArIGVuY29kZV9yYW5nZSgocikpKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnUHRnQXR0clN1bSc6IC8qIDIuNS4xOTguNDEgKi9cblx0XHRcdFx0XHRzdGFjay5wdXNoKFwiU1VNKFwiICsgc3RhY2sucG9wKCkgKyBcIilcIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnQXR0clNlbWknOiAvKiAyLjUuMTk4LjM3ICovXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnTmFtZSc6IC8qIDIuNS45Ny42MCBUT0RPOiByZXZpc2lvbnMgKi9cblx0XHRcdFx0XHQvKiBmWzFdID0gdHlwZSwgMCwgbmFtZWluZGV4ICovXG5cdFx0XHRcdFx0bmFtZWlkeCA9IGZbMV1bMl07XG5cdFx0XHRcdFx0dmFyIGxibCA9IChzdXBib29rcy5uYW1lc3x8W10pW25hbWVpZHgtMV0gfHwgKHN1cGJvb2tzWzBdfHxbXSlbbmFtZWlkeF07XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBsYmwgPyBsYmwuTmFtZSA6IFwiKipNSVNTSU5HKipcIiArIFN0cmluZyhuYW1laWR4KTtcblx0XHRcdFx0XHRpZihuYW1lIGluIFhMU1hGdXR1cmVGdW5jdGlvbnMpIG5hbWUgPSBYTFNYRnV0dXJlRnVuY3Rpb25zW25hbWVdO1xuXHRcdFx0XHRcdHN0YWNrLnB1c2gobmFtZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnTmFtZVgnOiAvKiAyLjUuOTcuNjEgVE9ETzogcmV2aXNpb25zICovXG5cdFx0XHRcdFx0LyogZlsxXSA9IHR5cGUsIGl4dGksIG5hbWVpbmRleCAqL1xuXHRcdFx0XHRcdHZhciBib29raWR4ID0gKGZbMV1bMV0pOyBuYW1laWR4ID0gZlsxXVsyXTsgdmFyIGV4dGVybmJvb2s7XG5cdFx0XHRcdFx0LyogVE9ETzogUHJvcGVybHkgaGFuZGxlIG1pc3NpbmcgdmFsdWVzICovXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhib29raWR4LCBzdXBib29rcyk7XG5cdFx0XHRcdFx0aWYob3B0cy5iaWZmIDw9IDUpIHtcblx0XHRcdFx0XHRcdGlmKGJvb2tpZHggPCAwKSBib29raWR4ID0gLWJvb2tpZHg7XG5cdFx0XHRcdFx0XHRpZihzdXBib29rc1tib29raWR4XSkgZXh0ZXJuYm9vayA9IHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgcG54bmFtZSA9IHN1cGJvb2tzLlNoZWV0TmFtZXNbYm9va2lkeF07XG5cdFx0XHRcdFx0XHR2YXIgbyA9IFwiXCI7XG5cdFx0XHRcdFx0XHRpZigoKHN1cGJvb2tzW2Jvb2tpZHhdfHxbXSlbMF18fFtdKVswXSA9PSAweDNBMDEpey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdFx0ZWxzZSBpZigoKHN1cGJvb2tzW2Jvb2tpZHhdfHxbXSlbMF18fFtdKVswXSA9PSAweDA0MDEpe1xuXHRcdFx0XHRcdFx0XHRpZihzdXBib29rc1tib29raWR4XVtuYW1laWR4XSAmJiBzdXBib29rc1tib29raWR4XVtuYW1laWR4XS5pdGFiID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdG8gPSBzdXBib29rcy5TaGVldE5hbWVzW3N1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdLml0YWItMV0gKyBcIiFcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBvID0gc3VwYm9va3MuU2hlZXROYW1lc1tuYW1laWR4LTFdKyBcIiFcIjtcblx0XHRcdFx0XHRcdGlmKHN1cGJvb2tzW2Jvb2tpZHhdICYmIHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdKSBvICs9IHN1cGJvb2tzW2Jvb2tpZHhdW25hbWVpZHhdLk5hbWU7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKHN1cGJvb2tzWzBdICYmIHN1cGJvb2tzWzBdW25hbWVpZHhdKSBvICs9IHN1cGJvb2tzWzBdW25hbWVpZHhdLk5hbWU7XG5cdFx0XHRcdFx0XHRlbHNlIG8gKz0gXCI/P05BTUVYPz9cIjtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2gobyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIWV4dGVybmJvb2spIGV4dGVybmJvb2sgPSB7TmFtZTogXCI/P05BTUVYPz9cIn07XG5cdFx0XHRcdFx0c3RhY2sucHVzaChleHRlcm5ib29rLk5hbWUpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1B0Z1BhcmVuJzogLyogMi41LjE5OC44MCAqL1xuXHRcdFx0XHRcdHZhciBscCA9ICcoJywgcnAgPSAnKSc7XG5cdFx0XHRcdFx0aWYobGFzdF9zcCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRzcCA9IFwiXCI7XG5cdFx0XHRcdFx0XHRzd2l0Y2goZm9ybXVsYVswXVtsYXN0X3NwXVsxXVswXSkge1xuXHRcdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6IGxwID0gZmlsbChcIiBcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSkgKyBscDsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzogbHAgPSBmaWxsKFwiXFxyXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgbHA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0XHRjYXNlIDQ6IHJwID0gZmlsbChcIiBcIiwgZm9ybXVsYVswXVtsYXN0X3NwXVsxXVsxXSkgKyBycDsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdGNhc2UgNTogcnAgPSBmaWxsKFwiXFxyXCIsIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMV0pICsgcnA7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRcdFx0XHRcdFx0aWYob3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgUHRnQXR0clNwYWNlVHlwZSBcIiArIGZvcm11bGFbMF1bbGFzdF9zcF1bMV1bMF0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bGFzdF9zcCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzdGFjay5wdXNoKGxwICsgc3RhY2sucG9wKCkgKyBycCk7IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1B0Z1JlZkVycic6IC8qIDIuNS4xOTguODYgKi9cblx0XHRcdFx0XHRzdGFjay5wdXNoKCcjUkVGIScpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdSZWZFcnIzZCc6IC8qIDIuNS4xOTguODcgKi9cblx0XHRcdFx0XHRzdGFjay5wdXNoKCcjUkVGIScpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdFeHAnOiAvKiAyLjUuMTk4LjU4IFRPRE8gKi9cblx0XHRcdFx0XHRjID0ge2M6ZlsxXVsxXSxyOmZbMV1bMF19O1xuXHRcdFx0XHRcdHZhciBxID0gKHtjOiBjZWxsLmMsIHI6Y2VsbC5yfSk7XG5cdFx0XHRcdFx0aWYoc3VwYm9va3Muc2hhcmVkZltlbmNvZGVfY2VsbChjKV0pIHtcblx0XHRcdFx0XHRcdHZhciBwYXJzZWRmID0gKHN1cGJvb2tzLnNoYXJlZGZbZW5jb2RlX2NlbGwoYyldKTtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goc3RyaW5naWZ5X2Zvcm11bGEocGFyc2VkZiwgX3JhbmdlLCBxLCBzdXBib29rcywgb3B0cykpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdHZhciBmbmQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGZvcihlMT0wO2UxIT1zdXBib29rcy5hcnJheWYubGVuZ3RoOyArK2UxKSB7XG5cdFx0XHRcdFx0XHRcdC8qIFRPRE86IHNob3VsZCBiZSBzb21ldGhpbmcgbGlrZSByYW5nZV9oYXMgKi9cblx0XHRcdFx0XHRcdFx0ZTIgPSBzdXBib29rcy5hcnJheWZbZTFdO1xuXHRcdFx0XHRcdFx0XHRpZihjLmMgPCBlMlswXS5zLmMgfHwgYy5jID4gZTJbMF0uZS5jKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0aWYoYy5yIDwgZTJbMF0ucy5yIHx8IGMuciA+IGUyWzBdLmUucikgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdHN0YWNrLnB1c2goc3RyaW5naWZ5X2Zvcm11bGEoZTJbMV0sIF9yYW5nZSwgcSwgc3VwYm9va3MsIG9wdHMpKTtcblx0XHRcdFx0XHRcdFx0Zm5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZighZm5kKSBzdGFjay5wdXNoKGZbMV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdBcnJheSc6IC8qIDIuNS4xOTguMzIgVE9ETyAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goXCJ7XCIgKyBzdHJpbmdpZnlfYXJyYXkoZlsxXSkgKyBcIn1cIik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnTWVtQXJlYSc6IC8qIDIuNS4xOTguNzAgVE9ETzogY29uZmlybSB0aGlzIGlzIGEgbm9uLWRpc3BsYXkgKi9cblx0XHRcdFx0XHQvL3N0YWNrLnB1c2goXCIoXCIgKyBmWzJdLm1hcChlbmNvZGVfcmFuZ2UpLmpvaW4oXCIsXCIpICsgXCIpXCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1B0Z0F0dHJTcGFjZSc6IC8qIDIuNS4xOTguMzggKi9cblx0XHRcdFx0Y2FzZSAnUHRnQXR0clNwYWNlU2VtaSc6IC8qIDIuNS4xOTguMzkgKi9cblx0XHRcdFx0XHRsYXN0X3NwID0gZmY7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnVGJsJzogLyogMi41LjE5OC45MiBUT0RPICovXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnTWVtRXJyJzogLyogMi41LjE5OC43MSAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1B0Z01pc3NBcmcnOiAvKiAyLjUuMTk4Ljc0ICovXG5cdFx0XHRcdFx0c3RhY2sucHVzaChcIlwiKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQdGdBcmVhRXJyJzogLyogMi41LjE5OC4yOSAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goXCIjUkVGIVwiKTsgYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnQXJlYUVycjNkJzogLyogMi41LjE5OC4zMCAqL1xuXHRcdFx0XHRcdHN0YWNrLnB1c2goXCIjUkVGIVwiKTsgYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUHRnTWVtRnVuYyc6IC8qIDIuNS4xOTguNzIgVE9ETyAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIEZvcm11bGEgVG9rZW46ICcgKyBTdHJpbmcoZikpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIFB0Z05vbkRpc3AgPSBbJ1B0Z0F0dHJTcGFjZScsICdQdGdBdHRyU3BhY2VTZW1pJywgJ1B0Z0F0dHJHb3RvJ107XG5cdFx0XHRpZihsYXN0X3NwID49IDAgJiYgUHRnTm9uRGlzcC5pbmRleE9mKGZvcm11bGFbMF1bZmZdWzBdKSA9PSAtMSkge1xuXHRcdFx0XHRmID0gZm9ybXVsYVswXVtsYXN0X3NwXTtcblx0XHRcdFx0dmFyIF9sZWZ0ID0gdHJ1ZTtcblx0XHRcdFx0c3dpdGNoKGZbMV1bMF0pIHtcblx0XHRcdFx0XHQvKiBub3RlOiBzb21lIGJhZCBYTFNCIGZpbGVzIG9taXQgdGhlIFB0Z1BhcmVuICovXG5cdFx0XHRcdFx0Y2FzZSA0OiBfbGVmdCA9IGZhbHNlO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0c3AgPSBmaWxsKFwiIFwiLCBmWzFdWzFdKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSA1OiBfbGVmdCA9IGZhbHNlO1xuXHRcdFx0XHRcdC8qIGZhbGxzIHRocm91Z2ggKi9cblx0XHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0XHRcdFx0c3AgPSBmaWxsKFwiXFxyXCIsIGZbMV1bMV0pOyBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0c3AgPSBcIlwiO1xuXHRcdFx0XHRcdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIFB0Z0F0dHJTcGFjZVR5cGUgXCIgKyBmWzFdWzBdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGFjay5wdXNoKChfbGVmdCA/IHNwIDogXCJcIikgKyBzdGFjay5wb3AoKSArIChfbGVmdCA/IFwiXCIgOiBzcCkpO1xuXHRcdFx0XHRsYXN0X3NwID0gLTE7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiOjpcIixmLCBzdGFjaylcblx0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZyhcIi0tXCIsc3RhY2spO1xuXHRcdGlmKHN0YWNrLmxlbmd0aCA+IDEgJiYgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcImJhZCBmb3JtdWxhIHN0YWNrXCIpO1xuXHRcdHJldHVybiBzdGFja1swXTtcblx0fVxuXG5cdC8qIFhMU0IgUGFyc2VkIEZvcm11bGEgcmVjb3JkcyBoYXZlIHRoZSBzYW1lIHNoYXBlICovXG5cdGZ1bmN0aW9uIHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGNjZSA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgcmdjZSA9IHBhcnNlX1JnY2UoZGF0YSwgY2NlLCBvcHRzKTtcblx0XHR2YXIgY2IgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHJnY2IgPSBjYiA+IDAgPyBwYXJzZV9SZ2JFeHRyYShkYXRhLCBjYiwgcmdjZSwgb3B0cykgOiBudWxsO1xuXHRcdHJldHVybiBbcmdjZSwgcmdjYl07XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi41Ljk3LjEgQXJyYXlQYXJzZWRGb3JtdWxhICovXG5cdHZhciBwYXJzZV9YTFNCQXJyYXlQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuNCBDZWxsUGFyc2VkRm9ybXVsYSAqL1xuXHR2YXIgcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuMTIgTmFtZVBhcnNlZEZvcm11bGEgKi9cblx0dmFyIHBhcnNlX1hMU0JOYW1lUGFyc2VkRm9ybXVsYSA9IHBhcnNlX1hMU0JQYXJzZWRGb3JtdWxhO1xuXHQvKiBbTVMtWExTQl0gMi41Ljk3Ljk4IFNoYXJlZFBhcnNlZEZvcm11bGEgKi9cblx0dmFyIHBhcnNlX1hMU0JTaGFyZWRQYXJzZWRGb3JtdWxhID0gcGFyc2VfWExTQlBhcnNlZEZvcm11bGE7XG5cdC8qIFtNUy1YTFNdIDIuNS4xOTguNDQgKi9cblx0dmFyIFB0Z0RhdGFUeXBlID0ge1xuXHQweDE6IFwiUkVGRVJFTkNFXCIsIC8vIHJlZmVyZW5jZSB0byByYW5nZVxuXHQweDI6IFwiVkFMVUVcIiwgLy8gc2luZ2xlIHZhbHVlXG5cdDB4MzogXCJBUlJBWVwiIC8vIGFycmF5IG9mIHZhbHVlc1xuXHR9O1xuXG5cdC8qIFtNUy1YTFNdIDIuNS4xOTguNCAqL1xuXHR2YXIgQ2V0YWIgPSB7XG5cdDB4MDAwMDogJ0JFRVAnLFxuXHQweDAwMDE6ICdPUEVOJyxcblx0MHgwMDAyOiAnT1BFTi5MSU5LUycsXG5cdDB4MDAwMzogJ0NMT1NFLkFMTCcsXG5cdDB4MDAwNDogJ1NBVkUnLFxuXHQweDAwMDU6ICdTQVZFLkFTJyxcblx0MHgwMDA2OiAnRklMRS5ERUxFVEUnLFxuXHQweDAwMDc6ICdQQUdFLlNFVFVQJyxcblx0MHgwMDA4OiAnUFJJTlQnLFxuXHQweDAwMDk6ICdQUklOVEVSLlNFVFVQJyxcblx0MHgwMDBBOiAnUVVJVCcsXG5cdDB4MDAwQjogJ05FVy5XSU5ET1cnLFxuXHQweDAwMEM6ICdBUlJBTkdFLkFMTCcsXG5cdDB4MDAwRDogJ1dJTkRPVy5TSVpFJyxcblx0MHgwMDBFOiAnV0lORE9XLk1PVkUnLFxuXHQweDAwMEY6ICdGVUxMJyxcblx0MHgwMDEwOiAnQ0xPU0UnLFxuXHQweDAwMTE6ICdSVU4nLFxuXHQweDAwMTY6ICdTRVQuUFJJTlQuQVJFQScsXG5cdDB4MDAxNzogJ1NFVC5QUklOVC5USVRMRVMnLFxuXHQweDAwMTg6ICdTRVQuUEFHRS5CUkVBSycsXG5cdDB4MDAxOTogJ1JFTU9WRS5QQUdFLkJSRUFLJyxcblx0MHgwMDFBOiAnRk9OVCcsXG5cdDB4MDAxQjogJ0RJU1BMQVknLFxuXHQweDAwMUM6ICdQUk9URUNULkRPQ1VNRU5UJyxcblx0MHgwMDFEOiAnUFJFQ0lTSU9OJyxcblx0MHgwMDFFOiAnQTEuUjFDMScsXG5cdDB4MDAxRjogJ0NBTENVTEFURS5OT1cnLFxuXHQweDAwMjA6ICdDQUxDVUxBVElPTicsXG5cdDB4MDAyMjogJ0RBVEEuRklORCcsXG5cdDB4MDAyMzogJ0VYVFJBQ1QnLFxuXHQweDAwMjQ6ICdEQVRBLkRFTEVURScsXG5cdDB4MDAyNTogJ1NFVC5EQVRBQkFTRScsXG5cdDB4MDAyNjogJ1NFVC5DUklURVJJQScsXG5cdDB4MDAyNzogJ1NPUlQnLFxuXHQweDAwMjg6ICdEQVRBLlNFUklFUycsXG5cdDB4MDAyOTogJ1RBQkxFJyxcblx0MHgwMDJBOiAnRk9STUFULk5VTUJFUicsXG5cdDB4MDAyQjogJ0FMSUdOTUVOVCcsXG5cdDB4MDAyQzogJ1NUWUxFJyxcblx0MHgwMDJEOiAnQk9SREVSJyxcblx0MHgwMDJFOiAnQ0VMTC5QUk9URUNUSU9OJyxcblx0MHgwMDJGOiAnQ09MVU1OLldJRFRIJyxcblx0MHgwMDMwOiAnVU5ETycsXG5cdDB4MDAzMTogJ0NVVCcsXG5cdDB4MDAzMjogJ0NPUFknLFxuXHQweDAwMzM6ICdQQVNURScsXG5cdDB4MDAzNDogJ0NMRUFSJyxcblx0MHgwMDM1OiAnUEFTVEUuU1BFQ0lBTCcsXG5cdDB4MDAzNjogJ0VESVQuREVMRVRFJyxcblx0MHgwMDM3OiAnSU5TRVJUJyxcblx0MHgwMDM4OiAnRklMTC5SSUdIVCcsXG5cdDB4MDAzOTogJ0ZJTEwuRE9XTicsXG5cdDB4MDAzRDogJ0RFRklORS5OQU1FJyxcblx0MHgwMDNFOiAnQ1JFQVRFLk5BTUVTJyxcblx0MHgwMDNGOiAnRk9STVVMQS5HT1RPJyxcblx0MHgwMDQwOiAnRk9STVVMQS5GSU5EJyxcblx0MHgwMDQxOiAnU0VMRUNULkxBU1QuQ0VMTCcsXG5cdDB4MDA0MjogJ1NIT1cuQUNUSVZFLkNFTEwnLFxuXHQweDAwNDM6ICdHQUxMRVJZLkFSRUEnLFxuXHQweDAwNDQ6ICdHQUxMRVJZLkJBUicsXG5cdDB4MDA0NTogJ0dBTExFUlkuQ09MVU1OJyxcblx0MHgwMDQ2OiAnR0FMTEVSWS5MSU5FJyxcblx0MHgwMDQ3OiAnR0FMTEVSWS5QSUUnLFxuXHQweDAwNDg6ICdHQUxMRVJZLlNDQVRURVInLFxuXHQweDAwNDk6ICdDT01CSU5BVElPTicsXG5cdDB4MDA0QTogJ1BSRUZFUlJFRCcsXG5cdDB4MDA0QjogJ0FERC5PVkVSTEFZJyxcblx0MHgwMDRDOiAnR1JJRExJTkVTJyxcblx0MHgwMDREOiAnU0VULlBSRUZFUlJFRCcsXG5cdDB4MDA0RTogJ0FYRVMnLFxuXHQweDAwNEY6ICdMRUdFTkQnLFxuXHQweDAwNTA6ICdBVFRBQ0guVEVYVCcsXG5cdDB4MDA1MTogJ0FERC5BUlJPVycsXG5cdDB4MDA1MjogJ1NFTEVDVC5DSEFSVCcsXG5cdDB4MDA1MzogJ1NFTEVDVC5QTE9ULkFSRUEnLFxuXHQweDAwNTQ6ICdQQVRURVJOUycsXG5cdDB4MDA1NTogJ01BSU4uQ0hBUlQnLFxuXHQweDAwNTY6ICdPVkVSTEFZJyxcblx0MHgwMDU3OiAnU0NBTEUnLFxuXHQweDAwNTg6ICdGT1JNQVQuTEVHRU5EJyxcblx0MHgwMDU5OiAnRk9STUFULlRFWFQnLFxuXHQweDAwNUE6ICdFRElULlJFUEVBVCcsXG5cdDB4MDA1QjogJ1BBUlNFJyxcblx0MHgwMDVDOiAnSlVTVElGWScsXG5cdDB4MDA1RDogJ0hJREUnLFxuXHQweDAwNUU6ICdVTkhJREUnLFxuXHQweDAwNUY6ICdXT1JLU1BBQ0UnLFxuXHQweDAwNjA6ICdGT1JNVUxBJyxcblx0MHgwMDYxOiAnRk9STVVMQS5GSUxMJyxcblx0MHgwMDYyOiAnRk9STVVMQS5BUlJBWScsXG5cdDB4MDA2MzogJ0RBVEEuRklORC5ORVhUJyxcblx0MHgwMDY0OiAnREFUQS5GSU5ELlBSRVYnLFxuXHQweDAwNjU6ICdGT1JNVUxBLkZJTkQuTkVYVCcsXG5cdDB4MDA2NjogJ0ZPUk1VTEEuRklORC5QUkVWJyxcblx0MHgwMDY3OiAnQUNUSVZBVEUnLFxuXHQweDAwNjg6ICdBQ1RJVkFURS5ORVhUJyxcblx0MHgwMDY5OiAnQUNUSVZBVEUuUFJFVicsXG5cdDB4MDA2QTogJ1VOTE9DS0VELk5FWFQnLFxuXHQweDAwNkI6ICdVTkxPQ0tFRC5QUkVWJyxcblx0MHgwMDZDOiAnQ09QWS5QSUNUVVJFJyxcblx0MHgwMDZEOiAnU0VMRUNUJyxcblx0MHgwMDZFOiAnREVMRVRFLk5BTUUnLFxuXHQweDAwNkY6ICdERUxFVEUuRk9STUFUJyxcblx0MHgwMDcwOiAnVkxJTkUnLFxuXHQweDAwNzE6ICdITElORScsXG5cdDB4MDA3MjogJ1ZQQUdFJyxcblx0MHgwMDczOiAnSFBBR0UnLFxuXHQweDAwNzQ6ICdWU0NST0xMJyxcblx0MHgwMDc1OiAnSFNDUk9MTCcsXG5cdDB4MDA3NjogJ0FMRVJUJyxcblx0MHgwMDc3OiAnTkVXJyxcblx0MHgwMDc4OiAnQ0FOQ0VMLkNPUFknLFxuXHQweDAwNzk6ICdTSE9XLkNMSVBCT0FSRCcsXG5cdDB4MDA3QTogJ01FU1NBR0UnLFxuXHQweDAwN0M6ICdQQVNURS5MSU5LJyxcblx0MHgwMDdEOiAnQVBQLkFDVElWQVRFJyxcblx0MHgwMDdFOiAnREVMRVRFLkFSUk9XJyxcblx0MHgwMDdGOiAnUk9XLkhFSUdIVCcsXG5cdDB4MDA4MDogJ0ZPUk1BVC5NT1ZFJyxcblx0MHgwMDgxOiAnRk9STUFULlNJWkUnLFxuXHQweDAwODI6ICdGT1JNVUxBLlJFUExBQ0UnLFxuXHQweDAwODM6ICdTRU5ELktFWVMnLFxuXHQweDAwODQ6ICdTRUxFQ1QuU1BFQ0lBTCcsXG5cdDB4MDA4NTogJ0FQUExZLk5BTUVTJyxcblx0MHgwMDg2OiAnUkVQTEFDRS5GT05UJyxcblx0MHgwMDg3OiAnRlJFRVpFLlBBTkVTJyxcblx0MHgwMDg4OiAnU0hPVy5JTkZPJyxcblx0MHgwMDg5OiAnU1BMSVQnLFxuXHQweDAwOEE6ICdPTi5XSU5ET1cnLFxuXHQweDAwOEI6ICdPTi5EQVRBJyxcblx0MHgwMDhDOiAnRElTQUJMRS5JTlBVVCcsXG5cdDB4MDA4RTogJ09VVExJTkUnLFxuXHQweDAwOEY6ICdMSVNULk5BTUVTJyxcblx0MHgwMDkwOiAnRklMRS5DTE9TRScsXG5cdDB4MDA5MTogJ1NBVkUuV09SS0JPT0snLFxuXHQweDAwOTI6ICdEQVRBLkZPUk0nLFxuXHQweDAwOTM6ICdDT1BZLkNIQVJUJyxcblx0MHgwMDk0OiAnT04uVElNRScsXG5cdDB4MDA5NTogJ1dBSVQnLFxuXHQweDAwOTY6ICdGT1JNQVQuRk9OVCcsXG5cdDB4MDA5NzogJ0ZJTEwuVVAnLFxuXHQweDAwOTg6ICdGSUxMLkxFRlQnLFxuXHQweDAwOTk6ICdERUxFVEUuT1ZFUkxBWScsXG5cdDB4MDA5QjogJ1NIT1JULk1FTlVTJyxcblx0MHgwMDlGOiAnU0VULlVQREFURS5TVEFUVVMnLFxuXHQweDAwQTE6ICdDT0xPUi5QQUxFVFRFJyxcblx0MHgwMEEyOiAnREVMRVRFLlNUWUxFJyxcblx0MHgwMEEzOiAnV0lORE9XLlJFU1RPUkUnLFxuXHQweDAwQTQ6ICdXSU5ET1cuTUFYSU1JWkUnLFxuXHQweDAwQTY6ICdDSEFOR0UuTElOSycsXG5cdDB4MDBBNzogJ0NBTENVTEFURS5ET0NVTUVOVCcsXG5cdDB4MDBBODogJ09OLktFWScsXG5cdDB4MDBBOTogJ0FQUC5SRVNUT1JFJyxcblx0MHgwMEFBOiAnQVBQLk1PVkUnLFxuXHQweDAwQUI6ICdBUFAuU0laRScsXG5cdDB4MDBBQzogJ0FQUC5NSU5JTUlaRScsXG5cdDB4MDBBRDogJ0FQUC5NQVhJTUlaRScsXG5cdDB4MDBBRTogJ0JSSU5HLlRPLkZST05UJyxcblx0MHgwMEFGOiAnU0VORC5UTy5CQUNLJyxcblx0MHgwMEI5OiAnTUFJTi5DSEFSVC5UWVBFJyxcblx0MHgwMEJBOiAnT1ZFUkxBWS5DSEFSVC5UWVBFJyxcblx0MHgwMEJCOiAnU0VMRUNULkVORCcsXG5cdDB4MDBCQzogJ09QRU4uTUFJTCcsXG5cdDB4MDBCRDogJ1NFTkQuTUFJTCcsXG5cdDB4MDBCRTogJ1NUQU5EQVJELkZPTlQnLFxuXHQweDAwQkY6ICdDT05TT0xJREFURScsXG5cdDB4MDBDMDogJ1NPUlQuU1BFQ0lBTCcsXG5cdDB4MDBDMTogJ0dBTExFUlkuM0QuQVJFQScsXG5cdDB4MDBDMjogJ0dBTExFUlkuM0QuQ09MVU1OJyxcblx0MHgwMEMzOiAnR0FMTEVSWS4zRC5MSU5FJyxcblx0MHgwMEM0OiAnR0FMTEVSWS4zRC5QSUUnLFxuXHQweDAwQzU6ICdWSUVXLjNEJyxcblx0MHgwMEM2OiAnR09BTC5TRUVLJyxcblx0MHgwMEM3OiAnV09SS0dST1VQJyxcblx0MHgwMEM4OiAnRklMTC5HUk9VUCcsXG5cdDB4MDBDOTogJ1VQREFURS5MSU5LJyxcblx0MHgwMENBOiAnUFJPTU9URScsXG5cdDB4MDBDQjogJ0RFTU9URScsXG5cdDB4MDBDQzogJ1NIT1cuREVUQUlMJyxcblx0MHgwMENFOiAnVU5HUk9VUCcsXG5cdDB4MDBDRjogJ09CSkVDVC5QUk9QRVJUSUVTJyxcblx0MHgwMEQwOiAnU0FWRS5ORVcuT0JKRUNUJyxcblx0MHgwMEQxOiAnU0hBUkUnLFxuXHQweDAwRDI6ICdTSEFSRS5OQU1FJyxcblx0MHgwMEQzOiAnRFVQTElDQVRFJyxcblx0MHgwMEQ0OiAnQVBQTFkuU1RZTEUnLFxuXHQweDAwRDU6ICdBU1NJR04uVE8uT0JKRUNUJyxcblx0MHgwMEQ2OiAnT0JKRUNULlBST1RFQ1RJT04nLFxuXHQweDAwRDc6ICdISURFLk9CSkVDVCcsXG5cdDB4MDBEODogJ1NFVC5FWFRSQUNUJyxcblx0MHgwMEQ5OiAnQ1JFQVRFLlBVQkxJU0hFUicsXG5cdDB4MDBEQTogJ1NVQlNDUklCRS5UTycsXG5cdDB4MDBEQjogJ0FUVFJJQlVURVMnLFxuXHQweDAwREM6ICdTSE9XLlRPT0xCQVInLFxuXHQweDAwREU6ICdQUklOVC5QUkVWSUVXJyxcblx0MHgwMERGOiAnRURJVC5DT0xPUicsXG5cdDB4MDBFMDogJ1NIT1cuTEVWRUxTJyxcblx0MHgwMEUxOiAnRk9STUFULk1BSU4nLFxuXHQweDAwRTI6ICdGT1JNQVQuT1ZFUkxBWScsXG5cdDB4MDBFMzogJ09OLlJFQ0FMQycsXG5cdDB4MDBFNDogJ0VESVQuU0VSSUVTJyxcblx0MHgwMEU1OiAnREVGSU5FLlNUWUxFJyxcblx0MHgwMEYwOiAnTElORS5QUklOVCcsXG5cdDB4MDBGMzogJ0VOVEVSLkRBVEEnLFxuXHQweDAwRjk6ICdHQUxMRVJZLlJBREFSJyxcblx0MHgwMEZBOiAnTUVSR0UuU1RZTEVTJyxcblx0MHgwMEZCOiAnRURJVElPTi5PUFRJT05TJyxcblx0MHgwMEZDOiAnUEFTVEUuUElDVFVSRScsXG5cdDB4MDBGRDogJ1BBU1RFLlBJQ1RVUkUuTElOSycsXG5cdDB4MDBGRTogJ1NQRUxMSU5HJyxcblx0MHgwMTAwOiAnWk9PTScsXG5cdDB4MDEwMzogJ0lOU0VSVC5PQkpFQ1QnLFxuXHQweDAxMDQ6ICdXSU5ET1cuTUlOSU1JWkUnLFxuXHQweDAxMDk6ICdTT1VORC5OT1RFJyxcblx0MHgwMTBBOiAnU09VTkQuUExBWScsXG5cdDB4MDEwQjogJ0ZPUk1BVC5TSEFQRScsXG5cdDB4MDEwQzogJ0VYVEVORC5QT0xZR09OJyxcblx0MHgwMTBEOiAnRk9STUFULkFVVE8nLFxuXHQweDAxMTA6ICdHQUxMRVJZLjNELkJBUicsXG5cdDB4MDExMTogJ0dBTExFUlkuM0QuU1VSRkFDRScsXG5cdDB4MDExMjogJ0ZJTEwuQVVUTycsXG5cdDB4MDExNDogJ0NVU1RPTUlaRS5UT09MQkFSJyxcblx0MHgwMTE1OiAnQURELlRPT0wnLFxuXHQweDAxMTY6ICdFRElULk9CSkVDVCcsXG5cdDB4MDExNzogJ09OLkRPVUJMRUNMSUNLJyxcblx0MHgwMTE4OiAnT04uRU5UUlknLFxuXHQweDAxMTk6ICdXT1JLQk9PSy5BREQnLFxuXHQweDAxMUE6ICdXT1JLQk9PSy5NT1ZFJyxcblx0MHgwMTFCOiAnV09SS0JPT0suQ09QWScsXG5cdDB4MDExQzogJ1dPUktCT09LLk9QVElPTlMnLFxuXHQweDAxMUQ6ICdTQVZFLldPUktTUEFDRScsXG5cdDB4MDEyMDogJ0NIQVJULldJWkFSRCcsXG5cdDB4MDEyMTogJ0RFTEVURS5UT09MJyxcblx0MHgwMTIyOiAnTU9WRS5UT09MJyxcblx0MHgwMTIzOiAnV09SS0JPT0suU0VMRUNUJyxcblx0MHgwMTI0OiAnV09SS0JPT0suQUNUSVZBVEUnLFxuXHQweDAxMjU6ICdBU1NJR04uVE8uVE9PTCcsXG5cdDB4MDEyNzogJ0NPUFkuVE9PTCcsXG5cdDB4MDEyODogJ1JFU0VULlRPT0wnLFxuXHQweDAxMjk6ICdDT05TVFJBSU4uTlVNRVJJQycsXG5cdDB4MDEyQTogJ1BBU1RFLlRPT0wnLFxuXHQweDAxMkU6ICdXT1JLQk9PSy5ORVcnLFxuXHQweDAxMzE6ICdTQ0VOQVJJTy5DRUxMUycsXG5cdDB4MDEzMjogJ1NDRU5BUklPLkRFTEVURScsXG5cdDB4MDEzMzogJ1NDRU5BUklPLkFERCcsXG5cdDB4MDEzNDogJ1NDRU5BUklPLkVESVQnLFxuXHQweDAxMzU6ICdTQ0VOQVJJTy5TSE9XJyxcblx0MHgwMTM2OiAnU0NFTkFSSU8uU0hPVy5ORVhUJyxcblx0MHgwMTM3OiAnU0NFTkFSSU8uU1VNTUFSWScsXG5cdDB4MDEzODogJ1BJVk9ULlRBQkxFLldJWkFSRCcsXG5cdDB4MDEzOTogJ1BJVk9ULkZJRUxELlBST1BFUlRJRVMnLFxuXHQweDAxM0E6ICdQSVZPVC5GSUVMRCcsXG5cdDB4MDEzQjogJ1BJVk9ULklURU0nLFxuXHQweDAxM0M6ICdQSVZPVC5BREQuRklFTERTJyxcblx0MHgwMTNFOiAnT1BUSU9OUy5DQUxDVUxBVElPTicsXG5cdDB4MDEzRjogJ09QVElPTlMuRURJVCcsXG5cdDB4MDE0MDogJ09QVElPTlMuVklFVycsXG5cdDB4MDE0MTogJ0FERElOLk1BTkFHRVInLFxuXHQweDAxNDI6ICdNRU5VLkVESVRPUicsXG5cdDB4MDE0MzogJ0FUVEFDSC5UT09MQkFSUycsXG5cdDB4MDE0NDogJ1ZCQUFjdGl2YXRlJyxcblx0MHgwMTQ1OiAnT1BUSU9OUy5DSEFSVCcsXG5cdDB4MDE0ODogJ1ZCQS5JTlNFUlQuRklMRScsXG5cdDB4MDE0QTogJ1ZCQS5QUk9DRURVUkUuREVGSU5JVElPTicsXG5cdDB4MDE1MDogJ1JPVVRJTkcuU0xJUCcsXG5cdDB4MDE1MjogJ1JPVVRFLkRPQ1VNRU5UJyxcblx0MHgwMTUzOiAnTUFJTC5MT0dPTicsXG5cdDB4MDE1NjogJ0lOU0VSVC5QSUNUVVJFJyxcblx0MHgwMTU3OiAnRURJVC5UT09MJyxcblx0MHgwMTU4OiAnR0FMTEVSWS5ET1VHSE5VVCcsXG5cdDB4MDE1RTogJ0NIQVJULlRSRU5EJyxcblx0MHgwMTYwOiAnUElWT1QuSVRFTS5QUk9QRVJUSUVTJyxcblx0MHgwMTYyOiAnV09SS0JPT0suSU5TRVJUJyxcblx0MHgwMTYzOiAnT1BUSU9OUy5UUkFOU0lUSU9OJyxcblx0MHgwMTY0OiAnT1BUSU9OUy5HRU5FUkFMJyxcblx0MHgwMTcyOiAnRklMVEVSLkFEVkFOQ0VEJyxcblx0MHgwMTc1OiAnTUFJTC5BREQuTUFJTEVSJyxcblx0MHgwMTc2OiAnTUFJTC5ERUxFVEUuTUFJTEVSJyxcblx0MHgwMTc3OiAnTUFJTC5SRVBMWScsXG5cdDB4MDE3ODogJ01BSUwuUkVQTFkuQUxMJyxcblx0MHgwMTc5OiAnTUFJTC5GT1JXQVJEJyxcblx0MHgwMTdBOiAnTUFJTC5ORVhULkxFVFRFUicsXG5cdDB4MDE3QjogJ0RBVEEuTEFCRUwnLFxuXHQweDAxN0M6ICdJTlNFUlQuVElUTEUnLFxuXHQweDAxN0Q6ICdGT05ULlBST1BFUlRJRVMnLFxuXHQweDAxN0U6ICdNQUNSTy5PUFRJT05TJyxcblx0MHgwMTdGOiAnV09SS0JPT0suSElERScsXG5cdDB4MDE4MDogJ1dPUktCT09LLlVOSElERScsXG5cdDB4MDE4MTogJ1dPUktCT09LLkRFTEVURScsXG5cdDB4MDE4MjogJ1dPUktCT09LLk5BTUUnLFxuXHQweDAxODQ6ICdHQUxMRVJZLkNVU1RPTScsXG5cdDB4MDE4NjogJ0FERC5DSEFSVC5BVVRPRk9STUFUJyxcblx0MHgwMTg3OiAnREVMRVRFLkNIQVJULkFVVE9GT1JNQVQnLFxuXHQweDAxODg6ICdDSEFSVC5BREQuREFUQScsXG5cdDB4MDE4OTogJ0FVVE8uT1VUTElORScsXG5cdDB4MDE4QTogJ1RBQi5PUkRFUicsXG5cdDB4MDE4QjogJ1NIT1cuRElBTE9HJyxcblx0MHgwMThDOiAnU0VMRUNULkFMTCcsXG5cdDB4MDE4RDogJ1VOR1JPVVAuU0hFRVRTJyxcblx0MHgwMThFOiAnU1VCVE9UQUwuQ1JFQVRFJyxcblx0MHgwMThGOiAnU1VCVE9UQUwuUkVNT1ZFJyxcblx0MHgwMTkwOiAnUkVOQU1FLk9CSkVDVCcsXG5cdDB4MDE5QzogJ1dPUktCT09LLlNDUk9MTCcsXG5cdDB4MDE5RDogJ1dPUktCT09LLk5FWFQnLFxuXHQweDAxOUU6ICdXT1JLQk9PSy5QUkVWJyxcblx0MHgwMTlGOiAnV09SS0JPT0suVEFCLlNQTElUJyxcblx0MHgwMUEwOiAnRlVMTC5TQ1JFRU4nLFxuXHQweDAxQTE6ICdXT1JLQk9PSy5QUk9URUNUJyxcblx0MHgwMUE0OiAnU0NST0xMQkFSLlBST1BFUlRJRVMnLFxuXHQweDAxQTU6ICdQSVZPVC5TSE9XLlBBR0VTJyxcblx0MHgwMUE2OiAnVEVYVC5UTy5DT0xVTU5TJyxcblx0MHgwMUE3OiAnRk9STUFULkNIQVJUVFlQRScsXG5cdDB4MDFBODogJ0xJTksuRk9STUFUJyxcblx0MHgwMUE5OiAnVFJBQ0VSLkRJU1BMQVknLFxuXHQweDAxQUU6ICdUUkFDRVIuTkFWSUdBVEUnLFxuXHQweDAxQUY6ICdUUkFDRVIuQ0xFQVInLFxuXHQweDAxQjA6ICdUUkFDRVIuRVJST1InLFxuXHQweDAxQjE6ICdQSVZPVC5GSUVMRC5HUk9VUCcsXG5cdDB4MDFCMjogJ1BJVk9ULkZJRUxELlVOR1JPVVAnLFxuXHQweDAxQjM6ICdDSEVDS0JPWC5QUk9QRVJUSUVTJyxcblx0MHgwMUI0OiAnTEFCRUwuUFJPUEVSVElFUycsXG5cdDB4MDFCNTogJ0xJU1RCT1guUFJPUEVSVElFUycsXG5cdDB4MDFCNjogJ0VESVRCT1guUFJPUEVSVElFUycsXG5cdDB4MDFCNzogJ1BJVk9ULlJFRlJFU0gnLFxuXHQweDAxQjg6ICdMSU5LLkNPTUJPJyxcblx0MHgwMUI5OiAnT1BFTi5URVhUJyxcblx0MHgwMUJBOiAnSElERS5ESUFMT0cnLFxuXHQweDAxQkI6ICdTRVQuRElBTE9HLkZPQ1VTJyxcblx0MHgwMUJDOiAnRU5BQkxFLk9CSkVDVCcsXG5cdDB4MDFCRDogJ1BVU0hCVVRUT04uUFJPUEVSVElFUycsXG5cdDB4MDFCRTogJ1NFVC5ESUFMT0cuREVGQVVMVCcsXG5cdDB4MDFCRjogJ0ZJTFRFUicsXG5cdDB4MDFDMDogJ0ZJTFRFUi5TSE9XLkFMTCcsXG5cdDB4MDFDMTogJ0NMRUFSLk9VVExJTkUnLFxuXHQweDAxQzI6ICdGVU5DVElPTi5XSVpBUkQnLFxuXHQweDAxQzM6ICdBREQuTElTVC5JVEVNJyxcblx0MHgwMUM0OiAnU0VULkxJU1QuSVRFTScsXG5cdDB4MDFDNTogJ1JFTU9WRS5MSVNULklURU0nLFxuXHQweDAxQzY6ICdTRUxFQ1QuTElTVC5JVEVNJyxcblx0MHgwMUM3OiAnU0VULkNPTlRST0wuVkFMVUUnLFxuXHQweDAxQzg6ICdTQVZFLkNPUFkuQVMnLFxuXHQweDAxQ0E6ICdPUFRJT05TLkxJU1RTLkFERCcsXG5cdDB4MDFDQjogJ09QVElPTlMuTElTVFMuREVMRVRFJyxcblx0MHgwMUNDOiAnU0VSSUVTLkFYRVMnLFxuXHQweDAxQ0Q6ICdTRVJJRVMuWCcsXG5cdDB4MDFDRTogJ1NFUklFUy5ZJyxcblx0MHgwMUNGOiAnRVJST1JCQVIuWCcsXG5cdDB4MDFEMDogJ0VSUk9SQkFSLlknLFxuXHQweDAxRDE6ICdGT1JNQVQuQ0hBUlQnLFxuXHQweDAxRDI6ICdTRVJJRVMuT1JERVInLFxuXHQweDAxRDM6ICdNQUlMLkxPR09GRicsXG5cdDB4MDFENDogJ0NMRUFSLlJPVVRJTkcuU0xJUCcsXG5cdDB4MDFENTogJ0FQUC5BQ1RJVkFURS5NSUNST1NPRlQnLFxuXHQweDAxRDY6ICdNQUlMLkVESVQuTUFJTEVSJyxcblx0MHgwMUQ3OiAnT04uU0hFRVQnLFxuXHQweDAxRDg6ICdTVEFOREFSRC5XSURUSCcsXG5cdDB4MDFEOTogJ1NDRU5BUklPLk1FUkdFJyxcblx0MHgwMURBOiAnU1VNTUFSWS5JTkZPJyxcblx0MHgwMURCOiAnRklORC5GSUxFJyxcblx0MHgwMURDOiAnQUNUSVZFLkNFTEwuRk9OVCcsXG5cdDB4MDFERDogJ0VOQUJMRS5USVBXSVpBUkQnLFxuXHQweDAxREU6ICdWQkEuTUFLRS5BRERJTicsXG5cdDB4MDFFMDogJ0lOU0VSVERBVEFUQUJMRScsXG5cdDB4MDFFMTogJ1dPUktHUk9VUC5PUFRJT05TJyxcblx0MHgwMUUyOiAnTUFJTC5TRU5ELk1BSUxFUicsXG5cdDB4MDFFNTogJ0FVVE9DT1JSRUNUJyxcblx0MHgwMUU5OiAnUE9TVC5ET0NVTUVOVCcsXG5cdDB4MDFFQjogJ1BJQ0tMSVNUJyxcblx0MHgwMUVEOiAnVklFVy5TSE9XJyxcblx0MHgwMUVFOiAnVklFVy5ERUZJTkUnLFxuXHQweDAxRUY6ICdWSUVXLkRFTEVURScsXG5cdDB4MDFGRDogJ1NIRUVULkJBQ0tHUk9VTkQnLFxuXHQweDAxRkU6ICdJTlNFUlQuTUFQLk9CSkVDVCcsXG5cdDB4MDFGRjogJ09QVElPTlMuTUVOT05PJyxcblx0MHgwMjA1OiAnTVNPQ0hFQ0tTJyxcblx0MHgwMjA2OiAnTk9STUFMJyxcblx0MHgwMjA3OiAnTEFZT1VUJyxcblx0MHgwMjA4OiAnUk0uUFJJTlQuQVJFQScsXG5cdDB4MDIwOTogJ0NMRUFSLlBSSU5ULkFSRUEnLFxuXHQweDAyMEE6ICdBREQuUFJJTlQuQVJFQScsXG5cdDB4MDIwQjogJ01PVkUuQlJLJyxcblx0MHgwMjIxOiAnSElERUNVUlIuTk9URScsXG5cdDB4MDIyMjogJ0hJREVBTEwuTk9URVMnLFxuXHQweDAyMjM6ICdERUxFVEUuTk9URScsXG5cdDB4MDIyNDogJ1RSQVZFUlNFLk5PVEVTJyxcblx0MHgwMjI1OiAnQUNUSVZBVEUuTk9URVMnLFxuXHQweDAyNkM6ICdQUk9URUNULlJFVklTSU9OUycsXG5cdDB4MDI2RDogJ1VOUFJPVEVDVC5SRVZJU0lPTlMnLFxuXHQweDAyODc6ICdPUFRJT05TLk1FJyxcblx0MHgwMjhEOiAnV0VCLlBVQkxJU0gnLFxuXHQweDAyOUI6ICdORVdXRUJRVUVSWScsXG5cdDB4MDJBMTogJ1BJVk9ULlRBQkxFLkNIQVJUJyxcblx0MHgwMkYxOiAnT1BUSU9OUy5TQVZFJyxcblx0MHgwMkYzOiAnT1BUSU9OUy5TUEVMTCcsXG5cdDB4MDMyODogJ0hJREVBTEwuSU5LQU5OT1RTJ1xuXHR9O1xuXG5cdC8qIFtNUy1YTFNdIDIuNS4xOTguMTcgKi9cblx0LyogW01TLVhMU0JdIDIuNS45Ny4xMCAqL1xuXHR2YXIgRnRhYiA9IHtcblx0MHgwMDAwOiAnQ09VTlQnLFxuXHQweDAwMDE6ICdJRicsXG5cdDB4MDAwMjogJ0lTTkEnLFxuXHQweDAwMDM6ICdJU0VSUk9SJyxcblx0MHgwMDA0OiAnU1VNJyxcblx0MHgwMDA1OiAnQVZFUkFHRScsXG5cdDB4MDAwNjogJ01JTicsXG5cdDB4MDAwNzogJ01BWCcsXG5cdDB4MDAwODogJ1JPVycsXG5cdDB4MDAwOTogJ0NPTFVNTicsXG5cdDB4MDAwQTogJ05BJyxcblx0MHgwMDBCOiAnTlBWJyxcblx0MHgwMDBDOiAnU1RERVYnLFxuXHQweDAwMEQ6ICdET0xMQVInLFxuXHQweDAwMEU6ICdGSVhFRCcsXG5cdDB4MDAwRjogJ1NJTicsXG5cdDB4MDAxMDogJ0NPUycsXG5cdDB4MDAxMTogJ1RBTicsXG5cdDB4MDAxMjogJ0FUQU4nLFxuXHQweDAwMTM6ICdQSScsXG5cdDB4MDAxNDogJ1NRUlQnLFxuXHQweDAwMTU6ICdFWFAnLFxuXHQweDAwMTY6ICdMTicsXG5cdDB4MDAxNzogJ0xPRzEwJyxcblx0MHgwMDE4OiAnQUJTJyxcblx0MHgwMDE5OiAnSU5UJyxcblx0MHgwMDFBOiAnU0lHTicsXG5cdDB4MDAxQjogJ1JPVU5EJyxcblx0MHgwMDFDOiAnTE9PS1VQJyxcblx0MHgwMDFEOiAnSU5ERVgnLFxuXHQweDAwMUU6ICdSRVBUJyxcblx0MHgwMDFGOiAnTUlEJyxcblx0MHgwMDIwOiAnTEVOJyxcblx0MHgwMDIxOiAnVkFMVUUnLFxuXHQweDAwMjI6ICdUUlVFJyxcblx0MHgwMDIzOiAnRkFMU0UnLFxuXHQweDAwMjQ6ICdBTkQnLFxuXHQweDAwMjU6ICdPUicsXG5cdDB4MDAyNjogJ05PVCcsXG5cdDB4MDAyNzogJ01PRCcsXG5cdDB4MDAyODogJ0RDT1VOVCcsXG5cdDB4MDAyOTogJ0RTVU0nLFxuXHQweDAwMkE6ICdEQVZFUkFHRScsXG5cdDB4MDAyQjogJ0RNSU4nLFxuXHQweDAwMkM6ICdETUFYJyxcblx0MHgwMDJEOiAnRFNUREVWJyxcblx0MHgwMDJFOiAnVkFSJyxcblx0MHgwMDJGOiAnRFZBUicsXG5cdDB4MDAzMDogJ1RFWFQnLFxuXHQweDAwMzE6ICdMSU5FU1QnLFxuXHQweDAwMzI6ICdUUkVORCcsXG5cdDB4MDAzMzogJ0xPR0VTVCcsXG5cdDB4MDAzNDogJ0dST1dUSCcsXG5cdDB4MDAzNTogJ0dPVE8nLFxuXHQweDAwMzY6ICdIQUxUJyxcblx0MHgwMDM3OiAnUkVUVVJOJyxcblx0MHgwMDM4OiAnUFYnLFxuXHQweDAwMzk6ICdGVicsXG5cdDB4MDAzQTogJ05QRVInLFxuXHQweDAwM0I6ICdQTVQnLFxuXHQweDAwM0M6ICdSQVRFJyxcblx0MHgwMDNEOiAnTUlSUicsXG5cdDB4MDAzRTogJ0lSUicsXG5cdDB4MDAzRjogJ1JBTkQnLFxuXHQweDAwNDA6ICdNQVRDSCcsXG5cdDB4MDA0MTogJ0RBVEUnLFxuXHQweDAwNDI6ICdUSU1FJyxcblx0MHgwMDQzOiAnREFZJyxcblx0MHgwMDQ0OiAnTU9OVEgnLFxuXHQweDAwNDU6ICdZRUFSJyxcblx0MHgwMDQ2OiAnV0VFS0RBWScsXG5cdDB4MDA0NzogJ0hPVVInLFxuXHQweDAwNDg6ICdNSU5VVEUnLFxuXHQweDAwNDk6ICdTRUNPTkQnLFxuXHQweDAwNEE6ICdOT1cnLFxuXHQweDAwNEI6ICdBUkVBUycsXG5cdDB4MDA0QzogJ1JPV1MnLFxuXHQweDAwNEQ6ICdDT0xVTU5TJyxcblx0MHgwMDRFOiAnT0ZGU0VUJyxcblx0MHgwMDRGOiAnQUJTUkVGJyxcblx0MHgwMDUwOiAnUkVMUkVGJyxcblx0MHgwMDUxOiAnQVJHVU1FTlQnLFxuXHQweDAwNTI6ICdTRUFSQ0gnLFxuXHQweDAwNTM6ICdUUkFOU1BPU0UnLFxuXHQweDAwNTQ6ICdFUlJPUicsXG5cdDB4MDA1NTogJ1NURVAnLFxuXHQweDAwNTY6ICdUWVBFJyxcblx0MHgwMDU3OiAnRUNITycsXG5cdDB4MDA1ODogJ1NFVC5OQU1FJyxcblx0MHgwMDU5OiAnQ0FMTEVSJyxcblx0MHgwMDVBOiAnREVSRUYnLFxuXHQweDAwNUI6ICdXSU5ET1dTJyxcblx0MHgwMDVDOiAnU0VSSUVTJyxcblx0MHgwMDVEOiAnRE9DVU1FTlRTJyxcblx0MHgwMDVFOiAnQUNUSVZFLkNFTEwnLFxuXHQweDAwNUY6ICdTRUxFQ1RJT04nLFxuXHQweDAwNjA6ICdSRVNVTFQnLFxuXHQweDAwNjE6ICdBVEFOMicsXG5cdDB4MDA2MjogJ0FTSU4nLFxuXHQweDAwNjM6ICdBQ09TJyxcblx0MHgwMDY0OiAnQ0hPT1NFJyxcblx0MHgwMDY1OiAnSExPT0tVUCcsXG5cdDB4MDA2NjogJ1ZMT09LVVAnLFxuXHQweDAwNjc6ICdMSU5LUycsXG5cdDB4MDA2ODogJ0lOUFVUJyxcblx0MHgwMDY5OiAnSVNSRUYnLFxuXHQweDAwNkE6ICdHRVQuRk9STVVMQScsXG5cdDB4MDA2QjogJ0dFVC5OQU1FJyxcblx0MHgwMDZDOiAnU0VULlZBTFVFJyxcblx0MHgwMDZEOiAnTE9HJyxcblx0MHgwMDZFOiAnRVhFQycsXG5cdDB4MDA2RjogJ0NIQVInLFxuXHQweDAwNzA6ICdMT1dFUicsXG5cdDB4MDA3MTogJ1VQUEVSJyxcblx0MHgwMDcyOiAnUFJPUEVSJyxcblx0MHgwMDczOiAnTEVGVCcsXG5cdDB4MDA3NDogJ1JJR0hUJyxcblx0MHgwMDc1OiAnRVhBQ1QnLFxuXHQweDAwNzY6ICdUUklNJyxcblx0MHgwMDc3OiAnUkVQTEFDRScsXG5cdDB4MDA3ODogJ1NVQlNUSVRVVEUnLFxuXHQweDAwNzk6ICdDT0RFJyxcblx0MHgwMDdBOiAnTkFNRVMnLFxuXHQweDAwN0I6ICdESVJFQ1RPUlknLFxuXHQweDAwN0M6ICdGSU5EJyxcblx0MHgwMDdEOiAnQ0VMTCcsXG5cdDB4MDA3RTogJ0lTRVJSJyxcblx0MHgwMDdGOiAnSVNURVhUJyxcblx0MHgwMDgwOiAnSVNOVU1CRVInLFxuXHQweDAwODE6ICdJU0JMQU5LJyxcblx0MHgwMDgyOiAnVCcsXG5cdDB4MDA4MzogJ04nLFxuXHQweDAwODQ6ICdGT1BFTicsXG5cdDB4MDA4NTogJ0ZDTE9TRScsXG5cdDB4MDA4NjogJ0ZTSVpFJyxcblx0MHgwMDg3OiAnRlJFQURMTicsXG5cdDB4MDA4ODogJ0ZSRUFEJyxcblx0MHgwMDg5OiAnRldSSVRFTE4nLFxuXHQweDAwOEE6ICdGV1JJVEUnLFxuXHQweDAwOEI6ICdGUE9TJyxcblx0MHgwMDhDOiAnREFURVZBTFVFJyxcblx0MHgwMDhEOiAnVElNRVZBTFVFJyxcblx0MHgwMDhFOiAnU0xOJyxcblx0MHgwMDhGOiAnU1lEJyxcblx0MHgwMDkwOiAnRERCJyxcblx0MHgwMDkxOiAnR0VULkRFRicsXG5cdDB4MDA5MjogJ1JFRlRFWFQnLFxuXHQweDAwOTM6ICdURVhUUkVGJyxcblx0MHgwMDk0OiAnSU5ESVJFQ1QnLFxuXHQweDAwOTU6ICdSRUdJU1RFUicsXG5cdDB4MDA5NjogJ0NBTEwnLFxuXHQweDAwOTc6ICdBREQuQkFSJyxcblx0MHgwMDk4OiAnQURELk1FTlUnLFxuXHQweDAwOTk6ICdBREQuQ09NTUFORCcsXG5cdDB4MDA5QTogJ0VOQUJMRS5DT01NQU5EJyxcblx0MHgwMDlCOiAnQ0hFQ0suQ09NTUFORCcsXG5cdDB4MDA5QzogJ1JFTkFNRS5DT01NQU5EJyxcblx0MHgwMDlEOiAnU0hPVy5CQVInLFxuXHQweDAwOUU6ICdERUxFVEUuTUVOVScsXG5cdDB4MDA5RjogJ0RFTEVURS5DT01NQU5EJyxcblx0MHgwMEEwOiAnR0VULkNIQVJULklURU0nLFxuXHQweDAwQTE6ICdESUFMT0cuQk9YJyxcblx0MHgwMEEyOiAnQ0xFQU4nLFxuXHQweDAwQTM6ICdNREVURVJNJyxcblx0MHgwMEE0OiAnTUlOVkVSU0UnLFxuXHQweDAwQTU6ICdNTVVMVCcsXG5cdDB4MDBBNjogJ0ZJTEVTJyxcblx0MHgwMEE3OiAnSVBNVCcsXG5cdDB4MDBBODogJ1BQTVQnLFxuXHQweDAwQTk6ICdDT1VOVEEnLFxuXHQweDAwQUE6ICdDQU5DRUwuS0VZJyxcblx0MHgwMEFCOiAnRk9SJyxcblx0MHgwMEFDOiAnV0hJTEUnLFxuXHQweDAwQUQ6ICdCUkVBSycsXG5cdDB4MDBBRTogJ05FWFQnLFxuXHQweDAwQUY6ICdJTklUSUFURScsXG5cdDB4MDBCMDogJ1JFUVVFU1QnLFxuXHQweDAwQjE6ICdQT0tFJyxcblx0MHgwMEIyOiAnRVhFQ1VURScsXG5cdDB4MDBCMzogJ1RFUk1JTkFURScsXG5cdDB4MDBCNDogJ1JFU1RBUlQnLFxuXHQweDAwQjU6ICdIRUxQJyxcblx0MHgwMEI2OiAnR0VULkJBUicsXG5cdDB4MDBCNzogJ1BST0RVQ1QnLFxuXHQweDAwQjg6ICdGQUNUJyxcblx0MHgwMEI5OiAnR0VULkNFTEwnLFxuXHQweDAwQkE6ICdHRVQuV09SS1NQQUNFJyxcblx0MHgwMEJCOiAnR0VULldJTkRPVycsXG5cdDB4MDBCQzogJ0dFVC5ET0NVTUVOVCcsXG5cdDB4MDBCRDogJ0RQUk9EVUNUJyxcblx0MHgwMEJFOiAnSVNOT05URVhUJyxcblx0MHgwMEJGOiAnR0VULk5PVEUnLFxuXHQweDAwQzA6ICdOT1RFJyxcblx0MHgwMEMxOiAnU1RERVZQJyxcblx0MHgwMEMyOiAnVkFSUCcsXG5cdDB4MDBDMzogJ0RTVERFVlAnLFxuXHQweDAwQzQ6ICdEVkFSUCcsXG5cdDB4MDBDNTogJ1RSVU5DJyxcblx0MHgwMEM2OiAnSVNMT0dJQ0FMJyxcblx0MHgwMEM3OiAnRENPVU5UQScsXG5cdDB4MDBDODogJ0RFTEVURS5CQVInLFxuXHQweDAwQzk6ICdVTlJFR0lTVEVSJyxcblx0MHgwMENDOiAnVVNET0xMQVInLFxuXHQweDAwQ0Q6ICdGSU5EQicsXG5cdDB4MDBDRTogJ1NFQVJDSEInLFxuXHQweDAwQ0Y6ICdSRVBMQUNFQicsXG5cdDB4MDBEMDogJ0xFRlRCJyxcblx0MHgwMEQxOiAnUklHSFRCJyxcblx0MHgwMEQyOiAnTUlEQicsXG5cdDB4MDBEMzogJ0xFTkInLFxuXHQweDAwRDQ6ICdST1VORFVQJyxcblx0MHgwMEQ1OiAnUk9VTkRET1dOJyxcblx0MHgwMEQ2OiAnQVNDJyxcblx0MHgwMEQ3OiAnREJDUycsXG5cdDB4MDBEODogJ1JBTksnLFxuXHQweDAwREI6ICdBRERSRVNTJyxcblx0MHgwMERDOiAnREFZUzM2MCcsXG5cdDB4MDBERDogJ1RPREFZJyxcblx0MHgwMERFOiAnVkRCJyxcblx0MHgwMERGOiAnRUxTRScsXG5cdDB4MDBFMDogJ0VMU0UuSUYnLFxuXHQweDAwRTE6ICdFTkQuSUYnLFxuXHQweDAwRTI6ICdGT1IuQ0VMTCcsXG5cdDB4MDBFMzogJ01FRElBTicsXG5cdDB4MDBFNDogJ1NVTVBST0RVQ1QnLFxuXHQweDAwRTU6ICdTSU5IJyxcblx0MHgwMEU2OiAnQ09TSCcsXG5cdDB4MDBFNzogJ1RBTkgnLFxuXHQweDAwRTg6ICdBU0lOSCcsXG5cdDB4MDBFOTogJ0FDT1NIJyxcblx0MHgwMEVBOiAnQVRBTkgnLFxuXHQweDAwRUI6ICdER0VUJyxcblx0MHgwMEVDOiAnQ1JFQVRFLk9CSkVDVCcsXG5cdDB4MDBFRDogJ1ZPTEFUSUxFJyxcblx0MHgwMEVFOiAnTEFTVC5FUlJPUicsXG5cdDB4MDBFRjogJ0NVU1RPTS5VTkRPJyxcblx0MHgwMEYwOiAnQ1VTVE9NLlJFUEVBVCcsXG5cdDB4MDBGMTogJ0ZPUk1VTEEuQ09OVkVSVCcsXG5cdDB4MDBGMjogJ0dFVC5MSU5LLklORk8nLFxuXHQweDAwRjM6ICdURVhULkJPWCcsXG5cdDB4MDBGNDogJ0lORk8nLFxuXHQweDAwRjU6ICdHUk9VUCcsXG5cdDB4MDBGNjogJ0dFVC5PQkpFQ1QnLFxuXHQweDAwRjc6ICdEQicsXG5cdDB4MDBGODogJ1BBVVNFJyxcblx0MHgwMEZCOiAnUkVTVU1FJyxcblx0MHgwMEZDOiAnRlJFUVVFTkNZJyxcblx0MHgwMEZEOiAnQURELlRPT0xCQVInLFxuXHQweDAwRkU6ICdERUxFVEUuVE9PTEJBUicsXG5cdDB4MDBGRjogJ1VzZXInLFxuXHQweDAxMDA6ICdSRVNFVC5UT09MQkFSJyxcblx0MHgwMTAxOiAnRVZBTFVBVEUnLFxuXHQweDAxMDI6ICdHRVQuVE9PTEJBUicsXG5cdDB4MDEwMzogJ0dFVC5UT09MJyxcblx0MHgwMTA0OiAnU1BFTExJTkcuQ0hFQ0snLFxuXHQweDAxMDU6ICdFUlJPUi5UWVBFJyxcblx0MHgwMTA2OiAnQVBQLlRJVExFJyxcblx0MHgwMTA3OiAnV0lORE9XLlRJVExFJyxcblx0MHgwMTA4OiAnU0FWRS5UT09MQkFSJyxcblx0MHgwMTA5OiAnRU5BQkxFLlRPT0wnLFxuXHQweDAxMEE6ICdQUkVTUy5UT09MJyxcblx0MHgwMTBCOiAnUkVHSVNURVIuSUQnLFxuXHQweDAxMEM6ICdHRVQuV09SS0JPT0snLFxuXHQweDAxMEQ6ICdBVkVERVYnLFxuXHQweDAxMEU6ICdCRVRBRElTVCcsXG5cdDB4MDEwRjogJ0dBTU1BTE4nLFxuXHQweDAxMTA6ICdCRVRBSU5WJyxcblx0MHgwMTExOiAnQklOT01ESVNUJyxcblx0MHgwMTEyOiAnQ0hJRElTVCcsXG5cdDB4MDExMzogJ0NISUlOVicsXG5cdDB4MDExNDogJ0NPTUJJTicsXG5cdDB4MDExNTogJ0NPTkZJREVOQ0UnLFxuXHQweDAxMTY6ICdDUklUQklOT00nLFxuXHQweDAxMTc6ICdFVkVOJyxcblx0MHgwMTE4OiAnRVhQT05ESVNUJyxcblx0MHgwMTE5OiAnRkRJU1QnLFxuXHQweDAxMUE6ICdGSU5WJyxcblx0MHgwMTFCOiAnRklTSEVSJyxcblx0MHgwMTFDOiAnRklTSEVSSU5WJyxcblx0MHgwMTFEOiAnRkxPT1InLFxuXHQweDAxMUU6ICdHQU1NQURJU1QnLFxuXHQweDAxMUY6ICdHQU1NQUlOVicsXG5cdDB4MDEyMDogJ0NFSUxJTkcnLFxuXHQweDAxMjE6ICdIWVBHRU9NRElTVCcsXG5cdDB4MDEyMjogJ0xPR05PUk1ESVNUJyxcblx0MHgwMTIzOiAnTE9HSU5WJyxcblx0MHgwMTI0OiAnTkVHQklOT01ESVNUJyxcblx0MHgwMTI1OiAnTk9STURJU1QnLFxuXHQweDAxMjY6ICdOT1JNU0RJU1QnLFxuXHQweDAxMjc6ICdOT1JNSU5WJyxcblx0MHgwMTI4OiAnTk9STVNJTlYnLFxuXHQweDAxMjk6ICdTVEFOREFSRElaRScsXG5cdDB4MDEyQTogJ09ERCcsXG5cdDB4MDEyQjogJ1BFUk1VVCcsXG5cdDB4MDEyQzogJ1BPSVNTT04nLFxuXHQweDAxMkQ6ICdURElTVCcsXG5cdDB4MDEyRTogJ1dFSUJVTEwnLFxuXHQweDAxMkY6ICdTVU1YTVkyJyxcblx0MHgwMTMwOiAnU1VNWDJNWTInLFxuXHQweDAxMzE6ICdTVU1YMlBZMicsXG5cdDB4MDEzMjogJ0NISVRFU1QnLFxuXHQweDAxMzM6ICdDT1JSRUwnLFxuXHQweDAxMzQ6ICdDT1ZBUicsXG5cdDB4MDEzNTogJ0ZPUkVDQVNUJyxcblx0MHgwMTM2OiAnRlRFU1QnLFxuXHQweDAxMzc6ICdJTlRFUkNFUFQnLFxuXHQweDAxMzg6ICdQRUFSU09OJyxcblx0MHgwMTM5OiAnUlNRJyxcblx0MHgwMTNBOiAnU1RFWVgnLFxuXHQweDAxM0I6ICdTTE9QRScsXG5cdDB4MDEzQzogJ1RURVNUJyxcblx0MHgwMTNEOiAnUFJPQicsXG5cdDB4MDEzRTogJ0RFVlNRJyxcblx0MHgwMTNGOiAnR0VPTUVBTicsXG5cdDB4MDE0MDogJ0hBUk1FQU4nLFxuXHQweDAxNDE6ICdTVU1TUScsXG5cdDB4MDE0MjogJ0tVUlQnLFxuXHQweDAxNDM6ICdTS0VXJyxcblx0MHgwMTQ0OiAnWlRFU1QnLFxuXHQweDAxNDU6ICdMQVJHRScsXG5cdDB4MDE0NjogJ1NNQUxMJyxcblx0MHgwMTQ3OiAnUVVBUlRJTEUnLFxuXHQweDAxNDg6ICdQRVJDRU5USUxFJyxcblx0MHgwMTQ5OiAnUEVSQ0VOVFJBTksnLFxuXHQweDAxNEE6ICdNT0RFJyxcblx0MHgwMTRCOiAnVFJJTU1FQU4nLFxuXHQweDAxNEM6ICdUSU5WJyxcblx0MHgwMTRFOiAnTU9WSUUuQ09NTUFORCcsXG5cdDB4MDE0RjogJ0dFVC5NT1ZJRScsXG5cdDB4MDE1MDogJ0NPTkNBVEVOQVRFJyxcblx0MHgwMTUxOiAnUE9XRVInLFxuXHQweDAxNTI6ICdQSVZPVC5BREQuREFUQScsXG5cdDB4MDE1MzogJ0dFVC5QSVZPVC5UQUJMRScsXG5cdDB4MDE1NDogJ0dFVC5QSVZPVC5GSUVMRCcsXG5cdDB4MDE1NTogJ0dFVC5QSVZPVC5JVEVNJyxcblx0MHgwMTU2OiAnUkFESUFOUycsXG5cdDB4MDE1NzogJ0RFR1JFRVMnLFxuXHQweDAxNTg6ICdTVUJUT1RBTCcsXG5cdDB4MDE1OTogJ1NVTUlGJyxcblx0MHgwMTVBOiAnQ09VTlRJRicsXG5cdDB4MDE1QjogJ0NPVU5UQkxBTksnLFxuXHQweDAxNUM6ICdTQ0VOQVJJTy5HRVQnLFxuXHQweDAxNUQ6ICdPUFRJT05TLkxJU1RTLkdFVCcsXG5cdDB4MDE1RTogJ0lTUE1UJyxcblx0MHgwMTVGOiAnREFURURJRicsXG5cdDB4MDE2MDogJ0RBVEVTVFJJTkcnLFxuXHQweDAxNjE6ICdOVU1CRVJTVFJJTkcnLFxuXHQweDAxNjI6ICdST01BTicsXG5cdDB4MDE2MzogJ09QRU4uRElBTE9HJyxcblx0MHgwMTY0OiAnU0FWRS5ESUFMT0cnLFxuXHQweDAxNjU6ICdWSUVXLkdFVCcsXG5cdDB4MDE2NjogJ0dFVFBJVk9UREFUQScsXG5cdDB4MDE2NzogJ0hZUEVSTElOSycsXG5cdDB4MDE2ODogJ1BIT05FVElDJyxcblx0MHgwMTY5OiAnQVZFUkFHRUEnLFxuXHQweDAxNkE6ICdNQVhBJyxcblx0MHgwMTZCOiAnTUlOQScsXG5cdDB4MDE2QzogJ1NUREVWUEEnLFxuXHQweDAxNkQ6ICdWQVJQQScsXG5cdDB4MDE2RTogJ1NUREVWQScsXG5cdDB4MDE2RjogJ1ZBUkEnLFxuXHQweDAxNzA6ICdCQUhUVEVYVCcsXG5cdDB4MDE3MTogJ1RIQUlEQVlPRldFRUsnLFxuXHQweDAxNzI6ICdUSEFJRElHSVQnLFxuXHQweDAxNzM6ICdUSEFJTU9OVEhPRllFQVInLFxuXHQweDAxNzQ6ICdUSEFJTlVNU09VTkQnLFxuXHQweDAxNzU6ICdUSEFJTlVNU1RSSU5HJyxcblx0MHgwMTc2OiAnVEhBSVNUUklOR0xFTkdUSCcsXG5cdDB4MDE3NzogJ0lTVEhBSURJR0lUJyxcblx0MHgwMTc4OiAnUk9VTkRCQUhURE9XTicsXG5cdDB4MDE3OTogJ1JPVU5EQkFIVFVQJyxcblx0MHgwMTdBOiAnVEhBSVlFQVInLFxuXHQweDAxN0I6ICdSVEQnLFxuXG5cdDB4MDE3QzogJ0NVQkVWQUxVRScsXG5cdDB4MDE3RDogJ0NVQkVNRU1CRVInLFxuXHQweDAxN0U6ICdDVUJFTUVNQkVSUFJPUEVSVFknLFxuXHQweDAxN0Y6ICdDVUJFUkFOS0VETUVNQkVSJyxcblx0MHgwMTgwOiAnSEVYMkJJTicsXG5cdDB4MDE4MTogJ0hFWDJERUMnLFxuXHQweDAxODI6ICdIRVgyT0NUJyxcblx0MHgwMTgzOiAnREVDMkJJTicsXG5cdDB4MDE4NDogJ0RFQzJIRVgnLFxuXHQweDAxODU6ICdERUMyT0NUJyxcblx0MHgwMTg2OiAnT0NUMkJJTicsXG5cdDB4MDE4NzogJ09DVDJIRVgnLFxuXHQweDAxODg6ICdPQ1QyREVDJyxcblx0MHgwMTg5OiAnQklOMkRFQycsXG5cdDB4MDE4QTogJ0JJTjJPQ1QnLFxuXHQweDAxOEI6ICdCSU4ySEVYJyxcblx0MHgwMThDOiAnSU1TVUInLFxuXHQweDAxOEQ6ICdJTURJVicsXG5cdDB4MDE4RTogJ0lNUE9XRVInLFxuXHQweDAxOEY6ICdJTUFCUycsXG5cdDB4MDE5MDogJ0lNU1FSVCcsXG5cdDB4MDE5MTogJ0lNTE4nLFxuXHQweDAxOTI6ICdJTUxPRzInLFxuXHQweDAxOTM6ICdJTUxPRzEwJyxcblx0MHgwMTk0OiAnSU1TSU4nLFxuXHQweDAxOTU6ICdJTUNPUycsXG5cdDB4MDE5NjogJ0lNRVhQJyxcblx0MHgwMTk3OiAnSU1BUkdVTUVOVCcsXG5cdDB4MDE5ODogJ0lNQ09OSlVHQVRFJyxcblx0MHgwMTk5OiAnSU1BR0lOQVJZJyxcblx0MHgwMTlBOiAnSU1SRUFMJyxcblx0MHgwMTlCOiAnQ09NUExFWCcsXG5cdDB4MDE5QzogJ0lNU1VNJyxcblx0MHgwMTlEOiAnSU1QUk9EVUNUJyxcblx0MHgwMTlFOiAnU0VSSUVTU1VNJyxcblx0MHgwMTlGOiAnRkFDVERPVUJMRScsXG5cdDB4MDFBMDogJ1NRUlRQSScsXG5cdDB4MDFBMTogJ1FVT1RJRU5UJyxcblx0MHgwMUEyOiAnREVMVEEnLFxuXHQweDAxQTM6ICdHRVNURVAnLFxuXHQweDAxQTQ6ICdJU0VWRU4nLFxuXHQweDAxQTU6ICdJU09ERCcsXG5cdDB4MDFBNjogJ01ST1VORCcsXG5cdDB4MDFBNzogJ0VSRicsXG5cdDB4MDFBODogJ0VSRkMnLFxuXHQweDAxQTk6ICdCRVNTRUxKJyxcblx0MHgwMUFBOiAnQkVTU0VMSycsXG5cdDB4MDFBQjogJ0JFU1NFTFknLFxuXHQweDAxQUM6ICdCRVNTRUxJJyxcblx0MHgwMUFEOiAnWElSUicsXG5cdDB4MDFBRTogJ1hOUFYnLFxuXHQweDAxQUY6ICdQUklDRU1BVCcsXG5cdDB4MDFCMDogJ1lJRUxETUFUJyxcblx0MHgwMUIxOiAnSU5UUkFURScsXG5cdDB4MDFCMjogJ1JFQ0VJVkVEJyxcblx0MHgwMUIzOiAnRElTQycsXG5cdDB4MDFCNDogJ1BSSUNFRElTQycsXG5cdDB4MDFCNTogJ1lJRUxERElTQycsXG5cdDB4MDFCNjogJ1RCSUxMRVEnLFxuXHQweDAxQjc6ICdUQklMTFBSSUNFJyxcblx0MHgwMUI4OiAnVEJJTExZSUVMRCcsXG5cdDB4MDFCOTogJ1BSSUNFJyxcblx0MHgwMUJBOiAnWUlFTEQnLFxuXHQweDAxQkI6ICdET0xMQVJERScsXG5cdDB4MDFCQzogJ0RPTExBUkZSJyxcblx0MHgwMUJEOiAnTk9NSU5BTCcsXG5cdDB4MDFCRTogJ0VGRkVDVCcsXG5cdDB4MDFCRjogJ0NVTVBSSU5DJyxcblx0MHgwMUMwOiAnQ1VNSVBNVCcsXG5cdDB4MDFDMTogJ0VEQVRFJyxcblx0MHgwMUMyOiAnRU9NT05USCcsXG5cdDB4MDFDMzogJ1lFQVJGUkFDJyxcblx0MHgwMUM0OiAnQ09VUERBWUJTJyxcblx0MHgwMUM1OiAnQ09VUERBWVMnLFxuXHQweDAxQzY6ICdDT1VQREFZU05DJyxcblx0MHgwMUM3OiAnQ09VUE5DRCcsXG5cdDB4MDFDODogJ0NPVVBOVU0nLFxuXHQweDAxQzk6ICdDT1VQUENEJyxcblx0MHgwMUNBOiAnRFVSQVRJT04nLFxuXHQweDAxQ0I6ICdNRFVSQVRJT04nLFxuXHQweDAxQ0M6ICdPRERMUFJJQ0UnLFxuXHQweDAxQ0Q6ICdPRERMWUlFTEQnLFxuXHQweDAxQ0U6ICdPRERGUFJJQ0UnLFxuXHQweDAxQ0Y6ICdPRERGWUlFTEQnLFxuXHQweDAxRDA6ICdSQU5EQkVUV0VFTicsXG5cdDB4MDFEMTogJ1dFRUtOVU0nLFxuXHQweDAxRDI6ICdBTU9SREVHUkMnLFxuXHQweDAxRDM6ICdBTU9STElOQycsXG5cdDB4MDFENDogJ0NPTlZFUlQnLFxuXHQweDAyRDQ6ICdTSEVFVEpTJyxcblx0MHgwMUQ1OiAnQUNDUklOVCcsXG5cdDB4MDFENjogJ0FDQ1JJTlRNJyxcblx0MHgwMUQ3OiAnV09SS0RBWScsXG5cdDB4MDFEODogJ05FVFdPUktEQVlTJyxcblx0MHgwMUQ5OiAnR0NEJyxcblx0MHgwMURBOiAnTVVMVElOT01JQUwnLFxuXHQweDAxREI6ICdMQ00nLFxuXHQweDAxREM6ICdGVlNDSEVEVUxFJyxcblx0MHgwMUREOiAnQ1VCRUtQSU1FTUJFUicsXG5cdDB4MDFERTogJ0NVQkVTRVQnLFxuXHQweDAxREY6ICdDVUJFU0VUQ09VTlQnLFxuXHQweDAxRTA6ICdJRkVSUk9SJyxcblx0MHgwMUUxOiAnQ09VTlRJRlMnLFxuXHQweDAxRTI6ICdTVU1JRlMnLFxuXHQweDAxRTM6ICdBVkVSQUdFSUYnLFxuXHQweDAxRTQ6ICdBVkVSQUdFSUZTJ1xuXHR9O1xuXHR2YXIgRnRhYkFyZ2MgPSB7XG5cdDB4MDAwMjogMSwgLyogSVNOQSAqL1xuXHQweDAwMDM6IDEsIC8qIElTRVJST1IgKi9cblx0MHgwMDBGOiAxLCAvKiBTSU4gKi9cblx0MHgwMDEwOiAxLCAvKiBDT1MgKi9cblx0MHgwMDExOiAxLCAvKiBUQU4gKi9cblx0MHgwMDEyOiAxLCAvKiBBVEFOICovXG5cdDB4MDAxMzogMCwgLyogUEkgKi9cblx0MHgwMDE0OiAxLCAvKiBTUVJUICovXG5cdDB4MDAxNTogMSwgLyogRVhQICovXG5cdDB4MDAxNjogMSwgLyogTE4gKi9cblx0MHgwMDE3OiAxLCAvKiBMT0cxMCAqL1xuXHQweDAwMTg6IDEsIC8qIEFCUyAqL1xuXHQweDAwMTk6IDEsIC8qIElOVCAqL1xuXHQweDAwMUE6IDEsIC8qIFNJR04gKi9cblx0MHgwMDFCOiAyLCAvKiBST1VORCAqL1xuXHQweDAwMUU6IDIsIC8qIFJFUFQgKi9cblx0MHgwMDFGOiAzLCAvKiBNSUQgKi9cblx0MHgwMDIwOiAxLCAvKiBMRU4gKi9cblx0MHgwMDIxOiAxLCAvKiBWQUxVRSAqL1xuXHQweDAwMjY6IDEsIC8qIE5PVCAqL1xuXHQweDAwMjc6IDIsIC8qIE1PRCAqL1xuXHQweDAwMjg6IDMsIC8qIERDT1VOVCAqL1xuXHQweDAwMjk6IDMsIC8qIERTVU0gKi9cblx0MHgwMDJBOiAzLCAvKiBEQVZFUkFHRSAqL1xuXHQweDAwMkI6IDMsIC8qIERNSU4gKi9cblx0MHgwMDJDOiAzLCAvKiBETUFYICovXG5cdDB4MDAyRDogMywgLyogRFNUREVWICovXG5cdDB4MDAyRjogMywgLyogRFZBUiAqL1xuXHQweDAwMzA6IDIsIC8qIFRFWFQgKi9cblx0MHgwMDM1OiAxLCAvKiBHT1RPICovXG5cdDB4MDAzRDogMywgLyogTUlSUiAqL1xuXHQweDAwNDE6IDMsIC8qIERBVEUgKi9cblx0MHgwMDQyOiAzLCAvKiBUSU1FICovXG5cdDB4MDA0MzogMSwgLyogREFZICovXG5cdDB4MDA0NDogMSwgLyogTU9OVEggKi9cblx0MHgwMDQ1OiAxLCAvKiBZRUFSICovXG5cdDB4MDA0NjogMSwgLyogV0VFS0RBWSAqL1xuXHQweDAwNDc6IDEsIC8qIEhPVVIgKi9cblx0MHgwMDQ4OiAxLCAvKiBNSU5VVEUgKi9cblx0MHgwMDQ5OiAxLCAvKiBTRUNPTkQgKi9cblx0MHgwMDRCOiAxLCAvKiBBUkVBUyAqL1xuXHQweDAwNEM6IDEsIC8qIFJPV1MgKi9cblx0MHgwMDREOiAxLCAvKiBDT0xVTU5TICovXG5cdDB4MDA0RjogMiwgLyogQUJTUkVGICovXG5cdDB4MDA1MDogMiwgLyogUkVMUkVGICovXG5cdDB4MDA1MzogMSwgLyogVFJBTlNQT1NFICovXG5cdDB4MDA1NTogMCwgLyogU1RFUCAqL1xuXHQweDAwNTY6IDEsIC8qIFRZUEUgKi9cblx0MHgwMDVBOiAxLCAvKiBERVJFRiAqL1xuXHQweDAwNjE6IDIsIC8qIEFUQU4yICovXG5cdDB4MDA2MjogMSwgLyogQVNJTiAqL1xuXHQweDAwNjM6IDEsIC8qIEFDT1MgKi9cblx0MHgwMDY1OiAzLCAvKiBITE9PS1VQICovXG5cdDB4MDA2NjogMywgLyogVkxPT0tVUCAqL1xuXHQweDAwNjk6IDEsIC8qIElTUkVGICovXG5cdDB4MDA2RjogMSwgLyogQ0hBUiAqL1xuXHQweDAwNzA6IDEsIC8qIExPV0VSICovXG5cdDB4MDA3MTogMSwgLyogVVBQRVIgKi9cblx0MHgwMDcyOiAxLCAvKiBQUk9QRVIgKi9cblx0MHgwMDc1OiAyLCAvKiBFWEFDVCAqL1xuXHQweDAwNzY6IDEsIC8qIFRSSU0gKi9cblx0MHgwMDc3OiA0LCAvKiBSRVBMQUNFICovXG5cdDB4MDA3OTogMSwgLyogQ09ERSAqL1xuXHQweDAwN0U6IDEsIC8qIElTRVJSICovXG5cdDB4MDA3RjogMSwgLyogSVNURVhUICovXG5cdDB4MDA4MDogMSwgLyogSVNOVU1CRVIgKi9cblx0MHgwMDgxOiAxLCAvKiBJU0JMQU5LICovXG5cdDB4MDA4MjogMSwgLyogVCAqL1xuXHQweDAwODM6IDEsIC8qIE4gKi9cblx0MHgwMDg1OiAxLCAvKiBGQ0xPU0UgKi9cblx0MHgwMDg2OiAxLCAvKiBGU0laRSAqL1xuXHQweDAwODc6IDEsIC8qIEZSRUFETE4gKi9cblx0MHgwMDg4OiAyLCAvKiBGUkVBRCAqL1xuXHQweDAwODk6IDIsIC8qIEZXUklURUxOICovXG5cdDB4MDA4QTogMiwgLyogRldSSVRFICovXG5cdDB4MDA4QzogMSwgLyogREFURVZBTFVFICovXG5cdDB4MDA4RDogMSwgLyogVElNRVZBTFVFICovXG5cdDB4MDA4RTogMywgLyogU0xOICovXG5cdDB4MDA4RjogNCwgLyogU1lEICovXG5cdDB4MDA5MDogNCwgLyogRERCICovXG5cdDB4MDBBMjogMSwgLyogQ0xFQU4gKi9cblx0MHgwMEEzOiAxLCAvKiBNREVURVJNICovXG5cdDB4MDBBNDogMSwgLyogTUlOVkVSU0UgKi9cblx0MHgwMEE1OiAyLCAvKiBNTVVMVCAqL1xuXHQweDAwQUM6IDEsIC8qIFdISUxFICovXG5cdDB4MDBBRjogMiwgLyogSU5JVElBVEUgKi9cblx0MHgwMEIwOiAyLCAvKiBSRVFVRVNUICovXG5cdDB4MDBCMTogMywgLyogUE9LRSAqL1xuXHQweDAwQjI6IDIsIC8qIEVYRUNVVEUgKi9cblx0MHgwMEIzOiAxLCAvKiBURVJNSU5BVEUgKi9cblx0MHgwMEI4OiAxLCAvKiBGQUNUICovXG5cdDB4MDBCRDogMywgLyogRFBST0RVQ1QgKi9cblx0MHgwMEJFOiAxLCAvKiBJU05PTlRFWFQgKi9cblx0MHgwMEMzOiAzLCAvKiBEU1RERVZQICovXG5cdDB4MDBDNDogMywgLyogRFZBUlAgKi9cblx0MHgwMEM1OiAxLCAvKiBUUlVOQyAqL1xuXHQweDAwQzY6IDEsIC8qIElTTE9HSUNBTCAqL1xuXHQweDAwQzc6IDMsIC8qIERDT1VOVEEgKi9cblx0MHgwMEM5OiAxLCAvKiBVTlJFR0lTVEVSICovXG5cdDB4MDBDRjogNCwgLyogUkVQTEFDRUIgKi9cblx0MHgwMEQyOiAzLCAvKiBNSURCICovXG5cdDB4MDBEMzogMSwgLyogTEVOQiAqL1xuXHQweDAwRDQ6IDIsIC8qIFJPVU5EVVAgKi9cblx0MHgwMEQ1OiAyLCAvKiBST1VORERPV04gKi9cblx0MHgwMEQ2OiAxLCAvKiBBU0MgKi9cblx0MHgwMEQ3OiAxLCAvKiBEQkNTICovXG5cdDB4MDBFNTogMSwgLyogU0lOSCAqL1xuXHQweDAwRTY6IDEsIC8qIENPU0ggKi9cblx0MHgwMEU3OiAxLCAvKiBUQU5IICovXG5cdDB4MDBFODogMSwgLyogQVNJTkggKi9cblx0MHgwMEU5OiAxLCAvKiBBQ09TSCAqL1xuXHQweDAwRUE6IDEsIC8qIEFUQU5IICovXG5cdDB4MDBFQjogMywgLyogREdFVCAqL1xuXHQweDAwRjQ6IDEsIC8qIElORk8gKi9cblx0MHgwMEY3OiA0LCAvKiBEQiAqL1xuXHQweDAwRkM6IDIsIC8qIEZSRVFVRU5DWSAqL1xuXHQweDAxMDE6IDEsIC8qIEVWQUxVQVRFICovXG5cdDB4MDEwNTogMSwgLyogRVJST1IuVFlQRSAqL1xuXHQweDAxMEY6IDEsIC8qIEdBTU1BTE4gKi9cblx0MHgwMTExOiA0LCAvKiBCSU5PTURJU1QgKi9cblx0MHgwMTEyOiAyLCAvKiBDSElESVNUICovXG5cdDB4MDExMzogMiwgLyogQ0hJSU5WICovXG5cdDB4MDExNDogMiwgLyogQ09NQklOICovXG5cdDB4MDExNTogMywgLyogQ09ORklERU5DRSAqL1xuXHQweDAxMTY6IDMsIC8qIENSSVRCSU5PTSAqL1xuXHQweDAxMTc6IDEsIC8qIEVWRU4gKi9cblx0MHgwMTE4OiAzLCAvKiBFWFBPTkRJU1QgKi9cblx0MHgwMTE5OiAzLCAvKiBGRElTVCAqL1xuXHQweDAxMUE6IDMsIC8qIEZJTlYgKi9cblx0MHgwMTFCOiAxLCAvKiBGSVNIRVIgKi9cblx0MHgwMTFDOiAxLCAvKiBGSVNIRVJJTlYgKi9cblx0MHgwMTFEOiAyLCAvKiBGTE9PUiAqL1xuXHQweDAxMUU6IDQsIC8qIEdBTU1BRElTVCAqL1xuXHQweDAxMUY6IDMsIC8qIEdBTU1BSU5WICovXG5cdDB4MDEyMDogMiwgLyogQ0VJTElORyAqL1xuXHQweDAxMjE6IDQsIC8qIEhZUEdFT01ESVNUICovXG5cdDB4MDEyMjogMywgLyogTE9HTk9STURJU1QgKi9cblx0MHgwMTIzOiAzLCAvKiBMT0dJTlYgKi9cblx0MHgwMTI0OiAzLCAvKiBORUdCSU5PTURJU1QgKi9cblx0MHgwMTI1OiA0LCAvKiBOT1JNRElTVCAqL1xuXHQweDAxMjY6IDEsIC8qIE5PUk1TRElTVCAqL1xuXHQweDAxMjc6IDMsIC8qIE5PUk1JTlYgKi9cblx0MHgwMTI4OiAxLCAvKiBOT1JNU0lOViAqL1xuXHQweDAxMjk6IDMsIC8qIFNUQU5EQVJESVpFICovXG5cdDB4MDEyQTogMSwgLyogT0REICovXG5cdDB4MDEyQjogMiwgLyogUEVSTVVUICovXG5cdDB4MDEyQzogMywgLyogUE9JU1NPTiAqL1xuXHQweDAxMkQ6IDMsIC8qIFRESVNUICovXG5cdDB4MDEyRTogNCwgLyogV0VJQlVMTCAqL1xuXHQweDAxMkY6IDIsIC8qIFNVTVhNWTIgKi9cblx0MHgwMTMwOiAyLCAvKiBTVU1YMk1ZMiAqL1xuXHQweDAxMzE6IDIsIC8qIFNVTVgyUFkyICovXG5cdDB4MDEzMjogMiwgLyogQ0hJVEVTVCAqL1xuXHQweDAxMzM6IDIsIC8qIENPUlJFTCAqL1xuXHQweDAxMzQ6IDIsIC8qIENPVkFSICovXG5cdDB4MDEzNTogMywgLyogRk9SRUNBU1QgKi9cblx0MHgwMTM2OiAyLCAvKiBGVEVTVCAqL1xuXHQweDAxMzc6IDIsIC8qIElOVEVSQ0VQVCAqL1xuXHQweDAxMzg6IDIsIC8qIFBFQVJTT04gKi9cblx0MHgwMTM5OiAyLCAvKiBSU1EgKi9cblx0MHgwMTNBOiAyLCAvKiBTVEVZWCAqL1xuXHQweDAxM0I6IDIsIC8qIFNMT1BFICovXG5cdDB4MDEzQzogNCwgLyogVFRFU1QgKi9cblx0MHgwMTQ1OiAyLCAvKiBMQVJHRSAqL1xuXHQweDAxNDY6IDIsIC8qIFNNQUxMICovXG5cdDB4MDE0NzogMiwgLyogUVVBUlRJTEUgKi9cblx0MHgwMTQ4OiAyLCAvKiBQRVJDRU5USUxFICovXG5cdDB4MDE0QjogMiwgLyogVFJJTU1FQU4gKi9cblx0MHgwMTRDOiAyLCAvKiBUSU5WICovXG5cdDB4MDE1MTogMiwgLyogUE9XRVIgKi9cblx0MHgwMTU2OiAxLCAvKiBSQURJQU5TICovXG5cdDB4MDE1NzogMSwgLyogREVHUkVFUyAqL1xuXHQweDAxNUE6IDIsIC8qIENPVU5USUYgKi9cblx0MHgwMTVCOiAxLCAvKiBDT1VOVEJMQU5LICovXG5cdDB4MDE1RTogNCwgLyogSVNQTVQgKi9cblx0MHgwMTVGOiAzLCAvKiBEQVRFRElGICovXG5cdDB4MDE2MDogMSwgLyogREFURVNUUklORyAqL1xuXHQweDAxNjE6IDIsIC8qIE5VTUJFUlNUUklORyAqL1xuXHQweDAxNjg6IDEsIC8qIFBIT05FVElDICovXG5cdDB4MDE3MDogMSwgLyogQkFIVFRFWFQgKi9cblx0MHgwMTcxOiAxLCAvKiBUSEFJREFZT0ZXRUVLICovXG5cdDB4MDE3MjogMSwgLyogVEhBSURJR0lUICovXG5cdDB4MDE3MzogMSwgLyogVEhBSU1PTlRIT0ZZRUFSICovXG5cdDB4MDE3NDogMSwgLyogVEhBSU5VTVNPVU5EICovXG5cdDB4MDE3NTogMSwgLyogVEhBSU5VTVNUUklORyAqL1xuXHQweDAxNzY6IDEsIC8qIFRIQUlTVFJJTkdMRU5HVEggKi9cblx0MHgwMTc3OiAxLCAvKiBJU1RIQUlESUdJVCAqL1xuXHQweDAxNzg6IDEsIC8qIFJPVU5EQkFIVERPV04gKi9cblx0MHgwMTc5OiAxLCAvKiBST1VOREJBSFRVUCAqL1xuXHQweDAxN0E6IDEsIC8qIFRIQUlZRUFSICovXG5cdDB4MDE3RTogMywgLyogQ1VCRU1FTUJFUlBST1BFUlRZICovXG5cdDB4MDE4MTogMSwgLyogSEVYMkRFQyAqL1xuXHQweDAxODg6IDEsIC8qIE9DVDJERUMgKi9cblx0MHgwMTg5OiAxLCAvKiBCSU4yREVDICovXG5cdDB4MDE4QzogMiwgLyogSU1TVUIgKi9cblx0MHgwMThEOiAyLCAvKiBJTURJViAqL1xuXHQweDAxOEU6IDIsIC8qIElNUE9XRVIgKi9cblx0MHgwMThGOiAxLCAvKiBJTUFCUyAqL1xuXHQweDAxOTA6IDEsIC8qIElNU1FSVCAqL1xuXHQweDAxOTE6IDEsIC8qIElNTE4gKi9cblx0MHgwMTkyOiAxLCAvKiBJTUxPRzIgKi9cblx0MHgwMTkzOiAxLCAvKiBJTUxPRzEwICovXG5cdDB4MDE5NDogMSwgLyogSU1TSU4gKi9cblx0MHgwMTk1OiAxLCAvKiBJTUNPUyAqL1xuXHQweDAxOTY6IDEsIC8qIElNRVhQICovXG5cdDB4MDE5NzogMSwgLyogSU1BUkdVTUVOVCAqL1xuXHQweDAxOTg6IDEsIC8qIElNQ09OSlVHQVRFICovXG5cdDB4MDE5OTogMSwgLyogSU1BR0lOQVJZICovXG5cdDB4MDE5QTogMSwgLyogSU1SRUFMICovXG5cdDB4MDE5RTogNCwgLyogU0VSSUVTU1VNICovXG5cdDB4MDE5RjogMSwgLyogRkFDVERPVUJMRSAqL1xuXHQweDAxQTA6IDEsIC8qIFNRUlRQSSAqL1xuXHQweDAxQTE6IDIsIC8qIFFVT1RJRU5UICovXG5cdDB4MDFBNDogMSwgLyogSVNFVkVOICovXG5cdDB4MDFBNTogMSwgLyogSVNPREQgKi9cblx0MHgwMUE2OiAyLCAvKiBNUk9VTkQgKi9cblx0MHgwMUE4OiAxLCAvKiBFUkZDICovXG5cdDB4MDFBOTogMiwgLyogQkVTU0VMSiAqL1xuXHQweDAxQUE6IDIsIC8qIEJFU1NFTEsgKi9cblx0MHgwMUFCOiAyLCAvKiBCRVNTRUxZICovXG5cdDB4MDFBQzogMiwgLyogQkVTU0VMSSAqL1xuXHQweDAxQUU6IDMsIC8qIFhOUFYgKi9cblx0MHgwMUI2OiAzLCAvKiBUQklMTEVRICovXG5cdDB4MDFCNzogMywgLyogVEJJTExQUklDRSAqL1xuXHQweDAxQjg6IDMsIC8qIFRCSUxMWUlFTEQgKi9cblx0MHgwMUJCOiAyLCAvKiBET0xMQVJERSAqL1xuXHQweDAxQkM6IDIsIC8qIERPTExBUkZSICovXG5cdDB4MDFCRDogMiwgLyogTk9NSU5BTCAqL1xuXHQweDAxQkU6IDIsIC8qIEVGRkVDVCAqL1xuXHQweDAxQkY6IDYsIC8qIENVTVBSSU5DICovXG5cdDB4MDFDMDogNiwgLyogQ1VNSVBNVCAqL1xuXHQweDAxQzE6IDIsIC8qIEVEQVRFICovXG5cdDB4MDFDMjogMiwgLyogRU9NT05USCAqL1xuXHQweDAxRDA6IDIsIC8qIFJBTkRCRVRXRUVOICovXG5cdDB4MDFENDogMywgLyogQ09OVkVSVCAqL1xuXHQweDAxREM6IDIsIC8qIEZWU0NIRURVTEUgKi9cblx0MHgwMURGOiAxLCAvKiBDVUJFU0VUQ09VTlQgKi9cblx0MHgwMUUwOiAyLCAvKiBJRkVSUk9SICovXG5cdDB4RkZGRjogMFxuXHR9O1xuXHQvKiBbTVMtWExTWF0gMi4yLjMgRnVuY3Rpb25zICovXG5cdC8qIFtNUy1YTFNCXSAyLjUuOTcuMTAgRnRhYiAqL1xuXHR2YXIgWExTWEZ1dHVyZUZ1bmN0aW9ucyA9IHtcblx0XHRcIl94bGZuLkFDT1RcIjogXCJBQ09UXCIsXG5cdFx0XCJfeGxmbi5BQ09USFwiOiBcIkFDT1RIXCIsXG5cdFx0XCJfeGxmbi5BR0dSRUdBVEVcIjogXCJBR0dSRUdBVEVcIixcblx0XHRcIl94bGZuLkFSQUJJQ1wiOiBcIkFSQUJJQ1wiLFxuXHRcdFwiX3hsZm4uQVZFUkFHRUlGXCI6IFwiQVZFUkFHRUlGXCIsXG5cdFx0XCJfeGxmbi5BVkVSQUdFSUZTXCI6IFwiQVZFUkFHRUlGU1wiLFxuXHRcdFwiX3hsZm4uQkFTRVwiOiBcIkJBU0VcIixcblx0XHRcIl94bGZuLkJFVEEuRElTVFwiOiBcIkJFVEEuRElTVFwiLFxuXHRcdFwiX3hsZm4uQkVUQS5JTlZcIjogXCJCRVRBLklOVlwiLFxuXHRcdFwiX3hsZm4uQklOT00uRElTVFwiOiBcIkJJTk9NLkRJU1RcIixcblx0XHRcIl94bGZuLkJJTk9NLkRJU1QuUkFOR0VcIjogXCJCSU5PTS5ESVNULlJBTkdFXCIsXG5cdFx0XCJfeGxmbi5CSU5PTS5JTlZcIjogXCJCSU5PTS5JTlZcIixcblx0XHRcIl94bGZuLkJJVEFORFwiOiBcIkJJVEFORFwiLFxuXHRcdFwiX3hsZm4uQklUTFNISUZUXCI6IFwiQklUTFNISUZUXCIsXG5cdFx0XCJfeGxmbi5CSVRPUlwiOiBcIkJJVE9SXCIsXG5cdFx0XCJfeGxmbi5CSVRSU0hJRlRcIjogXCJCSVRSU0hJRlRcIixcblx0XHRcIl94bGZuLkJJVFhPUlwiOiBcIkJJVFhPUlwiLFxuXHRcdFwiX3hsZm4uQ0VJTElORy5NQVRIXCI6IFwiQ0VJTElORy5NQVRIXCIsXG5cdFx0XCJfeGxmbi5DRUlMSU5HLlBSRUNJU0VcIjogXCJDRUlMSU5HLlBSRUNJU0VcIixcblx0XHRcIl94bGZuLkNISVNRLkRJU1RcIjogXCJDSElTUS5ESVNUXCIsXG5cdFx0XCJfeGxmbi5DSElTUS5ESVNULlJUXCI6IFwiQ0hJU1EuRElTVC5SVFwiLFxuXHRcdFwiX3hsZm4uQ0hJU1EuSU5WXCI6IFwiQ0hJU1EuSU5WXCIsXG5cdFx0XCJfeGxmbi5DSElTUS5JTlYuUlRcIjogXCJDSElTUS5JTlYuUlRcIixcblx0XHRcIl94bGZuLkNISVNRLlRFU1RcIjogXCJDSElTUS5URVNUXCIsXG5cdFx0XCJfeGxmbi5DT01CSU5BXCI6IFwiQ09NQklOQVwiLFxuXHRcdFwiX3hsZm4uQ09ORklERU5DRS5OT1JNXCI6IFwiQ09ORklERU5DRS5OT1JNXCIsXG5cdFx0XCJfeGxmbi5DT05GSURFTkNFLlRcIjogXCJDT05GSURFTkNFLlRcIixcblx0XHRcIl94bGZuLkNPVFwiOiBcIkNPVFwiLFxuXHRcdFwiX3hsZm4uQ09USFwiOiBcIkNPVEhcIixcblx0XHRcIl94bGZuLkNPVU5USUZTXCI6IFwiQ09VTlRJRlNcIixcblx0XHRcIl94bGZuLkNPVkFSSUFOQ0UuUFwiOiBcIkNPVkFSSUFOQ0UuUFwiLFxuXHRcdFwiX3hsZm4uQ09WQVJJQU5DRS5TXCI6IFwiQ09WQVJJQU5DRS5TXCIsXG5cdFx0XCJfeGxmbi5DU0NcIjogXCJDU0NcIixcblx0XHRcIl94bGZuLkNTQ0hcIjogXCJDU0NIXCIsXG5cdFx0XCJfeGxmbi5EQVlTXCI6IFwiREFZU1wiLFxuXHRcdFwiX3hsZm4uREVDSU1BTFwiOiBcIkRFQ0lNQUxcIixcblx0XHRcIl94bGZuLkVDTUEuQ0VJTElOR1wiOiBcIkVDTUEuQ0VJTElOR1wiLFxuXHRcdFwiX3hsZm4uRVJGLlBSRUNJU0VcIjogXCJFUkYuUFJFQ0lTRVwiLFxuXHRcdFwiX3hsZm4uRVJGQy5QUkVDSVNFXCI6IFwiRVJGQy5QUkVDSVNFXCIsXG5cdFx0XCJfeGxmbi5FWFBPTi5ESVNUXCI6IFwiRVhQT04uRElTVFwiLFxuXHRcdFwiX3hsZm4uRi5ESVNUXCI6IFwiRi5ESVNUXCIsXG5cdFx0XCJfeGxmbi5GLkRJU1QuUlRcIjogXCJGLkRJU1QuUlRcIixcblx0XHRcIl94bGZuLkYuSU5WXCI6IFwiRi5JTlZcIixcblx0XHRcIl94bGZuLkYuSU5WLlJUXCI6IFwiRi5JTlYuUlRcIixcblx0XHRcIl94bGZuLkYuVEVTVFwiOiBcIkYuVEVTVFwiLFxuXHRcdFwiX3hsZm4uRklMVEVSWE1MXCI6IFwiRklMVEVSWE1MXCIsXG5cdFx0XCJfeGxmbi5GTE9PUi5NQVRIXCI6IFwiRkxPT1IuTUFUSFwiLFxuXHRcdFwiX3hsZm4uRkxPT1IuUFJFQ0lTRVwiOiBcIkZMT09SLlBSRUNJU0VcIixcblx0XHRcIl94bGZuLkZPUk1VTEFURVhUXCI6IFwiRk9STVVMQVRFWFRcIixcblx0XHRcIl94bGZuLkdBTU1BXCI6IFwiR0FNTUFcIixcblx0XHRcIl94bGZuLkdBTU1BLkRJU1RcIjogXCJHQU1NQS5ESVNUXCIsXG5cdFx0XCJfeGxmbi5HQU1NQS5JTlZcIjogXCJHQU1NQS5JTlZcIixcblx0XHRcIl94bGZuLkdBTU1BTE4uUFJFQ0lTRVwiOiBcIkdBTU1BTE4uUFJFQ0lTRVwiLFxuXHRcdFwiX3hsZm4uR0FVU1NcIjogXCJHQVVTU1wiLFxuXHRcdFwiX3hsZm4uSFlQR0VPTS5ESVNUXCI6IFwiSFlQR0VPTS5ESVNUXCIsXG5cdFx0XCJfeGxmbi5JRk5BXCI6IFwiSUZOQVwiLFxuXHRcdFwiX3hsZm4uSUZFUlJPUlwiOiBcIklGRVJST1JcIixcblx0XHRcIl94bGZuLklNQ09TSFwiOiBcIklNQ09TSFwiLFxuXHRcdFwiX3hsZm4uSU1DT1RcIjogXCJJTUNPVFwiLFxuXHRcdFwiX3hsZm4uSU1DU0NcIjogXCJJTUNTQ1wiLFxuXHRcdFwiX3hsZm4uSU1DU0NIXCI6IFwiSU1DU0NIXCIsXG5cdFx0XCJfeGxmbi5JTVNFQ1wiOiBcIklNU0VDXCIsXG5cdFx0XCJfeGxmbi5JTVNFQ0hcIjogXCJJTVNFQ0hcIixcblx0XHRcIl94bGZuLklNU0lOSFwiOiBcIklNU0lOSFwiLFxuXHRcdFwiX3hsZm4uSU1UQU5cIjogXCJJTVRBTlwiLFxuXHRcdFwiX3hsZm4uSVNGT1JNVUxBXCI6IFwiSVNGT1JNVUxBXCIsXG5cdFx0XCJfeGxmbi5JU08uQ0VJTElOR1wiOiBcIklTTy5DRUlMSU5HXCIsXG5cdFx0XCJfeGxmbi5JU09XRUVLTlVNXCI6IFwiSVNPV0VFS05VTVwiLFxuXHRcdFwiX3hsZm4uTE9HTk9STS5ESVNUXCI6IFwiTE9HTk9STS5ESVNUXCIsXG5cdFx0XCJfeGxmbi5MT0dOT1JNLklOVlwiOiBcIkxPR05PUk0uSU5WXCIsXG5cdFx0XCJfeGxmbi5NT0RFLk1VTFRcIjogXCJNT0RFLk1VTFRcIixcblx0XHRcIl94bGZuLk1PREUuU05HTFwiOiBcIk1PREUuU05HTFwiLFxuXHRcdFwiX3hsZm4uTVVOSVRcIjogXCJNVU5JVFwiLFxuXHRcdFwiX3hsZm4uTkVHQklOT00uRElTVFwiOiBcIk5FR0JJTk9NLkRJU1RcIixcblx0XHRcIl94bGZuLk5FVFdPUktEQVlTLklOVExcIjogXCJORVRXT1JLREFZUy5JTlRMXCIsXG5cdFx0XCJfeGxmbi5OSUdCSU5PTVwiOiBcIk5JR0JJTk9NXCIsXG5cdFx0XCJfeGxmbi5OT1JNLkRJU1RcIjogXCJOT1JNLkRJU1RcIixcblx0XHRcIl94bGZuLk5PUk0uSU5WXCI6IFwiTk9STS5JTlZcIixcblx0XHRcIl94bGZuLk5PUk0uUy5ESVNUXCI6IFwiTk9STS5TLkRJU1RcIixcblx0XHRcIl94bGZuLk5PUk0uUy5JTlZcIjogXCJOT1JNLlMuSU5WXCIsXG5cdFx0XCJfeGxmbi5OVU1CRVJWQUxVRVwiOiBcIk5VTUJFUlZBTFVFXCIsXG5cdFx0XCJfeGxmbi5QRFVSQVRJT05cIjogXCJQRFVSQVRJT05cIixcblx0XHRcIl94bGZuLlBFUkNFTlRJTEUuRVhDXCI6IFwiUEVSQ0VOVElMRS5FWENcIixcblx0XHRcIl94bGZuLlBFUkNFTlRJTEUuSU5DXCI6IFwiUEVSQ0VOVElMRS5JTkNcIixcblx0XHRcIl94bGZuLlBFUkNFTlRSQU5LLkVYQ1wiOiBcIlBFUkNFTlRSQU5LLkVYQ1wiLFxuXHRcdFwiX3hsZm4uUEVSQ0VOVFJBTksuSU5DXCI6IFwiUEVSQ0VOVFJBTksuSU5DXCIsXG5cdFx0XCJfeGxmbi5QRVJNVVRBVElPTkFcIjogXCJQRVJNVVRBVElPTkFcIixcblx0XHRcIl94bGZuLlBISVwiOiBcIlBISVwiLFxuXHRcdFwiX3hsZm4uUE9JU1NPTi5ESVNUXCI6IFwiUE9JU1NPTi5ESVNUXCIsXG5cdFx0XCJfeGxmbi5RVUFSVElMRS5FWENcIjogXCJRVUFSVElMRS5FWENcIixcblx0XHRcIl94bGZuLlFVQVJUSUxFLklOQ1wiOiBcIlFVQVJUSUxFLklOQ1wiLFxuXHRcdFwiX3hsZm4uUVVFUllTVFJJTkdcIjogXCJRVUVSWVNUUklOR1wiLFxuXHRcdFwiX3hsZm4uUkFOSy5BVkdcIjogXCJSQU5LLkFWR1wiLFxuXHRcdFwiX3hsZm4uUkFOSy5FUVwiOiBcIlJBTksuRVFcIixcblx0XHRcIl94bGZuLlJSSVwiOiBcIlJSSVwiLFxuXHRcdFwiX3hsZm4uU0VDXCI6IFwiU0VDXCIsXG5cdFx0XCJfeGxmbi5TRUNIXCI6IFwiU0VDSFwiLFxuXHRcdFwiX3hsZm4uU0hFRVRcIjogXCJTSEVFVFwiLFxuXHRcdFwiX3hsZm4uU0hFRVRTXCI6IFwiU0hFRVRTXCIsXG5cdFx0XCJfeGxmbi5TS0VXLlBcIjogXCJTS0VXLlBcIixcblx0XHRcIl94bGZuLlNUREVWLlBcIjogXCJTVERFVi5QXCIsXG5cdFx0XCJfeGxmbi5TVERFVi5TXCI6IFwiU1RERVYuU1wiLFxuXHRcdFwiX3hsZm4uU1VNSUZTXCI6IFwiU1VNSUZTXCIsXG5cdFx0XCJfeGxmbi5ULkRJU1RcIjogXCJULkRJU1RcIixcblx0XHRcIl94bGZuLlQuRElTVC4yVFwiOiBcIlQuRElTVC4yVFwiLFxuXHRcdFwiX3hsZm4uVC5ESVNULlJUXCI6IFwiVC5ESVNULlJUXCIsXG5cdFx0XCJfeGxmbi5ULklOVlwiOiBcIlQuSU5WXCIsXG5cdFx0XCJfeGxmbi5ULklOVi4yVFwiOiBcIlQuSU5WLjJUXCIsXG5cdFx0XCJfeGxmbi5ULlRFU1RcIjogXCJULlRFU1RcIixcblx0XHRcIl94bGZuLlVOSUNIQVJcIjogXCJVTklDSEFSXCIsXG5cdFx0XCJfeGxmbi5VTklDT0RFXCI6IFwiVU5JQ09ERVwiLFxuXHRcdFwiX3hsZm4uVkFSLlBcIjogXCJWQVIuUFwiLFxuXHRcdFwiX3hsZm4uVkFSLlNcIjogXCJWQVIuU1wiLFxuXHRcdFwiX3hsZm4uV0VCU0VSVklDRVwiOiBcIldFQlNFUlZJQ0VcIixcblx0XHRcIl94bGZuLldFSUJVTEwuRElTVFwiOiBcIldFSUJVTEwuRElTVFwiLFxuXHRcdFwiX3hsZm4uV09SS0RBWS5JTlRMXCI6IFwiV09SS0RBWS5JTlRMXCIsXG5cdFx0XCJfeGxmbi5YT1JcIjogXCJYT1JcIixcblx0XHRcIl94bGZuLlouVEVTVFwiOiBcIlouVEVTVFwiXG5cdH07XG5cblx0LyogUGFydCAzIFRPRE86IGFjdHVhbGx5IHBhcnNlIGZvcm11bGFlICovXG5cdGZ1bmN0aW9uIG9kc190b19jc2ZfZm9ybXVsYShmKSB7XG5cdFx0aWYoZi5zdWJzdHIoMCwzKSA9PSBcIm9mOlwiKSBmID0gZi5zdWJzdHIoMyk7XG5cdFx0LyogNS4yIEJhc2ljIEV4cHJlc3Npb25zICovXG5cdFx0aWYoZi5jaGFyQ29kZUF0KDApID09IDYxKSB7XG5cdFx0XHRmID0gZi5zdWJzdHIoMSk7XG5cdFx0XHRpZihmLmNoYXJDb2RlQXQoMCkgPT0gNjEpIGYgPSBmLnN1YnN0cigxKTtcblx0XHR9XG5cdFx0ZiA9IGYucmVwbGFjZSgvQ09NXFwuTUlDUk9TT0ZUXFwuL2csIFwiXCIpO1xuXHRcdC8qIFBhcnQgMyBTZWN0aW9uIDUuOCBSZWZlcmVuY2VzICovXG5cdFx0ZiA9IGYucmVwbGFjZSgvXFxbKCg/OlxcLltBLVpdK1swLTldKykoPzo6XFwuW0EtWl0rWzAtOV0rKT8pXFxdL2csIGZ1bmN0aW9uKCQkLCAkMSkgeyByZXR1cm4gJDEucmVwbGFjZSgvXFwuL2csXCJcIik7IH0pO1xuXHRcdC8qIFRPRE86IHNvbWV0aGluZyBvdGhlciB0aGFuIHRoaXMgKi9cblx0XHRmID0gZi5yZXBsYWNlKC9cXFsuKCNbQS1aXSpbPyFdKVxcXS9nLCBcIiQxXCIpO1xuXHRcdHJldHVybiBmLnJlcGxhY2UoL1s7fl0vZyxcIixcIikucmVwbGFjZSgvXFx8L2csXCI7XCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3NmX3RvX29kc19mb3JtdWxhKGYpIHtcblx0XHR2YXIgbyA9IFwib2Y6PVwiICsgZi5yZXBsYWNlKGNyZWZyZWdleCwgXCIkMVsuJDIkMyQ0JDVdXCIpLnJlcGxhY2UoL1xcXTpcXFsvZyxcIjpcIik7XG5cdFx0LyogVE9ETzogc29tZXRoaW5nIG90aGVyIHRoYW4gdGhpcyAqL1xuXHRcdHJldHVybiBvLnJlcGxhY2UoLzsvZywgXCJ8XCIpLnJlcGxhY2UoLywvZyxcIjtcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBvZHNfdG9fY3NmX3JhbmdlXzNEKHIpIHtcblx0XHR2YXIgYSA9IHIuc3BsaXQoXCI6XCIpO1xuXHRcdHZhciBzID0gYVswXS5zcGxpdChcIi5cIilbMF07XG5cdFx0cmV0dXJuIFtzLCBhWzBdLnNwbGl0KFwiLlwiKVsxXSArIFwiOlwiICsgYVsxXS5zcGxpdChcIi5cIilbMV1dO1xuXHR9XG5cdHZhciBzdHJzID0ge307IC8vIHNoYXJlZCBzdHJpbmdzXG5cdHZhciBfc3Nmb3B0cyA9IHt9OyAvLyBzcHJlYWRzaGVldCBmb3JtYXR0aW5nIG9wdGlvbnNcblxuXHRSRUxTLldTID0gW1xuXHRcdFwiaHR0cDovL3NjaGVtYXMub3BlbnhtbGZvcm1hdHMub3JnL29mZmljZURvY3VtZW50LzIwMDYvcmVsYXRpb25zaGlwcy93b3Jrc2hlZXRcIixcblx0XHRcImh0dHA6Ly9wdXJsLm9jbGMub3JnL29veG1sL29mZmljZURvY3VtZW50L3JlbGF0aW9uc2hpcHMvd29ya3NoZWV0XCJcblx0XTtcblxuXHRmdW5jdGlvbiBnZXRfc3N0X2lkKHNzdCwgc3RyKSB7XG5cdFx0Zm9yKHZhciBpID0gMCwgbGVuID0gc3N0Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSBpZihzc3RbaV0udCA9PT0gc3RyKSB7IHNzdC5Db3VudCArKzsgcmV0dXJuIGk7IH1cblx0XHRzc3RbbGVuXSA9IHt0OnN0cn07IHNzdC5Db3VudCArKzsgc3N0LlVuaXF1ZSArKzsgcmV0dXJuIGxlbjtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbF9vYmpfdyhDLCBjb2wpIHtcblx0XHR2YXIgcCA9ICh7bWluOkMrMSxtYXg6QysxfSk7XG5cdFx0Lyogd2NoIChjaGFycyksIHdweCAocGl4ZWxzKSAqL1xuXHRcdHZhciB3Y2ggPSAtMTtcblx0XHRpZihjb2wuTURXKSBNRFcgPSBjb2wuTURXO1xuXHRcdGlmKGNvbC53aWR0aCAhPSBudWxsKSBwLmN1c3RvbVdpZHRoID0gMTtcblx0XHRlbHNlIGlmKGNvbC53cHggIT0gbnVsbCkgd2NoID0gcHgyY2hhcihjb2wud3B4KTtcblx0XHRlbHNlIGlmKGNvbC53Y2ggIT0gbnVsbCkgd2NoID0gY29sLndjaDtcblx0XHRpZih3Y2ggPiAtMSkgeyBwLndpZHRoID0gY2hhcjJ3aWR0aCh3Y2gpOyBwLmN1c3RvbVdpZHRoID0gMTsgfVxuXHRcdGVsc2UgaWYoY29sLndpZHRoICE9IG51bGwpIHAud2lkdGggPSBjb2wud2lkdGg7XG5cdFx0aWYoY29sLmhpZGRlbikgcC5oaWRkZW4gPSB0cnVlO1xuXHRcdHJldHVybiBwO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVmYXVsdF9tYXJnaW5zKG1hcmdpbnMsIG1vZGUpIHtcblx0XHRpZighbWFyZ2lucykgcmV0dXJuO1xuXHRcdHZhciBkZWZzID0gWzAuNywgMC43LCAwLjc1LCAwLjc1LCAwLjMsIDAuM107XG5cdFx0aWYobW9kZSA9PSAneGxtbCcpIGRlZnMgPSBbMSwgMSwgMSwgMSwgMC41LCAwLjVdO1xuXHRcdGlmKG1hcmdpbnMubGVmdCAgID09IG51bGwpIG1hcmdpbnMubGVmdCAgID0gZGVmc1swXTtcblx0XHRpZihtYXJnaW5zLnJpZ2h0ICA9PSBudWxsKSBtYXJnaW5zLnJpZ2h0ICA9IGRlZnNbMV07XG5cdFx0aWYobWFyZ2lucy50b3AgICAgPT0gbnVsbCkgbWFyZ2lucy50b3AgICAgPSBkZWZzWzJdO1xuXHRcdGlmKG1hcmdpbnMuYm90dG9tID09IG51bGwpIG1hcmdpbnMuYm90dG9tID0gZGVmc1szXTtcblx0XHRpZihtYXJnaW5zLmhlYWRlciA9PSBudWxsKSBtYXJnaW5zLmhlYWRlciA9IGRlZnNbNF07XG5cdFx0aWYobWFyZ2lucy5mb290ZXIgPT0gbnVsbCkgbWFyZ2lucy5mb290ZXIgPSBkZWZzWzVdO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0X2NlbGxfc3R5bGUoc3R5bGVzLCBjZWxsLCBvcHRzKSB7XG5cdFx0dmFyIHogPSBvcHRzLnJldnNzZltjZWxsLnogIT0gbnVsbCA/IGNlbGwueiA6IFwiR2VuZXJhbFwiXTtcblx0XHR2YXIgaSA9IDB4M2MsIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cdFx0aWYoeiA9PSBudWxsICYmIG9wdHMuc3NmKSB7XG5cdFx0XHRmb3IoOyBpIDwgMHgxODg7ICsraSkgaWYob3B0cy5zc2ZbaV0gPT0gbnVsbCkge1xuXHRcdFx0XHRTU0YubG9hZChjZWxsLnosIGkpO1xuXHRcdFx0XHRvcHRzLnNzZltpXSA9IGNlbGwuejtcblx0XHRcdFx0b3B0cy5yZXZzc2ZbY2VsbC56XSA9IHogPSBpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpICE9IGxlbjsgKytpKSBpZihzdHlsZXNbaV0ubnVtRm10SWQgPT09IHopIHJldHVybiBpO1xuXHRcdHN0eWxlc1tsZW5dID0ge1xuXHRcdFx0bnVtRm10SWQ6eixcblx0XHRcdGZvbnRJZDowLFxuXHRcdFx0ZmlsbElkOjAsXG5cdFx0XHRib3JkZXJJZDowLFxuXHRcdFx0eGZJZDowLFxuXHRcdFx0YXBwbHlOdW1iZXJGb3JtYXQ6MVxuXHRcdH07XG5cdFx0cmV0dXJuIGxlbjtcblx0fVxuXG5cdGZ1bmN0aW9uIHNhZmVfZm9ybWF0KHAsIGZtdGlkLCBmaWxsaWQsIG9wdHMsIHRoZW1lcywgc3R5bGVzKSB7XG5cdFx0aWYocC50ID09PSAneicpIHJldHVybjtcblx0XHRpZihwLnQgPT09ICdkJyAmJiB0eXBlb2YgcC52ID09PSAnc3RyaW5nJykgcC52ID0gcGFyc2VEYXRlKHAudik7XG5cdFx0dHJ5IHtcblx0XHRcdGlmKG9wdHMuY2VsbE5GKSBwLnogPSBTU0YuX3RhYmxlW2ZtdGlkXTtcblx0XHR9IGNhdGNoKGUpIHsgaWYob3B0cy5XVEYpIHRocm93IGU7IH1cblx0XHRpZighb3B0cyB8fCBvcHRzLmNlbGxUZXh0ICE9PSBmYWxzZSkgdHJ5IHtcblx0XHRcdGlmKHAudCA9PT0gJ2UnKSBwLncgPSBwLncgfHwgQkVycltwLnZdO1xuXHRcdFx0ZWxzZSBpZihmbXRpZCA9PT0gMCkge1xuXHRcdFx0XHRpZihwLnQgPT09ICduJykge1xuXHRcdFx0XHRcdGlmKChwLnZ8MCkgPT09IHAudikgcC53ID0gU1NGLl9nZW5lcmFsX2ludChwLnYsX3NzZm9wdHMpO1xuXHRcdFx0XHRcdGVsc2UgcC53ID0gU1NGLl9nZW5lcmFsX251bShwLnYsX3NzZm9wdHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYocC50ID09PSAnZCcpIHtcblx0XHRcdFx0XHR2YXIgZGQgPSBkYXRlbnVtKHAudik7XG5cdFx0XHRcdFx0aWYoKGRkfDApID09PSBkZCkgcC53ID0gU1NGLl9nZW5lcmFsX2ludChkZCxfc3Nmb3B0cyk7XG5cdFx0XHRcdFx0ZWxzZSBwLncgPSBTU0YuX2dlbmVyYWxfbnVtKGRkLF9zc2ZvcHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmKHAudiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gXCJcIjtcblx0XHRcdFx0ZWxzZSBwLncgPSBTU0YuX2dlbmVyYWwocC52LF9zc2ZvcHRzKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYocC50ID09PSAnZCcpIHAudyA9IFNTRi5mb3JtYXQoZm10aWQsZGF0ZW51bShwLnYpLF9zc2ZvcHRzKTtcblx0XHRcdGVsc2UgcC53ID0gU1NGLmZvcm1hdChmbXRpZCxwLnYsX3NzZm9wdHMpO1xuXHRcdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHRcdGlmKGZpbGxpZCkgdHJ5IHtcblx0XHRcdHAucyA9IHN0eWxlcy5GaWxsc1tmaWxsaWRdO1xuXHRcdFx0aWYgKHAucy5mZ0NvbG9yICYmIHAucy5mZ0NvbG9yLnRoZW1lICYmICFwLnMuZmdDb2xvci5yZ2IpIHtcblx0XHRcdFx0cC5zLmZnQ29sb3IucmdiID0gcmdiX3RpbnQodGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5mZ0NvbG9yLnRoZW1lXS5yZ2IsIHAucy5mZ0NvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRcdGlmKG9wdHMuV1RGKSBwLnMuZmdDb2xvci5yYXdfcmdiID0gdGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5mZ0NvbG9yLnRoZW1lXS5yZ2I7XG5cdFx0XHR9XG5cdFx0XHRpZiAocC5zLmJnQ29sb3IgJiYgcC5zLmJnQ29sb3IudGhlbWUpIHtcblx0XHRcdFx0cC5zLmJnQ29sb3IucmdiID0gcmdiX3RpbnQodGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5iZ0NvbG9yLnRoZW1lXS5yZ2IsIHAucy5iZ0NvbG9yLnRpbnQgfHwgMCk7XG5cdFx0XHRcdGlmKG9wdHMuV1RGKSBwLnMuYmdDb2xvci5yYXdfcmdiID0gdGhlbWVzLnRoZW1lRWxlbWVudHMuY2xyU2NoZW1lW3Aucy5iZ0NvbG9yLnRoZW1lXS5yZ2I7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaChlKSB7IGlmKG9wdHMuV1RGKSB0aHJvdyBlOyB9XG5cdH1cblx0ZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX2RpbSh3cywgcykge1xuXHRcdHZhciBkID0gc2FmZV9kZWNvZGVfcmFuZ2Uocyk7XG5cdFx0aWYoZC5zLnI8PWQuZS5yICYmIGQucy5jPD1kLmUuYyAmJiBkLnMucj49MCAmJiBkLnMuYz49MCkgd3NbXCIhcmVmXCJdID0gZW5jb2RlX3JhbmdlKGQpO1xuXHR9XG5cdHZhciBtZXJnZWNyZWdleCA9IC88KD86XFx3Oik/bWVyZ2VDZWxsIHJlZj1cIltBLVowLTk6XStcIlxccypbXFwvXT8+L2c7XG5cdHZhciBzaGVldGRhdGFyZWdleCA9IC88KD86XFx3KzopP3NoZWV0RGF0YT4oW15cXHUyNjAzXSopPFxcLyg/Olxcdys6KT9zaGVldERhdGE+Lztcblx0dmFyIGhsaW5rcmVnZXggPSAvPCg/OlxcdzopP2h5cGVybGluayBbXj5dKj4vbWc7XG5cdHZhciBkaW1yZWdleCA9IC9cIihcXHcqOlxcdyopXCIvO1xuXHR2YXIgY29scmVnZXggPSAvPCg/OlxcdzopP2NvbFtePl0qW1xcL10/Pi9nO1xuXHR2YXIgYWZyZWdleCA9IC88KD86XFx3Oik/YXV0b0ZpbHRlcltePl0qKFtcXC9dfD4oW15cXHUyNjAzXSopPFxcLyg/OlxcdzopP2F1dG9GaWx0ZXIpPi9nO1xuXHR2YXIgbWFyZ2lucmVnZXg9IC88KD86XFx3Oik/cGFnZU1hcmdpbnNbXj5dKlxcLz4vZztcblx0LyogMTguMyBXb3Jrc2hlZXRzICovXG5cdGZ1bmN0aW9uIHBhcnNlX3dzX3htbChkYXRhLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0XHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRzLmRlbnNlID09IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblxuXHRcdC8qIDE4LjMuMS45OSB3b3Jrc2hlZXQgQ1RfV29ya3NoZWV0ICovXG5cdFx0dmFyIHMgPSBvcHRzLmRlbnNlID8gKFtdKSA6ICh7fSk7XG5cdFx0dmFyIHJlZmd1ZXNzID0gKHtzOiB7cjoyMDAwMDAwLCBjOjIwMDAwMDB9LCBlOiB7cjowLCBjOjB9IH0pO1xuXG5cdFx0dmFyIGRhdGExID0gXCJcIiwgZGF0YTIgPSBcIlwiO1xuXHRcdHZhciBtdGNoPWRhdGEubWF0Y2goc2hlZXRkYXRhcmVnZXgpO1xuXHRcdGlmKG10Y2gpIHtcblx0XHRcdGRhdGExID0gZGF0YS5zdWJzdHIoMCwgbXRjaC5pbmRleCk7XG5cdFx0XHRkYXRhMiA9IGRhdGEuc3Vic3RyKG10Y2guaW5kZXggKyBtdGNoWzBdLmxlbmd0aCk7XG5cdFx0fSBlbHNlIGRhdGExID0gZGF0YTIgPSBkYXRhO1xuXG5cdFx0LyogMTguMy4xLjM1IGRpbWVuc2lvbiBDVF9TaGVldERpbWVuc2lvbiA/ICovXG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHR2YXIgcmlkeCA9IChkYXRhMS5tYXRjaCgvPCg/Olxcdyo6KT9kaW1lbnNpb24vKXx8e2luZGV4Oi0xfSkuaW5kZXg7XG5cdFx0aWYocmlkeCA+IDApIHtcblx0XHRcdHZhciByZWYgPSBkYXRhMS5zdWJzdHIocmlkeCw1MCkubWF0Y2goZGltcmVnZXgpO1xuXHRcdFx0aWYocmVmKSBwYXJzZV93c194bWxfZGltKHMsIHJlZlsxXSk7XG5cdFx0fVxuXG5cdFx0LyogMTguMy4xLjE3IGNvbHMgQ1RfQ29scyAqL1xuXHRcdHZhciBjb2x1bW5zID0gW107XG5cdFx0aWYob3B0cy5jZWxsU3R5bGVzKSB7XG5cdFx0XHQvKiAxOC4zLjEuMTMgY29sIENUX0NvbCAqL1xuXHRcdFx0dmFyIGNvbHMgPSBkYXRhMS5tYXRjaChjb2xyZWdleCk7XG5cdFx0XHRpZihjb2xzKSBwYXJzZV93c194bWxfY29scyhjb2x1bW5zLCBjb2xzKTtcblx0XHR9XG5cblx0XHQvKiAxOC4zLjEuODAgc2hlZXREYXRhIENUX1NoZWV0RGF0YSA/ICovXG5cdFx0aWYobXRjaCkgcGFyc2Vfd3NfeG1sX2RhdGEobXRjaFsxXSwgcywgb3B0cywgcmVmZ3Vlc3MsIHRoZW1lcywgc3R5bGVzKTtcblxuXHRcdC8qIDE4LjMuMS4yICBhdXRvRmlsdGVyIENUX0F1dG9GaWx0ZXIgKi9cblx0XHR2YXIgYWZpbHRlciA9IGRhdGEyLm1hdGNoKGFmcmVnZXgpO1xuXHRcdGlmKGFmaWx0ZXIpIHNbJyFhdXRvZmlsdGVyJ10gPSBwYXJzZV93c194bWxfYXV0b2ZpbHRlcihhZmlsdGVyWzBdKTtcblxuXHRcdC8qIDE4LjMuMS41NSBtZXJnZUNlbGxzIENUX01lcmdlQ2VsbHMgKi9cblx0XHR2YXIgbWVyZ2VjZWxscyA9IFtdO1xuXHRcdHZhciBtZXJnZXMgPSBkYXRhMi5tYXRjaChtZXJnZWNyZWdleCk7XG5cdFx0aWYobWVyZ2VzKSBmb3IocmlkeCA9IDA7IHJpZHggIT0gbWVyZ2VzLmxlbmd0aDsgKytyaWR4KVxuXHRcdFx0bWVyZ2VjZWxsc1tyaWR4XSA9IHNhZmVfZGVjb2RlX3JhbmdlKG1lcmdlc1tyaWR4XS5zdWJzdHIobWVyZ2VzW3JpZHhdLmluZGV4T2YoXCJcXFwiXCIpKzEpKTtcblxuXHRcdC8qIDE4LjMuMS40OCBoeXBlcmxpbmtzIENUX0h5cGVybGlua3MgKi9cblx0XHR2YXIgaGxpbmsgPSBkYXRhMi5tYXRjaChobGlua3JlZ2V4KTtcblx0XHRpZihobGluaykgcGFyc2Vfd3NfeG1sX2hsaW5rcyhzLCBobGluaywgcmVscyk7XG5cblx0XHQvKiAxOC4zLjEuNjIgcGFnZU1hcmdpbnMgQ1RfUGFnZU1hcmdpbnMgKi9cblx0XHR2YXIgbWFyZ2lucyA9IGRhdGEyLm1hdGNoKG1hcmdpbnJlZ2V4KTtcblx0XHRpZihtYXJnaW5zKSBzWychbWFyZ2lucyddID0gcGFyc2Vfd3NfeG1sX21hcmdpbnMocGFyc2V4bWx0YWcobWFyZ2luc1swXSkpO1xuXG5cdFx0aWYoIXNbXCIhcmVmXCJdICYmIHJlZmd1ZXNzLmUuYyA+PSByZWZndWVzcy5zLmMgJiYgcmVmZ3Vlc3MuZS5yID49IHJlZmd1ZXNzLnMucikgc1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdGlmKG9wdHMuc2hlZXRSb3dzID4gMCAmJiBzW1wiIXJlZlwiXSkge1xuXHRcdFx0dmFyIHRtcHJlZiA9IHNhZmVfZGVjb2RlX3JhbmdlKHNbXCIhcmVmXCJdKTtcblx0XHRcdGlmKG9wdHMuc2hlZXRSb3dzIDwgK3RtcHJlZi5lLnIpIHtcblx0XHRcdFx0dG1wcmVmLmUuciA9IG9wdHMuc2hlZXRSb3dzIC0gMTtcblx0XHRcdFx0aWYodG1wcmVmLmUuciA+IHJlZmd1ZXNzLmUucikgdG1wcmVmLmUuciA9IHJlZmd1ZXNzLmUucjtcblx0XHRcdFx0aWYodG1wcmVmLmUuciA8IHRtcHJlZi5zLnIpIHRtcHJlZi5zLnIgPSB0bXByZWYuZS5yO1xuXHRcdFx0XHRpZih0bXByZWYuZS5jID4gcmVmZ3Vlc3MuZS5jKSB0bXByZWYuZS5jID0gcmVmZ3Vlc3MuZS5jO1xuXHRcdFx0XHRpZih0bXByZWYuZS5jIDwgdG1wcmVmLnMuYykgdG1wcmVmLnMuYyA9IHRtcHJlZi5lLmM7XG5cdFx0XHRcdHNbXCIhZnVsbHJlZlwiXSA9IHNbXCIhcmVmXCJdO1xuXHRcdFx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZSh0bXByZWYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihtZXJnZWNlbGxzLmxlbmd0aCA+IDApIHNbXCIhbWVyZ2VzXCJdID0gbWVyZ2VjZWxscztcblx0XHRpZihjb2x1bW5zLmxlbmd0aCA+IDApIHNbXCIhY29sc1wiXSA9IGNvbHVtbnM7XG5cdFx0cmV0dXJuIHM7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93c194bWxfbWVyZ2VzKG1lcmdlcykge1xuXHRcdGlmKG1lcmdlcy5sZW5ndGggPT0gMCkgcmV0dXJuIFwiXCI7XG5cdFx0dmFyIG8gPSAnPG1lcmdlQ2VsbHMgY291bnQ9XCInICsgbWVyZ2VzLmxlbmd0aCArICdcIj4nO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gbWVyZ2VzLmxlbmd0aDsgKytpKSBvICs9ICc8bWVyZ2VDZWxsIHJlZj1cIicgKyBlbmNvZGVfcmFuZ2UobWVyZ2VzW2ldKSArICdcIi8+Jztcblx0XHRyZXR1cm4gbyArICc8L21lcmdlQ2VsbHM+Jztcblx0fVxuXG5cdC8qIDE4LjMuMS44NSBzaGVldFByIENUX1NoZWV0UHJvdGVjdGlvbiAqL1xuXHRmdW5jdGlvbiB3cml0ZV93c194bWxfcHJvdGVjdGlvbihzcCkge1xuXHRcdC8vIGFsZ29yaXRobU5hbWUsIGhhc2hWYWx1ZSwgc2FsdFZhbHVlLCBzcGluQ291bnRwYXNzd29yZFxuXHRcdHZhciBvID0gKHtzaGVldDoxfSk7XG5cdFx0dmFyIGRlZmZhbHNlID0gW1wib2JqZWN0c1wiLCBcInNjZW5hcmlvc1wiLCBcInNlbGVjdExvY2tlZENlbGxzXCIsIFwic2VsZWN0VW5sb2NrZWRDZWxsc1wiXTtcblx0XHR2YXIgZGVmdHJ1ZSA9IFtcblx0XHRcdFwiZm9ybWF0Q29sdW1uc1wiLCBcImZvcm1hdFJvd3NcIiwgXCJmb3JtYXRDZWxsc1wiLFxuXHRcdFx0XCJpbnNlcnRDb2x1bW5zXCIsIFwiaW5zZXJ0Um93c1wiLCBcImluc2VydEh5cGVybGlua3NcIixcblx0XHRcdFwiZGVsZXRlQ29sdW1uc1wiLCBcImRlbGV0ZVJvd3NcIixcblx0XHRcdFwic29ydFwiLCBcImF1dG9GaWx0ZXJcIiwgXCJwaXZvdFRhYmxlc1wiXG5cdFx0XTtcblx0XHRkZWZmYWxzZS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHsgaWYoc3Bbbl0gIT0gbnVsbCAmJiBzcFtuXSkgb1tuXSA9IFwiMVwiOyB9KTtcblx0XHRkZWZ0cnVlLmZvckVhY2goZnVuY3Rpb24obikgeyBpZihzcFtuXSAhPSBudWxsICYmICFzcFtuXSkgb1tuXSA9IFwiMFwiOyB9KTtcblx0XHQvKiBUT0RPOiBhbGdvcml0aG0gKi9cblx0XHRpZihzcC5wYXNzd29yZCkgby5wYXNzd29yZCA9IGNyeXB0b19DcmVhdGVQYXNzd29yZFZlcmlmaWVyX01ldGhvZDEoc3AucGFzc3dvcmQpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRcdHJldHVybiB3cml0ZXh0YWcoJ3NoZWV0UHJvdGVjdGlvbicsIG51bGwsIG8pO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX2hsaW5rcyhzLCBkYXRhLCByZWxzKSB7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciB2YWwgPSBwYXJzZXhtbHRhZyhkYXRhW2ldLCB0cnVlKTtcblx0XHRcdGlmKCF2YWwucmVmKSByZXR1cm47XG5cdFx0XHR2YXIgcmVsID0gcmVscyA/IHJlbHNbJyFpZCddW3ZhbC5pZF0gOiBudWxsO1xuXHRcdFx0aWYocmVsKSB7XG5cdFx0XHRcdHZhbC5UYXJnZXQgPSByZWwuVGFyZ2V0O1xuXHRcdFx0XHRpZih2YWwubG9jYXRpb24pIHZhbC5UYXJnZXQgKz0gXCIjXCIrdmFsLmxvY2F0aW9uO1xuXHRcdFx0XHR2YWwuUmVsID0gcmVsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsLlRhcmdldCA9IHZhbC5sb2NhdGlvbjtcblx0XHRcdFx0cmVsID0ge1RhcmdldDogdmFsLmxvY2F0aW9uLCBUYXJnZXRNb2RlOiAnSW50ZXJuYWwnfTtcblx0XHRcdFx0dmFsLlJlbCA9IHJlbDtcblx0XHRcdH1cblx0XHRcdGlmKHZhbC50b29sdGlwKSB7IHZhbC5Ub29sdGlwID0gdmFsLnRvb2x0aXA7IGRlbGV0ZSB2YWwudG9vbHRpcDsgfVxuXHRcdFx0dmFyIHJuZyA9IHNhZmVfZGVjb2RlX3JhbmdlKHZhbC5yZWYpO1xuXHRcdFx0Zm9yKHZhciBSPXJuZy5zLnI7Ujw9cm5nLmUucjsrK1IpIGZvcih2YXIgQz1ybmcucy5jO0M8PXJuZy5lLmM7KytDKSB7XG5cdFx0XHRcdHZhciBhZGRyID0gZW5jb2RlX2NlbGwoe2M6QyxyOlJ9KTtcblx0XHRcdFx0aWYoZGVuc2UpIHtcblx0XHRcdFx0XHRpZighc1tSXSkgc1tSXSA9IFtdO1xuXHRcdFx0XHRcdGlmKCFzW1JdW0NdKSBzW1JdW0NdID0ge3Q6XCJ6XCIsdjp1bmRlZmluZWR9O1xuXHRcdFx0XHRcdHNbUl1bQ10ubCA9IHZhbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZighc1thZGRyXSkgc1thZGRyXSA9IHt0OlwielwiLHY6dW5kZWZpbmVkfTtcblx0XHRcdFx0XHRzW2FkZHJdLmwgPSB2YWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV93c194bWxfbWFyZ2lucyhtYXJnaW4pIHtcblx0XHR2YXIgbyA9IHt9O1xuXHRcdFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInRvcFwiLCBcImJvdHRvbVwiLCBcImhlYWRlclwiLCBcImZvb3RlclwiXS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0XHRcdGlmKG1hcmdpbltrXSkgb1trXSA9IHBhcnNlRmxvYXQobWFyZ2luW2tdKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV93c194bWxfbWFyZ2lucyhtYXJnaW4pIHtcblx0XHRkZWZhdWx0X21hcmdpbnMobWFyZ2luKTtcblx0XHRyZXR1cm4gd3JpdGV4dGFnKCdwYWdlTWFyZ2lucycsIG51bGwsIG1hcmdpbik7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV93c194bWxfY29scyhjb2x1bW5zLCBjb2xzKSB7XG5cdFx0dmFyIHNlZW5jb2wgPSBmYWxzZTtcblx0XHRmb3IodmFyIGNvbGkgPSAwOyBjb2xpICE9IGNvbHMubGVuZ3RoOyArK2NvbGkpIHtcblx0XHRcdHZhciBjb2xsID0gcGFyc2V4bWx0YWcoY29sc1tjb2xpXSwgdHJ1ZSk7XG5cdFx0XHRpZihjb2xsLmhpZGRlbikgY29sbC5oaWRkZW4gPSBwYXJzZXhtbGJvb2woY29sbC5oaWRkZW4pO1xuXHRcdFx0dmFyIGNvbG09cGFyc2VJbnQoY29sbC5taW4sIDEwKS0xLCBjb2xNPXBhcnNlSW50KGNvbGwubWF4LDEwKS0xO1xuXHRcdFx0ZGVsZXRlIGNvbGwubWluOyBkZWxldGUgY29sbC5tYXg7IGNvbGwud2lkdGggPSArY29sbC53aWR0aDtcblx0XHRcdGlmKCFzZWVuY29sICYmIGNvbGwud2lkdGgpIHsgc2VlbmNvbCA9IHRydWU7IGZpbmRfbWR3X2NvbHcoY29sbC53aWR0aCk7IH1cblx0XHRcdHByb2Nlc3NfY29sKGNvbGwpO1xuXHRcdFx0d2hpbGUoY29sbSA8PSBjb2xNKSBjb2x1bW5zW2NvbG0rK10gPSBkdXAoY29sbCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3NfeG1sX2NvbHMod3MsIGNvbHMpIHtcblx0XHR2YXIgbyA9IFtcIjxjb2xzPlwiXSwgY29sLCB3aWR0aDtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IGNvbHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdGlmKCEoY29sID0gY29sc1tpXSkpIGNvbnRpbnVlO1xuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdjb2wnLCBudWxsLCBjb2xfb2JqX3coaSwgY29sKSkpO1xuXHRcdH1cblx0XHRvW28ubGVuZ3RoXSA9IFwiPC9jb2xzPlwiO1xuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV93c194bWxfYXV0b2ZpbHRlcihkYXRhKSB7XG5cdFx0dmFyIG8gPSB7IHJlZjogKGRhdGEubWF0Y2goL3JlZj1cIihbXlwiXSopXCIvKXx8W10pWzFdfTtcblx0XHRyZXR1cm4gbztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV93c194bWxfYXV0b2ZpbHRlcihkYXRhKSB7XG5cdFx0cmV0dXJuIHdyaXRleHRhZyhcImF1dG9GaWx0ZXJcIiwgbnVsbCwge3JlZjpkYXRhLnJlZn0pO1xuXHR9XG5cblx0LyogMTguMy4xLjg4IHNoZWV0Vmlld3MgQ1RfU2hlZXRWaWV3cyAqL1xuXHQvKiAxOC4zLjEuODcgc2hlZXRWaWV3IENUX1NoZWV0VmlldyAqL1xuXHRmdW5jdGlvbiB3cml0ZV93c194bWxfc2hlZXR2aWV3cyh3cywgb3B0cywgaWR4LCB3Yikge1xuXHRcdHJldHVybiB3cml0ZXh0YWcoXCJzaGVldFZpZXdzXCIsIHdyaXRleHRhZyhcInNoZWV0Vmlld1wiLCBudWxsLCB7d29ya2Jvb2tWaWV3SWQ6XCIwXCJ9KSwge30pO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3NfeG1sX2NlbGwoY2VsbCwgcmVmLCB3cywgb3B0cywgaWR4LCB3Yikge1xuXHRcdGlmKGNlbGwudiA9PT0gdW5kZWZpbmVkICYmIGNlbGwuZiA9PT0gdW5kZWZpbmVkIHx8IGNlbGwudCA9PT0gJ3onKSByZXR1cm4gXCJcIjtcblx0XHR2YXIgdnYgPSBcIlwiO1xuXHRcdHZhciBvbGR0ID0gY2VsbC50LCBvbGR2ID0gY2VsbC52O1xuXHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdGNhc2UgJ2InOiB2diA9IGNlbGwudiA/IFwiMVwiIDogXCIwXCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnbic6IHZ2ID0gJycrY2VsbC52OyBicmVhaztcblx0XHRcdGNhc2UgJ2UnOiB2diA9IEJFcnJbY2VsbC52XTsgYnJlYWs7XG5cdFx0XHRjYXNlICdkJzpcblx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMpIHZ2ID0gcGFyc2VEYXRlKGNlbGwudikudG9JU09TdHJpbmcoKTtcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Y2VsbC50ID0gJ24nO1xuXHRcdFx0XHRcdHZ2ID0gJycrKGNlbGwudiA9IGRhdGVudW0ocGFyc2VEYXRlKGNlbGwudikpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih0eXBlb2YgY2VsbC56ID09PSAndW5kZWZpbmVkJykgY2VsbC56ID0gU1NGLl90YWJsZVsxNF07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdnYgPSBjZWxsLnY7IGJyZWFrO1xuXHRcdH1cblx0XHR2YXIgdiA9IHdyaXRldGFnKCd2JywgZXNjYXBleG1sKHZ2KSksIG8gPSAoe3I6cmVmfSk7XG5cdFx0LyogVE9ETzogY2VsbCBzdHlsZSAqL1xuXHRcdHZhciBvcyA9IGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywgY2VsbCwgb3B0cyk7XG5cdFx0aWYob3MgIT09IDApIG8ucyA9IG9zO1xuXHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdGNhc2UgJ24nOiBicmVhaztcblx0XHRcdGNhc2UgJ2QnOiBvLnQgPSBcImRcIjsgYnJlYWs7XG5cdFx0XHRjYXNlICdiJzogby50ID0gXCJiXCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZSc6IG8udCA9IFwiZVwiOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IGlmKGNlbGwudiA9PSBudWxsKSB7IGRlbGV0ZSBjZWxsLnQ7IGJyZWFrOyB9XG5cdFx0XHRcdGlmKG9wdHMuYm9va1NTVCkge1xuXHRcdFx0XHRcdHYgPSB3cml0ZXRhZygndicsICcnK2dldF9zc3RfaWQob3B0cy5TdHJpbmdzLCBjZWxsLnYpKTtcblx0XHRcdFx0XHRvLnQgPSBcInNcIjsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0by50ID0gXCJzdHJcIjsgYnJlYWs7XG5cdFx0fVxuXHRcdGlmKGNlbGwudCAhPSBvbGR0KSB7IGNlbGwudCA9IG9sZHQ7IGNlbGwudiA9IG9sZHY7IH1cblx0XHRpZihjZWxsLmYpIHtcblx0XHRcdHZhciBmZiA9IGNlbGwuRiAmJiBjZWxsLkYuc3Vic3RyKDAsIHJlZi5sZW5ndGgpID09IHJlZiA/IHt0OlwiYXJyYXlcIiwgcmVmOmNlbGwuRn0gOiBudWxsO1xuXHRcdFx0diA9IHdyaXRleHRhZygnZicsIGVzY2FwZXhtbChjZWxsLmYpLCBmZikgKyAoY2VsbC52ICE9IG51bGwgPyB2IDogXCJcIik7XG5cdFx0fVxuXHRcdGlmKGNlbGwubCkgd3NbJyFsaW5rcyddLnB1c2goW3JlZiwgY2VsbC5sXSk7XG5cdFx0aWYoY2VsbC5jKSB3c1snIWNvbW1lbnRzJ10ucHVzaChbcmVmLCBjZWxsLmNdKTtcblx0XHRyZXR1cm4gd3JpdGV4dGFnKCdjJywgdiwgbyk7XG5cdH1cblxuXHR2YXIgcGFyc2Vfd3NfeG1sX2RhdGEgPSAoZnVuY3Rpb24gcGFyc2Vfd3NfeG1sX2RhdGFfZmFjdG9yeSgpIHtcblx0XHR2YXIgY2VsbHJlZ2V4ID0gLzwoPzpcXHcrOik/Y1sgPl0vLCByb3dyZWdleCA9IC88XFwvKD86XFx3KzopP3Jvdz4vO1xuXHRcdHZhciBycmVnZXggPSAvcj1bXCInXShbXlwiJ10qKVtcIiddLywgaXNyZWdleCA9IC88KD86XFx3KzopP2lzPihbXFxTXFxzXSo/KTxcXC8oPzpcXHcrOik/aXM+Lztcblx0XHR2YXIgcmVmcmVnZXggPSAvcmVmPVtcIiddKFteXCInXSopW1wiJ10vO1xuXHRcdHZhciBtYXRjaF92ID0gbWF0Y2h0YWcoXCJ2XCIpLCBtYXRjaF9mID0gbWF0Y2h0YWcoXCJmXCIpO1xuXG5cdHJldHVybiBmdW5jdGlvbiBwYXJzZV93c194bWxfZGF0YShzZGF0YSwgcywgb3B0cywgZ3Vlc3MsIHRoZW1lcywgc3R5bGVzKSB7XG5cdFx0dmFyIHJpID0gMCwgeCA9IFwiXCIsIGNlbGxzID0gW10sIGNyZWYgPSBbXSwgaWR4PTAsIGk9MCwgY2M9MCwgZD1cIlwiLCBwO1xuXHRcdHZhciB0YWcsIHRhZ3IgPSAwLCB0YWdjID0gMDtcblx0XHR2YXIgc3N0ciwgZnRhZztcblx0XHR2YXIgZm10aWQgPSAwLCBmaWxsaWQgPSAwLCBkb19mb3JtYXQgPSBBcnJheS5pc0FycmF5KHN0eWxlcy5DZWxsWGYpLCBjZjtcblx0XHR2YXIgYXJyYXlmID0gW107XG5cdFx0dmFyIHNoYXJlZGYgPSBbXTtcblx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHMpO1xuXHRcdHZhciByb3dzID0gW10sIHJvd29iaiA9IHt9LCByb3dyaXRlID0gZmFsc2U7XG5cdFx0Zm9yKHZhciBtYXJyID0gc2RhdGEuc3BsaXQocm93cmVnZXgpLCBtdCA9IDAsIG1hcnJsZW4gPSBtYXJyLmxlbmd0aDsgbXQgIT0gbWFycmxlbjsgKyttdCkge1xuXHRcdFx0eCA9IG1hcnJbbXRdLnRyaW0oKTtcblx0XHRcdHZhciB4bGVuID0geC5sZW5ndGg7XG5cdFx0XHRpZih4bGVuID09PSAwKSBjb250aW51ZTtcblxuXHRcdFx0LyogMTguMy4xLjczIHJvdyBDVF9Sb3cgKi9cblx0XHRcdGZvcihyaSA9IDA7IHJpIDwgeGxlbjsgKytyaSkgaWYoeC5jaGFyQ29kZUF0KHJpKSA9PT0gNjIpIGJyZWFrOyArK3JpO1xuXHRcdFx0dGFnID0gcGFyc2V4bWx0YWcoeC5zdWJzdHIoMCxyaSksIHRydWUpO1xuXHRcdFx0dGFnciA9IHRhZy5yICE9IG51bGwgPyBwYXJzZUludCh0YWcuciwgMTApIDogdGFncisxOyB0YWdjID0gLTE7XG5cdFx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8IHRhZ3IpIGNvbnRpbnVlO1xuXHRcdFx0aWYoZ3Vlc3Mucy5yID4gdGFnciAtIDEpIGd1ZXNzLnMuciA9IHRhZ3IgLSAxO1xuXHRcdFx0aWYoZ3Vlc3MuZS5yIDwgdGFnciAtIDEpIGd1ZXNzLmUuciA9IHRhZ3IgLSAxO1xuXG5cdFx0XHRpZihvcHRzICYmIG9wdHMuY2VsbFN0eWxlcykge1xuXHRcdFx0XHRyb3dvYmogPSB7fTsgcm93cml0ZSA9IGZhbHNlO1xuXHRcdFx0XHRpZih0YWcuaHQpIHsgcm93cml0ZSA9IHRydWU7IHJvd29iai5ocHQgPSBwYXJzZUZsb2F0KHRhZy5odCk7IHJvd29iai5ocHggPSBwdDJweChyb3dvYmouaHB0KTsgfVxuXHRcdFx0XHRpZih0YWcuaGlkZGVuID09IFwiMVwiKSB7IHJvd3JpdGUgPSB0cnVlOyByb3dvYmouaGlkZGVuID0gdHJ1ZTsgfVxuXHRcdFx0XHRpZihyb3dyaXRlKSByb3dzW3RhZ3ItMV0gPSByb3dvYmo7XG5cdFx0XHR9XG5cblx0XHRcdC8qIDE4LjMuMS40IGMgQ1RfQ2VsbCAqL1xuXHRcdFx0Y2VsbHMgPSB4LnN1YnN0cihyaSkuc3BsaXQoY2VsbHJlZ2V4KTtcblx0XHRcdGZvcihyaSA9IDA7IHJpICE9IGNlbGxzLmxlbmd0aDsgKytyaSkge1xuXHRcdFx0XHR4ID0gY2VsbHNbcmldLnRyaW0oKTtcblx0XHRcdFx0aWYoeC5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xuXHRcdFx0XHRjcmVmID0geC5tYXRjaChycmVnZXgpOyBpZHggPSByaTsgaT0wOyBjYz0wO1xuXHRcdFx0XHR4ID0gXCI8YyBcIiArICh4LnN1YnN0cigwLDEpPT1cIjxcIj9cIj5cIjpcIlwiKSArIHg7XG5cdFx0XHRcdGlmKGNyZWYgIT0gbnVsbCAmJiBjcmVmLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRcdGlkeCA9IDA7IGQ9Y3JlZlsxXTtcblx0XHRcdFx0XHRmb3IoaT0wOyBpICE9IGQubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHRcdGlmKChjYz1kLmNoYXJDb2RlQXQoaSktNjQpIDwgMSB8fCBjYyA+IDI2KSBicmVhaztcblx0XHRcdFx0XHRcdGlkeCA9IDI2KmlkeCArIGNjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQtLWlkeDtcblx0XHRcdFx0XHR0YWdjID0gaWR4O1xuXHRcdFx0XHR9IGVsc2UgKyt0YWdjO1xuXHRcdFx0XHRmb3IoaSA9IDA7IGkgIT0geC5sZW5ndGg7ICsraSkgaWYoeC5jaGFyQ29kZUF0KGkpID09PSA2MikgYnJlYWs7ICsraTtcblx0XHRcdFx0dGFnID0gcGFyc2V4bWx0YWcoeC5zdWJzdHIoMCxpKSwgdHJ1ZSk7XG5cdFx0XHRcdGlmKCF0YWcucikgdGFnLnIgPSBlbmNvZGVfY2VsbCh7cjp0YWdyLTEsIGM6dGFnY30pO1xuXHRcdFx0XHRkID0geC5zdWJzdHIoaSk7XG5cdFx0XHRcdHAgPSAoe3Q6XCJcIn0pO1xuXG5cdFx0XHRcdGlmKChjcmVmPWQubWF0Y2gobWF0Y2hfdikpIT0gbnVsbCAmJiBjcmVmWzFdICE9PSAnJykgcC52PXVuZXNjYXBleG1sKGNyZWZbMV0pO1xuXHRcdFx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0aWYoKGNyZWY9ZC5tYXRjaChtYXRjaF9mKSkhPSBudWxsICYmIGNyZWZbMV0gIT09ICcnKSB7XG5cdFx0XHRcdFx0XHQvKiBUT0RPOiBtYXRjaCBhZ2FpbnN0IFhMU1hGdXR1cmVGdW5jdGlvbnMgKi9cblx0XHRcdFx0XHRcdHAuZj11bmVzY2FwZXhtbCh1dGY4cmVhZChjcmVmWzFdKSkucmVwbGFjZSgvX3hsZm5cXC4vLFwiXCIpO1xuXHRcdFx0XHRcdFx0aWYoY3JlZlswXS5pbmRleE9mKCd0PVwiYXJyYXlcIicpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0cC5GID0gKGQubWF0Y2gocmVmcmVnZXgpfHxbXSlbMV07XG5cdFx0XHRcdFx0XHRcdGlmKHAuRi5pbmRleE9mKFwiOlwiKSA+IC0xKSBhcnJheWYucHVzaChbc2FmZV9kZWNvZGVfcmFuZ2UocC5GKSwgcC5GXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY3JlZlswXS5pbmRleE9mKCd0PVwic2hhcmVkXCInKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IHBhcnNlIGZvcm11bGFcblx0XHRcdFx0XHRcdFx0ZnRhZyA9IHBhcnNleG1sdGFnKGNyZWZbMF0pO1xuXHRcdFx0XHRcdFx0XHRzaGFyZWRmW3BhcnNlSW50KGZ0YWcuc2ksIDEwKV0gPSBbZnRhZywgdW5lc2NhcGV4bWwodXRmOHJlYWQoY3JlZlsxXSkpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYoKGNyZWY9ZC5tYXRjaCgvPGZbXj5dKlxcLz4vKSkpIHtcblx0XHRcdFx0XHRcdGZ0YWcgPSBwYXJzZXhtbHRhZyhjcmVmWzBdKTtcblx0XHRcdFx0XHRcdGlmKHNoYXJlZGZbZnRhZy5zaV0pIHAuZiA9IHNoaWZ0X2Zvcm11bGFfeGxzeChzaGFyZWRmW2Z0YWcuc2ldWzFdLCBzaGFyZWRmW2Z0YWcuc2ldWzBdLnJlZiwgdGFnLnIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvKiBUT0RPOiBmYWN0b3Igb3V0IGNvbnRhaW5zIGxvZ2ljICovXG5cdFx0XHRcdFx0dmFyIF90YWcgPSBkZWNvZGVfY2VsbCh0YWcucik7XG5cdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgYXJyYXlmLmxlbmd0aDsgKytpKVxuXHRcdFx0XHRcdFx0aWYoX3RhZy5yID49IGFycmF5ZltpXVswXS5zLnIgJiYgX3RhZy5yIDw9IGFycmF5ZltpXVswXS5lLnIpXG5cdFx0XHRcdFx0XHRcdGlmKF90YWcuYyA+PSBhcnJheWZbaV1bMF0ucy5jICYmIF90YWcuYyA8PSBhcnJheWZbaV1bMF0uZS5jKVxuXHRcdFx0XHRcdFx0XHRcdHAuRiA9IGFycmF5ZltpXVsxXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHRhZy50ID09IG51bGwgJiYgcC52ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZihwLmYgfHwgcC5GKSB7XG5cdFx0XHRcdFx0XHRwLnYgPSAwOyBwLnQgPSBcIm5cIjtcblx0XHRcdFx0XHR9IGVsc2UgaWYoIW9wdHMuc2hlZXRTdHVicykgY29udGludWU7XG5cdFx0XHRcdFx0ZWxzZSBwLnQgPSBcInpcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHAudCA9IHRhZy50IHx8IFwiblwiO1xuXHRcdFx0XHRpZihndWVzcy5zLmMgPiBpZHgpIGd1ZXNzLnMuYyA9IGlkeDtcblx0XHRcdFx0aWYoZ3Vlc3MuZS5jIDwgaWR4KSBndWVzcy5lLmMgPSBpZHg7XG5cdFx0XHRcdC8qIDE4LjE4LjExIHQgU1RfQ2VsbFR5cGUgKi9cblx0XHRcdFx0c3dpdGNoKHAudCkge1xuXHRcdFx0XHRcdGNhc2UgJ24nOlxuXHRcdFx0XHRcdFx0cC52ID0gcGFyc2VGbG9hdChwLnYpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAncyc6XG5cdFx0XHRcdFx0XHRzc3RyID0gc3Ryc1twYXJzZUludChwLnYsIDEwKV07XG5cdFx0XHRcdFx0XHRpZih0eXBlb2YgcC52ID09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRcdGlmKCFvcHRzLnNoZWV0U3R1YnMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRwLnQgPSAneic7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwLnYgPSBzc3RyLnQ7XG5cdFx0XHRcdFx0XHRwLnIgPSBzc3RyLnI7XG5cdFx0XHRcdFx0XHRpZihvcHRzLmNlbGxIVE1MKSBwLmggPSBzc3RyLmg7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdzdHInOlxuXHRcdFx0XHRcdFx0cC50ID0gXCJzXCI7XG5cdFx0XHRcdFx0XHRwLnYgPSAocC52IT1udWxsKSA/IHV0ZjhyZWFkKHAudikgOiAnJztcblx0XHRcdFx0XHRcdGlmKG9wdHMuY2VsbEhUTUwpIHAuaCA9IGVzY2FwZWh0bWwocC52KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2lubGluZVN0cic6XG5cdFx0XHRcdFx0XHRjcmVmID0gZC5tYXRjaChpc3JlZ2V4KTtcblx0XHRcdFx0XHRcdHAudCA9ICdzJztcblx0XHRcdFx0XHRcdGlmKGNyZWYgIT0gbnVsbCAmJiAoc3N0ciA9IHBhcnNlX3NpKGNyZWZbMV0pKSkgcC52ID0gc3N0ci50OyBlbHNlIHAudiA9IFwiXCI7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdiJzogcC52ID0gcGFyc2V4bWxib29sKHAudik7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdFx0aWYoIW9wdHMuY2VsbERhdGVzKSB7IHAudiA9IGRhdGVudW0ocGFyc2VEYXRlKHAudikpOyBwLnQgPSAnbic7IH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdC8qIGVycm9yIHN0cmluZyBpbiAudywgbnVtYmVyIGluIC52ICovXG5cdFx0XHRcdFx0Y2FzZSAnZSc6XG5cdFx0XHRcdFx0XHRpZighb3B0cyB8fCBvcHRzLmNlbGxUZXh0ICE9PSBmYWxzZSkgcC53ID0gcC52O1xuXHRcdFx0XHRcdFx0cC52ID0gUkJFcnJbcC52XTsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0LyogZm9ybWF0dGluZyAqL1xuXHRcdFx0XHRmbXRpZCA9IGZpbGxpZCA9IDA7XG5cdFx0XHRcdGlmKGRvX2Zvcm1hdCAmJiB0YWcucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Y2YgPSBzdHlsZXMuQ2VsbFhmW3RhZy5zXTtcblx0XHRcdFx0XHRpZihjZiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRpZihjZi5udW1GbXRJZCAhPSBudWxsKSBmbXRpZCA9IGNmLm51bUZtdElkO1xuXHRcdFx0XHRcdFx0aWYob3B0cy5jZWxsU3R5bGVzICYmIGNmLmZpbGxJZCAhPSBudWxsKSBmaWxsaWQgPSBjZi5maWxsSWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNhZmVfZm9ybWF0KHAsIGZtdGlkLCBmaWxsaWQsIG9wdHMsIHRoZW1lcywgc3R5bGVzKTtcblx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMgJiYgZG9fZm9ybWF0ICYmIHAudCA9PSAnbicgJiYgU1NGLmlzX2RhdGUoU1NGLl90YWJsZVtmbXRpZF0pKSB7XG5cdFx0XHRcdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShwLnYpOyBpZihfZCkgeyBwLnQgPSAnZCc7IHAudiA9IG5ldyBEYXRlKERhdGUuVVRDKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpKTsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGRlbnNlKSB7XG5cdFx0XHRcdFx0dmFyIF9yID0gZGVjb2RlX2NlbGwodGFnLnIpO1xuXHRcdFx0XHRcdGlmKCFzW19yLnJdKSBzW19yLnJdID0gW107XG5cdFx0XHRcdFx0c1tfci5yXVtfci5jXSA9IHA7XG5cdFx0XHRcdH0gZWxzZSBzW3RhZy5yXSA9IHA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJvd3MubGVuZ3RoID4gMCkgc1snIXJvd3MnXSA9IHJvd3M7XG5cdH07IH0pKCk7XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3NfeG1sX2RhdGEod3MsIG9wdHMsIGlkeCwgd2IsIHJlbHMpIHtcblx0XHR2YXIgbyA9IFtdLCByID0gW10sIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSksIGNlbGwsIHJlZiwgcnIgPSBcIlwiLCBjb2xzID0gW10sIFI9MCwgQz0wLCByb3dzID0gd3NbJyFyb3dzJ107XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0Zm9yKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIGNvbHNbQ10gPSBlbmNvZGVfY29sKEMpO1xuXHRcdGZvcihSID0gcmFuZ2Uucy5yOyBSIDw9IHJhbmdlLmUucjsgKytSKSB7XG5cdFx0XHRyID0gW107XG5cdFx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0XHRmb3IoQyA9IHJhbmdlLnMuYzsgQyA8PSByYW5nZS5lLmM7ICsrQykge1xuXHRcdFx0XHRyZWYgPSBjb2xzW0NdICsgcnI7XG5cdFx0XHRcdHZhciBfY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ106IHdzW3JlZl07XG5cdFx0XHRcdGlmKF9jZWxsID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZigoY2VsbCA9IHdyaXRlX3dzX3htbF9jZWxsKF9jZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiKSkgIT0gbnVsbCkgci5wdXNoKGNlbGwpO1xuXHRcdFx0fVxuXHRcdFx0aWYoci5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBwYXJhbXMgPSAoe3I6cnJ9KTtcblx0XHRcdFx0aWYocm93cyAmJiByb3dzW1JdKSB7XG5cdFx0XHRcdFx0dmFyIHJvdyA9IHJvd3NbUl07XG5cdFx0XHRcdFx0aWYocm93LmhpZGRlbikgcGFyYW1zLmhpZGRlbiA9IDE7XG5cdFx0XHRcdFx0dmFyIGhlaWdodCA9IC0xO1xuXHRcdFx0XHRcdGlmIChyb3cuaHB4KSBoZWlnaHQgPSBweDJwdChyb3cuaHB4KTtcblx0XHRcdFx0XHRlbHNlIGlmIChyb3cuaHB0KSBoZWlnaHQgPSByb3cuaHB0O1xuXHRcdFx0XHRcdGlmIChoZWlnaHQgPiAtMSkgeyBwYXJhbXMuaHQgPSBoZWlnaHQ7IHBhcmFtcy5jdXN0b21IZWlnaHQgPSAxOyB9XG5cdFx0XHRcdH1cblx0XHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdyb3cnLCByLmpvaW4oXCJcIiksIHBhcmFtcykpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cblx0dmFyIFdTX1hNTF9ST09UID0gd3JpdGV4dGFnKCd3b3Jrc2hlZXQnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlMubWFpblswXSxcblx0XHQneG1sbnM6cic6IFhNTE5TLnJcblx0fSk7XG5cblx0ZnVuY3Rpb24gd3JpdGVfd3NfeG1sKGlkeCwgb3B0cywgd2IsIHJlbHMpIHtcblx0XHR2YXIgbyA9IFtYTUxfSEVBREVSLCBXU19YTUxfUk9PVF07XG5cdFx0dmFyIHMgPSB3Yi5TaGVldE5hbWVzW2lkeF0sIHNpZHggPSAwLCByZGF0YSA9IFwiXCI7XG5cdFx0dmFyIHdzID0gd2IuU2hlZXRzW3NdO1xuXHRcdGlmKHdzID09IG51bGwpIHdzID0ge307XG5cdFx0dmFyIHJlZiA9IHdzWychcmVmJ107IGlmKHJlZiA9PSBudWxsKSByZWYgPSAnQTEnO1xuXHRcdGlmKCFyZWxzKSByZWxzID0ge307XG5cdFx0d3NbJyFjb21tZW50cyddID0gW107XG5cdFx0d3NbJyFkcmF3aW5nJ10gPSBbXTtcblxuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc2hlZXRQcicsIG51bGwsIHsnY29kZU5hbWUnOiBlc2NhcGV4bWwod2IuU2hlZXROYW1lc1tpZHhdKX0pKTtcblxuXHRcdG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnZGltZW5zaW9uJywgbnVsbCwgeydyZWYnOiByZWZ9KSk7XG5cblx0XHRvW28ubGVuZ3RoXSA9IHdyaXRlX3dzX3htbF9zaGVldHZpZXdzKHdzLCBvcHRzLCBpZHgsIHdiKTtcblxuXHRcdC8qIFRPRE86IHN0b3JlIGluIFdCLCBwcm9jZXNzIHN0eWxlcyAqL1xuXHRcdGlmKG9wdHMuc2hlZXRGb3JtYXQpIG9bby5sZW5ndGhdID0gKHdyaXRleHRhZygnc2hlZXRGb3JtYXRQcicsIG51bGwsIHtkZWZhdWx0Um93SGVpZ2h0Om9wdHMuc2hlZXRGb3JtYXQuZGVmYXVsdFJvd0hlaWdodHx8JzE2JywgYmFzZUNvbFdpZHRoOm9wdHMuc2hlZXRGb3JtYXQuYmFzZUNvbFdpZHRofHwnMTAnIH0pKTtcblxuXHRcdGlmKHdzWychY29scyddICE9IG51bGwgJiYgd3NbJyFjb2xzJ10ubGVuZ3RoID4gMCkgb1tvLmxlbmd0aF0gPSAod3JpdGVfd3NfeG1sX2NvbHMod3MsIHdzWychY29scyddKSk7XG5cblx0XHRvW3NpZHggPSBvLmxlbmd0aF0gPSAnPHNoZWV0RGF0YS8+Jztcblx0XHR3c1snIWxpbmtzJ10gPSBbXTtcblx0XHRpZih3c1snIXJlZiddICE9IG51bGwpIHtcblx0XHRcdHJkYXRhID0gd3JpdGVfd3NfeG1sX2RhdGEod3MsIG9wdHMsIGlkeCwgd2IsIHJlbHMpO1xuXHRcdFx0aWYocmRhdGEubGVuZ3RoID4gMCkgb1tvLmxlbmd0aF0gPSAocmRhdGEpO1xuXHRcdH1cblx0XHRpZihvLmxlbmd0aD5zaWR4KzEpIHsgb1tvLmxlbmd0aF0gPSAoJzwvc2hlZXREYXRhPicpOyBvW3NpZHhdPW9bc2lkeF0ucmVwbGFjZShcIi8+XCIsXCI+XCIpOyB9XG5cblx0XHQvKiBzaGVldENhbGNQciAqL1xuXG5cdFx0aWYod3NbJyFwcm90ZWN0J10gIT0gbnVsbCkgb1tvLmxlbmd0aF0gPSB3cml0ZV93c194bWxfcHJvdGVjdGlvbih3c1snIXByb3RlY3QnXSk7XG5cblx0XHQvKiBwcm90ZWN0ZWRSYW5nZXMgKi9cblx0XHQvKiBzY2VuYXJpb3MgKi9cblxuXHRcdGlmKHdzWychYXV0b2ZpbHRlciddICE9IG51bGwpIG9bby5sZW5ndGhdID0gd3JpdGVfd3NfeG1sX2F1dG9maWx0ZXIod3NbJyFhdXRvZmlsdGVyJ10pO1xuXG5cdFx0Lyogc29ydFN0YXRlICovXG5cdFx0LyogZGF0YUNvbnNvbGlkYXRlICovXG5cdFx0LyogY3VzdG9tU2hlZXRWaWV3cyAqL1xuXG5cdFx0aWYod3NbJyFtZXJnZXMnXSAhPSBudWxsICYmIHdzWychbWVyZ2VzJ10ubGVuZ3RoID4gMCkgb1tvLmxlbmd0aF0gPSAod3JpdGVfd3NfeG1sX21lcmdlcyh3c1snIW1lcmdlcyddKSk7XG5cblx0XHQvKiBwaG9uZXRpY1ByICovXG5cdFx0LyogY29uZGl0aW9uYWxGb3JtYXR0aW5nICovXG5cdFx0LyogZGF0YVZhbGlkYXRpb25zICovXG5cblx0XHR2YXIgcmVsYyA9IC0xLCByZWwsIHJJZCA9IC0xO1xuXHRcdGlmKHdzWychbGlua3MnXS5sZW5ndGggPiAwKSB7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IFwiPGh5cGVybGlua3M+XCI7XG5cdFx0XHR3c1snIWxpbmtzJ10uZm9yRWFjaChmdW5jdGlvbihsKSB7XG5cdFx0XHRcdGlmKCFsWzFdLlRhcmdldCkgcmV0dXJuO1xuXHRcdFx0XHRySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgZXNjYXBleG1sKGxbMV0uVGFyZ2V0KS5yZXBsYWNlKC8jLiokLywgXCJcIiksIFJFTFMuSExJTkspO1xuXHRcdFx0XHRyZWwgPSAoe1wicmVmXCI6bFswXSwgXCJyOmlkXCI6XCJySWRcIitySWR9KTtcblx0XHRcdFx0aWYoKHJlbGMgPSBsWzFdLlRhcmdldC5pbmRleE9mKFwiI1wiKSkgPiAtMSkgcmVsLmxvY2F0aW9uID0gZXNjYXBleG1sKGxbMV0uVGFyZ2V0LnN1YnN0cihyZWxjKzEpKTtcblx0XHRcdFx0aWYobFsxXS5Ub29sdGlwKSByZWwudG9vbHRpcCA9IGVzY2FwZXhtbChsWzFdLlRvb2x0aXApO1xuXHRcdFx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZyhcImh5cGVybGlua1wiLG51bGwscmVsKTtcblx0XHRcdH0pO1xuXHRcdFx0b1tvLmxlbmd0aF0gPSBcIjwvaHlwZXJsaW5rcz5cIjtcblx0XHR9XG5cdFx0ZGVsZXRlIHdzWychbGlua3MnXTtcblxuXHRcdC8qIHByaW50T3B0aW9ucyAqL1xuXHRcdGlmICh3c1snIW1hcmdpbnMnXSAhPSBudWxsKSBvW28ubGVuZ3RoXSA9ICB3cml0ZV93c194bWxfbWFyZ2lucyh3c1snIW1hcmdpbnMnXSk7XG5cdFx0LyogcGFnZVNldHVwICovXG5cblx0XHR2YXIgaGZpZHggPSBvLmxlbmd0aDtcblx0XHRvW28ubGVuZ3RoXSA9IFwiXCI7XG5cblx0XHQvKiByb3dCcmVha3MgKi9cblx0XHQvKiBjb2xCcmVha3MgKi9cblx0XHQvKiBjdXN0b21Qcm9wZXJ0aWVzICovXG5cdFx0LyogY2VsbFdhdGNoZXMgKi9cblx0XHQvKiBpZ25vcmVkRXJyb3JzICovXG5cdFx0Lyogc21hcnRUYWdzICovXG5cblx0XHRpZih3c1snIWRyYXdpbmcnXS5sZW5ndGggPiAwKSB7XG5cdFx0XHRySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgXCIuLi9kcmF3aW5ncy9kcmF3aW5nXCIgKyAoaWR4KzEpICsgXCIueG1sXCIsIFJFTFMuRFJBVyk7XG5cdFx0XHR3c1snIWRyYXdpbmcnXS5yaWQgPSBySWQ7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZyhcImRyYXdpbmdcIiwgbnVsbCwge1wicjppZFwiOlwicklkXCIgKyBySWR9KTtcblx0XHR9XG5cdFx0ZWxzZSBkZWxldGUgd3NbJyFkcmF3aW5nJ107XG5cblx0XHRpZih3c1snIWNvbW1lbnRzJ10ubGVuZ3RoID4gMCkge1xuXHRcdFx0cklkID0gYWRkX3JlbHMocmVscywgLTEsIFwiLi4vZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKGlkeCsxKSArIFwiLnZtbFwiLCBSRUxTLlZNTCk7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZyhcImxlZ2FjeURyYXdpbmdcIiwgbnVsbCwge1wicjppZFwiOlwicklkXCIgKyBySWR9KTtcblx0XHRcdHdzWychbGVnYWN5J10gPSBySWQ7XG5cdFx0fVxuXG5cdFx0LyogZHJhd2luZ0hGICovXG5cdFx0LyogcGljdHVyZSAqL1xuXHRcdC8qIG9sZU9iamVjdHMgKi9cblx0XHQvKiBjb250cm9scyAqL1xuXHRcdC8qIHdlYlB1Ymxpc2hJdGVtcyAqL1xuXHRcdC8qIHRhYmxlUGFydHMgKi9cblx0XHQvKiBleHRMaXN0ICovXG5cblx0XHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L3dvcmtzaGVldD4nKTsgb1sxXT1vWzFdLnJlcGxhY2UoXCIvPlwiLFwiPlwiKTsgfVxuXHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjcxOCBCcnRSb3dIZHIgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0Um93SGRyKGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciB6ID0gKHt9KTtcblx0XHR2YXIgdGd0ID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRcdHouciA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHRkYXRhLmwgKz0gNDsgLy8gVE9ETzogaXhmZVxuXHRcdHZhciBtaXlSdyA9IGRhdGEucmVhZF9zaGlmdCgyKTtcblx0XHRkYXRhLmwgKz0gMTsgLy8gVE9ETzogdG9wL2JvdCBwYWRkaW5nXG5cdFx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDEpO1xuXHRcdGRhdGEubCA9IHRndDtcblx0XHRpZihmbGFncyAmIDB4MTApIHouaGlkZGVuID0gdHJ1ZTtcblx0XHRpZihmbGFncyAmIDB4MjApIHouaHB0ID0gbWl5UncgLyAyMDtcblx0XHRyZXR1cm4gejtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRSb3dIZHIoUiwgcmFuZ2UsIHdzKSB7XG5cdFx0dmFyIG8gPSBuZXdfYnVmKDE3KzgqMTYpO1xuXHRcdHZhciByb3cgPSAod3NbJyFyb3dzJ118fFtdKVtSXXx8e307XG5cdFx0by53cml0ZV9zaGlmdCg0LCBSKTtcblxuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8qIFRPRE86IGl4ZmUgKi9cblxuXHRcdHZhciBtaXlSdyA9IDB4MDE0MDtcblx0XHRpZihyb3cuaHB4KSBtaXlSdyA9IHB4MnB0KHJvdy5ocHgpICogMjA7XG5cdFx0ZWxzZSBpZihyb3cuaHB0KSBtaXlSdyA9IHJvdy5ocHQgKiAyMDtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIG1peVJ3KTtcblxuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMCk7IC8qIHRvcC9ib3QgcGFkZGluZyAqL1xuXG5cdFx0dmFyIGZsYWdzID0gMHgwO1xuXHRcdGlmKHJvdy5oaWRkZW4pIGZsYWdzIHw9IDB4MTA7XG5cdFx0aWYocm93LmhweCB8fCByb3cuaHB0KSBmbGFncyB8PSAweDIwO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgZmxhZ3MpO1xuXG5cdFx0by53cml0ZV9zaGlmdCgxLCAwKTsgLyogcGhvbmV0aWMgZ3VpZGUgKi9cblxuXHRcdC8qIFtNUy1YTFNCXSAyLjUuOCBCcnRDb2xTcGFuIGV4cGxhaW5zIHRoZSBtZWNoYW5pc20gKi9cblx0XHR2YXIgbmNvbHNwYW4gPSAwLCBsY3MgPSBvLmw7XG5cdFx0by5sICs9IDQ7XG5cblx0XHR2YXIgY2FkZHIgPSB7cjpSLCBjOjB9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG5cdFx0XHRpZihyYW5nZS5zLmMgPiAoKGkrMSkgPDwgMTApIHx8IHJhbmdlLmUuYyA8IChpIDw8IDEwKSkgY29udGludWU7XG5cdFx0XHR2YXIgZmlyc3QgPSAtMSwgbGFzdCA9IC0xO1xuXHRcdFx0Zm9yKHZhciBqID0gKGk8PDEwKTsgaiA8ICgoaSsxKTw8MTApOyArK2opIHtcblx0XHRcdFx0Y2FkZHIuYyA9IGo7XG5cdFx0XHRcdHZhciBjZWxsID0gQXJyYXkuaXNBcnJheSh3cykgPyAod3NbY2FkZHIucl18fFtdKVtjYWRkci5jXSA6IHdzW2VuY29kZV9jZWxsKGNhZGRyKV07XG5cdFx0XHRcdGlmKGNlbGwpIHsgaWYoZmlyc3QgPCAwKSBmaXJzdCA9IGo7IGxhc3QgPSBqOyB9XG5cdFx0XHR9XG5cdFx0XHRpZihmaXJzdCA8IDApIGNvbnRpbnVlO1xuXHRcdFx0KytuY29sc3Bhbjtcblx0XHRcdG8ud3JpdGVfc2hpZnQoNCwgZmlyc3QpO1xuXHRcdFx0by53cml0ZV9zaGlmdCg0LCBsYXN0KTtcblx0XHR9XG5cblx0XHR2YXIgbCA9IG8ubDtcblx0XHRvLmwgPSBsY3M7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBuY29sc3Bhbik7XG5cdFx0by5sID0gbDtcblxuXHRcdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfcm93X2hlYWRlcihiYSwgd3MsIHJhbmdlLCBSKSB7XG5cdFx0dmFyIG8gPSB3cml0ZV9CcnRSb3dIZHIoUiwgcmFuZ2UsIHdzKTtcblx0XHRpZihvLmxlbmd0aCA+IDE3KSB3cml0ZV9yZWNvcmQoYmEsICdCcnRSb3dIZHInLCBvKTtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuODEyIEJydFdzRGltICovXG5cdHZhciBwYXJzZV9CcnRXc0RpbSA9IHBhcnNlX1VuY2hlY2tlZFJmWDtcblx0dmFyIHdyaXRlX0JydFdzRGltID0gd3JpdGVfVW5jaGVja2VkUmZYO1xuXG5cdC8qIFtNUy1YTFNCXSAyLjQuODEzIEJydFdzRm10SW5mbyAqL1xuXHQvL2Z1bmN0aW9uIHdyaXRlX0JydFdzRm10SW5mbyh3cywgbykgeyB9XG5cblx0LyogW01TLVhMU0JdIDIuNC44MTUgQnJ0V3NQcm9wICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydFdzUHJvcChkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgeiA9IHt9O1xuXHRcdC8qIFRPRE86IHB1bGwgZmxhZ3MgKi9cblx0XHRkYXRhLmwgKz0gMTk7XG5cdFx0ei5uYW1lID0gcGFyc2VfWExTQkNvZGVOYW1lKGRhdGEsIGxlbmd0aCAtIDE5KTtcblx0XHRyZXR1cm4gejtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRXc1Byb3Aoc3RyLCBvKSB7XG5cdFx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1Zig4NCs0KnN0ci5sZW5ndGgpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCAzOyArK2kpIG8ud3JpdGVfc2hpZnQoMSwwKTtcblx0XHR3cml0ZV9CcnRDb2xvcih7YXV0bzoxfSwgbyk7XG5cdFx0by53cml0ZV9zaGlmdCgtNCwtMSk7XG5cdFx0by53cml0ZV9zaGlmdCgtNCwtMSk7XG5cdFx0d3JpdGVfWExTQkNvZGVOYW1lKHN0ciwgbyk7XG5cdFx0cmV0dXJuIG8uc2xpY2UoMCwgby5sKTtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuMzAzIEJydENlbGxCbGFuayAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRDZWxsQmxhbmsoZGF0YSwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0XHRyZXR1cm4gW2NlbGxdO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydENlbGxCbGFuayhjZWxsLCBuY2VsbCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOCk7XG5cdFx0cmV0dXJuIHdyaXRlX1hMU0JDZWxsKG5jZWxsLCBvKTtcblx0fVxuXG5cblx0LyogW01TLVhMU0JdIDIuNC4zMDQgQnJ0Q2VsbEJvb2wgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0Q2VsbEJvb2woZGF0YSwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0XHR2YXIgZkJvb2wgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0cmV0dXJuIFtjZWxsLCBmQm9vbCwgJ2InXTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRDZWxsQm9vbChjZWxsLCBuY2VsbCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoOSk7XG5cdFx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgY2VsbC52ID8gMSA6IDApO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4zMDUgQnJ0Q2VsbEVycm9yICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydENlbGxFcnJvcihkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRcdHZhciBiRXJyb3IgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0cmV0dXJuIFtjZWxsLCBiRXJyb3IsICdlJ107XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjMwOCBCcnRDZWxsSXNzdCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRDZWxsSXNzdChkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRcdHZhciBpc3N0ID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdHJldHVybiBbY2VsbCwgaXNzdCwgJ3MnXTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRDZWxsSXNzdChjZWxsLCBuY2VsbCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIpO1xuXHRcdHdyaXRlX1hMU0JDZWxsKG5jZWxsLCBvKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIG5jZWxsLnYpO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4zMTAgQnJ0Q2VsbFJlYWwgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0Q2VsbFJlYWwoZGF0YSwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0XHR2YXIgdmFsdWUgPSBwYXJzZV9YbnVtKGRhdGEpO1xuXHRcdHJldHVybiBbY2VsbCwgdmFsdWUsICduJ107XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbFJlYWwoY2VsbCwgbmNlbGwsIG8pIHtcblx0XHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDE2KTtcblx0XHR3cml0ZV9YTFNCQ2VsbChuY2VsbCwgbyk7XG5cdFx0d3JpdGVfWG51bShjZWxsLnYsIG8pO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4zMTEgQnJ0Q2VsbFJrICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydENlbGxSayhkYXRhLCBsZW5ndGgpIHtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRcdHZhciB2YWx1ZSA9IHBhcnNlX1JrTnVtYmVyKGRhdGEpO1xuXHRcdHJldHVybiBbY2VsbCwgdmFsdWUsICduJ107XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0Q2VsbFJrKGNlbGwsIG5jZWxsLCBvKSB7XG5cdFx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1ZigxMik7XG5cdFx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHRcdHdyaXRlX1JrTnVtYmVyKGNlbGwudiwgbyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuMzE0IEJydENlbGxTdCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRDZWxsU3QoZGF0YSwgbGVuZ3RoKSB7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0XHR2YXIgdmFsdWUgPSBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSk7XG5cdFx0cmV0dXJuIFtjZWxsLCB2YWx1ZSwgJ3N0ciddO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydENlbGxTdChjZWxsLCBuY2VsbCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTIgKyA0ICogY2VsbC52Lmxlbmd0aCk7XG5cdFx0d3JpdGVfWExTQkNlbGwobmNlbGwsIG8pO1xuXHRcdHdyaXRlX1hMV2lkZVN0cmluZyhjZWxsLnYsIG8pO1xuXHRcdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjY0NyBCcnRGbWxhQm9vbCAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRGbWxhQm9vbChkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRcdHZhciBjZWxsID0gcGFyc2VfWExTQkNlbGwoZGF0YSk7XG5cdFx0Y2VsbC5yID0gb3B0c1snIXJvdyddO1xuXHRcdHZhciB2YWx1ZSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgbyA9IFtjZWxsLCB2YWx1ZSwgJ2InXTtcblx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRkYXRhLmwgKz0gMjtcblx0XHRcdHZhciBmb3JtdWxhID0gcGFyc2VfWExTQkNlbGxQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0XHRvWzNdID0gc3RyaW5naWZ5X2Zvcm11bGEoZm9ybXVsYSwgbnVsbC8qcmFuZ2UqLywgY2VsbCwgb3B0cy5zdXBib29rcywgb3B0cyk7LyogVE9ETyAqL1xuXHRcdH1cblx0XHRlbHNlIGRhdGEubCA9IGVuZDtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuNjQ4IEJydEZtbGFFcnJvciAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRGbWxhRXJyb3IoZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRcdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0XHR2YXIgdmFsdWUgPSBkYXRhLnJlYWRfc2hpZnQoMSk7XG5cdFx0dmFyIG8gPSBbY2VsbCwgdmFsdWUsICdlJ107XG5cdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0ZGF0YS5sICs9IDI7XG5cdFx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JDZWxsUGFyc2VkRm9ybXVsYShkYXRhLCBlbmQgLSBkYXRhLmwsIG9wdHMpO1xuXHRcdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0XHR9XG5cdFx0ZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjY0OSBCcnRGbWxhTnVtICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydEZtbGFOdW0oZGF0YSwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGVuZCA9IGRhdGEubCArIGxlbmd0aDtcblx0XHR2YXIgY2VsbCA9IHBhcnNlX1hMU0JDZWxsKGRhdGEpO1xuXHRcdGNlbGwuciA9IG9wdHNbJyFyb3cnXTtcblx0XHR2YXIgdmFsdWUgPSBwYXJzZV9YbnVtKGRhdGEpO1xuXHRcdHZhciBvID0gW2NlbGwsIHZhbHVlLCAnbiddO1xuXHRcdGlmKG9wdHMuY2VsbEZvcm11bGEpIHtcblx0XHRcdGRhdGEubCArPSAyO1xuXHRcdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCQ2VsbFBhcnNlZEZvcm11bGEoZGF0YSwgZW5kIC0gZGF0YS5sLCBvcHRzKTtcblx0XHRcdG9bM10gPSBzdHJpbmdpZnlfZm9ybXVsYShmb3JtdWxhLCBudWxsLypyYW5nZSovLCBjZWxsLCBvcHRzLnN1cGJvb2tzLCBvcHRzKTsvKiBUT0RPICovXG5cdFx0fVxuXHRcdGVsc2UgZGF0YS5sID0gZW5kO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC42NTAgQnJ0Rm1sYVN0cmluZyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRGbWxhU3RyaW5nKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGNlbGwgPSBwYXJzZV9YTFNCQ2VsbChkYXRhKTtcblx0XHRjZWxsLnIgPSBvcHRzWychcm93J107XG5cdFx0dmFyIHZhbHVlID0gcGFyc2VfWExXaWRlU3RyaW5nKGRhdGEpO1xuXHRcdHZhciBvID0gW2NlbGwsIHZhbHVlLCAnc3RyJ107XG5cdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0ZGF0YS5sICs9IDI7XG5cdFx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JDZWxsUGFyc2VkRm9ybXVsYShkYXRhLCBlbmQgLSBkYXRhLmwsIG9wdHMpO1xuXHRcdFx0b1szXSA9IHN0cmluZ2lmeV9mb3JtdWxhKGZvcm11bGEsIG51bGwvKnJhbmdlKi8sIGNlbGwsIG9wdHMuc3VwYm9va3MsIG9wdHMpOy8qIFRPRE8gKi9cblx0XHR9XG5cdFx0ZWxzZSBkYXRhLmwgPSBlbmQ7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjY3NiBCcnRNZXJnZUNlbGwgKi9cblx0dmFyIHBhcnNlX0JydE1lcmdlQ2VsbCA9IHBhcnNlX1VuY2hlY2tlZFJmWDtcblx0dmFyIHdyaXRlX0JydE1lcmdlQ2VsbCA9IHdyaXRlX1VuY2hlY2tlZFJmWDtcblx0LyogW01TLVhMU0JdIDIuNC4xMDggQnJ0QmVnaW5NZXJnZUNlbGxzICovXG5cdGZ1bmN0aW9uIHdyaXRlX0JydEJlZ2luTWVyZ2VDZWxscyhjbnQsIG8pIHtcblx0XHRpZihvID09IG51bGwpIG8gPSBuZXdfYnVmKDQpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgY250KTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjQuNjU2IEJydEhMaW5rICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydEhMaW5rKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0dmFyIHJmeCA9IHBhcnNlX1VuY2hlY2tlZFJmWChkYXRhLCAxNik7XG5cdFx0dmFyIHJlbElkID0gcGFyc2VfWExOdWxsYWJsZVdpZGVTdHJpbmcoZGF0YSk7XG5cdFx0dmFyIGxvYyA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0XHR2YXIgdG9vbHRpcCA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0XHR2YXIgZGlzcGxheSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0XHRkYXRhLmwgPSBlbmQ7XG5cdFx0cmV0dXJuIHtyZng6cmZ4LCByZWxJZDpyZWxJZCwgbG9jOmxvYywgVG9vbHRpcDp0b29sdGlwLCBkaXNwbGF5OmRpc3BsYXl9O1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydEhMaW5rKGwsIHJJZCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNTArNCpsWzFdLlRhcmdldC5sZW5ndGgpO1xuXHRcdHdyaXRlX1VuY2hlY2tlZFJmWCh7czpkZWNvZGVfY2VsbChsWzBdKSwgZTpkZWNvZGVfY2VsbChsWzBdKX0sIG8pO1xuXHRcdHdyaXRlX1JlbElEKFwicklkXCIgKyBySWQsIG8pO1xuXHRcdHZhciBsb2NpZHggPSBsWzFdLlRhcmdldC5pbmRleE9mKFwiI1wiKTtcblx0XHR2YXIgbG9jID0gbG9jaWR4ID09IC0xID8gXCJcIiA6IGxbMV0uVGFyZ2V0LnN1YnN0cihsb2NpZHgrMSk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKGxvYyB8fCBcIlwiLCBvKTtcblx0XHR3cml0ZV9YTFdpZGVTdHJpbmcobFsxXS5Ub29sdGlwIHx8IFwiXCIsIG8pO1xuXHRcdHdyaXRlX1hMV2lkZVN0cmluZyhcIlwiLCBvKTtcblx0XHRyZXR1cm4gby5zbGljZSgwLCBvLmwpO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC42IEJydEFyckZtbGEgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0QXJyRm1sYShkYXRhLCBsZW5ndGgsIG9wdHMpIHtcblx0XHR2YXIgZW5kID0gZGF0YS5sICsgbGVuZ3RoO1xuXHRcdHZhciByZnggPSBwYXJzZV9SZlgoZGF0YSwgMTYpO1xuXHRcdHZhciBmQWx3YXlzQ2FsYyA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgbyA9IFtyZnhdOyBvWzJdID0gZkFsd2F5c0NhbGM7XG5cdFx0aWYob3B0cy5jZWxsRm9ybXVsYSkge1xuXHRcdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCQXJyYXlQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0XHRvWzFdID0gZm9ybXVsYTtcblx0XHR9IGVsc2UgZGF0YS5sID0gZW5kO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC43NDIgQnJ0U2hyRm1sYSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRTaHJGbWxhKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0dmFyIHJmeCA9IHBhcnNlX1VuY2hlY2tlZFJmWChkYXRhLCAxNik7XG5cdFx0dmFyIG8gPSBbcmZ4XTtcblx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHR2YXIgZm9ybXVsYSA9IHBhcnNlX1hMU0JTaGFyZWRQYXJzZWRGb3JtdWxhKGRhdGEsIGVuZCAtIGRhdGEubCwgb3B0cyk7XG5cdFx0XHRvWzFdID0gZm9ybXVsYTtcblx0XHRcdGRhdGEubCA9IGVuZDtcblx0XHR9IGVsc2UgZGF0YS5sID0gZW5kO1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4zMjMgQnJ0Q29sSW5mbyAqL1xuXHQvKiBUT0RPOiBvbmNlIFhMUyBDb2xJbmZvIGlzIHNldCwgY29tYmluZSB0aGUgZnVuY3Rpb25zICovXG5cdGZ1bmN0aW9uIHdyaXRlX0JydENvbEluZm8oQywgY29sLCBvKSB7XG5cdFx0aWYobyA9PSBudWxsKSBvID0gbmV3X2J1ZigxOCk7XG5cdFx0dmFyIHAgPSBjb2xfb2JqX3coQywgY29sKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCBDKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCBDKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIChwLndpZHRoIHx8IDEwKSAqIDI1Nik7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwLyppeGZlKi8pOyAvLyBzdHlsZVxuXHRcdHZhciBmbGFncyA9IDA7XG5cdFx0aWYoY29sLmhpZGRlbikgZmxhZ3MgfD0gMHgwMTtcblx0XHRpZih0eXBlb2YgcC53aWR0aCA9PSAnbnVtYmVyJykgZmxhZ3MgfD0gMHgwMjtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIGZsYWdzKTsgLy8gYml0IGZsYWdcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvLyBiaXQgZmxhZ1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC42NzIgQnJ0TWFyZ2lucyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnRNYXJnaW5zKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHJldHVybiB7XG5cdFx0XHRsZWZ0OiBwYXJzZV9YbnVtKGRhdGEsIDgpLFxuXHRcdFx0cmlnaHQ6IHBhcnNlX1hudW0oZGF0YSwgOCksXG5cdFx0XHR0b3A6IHBhcnNlX1hudW0oZGF0YSwgOCksXG5cdFx0XHRib3R0b206IHBhcnNlX1hudW0oZGF0YSwgOCksXG5cdFx0XHRoZWFkZXI6IHBhcnNlX1hudW0oZGF0YSwgOCksXG5cdFx0XHRmb290ZXI6IHBhcnNlX1hudW0oZGF0YSwgOClcblx0XHR9O1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydE1hcmdpbnMobWFyZ2lucywgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoNio4KTtcblx0XHRkZWZhdWx0X21hcmdpbnMobWFyZ2lucyk7XG5cdFx0d3JpdGVfWG51bShtYXJnaW5zLmxlZnQsIG8pO1xuXHRcdHdyaXRlX1hudW0obWFyZ2lucy5yaWdodCwgbyk7XG5cdFx0d3JpdGVfWG51bShtYXJnaW5zLnRvcCwgbyk7XG5cdFx0d3JpdGVfWG51bShtYXJnaW5zLmJvdHRvbSwgbyk7XG5cdFx0d3JpdGVfWG51bShtYXJnaW5zLmhlYWRlciwgbyk7XG5cdFx0d3JpdGVfWG51bShtYXJnaW5zLmZvb3Rlciwgbyk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjI5MiBCcnRCZWdpbldzVmlldyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CcnRCZWdpbldzVmlldyh3cywgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMzApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgOTI0KTsgLy8gYml0IGZsYWdcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7IC8vIHZpZXcgZmlyc3Qgcm93XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gdmlldyBmaXJzdCBjb2xcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApOyAvLyBncmlkbGluZSBjb2xvciBJQ1Zcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCgyLCAxMDApOyAvLyB6b29tIHNjYWxlXG5cdFx0by53cml0ZV9zaGlmdCgyLCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAwKTsgLy8gd29ya2Jvb2sgdmlldyBpZFxuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC43NDAgQnJ0U2hlZXRQcm90ZWN0aW9uICovXG5cdGZ1bmN0aW9uIHdyaXRlX0JydFNoZWV0UHJvdGVjdGlvbihzcCwgbykge1xuXHRcdGlmKG8gPT0gbnVsbCkgbyA9IG5ld19idWYoMTYqNCsyKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIHNwLnBhc3N3b3JkID8gY3J5cHRvX0NyZWF0ZVBhc3N3b3JkVmVyaWZpZXJfTWV0aG9kMShzcC5wYXNzd29yZCkgOiAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDEpOyAvLyB0aGlzIHJlY29yZCBzaG91bGQgbm90IGJlIHdyaXR0ZW4gaWYgbm8gcHJvdGVjdGlvblxuXHRcdFtcblx0XHRcdFtcIm9iamVjdHNcIiwgICAgICAgICAgICAgZmFsc2VdLCAvLyBmT2JqZWN0c1xuXHRcdFx0W1wic2NlbmFyaW9zXCIsICAgICAgICAgICBmYWxzZV0sIC8vIGZTY2VuYXJpb3Ncblx0XHRcdFtcImZvcm1hdENlbGxzXCIsICAgICAgICAgIHRydWVdLCAvLyBmRm9ybWF0Q2VsbHNcblx0XHRcdFtcImZvcm1hdENvbHVtbnNcIiwgICAgICAgIHRydWVdLCAvLyBmRm9ybWF0Q29sdW1uc1xuXHRcdFx0W1wiZm9ybWF0Um93c1wiLCAgICAgICAgICAgdHJ1ZV0sIC8vIGZGb3JtYXRSb3dzXG5cdFx0XHRbXCJpbnNlcnRDb2x1bW5zXCIsICAgICAgICB0cnVlXSwgLy8gZkluc2VydENvbHVtbnNcblx0XHRcdFtcImluc2VydFJvd3NcIiwgICAgICAgICAgIHRydWVdLCAvLyBmSW5zZXJ0Um93c1xuXHRcdFx0W1wiaW5zZXJ0SHlwZXJsaW5rc1wiLCAgICAgdHJ1ZV0sIC8vIGZJbnNlcnRIeXBlcmxpbmtzXG5cdFx0XHRbXCJkZWxldGVDb2x1bW5zXCIsICAgICAgICB0cnVlXSwgLy8gZkRlbGV0ZUNvbHVtbnNcblx0XHRcdFtcImRlbGV0ZVJvd3NcIiwgICAgICAgICAgIHRydWVdLCAvLyBmRGVsZXRlUm93c1xuXHRcdFx0W1wic2VsZWN0TG9ja2VkQ2VsbHNcIiwgICBmYWxzZV0sIC8vIGZTZWxMb2NrZWRDZWxsc1xuXHRcdFx0W1wic29ydFwiLCAgICAgICAgICAgICAgICAgdHJ1ZV0sIC8vIGZTb3J0XG5cdFx0XHRbXCJhdXRvRmlsdGVyXCIsICAgICAgICAgICB0cnVlXSwgLy8gZkF1dG9GaWx0ZXJcblx0XHRcdFtcInBpdm90VGFibGVzXCIsICAgICAgICAgIHRydWVdLCAvLyBmUGl2b3RUYWJsZXNcblx0XHRcdFtcInNlbGVjdFVubG9ja2VkQ2VsbHNcIiwgZmFsc2VdICAvLyBmU2VsVW5sb2NrZWRDZWxsc1xuXHRcdF0uZm9yRWFjaChmdW5jdGlvbihuKSB7XG5cdFx0XHRpZihuWzFdKSBvLndyaXRlX3NoaWZ0KDQsIHNwW25bMF1dICE9IG51bGwgJiYgIXNwW25bMF1dID8gMSA6IDApO1xuXHRcdFx0ZWxzZSAgICAgIG8ud3JpdGVfc2hpZnQoNCwgc3BbblswXV0gIT0gbnVsbCAmJiBzcFtuWzBdXSA/IDAgOiAxKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy42MSBXb3Jrc2hlZXQgKi9cblx0ZnVuY3Rpb24gcGFyc2Vfd3NfYmluKGRhdGEsIF9vcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0XHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdFx0dmFyIG9wdHMgPSBfb3B0cyB8fCB7fTtcblx0XHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRzLmRlbnNlID09IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblx0XHR2YXIgcyA9IG9wdHMuZGVuc2UgPyBbXSA6IHt9O1xuXG5cdFx0dmFyIHJlZjtcblx0XHR2YXIgcmVmZ3Vlc3MgPSB7czoge3I6MjAwMDAwMCwgYzoyMDAwMDAwfSwgZToge3I6MCwgYzowfSB9O1xuXG5cdFx0dmFyIHBhc3MgPSBmYWxzZSwgZW5kID0gZmFsc2U7XG5cdFx0dmFyIHJvdywgcCwgY2YsIFIsIEMsIGFkZHIsIHNzdHIsIHJyLCBjZWxsO1xuXHRcdHZhciBtZXJnZWNlbGxzID0gW107XG5cdFx0b3B0cy5iaWZmID0gMTI7XG5cdFx0b3B0c1snIXJvdyddID0gMDtcblxuXHRcdHZhciBhaSA9IDAsIGFmID0gZmFsc2U7XG5cblx0XHR2YXIgYXJyYXlfZm9ybXVsYWUgPSBbXTtcblx0XHR2YXIgc2hhcmVkX2Zvcm11bGFlID0ge307XG5cdFx0dmFyIHN1cGJvb2tzID0gKFtbXV0pO1xuXHRcdHN1cGJvb2tzLnNoYXJlZGYgPSBzaGFyZWRfZm9ybXVsYWU7XG5cdFx0c3VwYm9va3MuYXJyYXlmID0gYXJyYXlfZm9ybXVsYWU7XG5cdFx0c3VwYm9va3MuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXMgfHwgd2IuU2hlZXRzLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4Lm5hbWU7IH0pO1xuXHRcdG9wdHMuc3VwYm9va3MgPSBzdXBib29rcztcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgd2IuTmFtZXMubGVuZ3RoOyArK2kpIHN1cGJvb2tzWzBdW2krMV0gPSB3Yi5OYW1lc1tpXTtcblxuXHRcdHZhciBjb2xpbmZvID0gW10sIHJvd2luZm8gPSBbXTtcblx0XHR2YXIgZGVmd2lkdGggPSAwLCBkZWZoZWlnaHQgPSAwOyAvLyB0d2lwcyAvIE1EVyByZXNwZWN0aXZlbHlcblx0XHR2YXIgc2VlbmNvbCA9IGZhbHNlO1xuXG5cdFx0cmVjb3JkaG9wcGVyKGRhdGEsIGZ1bmN0aW9uIHdzX3BhcnNlKHZhbCwgUl9uLCBSVCkge1xuXHRcdFx0aWYoZW5kKSByZXR1cm47XG5cdFx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDAwOTQ6IC8qICdCcnRXc0RpbScgKi9cblx0XHRcdFx0XHRyZWYgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAwMDogLyogJ0JydFJvd0hkcicgKi9cblx0XHRcdFx0XHRyb3cgPSB2YWw7XG5cdFx0XHRcdFx0aWYob3B0cy5zaGVldFJvd3MgJiYgb3B0cy5zaGVldFJvd3MgPD0gcm93LnIpIGVuZD10cnVlO1xuXHRcdFx0XHRcdHJyID0gZW5jb2RlX3JvdyhSID0gcm93LnIpO1xuXHRcdFx0XHRcdG9wdHNbJyFyb3cnXSA9IHJvdy5yO1xuXHRcdFx0XHRcdGlmKHZhbC5oaWRkZW4gfHwgdmFsLmhwdCkge1xuXHRcdFx0XHRcdFx0aWYodmFsLmhwdCkgdmFsLmhweCA9IHB0MnB4KHZhbC5ocHQpO1xuXHRcdFx0XHRcdFx0cm93aW5mb1t2YWwucl0gPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMDAyOiAvKiAnQnJ0Q2VsbFJrJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDAwMzogLyogJ0JydENlbGxFcnJvcicgKi9cblx0XHRcdFx0Y2FzZSAweDAwMDQ6IC8qICdCcnRDZWxsQm9vbCcgKi9cblx0XHRcdFx0Y2FzZSAweDAwMDU6IC8qICdCcnRDZWxsUmVhbCcgKi9cblx0XHRcdFx0Y2FzZSAweDAwMDY6IC8qICdCcnRDZWxsU3QnICovXG5cdFx0XHRcdGNhc2UgMHgwMDA3OiAvKiAnQnJ0Q2VsbElzc3QnICovXG5cdFx0XHRcdGNhc2UgMHgwMDA4OiAvKiAnQnJ0Rm1sYVN0cmluZycgKi9cblx0XHRcdFx0Y2FzZSAweDAwMDk6IC8qICdCcnRGbWxhTnVtJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDAwQTogLyogJ0JydEZtbGFCb29sJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDAwQjogLyogJ0JydEZtbGFFcnJvcicgKi9cblx0XHRcdFx0XHRwID0gKHt0OnZhbFsyXX0pO1xuXHRcdFx0XHRcdHN3aXRjaCh2YWxbMl0pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ24nOiBwLnYgPSB2YWxbMV07IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAncyc6IHNzdHIgPSBzdHJzW3ZhbFsxXV07IHAudiA9IHNzdHIudDsgcC5yID0gc3N0ci5yOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2InOiBwLnYgPSB2YWxbMV0gPyB0cnVlIDogZmFsc2U7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZSc6IHAudiA9IHZhbFsxXTsgaWYob3B0cy5jZWxsVGV4dCAhPT0gZmFsc2UpIHAudyA9IEJFcnJbcC52XTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdzdHInOiBwLnQgPSAncyc7IHAudiA9IHV0ZjhyZWFkKHZhbFsxXSk7IGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZigoY2YgPSBzdHlsZXMuQ2VsbFhmW3ZhbFswXS5pU3R5bGVSZWZdKSkgc2FmZV9mb3JtYXQocCxjZi5pZm10LG51bGwsb3B0cywgdGhlbWVzLCBzdHlsZXMpO1xuXHRcdFx0XHRcdEMgPSB2YWxbMF0uYztcblx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCFzW1JdKSBzW1JdID0gW107IHNbUl1bQ10gPSBwOyB9XG5cdFx0XHRcdFx0ZWxzZSBzW2VuY29kZV9jb2woQykgKyBycl0gPSBwO1xuXHRcdFx0XHRcdGlmKG9wdHMuY2VsbEZvcm11bGEpIHtcblx0XHRcdFx0XHRcdGFmID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRmb3IoYWkgPSAwOyBhaSA8IGFycmF5X2Zvcm11bGFlLmxlbmd0aDsgKythaSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgYWlpID0gYXJyYXlfZm9ybXVsYWVbYWldO1xuXHRcdFx0XHRcdFx0XHRpZihyb3cuciA+PSBhaWlbMF0ucy5yICYmIHJvdy5yIDw9IGFpaVswXS5lLnIpXG5cdFx0XHRcdFx0XHRcdFx0aWYoQyA+PSBhaWlbMF0ucy5jICYmIEMgPD0gYWlpWzBdLmUuYykge1xuXHRcdFx0XHRcdFx0XHRcdFx0cC5GID0gZW5jb2RlX3JhbmdlKGFpaVswXSk7IGFmID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZighYWYgJiYgdmFsLmxlbmd0aCA+IDMpIHAuZiA9IHZhbFszXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYocmVmZ3Vlc3Mucy5yID4gcm93LnIpIHJlZmd1ZXNzLnMuciA9IHJvdy5yO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLnMuYyA+IEMpIHJlZmd1ZXNzLnMuYyA9IEM7XG5cdFx0XHRcdFx0aWYocmVmZ3Vlc3MuZS5yIDwgcm93LnIpIHJlZmd1ZXNzLmUuciA9IHJvdy5yO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuYyA8IEMpIHJlZmd1ZXNzLmUuYyA9IEM7XG5cdFx0XHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMgJiYgY2YgJiYgcC50ID09ICduJyAmJiBTU0YuaXNfZGF0ZShTU0YuX3RhYmxlW2NmLmlmbXRdKSkge1xuXHRcdFx0XHRcdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShwLnYpOyBpZihfZCkgeyBwLnQgPSAnZCc7IHAudiA9IG5ldyBEYXRlKERhdGUuVVRDKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpKTsgfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDAwMTogLyogJ0JydENlbGxCbGFuaycgKi9cblx0XHRcdFx0XHRpZighb3B0cy5zaGVldFN0dWJzKSBicmVhaztcblx0XHRcdFx0XHRwID0gKHt0Oid6Jyx2OnVuZGVmaW5lZH0pO1xuXHRcdFx0XHRcdEMgPSB2YWxbMF0uYztcblx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCFzW1JdKSBzW1JdID0gW107IHNbUl1bQ10gPSBwOyB9XG5cdFx0XHRcdFx0ZWxzZSBzW2VuY29kZV9jb2woQykgKyBycl0gPSBwO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLnMuciA+IHJvdy5yKSByZWZndWVzcy5zLnIgPSByb3cucjtcblx0XHRcdFx0XHRpZihyZWZndWVzcy5zLmMgPiBDKSByZWZndWVzcy5zLmMgPSBDO1xuXHRcdFx0XHRcdGlmKHJlZmd1ZXNzLmUuciA8IHJvdy5yKSByZWZndWVzcy5lLnIgPSByb3cucjtcblx0XHRcdFx0XHRpZihyZWZndWVzcy5lLmMgPCBDKSByZWZndWVzcy5lLmMgPSBDO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMEIwOiAvKiAnQnJ0TWVyZ2VDZWxsJyAqL1xuXHRcdFx0XHRcdG1lcmdlY2VsbHMucHVzaCh2YWwpOyBicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDFFRTogLyogJ0JydEhMaW5rJyAqL1xuXHRcdFx0XHRcdHZhciByZWwgPSByZWxzWychaWQnXVt2YWwucmVsSWRdO1xuXHRcdFx0XHRcdGlmKHJlbCkge1xuXHRcdFx0XHRcdFx0dmFsLlRhcmdldCA9IHJlbC5UYXJnZXQ7XG5cdFx0XHRcdFx0XHRpZih2YWwubG9jKSB2YWwuVGFyZ2V0ICs9IFwiI1wiK3ZhbC5sb2M7XG5cdFx0XHRcdFx0XHR2YWwuUmVsID0gcmVsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmb3IoUj12YWwucmZ4LnMucjtSPD12YWwucmZ4LmUucjsrK1IpIGZvcihDPXZhbC5yZngucy5jO0M8PXZhbC5yZnguZS5jOysrQykge1xuXHRcdFx0XHRcdFx0aWYob3B0cy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0XHRpZighc1tSXSkgc1tSXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRpZighc1tSXVtDXSkgc1tSXVtDXSA9IHt0Oid6Jyx2OnVuZGVmaW5lZH07XG5cdFx0XHRcdFx0XHRcdHNbUl1bQ10ubCA9IHZhbDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGFkZHIgPSBlbmNvZGVfY2VsbCh7YzpDLHI6Un0pO1xuXHRcdFx0XHRcdFx0XHRpZighc1thZGRyXSkgc1thZGRyXSA9IHt0Oid6Jyx2OnVuZGVmaW5lZH07XG5cdFx0XHRcdFx0XHRcdHNbYWRkcl0ubCA9IHZhbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAweDAxQUE6IC8qICdCcnRBcnJGbWxhJyAqL1xuXHRcdFx0XHRcdGlmKCFvcHRzLmNlbGxGb3JtdWxhKSBicmVhaztcblx0XHRcdFx0XHRhcnJheV9mb3JtdWxhZS5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0Y2VsbCA9IChvcHRzLmRlbnNlID8gc1tSXVtDXSA6IHNbZW5jb2RlX2NvbChDKSArIHJyXSk7XG5cdFx0XHRcdFx0Y2VsbC5mID0gc3RyaW5naWZ5X2Zvcm11bGEodmFsWzFdLCByZWZndWVzcywge3I6cm93LnIsIGM6Q30sIHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHRjZWxsLkYgPSBlbmNvZGVfcmFuZ2UodmFsWzBdKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDAxQUI6IC8qICdCcnRTaHJGbWxhJyAqL1xuXHRcdFx0XHRcdGlmKCFvcHRzLmNlbGxGb3JtdWxhKSBicmVhaztcblx0XHRcdFx0XHRzaGFyZWRfZm9ybXVsYWVbZW5jb2RlX2NlbGwodmFsWzBdLnMpXSA9IHZhbFsxXTtcblx0XHRcdFx0XHRjZWxsID0gKG9wdHMuZGVuc2UgPyBzW1JdW0NdIDogc1tlbmNvZGVfY29sKEMpICsgcnJdKTtcblx0XHRcdFx0XHRjZWxsLmYgPSBzdHJpbmdpZnlfZm9ybXVsYSh2YWxbMV0sIHJlZmd1ZXNzLCB7cjpyb3cuciwgYzpDfSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIGlkZW50aWNhbCB0byAnQ29sSW5mbycgaW4gWExTICovXG5cdFx0XHRcdGNhc2UgMHgwMDNDOiAvKiAnQnJ0Q29sSW5mbycgKi9cblx0XHRcdFx0XHRpZighb3B0cy5jZWxsU3R5bGVzKSBicmVhaztcblx0XHRcdFx0XHR3aGlsZSh2YWwuZSA+PSB2YWwucykge1xuXHRcdFx0XHRcdFx0Y29saW5mb1t2YWwuZS0tXSA9IHsgd2lkdGg6IHZhbC53LzI1NiwgaGlkZGVuOiAhISh2YWwuZmxhZ3MgJiAweDAxKSB9O1xuXHRcdFx0XHRcdFx0aWYoIXNlZW5jb2wpIHsgc2VlbmNvbCA9IHRydWU7IGZpbmRfbWR3X2NvbHcodmFsLncvMjU2KTsgfVxuXHRcdFx0XHRcdFx0cHJvY2Vzc19jb2woY29saW5mb1t2YWwuZSsxXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMEExOiAvKiAnQnJ0QmVnaW5BRmlsdGVyJyAqL1xuXHRcdFx0XHRcdHNbJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjplbmNvZGVfcmFuZ2UodmFsKSB9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMURDOiAvKiAnQnJ0TWFyZ2lucycgKi9cblx0XHRcdFx0XHRzWychbWFyZ2lucyddID0gdmFsO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIGNhc2UgJ0JydFVpZCcgKi9cblx0XHRcdFx0Y2FzZSAweDAwQUY6IC8qICdCcnRBRmlsdGVyRGF0ZUdyb3VwSXRlbScgKi9cblx0XHRcdFx0Y2FzZSAweDAyODQ6IC8qICdCcnRBY3RpdmVYJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI3MTogLyogJ0JydEJpZ05hbWUnICovXG5cdFx0XHRcdGNhc2UgMHgwMjMyOiAvKiAnQnJ0QmtIaW0nICovXG5cdFx0XHRcdGNhc2UgMHgwMThDOiAvKiAnQnJ0QnJrJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDQ1ODogLyogJ0JydENGSWNvbicgKi9cblx0XHRcdFx0Y2FzZSAweDA0N0E6IC8qICdCcnRDRlJ1bGVFeHQnICovXG5cdFx0XHRcdGNhc2UgMHgwMUQ3OiAvKiAnQnJ0Q0ZWTycgKi9cblx0XHRcdFx0Y2FzZSAweDA0MUE6IC8qICdCcnRDRlZPMTQnICovXG5cdFx0XHRcdGNhc2UgMHgwMjg5OiAvKiAnQnJ0Q2VsbElnbm9yZUVDJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDQ1MTogLyogJ0JydENlbGxJZ25vcmVFQzE0JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDAzMTogLyogJ0JydENlbGxNZXRhJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI0RDogLyogJ0JydENlbGxTbWFydFRhZ1Byb3BlcnR5JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI1RjogLyogJ0JydENlbGxXYXRjaCcgKi9cblx0XHRcdFx0Y2FzZSAweDAyMzQ6IC8qICdCcnRDb2xvcicgKi9cblx0XHRcdFx0Y2FzZSAweDA0MUY6IC8qICdCcnRDb2xvcjE0JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDBBODogLyogJ0JydENvbG9yRmlsdGVyJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDBBRTogLyogJ0JydEN1c3RvbUZpbHRlcicgKi9cblx0XHRcdFx0Y2FzZSAweDA0OUM6IC8qICdCcnRDdXN0b21GaWx0ZXIxNCcgKi9cblx0XHRcdFx0Y2FzZSAweDAxRjM6IC8qICdCcnREUmVmJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDA0MDogLyogJ0JydERWYWwnICovXG5cdFx0XHRcdGNhc2UgMHgwNDFEOiAvKiAnQnJ0RFZhbDE0JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDIyNjogLyogJ0JydERyYXdpbmcnICovXG5cdFx0XHRcdGNhc2UgMHgwMEFCOiAvKiAnQnJ0RHluYW1pY0ZpbHRlcicgKi9cblx0XHRcdFx0Y2FzZSAweDAwQTc6IC8qICdCcnRGaWx0ZXInICovXG5cdFx0XHRcdGNhc2UgMHgwNDk5OiAvKiAnQnJ0RmlsdGVyMTQnICovXG5cdFx0XHRcdGNhc2UgMHgwMEE5OiAvKiAnQnJ0SWNvbkZpbHRlcicgKi9cblx0XHRcdFx0Y2FzZSAweDA0OUQ6IC8qICdCcnRJY29uRmlsdGVyMTQnICovXG5cdFx0XHRcdGNhc2UgMHgwMjI3OiAvKiAnQnJ0TGVnYWN5RHJhd2luZycgKi9cblx0XHRcdFx0Y2FzZSAweDAyMjg6IC8qICdCcnRMZWdhY3lEcmF3aW5nSEYnICovXG5cdFx0XHRcdGNhc2UgMHgwMjk1OiAvKiAnQnJ0TGlzdFBhcnQnICovXG5cdFx0XHRcdGNhc2UgMHgwMjdGOiAvKiAnQnJ0T2xlT2JqZWN0JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDFERTogLyogJ0JydFBhZ2VTZXR1cCcgKi9cblx0XHRcdFx0Y2FzZSAweDAwOTc6IC8qICdCcnRQYW5lJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDIxOTogLyogJ0JydFBob25ldGljSW5mbycgKi9cblx0XHRcdFx0Y2FzZSAweDAxREQ6IC8qICdCcnRQcmludE9wdGlvbnMnICovXG5cdFx0XHRcdGNhc2UgMHgwMjE4OiAvKiAnQnJ0UmFuZ2VQcm90ZWN0aW9uJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDQ0RjogLyogJ0JydFJhbmdlUHJvdGVjdGlvbjE0JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDJBODogLyogJ0JydFJhbmdlUHJvdGVjdGlvbklzbycgKi9cblx0XHRcdFx0Y2FzZSAweDA0NTA6IC8qICdCcnRSYW5nZVByb3RlY3Rpb25Jc28xNCcgKi9cblx0XHRcdFx0Y2FzZSAweDA0MDA6IC8qICdCcnRSd0Rlc2NlbnQnICovXG5cdFx0XHRcdGNhc2UgMHgwMDk4OiAvKiAnQnJ0U2VsJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI5NzogLyogJ0JydFNoZWV0Q2FsY1Byb3AnICovXG5cdFx0XHRcdGNhc2UgMHgwMjE3OiAvKiAnQnJ0U2hlZXRQcm90ZWN0aW9uJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDJBNjogLyogJ0JydFNoZWV0UHJvdGVjdGlvbklzbycgKi9cblx0XHRcdFx0Y2FzZSAweDAxRjg6IC8qICdCcnRTbGMnICovXG5cdFx0XHRcdGNhc2UgMHgwNDEzOiAvKiAnQnJ0U3BhcmtsaW5lJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDFBQzogLyogJ0JydFRhYmxlJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDBBQTogLyogJ0JydFRvcDEwRmlsdGVyJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDAzMjogLyogJ0JydFZhbHVlTWV0YScgKi9cblx0XHRcdFx0Y2FzZSAweDA4MTY6IC8qICdCcnRXZWJFeHRlbnNpb24nICovXG5cdFx0XHRcdGNhc2UgMHgwMUU1OiAvKiAnQnJ0V3NGbXRJbmZvJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDQxNTogLyogJ0JydFdzRm10SW5mb0V4MTQnICovXG5cdFx0XHRcdGNhc2UgMHgwMDkzOiAvKiAnQnJ0V3NQcm9wJyAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMDIzOiAvKiAnQnJ0RlJUQmVnaW4nICovXG5cdFx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0XHRwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovIGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqLyBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKChSX258fFwiXCIpLmluZGV4T2YoXCJCZWdpblwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApey8qIGVtcHR5ICovfVxuXHRcdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0XHR9XG5cdFx0fSwgb3B0cyk7XG5cblx0XHRkZWxldGUgb3B0cy5zdXBib29rcztcblx0XHRkZWxldGUgb3B0c1snIXJvdyddO1xuXG5cdFx0aWYoIXNbXCIhcmVmXCJdICYmIChyZWZndWVzcy5zLnIgPCAyMDAwMDAwIHx8IHJlZiAmJiAocmVmLmUuciA+IDAgfHwgcmVmLmUuYyA+IDAgfHwgcmVmLnMuciA+IDAgfHwgcmVmLnMuYyA+IDApKSkgc1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmIHx8IHJlZmd1ZXNzKTtcblx0XHRpZihvcHRzLnNoZWV0Um93cyAmJiBzW1wiIXJlZlwiXSkge1xuXHRcdFx0dmFyIHRtcHJlZiA9IHNhZmVfZGVjb2RlX3JhbmdlKHNbXCIhcmVmXCJdKTtcblx0XHRcdGlmKG9wdHMuc2hlZXRSb3dzIDwgK3RtcHJlZi5lLnIpIHtcblx0XHRcdFx0dG1wcmVmLmUuciA9IG9wdHMuc2hlZXRSb3dzIC0gMTtcblx0XHRcdFx0aWYodG1wcmVmLmUuciA+IHJlZmd1ZXNzLmUucikgdG1wcmVmLmUuciA9IHJlZmd1ZXNzLmUucjtcblx0XHRcdFx0aWYodG1wcmVmLmUuciA8IHRtcHJlZi5zLnIpIHRtcHJlZi5zLnIgPSB0bXByZWYuZS5yO1xuXHRcdFx0XHRpZih0bXByZWYuZS5jID4gcmVmZ3Vlc3MuZS5jKSB0bXByZWYuZS5jID0gcmVmZ3Vlc3MuZS5jO1xuXHRcdFx0XHRpZih0bXByZWYuZS5jIDwgdG1wcmVmLnMuYykgdG1wcmVmLnMuYyA9IHRtcHJlZi5lLmM7XG5cdFx0XHRcdHNbXCIhZnVsbHJlZlwiXSA9IHNbXCIhcmVmXCJdO1xuXHRcdFx0XHRzW1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZSh0bXByZWYpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihtZXJnZWNlbGxzLmxlbmd0aCA+IDApIHNbXCIhbWVyZ2VzXCJdID0gbWVyZ2VjZWxscztcblx0XHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIHNbXCIhY29sc1wiXSA9IGNvbGluZm87XG5cdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBzW1wiIXJvd3NcIl0gPSByb3dpbmZvO1xuXHRcdHJldHVybiBzO1xuXHR9XG5cblx0LyogVE9ETzogc29tZXRoaW5nIHVzZWZ1bCAtLSB0aGlzIGlzIGEgc3R1YiAqL1xuXHRmdW5jdGlvbiB3cml0ZV93c19iaW5fY2VsbChiYSwgY2VsbCwgUiwgQywgb3B0cywgd3MpIHtcblx0XHRpZihjZWxsLnYgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFwiXCI7XG5cdFx0dmFyIHZ2ID0gXCJcIjsgdmFyIG9sZGRhdGUgPSBudWxsO1xuXHRcdHN3aXRjaChjZWxsLnQpIHtcblx0XHRcdGNhc2UgJ2InOiB2diA9IGNlbGwudiA/IFwiMVwiIDogXCIwXCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZCc6IC8vIG5vIEJydENlbGxEYXRlIDooXG5cdFx0XHRcdGNlbGwueiA9IGNlbGwueiB8fCBTU0YuX3RhYmxlWzE0XTtcblx0XHRcdFx0b2xkZGF0ZSA9IGNlbGwudjtcblx0XHRcdFx0Y2VsbC52ID0gZGF0ZW51bSgoY2VsbC52KSk7IGNlbGwudCA9ICduJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICduJzogY2FzZSAnZSc6IHZ2ID0gJycrY2VsbC52OyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHZ2ID0gY2VsbC52OyBicmVhaztcblx0XHR9XG5cdFx0dmFyIG8gPSAoe3I6UiwgYzpDfSk7XG5cdFx0LyogVE9ETzogY2VsbCBzdHlsZSAqL1xuXHRcdG8ucyA9IGdldF9jZWxsX3N0eWxlKG9wdHMuY2VsbFhmcywgY2VsbCwgb3B0cyk7XG5cdFx0aWYoY2VsbC5sKSB3c1snIWxpbmtzJ10ucHVzaChbZW5jb2RlX2NlbGwobyksIGNlbGwubF0pO1xuXHRcdGlmKGNlbGwuYykgd3NbJyFjb21tZW50cyddLnB1c2goW2VuY29kZV9jZWxsKG8pLCBjZWxsLmNdKTtcblx0XHRzd2l0Y2goY2VsbC50KSB7XG5cdFx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdFx0aWYob3B0cy5ib29rU1NUKSB7XG5cdFx0XHRcdFx0dnYgPSBnZXRfc3N0X2lkKG9wdHMuU3RyaW5ncywgKGNlbGwudikpO1xuXHRcdFx0XHRcdG8udCA9IFwic1wiOyBvLnYgPSB2djtcblx0XHRcdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q2VsbElzc3RcIiwgd3JpdGVfQnJ0Q2VsbElzc3QoY2VsbCwgbykpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG8udCA9IFwic3RyXCI7XG5cdFx0XHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxTdFwiLCB3cml0ZV9CcnRDZWxsU3QoY2VsbCwgbykpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGNhc2UgJ24nOlxuXHRcdFx0XHQvKiBUT0RPOiBkZXRlcm1pbmUgdGhyZXNob2xkIGZvciBSZWFsIHZzIFJLICovXG5cdFx0XHRcdGlmKGNlbGwudiA9PSAoY2VsbC52IHwgMCkgJiYgY2VsbC52ID4gLTEwMDAgJiYgY2VsbC52IDwgMTAwMCkgd3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxSa1wiLCB3cml0ZV9CcnRDZWxsUmsoY2VsbCwgbykpO1xuXHRcdFx0XHRlbHNlIHdyaXRlX3JlY29yZChiYSwgXCJCcnRDZWxsUmVhbFwiLCB3cml0ZV9CcnRDZWxsUmVhbChjZWxsLCBvKSk7XG5cdFx0XHRcdGlmKG9sZGRhdGUpIHsgY2VsbC50ID0gJ2QnOyBjZWxsLnYgPSBvbGRkYXRlOyB9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdGNhc2UgJ2InOlxuXHRcdFx0XHRvLnQgPSBcImJcIjtcblx0XHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxCb29sXCIsIHdyaXRlX0JydENlbGxCb29sKGNlbGwsIG8pKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSAnZSc6IC8qIFRPRE86IGVycm9yICovIG8udCA9IFwiZVwiOyBicmVhaztcblx0XHR9XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydENlbGxCbGFua1wiLCB3cml0ZV9CcnRDZWxsQmxhbmsoY2VsbCwgbykpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfQ0VMTFRBQkxFKGJhLCB3cywgaWR4LCBvcHRzLCB3Yikge1xuXHRcdHZhciByYW5nZSA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10gfHwgXCJBMVwiKSwgcmVmLCByciA9IFwiXCIsIGNvbHMgPSBbXTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsICdCcnRCZWdpblNoZWV0RGF0YScpO1xuXHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdFx0cnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdFx0LyogW0FDQ0VMTFRBQkxFXSAqL1xuXHRcdFx0LyogQnJ0Um93SGRyICovXG5cdFx0XHR3cml0ZV9yb3dfaGVhZGVyKGJhLCB3cywgcmFuZ2UsIFIpO1xuXHRcdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdC8qICoxNjM4NENFTEwgKi9cblx0XHRcdFx0aWYoUiA9PT0gcmFuZ2Uucy5yKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdFx0cmVmID0gY29sc1tDXSArIHJyO1xuXHRcdFx0XHR2YXIgY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tyZWZdO1xuXHRcdFx0XHRpZighY2VsbCkgY29udGludWU7XG5cdFx0XHRcdC8qIHdyaXRlIGNlbGwgKi9cblx0XHRcdFx0d3JpdGVfd3NfYmluX2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMsIHdzKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCAnQnJ0RW5kU2hlZXREYXRhJyk7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9NRVJHRUNFTExTKGJhLCB3cykge1xuXHRcdGlmKCF3cyB8fCAhd3NbJyFtZXJnZXMnXSkgcmV0dXJuO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgJ0JydEJlZ2luTWVyZ2VDZWxscycsIHdyaXRlX0JydEJlZ2luTWVyZ2VDZWxscyh3c1snIW1lcmdlcyddLmxlbmd0aCkpO1xuXHRcdHdzWychbWVyZ2VzJ10uZm9yRWFjaChmdW5jdGlvbihtKSB7IHdyaXRlX3JlY29yZChiYSwgJ0JydE1lcmdlQ2VsbCcsIHdyaXRlX0JydE1lcmdlQ2VsbChtKSk7IH0pO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgJ0JydEVuZE1lcmdlQ2VsbHMnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0NPTElORk9TKGJhLCB3cywgaWR4LCBvcHRzLCB3Yikge1xuXHRcdGlmKCF3cyB8fCAhd3NbJyFjb2xzJ10pIHJldHVybjtcblx0XHR3cml0ZV9yZWNvcmQoYmEsICdCcnRCZWdpbkNvbEluZm9zJyk7XG5cdFx0d3NbJyFjb2xzJ10uZm9yRWFjaChmdW5jdGlvbihtLCBpKSB7IGlmKG0pIHdyaXRlX3JlY29yZChiYSwgJ0JydENvbEluZm8nLCB3cml0ZV9CcnRDb2xJbmZvKGksIG0pKTsgfSk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCAnQnJ0RW5kQ29sSW5mb3MnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0hMSU5LUyhiYSwgd3MsIHJlbHMpIHtcblx0XHQvKiAqQnJ0SExpbmsgKi9cblx0XHR3c1snIWxpbmtzJ10uZm9yRWFjaChmdW5jdGlvbihsKSB7XG5cdFx0XHRpZighbFsxXS5UYXJnZXQpIHJldHVybjtcblx0XHRcdHZhciBySWQgPSBhZGRfcmVscyhyZWxzLCAtMSwgbFsxXS5UYXJnZXQucmVwbGFjZSgvIy4qJC8sIFwiXCIpLCBSRUxTLkhMSU5LKTtcblx0XHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRITGlua1wiLCB3cml0ZV9CcnRITGluayhsLCBySWQpKTtcblx0XHR9KTtcblx0XHRkZWxldGUgd3NbJyFsaW5rcyddO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0xFR0FDWURSQVdJTkcoYmEsIHdzLCBpZHgsIHJlbHMpIHtcblx0XHQvKiBbQnJ0TGVnYWN5RHJhd2luZ10gKi9cblx0XHRpZih3c1snIWNvbW1lbnRzJ10ubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIHJJZCA9IGFkZF9yZWxzKHJlbHMsIC0xLCBcIi4uL2RyYXdpbmdzL3ZtbERyYXdpbmdcIiArIChpZHgrMSkgKyBcIi52bWxcIiwgUkVMUy5WTUwpO1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydExlZ2FjeURyYXdpbmdcIiwgd3JpdGVfUmVsSUQoXCJySWRcIiArIHJJZCkpO1xuXHRcdFx0d3NbJyFsZWdhY3knXSA9IHJJZDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9BVVRPRklMVEVSKGJhLCB3cykge1xuXHRcdGlmKCF3c1snIWF1dG9maWx0ZXInXSkgcmV0dXJuO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCZWdpbkFGaWx0ZXJcIiwgd3JpdGVfVW5jaGVja2VkUmZYKGRlY29kZV9yYW5nZSh3c1snIWF1dG9maWx0ZXInXS5yZWYpKSk7XG5cdFx0LyogKkZJTFRFUkNPTFVNTiAqL1xuXHRcdC8qIFtTT1JUU1RBVEVdICovXG5cdFx0LyogQnJ0RW5kQUZpbHRlciAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRBRmlsdGVyXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfV1NWSUVXUzIoYmEsIHdzKSB7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luV3NWaWV3c1wiKTtcblx0XHR7IC8qIDEqV1NWSUVXMiAqL1xuXHRcdFx0LyogW0FDVUlEXSAqL1xuXHRcdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luV3NWaWV3XCIsIHdyaXRlX0JydEJlZ2luV3NWaWV3KHdzKSk7XG5cdFx0XHQvKiBbQnJ0UGFuZV0gKi9cblx0XHRcdC8qICo0QnJ0U2VsICovXG5cdFx0XHQvKiAqNFNYU0VMRUNUICovXG5cdFx0XHQvKiAqRlJUICovXG5cdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kV3NWaWV3XCIpO1xuXHRcdH1cblx0XHQvKiAqRlJUICovXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZFdzVmlld3NcIik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9XU0ZNVElORk8oYmEsIHdzKSB7XG5cdFx0LyogW0FDV1NGTVRJTkZPXSAqL1xuXHRcdC8vd3JpdGVfcmVjb3JkKGJhLCBcIkJydFdzRm10SW5mb1wiLCB3cml0ZV9CcnRXc0ZtdEluZm8od3MpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX1NIRUVUUFJPVEVDVChiYSwgd3MpIHtcblx0XHRpZighd3NbJyFwcm90ZWN0J10pIHJldHVybjtcblx0XHQvKiBbQnJ0U2hlZXRQcm90ZWN0aW9uSXNvXSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRTaGVldFByb3RlY3Rpb25cIiwgd3JpdGVfQnJ0U2hlZXRQcm90ZWN0aW9uKHdzWychcHJvdGVjdCddKSk7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93c19iaW4oaWR4LCBvcHRzLCB3YiwgcmVscykge1xuXHRcdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHRcdHZhciBzID0gd2IuU2hlZXROYW1lc1tpZHhdLCB3cyA9IHdiLlNoZWV0c1tzXSB8fCB7fTtcblx0XHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHdzWychcmVmJ10gfHwgXCJBMVwiKTtcblx0XHR3c1snIWxpbmtzJ10gPSBbXTtcblx0XHQvKiBwYXNzZWQgYmFjayB0byB3cml0ZV96aXAgYW5kIHJlbW92ZWQgdGhlcmUgKi9cblx0XHR3c1snIWNvbW1lbnRzJ10gPSBbXTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5TaGVldFwiKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0V3NQcm9wXCIsIHdyaXRlX0JydFdzUHJvcChzKSk7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydFdzRGltXCIsIHdyaXRlX0JydFdzRGltKHIpKTtcblx0XHR3cml0ZV9XU1ZJRVdTMihiYSwgd3MpO1xuXHRcdHdyaXRlX1dTRk1USU5GTyhiYSwgd3MpO1xuXHRcdHdyaXRlX0NPTElORk9TKGJhLCB3cywgaWR4LCBvcHRzLCB3Yik7XG5cdFx0d3JpdGVfQ0VMTFRBQkxFKGJhLCB3cywgaWR4LCBvcHRzLCB3Yik7XG5cdFx0LyogW0JydFNoZWV0Q2FsY1Byb3BdICovXG5cdFx0d3JpdGVfU0hFRVRQUk9URUNUKGJhLCB3cyk7XG5cdFx0LyogKihbQnJ0UmFuZ2VQcm90ZWN0aW9uSXNvXSBCcnRSYW5nZVByb3RlY3Rpb24pICovXG5cdFx0LyogW1NDRU5NQU5dICovXG5cdFx0d3JpdGVfQVVUT0ZJTFRFUihiYSwgd3MpO1xuXHRcdC8qIFtTT1JUU1RBVEVdICovXG5cdFx0LyogW0RDT05dICovXG5cdFx0LyogW1VTRVJTSFZJRVdTXSAqL1xuXHRcdHdyaXRlX01FUkdFQ0VMTFMoYmEsIHdzKTtcblx0XHQvKiBbQnJ0UGhvbmV0aWNJbmZvXSAqL1xuXHRcdC8qICpDT05ESVRJT05BTEZPUk1BVFRJTkcgKi9cblx0XHQvKiBbRFZBTFNdICovXG5cdFx0d3JpdGVfSExJTktTKGJhLCB3cywgcmVscyk7XG5cdFx0LyogW0JydFByaW50T3B0aW9uc10gKi9cblx0XHRpZih3c1snIW1hcmdpbnMnXSkgd3JpdGVfcmVjb3JkKGJhLCBcIkJydE1hcmdpbnNcIiwgd3JpdGVfQnJ0TWFyZ2lucyh3c1snIW1hcmdpbnMnXSkpO1xuXHRcdC8qIFtCcnRQYWdlU2V0dXBdICovXG5cdFx0LyogW0hFQURFUkZPT1RFUl0gKi9cblx0XHQvKiBbUldCUktdICovXG5cdFx0LyogW0NPTEJSS10gKi9cblx0XHQvKiAqQnJ0QmlnTmFtZSAqL1xuXHRcdC8qIFtDRUxMV0FUQ0hFU10gKi9cblx0XHQvKiBbSUdOT1JFRUNTXSAqL1xuXHRcdC8qIFtTTUFSVFRBR1NdICovXG5cdFx0LyogW0JydERyYXdpbmddICovXG5cdFx0d3JpdGVfTEVHQUNZRFJBV0lORyhiYSwgd3MsIGlkeCwgcmVscyk7XG5cdFx0LyogW0JydExlZ2FjeURyYXdpbmdIRl0gKi9cblx0XHQvKiBbQnJ0QmtIaW1dICovXG5cdFx0LyogW09MRU9CSkVDVFNdICovXG5cdFx0LyogW0FDVElWRVhDT05UUk9MU10gKi9cblx0XHQvKiBbV0VCUFVCSVRFTVNdICovXG5cdFx0LyogW0xJU1RQQVJUU10gKi9cblx0XHQvKiBGUlRXT1JLU0hFRVQgKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kU2hlZXRcIik7XG5cdFx0cmV0dXJuIGJhLmVuZCgpO1xuXHR9XG5cdGZ1bmN0aW9uIHBhcnNlX251bUNhY2hlKGRhdGEpIHtcblx0XHR2YXIgY29sID0gW107XG5cblx0XHQvKiAyMS4yLjIuMTUwIHB0IENUX051bVZhbCAqL1xuXHRcdChkYXRhLm1hdGNoKC88YzpwdCBpZHg9XCIoXFxkKilcIj4oLio/KTxcXC9jOnB0Pi9tZyl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHB0KSB7XG5cdFx0XHR2YXIgcSA9IHB0Lm1hdGNoKC88YzpwdCBpZHg9XCIoLio/KVwiPjxjOnY+KC4qKTxcXC9jOnY+PFxcL2M6cHQ+Lyk7XG5cdFx0XHRpZighcSkgcmV0dXJuO1xuXHRcdFx0Y29sWytxWzFdXSA9ICtxWzJdO1xuXHRcdH0pO1xuXG5cdFx0LyogMjEuMi4yLjcxIGZvcm1hdENvZGUgQ1RfWHN0cmluZyAqL1xuXHRcdHZhciBuZiA9IHVuZXNjYXBleG1sKChkYXRhLm1hdGNoKC88Yzpmb3JtYXRDb2RlPiguKj8pPFxcL2M6Zm9ybWF0Q29kZT4vKSB8fCBbXCJcIixcIkdlbmVyYWxcIl0pWzFdKTtcblxuXHRcdHJldHVybiBbY29sLCBuZl07XG5cdH1cblxuXHQvKiAyMS4yIERyYXdpbmdNTCAtIENoYXJ0cyAqL1xuXHRmdW5jdGlvbiBwYXJzZV9jaGFydChkYXRhLCBuYW1lLCBvcHRzLCByZWxzLCB3YiwgY3NoZWV0KSB7XG5cdFx0dmFyIGNzID0gKChjc2hlZXQgfHwge1wiIXR5cGVcIjpcImNoYXJ0XCJ9KSk7XG5cdFx0aWYoIWRhdGEpIHJldHVybiBjc2hlZXQ7XG5cdFx0LyogMjEuMi4yLjI3IGNoYXJ0IENUX0NoYXJ0ICovXG5cblx0XHR2YXIgQyA9IDAsIFIgPSAwLCBjb2wgPSBcIkFcIjtcblx0XHR2YXIgcmVmZ3Vlc3MgPSB7czoge3I6MjAwMDAwMCwgYzoyMDAwMDAwfSwgZToge3I6MCwgYzowfSB9O1xuXG5cdFx0LyogMjEuMi4yLjEyMCBudW1DYWNoZSBDVF9OdW1EYXRhICovXG5cdFx0KGRhdGEubWF0Y2goLzxjOm51bUNhY2hlPi4qPzxcXC9jOm51bUNhY2hlPi9nbSl8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKG5jKSB7XG5cdFx0XHR2YXIgY2FjaGUgPSBwYXJzZV9udW1DYWNoZShuYyk7XG5cdFx0XHRyZWZndWVzcy5zLnIgPSByZWZndWVzcy5zLmMgPSAwO1xuXHRcdFx0cmVmZ3Vlc3MuZS5jID0gQztcblx0XHRcdGNvbCA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHRjYWNoZVswXS5mb3JFYWNoKGZ1bmN0aW9uKG4saSkge1xuXHRcdFx0XHRjc1tjb2wgKyBlbmNvZGVfcm93KGkpXSA9IHt0OiduJywgdjpuLCB6OmNhY2hlWzFdIH07XG5cdFx0XHRcdFIgPSBpO1xuXHRcdFx0fSk7XG5cdFx0XHRpZihyZWZndWVzcy5lLnIgPCBSKSByZWZndWVzcy5lLnIgPSBSO1xuXHRcdFx0KytDO1xuXHRcdH0pO1xuXHRcdGlmKEMgPiAwKSBjc1tcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdHJldHVybiBjcztcblx0fVxuXHRSRUxTLkNTID0gXCJodHRwOi8vc2NoZW1hcy5vcGVueG1sZm9ybWF0cy5vcmcvb2ZmaWNlRG9jdW1lbnQvMjAwNi9yZWxhdGlvbnNoaXBzL2NoYXJ0c2hlZXRcIjtcblxuXHR2YXIgQ1NfWE1MX1JPT1QgPSB3cml0ZXh0YWcoJ2NoYXJ0c2hlZXQnLCBudWxsLCB7XG5cdFx0J3htbG5zJzogWE1MTlMubWFpblswXSxcblx0XHQneG1sbnM6cic6IFhNTE5TLnJcblx0fSk7XG5cblx0LyogMTguMyBXb3Jrc2hlZXRzIGFsc28gY292ZXJzIENoYXJ0c2hlZXRzICovXG5cdGZ1bmN0aW9uIHBhcnNlX2NzX3htbChkYXRhLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0XHRpZighZGF0YSkgcmV0dXJuIGRhdGE7XG5cdFx0LyogMTguMy4xLjEyIGNoYXJ0c2hlZXQgQ1RfQ2hhcnRTaGVldCAqL1xuXHRcdGlmKCFyZWxzKSByZWxzID0geychaWQnOnt9fTtcblx0XHR2YXIgcyA9IHsnIXR5cGUnOlwiY2hhcnRcIiwgJyFjaGFydCc6bnVsbCwgJyFyZWwnOlwiXCJ9O1xuXHRcdHZhciBtO1xuXG5cdFx0LyogMTguMy4xLjM2IGRyYXdpbmcgQ1RfRHJhd2luZyAqL1xuXHRcdGlmKChtID0gZGF0YS5tYXRjaCgvZHJhd2luZyByOmlkPVwiKC4qPylcIi8pKSkgc1snIXJlbCddID0gbVsxXTtcblxuXHRcdGlmKHJlbHNbJyFpZCddW3NbJyFyZWwnXV0pIHNbJyFjaGFydCddID0gcmVsc1snIWlkJ11bc1snIXJlbCddXTtcblx0XHRyZXR1cm4gcztcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9jc194bWwoaWR4LCBvcHRzLCB3YiwgcmVscykge1xuXHRcdHZhciBvID0gW1hNTF9IRUFERVIsIENTX1hNTF9ST09UXTtcblx0XHRvW28ubGVuZ3RoXSA9IHdyaXRleHRhZyhcImRyYXdpbmdcIiwgbnVsbCwge1wicjppZFwiOiBcInJJZDFcIn0pO1xuXHRcdGFkZF9yZWxzKHJlbHMsIC0xLCBcIi4uL2RyYXdpbmdzL2RyYXdpbmdcIiArIChpZHgrMSkgKyBcIi54bWxcIiwgUkVMUy5EUkFXKTtcblx0XHRpZihvLmxlbmd0aD4yKSB7IG9bby5sZW5ndGhdID0gKCc8L2NoYXJ0c2hlZXQ+Jyk7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuMS43LjcgQ2hhcnQgU2hlZXQgKi9cblx0ZnVuY3Rpb24gcGFyc2VfY3NfYmluKGRhdGEsIG9wdHMsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcykge1xuXHRcdGlmKCFkYXRhKSByZXR1cm4gZGF0YTtcblx0XHRpZighcmVscykgcmVscyA9IHsnIWlkJzp7fX07XG5cdFx0dmFyIHMgPSB7JyF0eXBlJzpcImNoYXJ0XCIsICchY2hhcnQnOm51bGwsICchcmVsJzpcIlwifTtcblx0XHR2YXIgc3RhdGUgPSBbXTtcblx0XHR2YXIgcGFzcyA9IGZhbHNlO1xuXHRcdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiBjc19wYXJzZSh2YWwsIFJfbiwgUlQpIHtcblx0XHRcdHN3aXRjaChSVCkge1xuXG5cdFx0XHRcdGNhc2UgMHgwMjI2OiAvKiAnQnJ0RHJhd2luZycgKi9cblx0XHRcdFx0XHRzWychcmVsJ10gPSB2YWw7IGJyZWFrO1xuXG5cdFx0XHRcdC8qIGNhc2UgJ0JydFVpZCc6ICovXG5cdFx0XHRcdGNhc2UgMHgwMjMyOiAvKiAnQnJ0QmtIaW0nICovXG5cdFx0XHRcdGNhc2UgMHgwMjhDOiAvKiAnQnJ0Q3NQYWdlU2V0dXAnICovXG5cdFx0XHRcdGNhc2UgMHgwMjhCOiAvKiAnQnJ0Q3NQcm9wJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI5RDogLyogJ0JydENzUHJvdGVjdGlvbicgKi9cblx0XHRcdFx0Y2FzZSAweDAyQTc6IC8qICdCcnRDc1Byb3RlY3Rpb25Jc28nICovXG5cdFx0XHRcdGNhc2UgMHgwMjI3OiAvKiAnQnJ0TGVnYWN5RHJhd2luZycgKi9cblx0XHRcdFx0Y2FzZSAweDAyMjg6IC8qICdCcnRMZWdhY3lEcmF3aW5nSEYnICovXG5cdFx0XHRcdGNhc2UgMHgwMURDOiAvKiAnQnJ0TWFyZ2lucycgKi9cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDAyMzogLyogJ0JydEZSVEJlZ2luJyAqL1xuXHRcdFx0XHRcdHBhc3MgPSB0cnVlOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjQ6IC8qICdCcnRGUlRFbmQnICovXG5cdFx0XHRcdFx0cGFzcyA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0Y2FzZSAweDAwMjU6IC8qICdCcnRBQ0JlZ2luJyAqL1xuXHRcdFx0XHRcdHN0YXRlLnB1c2goUl9uKTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMHgwMDI2OiAvKiAnQnJ0QUNFbmQnICovXG5cdFx0XHRcdFx0c3RhdGUucG9wKCk7IGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkJlZ2luXCIpID4gMCkgc3RhdGUucHVzaChSX24pO1xuXHRcdFx0XHRcdGVsc2UgaWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkVuZFwiKSA+IDApIHN0YXRlLnBvcCgpO1xuXHRcdFx0XHRcdGVsc2UgaWYoIXBhc3MgfHwgb3B0cy5XVEYpIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgcmVjb3JkIFwiICsgUlQgKyBcIiBcIiArIFJfbik7XG5cdFx0XHR9XG5cdFx0fSwgb3B0cyk7XG5cblx0XHRpZihyZWxzWychaWQnXVtzWychcmVsJ11dKSBzWychY2hhcnQnXSA9IHJlbHNbJyFpZCddW3NbJyFyZWwnXV07XG5cdFx0cmV0dXJuIHM7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfY3NfYmluKGlkeCwgb3B0cywgd2IsIHJlbHMpIHtcblx0XHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5TaGVldFwiKTtcblx0XHQvKiBbQnJ0Q3NQcm9wXSAqL1xuXHRcdC8qIENTVklFV1MgKi9cblx0XHQvKiBbW0JydENzUHJvdGVjdGlvbklzb10gQnJ0Q3NQcm90ZWN0aW9uXSAqL1xuXHRcdC8qIFtVU0VSQ1NWSUVXU10gKi9cblx0XHQvKiBbQnJ0TWFyZ2luc10gKi9cblx0XHQvKiBbQnJ0Q3NQYWdlU2V0dXBdICovXG5cdFx0LyogW0hFQURFUkZPT1RFUl0gKi9cblx0XHQvKiBCcnREcmF3aW5nICovXG5cdFx0LyogW0JydExlZ2FjeURyYXdpbmddICovXG5cdFx0LyogW0JydExlZ2FjeURyYXdpbmdIRl0gKi9cblx0XHQvKiBbQnJ0QmtIaW1dICovXG5cdFx0LyogW1dFQlBVQklURU1TXSAqL1xuXHRcdC8qIEZSVENIQVJUU0hFRVQgKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kU2hlZXRcIik7XG5cdFx0cmV0dXJuIGJhLmVuZCgpO1xuXHR9XG5cdC8qIDE4LjIuMjggKENUX1dvcmtib29rUHJvdGVjdGlvbikgRGVmYXVsdHMgKi9cblx0dmFyIFdCUHJvcHNEZWYgPSBbXG5cdFx0WydhbGxvd1JlZnJlc2hRdWVyeScsICcwJ10sXG5cdFx0WydhdXRvQ29tcHJlc3NQaWN0dXJlcycsICcxJ10sXG5cdFx0WydiYWNrdXBGaWxlJywgJzAnXSxcblx0XHRbJ2NoZWNrQ29tcGF0aWJpbGl0eScsICcwJ10sXG5cdFx0Wydjb2RlTmFtZScsICcnXSxcblx0XHRbJ2RhdGUxOTA0JywgJzAnXSxcblx0XHRbJ2RhdGVDb21wYXRpYmlsaXR5JywgJzEnXSxcblx0XHQvL1snZGVmYXVsdFRoZW1lVmVyc2lvbicsICcwJ10sXG5cdFx0WydmaWx0ZXJQcml2YWN5JywgJzAnXSxcblx0XHRbJ2hpZGVQaXZvdEZpZWxkTGlzdCcsICcwJ10sXG5cdFx0Wydwcm9tcHRlZFNvbHV0aW9ucycsICcwJ10sXG5cdFx0WydwdWJsaXNoSXRlbXMnLCAnMCddLFxuXHRcdFsncmVmcmVzaEFsbENvbm5lY3Rpb25zJywgZmFsc2VdLFxuXHRcdFsnc2F2ZUV4dGVybmFsTGlua1ZhbHVlcycsICcxJ10sXG5cdFx0WydzaG93Qm9yZGVyVW5zZWxlY3RlZFRhYmxlcycsICcxJ10sXG5cdFx0WydzaG93SW5rQW5ub3RhdGlvbicsICcxJ10sXG5cdFx0WydzaG93T2JqZWN0cycsICdhbGwnXSxcblx0XHRbJ3Nob3dQaXZvdENoYXJ0RmlsdGVyJywgJzAnXVxuXHRcdC8vWyd1cGRhdGVMaW5rcycsICd1c2VyU2V0J11cblx0XTtcblxuXHQvKiAxOC4yLjMwIChDVF9Cb29rVmlldykgRGVmYXVsdHMgKi9cblx0dmFyIFdCVmlld0RlZiA9IFtcblx0XHRbJ2FjdGl2ZVRhYicsICcwJ10sXG5cdFx0WydhdXRvRmlsdGVyRGF0ZUdyb3VwaW5nJywgJzEnXSxcblx0XHRbJ2ZpcnN0U2hlZXQnLCAnMCddLFxuXHRcdFsnbWluaW1pemVkJywgJzAnXSxcblx0XHRbJ3Nob3dIb3Jpem9udGFsU2Nyb2xsJywgJzEnXSxcblx0XHRbJ3Nob3dTaGVldFRhYnMnLCAnMSddLFxuXHRcdFsnc2hvd1ZlcnRpY2FsU2Nyb2xsJywgJzEnXSxcblx0XHRbJ3RhYlJhdGlvJywgJzYwMCddLFxuXHRcdFsndmlzaWJpbGl0eScsICd2aXNpYmxlJ11cblx0XHQvL3dpbmRvd3tIZWlnaHQsV2lkdGh9LCB7eCx5fVdpbmRvd1xuXHRdO1xuXG5cdC8qIDE4LjIuMTkgKENUX1NoZWV0KSBEZWZhdWx0cyAqL1xuXHR2YXIgU2hlZXREZWYgPSBbXG5cdFx0Ly9bJ3N0YXRlJywgJ3Zpc2libGUnXVxuXHRdO1xuXG5cdC8qIDE4LjIuMiAgKENUX0NhbGNQcikgRGVmYXVsdHMgKi9cblx0dmFyIENhbGNQckRlZiA9IFtcblx0XHRbJ2NhbGNDb21wbGV0ZWQnLCAndHJ1ZSddLFxuXHRcdFsnY2FsY01vZGUnLCAnYXV0byddLFxuXHRcdFsnY2FsY09uU2F2ZScsICd0cnVlJ10sXG5cdFx0Wydjb25jdXJyZW50Q2FsYycsICd0cnVlJ10sXG5cdFx0WydmdWxsQ2FsY09uTG9hZCcsICdmYWxzZSddLFxuXHRcdFsnZnVsbFByZWNpc2lvbicsICd0cnVlJ10sXG5cdFx0WydpdGVyYXRlJywgJ2ZhbHNlJ10sXG5cdFx0WydpdGVyYXRlQ291bnQnLCAnMTAwJ10sXG5cdFx0WydpdGVyYXRlRGVsdGEnLCAnMC4wMDEnXSxcblx0XHRbJ3JlZk1vZGUnLCAnQTEnXVxuXHRdO1xuXG5cdC8qIDE4LjIuMyAoQ1RfQ3VzdG9tV29ya2Jvb2tWaWV3KSBEZWZhdWx0cyAqL1xuXHR2YXIgQ3VzdG9tV0JWaWV3RGVmID0gW1xuXHRcdFsnYXV0b1VwZGF0ZScsICdmYWxzZSddLFxuXHRcdFsnY2hhbmdlc1NhdmVkV2luJywgJ2ZhbHNlJ10sXG5cdFx0WydpbmNsdWRlSGlkZGVuUm93Q29sJywgJ3RydWUnXSxcblx0XHRbJ2luY2x1ZGVQcmludFNldHRpbmdzJywgJ3RydWUnXSxcblx0XHRbJ21heGltaXplZCcsICdmYWxzZSddLFxuXHRcdFsnbWluaW1pemVkJywgJ2ZhbHNlJ10sXG5cdFx0Wydvbmx5U3luYycsICdmYWxzZSddLFxuXHRcdFsncGVyc29uYWxWaWV3JywgJ2ZhbHNlJ10sXG5cdFx0WydzaG93Q29tbWVudHMnLCAnY29tbUluZGljYXRvciddLFxuXHRcdFsnc2hvd0Zvcm11bGFCYXInLCAndHJ1ZSddLFxuXHRcdFsnc2hvd0hvcml6b250YWxTY3JvbGwnLCAndHJ1ZSddLFxuXHRcdFsnc2hvd09iamVjdHMnLCAnYWxsJ10sXG5cdFx0WydzaG93U2hlZXRUYWJzJywgJ3RydWUnXSxcblx0XHRbJ3Nob3dTdGF0dXNiYXInLCAndHJ1ZSddLFxuXHRcdFsnc2hvd1ZlcnRpY2FsU2Nyb2xsJywgJ3RydWUnXSxcblx0XHRbJ3RhYlJhdGlvJywgJzYwMCddLFxuXHRcdFsneFdpbmRvdycsICcwJ10sXG5cdFx0Wyd5V2luZG93JywgJzAnXVxuXHRdO1xuXG5cdGZ1bmN0aW9uIHB1c2hfZGVmYXVsdHNfYXJyYXkodGFyZ2V0LCBkZWZhdWx0cykge1xuXHRcdGZvcih2YXIgaiA9IDA7IGogIT0gdGFyZ2V0Lmxlbmd0aDsgKytqKSB7IHZhciB3ID0gdGFyZ2V0W2pdO1xuXHRcdFx0Zm9yKHZhciBpPTA7IGkgIT0gZGVmYXVsdHMubGVuZ3RoOyArK2kpIHsgdmFyIHogPSBkZWZhdWx0c1tpXTtcblx0XHRcdFx0aWYod1t6WzBdXSA9PSBudWxsKSB3W3pbMF1dID0gelsxXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gcHVzaF9kZWZhdWx0cyh0YXJnZXQsIGRlZmF1bHRzKSB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSAhPSBkZWZhdWx0cy5sZW5ndGg7ICsraSkgeyB2YXIgeiA9IGRlZmF1bHRzW2ldO1xuXHRcdFx0aWYodGFyZ2V0W3pbMF1dID09IG51bGwpIHRhcmdldFt6WzBdXSA9IHpbMV07XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2Vfd2JfZGVmYXVsdHMod2IpIHtcblx0XHRwdXNoX2RlZmF1bHRzKHdiLldCUHJvcHMsIFdCUHJvcHNEZWYpO1xuXHRcdHB1c2hfZGVmYXVsdHMod2IuQ2FsY1ByLCBDYWxjUHJEZWYpO1xuXG5cdFx0cHVzaF9kZWZhdWx0c19hcnJheSh3Yi5XQlZpZXcsIFdCVmlld0RlZik7XG5cdFx0cHVzaF9kZWZhdWx0c19hcnJheSh3Yi5TaGVldHMsIFNoZWV0RGVmKTtcblxuXHRcdF9zc2ZvcHRzLmRhdGUxOTA0ID0gcGFyc2V4bWxib29sKHdiLldCUHJvcHMuZGF0ZTE5MDQsICdkYXRlMTkwNCcpO1xuXHR9XG5cblx0dmFyIGJhZGNoYXJzID0gXCJdWyo/XFwvXFxcXFwiLnNwbGl0KFwiXCIpO1xuXHRmdW5jdGlvbiBjaGVja193c19uYW1lKG4sIHNhZmUpIHtcblx0XHRpZihuLmxlbmd0aCA+IDMxKSB7IGlmKHNhZmUpIHJldHVybiBmYWxzZTsgdGhyb3cgbmV3IEVycm9yKFwiU2hlZXQgbmFtZXMgY2Fubm90IGV4Y2VlZCAzMSBjaGFyc1wiKTsgfVxuXHRcdHZhciBfZ29vZCA9IHRydWU7XG5cdFx0YmFkY2hhcnMuZm9yRWFjaChmdW5jdGlvbihjKSB7XG5cdFx0XHRpZihuLmluZGV4T2YoYykgPT0gLTEpIHJldHVybjtcblx0XHRcdGlmKCFzYWZlKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBuYW1lIGNhbm5vdCBjb250YWluIDogXFxcXCAvID8gKiBbIF1cIik7XG5cdFx0XHRfZ29vZCA9IGZhbHNlO1xuXHRcdH0pO1xuXHRcdHJldHVybiBfZ29vZDtcblx0fVxuXHRmdW5jdGlvbiBjaGVja193Yl9uYW1lcyhOKSB7XG5cdFx0Ti5mb3JFYWNoKGZ1bmN0aW9uKG4saSkge1xuXHRcdFx0Y2hlY2tfd3NfbmFtZShuKTtcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpOyArK2opIGlmKG4gPT0gTltqXSkgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIFNoZWV0IE5hbWU6IFwiICsgbik7XG5cdFx0fSk7XG5cdH1cblx0ZnVuY3Rpb24gY2hlY2tfd2Iod2IpIHtcblx0XHRpZighd2IgfHwgIXdiLlNoZWV0TmFtZXMgfHwgIXdiLlNoZWV0cykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBXb3JrYm9va1wiKTtcblx0XHRjaGVja193Yl9uYW1lcyh3Yi5TaGVldE5hbWVzKTtcblx0XHQvKiBUT0RPOiB2YWxpZGF0ZSB3b3JrYm9vayAqL1xuXHR9XG5cdC8qIDE4LjIgV29ya2Jvb2sgKi9cblx0dmFyIHdibnNyZWdleCA9IC88XFx3Kzp3b3JrYm9vay87XG5cdGZ1bmN0aW9uIHBhcnNlX3diX3htbChkYXRhLCBvcHRzKSB7XG5cdFx0aWYoIWRhdGEpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGZpbGVcIik7XG5cdFx0dmFyIHdiID0geyBBcHBWZXJzaW9uOnt9LCBXQlByb3BzOnt9LCBXQlZpZXc6W10sIFNoZWV0czpbXSwgQ2FsY1ByOnt9LCBOYW1lczpbXSwgeG1sbnM6IFwiXCIgfTtcblx0XHR2YXIgcGFzcyA9IGZhbHNlLCB4bWxucyA9IFwieG1sbnNcIjtcblx0XHR2YXIgZG5hbWUgPSB7fSwgZG5zdGFydCA9IDA7XG5cdFx0LyooZGF0YS5tYXRjaCh0YWdyZWdleCl8fFtdKS5mb3JFYWNoICovXG5cdFx0ZGF0YS5yZXBsYWNlKHRhZ3JlZ2V4LCBmdW5jdGlvbiB4bWxfd2IoeCwgaWR4KSB7XG5cdFx0XHR2YXIgeSA9IHBhcnNleG1sdGFnKHgpO1xuXHRcdFx0c3dpdGNoKHN0cmlwX25zKHlbMF0pKSB7XG5cdFx0XHRcdGNhc2UgJzw/eG1sJzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi4yNyB3b3JrYm9vayBDVF9Xb3JrYm9vayAxICovXG5cdFx0XHRcdGNhc2UgJzx3b3JrYm9vayc6XG5cdFx0XHRcdFx0aWYoeC5tYXRjaCh3Ym5zcmVnZXgpKSB4bWxucyA9IFwieG1sbnNcIiArIHgubWF0Y2goLzwoXFx3Kyk6LylbMV07XG5cdFx0XHRcdFx0d2IueG1sbnMgPSB5W3htbG5zXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnPC93b3JrYm9vaz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjEzIGZpbGVWZXJzaW9uIENUX0ZpbGVWZXJzaW9uID8gKi9cblx0XHRcdFx0Y2FzZSAnPGZpbGVWZXJzaW9uJzogZGVsZXRlIHlbMF07IHdiLkFwcFZlcnNpb24gPSB5OyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPGZpbGVWZXJzaW9uLz4nOiBjYXNlICc8L2ZpbGVWZXJzaW9uPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMTIgZmlsZVNoYXJpbmcgQ1RfRmlsZVNoYXJpbmcgPyAqL1xuXHRcdFx0XHRjYXNlICc8ZmlsZVNoYXJpbmcnOiBjYXNlICc8ZmlsZVNoYXJpbmcvPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMjggd29ya2Jvb2tQciBDVF9Xb3JrYm9va1ByID8gKi9cblx0XHRcdFx0Y2FzZSAnPHdvcmtib29rUHInOiBkZWxldGUgeVswXTsgd2IuV0JQcm9wcyA9IHk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8d29ya2Jvb2tQci8+JzogZGVsZXRlIHlbMF07IHdiLldCUHJvcHMgPSB5OyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC93b3JrYm9va1ByPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMjkgd29ya2Jvb2tQcm90ZWN0aW9uIENUX1dvcmtib29rUHJvdGVjdGlvbiA/ICovXG5cdFx0XHRcdGNhc2UgJzx3b3JrYm9va1Byb3RlY3Rpb24nOiBicmVhaztcblx0XHRcdFx0Y2FzZSAnPHdvcmtib29rUHJvdGVjdGlvbi8+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi4xICBib29rVmlld3MgQ1RfQm9va1ZpZXdzID8gKi9cblx0XHRcdFx0Y2FzZSAnPGJvb2tWaWV3cz4nOiBjYXNlICc8L2Jvb2tWaWV3cz4nOiBicmVhaztcblx0XHRcdFx0LyogMTguMi4zMCAgIHdvcmtib29rVmlldyBDVF9Cb29rVmlldyArICovXG5cdFx0XHRcdGNhc2UgJzx3b3JrYm9va1ZpZXcnOiBkZWxldGUgeVswXTsgd2IuV0JWaWV3LnB1c2goeSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L3dvcmtib29rVmlldz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjIwIHNoZWV0cyBDVF9TaGVldHMgMSAqL1xuXHRcdFx0XHRjYXNlICc8c2hlZXRzPic6IGNhc2UgJzwvc2hlZXRzPic6IGJyZWFrOyAvLyBhZ2dyZWdhdGUgc2hlZXRcblx0XHRcdFx0LyogMTguMi4xOSAgIHNoZWV0IENUX1NoZWV0ICsgKi9cblx0XHRcdFx0Y2FzZSAnPHNoZWV0Jzpcblx0XHRcdFx0XHRzd2l0Y2goeS5zdGF0ZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSBcImhpZGRlblwiOiB5LkhpZGRlbiA9IDE7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSBcInZlcnlIaWRkZW5cIjogeS5IaWRkZW4gPSAyOyBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHkuSGlkZGVuID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVsZXRlIHkuc3RhdGU7XG5cdFx0XHRcdFx0eS5uYW1lID0gdW5lc2NhcGV4bWwodXRmOHJlYWQoeS5uYW1lKSk7XG5cdFx0XHRcdFx0ZGVsZXRlIHlbMF07IHdiLlNoZWV0cy5wdXNoKHkpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnPC9zaGVldD4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjE1IGZ1bmN0aW9uR3JvdXBzIENUX0Z1bmN0aW9uR3JvdXBzID8gKi9cblx0XHRcdFx0Y2FzZSAnPGZ1bmN0aW9uR3JvdXBzJzogY2FzZSAnPGZ1bmN0aW9uR3JvdXBzLz4nOiBicmVhaztcblx0XHRcdFx0LyogMTguMi4xNCAgIGZ1bmN0aW9uR3JvdXAgQ1RfRnVuY3Rpb25Hcm91cCArICovXG5cdFx0XHRcdGNhc2UgJzxmdW5jdGlvbkdyb3VwJzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi45ICBleHRlcm5hbFJlZmVyZW5jZXMgQ1RfRXh0ZXJuYWxSZWZlcmVuY2VzID8gKi9cblx0XHRcdFx0Y2FzZSAnPGV4dGVybmFsUmVmZXJlbmNlcyc6IGNhc2UgJzwvZXh0ZXJuYWxSZWZlcmVuY2VzPic6IGNhc2UgJzxleHRlcm5hbFJlZmVyZW5jZXM+JzogYnJlYWs7XG5cdFx0XHRcdC8qIDE4LjIuOCAgICBleHRlcm5hbFJlZmVyZW5jZSBDVF9FeHRlcm5hbFJlZmVyZW5jZSArICovXG5cdFx0XHRcdGNhc2UgJzxleHRlcm5hbFJlZmVyZW5jZSc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuNiAgZGVmaW5lZE5hbWVzIENUX0RlZmluZWROYW1lcyA/ICovXG5cdFx0XHRcdGNhc2UgJzxkZWZpbmVkTmFtZXMvPic6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8ZGVmaW5lZE5hbWVzPic6IGNhc2UgJzxkZWZpbmVkTmFtZXMnOiBwYXNzPXRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8L2RlZmluZWROYW1lcz4nOiBwYXNzPWZhbHNlOyBicmVhaztcblx0XHRcdFx0LyogMTguMi41ICAgIGRlZmluZWROYW1lIENUX0RlZmluZWROYW1lICsgKi9cblx0XHRcdFx0Y2FzZSAnPGRlZmluZWROYW1lJzoge1xuXHRcdFx0XHRcdGRuYW1lID0ge307XG5cdFx0XHRcdFx0ZG5hbWUuTmFtZSA9IHkubmFtZTtcblx0XHRcdFx0XHRpZih5LmNvbW1lbnQpIGRuYW1lLkNvbW1lbnQgPSB5LmNvbW1lbnQ7XG5cdFx0XHRcdFx0aWYoeS5sb2NhbFNoZWV0SWQpIGRuYW1lLlNoZWV0ID0gK3kubG9jYWxTaGVldElkO1xuXHRcdFx0XHRcdGRuc3RhcnQgPSBpZHggKyB4Lmxlbmd0aDtcblx0XHRcdFx0fVx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvZGVmaW5lZE5hbWU+Jzoge1xuXHRcdFx0XHRcdGRuYW1lLlJlZiA9IGRhdGEuc2xpY2UoZG5zdGFydCwgaWR4KTtcblx0XHRcdFx0XHR3Yi5OYW1lcy5wdXNoKGRuYW1lKTtcblx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0Y2FzZSAnPGRlZmluZWROYW1lLz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjIgIGNhbGNQciBDVF9DYWxjUHIgPyAqL1xuXHRcdFx0XHRjYXNlICc8Y2FsY1ByJzogZGVsZXRlIHlbMF07IHdiLkNhbGNQciA9IHk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8Y2FsY1ByLz4nOiBkZWxldGUgeVswXTsgd2IuQ2FsY1ByID0geTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvY2FsY1ByPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMTYgb2xlU2l6ZSBDVF9PbGVTaXplID8gKHJlZiByZXF1aXJlZCkgKi9cblx0XHRcdFx0Y2FzZSAnPG9sZVNpemUnOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjQgIGN1c3RvbVdvcmtib29rVmlld3MgQ1RfQ3VzdG9tV29ya2Jvb2tWaWV3cyA/ICovXG5cdFx0XHRcdGNhc2UgJzxjdXN0b21Xb3JrYm9va1ZpZXdzPic6IGNhc2UgJzwvY3VzdG9tV29ya2Jvb2tWaWV3cz4nOiBjYXNlICc8Y3VzdG9tV29ya2Jvb2tWaWV3cyc6IGJyZWFrO1xuXHRcdFx0XHQvKiAxOC4yLjMgICAgY3VzdG9tV29ya2Jvb2tWaWV3IENUX0N1c3RvbVdvcmtib29rVmlldyArICovXG5cdFx0XHRcdGNhc2UgJzxjdXN0b21Xb3JrYm9va1ZpZXcnOiBjYXNlICc8L2N1c3RvbVdvcmtib29rVmlldz4nOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjE4IHBpdm90Q2FjaGVzIENUX1Bpdm90Q2FjaGVzID8gKi9cblx0XHRcdFx0Y2FzZSAnPHBpdm90Q2FjaGVzPic6IGNhc2UgJzwvcGl2b3RDYWNoZXM+JzogY2FzZSAnPHBpdm90Q2FjaGVzJzogYnJlYWs7XG5cdFx0XHRcdC8qIDE4LjIuMTcgcGl2b3RDYWNoZSBDVF9QaXZvdENhY2hlID8gKi9cblx0XHRcdFx0Y2FzZSAnPHBpdm90Q2FjaGUnOiBicmVhaztcblxuXHRcdFx0XHQvKiAxOC4yLjIxIHNtYXJ0VGFnUHIgQ1RfU21hcnRUYWdQciA/ICovXG5cdFx0XHRcdGNhc2UgJzxzbWFydFRhZ1ByJzogY2FzZSAnPHNtYXJ0VGFnUHIvPic6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMjMgc21hcnRUYWdUeXBlcyBDVF9TbWFydFRhZ1R5cGVzID8gKi9cblx0XHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZXMnOiBjYXNlICc8c21hcnRUYWdUeXBlcz4nOiBjYXNlICc8L3NtYXJ0VGFnVHlwZXM+JzogYnJlYWs7XG5cdFx0XHRcdC8qIDE4LjIuMjIgICBzbWFydFRhZ1R5cGUgQ1RfU21hcnRUYWdUeXBlID8gKi9cblx0XHRcdFx0Y2FzZSAnPHNtYXJ0VGFnVHlwZSc6IGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE4LjIuMjQgd2ViUHVibGlzaGluZyBDVF9XZWJQdWJsaXNoaW5nID8gKi9cblx0XHRcdFx0Y2FzZSAnPHdlYlB1Ymxpc2hpbmcnOiBjYXNlICc8d2ViUHVibGlzaGluZy8+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi4xMSBmaWxlUmVjb3ZlcnlQciBDVF9GaWxlUmVjb3ZlcnlQciA/ICovXG5cdFx0XHRcdGNhc2UgJzxmaWxlUmVjb3ZlcnlQcic6IGNhc2UgJzxmaWxlUmVjb3ZlcnlQci8+JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi4yNiB3ZWJQdWJsaXNoT2JqZWN0cyBDVF9XZWJQdWJsaXNoT2JqZWN0cyA/ICovXG5cdFx0XHRcdGNhc2UgJzx3ZWJQdWJsaXNoT2JqZWN0cz4nOiBjYXNlICc8d2ViUHVibGlzaE9iamVjdHMnOiBjYXNlICc8L3dlYlB1Ymxpc2hPYmplY3RzPic6IGJyZWFrO1xuXHRcdFx0XHQvKiAxOC4yLjI1IHdlYlB1Ymxpc2hPYmplY3QgQ1RfV2ViUHVibGlzaE9iamVjdCA/ICovXG5cdFx0XHRcdGNhc2UgJzx3ZWJQdWJsaXNoT2JqZWN0JzogYnJlYWs7XG5cblx0XHRcdFx0LyogMTguMi4xMCBleHRMc3QgQ1RfRXh0ZW5zaW9uTGlzdCA/ICovXG5cdFx0XHRcdGNhc2UgJzxleHRMc3Q+JzogY2FzZSAnPC9leHRMc3Q+JzogY2FzZSAnPGV4dExzdC8+JzogYnJlYWs7XG5cdFx0XHRcdC8qIDE4LjIuNyAgICBleHQgQ1RfRXh0ZW5zaW9uICsgKi9cblx0XHRcdFx0Y2FzZSAnPGV4dCc6IHBhc3M9dHJ1ZTsgYnJlYWs7IC8vVE9ETzogY2hlY2sgd2l0aCB2ZXJzaW9ucyBvZiBleGNlbFxuXHRcdFx0XHRjYXNlICc8L2V4dD4nOiBwYXNzPWZhbHNlOyBicmVhaztcblxuXHRcdFx0XHQvKiBPdGhlcnMgKi9cblx0XHRcdFx0Y2FzZSAnPEFyY2hJRCc6IGJyZWFrO1xuXHRcdFx0XHRjYXNlICc8QWx0ZXJuYXRlQ29udGVudCc6IHBhc3M9dHJ1ZTsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgJzwvQWx0ZXJuYXRlQ29udGVudD4nOiBwYXNzPWZhbHNlOyBicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OiBpZighcGFzcyAmJiBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgJyArIHlbMF0gKyAnIGluIHdvcmtib29rJyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geDtcblx0XHR9KTtcblx0XHRpZihYTUxOUy5tYWluLmluZGV4T2Yod2IueG1sbnMpID09PSAtMSkgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBOYW1lc3BhY2U6IFwiICsgd2IueG1sbnMpO1xuXG5cdFx0cGFyc2Vfd2JfZGVmYXVsdHMod2IpO1xuXG5cdFx0cmV0dXJuIHdiO1xuXHR9XG5cblx0dmFyIFdCX1hNTF9ST09UID0gd3JpdGV4dGFnKCd3b3JrYm9vaycsIG51bGwsIHtcblx0XHQneG1sbnMnOiBYTUxOUy5tYWluWzBdLFxuXHRcdC8vJ3htbG5zOm14JzogWE1MTlMubXgsXG5cdFx0Ly8neG1sbnM6cyc6IFhNTE5TLm1haW5bMF0sXG5cdFx0J3htbG5zOnInOiBYTUxOUy5yXG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHNhZmUxOTA0KHdiKSB7XG5cdFx0LyogVE9ETzogc3RvcmUgZGF0ZTE5MDQgc29tZXdoZXJlIGVsc2UgKi9cblx0XHRpZighd2IuV29ya2Jvb2spIHJldHVybiBcImZhbHNlXCI7XG5cdFx0aWYoIXdiLldvcmtib29rLldCUHJvcHMpIHJldHVybiBcImZhbHNlXCI7XG5cdFx0Ly8gJEZsb3dJZ25vcmVcblx0XHRyZXR1cm4gcGFyc2V4bWxib29sKHdiLldvcmtib29rLldCUHJvcHMuZGF0ZTE5MDQpID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93Yl94bWwod2IsIG9wdHMpIHtcblx0XHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0XHRvW28ubGVuZ3RoXSA9IFdCX1hNTF9ST09UO1xuXG5cdFx0dmFyIHdyaXRlX25hbWVzID0gKHdiLldvcmtib29rICYmICh3Yi5Xb3JrYm9vay5OYW1lc3x8W10pLmxlbmd0aCA+IDApO1xuXG5cdFx0LyogZmlsZVZlcnNpb24gKi9cblx0XHQvKiBmaWxlU2hhcmluZyAqL1xuXG5cdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCd3b3JrYm9va1ByJywgbnVsbCwge2RhdGUxOTA0OnNhZmUxOTA0KHdiKSwgY29kZU5hbWU6XCJUaGlzV29ya2Jvb2tcIn0pKTtcblxuXHRcdC8qIHdvcmtib29rUHJvdGVjdGlvbiAqL1xuXHRcdC8qIGJvb2tWaWV3cyAqL1xuXG5cdFx0b1tvLmxlbmd0aF0gPSBcIjxzaGVldHM+XCI7XG5cdFx0dmFyIHNoZWV0cyA9IHdiLldvcmtib29rICYmIHdiLldvcmtib29rLlNoZWV0cyB8fCBbXTtcblx0XHRmb3IodmFyIGkgPSAwOyBpICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBzaHQgPSAoe25hbWU6ZXNjYXBleG1sKHdiLlNoZWV0TmFtZXNbaV0uc3Vic3RyKDAsMzEpKX0pO1xuXHRcdFx0c2h0LnNoZWV0SWQgPSBcIlwiKyhpKzEpO1xuXHRcdFx0c2h0W1wicjppZFwiXSA9IFwicklkXCIrKGkrMSk7XG5cdFx0XHRpZihzaGVldHNbaV0pIHN3aXRjaChzaGVldHNbaV0uSGlkZGVuKSB7XG5cdFx0XHRcdGNhc2UgMTogc2h0LnN0YXRlID0gXCJoaWRkZW5cIjsgYnJlYWs7XG5cdFx0XHRcdGNhc2UgMjogc2h0LnN0YXRlID0gXCJ2ZXJ5SGlkZGVuXCI7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0b1tvLmxlbmd0aF0gPSAod3JpdGV4dGFnKCdzaGVldCcsbnVsbCxzaHQpKTtcblx0XHR9XG5cdFx0b1tvLmxlbmd0aF0gPSBcIjwvc2hlZXRzPlwiO1xuXG5cdFx0LyogZnVuY3Rpb25Hcm91cHMgKi9cblx0XHQvKiBleHRlcm5hbFJlZmVyZW5jZXMgKi9cblxuXHRcdGlmKHdyaXRlX25hbWVzKSB7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IFwiPGRlZmluZWROYW1lcz5cIjtcblx0XHRcdGlmKHdiLldvcmtib29rICYmIHdiLldvcmtib29rLk5hbWVzKSB3Yi5Xb3JrYm9vay5OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcblx0XHRcdFx0dmFyIGQgPSB7bmFtZTpuLk5hbWV9O1xuXHRcdFx0XHRpZihuLkNvbW1lbnQpIGQuY29tbWVudCA9IG4uQ29tbWVudDtcblx0XHRcdFx0aWYobi5TaGVldCAhPSBudWxsKSBkLmxvY2FsU2hlZXRJZCA9IFwiXCIrbi5TaGVldDtcblx0XHRcdFx0aWYoIW4uUmVmKSByZXR1cm47XG5cdFx0XHRcdG9bby5sZW5ndGhdID0gd3JpdGV4dGFnKCdkZWZpbmVkTmFtZScsIFN0cmluZyhuLlJlZiksIGQpO1xuXHRcdFx0fSk7XG5cdFx0XHRvW28ubGVuZ3RoXSA9IFwiPC9kZWZpbmVkTmFtZXM+XCI7XG5cdFx0fVxuXG5cdFx0LyogY2FsY1ByICovXG5cdFx0Lyogb2xlU2l6ZSAqL1xuXHRcdC8qIGN1c3RvbVdvcmtib29rVmlld3MgKi9cblx0XHQvKiBwaXZvdENhY2hlcyAqL1xuXHRcdC8qIHNtYXJ0VGFnUHIgKi9cblx0XHQvKiBzbWFydFRhZ1R5cGVzICovXG5cdFx0Lyogd2ViUHVibGlzaGluZyAqL1xuXHRcdC8qIGZpbGVSZWNvdmVyeVByICovXG5cdFx0Lyogd2ViUHVibGlzaE9iamVjdHMgKi9cblx0XHQvKiBleHRMc3QgKi9cblxuXHRcdGlmKG8ubGVuZ3RoPjIpeyBvW28ubGVuZ3RoXSA9ICc8L3dvcmtib29rPic7IG9bMV09b1sxXS5yZXBsYWNlKFwiLz5cIixcIj5cIik7IH1cblx0XHRyZXR1cm4gby5qb2luKFwiXCIpO1xuXHR9XG5cdC8qIFtNUy1YTFNCXSAyLjQuMzAxIEJydEJ1bmRsZVNoICovXG5cdGZ1bmN0aW9uIHBhcnNlX0JydEJ1bmRsZVNoKGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciB6ID0ge307XG5cdFx0ei5IaWRkZW4gPSBkYXRhLnJlYWRfc2hpZnQoNCk7IC8vaHNTdGF0ZSBTVF9TaGVldFN0YXRlXG5cdFx0ei5pVGFiSUQgPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0ei5zdHJSZWxJRCA9IHBhcnNlX1JlbElEKGRhdGEsbGVuZ3RoLTgpO1xuXHRcdHoubmFtZSA9IHBhcnNlX1hMV2lkZVN0cmluZyhkYXRhKTtcblx0XHRyZXR1cm4gejtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV9CcnRCdW5kbGVTaChkYXRhLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDEyNyk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBkYXRhLkhpZGRlbik7XG5cdFx0by53cml0ZV9zaGlmdCg0LCBkYXRhLmlUYWJJRCk7XG5cdFx0d3JpdGVfUmVsSUQoZGF0YS5zdHJSZWxJRCwgbyk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKGRhdGEubmFtZS5zdWJzdHIoMCwzMSksIG8pO1xuXHRcdHJldHVybiBvLmxlbmd0aCA+IG8ubCA/IG8uc2xpY2UoMCwgby5sKSA6IG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjgwNyBCcnRXYlByb3AgKi9cblx0ZnVuY3Rpb24gcGFyc2VfQnJ0V2JQcm9wKGRhdGEsIGxlbmd0aCkge1xuXHRcdGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgZHdUaGVtZVZlcnNpb24gPSBkYXRhLnJlYWRfc2hpZnQoNCk7XG5cdFx0dmFyIHN0ck5hbWUgPSAobGVuZ3RoID4gOCkgPyBwYXJzZV9YTFdpZGVTdHJpbmcoZGF0YSkgOiBcIlwiO1xuXHRcdHJldHVybiBbZHdUaGVtZVZlcnNpb24sIHN0ck5hbWVdO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX0JydFdiUHJvcChkYXRhLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDcyKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgMCk7XG5cdFx0d3JpdGVfWExTQkNvZGVOYW1lKFwiVGhpc1dvcmtib29rXCIsIG8pO1xuXHRcdHJldHVybiBvLnNsaWNlKDAsIG8ubCk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9CcnRGUlRBcmNoSUQkKGRhdGEsIGxlbmd0aCkge1xuXHRcdHZhciBvID0ge307XG5cdFx0ZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdG8uQXJjaElEID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdGRhdGEubCArPSBsZW5ndGggLSA4O1xuXHRcdHJldHVybiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC42ODAgQnJ0TmFtZSAqL1xuXHRmdW5jdGlvbiBwYXJzZV9CcnROYW1lKGRhdGEsIGxlbmd0aCwgb3B0cykge1xuXHRcdHZhciBlbmQgPSBkYXRhLmwgKyBsZW5ndGg7XG5cdFx0dmFyIGZsYWdzID0gZGF0YS5yZWFkX3NoaWZ0KDQpO1xuXHRcdHZhciBjaEtleSA9IGRhdGEucmVhZF9zaGlmdCgxKTtcblx0XHR2YXIgaXRhYiA9IGRhdGEucmVhZF9zaGlmdCg0KTtcblx0XHR2YXIgbmFtZSA9IHBhcnNlX1hMTmFtZVdpZGVTdHJpbmcoZGF0YSk7XG5cdFx0dmFyIGZvcm11bGEgPSBwYXJzZV9YTFNCTmFtZVBhcnNlZEZvcm11bGEoZGF0YSwgMCwgb3B0cyk7XG5cdFx0dmFyIGNvbW1lbnQgPSBwYXJzZV9YTE51bGxhYmxlV2lkZVN0cmluZyhkYXRhKTtcblx0XHQvL2lmKDAgLyogZlByb2MgKi8pIHtcblx0XHRcdC8vIHVudXNlZHN0cmluZzE6IFhMTnVsbGFibGVXaWRlU3RyaW5nXG5cdFx0XHQvLyBkZXNjcmlwdGlvbjogWExOdWxsYWJsZVdpZGVTdHJpbmdcblx0XHRcdC8vIGhlbHBUb3BpYzogWExOdWxsYWJsZVdpZGVTdHJpbmdcblx0XHRcdC8vIHVudXNlZHN0cmluZzI6IFhMTnVsbGFibGVXaWRlU3RyaW5nXG5cdFx0Ly99XG5cdFx0ZGF0YS5sID0gZW5kO1xuXHRcdHZhciBvdXQgPSAoe05hbWU6bmFtZSwgUHRnOmZvcm11bGEsIENvbW1lbnQ6Y29tbWVudH0pO1xuXHRcdGlmKGl0YWIgPCAweEZGRkZGRkYpIG91dC5TaGVldCA9IGl0YWI7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy42MCBXb3JrYm9vayAqL1xuXHRmdW5jdGlvbiBwYXJzZV93Yl9iaW4oZGF0YSwgb3B0cykge1xuXHRcdHZhciB3YiA9IHsgQXBwVmVyc2lvbjp7fSwgV0JQcm9wczp7fSwgV0JWaWV3OltdLCBTaGVldHM6W10sIENhbGNQcjp7fSwgeG1sbnM6IFwiXCIgfTtcblx0XHR2YXIgcGFzcyA9IGZhbHNlLCB6O1xuXG5cdFx0aWYoIW9wdHMpIG9wdHMgPSB7fTtcblx0XHRvcHRzLmJpZmYgPSAxMjtcblxuXHRcdHZhciBOYW1lcyA9IFtdO1xuXHRcdHZhciBzdXBib29rcyA9IFtdO1xuXHRcdHN1cGJvb2tzLlNoZWV0TmFtZXMgPSBbXTtcblxuXHRcdHJlY29yZGhvcHBlcihkYXRhLCBmdW5jdGlvbiBob3BwZXJfd2IodmFsLCBSX24sIFJUKSB7XG5cdFx0XHRzd2l0Y2goUlQpIHtcblx0XHRcdFx0Y2FzZSAweDAwOUM6IC8qICdCcnRCdW5kbGVTaCcgKi9cblx0XHRcdFx0XHRzdXBib29rcy5TaGVldE5hbWVzLnB1c2godmFsLm5hbWUpO1xuXHRcdFx0XHRcdHdiLlNoZWV0cy5wdXNoKHZhbCk7IGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMDI3OiAvKiAnQnJ0TmFtZScgKi9cblx0XHRcdFx0XHR2YWwuUmVmID0gc3RyaW5naWZ5X2Zvcm11bGEodmFsLlB0ZywgbnVsbCwgbnVsbCwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdGRlbGV0ZSB2YWwuUHRnO1xuXHRcdFx0XHRcdE5hbWVzLnB1c2godmFsKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAweDA0MEM6IC8qICdCcnROYW1lRXh0JyAqLyBicmVhaztcblxuXHRcdFx0XHQvKiBjYXNlICdCcnRNb2RlbFRpbWVHcm91cGluZ0NhbGNDb2wnICovXG5cdFx0XHRcdC8qIGNhc2UgJ0JydFJldmlzaW9uUHRyJyAqL1xuXHRcdFx0XHQvKiBjYXNlICdCcnRVaWQnICovXG5cdFx0XHRcdGNhc2UgMHgwODE3OiAvKiAnQnJ0QWJzUGF0aDE1JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDIxNjogLyogJ0JydEJvb2tQcm90ZWN0aW9uJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDJBNTogLyogJ0JydEJvb2tQcm90ZWN0aW9uSXNvJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDA5RTogLyogJ0JydEJvb2tWaWV3JyAqL1xuXHRcdFx0XHRjYXNlIDB4MDA5RDogLyogJ0JydENhbGNQcm9wJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDI2MjogLyogJ0JydENyYXNoUmVjRXJyJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDgwMjogLyogJ0JydERlY291cGxlZFBpdm90Q2FjaGVJRCcgKi9cblx0XHRcdFx0Y2FzZSAweDAxNkE6IC8qICdCcnRFeHRlcm5TaGVldCcgKi9cblx0XHRcdFx0Y2FzZSAweDAwOUI6IC8qICdCcnRGaWxlUmVjb3ZlcicgKi9cblx0XHRcdFx0Y2FzZSAweDAyMjQ6IC8qICdCcnRGaWxlU2hhcmluZycgKi9cblx0XHRcdFx0Y2FzZSAweDAyQTQ6IC8qICdCcnRGaWxlU2hhcmluZ0lzbycgKi9cblx0XHRcdFx0Y2FzZSAweDAwODA6IC8qICdCcnRGaWxlVmVyc2lvbicgKi9cblx0XHRcdFx0Y2FzZSAweDAyOTk6IC8qICdCcnRGbkdyb3VwJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDg1MDogLyogJ0JydE1vZGVsUmVsYXRpb25zaGlwJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDg0RDogLyogJ0JydE1vZGVsVGFibGUnICovXG5cdFx0XHRcdGNhc2UgMHgwMjI1OiAvKiAnQnJ0T2xlU2l6ZScgKi9cblx0XHRcdFx0Y2FzZSAweDA4MDU6IC8qICdCcnRQaXZvdFRhYmxlUmVmJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDE2OTogLyogJ0JydFBsYWNlaG9sZGVyTmFtZScgKi9cblx0XHRcdFx0Y2FzZSAweDAyNTQ6IC8qICdCcnRTbWFydFRhZ1R5cGUnICovXG5cdFx0XHRcdGNhc2UgMHgwMjlCOiAvKiAnQnJ0U3VwQWRkaW4nICovXG5cdFx0XHRcdGNhc2UgMHgwMTYzOiAvKiAnQnJ0U3VwQm9va1NyYycgKi9cblx0XHRcdFx0Y2FzZSAweDAxNjY6IC8qICdCcnRTdXBTYW1lJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDE2NTogLyogJ0JydFN1cFNlbGYnICovXG5cdFx0XHRcdGNhc2UgMHgwODFDOiAvKiAnQnJ0VGFibGVTbGljZXJDYWNoZUlEJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDgxQjogLyogJ0JydFRhYmxlU2xpY2VyQ2FjaGVJRHMnICovXG5cdFx0XHRcdGNhc2UgMHgwODIyOiAvKiAnQnJ0VGltZWxpbmVDYWNoZVBpdm90Q2FjaGVJRCcgKi9cblx0XHRcdFx0Y2FzZSAweDAxOEQ6IC8qICdCcnRVc2VyQm9va1ZpZXcnICovXG5cdFx0XHRcdGNhc2UgMHgwMDlBOiAvKiAnQnJ0V2JGYWN0b2lkJyAqL1xuXHRcdFx0XHRjYXNlIDB4MDA5OTogLyogJ0JydFdiUHJvcCcgKi9cblx0XHRcdFx0Y2FzZSAweDA0NUQ6IC8qICdCcnRXYlByb3AxNCcgKi9cblx0XHRcdFx0Y2FzZSAweDAyMjk6IC8qICdCcnRXZWJPcHQnICovXG5cdFx0XHRcdGNhc2UgMHgwODJCOiAvKiAnQnJ0V29ya0Jvb2tQcjE1JyAqL1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMHgwMDIzOiAvKiAnQnJ0RlJUQmVnaW4nICovXG5cdFx0XHRcdFx0cGFzcyA9IHRydWU7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNDogLyogJ0JydEZSVEVuZCcgKi9cblx0XHRcdFx0XHRwYXNzID0gZmFsc2U7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNTogLyogJ0JydEFDQmVnaW4nICovIGJyZWFrO1xuXHRcdFx0XHRjYXNlIDB4MDAyNjogLyogJ0JydEFDRW5kJyAqLyBicmVhaztcblxuXHRcdFx0XHRjYXNlIDB4MDAxMDogLyogJ0JydEZSVEFyY2hJRCQnICovIGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYoKFJfbnx8XCJcIikuaW5kZXhPZihcIkJlZ2luXCIpID4gMCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0ZWxzZSBpZigoUl9ufHxcIlwiKS5pbmRleE9mKFwiRW5kXCIpID4gMCl7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0ZWxzZSBpZighcGFzcyB8fCBvcHRzLldURikgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCByZWNvcmQgXCIgKyBSVCArIFwiIFwiICsgUl9uKTtcblx0XHRcdH1cblx0XHR9LCBvcHRzKTtcblxuXHRcdHBhcnNlX3diX2RlZmF1bHRzKHdiKTtcblxuXHRcdC8vICRGbG93SWdub3JlXG5cdFx0d2IuTmFtZXMgPSBOYW1lcztcblxuXHRcdHJldHVybiB3Yjtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy42MCBXb3JrYm9vayAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CVU5ETEVTSFMoYmEsIHdiLCBvcHRzKSB7XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQnVuZGxlU2hzXCIpO1xuXHRcdGZvcih2YXIgaWR4ID0gMDsgaWR4ICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2lkeCkge1xuXHRcdFx0dmFyIHZpeiA9IHdiLldvcmtib29rICYmIHdiLldvcmtib29rLlNoZWV0cyAmJiB3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XSAmJiB3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XS5IaWRkZW4gfHwgMDtcblx0XHRcdHZhciBkID0geyBIaWRkZW46IHZpeiwgaVRhYklEOiBpZHgrMSwgc3RyUmVsSUQ6ICdySWQnICsgKGlkeCsxKSwgbmFtZTogd2IuU2hlZXROYW1lc1tpZHhdIH07XG5cdFx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QnVuZGxlU2hcIiwgd3JpdGVfQnJ0QnVuZGxlU2goZCkpO1xuXHRcdH1cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0RW5kQnVuZGxlU2hzXCIpO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC42NDMgQnJ0RmlsZVZlcnNpb24gKi9cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0RmlsZVZlcnNpb24oZGF0YSwgbykge1xuXHRcdGlmKCFvKSBvID0gbmV3X2J1ZigxMjcpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gNDsgKytpKSBvLndyaXRlX3NoaWZ0KDQsIDApO1xuXHRcdHdyaXRlX1hMV2lkZVN0cmluZyhcIlNoZWV0SlNcIiwgbyk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKFhMU1gudmVyc2lvbiwgbyk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKFhMU1gudmVyc2lvbiwgbyk7XG5cdFx0d3JpdGVfWExXaWRlU3RyaW5nKFwiNzI2MlwiLCBvKTtcblx0XHRvLmxlbmd0aCA9IG8ubDtcblx0XHRyZXR1cm4gby5sZW5ndGggPiBvLmwgPyBvLnNsaWNlKDAsIG8ubCkgOiBvO1xuXHR9XG5cblx0LyogW01TLVhMU0JdIDIuNC4yOTggQnJ0Qm9va1ZpZXcgKi9cblx0ZnVuY3Rpb24gd3JpdGVfQnJ0Qm9va1ZpZXcoaWR4LCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDI5KTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCA0NjApO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgIDI4ODAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICAxNzYwMCk7XG5cdFx0by53cml0ZV9zaGlmdCg0LCAgNTAwKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsICBpZHgpO1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwgIGlkeCk7XG5cdFx0dmFyIGZsYWdzID0gMHg3ODtcblx0XHRvLndyaXRlX3NoaWZ0KDEsICBmbGFncyk7XG5cdFx0cmV0dXJuIG8ubGVuZ3RoID4gby5sID8gby5zbGljZSgwLCBvLmwpIDogbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy42MCBXb3JrYm9vayAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CT09LVklFV1MoYmEsIHdiLCBvcHRzKSB7XG5cdFx0LyogcmVxdWlyZWQgaWYgaGlkZGVuIHRhYiBhcHBlYXJzIGJlZm9yZSB2aXNpYmxlIHRhYiAqL1xuXHRcdGlmKCF3Yi5Xb3JrYm9vayB8fCAhd2IuV29ya2Jvb2suU2hlZXRzKSByZXR1cm47XG5cdFx0dmFyIHNoZWV0cyA9IHdiLldvcmtib29rLlNoZWV0cztcblx0XHR2YXIgaSA9IDAsIHZpc3RhYiA9IC0xLCBoaWRkZW4gPSAtMTtcblx0XHRmb3IoOyBpIDwgc2hlZXRzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRpZighc2hlZXRzW2ldIHx8ICFzaGVldHNbaV0uSGlkZGVuICYmIHZpc3RhYiA9PSAtMSkgdmlzdGFiID0gaTtcblx0XHRcdGVsc2UgaWYoc2hlZXRzW2ldLkhpZGRlbiA9PSAxICYmIGhpZGRlbiA9PSAtMSkgaGlkZGVuID0gaTtcblx0XHR9XG5cdFx0aWYoaGlkZGVuID4gdmlzdGFiKSByZXR1cm47XG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEJlZ2luQm9va1ZpZXdzXCIpO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRCb29rVmlld1wiLCB3cml0ZV9CcnRCb29rVmlldyh2aXN0YWIpKTtcblx0XHQvKiAxKihCcnRCb29rVmlldyAqRlJUKSAqL1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRFbmRCb29rVmlld3NcIik7XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjMwMiBCcnRDYWxjUHJvcCAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CcnRDYWxjUHJvcChkYXRhLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDI2KTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsMCk7IC8qIGZvcmNlIHJlY2FsYyAqL1xuXHRcdG8ud3JpdGVfc2hpZnQoNCwxKTtcblx0XHRvLndyaXRlX3NoaWZ0KDQsMCk7XG5cdFx0d3JpdGVfWG51bSgwLCBvKTtcblx0XHRvLndyaXRlX3NoaWZ0KC00LCAxMDIzKTtcblx0XHRvLndyaXRlX3NoaWZ0KDEsIDB4MzMpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwgMHgwMCk7XG5cdFx0cmV0dXJuIG87XG5cdH1cblxuXHQvKiBbTVMtWExTQl0gMi40LjY0MCBCcnRGaWxlUmVjb3ZlciAqL1xuXHRmdW5jdGlvbiB3cml0ZV9CcnRGaWxlUmVjb3ZlcihkYXRhLCBvKSB7XG5cdFx0aWYoIW8pIG8gPSBuZXdfYnVmKDEpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMSwwKTtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjEuNy42MCBXb3JrYm9vayAqL1xuXHRmdW5jdGlvbiB3cml0ZV93Yl9iaW4od2IsIG9wdHMpIHtcblx0XHR2YXIgYmEgPSBidWZfYXJyYXkoKTtcblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0QmVnaW5Cb29rXCIpO1xuXHRcdHdyaXRlX3JlY29yZChiYSwgXCJCcnRGaWxlVmVyc2lvblwiLCB3cml0ZV9CcnRGaWxlVmVyc2lvbigpKTtcblx0XHQvKiBbW0JydEZpbGVTaGFyaW5nSXNvXSBCcnRGaWxlU2hhcmluZ10gKi9cblx0XHR3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0V2JQcm9wXCIsIHdyaXRlX0JydFdiUHJvcCgpKTtcblx0XHQvKiBbQUNBQlNQQVRIXSAqL1xuXHRcdC8qIFtbQnJ0Qm9va1Byb3RlY3Rpb25Jc29dIEJydEJvb2tQcm90ZWN0aW9uXSAqL1xuXHRcdHdyaXRlX0JPT0tWSUVXUyhiYSwgd2IsIG9wdHMpO1xuXHRcdHdyaXRlX0JVTkRMRVNIUyhiYSwgd2IsIG9wdHMpO1xuXHRcdC8qIFtGTkdST1VQXSAqL1xuXHRcdC8qIFtFWFRFUk5BTFNdICovXG5cdFx0LyogKkJydE5hbWUgKi9cblx0XHQvKiB3cml0ZV9yZWNvcmQoYmEsIFwiQnJ0Q2FsY1Byb3BcIiwgd3JpdGVfQnJ0Q2FsY1Byb3AoKSk7ICovXG5cdFx0LyogW0JydE9sZVNpemVdICovXG5cdFx0LyogKihCcnRVc2VyQm9va1ZpZXcgKkZSVCkgKi9cblx0XHQvKiBbUElWT1RDQUNIRUlEU10gKi9cblx0XHQvKiBbQnJ0V2JGYWN0b2lkXSAqL1xuXHRcdC8qIFtTTUFSVFRBR1RZUEVTXSAqL1xuXHRcdC8qIFtCcnRXZWJPcHRdICovXG5cdFx0Lyogd3JpdGVfcmVjb3JkKGJhLCBcIkJydEZpbGVSZWNvdmVyXCIsIHdyaXRlX0JydEZpbGVSZWNvdmVyKCkpOyAqL1xuXHRcdC8qIFtXRUJQVUJJVEVNU10gKi9cblx0XHQvKiBbQ1JFUlJTXSAqL1xuXHRcdC8qIEZSVFdPUktCT09LICovXG5cdFx0d3JpdGVfcmVjb3JkKGJhLCBcIkJydEVuZEJvb2tcIik7XG5cblx0XHRyZXR1cm4gYmEuZW5kKCk7XG5cdH1cblx0ZnVuY3Rpb24gcGFyc2Vfd2IoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRcdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV93Yl9iaW4oKGRhdGEpLCBvcHRzKTtcblx0XHRyZXR1cm4gcGFyc2Vfd2JfeG1sKChkYXRhKSwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV93cyhkYXRhLCBuYW1lLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0XHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfd3NfYmluKChkYXRhKSwgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0XHRyZXR1cm4gcGFyc2Vfd3NfeG1sKChkYXRhKSwgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX2NzKGRhdGEsIG5hbWUsIG9wdHMsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcykge1xuXHRcdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9jc19iaW4oKGRhdGEpLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHRcdHJldHVybiBwYXJzZV9jc194bWwoKGRhdGEpLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfbXMoZGF0YSwgbmFtZSwgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKSB7XG5cdFx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX21zX2JpbigoZGF0YSksIG9wdHMsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG5cdFx0cmV0dXJuIHBhcnNlX21zX3htbCgoZGF0YSksIG9wdHMsIHJlbHMsIHdiLCB0aGVtZXMsIHN0eWxlcyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9kcyhkYXRhLCBuYW1lLCBvcHRzLCByZWxzLCB3YiwgdGhlbWVzLCBzdHlsZXMpIHtcblx0XHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2VfZHNfYmluKChkYXRhKSwgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0XHRyZXR1cm4gcGFyc2VfZHNfeG1sKChkYXRhKSwgb3B0cywgcmVscywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX3N0eShkYXRhLCBuYW1lLCB0aGVtZXMsIG9wdHMpIHtcblx0XHRpZihuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiKSByZXR1cm4gcGFyc2Vfc3R5X2JpbigoZGF0YSksIHRoZW1lcywgb3B0cyk7XG5cdFx0cmV0dXJuIHBhcnNlX3N0eV94bWwoKGRhdGEpLCB0aGVtZXMsIG9wdHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VfdGhlbWUoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRcdHJldHVybiBwYXJzZV90aGVtZV94bWwoZGF0YSwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9zc3QoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRcdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9zc3RfYmluKChkYXRhKSwgb3B0cyk7XG5cdFx0cmV0dXJuIHBhcnNlX3NzdF94bWwoKGRhdGEpLCBvcHRzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlX2NtbnQoZGF0YSwgbmFtZSwgb3B0cykge1xuXHRcdGlmKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIpIHJldHVybiBwYXJzZV9jb21tZW50c19iaW4oKGRhdGEpLCBvcHRzKTtcblx0XHRyZXR1cm4gcGFyc2VfY29tbWVudHNfeG1sKChkYXRhKSwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV9jYyhkYXRhLCBuYW1lLCBvcHRzKSB7XG5cdFx0aWYobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIikgcmV0dXJuIHBhcnNlX2NjX2JpbigoZGF0YSksIG9wdHMpO1xuXHRcdHJldHVybiBwYXJzZV9jY194bWwoKGRhdGEpLCBvcHRzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3diKHdiLCBuYW1lLCBvcHRzKSB7XG5cdFx0cmV0dXJuIChuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiID8gd3JpdGVfd2JfYmluIDogd3JpdGVfd2JfeG1sKSh3Yiwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93cyhkYXRhLCBuYW1lLCBvcHRzLCB3YiwgcmVscykge1xuXHRcdHJldHVybiAobmFtZS5zbGljZSgtNCk9PT1cIi5iaW5cIiA/IHdyaXRlX3dzX2JpbiA6IHdyaXRlX3dzX3htbCkoZGF0YSwgb3B0cywgd2IsIHJlbHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfY3MoZGF0YSwgbmFtZSwgb3B0cywgd2IsIHJlbHMpIHtcblx0XHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9jc19iaW4gOiB3cml0ZV9jc194bWwpKGRhdGEsIG9wdHMsIHdiLCByZWxzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3N0eShkYXRhLCBuYW1lLCBvcHRzKSB7XG5cdFx0cmV0dXJuIChuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiID8gd3JpdGVfc3R5X2JpbiA6IHdyaXRlX3N0eV94bWwpKGRhdGEsIG9wdHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfc3N0KGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0XHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9zc3RfYmluIDogd3JpdGVfc3N0X3htbCkoZGF0YSwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9jbW50KGRhdGEsIG5hbWUsIG9wdHMpIHtcblx0XHRyZXR1cm4gKG5hbWUuc2xpY2UoLTQpPT09XCIuYmluXCIgPyB3cml0ZV9jb21tZW50c19iaW4gOiB3cml0ZV9jb21tZW50c194bWwpKGRhdGEsIG9wdHMpO1xuXHR9XG5cdC8qXG5cdGZ1bmN0aW9uIHdyaXRlX2NjKGRhdGEsIG5hbWU6c3RyaW5nLCBvcHRzKSB7XG5cdFx0cmV0dXJuIChuYW1lLnNsaWNlKC00KT09PVwiLmJpblwiID8gd3JpdGVfY2NfYmluIDogd3JpdGVfY2NfeG1sKShkYXRhLCBvcHRzKTtcblx0fVxuXHQqL1xuXHR2YXIgYXR0cmVnZXhnMj0vKFtcXHc6XSspPSgoPzpcIikoW15cIl0qKSg/OlwiKXwoPzonKShbXiddKikoPzonKSkvZztcblx0dmFyIGF0dHJlZ2V4Mj0vKFtcXHc6XSspPSgoPzpcIikoPzpbXlwiXSopKD86XCIpfCg/OicpKD86W14nXSopKD86JykpLztcblx0dmFyIF9jaHIgPSBmdW5jdGlvbihjKSB7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpOyB9O1xuXHRmdW5jdGlvbiB4bG1sX3BhcnNleG1sdGFnKHRhZywgc2tpcF9yb290KSB7XG5cdFx0dmFyIHdvcmRzID0gdGFnLnNwbGl0KC9cXHMrLyk7XG5cdFx0dmFyIHogPSAoW10pOyBpZighc2tpcF9yb290KSB6WzBdID0gd29yZHNbMF07XG5cdFx0aWYod29yZHMubGVuZ3RoID09PSAxKSByZXR1cm4gejtcblx0XHR2YXIgbSA9IHRhZy5tYXRjaChhdHRyZWdleGcyKSwgeSwgaiwgdywgaTtcblx0XHRpZihtKSBmb3IoaSA9IDA7IGkgIT0gbS5sZW5ndGg7ICsraSkge1xuXHRcdFx0eSA9IG1baV0ubWF0Y2goYXR0cmVnZXgyKTtcblx0aWYoKGo9eVsxXS5pbmRleE9mKFwiOlwiKSkgPT09IC0xKSB6W3lbMV1dID0geVsyXS5zdWJzdHIoMSx5WzJdLmxlbmd0aC0yKTtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZih5WzFdLnN1YnN0cigwLDYpID09PSBcInhtbG5zOlwiKSB3ID0gXCJ4bWxuc1wiK3lbMV0uc3Vic3RyKDYpO1xuXHRcdFx0XHRlbHNlIHcgPSB5WzFdLnN1YnN0cihqKzEpO1xuXHRcdFx0XHR6W3ddID0geVsyXS5zdWJzdHIoMSx5WzJdLmxlbmd0aC0yKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHo7XG5cdH1cblx0ZnVuY3Rpb24geGxtbF9wYXJzZXhtbHRhZ29iaih0YWcpIHtcblx0XHR2YXIgd29yZHMgPSB0YWcuc3BsaXQoL1xccysvKTtcblx0XHR2YXIgeiA9IHt9O1xuXHRcdGlmKHdvcmRzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHo7XG5cdFx0dmFyIG0gPSB0YWcubWF0Y2goYXR0cmVnZXhnMiksIHksIGosIHcsIGk7XG5cdFx0aWYobSkgZm9yKGkgPSAwOyBpICE9IG0ubGVuZ3RoOyArK2kpIHtcblx0XHRcdHkgPSBtW2ldLm1hdGNoKGF0dHJlZ2V4Mik7XG5cdGlmKChqPXlbMV0uaW5kZXhPZihcIjpcIikpID09PSAtMSkgelt5WzFdXSA9IHlbMl0uc3Vic3RyKDEseVsyXS5sZW5ndGgtMik7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYoeVsxXS5zdWJzdHIoMCw2KSA9PT0gXCJ4bWxuczpcIikgdyA9IFwieG1sbnNcIit5WzFdLnN1YnN0cig2KTtcblx0XHRcdFx0ZWxzZSB3ID0geVsxXS5zdWJzdHIoaisxKTtcblx0XHRcdFx0elt3XSA9IHlbMl0uc3Vic3RyKDEseVsyXS5sZW5ndGgtMik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB6O1xuXHR9XG5cblx0Ly8gLS0tLVxuXG5cdGZ1bmN0aW9uIHhsbWxfZm9ybWF0KGZvcm1hdCwgdmFsdWUpIHtcblx0XHR2YXIgZm10ID0gWExNTEZvcm1hdE1hcFtmb3JtYXRdIHx8IHVuZXNjYXBleG1sKGZvcm1hdCk7XG5cdFx0aWYoZm10ID09PSBcIkdlbmVyYWxcIikgcmV0dXJuIFNTRi5fZ2VuZXJhbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIFNTRi5mb3JtYXQoZm10LCB2YWx1ZSk7XG5cdH1cblxuXHRmdW5jdGlvbiB4bG1sX3NldF9jdXN0cHJvcChDdXN0cHJvcHMsIFJuLCBjcCwgdmFsKSB7XG5cdFx0dmFyIG92YWwgPSB2YWw7XG5cdFx0c3dpdGNoKChjcFswXS5tYXRjaCgvZHQ6ZHQ9XCIoW1xcdy5dKylcIi8pfHxbXCJcIixcIlwiXSlbMV0pIHtcblx0XHRcdGNhc2UgXCJib29sZWFuXCI6IG92YWwgPSBwYXJzZXhtbGJvb2wodmFsKTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiaTJcIjogY2FzZSBcImludFwiOiBvdmFsID0gcGFyc2VJbnQodmFsLCAxMCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcInI0XCI6IGNhc2UgXCJmbG9hdFwiOiBvdmFsID0gcGFyc2VGbG9hdCh2YWwpOyBicmVhaztcblx0XHRcdGNhc2UgXCJkYXRlXCI6IGNhc2UgXCJkYXRlVGltZS50elwiOiBvdmFsID0gcGFyc2VEYXRlKHZhbCk7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImk4XCI6IGNhc2UgXCJzdHJpbmdcIjogY2FzZSBcImZpeGVkXCI6IGNhc2UgXCJ1dWlkXCI6IGNhc2UgXCJiaW4uYmFzZTY0XCI6IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiYmFkIGN1c3Rwcm9wOlwiICsgY3BbMF0pO1xuXHRcdH1cblx0XHRDdXN0cHJvcHNbdW5lc2NhcGV4bWwoUm5bM10pXSA9IG92YWw7XG5cdH1cblxuXHRmdW5jdGlvbiBzYWZlX2Zvcm1hdF94bG1sKGNlbGwsIG5mLCBvKSB7XG5cdFx0aWYoY2VsbC50ID09PSAneicpIHJldHVybjtcblx0XHRpZighbyB8fCBvLmNlbGxUZXh0ICE9PSBmYWxzZSkgdHJ5IHtcblx0XHRcdGlmKGNlbGwudCA9PT0gJ2UnKSB7IGNlbGwudyA9IGNlbGwudyB8fCBCRXJyW2NlbGwudl07IH1cblx0XHRcdGVsc2UgaWYobmYgPT09IFwiR2VuZXJhbFwiKSB7XG5cdFx0XHRcdGlmKGNlbGwudCA9PT0gJ24nKSB7XG5cdFx0XHRcdFx0aWYoKGNlbGwudnwwKSA9PT0gY2VsbC52KSBjZWxsLncgPSBTU0YuX2dlbmVyYWxfaW50KGNlbGwudik7XG5cdFx0XHRcdFx0ZWxzZSBjZWxsLncgPSBTU0YuX2dlbmVyYWxfbnVtKGNlbGwudik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBjZWxsLncgPSBTU0YuX2dlbmVyYWwoY2VsbC52KTtcblx0XHRcdH1cblx0XHRcdGVsc2UgY2VsbC53ID0geGxtbF9mb3JtYXQobmZ8fFwiR2VuZXJhbFwiLCBjZWxsLnYpO1xuXHRcdH0gY2F0Y2goZSkgeyBpZihvLldURikgdGhyb3cgZTsgfVxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgeiA9IFhMTUxGb3JtYXRNYXBbbmZdfHxuZnx8XCJHZW5lcmFsXCI7XG5cdFx0XHRpZihvLmNlbGxORikgY2VsbC56ID0gejtcblx0XHRcdGlmKG8uY2VsbERhdGVzICYmIGNlbGwudCA9PSAnbicgJiYgU1NGLmlzX2RhdGUoeikpIHtcblx0XHRcdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShjZWxsLnYpOyBpZihfZCkgeyBjZWxsLnQgPSAnZCc7IGNlbGwudiA9IG5ldyBEYXRlKERhdGUuVVRDKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpKTsgfVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2goZSkgeyBpZihvLldURikgdGhyb3cgZTsgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvY2Vzc19zdHlsZV94bG1sKHN0eWxlcywgc3RhZywgb3B0cykge1xuXHRcdGlmKG9wdHMuY2VsbFN0eWxlcykge1xuXHRcdFx0aWYoc3RhZy5JbnRlcmlvcikge1xuXHRcdFx0XHR2YXIgSSA9IHN0YWcuSW50ZXJpb3I7XG5cdFx0XHRcdGlmKEkuUGF0dGVybikgSS5wYXR0ZXJuVHlwZSA9IFhMTUxQYXR0ZXJuVHlwZU1hcFtJLlBhdHRlcm5dIHx8IEkuUGF0dGVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0c3R5bGVzW3N0YWcuSURdID0gc3RhZztcblx0fVxuXG5cdC8qIFRPRE86IHRoZXJlIG11c3QgZXhpc3Qgc29tZSBmb3JtIG9mIE9TUC1ibGVzc2VkIHNwZWMgKi9cblx0ZnVuY3Rpb24gcGFyc2VfeGxtbF9kYXRhKHhtbCwgc3MsIGRhdGEsIGNlbGwsIGJhc2UsIHN0eWxlcywgY3N0eSwgcm93LCBhcnJheWYsIG8pIHtcblx0XHR2YXIgbmYgPSBcIkdlbmVyYWxcIiwgc2lkID0gY2VsbC5TdHlsZUlELCBTID0ge307IG8gPSBvIHx8IHt9O1xuXHRcdHZhciBpbnRlcmlvcnMgPSBbXTtcblx0XHR2YXIgaSA9IDA7XG5cdFx0aWYoc2lkID09PSB1bmRlZmluZWQgJiYgcm93KSBzaWQgPSByb3cuU3R5bGVJRDtcblx0XHRpZihzaWQgPT09IHVuZGVmaW5lZCAmJiBjc3R5KSBzaWQgPSBjc3R5LlN0eWxlSUQ7XG5cdFx0d2hpbGUoc3R5bGVzW3NpZF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYoc3R5bGVzW3NpZF0ubmYpIG5mID0gc3R5bGVzW3NpZF0ubmY7XG5cdFx0XHRpZihzdHlsZXNbc2lkXS5JbnRlcmlvcikgaW50ZXJpb3JzLnB1c2goc3R5bGVzW3NpZF0uSW50ZXJpb3IpO1xuXHRcdFx0aWYoIXN0eWxlc1tzaWRdLlBhcmVudCkgYnJlYWs7XG5cdFx0XHRzaWQgPSBzdHlsZXNbc2lkXS5QYXJlbnQ7XG5cdFx0fVxuXHRcdHN3aXRjaChkYXRhLlR5cGUpIHtcblx0XHRcdGNhc2UgJ0Jvb2xlYW4nOlxuXHRcdFx0XHRjZWxsLnQgPSAnYic7XG5cdFx0XHRcdGNlbGwudiA9IHBhcnNleG1sYm9vbCh4bWwpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ1N0cmluZyc6XG5cdFx0XHRcdGNlbGwudCA9ICdzJzsgY2VsbC5yID0geGxtbF9maXhzdHIodW5lc2NhcGV4bWwoeG1sKSk7XG5cdFx0XHRcdGNlbGwudiA9IHhtbC5pbmRleE9mKFwiPFwiKSA+IC0xID8gdW5lc2NhcGV4bWwoc3MpIDogY2VsbC5yO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0RhdGVUaW1lJzpcblx0XHRcdFx0Y2VsbC52ID0gKHBhcnNlRGF0ZSh4bWwpIC0gbmV3IERhdGUoRGF0ZS5VVEMoMTg5OSwgMTEsIDMwKSkpIC8gKDI0ICogNjAgKiA2MCAqIDEwMDApO1xuXHRcdFx0XHRpZihjZWxsLnYgIT09IGNlbGwudikgY2VsbC52ID0gdW5lc2NhcGV4bWwoeG1sKTtcblx0XHRcdFx0ZWxzZSBpZihjZWxsLnY8NjApIGNlbGwudiA9IGNlbGwudiAtMTtcblx0XHRcdFx0aWYoIW5mIHx8IG5mID09IFwiR2VuZXJhbFwiKSBuZiA9IFwieXl5eS1tbS1kZFwiO1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0XHRpZihjZWxsLnYgPT09IHVuZGVmaW5lZCkgY2VsbC52PSt4bWw7XG5cdFx0XHRcdGlmKCFjZWxsLnQpIGNlbGwudCA9ICduJztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdFcnJvcic6IGNlbGwudCA9ICdlJzsgY2VsbC52ID0gUkJFcnJbeG1sXTsgaWYoby5jZWxsVGV4dCAhPT0gZmFsc2UpIGNlbGwudyA9IHhtbDsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiBjZWxsLnQgPSAncyc7IGNlbGwudiA9IHhsbWxfZml4c3RyKHNzfHx4bWwpOyBicmVhaztcblx0XHR9XG5cdFx0c2FmZV9mb3JtYXRfeGxtbChjZWxsLCBuZiwgbyk7XG5cdFx0aWYoby5jZWxsRm9ybXVsYSAhPT0gZmFsc2UpIHtcblx0XHRcdGlmKGNlbGwuRm9ybXVsYSkge1xuXHRcdFx0XHR2YXIgZnN0ciA9IHVuZXNjYXBleG1sKGNlbGwuRm9ybXVsYSk7XG5cdFx0XHRcdC8qIHN0cmljdGx5IHNwZWFraW5nLCB0aGUgbGVhZGluZyA9IGlzIHJlcXVpcmVkIGJ1dCBzb21lIHdyaXRlcnMgb21pdCAqL1xuXHRcdFx0XHRpZihmc3RyLmNoYXJDb2RlQXQoMCkgPT0gNjEgLyogPSAqLykgZnN0ciA9IGZzdHIuc3Vic3RyKDEpO1xuXHRcdFx0XHRjZWxsLmYgPSByY190b19hMShmc3RyLCBiYXNlKTtcblx0XHRcdFx0ZGVsZXRlIGNlbGwuRm9ybXVsYTtcblx0XHRcdFx0aWYoY2VsbC5BcnJheVJhbmdlID09IFwiUkNcIikgY2VsbC5GID0gcmNfdG9fYTEoXCJSQzpSQ1wiLCBiYXNlKTtcblx0XHRcdFx0ZWxzZSBpZihjZWxsLkFycmF5UmFuZ2UpIHtcblx0XHRcdFx0XHRjZWxsLkYgPSByY190b19hMShjZWxsLkFycmF5UmFuZ2UsIGJhc2UpO1xuXHRcdFx0XHRcdGFycmF5Zi5wdXNoKFtzYWZlX2RlY29kZV9yYW5nZShjZWxsLkYpLCBjZWxsLkZdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgYXJyYXlmLmxlbmd0aDsgKytpKVxuXHRcdFx0XHRcdGlmKGJhc2UuciA+PSBhcnJheWZbaV1bMF0ucy5yICYmIGJhc2UuciA8PSBhcnJheWZbaV1bMF0uZS5yKVxuXHRcdFx0XHRcdFx0aWYoYmFzZS5jID49IGFycmF5ZltpXVswXS5zLmMgJiYgYmFzZS5jIDw9IGFycmF5ZltpXVswXS5lLmMpXG5cdFx0XHRcdFx0XHRcdGNlbGwuRiA9IGFycmF5ZltpXVsxXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoby5jZWxsU3R5bGVzKSB7XG5cdFx0XHRpbnRlcmlvcnMuZm9yRWFjaChmdW5jdGlvbih4KSB7XG5cdFx0XHRcdGlmKCFTLnBhdHRlcm5UeXBlICYmIHgucGF0dGVyblR5cGUpIFMucGF0dGVyblR5cGUgPSB4LnBhdHRlcm5UeXBlO1xuXHRcdFx0fSk7XG5cdFx0XHRjZWxsLnMgPSBTO1xuXHRcdH1cblx0XHRjZWxsLml4ZmUgPSBjZWxsLlN0eWxlSUQgIT09IHVuZGVmaW5lZCA/IGNlbGwuU3R5bGVJRCA6ICdEZWZhdWx0Jztcblx0fVxuXG5cdGZ1bmN0aW9uIHhsbWxfY2xlYW5fY29tbWVudChjb21tZW50KSB7XG5cdFx0Y29tbWVudC50ID0gY29tbWVudC52IHx8IFwiXCI7XG5cdFx0Y29tbWVudC50ID0gY29tbWVudC50LnJlcGxhY2UoL1xcclxcbi9nLFwiXFxuXCIpLnJlcGxhY2UoL1xcci9nLFwiXFxuXCIpO1xuXHRcdGNvbW1lbnQudiA9IGNvbW1lbnQudyA9IGNvbW1lbnQuaXhmZSA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGZ1bmN0aW9uIHhsbWxfbm9ybWFsaXplKGQpIHtcblx0XHRpZihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkKSkgcmV0dXJuIGQudG9TdHJpbmcoJ3V0ZjgnKTtcblx0XHRpZih0eXBlb2YgZCA9PT0gJ3N0cmluZycpIHJldHVybiBkO1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkJhZCBpbnB1dCBmb3JtYXQ6IGV4cGVjdGVkIEJ1ZmZlciBvciBzdHJpbmdcIik7XG5cdH1cblxuXHQvKiBUT0RPOiBFdmVyeXRoaW5nICovXG5cdC8qIFVPUyB1c2VzIENKSyBpbiB0YWdzICovXG5cdHZhciB4bG1scmVnZXggPSAvPChcXC8/KShbXlxccz8+IVxcLzpdKjp8KShbXlxccz8+XSpbXlxccz8+XFwvXSlbXj5dKj4vbWc7XG5cdC8vdmFyIHhsbWxyZWdleCA9IC88KFxcLz8pKFthLXowLTldKjp8KShcXHcrKVtePl0qPi9tZztcblx0ZnVuY3Rpb24gcGFyc2VfeGxtbF94bWwoZCwgb3B0cykge1xuXHRcdG1ha2Vfc3NmKFNTRik7XG5cdFx0dmFyIHN0ciA9IGRlYm9tKHhsbWxfbm9ybWFsaXplKGQpKTtcblx0XHRpZihvcHRzICYmIG9wdHMudHlwZSA9PSAnYmluYXJ5JyAmJiB0eXBlb2YgY3B0YWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciA9IGNwdGFibGUudXRpbHMuZGVjb2RlKDY1MDAxLCBjaGFyX2NvZGVzKHN0cikpO1xuXHRcdGlmKHN0ci5zdWJzdHIoMCwxMDAwKS5pbmRleE9mKFwiPGh0bWxcIikgPj0gMCkgcmV0dXJuIEhUTUxfLnRvX3dvcmtib29rKHN0ciwgb3B0cyk7XG5cdFx0dmFyIFJuO1xuXHRcdHZhciBzdGF0ZSA9IFtdLCB0bXA7XG5cdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRzLmRlbnNlID09IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblx0XHR2YXIgc2hlZXRzID0ge30sIHNoZWV0bmFtZXMgPSBbXSwgY3Vyc2hlZXQgPSAob3B0cy5kZW5zZSA/IFtdIDoge30pLCBzaGVldG5hbWUgPSBcIlwiO1xuXHRcdHZhciB0YWJsZSA9IHt9LCBjZWxsID0gKHt9KSwgcm93ID0ge307XG5cdFx0dmFyIGR0YWcgPSB4bG1sX3BhcnNleG1sdGFnKCc8RGF0YSBzczpUeXBlPVwiU3RyaW5nXCI+JyksIGRpZHggPSAwO1xuXHRcdHZhciBjID0gMCwgciA9IDA7XG5cdFx0dmFyIHJlZmd1ZXNzID0ge3M6IHtyOjIwMDAwMDAsIGM6MjAwMDAwMH0sIGU6IHtyOjAsIGM6MH0gfTtcblx0XHR2YXIgc3R5bGVzID0ge30sIHN0YWcgPSB7fTtcblx0XHR2YXIgc3MgPSBcIlwiLCBmaWR4ID0gMDtcblx0XHR2YXIgbWVyZ2VjZWxscyA9IFtdO1xuXHRcdHZhciBQcm9wcyA9IHt9LCBDdXN0cHJvcHMgPSB7fSwgcGlkeCA9IDAsIGNwID0ge307XG5cdFx0dmFyIGNvbW1lbnRzID0gW10sIGNvbW1lbnQgPSB7fTtcblx0XHR2YXIgY3N0eXMgPSBbXSwgY3N0eSwgc2VlbmNvbCA9IGZhbHNlO1xuXHRcdHZhciBhcnJheWYgPSBbXTtcblx0XHR2YXIgcm93aW5mbyA9IFtdLCByb3dvYmogPSB7fTtcblx0XHR2YXIgV29ya2Jvb2sgPSB7IFNoZWV0czpbXSB9LCB3c3Byb3BzID0ge307XG5cdFx0eGxtbHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoLzwhLS0oW15cXHUyNjAzXSo/KS0tPi9tZyxcIlwiKTtcblx0XHR3aGlsZSgoUm4gPSB4bG1scmVnZXguZXhlYyhzdHIpKSkgc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRjYXNlICdEYXRhJzpcblx0XHRcdFx0aWYoc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzFdKSBicmVhaztcblx0XHRcdFx0aWYoUm5bMV09PT0nLycpIHBhcnNlX3hsbWxfZGF0YShzdHIuc2xpY2UoZGlkeCwgUm4uaW5kZXgpLCBzcywgZHRhZywgc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzBdPT1cIkNvbW1lbnRcIj9jb21tZW50OmNlbGwsIHtjOmMscjpyfSwgc3R5bGVzLCBjc3R5c1tjXSwgcm93LCBhcnJheWYsIG9wdHMpO1xuXHRcdFx0XHRlbHNlIHsgc3MgPSBcIlwiOyBkdGFnID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7IGRpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDsgfVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0NlbGwnOlxuXHRcdFx0XHRpZihSblsxXT09PScvJyl7XG5cdFx0XHRcdFx0aWYoY29tbWVudHMubGVuZ3RoID4gMCkgY2VsbC5jID0gY29tbWVudHM7XG5cdFx0XHRcdFx0aWYoKCFvcHRzLnNoZWV0Um93cyB8fCBvcHRzLnNoZWV0Um93cyA+IHIpICYmIGNlbGwudiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRcdGlmKCFjdXJzaGVldFtyXSkgY3Vyc2hlZXRbcl0gPSBbXTtcblx0XHRcdFx0XHRcdFx0Y3Vyc2hlZXRbcl1bY10gPSBjZWxsO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGN1cnNoZWV0W2VuY29kZV9jb2woYykgKyBlbmNvZGVfcm93KHIpXSA9IGNlbGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNlbGwuSFJlZikge1xuXHRcdFx0XHRcdFx0Y2VsbC5sID0ge1RhcmdldDpjZWxsLkhSZWYsIFRvb2x0aXA6Y2VsbC5IUmVmU2NyZWVuVGlwfTtcblx0XHRcdFx0XHRcdGRlbGV0ZSBjZWxsLkhSZWY7IGRlbGV0ZSBjZWxsLkhSZWZTY3JlZW5UaXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGNlbGwuTWVyZ2VBY3Jvc3MgfHwgY2VsbC5NZXJnZURvd24pIHtcblx0XHRcdFx0XHRcdHZhciBjYyA9IGMgKyAocGFyc2VJbnQoY2VsbC5NZXJnZUFjcm9zcywxMCl8MCk7XG5cdFx0XHRcdFx0XHR2YXIgcnIgPSByICsgKHBhcnNlSW50KGNlbGwuTWVyZ2VEb3duLDEwKXwwKTtcblx0XHRcdFx0XHRcdG1lcmdlY2VsbHMucHVzaCh7czp7YzpjLHI6cn0sZTp7YzpjYyxyOnJyfX0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZighb3B0cy5zaGVldFN0dWJzKSB7IGlmKGNlbGwuTWVyZ2VBY3Jvc3MpIGMgPSBjYyArIDE7IGVsc2UgKytjOyB9XG5cdFx0XHRcdFx0ZWxzZSBpZihjZWxsLk1lcmdlQWNyb3NzIHx8IGNlbGwuTWVyZ2VEb3duKSB7XG5cdGZvcih2YXIgY21hID0gYzsgY21hIDw9IGNjOyArK2NtYSkge1xuXHRcdFx0XHRcdFx0XHRmb3IodmFyIGNtZCA9IHI7IGNtZCA8PSBycjsgKytjbWQpIHtcblx0XHRcdFx0XHRcdFx0XHRpZihjbWEgPiBjIHx8IGNtZCA+IHIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmKG9wdHMuZGVuc2UpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0W2NtZF0pIGN1cnNoZWV0W2NtZF0gPSBbXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y3Vyc2hlZXRbY21kXVtjbWFdID0ge3Q6J3onfTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBjdXJzaGVldFtlbmNvZGVfY29sKGNtYSkgKyBlbmNvZGVfcm93KGNtZCldID0ge3Q6J3onfTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGMgPSBjYyArIDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgKytjO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNlbGwgPSB4bG1sX3BhcnNleG1sdGFnb2JqKFJuWzBdKTtcblx0XHRcdFx0XHRpZihjZWxsLkluZGV4KSBjID0gK2NlbGwuSW5kZXggLSAxO1xuXHRcdFx0XHRcdGlmKGMgPCByZWZndWVzcy5zLmMpIHJlZmd1ZXNzLnMuYyA9IGM7XG5cdFx0XHRcdFx0aWYoYyA+IHJlZmd1ZXNzLmUuYykgcmVmZ3Vlc3MuZS5jID0gYztcblx0XHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikgKytjO1xuXHRcdFx0XHRcdGNvbW1lbnRzID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdSb3cnOlxuXHRcdFx0XHRpZihSblsxXT09PScvJyB8fCBSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikge1xuXHRcdFx0XHRcdGlmKHIgPCByZWZndWVzcy5zLnIpIHJlZmd1ZXNzLnMuciA9IHI7XG5cdFx0XHRcdFx0aWYociA+IHJlZmd1ZXNzLmUucikgcmVmZ3Vlc3MuZS5yID0gcjtcblx0XHRcdFx0XHRpZihSblswXS5zbGljZSgtMikgPT09IFwiLz5cIikge1xuXHRcdFx0XHRcdFx0cm93ID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdFx0XHRpZihyb3cuSW5kZXgpIHIgPSArcm93LkluZGV4IC0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YyA9IDA7ICsrcjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyb3cgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0XHRpZihyb3cuSW5kZXgpIHIgPSArcm93LkluZGV4IC0gMTtcblx0XHRcdFx0XHRyb3dvYmogPSB7fTtcblx0XHRcdFx0XHRpZihyb3cuQXV0b0ZpdEhlaWdodCA9PSBcIjBcIikge1xuXHRcdFx0XHRcdFx0cm93b2JqLmhweCA9IHBhcnNlSW50KHJvdy5IZWlnaHQsIDEwKTsgcm93b2JqLmhwdCA9IHB4MnB0KHJvd29iai5ocHgpO1xuXHRcdFx0XHRcdFx0cm93aW5mb1tyXSA9IHJvd29iajtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYocm93LkhpZGRlbiA9PSBcIjFcIikgeyByb3dvYmouaGlkZGVuID0gdHJ1ZTsgcm93aW5mb1tyXSA9IHJvd29iajsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnV29ya3NoZWV0JzogLyogVE9ETzogcmVhZCByYW5nZSBmcm9tIEZ1bGxSb3dzL0Z1bGxDb2x1bW5zICovXG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0XHRpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7XG5cdFx0XHRcdFx0c2hlZXRuYW1lcy5wdXNoKHNoZWV0bmFtZSk7XG5cdFx0XHRcdFx0aWYocmVmZ3Vlc3Mucy5yIDw9IHJlZmd1ZXNzLmUuciAmJiByZWZndWVzcy5zLmMgPD0gcmVmZ3Vlc3MuZS5jKSBjdXJzaGVldFtcIiFyZWZcIl0gPSBlbmNvZGVfcmFuZ2UocmVmZ3Vlc3MpO1xuXHRcdFx0XHRcdGlmKG1lcmdlY2VsbHMubGVuZ3RoKSBjdXJzaGVldFtcIiFtZXJnZXNcIl0gPSBtZXJnZWNlbGxzO1xuXHRcdFx0XHRcdGlmKGNzdHlzLmxlbmd0aCA+IDApIGN1cnNoZWV0W1wiIWNvbHNcIl0gPSBjc3R5cztcblx0XHRcdFx0XHRpZihyb3dpbmZvLmxlbmd0aCA+IDApIGN1cnNoZWV0W1wiIXJvd3NcIl0gPSByb3dpbmZvO1xuXHRcdFx0XHRcdHNoZWV0c1tzaGVldG5hbWVdID0gY3Vyc2hlZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVmZ3Vlc3MgPSB7czoge3I6MjAwMDAwMCwgYzoyMDAwMDAwfSwgZToge3I6MCwgYzowfSB9O1xuXHRcdFx0XHRcdHIgPSBjID0gMDtcblx0XHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0XHR0bXAgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0XHRzaGVldG5hbWUgPSB1bmVzY2FwZXhtbCh0bXAuTmFtZSk7XG5cdFx0XHRcdFx0Y3Vyc2hlZXQgPSAob3B0cy5kZW5zZSA/IFtdIDoge30pO1xuXHRcdFx0XHRcdG1lcmdlY2VsbHMgPSBbXTtcblx0XHRcdFx0XHRhcnJheWYgPSBbXTtcblx0XHRcdFx0XHRyb3dpbmZvID0gW107XG5cdFx0XHRcdFx0d3Nwcm9wcyA9IHtuYW1lOnNoZWV0bmFtZSwgSGlkZGVuOjB9O1xuXHRcdFx0XHRcdFdvcmtib29rLlNoZWV0cy5wdXNoKHdzcHJvcHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnVGFibGUnOlxuXHRcdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO31cblx0XHRcdFx0ZWxzZSBpZihSblswXS5zbGljZSgtMikgPT0gXCIvPlwiKSBicmVhaztcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0dGFibGUgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0XHRjc3R5cyA9IFtdOyBzZWVuY29sID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1N0eWxlJzpcblx0XHRcdFx0aWYoUm5bMV09PT0nLycpIHByb2Nlc3Nfc3R5bGVfeGxtbChzdHlsZXMsIHN0YWcsIG9wdHMpO1xuXHRcdFx0XHRlbHNlIHN0YWcgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ051bWJlckZvcm1hdCc6XG5cdFx0XHRcdHN0YWcubmYgPSB1bmVzY2FwZXhtbCh4bG1sX3BhcnNleG1sdGFnKFJuWzBdKS5Gb3JtYXQgfHwgXCJHZW5lcmFsXCIpO1xuXHRcdFx0XHRpZihYTE1MRm9ybWF0TWFwW3N0YWcubmZdKSBzdGFnLm5mID0gWExNTEZvcm1hdE1hcFtzdGFnLm5mXTtcblx0XHRcdFx0Zm9yKHZhciBzc2ZpZHggPSAwOyBzc2ZpZHggIT0gMHgxODg7ICsrc3NmaWR4KSBpZihTU0YuX3RhYmxlW3NzZmlkeF0gPT0gc3RhZy5uZikgYnJlYWs7XG5cdFx0XHRcdGlmKHNzZmlkeCA9PSAweDE4OCkgZm9yKHNzZmlkeCA9IDB4Mzk7IHNzZmlkeCAhPSAweDE4ODsgKytzc2ZpZHgpIGlmKFNTRi5fdGFibGVbc3NmaWR4XSA9PSBudWxsKSB7IFNTRi5sb2FkKHN0YWcubmYsIHNzZmlkeCk7IGJyZWFrOyB9XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdDb2x1bW4nOlxuXHRcdFx0XHRpZihzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0gIT09ICdUYWJsZScpIGJyZWFrO1xuXHRcdFx0XHRjc3R5ID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdGlmKGNzdHkuSGlkZGVuKSB7IGNzdHkuaGlkZGVuID0gdHJ1ZTsgZGVsZXRlIGNzdHkuSGlkZGVuOyB9XG5cdFx0XHRcdGlmKGNzdHkuV2lkdGgpIGNzdHkud3B4ID0gcGFyc2VJbnQoY3N0eS5XaWR0aCwgMTApO1xuXHRcdFx0XHRpZighc2VlbmNvbCAmJiBjc3R5LndweCA+IDEwKSB7XG5cdFx0XHRcdFx0c2VlbmNvbCA9IHRydWU7IE1EVyA9IERFRl9NRFc7IC8vZmluZF9tZHdfd3B4KGNzdHkud3B4KTtcblx0XHRcdFx0XHRmb3IodmFyIF9jb2wgPSAwOyBfY29sIDwgY3N0eXMubGVuZ3RoOyArK19jb2wpIGlmKGNzdHlzW19jb2xdKSBwcm9jZXNzX2NvbChjc3R5c1tfY29sXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoc2VlbmNvbCkgcHJvY2Vzc19jb2woY3N0eSk7XG5cdFx0XHRcdGNzdHlzWyhjc3R5LkluZGV4LTF8fGNzdHlzLmxlbmd0aCldID0gY3N0eTtcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8ICtjc3R5LlNwYW47ICsraSkgY3N0eXNbY3N0eXMubGVuZ3RoXSA9IGR1cChjc3R5KTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ05hbWVkUmFuZ2UnOlxuXHRcdFx0XHRpZighV29ya2Jvb2suTmFtZXMpIFdvcmtib29rLk5hbWVzID0gW107XG5cdFx0XHRcdHZhciBfTmFtZWRSYW5nZSA9IHBhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0dmFyIF9EZWZpbmVkTmFtZSA9IHtcblx0XHRcdFx0XHROYW1lOiBfTmFtZWRSYW5nZS5OYW1lLFxuXHRcdFx0XHRcdFJlZjogcmNfdG9fYTEoX05hbWVkUmFuZ2UuUmVmZXJzVG8uc3Vic3RyKDEpKVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpZihXb3JrYm9vay5TaGVldHMubGVuZ3RoPjApIF9EZWZpbmVkTmFtZS5TaGVldD1Xb3JrYm9vay5TaGVldHMubGVuZ3RoLTE7XG5cdFx0XHRcdFdvcmtib29rLk5hbWVzLnB1c2goX0RlZmluZWROYW1lKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ05hbWVkQ2VsbCc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnQic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnSSc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnVSc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnUyc6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnU3ViJzogYnJlYWs7XG5cdFx0XHRjYXNlICdTdXAnOiBicmVhaztcblx0XHRcdGNhc2UgJ1NwYW4nOiBicmVhaztcblx0XHRcdGNhc2UgJ0JvcmRlcic6IGJyZWFrO1xuXHRcdFx0Y2FzZSAnQWxpZ25tZW50JzogYnJlYWs7XG5cdFx0XHRjYXNlICdCb3JkZXJzJzogYnJlYWs7XG5cdFx0XHRjYXNlICdGb250Jzpcblx0XHRcdFx0aWYoUm5bMF0uc2xpY2UoLTIpID09PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHNzICs9IHN0ci5zbGljZShmaWR4LCBSbi5pbmRleCk7XG5cdFx0XHRcdGVsc2UgZmlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ0ludGVyaW9yJzpcblx0XHRcdFx0aWYoIW9wdHMuY2VsbFN0eWxlcykgYnJlYWs7XG5cdFx0XHRcdHN0YWcuSW50ZXJpb3IgPSB4bG1sX3BhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdQcm90ZWN0aW9uJzogYnJlYWs7XG5cblx0XHRcdGNhc2UgJ0F1dGhvcic6XG5cdFx0XHRjYXNlICdUaXRsZSc6XG5cdFx0XHRjYXNlICdEZXNjcmlwdGlvbic6XG5cdFx0XHRjYXNlICdDcmVhdGVkJzpcblx0XHRcdGNhc2UgJ0tleXdvcmRzJzpcblx0XHRcdGNhc2UgJ1N1YmplY3QnOlxuXHRcdFx0Y2FzZSAnQ2F0ZWdvcnknOlxuXHRcdFx0Y2FzZSAnQ29tcGFueSc6XG5cdFx0XHRjYXNlICdMYXN0QXV0aG9yJzpcblx0XHRcdGNhc2UgJ0xhc3RTYXZlZCc6XG5cdFx0XHRjYXNlICdMYXN0UHJpbnRlZCc6XG5cdFx0XHRjYXNlICdWZXJzaW9uJzpcblx0XHRcdGNhc2UgJ1JldmlzaW9uJzpcblx0XHRcdGNhc2UgJ1RvdGFsVGltZSc6XG5cdFx0XHRjYXNlICdIeXBlcmxpbmtCYXNlJzpcblx0XHRcdGNhc2UgJ01hbmFnZXInOlxuXHRcdFx0Y2FzZSAnQ29udGVudFN0YXR1cyc6XG5cdFx0XHRjYXNlICdJZGVudGlmaWVyJzpcblx0XHRcdGNhc2UgJ0xhbmd1YWdlJzpcblx0XHRcdFx0aWYoUm5bMF0uc2xpY2UoLTIpID09PSBcIi8+XCIpIGJyZWFrO1xuXHRcdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHhsbWxfc2V0X3Byb3AoUHJvcHMsIFJuWzNdLCBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKTtcblx0XHRcdFx0ZWxzZSBwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnUGFyYWdyYXBocyc6IGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTdHlsZXMnOlxuXHRcdFx0Y2FzZSAnV29ya2Jvb2snOlxuXHRcdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO31cblx0XHRcdFx0ZWxzZSBzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0NvbW1lbnQnOlxuXHRcdFx0XHRpZihSblsxXT09PScvJyl7XG5cdFx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHN0YXRlOiBcIit0bXAuam9pbihcInxcIikpO1xuXHRcdFx0XHRcdHhsbWxfY2xlYW5fY29tbWVudChjb21tZW50KTtcblx0XHRcdFx0XHRjb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO1xuXHRcdFx0XHRcdHRtcCA9IHhsbWxfcGFyc2V4bWx0YWcoUm5bMF0pO1xuXHRcdFx0XHRcdGNvbW1lbnQgPSB7YTp0bXAuQXV0aG9yfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQXV0b0ZpbHRlcic6XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7fVxuXHRcdFx0XHRlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykge1xuXHRcdFx0XHRcdHZhciBBdXRvRmlsdGVyID0geGxtbF9wYXJzZXhtbHRhZyhSblswXSk7XG5cdFx0XHRcdFx0Y3Vyc2hlZXRbJyFhdXRvZmlsdGVyJ10gPSB7IHJlZjpyY190b19hMShBdXRvRmlsdGVyLlJhbmdlKS5yZXBsYWNlKC9cXCQvZyxcIlwiKSB9O1xuXHRcdFx0XHRcdHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ05hbWUnOiBicmVhaztcblxuXHRcdFx0Y2FzZSAnQ29tcG9uZW50T3B0aW9ucyc6XG5cdFx0XHRjYXNlICdEb2N1bWVudFByb3BlcnRpZXMnOlxuXHRcdFx0Y2FzZSAnQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzJzpcblx0XHRcdGNhc2UgJ09mZmljZURvY3VtZW50U2V0dGluZ3MnOlxuXHRcdFx0Y2FzZSAnUGl2b3RUYWJsZSc6XG5cdFx0XHRjYXNlICdQaXZvdENhY2hlJzpcblx0XHRcdGNhc2UgJ05hbWVzJzpcblx0XHRcdGNhc2UgJ01hcEluZm8nOlxuXHRcdFx0Y2FzZSAnUGFnZUJyZWFrcyc6XG5cdFx0XHRjYXNlICdRdWVyeVRhYmxlJzpcblx0XHRcdGNhc2UgJ0RhdGFWYWxpZGF0aW9uJzpcblx0XHRcdGNhc2UgJ1NvcnRpbmcnOlxuXHRcdFx0Y2FzZSAnU2NoZW1hJzpcblx0XHRcdGNhc2UgJ2RhdGEnOlxuXHRcdFx0Y2FzZSAnQ29uZGl0aW9uYWxGb3JtYXR0aW5nJzpcblx0XHRcdGNhc2UgJ1NtYXJ0VGFnVHlwZSc6XG5cdFx0XHRjYXNlICdTbWFydFRhZ3MnOlxuXHRcdFx0Y2FzZSAnRXhjZWxXb3JrYm9vayc6XG5cdFx0XHRjYXNlICdXb3JrYm9va09wdGlvbnMnOlxuXHRcdFx0Y2FzZSAnV29ya3NoZWV0T3B0aW9ucyc6XG5cdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtpZigodG1wPXN0YXRlLnBvcCgpKVswXSE9PVJuWzNdKSB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgc3RhdGU6IFwiK3RtcC5qb2luKFwifFwiKSk7fVxuXHRcdFx0XHRlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykgc3RhdGUucHVzaChbUm5bM10sIHRydWVdKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdC8qIEZPRFMgZmlsZSByb290IGlzIDxvZmZpY2U6ZG9jdW1lbnQ+ICovXG5cdFx0XHRcdGlmKHN0YXRlLmxlbmd0aCA9PSAwICYmIFJuWzNdID09IFwiZG9jdW1lbnRcIikgcmV0dXJuIHBhcnNlX2ZvZHMoc3RyLCBvcHRzKTtcblx0XHRcdFx0LyogVU9TIGZpbGUgcm9vdCBpcyA8dW9mOlVPRj4gKi9cblx0XHRcdFx0aWYoc3RhdGUubGVuZ3RoID09IDAgJiYgUm5bM10gPT0gXCJVT0ZcIikgcmV0dXJuIHBhcnNlX2ZvZHMoc3RyLCBvcHRzKTtcblxuXHRcdFx0XHR2YXIgc2VlbiA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaChzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pIHtcblx0XHRcdFx0XHQvKiBPZmZpY2VEb2N1bWVudFNldHRpbmdzICovXG5cdFx0XHRcdFx0Y2FzZSAnT2ZmaWNlRG9jdW1lbnRTZXR0aW5ncyc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dQTkcnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JlbW92ZVBlcnNvbmFsSW5mb3JtYXRpb24nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Rvd25sb2FkQ29tcG9uZW50cyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTG9jYXRpb25PZkNvbXBvbmVudHMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NvbG9ycyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29sb3InOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0luZGV4JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSR0InOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1BpeGVsc1BlckluY2gnOiBicmVhazsgLy8gVE9ETzogc2V0IFBQSVxuXHRcdFx0XHRcdFx0Y2FzZSAnVGFyZ2V0U2NyZWVuU2l6ZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUmVhZE9ubHlSZWNvbW1lbmRlZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBDb21wb25lbnRPcHRpb25zICovXG5cdFx0XHRcdFx0Y2FzZSAnQ29tcG9uZW50T3B0aW9ucyc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnVG9vbGJhcic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnSGlkZU9mZmljZUxvZ28nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1NwcmVhZHNoZWV0QXV0b0ZpdCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTGFiZWwnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NhcHRpb24nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01heEhlaWdodCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTWF4V2lkdGgnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ05leHRTaGVldE51bWJlcic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBFeGNlbFdvcmtib29rICovXG5cdFx0XHRcdFx0Y2FzZSAnRXhjZWxXb3JrYm9vayc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnV2luZG93SGVpZ2h0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdXaW5kb3dXaWR0aCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnV2luZG93VG9wWCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnV2luZG93VG9wWSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVGFiUmF0aW8nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1Byb3RlY3RTdHJ1Y3R1cmUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1Byb3RlY3RXaW5kb3dzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBY3RpdmVTaGVldCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRGlzcGxheUlua05vdGVzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGaXJzdFZpc2libGVTaGVldCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU3VwQm9vayc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2hlZXROYW1lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdTaGVldEluZGV4JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdTaGVldEluZGV4Rmlyc3QnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1NoZWV0SW5kZXhMYXN0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEbGwnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0FjY2VwdExhYmVsc0luRm9ybXVsYXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0RvTm90U2F2ZUxpbmtWYWx1ZXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0RhdGUxOTA0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdJdGVyYXRpb24nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01heEl0ZXJhdGlvbnMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01heENoYW5nZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUGF0aCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnWGN0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdDb3VudCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2VsZWN0ZWRTaGVldHMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NhbGN1bGF0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdVbmNhbGNlZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU3RhcnR1cFByb21wdCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ3JuJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdFeHRlcm5OYW1lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGb3JtdWxhJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdDb2xGaXJzdCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29sTGFzdCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnV2FudEFkdmlzZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQm9vbGVhbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRXJyb3InOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1RleHQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ09MRSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm9BdXRvUmVjb3Zlcic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUHVibGlzaE9iamVjdHMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0RvTm90Q2FsY3VsYXRlQmVmb3JlU2F2ZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTnVtYmVyJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSZWZNb2RlUjFDMSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRW1iZWRTYXZlU21hcnRUYWdzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdC8qIFdvcmtib29rT3B0aW9ucyAqL1xuXHRcdFx0XHRcdGNhc2UgJ1dvcmtib29rT3B0aW9ucyc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnT1dDVmVyc2lvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnSGVpZ2h0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdXaWR0aCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBXb3Jrc2hlZXRPcHRpb25zICovXG5cdFx0XHRcdFx0Y2FzZSAnV29ya3NoZWV0T3B0aW9ucyc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmlzaWJsZSc6XG5cdFx0XHRcdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKXsvKiBlbXB0eSAqL31cblx0XHRcdFx0XHRcdFx0ZWxzZSBpZihSblsxXT09PVwiL1wiKSBzd2l0Y2goc3RyLnNsaWNlKHBpZHgsIFJuLmluZGV4KSkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJTaGVldEhpZGRlblwiOiB3c3Byb3BzLkhpZGRlbiA9IDE7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJTaGVldFZlcnlIaWRkZW5cIjogd3Nwcm9wcy5IaWRkZW4gPSAyOyBicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRlbHNlIHBpZHggPSBSbi5pbmRleCArIFJuWzBdLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdIZWFkZXInOlxuXHRcdFx0XHRcdFx0XHRpZighY3Vyc2hlZXRbJyFtYXJnaW5zJ10pIGRlZmF1bHRfbWFyZ2lucyhjdXJzaGVldFsnIW1hcmdpbnMnXT17fSwgJ3hsbWwnKTtcblx0XHRcdFx0XHRcdFx0Y3Vyc2hlZXRbJyFtYXJnaW5zJ10uaGVhZGVyID0gcGFyc2V4bWx0YWcoUm5bMF0pLk1hcmdpbjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGb290ZXInOlxuXHRcdFx0XHRcdFx0XHRpZighY3Vyc2hlZXRbJyFtYXJnaW5zJ10pIGRlZmF1bHRfbWFyZ2lucyhjdXJzaGVldFsnIW1hcmdpbnMnXT17fSwgJ3hsbWwnKTtcblx0XHRcdFx0XHRcdFx0Y3Vyc2hlZXRbJyFtYXJnaW5zJ10uZm9vdGVyID0gcGFyc2V4bWx0YWcoUm5bMF0pLk1hcmdpbjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQYWdlTWFyZ2lucyc6XG5cdFx0XHRcdFx0XHRcdHZhciBwYWdlbWFyZ2lucyA9IHBhcnNleG1sdGFnKFJuWzBdKTtcblx0XHRcdFx0XHRcdFx0aWYoIWN1cnNoZWV0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMoY3Vyc2hlZXRbJyFtYXJnaW5zJ109e30sJ3hsbWwnKTtcblx0XHRcdFx0XHRcdFx0aWYocGFnZW1hcmdpbnMuVG9wKSBjdXJzaGVldFsnIW1hcmdpbnMnXS50b3AgPSBwYWdlbWFyZ2lucy5Ub3A7XG5cdFx0XHRcdFx0XHRcdGlmKHBhZ2VtYXJnaW5zLkxlZnQpIGN1cnNoZWV0WychbWFyZ2lucyddLmxlZnQgPSBwYWdlbWFyZ2lucy5MZWZ0O1xuXHRcdFx0XHRcdFx0XHRpZihwYWdlbWFyZ2lucy5SaWdodCkgY3Vyc2hlZXRbJyFtYXJnaW5zJ10ucmlnaHQgPSBwYWdlbWFyZ2lucy5SaWdodDtcblx0XHRcdFx0XHRcdFx0aWYocGFnZW1hcmdpbnMuQm90dG9tKSBjdXJzaGVldFsnIW1hcmdpbnMnXS5ib3R0b20gPSBwYWdlbWFyZ2lucy5Cb3R0b207XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVW5zeW5jZWQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1ByaW50JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQYW5lcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2NhbGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1BhbmUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ051bWJlcic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTGF5b3V0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQYWdlU2V0dXAnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1NlbGVjdGVkJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQcm90ZWN0T2JqZWN0cyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRW5hYmxlU2VsZWN0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQcm90ZWN0U2NlbmFyaW9zJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdWYWxpZFByaW50ZXJJbmZvJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdIb3Jpem9udGFsUmVzb2x1dGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmVydGljYWxSZXNvbHV0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdOdW1iZXJvZkNvcGllcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWN0aXZlUm93JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBY3RpdmVDb2wnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0FjdGl2ZVBhbmUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1RvcFJvd1Zpc2libGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1RvcFJvd0JvdHRvbVBhbmUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0xlZnRDb2x1bW5WaXNpYmxlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMZWZ0Q29sdW1uUmlnaHRQYW5lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGaXRUb1BhZ2UnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JhbmdlU2VsZWN0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQYXBlclNpemVJbmRleCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUGFnZUxheW91dFpvb20nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1BhZ2VCcmVha1pvb20nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0ZpbHRlck9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEb05vdERpc3BsYXlHcmlkbGluZXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1NwbGl0SG9yaXpvbnRhbCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU3BsaXRWZXJ0aWNhbCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRnJlZXplUGFuZXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Zyb3plbk5vU3BsaXQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0ZpdFdpZHRoJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGaXRIZWlnaHQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NvbW1lbnRzTGF5b3V0JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdab29tJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMZWZ0VG9SaWdodCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnR3JpZGxpbmVzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBbGxvd1NvcnQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0FsbG93RmlsdGVyJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBbGxvd0luc2VydFJvd3MnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0FsbG93RGVsZXRlUm93cyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dJbnNlcnRDb2xzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBbGxvd0RlbGV0ZUNvbHMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0FsbG93SW5zZXJ0SHlwZXJsaW5rcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dGb3JtYXRDZWxscyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dTaXplQ29scyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dTaXplUm93cyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm9TdW1tYXJ5Um93c0JlbG93RGV0YWlsJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdUYWJDb2xvckluZGV4JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEb05vdERpc3BsYXlIZWFkaW5ncyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2hvd1BhZ2VMYXlvdXRab29tJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdOb1N1bW1hcnlDb2x1bW5zUmlnaHREZXRhaWwnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0JsYWNrQW5kV2hpdGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0RvTm90RGlzcGxheVplcm9zJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEaXNwbGF5UGFnZUJyZWFrJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSb3dDb2xIZWFkaW5ncyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRG9Ob3REaXNwbGF5T3V0bGluZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm9PcmllbnRhdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQWxsb3dVc2VQaXZvdFRhYmxlcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnWmVyb0hlaWdodCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmlld2FibGVSYW5nZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2VsZWN0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQcm90ZWN0Q29udGVudHMnOiBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogUGl2b3RUYWJsZSAqL1xuXHRcdFx0XHRcdGNhc2UgJ1Bpdm90VGFibGUnOiBjYXNlICdQaXZvdENhY2hlJzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdJbW1lZGlhdGVJdGVtc09uRHJvcCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU2hvd1BhZ2VNdWx0aXBsZUl0ZW1MYWJlbCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29tcGFjdFJvd0luZGVudCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTG9jYXRpb24nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1Bpdm90RmllbGQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ09yaWVudGF0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMYXlvdXRGb3JtJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMYXlvdXRTdWJ0b3RhbExvY2F0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdMYXlvdXRDb21wYWN0Um93JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQb3NpdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUGl2b3RJdGVtJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEYXRhVHlwZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRGF0YUZpZWxkJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdTb3VyY2VOYW1lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQYXJlbnRGaWVsZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUFRMaW5lSXRlbXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1BUTGluZUl0ZW0nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NvdW50T2ZTYW1lSXRlbXMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0l0ZW0nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0l0ZW1UeXBlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdQVFNvdXJjZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ2FjaGVJbmRleCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29uc29saWRhdGlvblJlZmVyZW5jZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRmlsZU5hbWUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JlZmVyZW5jZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm9Db2x1bW5HcmFuZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTm9Sb3dHcmFuZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQmxhbmtMaW5lQWZ0ZXJJdGVtcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnSGlkZGVuJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdTdWJ0b3RhbCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQmFzZUZpZWxkJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdNYXBDaGlsZEl0ZW1zJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGdW5jdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUmVmcmVzaE9uRmlsZU9wZW4nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1ByaW50U2V0VGl0bGVzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdNZXJnZUxhYmVscyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRGVmYXVsdFZlcnNpb24nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JlZnJlc2hOYW1lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSZWZyZXNoRGF0ZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUmVmcmVzaERhdGVDb3B5JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdWZXJzaW9uTGFzdFJlZnJlc2gnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1ZlcnNpb25MYXN0VXBkYXRlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdWZXJzaW9uVXBkYXRlYWJsZU1pbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmVyc2lvblJlZnJlc2hhYmxlTWluJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdDYWxjdWxhdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBQYWdlQnJlYWtzICovXG5cdFx0XHRcdFx0Y2FzZSAnUGFnZUJyZWFrcyc6IHN3aXRjaChSblszXSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29sQnJlYWtzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdDb2xCcmVhayc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUm93QnJlYWtzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdSb3dCcmVhayc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29sU3RhcnQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NvbEVuZCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUm93RW5kJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdC8qIEF1dG9GaWx0ZXIgKi9cblx0XHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyJzogc3dpdGNoKFJuWzNdKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyQ29sdW1uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyQ29uZGl0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyQW5kJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBdXRvRmlsdGVyT3InOiBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IHNlZW4gPSBmYWxzZTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogUXVlcnlUYWJsZSAqL1xuXHRcdFx0XHRcdGNhc2UgJ1F1ZXJ5VGFibGUnOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ0lkJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBdXRvRm9ybWF0Rm9udCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQXV0b0Zvcm1hdFBhdHRlcm4nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1F1ZXJ5U291cmNlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdRdWVyeVR5cGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0VuYWJsZVJlZGlyZWN0aW9ucyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUmVmcmVzaGVkSW5YbDknOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1VSTFN0cmluZyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnSFRNTFRhYmxlcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29ubmVjdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29tbWFuZFRleHQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JlZnJlc2hJbmZvJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdOb1RpdGxlcyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTmV4dElkJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdDb2x1bW5JbmZvJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdPdmVyd3JpdGVDZWxscyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRG9Ob3RQcm9tcHRGb3JGaWxlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdUZXh0V2l6YXJkU2V0dGluZ3MnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1NvdXJjZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnTnVtYmVyJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdEZWNpbWFsJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdUaG91c2FuZFNlcGFyYXRvcic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVHJhaWxpbmdNaW51c051bWJlcnMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Zvcm1hdFNldHRpbmdzJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdGaWVsZFR5cGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0RlbGltaXRlcnMnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1RhYic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29tbWEnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0F1dG9Gb3JtYXROYW1lJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdWZXJzaW9uTGFzdEVkaXQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1ZlcnNpb25MYXN0UmVmcmVzaCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdTb3J0aW5nJzpcblx0XHRcdFx0XHRjYXNlICdDb25kaXRpb25hbEZvcm1hdHRpbmcnOlxuXHRcdFx0XHRcdGNhc2UgJ0RhdGFWYWxpZGF0aW9uJzpcblx0XHRcdFx0XHRzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ1JhbmdlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdUeXBlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdNaW4nOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ01heCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnU29ydCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRGVzY2VuZGluZyc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnT3JkZXInOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Nhc2VTZW5zaXRpdmUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1ZhbHVlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdFcnJvclN0eWxlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdFcnJvck1lc3NhZ2UnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Vycm9yVGl0bGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NlbGxSYW5nZUxpc3QnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0lucHV0TWVzc2FnZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnSW5wdXRUaXRsZSc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnQ29tYm9IaWRlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdJbnB1dEhpZGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0NvbmRpdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnUXVhbGlmaWVyJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdVc2VCbGFuayc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnVmFsdWUxJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdWYWx1ZTInOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0Zvcm1hdCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBNYXBJbmZvIChzY2hlbWEpICovXG5cdFx0XHRcdFx0Y2FzZSAnTWFwSW5mbyc6IGNhc2UgJ1NjaGVtYSc6IGNhc2UgJ2RhdGEnOiBzd2l0Y2goUm5bM10pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ01hcCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRW50cnknOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1JhbmdlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdYUGF0aCc6IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnRmllbGQnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ1hTRFR5cGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0ZpbHRlck9uJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBZ2dyZWdhdGUnOiBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ0VsZW1lbnRUeXBlJzogYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdBdHRyaWJ1dGVUeXBlJzogYnJlYWs7XG5cdFx0XHRcdFx0LyogVGhlc2UgYXJlIGZyb20geHNkIChYTUwgU2NoZW1hIERlZmluaXRpb24pICovXG5cdFx0XHRcdFx0XHRjYXNlICdzY2hlbWEnOlxuXHRcdFx0XHRcdFx0Y2FzZSAnZWxlbWVudCc6XG5cdFx0XHRcdFx0XHRjYXNlICdjb21wbGV4VHlwZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdkYXRhdHlwZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdhbGwnOlxuXHRcdFx0XHRcdFx0Y2FzZSAnYXR0cmlidXRlJzpcblx0XHRcdFx0XHRcdGNhc2UgJ2V4dGVuZHMnOiBicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSAncm93JzogYnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OiBzZWVuID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdC8qIFNtYXJ0VGFncyAoY2FuIGJlIGFueXRoaW5nKSAqL1xuXHRcdFx0XHRcdGNhc2UgJ1NtYXJ0VGFncyc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDogc2VlbiA9IGZhbHNlOyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihzZWVuKSBicmVhaztcblx0XHRcdFx0LyogQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzICovXG5cdFx0XHRcdGlmKCFzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMV0pIHRocm93ICdVbnJlY29nbml6ZWQgdGFnOiAnICsgUm5bM10gKyBcInxcIiArIHN0YXRlLmpvaW4oXCJ8XCIpO1xuXHRcdFx0XHRpZihzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF09PT0nQ3VzdG9tRG9jdW1lbnRQcm9wZXJ0aWVzJykge1xuXHRcdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSBicmVhaztcblx0XHRcdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHhsbWxfc2V0X2N1c3Rwcm9wKEN1c3Rwcm9wcywgUm4sIGNwLCBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpKTtcblx0XHRcdFx0XHRlbHNlIHsgY3AgPSBSbjsgcGlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoOyB9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYob3B0cy5XVEYpIHRocm93ICdVbnJlY29nbml6ZWQgdGFnOiAnICsgUm5bM10gKyBcInxcIiArIHN0YXRlLmpvaW4oXCJ8XCIpO1xuXHRcdH1cblx0XHR2YXIgb3V0ID0gKHt9KTtcblx0XHRpZighb3B0cy5ib29rU2hlZXRzICYmICFvcHRzLmJvb2tQcm9wcykgb3V0LlNoZWV0cyA9IHNoZWV0cztcblx0XHRvdXQuU2hlZXROYW1lcyA9IHNoZWV0bmFtZXM7XG5cdFx0b3V0Lldvcmtib29rID0gV29ya2Jvb2s7XG5cdFx0b3V0LlNTRiA9IFNTRi5nZXRfdGFibGUoKTtcblx0XHRvdXQuUHJvcHMgPSBQcm9wcztcblx0XHRvdXQuQ3VzdHByb3BzID0gQ3VzdHByb3BzO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV94bG1sKGRhdGEsIG9wdHMpIHtcblx0XHRmaXhfcmVhZF9vcHRzKG9wdHM9b3B0c3x8e30pO1xuXHRcdHN3aXRjaChvcHRzLnR5cGV8fFwiYmFzZTY0XCIpIHtcblx0XHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIHBhcnNlX3hsbWxfeG1sKEJhc2U2NC5kZWNvZGUoZGF0YSksIG9wdHMpO1xuXHRcdFx0Y2FzZSBcImJpbmFyeVwiOiBjYXNlIFwiYnVmZmVyXCI6IGNhc2UgXCJmaWxlXCI6IHJldHVybiBwYXJzZV94bG1sX3htbChkYXRhLCBvcHRzKTtcblx0XHRcdGNhc2UgXCJhcnJheVwiOiByZXR1cm4gcGFyc2VfeGxtbF94bWwoZGF0YS5tYXAoX2Nocikuam9pbihcIlwiKSwgb3B0cyk7XG5cdFx0fVxuXHR9XG5cblx0LyogVE9ETyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9wcm9wc194bG1sKHdiLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHQvKiBEb2N1bWVudFByb3BlcnRpZXMgKi9cblx0XHRpZih3Yi5Qcm9wcykgby5wdXNoKHhsbWxfd3JpdGVfZG9jcHJvcHMod2IuUHJvcHMsIG9wdHMpKTtcblx0XHQvKiBDdXN0b21Eb2N1bWVudFByb3BlcnRpZXMgKi9cblx0XHRpZih3Yi5DdXN0cHJvcHMpIG8ucHVzaCh4bG1sX3dyaXRlX2N1c3Rwcm9wcyh3Yi5Qcm9wcywgd2IuQ3VzdHByb3BzLCBvcHRzKSk7XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHQvKiBUT0RPICovXG5cdGZ1bmN0aW9uIHdyaXRlX3diX3hsbWwod2IsIG9wdHMpIHtcblx0XHQvKiBPZmZpY2VEb2N1bWVudFNldHRpbmdzICovXG5cdFx0LyogRXhjZWxXb3JrYm9vayAqL1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cdC8qIFRPRE8gKi9cblx0ZnVuY3Rpb24gd3JpdGVfc3R5X3hsbWwod2IsIG9wdHMpIHtcblx0XHQvKiBTdHlsZXMgKi9cblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXHQvKiBXb3Jrc2hlZXRPcHRpb25zICovXG5cdGZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfd3NvcHRzKHdzLCBvcHRzLCBpZHgsIHdiKSB7XG5cdFx0aWYoIXdzKSByZXR1cm4gXCJcIjtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdC8qIE5PVEU6IHNwZWMgdGVjaG5pY2FsbHkgYWxsb3dzIGFueSBvcmRlciwgYnV0IHN0aWNrIHdpdGggaW1wbGllZCBvcmRlciAqL1xuXG5cdFx0LyogRml0VG9QYWdlICovXG5cdFx0LyogRG9Ob3REaXNwbGF5Q29sSGVhZGVycyAqL1xuXHRcdC8qIERvTm90RGlzcGxheVJvd0hlYWRlcnMgKi9cblx0XHQvKiBWaWV3YWJsZVJhbmdlICovXG5cdFx0LyogU2VsZWN0aW9uICovXG5cdFx0LyogR3JpZGxpbmVDb2xvciAqL1xuXHRcdC8qIE5hbWUgKi9cblx0XHQvKiBFeGNlbFdvcmtzaGVldFR5cGUgKi9cblx0XHQvKiBJbnRsTWFjcm8gKi9cblx0XHQvKiBVbnN5bmNlZCAqL1xuXHRcdC8qIFNlbGVjdGVkICovXG5cdFx0LyogQ29kZU5hbWUgKi9cblxuXHRcdGlmKHdzWychbWFyZ2lucyddKSB7XG5cdFx0XHRvLnB1c2goXCI8UGFnZVNldHVwPlwiKTtcblx0XHRcdGlmKHdzWychbWFyZ2lucyddLmhlYWRlcikgby5wdXNoKHdyaXRleHRhZyhcIkhlYWRlclwiLCBudWxsLCB7J3g6TWFyZ2luJzp3c1snIW1hcmdpbnMnXS5oZWFkZXJ9KSk7XG5cdFx0XHRpZih3c1snIW1hcmdpbnMnXS5mb290ZXIpIG8ucHVzaCh3cml0ZXh0YWcoXCJGb290ZXJcIiwgbnVsbCwgeyd4Ok1hcmdpbic6d3NbJyFtYXJnaW5zJ10uZm9vdGVyfSkpO1xuXHRcdFx0by5wdXNoKHdyaXRleHRhZyhcIlBhZ2VNYXJnaW5zXCIsIG51bGwsIHtcblx0XHRcdFx0J3g6Qm90dG9tJzogd3NbJyFtYXJnaW5zJ10uYm90dG9tIHx8IFwiMC43NVwiLFxuXHRcdFx0XHQneDpMZWZ0Jzogd3NbJyFtYXJnaW5zJ10ubGVmdCB8fCBcIjAuN1wiLFxuXHRcdFx0XHQneDpSaWdodCc6IHdzWychbWFyZ2lucyddLnJpZ2h0IHx8IFwiMC43XCIsXG5cdFx0XHRcdCd4OlRvcCc6IHdzWychbWFyZ2lucyddLnRvcCB8fCBcIjAuNzVcIlxuXHRcdFx0fSkpO1xuXHRcdFx0by5wdXNoKFwiPC9QYWdlU2V0dXA+XCIpO1xuXHRcdH1cblxuXHRcdC8qIFBhZ2VTZXR1cCAqL1xuXHRcdC8qIERpc3BsYXlQYWdlQnJlYWsgKi9cblx0XHQvKiBUcmFuc2l0aW9uRXhwcmVzc2lvbkV2YWx1YXRpb24gKi9cblx0XHQvKiBUcmFuc2l0aW9uRm9ybXVsYUVudHJ5ICovXG5cdFx0LyogUHJpbnQgKi9cblx0XHQvKiBab29tICovXG5cdFx0LyogUGFnZUxheW91dFpvb20gKi9cblx0XHQvKiBQYWdlQnJlYWtab29tICovXG5cdFx0LyogU2hvd1BhZ2VCcmVha1pvb20gKi9cblx0XHQvKiBEZWZhdWx0Um93SGVpZ2h0ICovXG5cdFx0LyogRGVmYXVsdENvbHVtbldpZHRoICovXG5cdFx0LyogU3RhbmRhcmRXaWR0aCAqL1xuXG5cdFx0aWYod2IgJiYgd2IuV29ya2Jvb2sgJiYgd2IuV29ya2Jvb2suU2hlZXRzICYmIHdiLldvcmtib29rLlNoZWV0c1tpZHhdKSB7XG5cdFx0XHQvKiBWaXNpYmxlICovXG5cdFx0XHRpZih3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XS5IaWRkZW4pIG8ucHVzaCh3cml0ZXh0YWcoXCJWaXNpYmxlXCIsICh3Yi5Xb3JrYm9vay5TaGVldHNbaWR4XS5IaWRkZW4gPT0gMSA/IFwiU2hlZXRIaWRkZW5cIiA6IFwiU2hlZXRWZXJ5SGlkZGVuXCIpLCB7fSkpO1xuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8qIFNlbGVjdGVkICovXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBpZHg7ICsraSkgaWYod2IuV29ya2Jvb2suU2hlZXRzW2ldICYmICF3Yi5Xb3JrYm9vay5TaGVldHNbaV0uSGlkZGVuKSBicmVhaztcblx0XHRcdFx0aWYoaSA9PSBpZHgpIG8ucHVzaChcIjxTZWxlY3RlZC8+XCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8qIExlZnRDb2x1bW5WaXNpYmxlICovXG5cdFx0LyogRGlzcGxheVJpZ2h0VG9MZWZ0ICovXG5cdFx0LyogR3JpZGxpbmVDb2xvckluZGV4ICovXG5cdFx0LyogRGlzcGxheUZvcm11bGFzICovXG5cdFx0LyogRG9Ob3REaXNwbGF5R3JpZGxpbmVzICovXG5cdFx0LyogRG9Ob3REaXNwbGF5SGVhZGluZ3MgKi9cblx0XHQvKiBEb05vdERpc3BsYXlPdXRsaW5lICovXG5cdFx0LyogQXBwbHlBdXRvbWF0aWNPdXRsaW5lU3R5bGVzICovXG5cdFx0LyogTm9TdW1tYXJ5Um93c0JlbG93RGV0YWlsICovXG5cdFx0LyogTm9TdW1tYXJ5Q29sdW1uc1JpZ2h0RGV0YWlsICovXG5cdFx0LyogRG9Ob3REaXNwbGF5WmVyb3MgKi9cblx0XHQvKiBBY3RpdmVSb3cgKi9cblx0XHQvKiBBY3RpdmVDb2x1bW4gKi9cblx0XHQvKiBGaWx0ZXJPbiAqL1xuXHRcdC8qIFJhbmdlU2VsZWN0aW9uICovXG5cdFx0LyogVG9wUm93VmlzaWJsZSAqL1xuXHRcdC8qIFRvcFJvd0JvdHRvbVBhbmUgKi9cblx0XHQvKiBMZWZ0Q29sdW1uUmlnaHRQYW5lICovXG5cdFx0LyogQWN0aXZlUGFuZSAqL1xuXHRcdC8qIFNwbGl0SG9yaXpvbnRhbCAqL1xuXHRcdC8qIFNwbGl0VmVydGljYWwgKi9cblx0XHQvKiBGcmVlemVQYW5lcyAqL1xuXHRcdC8qIEZyb3plbk5vU3BsaXQgKi9cblx0XHQvKiBUYWJDb2xvckluZGV4ICovXG5cdFx0LyogUGFuZXMgKi9cblxuXHRcdC8qIE5PVEU6IFBhc3N3b3JkIG5vdCBzdXBwb3J0ZWQgaW4gWExNTCBGb3JtYXQgKi9cblx0XHRpZih3c1snIXByb3RlY3QnXSkge1xuXHRcdFx0by5wdXNoKHdyaXRldGFnKFwiUHJvdGVjdENvbnRlbnRzXCIsIFwiVHJ1ZVwiKSk7XG5cdFx0XHRpZih3c1snIXByb3RlY3QnXS5vYmplY3RzKSBvLnB1c2god3JpdGV0YWcoXCJQcm90ZWN0T2JqZWN0c1wiLCBcIlRydWVcIikpO1xuXHRcdFx0aWYod3NbJyFwcm90ZWN0J10uc2NlbmFyaW9zKSBvLnB1c2god3JpdGV0YWcoXCJQcm90ZWN0U2NlbmFyaW9zXCIsIFwiVHJ1ZVwiKSk7XG5cdFx0XHRpZih3c1snIXByb3RlY3QnXS5zZWxlY3RMb2NrZWRDZWxscyAhPSBudWxsICYmICF3c1snIXByb3RlY3QnXS5zZWxlY3RMb2NrZWRDZWxscykgby5wdXNoKHdyaXRldGFnKFwiRW5hYmxlU2VsZWN0aW9uXCIsIFwiTm9TZWxlY3Rpb25cIikpO1xuXHRcdFx0ZWxzZSBpZih3c1snIXByb3RlY3QnXS5zZWxlY3RVbmxvY2tlZENlbGxzICE9IG51bGwgJiYgIXdzWychcHJvdGVjdCddLnNlbGVjdFVubG9ja2VkQ2VsbHMpIG8ucHVzaCh3cml0ZXRhZyhcIkVuYWJsZVNlbGVjdGlvblwiLCBcIlVubG9ja2VkQ2VsbHNcIikpO1xuXHRcdFtcblx0XHRcdFsgXCJmb3JtYXRDb2x1bW5zXCIsIFwiQWxsb3dGb3JtYXRDZWxsc1wiIF0sXG5cdFx0XHRbIFwiZm9ybWF0Um93c1wiLCBcIkFsbG93U2l6ZUNvbHNcIiBdLFxuXHRcdFx0WyBcImZvcm1hdENlbGxzXCIsIFwiQWxsb3dTaXplUm93c1wiIF0sXG5cdFx0XHRbIFwiaW5zZXJ0Q29sdW1uc1wiLCBcIkFsbG93SW5zZXJ0Q29sc1wiIF0sXG5cdFx0XHRbIFwiaW5zZXJ0Um93c1wiLCBcIkFsbG93SW5zZXJ0Um93c1wiIF0sXG5cdFx0XHRbIFwiaW5zZXJ0SHlwZXJsaW5rc1wiLCBcIkFsbG93SW5zZXJ0SHlwZXJsaW5rc1wiIF0sXG5cdFx0XHRbIFwiZGVsZXRlQ29sdW1uc1wiLCBcIkFsbG93RGVsZXRlQ29sc1wiIF0sXG5cdFx0XHRbIFwiZGVsZXRlUm93c1wiLCBcIkFsbG93RGVsZXRlUm93c1wiIF0sXG5cdFx0XHRbIFwic29ydFwiLCBcIkFsbG93U29ydFwiIF0sXG5cdFx0XHRbIFwiYXV0b0ZpbHRlclwiLCBcIkFsbG93RmlsdGVyXCIgXSxcblx0XHRcdFsgXCJwaXZvdFRhYmxlc1wiLCBcIkFsbG93VXNlUGl2b3RUYWJsZXNcIiBdXG5cdFx0XS5mb3JFYWNoKGZ1bmN0aW9uKHgpIHsgaWYod3NbJyFwcm90ZWN0J11beFswXV0pIG8ucHVzaChcIjxcIit4WzFdK1wiLz5cIik7IH0pO1xuXHRcdH1cblxuXHRcdGlmKG8ubGVuZ3RoID09IDApIHJldHVybiBcIlwiO1xuXHRcdHJldHVybiB3cml0ZXh0YWcoXCJXb3Jrc2hlZXRPcHRpb25zXCIsIG8uam9pbihcIlwiKSwge3htbG5zOlhMTUxOUy54fSk7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfd3NfeGxtbF9jb21tZW50KGNvbW1lbnRzKSB7XG5cdFx0cmV0dXJuIGNvbW1lbnRzLm1hcChmdW5jdGlvbihjKSB7XG5cdFx0XHQvLyBUT0RPOiBmb3JtYXR0ZWQgdGV4dFxuXHRcdFx0dmFyIHQgPSB4bG1sX3VuZml4c3RyKGMudHx8XCJcIik7XG5cdFx0XHR2YXIgZCA9d3JpdGV4dGFnKFwic3M6RGF0YVwiLCB0LCB7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MFwifSk7XG5cdFx0XHRyZXR1cm4gd3JpdGV4dGFnKFwiQ29tbWVudFwiLCBkLCB7XCJzczpBdXRob3JcIjpjLmF9KTtcblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9XG5cdGZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfY2VsbChjZWxsLCByZWYsIHdzLCBvcHRzLCBpZHgsIHdiLCBhZGRyKXtcblx0XHRpZighY2VsbCB8fCBjZWxsLnYgPT0gdW5kZWZpbmVkICYmIGNlbGwuZiA9PSB1bmRlZmluZWQpIHJldHVybiBcIjxDZWxsPjwvQ2VsbD5cIjtcblxuXHRcdHZhciBhdHRyID0ge307XG5cdFx0aWYoY2VsbC5mKSBhdHRyW1wic3M6Rm9ybXVsYVwiXSA9IFwiPVwiICsgZXNjYXBleG1sKGExX3RvX3JjKGNlbGwuZiwgYWRkcikpO1xuXHRcdGlmKGNlbGwuRiAmJiBjZWxsLkYuc3Vic3RyKDAsIHJlZi5sZW5ndGgpID09IHJlZikge1xuXHRcdFx0dmFyIGVuZCA9IGRlY29kZV9jZWxsKGNlbGwuRi5zdWJzdHIocmVmLmxlbmd0aCArIDEpKTtcblx0XHRcdGF0dHJbXCJzczpBcnJheVJhbmdlXCJdID0gXCJSQzpSXCIgKyAoZW5kLnIgPT0gYWRkci5yID8gXCJcIiA6IFwiW1wiICsgKGVuZC5yIC0gYWRkci5yKSArIFwiXVwiKSArIFwiQ1wiICsgKGVuZC5jID09IGFkZHIuYyA/IFwiXCIgOiBcIltcIiArIChlbmQuYyAtIGFkZHIuYykgKyBcIl1cIik7XG5cdFx0fVxuXG5cdFx0aWYoY2VsbC5sICYmIGNlbGwubC5UYXJnZXQpIHtcblx0XHRcdGF0dHJbXCJzczpIUmVmXCJdID0gZXNjYXBleG1sKGNlbGwubC5UYXJnZXQpO1xuXHRcdFx0aWYoY2VsbC5sLlRvb2x0aXApIGF0dHJbXCJ4OkhSZWZTY3JlZW5UaXBcIl0gPSBlc2NhcGV4bWwoY2VsbC5sLlRvb2x0aXApO1xuXHRcdH1cblxuXHRcdGlmKHdzWychbWVyZ2VzJ10pIHtcblx0XHRcdHZhciBtYXJyID0gd3NbJyFtZXJnZXMnXTtcblx0XHRcdGZvcih2YXIgbWkgPSAwOyBtaSAhPSBtYXJyLmxlbmd0aDsgKyttaSkge1xuXHRcdFx0XHRpZihtYXJyW21pXS5zLmMgIT0gYWRkci5jIHx8IG1hcnJbbWldLnMuciAhPSBhZGRyLnIpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZihtYXJyW21pXS5lLmMgPiBtYXJyW21pXS5zLmMpIGF0dHJbJ3NzOk1lcmdlQWNyb3NzJ10gPSBtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmM7XG5cdFx0XHRcdGlmKG1hcnJbbWldLmUuciA+IG1hcnJbbWldLnMucikgYXR0clsnc3M6TWVyZ2VEb3duJ10gPSBtYXJyW21pXS5lLnIgLSBtYXJyW21pXS5zLnI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHQgPSBcIlwiLCBwID0gXCJcIjtcblx0XHRzd2l0Y2goY2VsbC50KSB7XG5cdFx0XHRjYXNlICd6JzogcmV0dXJuIFwiXCI7XG5cdFx0XHRjYXNlICduJzogdCA9ICdOdW1iZXInOyBwID0gU3RyaW5nKGNlbGwudik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnYic6IHQgPSAnQm9vbGVhbic7IHAgPSAoY2VsbC52ID8gXCIxXCIgOiBcIjBcIik7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnZSc6IHQgPSAnRXJyb3InOyBwID0gQkVycltjZWxsLnZdOyBicmVhaztcblx0XHRcdGNhc2UgJ2QnOiB0ID0gJ0RhdGVUaW1lJzsgcCA9IG5ldyBEYXRlKGNlbGwudikudG9JU09TdHJpbmcoKTsgYnJlYWs7XG5cdFx0XHRjYXNlICdzJzogdCA9ICdTdHJpbmcnOyBwID0gZXNjYXBleG1sKGNlbGwudnx8XCJcIik7IGJyZWFrO1xuXHRcdH1cblx0XHR2YXIgX3YgPSAoY2VsbC52ICE9IG51bGwgPyBwIDogXCJcIik7XG5cdFx0aWYob3B0cyAmJiBvcHRzLnR5cGUgPT0gJ2JpbmFyeScgJiYgdHlwZW9mIGNwdGFibGUgIT09ICd1bmRlZmluZWQnICYmIGNlbGwudCA9PSAncycpIHtcblx0XHRcdF92ID0gY3B0YWJsZS51dGlscy5lbmNvZGUoNjUwMDEsIF92KTtcblx0XHRcdHZhciBfX3YgPSBcIlwiO1xuXHRcdFx0Zm9yKHZhciBfX2kgPSAwOyBfX2kgPCBfdi5sZW5ndGg7ICsrX19pKSBfX3YgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShfdltfX2ldKTtcblx0XHRcdF92ID0gX192O1xuXHRcdH1cblx0XHR2YXIgbSA9ICc8RGF0YSBzczpUeXBlPVwiJyArIHQgKyAnXCI+JyArIF92ICsgJzwvRGF0YT4nO1xuXG5cdFx0aWYoKGNlbGwuY3x8W10pLmxlbmd0aCA+IDApIG0gKz0gd3JpdGVfd3NfeGxtbF9jb21tZW50KGNlbGwuYyk7XG5cblx0XHRyZXR1cm4gd3JpdGV4dGFnKFwiQ2VsbFwiLCBtLCBhdHRyKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV93c194bG1sX3JvdyhSLCByb3cpIHtcblx0XHR2YXIgbyA9ICc8Um93IHNzOkluZGV4PVwiJyArIChSKzEpICsgJ1wiJztcblx0XHRpZihyb3cpIHtcblx0XHRcdGlmKHJvdy5ocHQgJiYgIXJvdy5ocHgpIHJvdy5ocHggPSBwdDJweChyb3cuaHB0KTtcblx0XHRcdGlmKHJvdy5ocHgpIG8gKz0gJyBzczpBdXRvRml0SGVpZ2h0PVwiMFwiIHNzOkhlaWdodD1cIicgKyByb3cuaHB4ICsgJ1wiJztcblx0XHRcdGlmKHJvdy5oaWRkZW4pIG8gKz0gJyBzczpIaWRkZW49XCIxXCInO1xuXHRcdH1cblx0XHRyZXR1cm4gbyArICc+Jztcblx0fVxuXHQvKiBUT0RPICovXG5cdGZ1bmN0aW9uIHdyaXRlX3dzX3hsbWxfdGFibGUod3MsIG9wdHMsIGlkeCwgd2IpIHtcblx0XHRpZighd3NbJyFyZWYnXSkgcmV0dXJuIFwiXCI7XG5cdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0dmFyIG1hcnIgPSB3c1snIW1lcmdlcyddIHx8IFtdLCBtaSA9IDA7XG5cdFx0dmFyIG8gPSBbXTtcblx0XHRpZih3c1snIWNvbHMnXSkgd3NbJyFjb2xzJ10uZm9yRWFjaChmdW5jdGlvbihuLCBpKSB7XG5cdFx0XHRwcm9jZXNzX2NvbChuKTtcblx0XHRcdHZhciB3ID0gISFuLndpZHRoO1xuXHRcdFx0dmFyIHAgPSBjb2xfb2JqX3coaSwgbik7XG5cdFx0XHR2YXIgayA9IHtcInNzOkluZGV4XCI6aSsxfTtcblx0XHRcdGlmKHcpIGtbJ3NzOldpZHRoJ10gPSB3aWR0aDJweChwLndpZHRoKTtcblx0XHRcdGlmKG4uaGlkZGVuKSBrWydzczpIaWRkZW4nXT1cIjFcIjtcblx0XHRcdG8ucHVzaCh3cml0ZXh0YWcoXCJDb2x1bW5cIixudWxsLGspKTtcblx0XHR9KTtcblx0XHR2YXIgZGVuc2UgPSBBcnJheS5pc0FycmF5KHdzKTtcblx0XHRmb3IodmFyIFIgPSByYW5nZS5zLnI7IFIgPD0gcmFuZ2UuZS5yOyArK1IpIHtcblx0XHRcdHZhciByb3cgPSBbd3JpdGVfd3NfeGxtbF9yb3coUiwgKHdzWychcm93cyddfHxbXSlbUl0pXTtcblx0XHRcdGZvcih2YXIgQyA9IHJhbmdlLnMuYzsgQyA8PSByYW5nZS5lLmM7ICsrQykge1xuXHRcdFx0XHR2YXIgc2tpcCA9IGZhbHNlO1xuXHRcdFx0XHRmb3IobWkgPSAwOyBtaSAhPSBtYXJyLmxlbmd0aDsgKyttaSkge1xuXHRcdFx0XHRcdGlmKG1hcnJbbWldLnMuYyA+IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKG1hcnJbbWldLnMuciA+IFIpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKG1hcnJbbWldLmUuYyA8IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKG1hcnJbbWldLmUuciA8IFIpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKG1hcnJbbWldLnMuYyAhPSBDIHx8IG1hcnJbbWldLnMuciAhPSBSKSBza2lwID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihza2lwKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIGFkZHIgPSB7cjpSLGM6Q307XG5cdFx0XHRcdHZhciByZWYgPSBlbmNvZGVfY2VsbChhZGRyKSwgY2VsbCA9IGRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tyZWZdO1xuXHRcdFx0XHRyb3cucHVzaCh3cml0ZV93c194bG1sX2NlbGwoY2VsbCwgcmVmLCB3cywgb3B0cywgaWR4LCB3YiwgYWRkcikpO1xuXHRcdFx0fVxuXHRcdFx0cm93LnB1c2goXCI8L1Jvdz5cIik7XG5cdFx0XHRpZihyb3cubGVuZ3RoID4gMikgby5wdXNoKHJvdy5qb2luKFwiXCIpKTtcblx0XHR9XG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV93c194bG1sKGlkeCwgb3B0cywgd2IpIHtcblx0XHR2YXIgbyA9IFtdO1xuXHRcdHZhciBzID0gd2IuU2hlZXROYW1lc1tpZHhdO1xuXHRcdHZhciB3cyA9IHdiLlNoZWV0c1tzXTtcblxuXHRcdC8qIFRhYmxlICovXG5cdFx0dmFyIHQgPSB3cyA/IHdyaXRlX3dzX3hsbWxfdGFibGUod3MsIG9wdHMsIGlkeCwgd2IpIDogXCJcIjtcblx0XHRpZih0Lmxlbmd0aCA+IDApIG8ucHVzaChcIjxUYWJsZT5cIiArIHQgKyBcIjwvVGFibGU+XCIpO1xuXG5cdFx0LyogV29ya3NoZWV0T3B0aW9ucyAqL1xuXHRcdG8ucHVzaCh3cml0ZV93c194bG1sX3dzb3B0cyh3cywgb3B0cywgaWR4LCB3YikpO1xuXG5cdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0fVxuXHRmdW5jdGlvbiB3cml0ZV94bG1sKHdiLCBvcHRzKSB7XG5cdFx0dmFyIGQgPSBbXTtcblx0XHRkLnB1c2god3JpdGVfcHJvcHNfeGxtbCh3Yiwgb3B0cykpO1xuXHRcdGQucHVzaCh3cml0ZV93Yl94bG1sKHdiLCBvcHRzKSk7XG5cdFx0ZC5wdXNoKHdyaXRlX3N0eV94bG1sKHdiLCBvcHRzKSk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpXG5cdFx0XHRkLnB1c2god3JpdGV4dGFnKFwiV29ya3NoZWV0XCIsIHdyaXRlX3dzX3hsbWwoaSwgb3B0cywgd2IpLCB7XCJzczpOYW1lXCI6ZXNjYXBleG1sKHdiLlNoZWV0TmFtZXNbaV0pfSkpO1xuXHRcdHJldHVybiBYTUxfSEVBREVSICsgd3JpdGV4dGFnKFwiV29ya2Jvb2tcIiwgZC5qb2luKFwiXCIpLCB7XG5cdFx0XHQneG1sbnMnOiAgICAgIFhMTUxOUy5zcyxcblx0XHRcdCd4bWxuczpvJzogICAgWExNTE5TLm8sXG5cdFx0XHQneG1sbnM6eCc6ICAgIFhMTUxOUy54LFxuXHRcdFx0J3htbG5zOnNzJzogICBYTE1MTlMuc3MsXG5cdFx0XHQneG1sbnM6ZHQnOiAgIFhMTUxOUy5kdCxcblx0XHRcdCd4bWxuczpodG1sJzogWExNTE5TLmh0bWxcblx0XHR9KTtcblx0fVxuXHQvKiBbTVMtT0xFRFNdIDIuMy44IENvbXBPYmpTdHJlYW0gKi9cblx0ZnVuY3Rpb24gcGFyc2VfY29tcG9iaihvYmopIHtcblx0XHR2YXIgdiA9IHt9O1xuXHRcdHZhciBvID0gb2JqLmNvbnRlbnQ7XG5cblx0XHQvKiBbTVMtT0xFRFNdIDIuMy43IENvbXBPYmpIZWFkZXIgLS0gQWxsIGZpZWxkcyBNVVNUIGJlIGlnbm9yZWQgKi9cblx0XHR2YXIgbCA9IDI4LCBtO1xuXHRcdG0gPSBfX2xwc3RyKG8sIGwpO1xuXHRcdGwgKz0gNCArIF9fcmVhZFVJbnQzMkxFKG8sbCk7XG5cdFx0di5Vc2VyVHlwZSA9IG07XG5cblx0XHQvKiBbTVMtT0xFRFNdIDIuMy4xIENsaXBib2FyZEZvcm1hdE9yQW5zaVN0cmluZyAqL1xuXHRcdG0gPSBfX3JlYWRVSW50MzJMRShvLGwpOyBsKz0gNDtcblx0XHRzd2l0Y2gobSkge1xuXHRcdFx0Y2FzZSAweDAwMDAwMDAwOiBicmVhaztcblx0XHRcdGNhc2UgMHhmZmZmZmZmZjogY2FzZSAweGZmZmZmZmZlOiBsKz00OyBicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKG0gPiAweDE5MCkgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgQ2xpcGJvYXJkOiBcIiArIG0udG9TdHJpbmcoMTYpKTtcblx0XHRcdFx0bCArPSBtO1xuXHRcdH1cblxuXHRcdG0gPSBfX2xwc3RyKG8sIGwpOyBsICs9IG0ubGVuZ3RoID09PSAwID8gMCA6IDUgKyBtLmxlbmd0aDsgdi5SZXNlcnZlZDEgPSBtO1xuXG5cdFx0aWYoKG0gPSBfX3JlYWRVSW50MzJMRShvLGwpKSAhPT0gMHg3MWIyZTlmNCkgcmV0dXJuIHY7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgVW5pY29kZSBFeHRlbnNpb25cIik7XG5cdH1cblxuXHQvKiAyLjQuNTggQ29udGludWUgbG9naWMgKi9cblx0ZnVuY3Rpb24gc2x1cnAoUiwgYmxvYiwgbGVuZ3RoLCBvcHRzKSB7XG5cdFx0dmFyIGwgPSBsZW5ndGg7XG5cdFx0dmFyIGJ1ZnMgPSBbXTtcblx0XHR2YXIgZCA9IGJsb2Iuc2xpY2UoYmxvYi5sLGJsb2IubCtsKTtcblx0XHRpZihvcHRzICYmIG9wdHMuZW5jICYmIG9wdHMuZW5jLmluc2l0dV9kZWNyeXB0KSBzd2l0Y2goUi5uKSB7XG5cdFx0Y2FzZSAnQk9GJzogY2FzZSAnRmlsZVBhc3MnOiBjYXNlICdGaWxlTG9jayc6IGNhc2UgJ0ludGVyZmFjZUhkcic6IGNhc2UgJ1JSREluZm8nOiBjYXNlICdSUkRIZWFkJzogY2FzZSAnVXNyRXhjbCc6IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRpZihkLmxlbmd0aCA9PT0gMCkgYnJlYWs7XG5cdFx0XHRvcHRzLmVuYy5pbnNpdHVfZGVjcnlwdChkKTtcblx0XHR9XG5cdFx0YnVmcy5wdXNoKGQpO1xuXHRcdGJsb2IubCArPSBsO1xuXHRcdHZhciBuZXh0ID0gKFhMU1JlY29yZEVudW1bX19yZWFkVUludDE2TEUoYmxvYixibG9iLmwpXSk7XG5cdFx0d2hpbGUobmV4dCAhPSBudWxsICYmIG5leHQubiA9PT0gJ0NvbnRpbnVlJykge1xuXHRcdFx0bCA9IF9fcmVhZFVJbnQxNkxFKGJsb2IsYmxvYi5sKzIpO1xuXHRcdFx0YnVmcy5wdXNoKGJsb2Iuc2xpY2UoYmxvYi5sKzQsYmxvYi5sKzQrbCkpO1xuXHRcdFx0YmxvYi5sICs9IDQrbDtcblx0XHRcdG5leHQgPSAoWExTUmVjb3JkRW51bVtfX3JlYWRVSW50MTZMRShibG9iLCBibG9iLmwpXSk7XG5cdFx0fVxuXHRcdHZhciBiID0gKGJjb25jYXQoYnVmcykpO1xuXHRcdHByZXBfYmxvYihiLCAwKTtcblx0XHR2YXIgbGwgPSAwOyBiLmxlbnMgPSBbXTtcblx0XHRmb3IodmFyIGogPSAwOyBqIDwgYnVmcy5sZW5ndGg7ICsraikgeyBiLmxlbnMucHVzaChsbCk7IGxsICs9IGJ1ZnNbal0ubGVuZ3RoOyB9XG5cdFx0cmV0dXJuIFIuZihiLCBiLmxlbmd0aCwgb3B0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBzYWZlX2Zvcm1hdF94ZihwLCBvcHRzLCBkYXRlMTkwNCkge1xuXHRcdGlmKHAudCA9PT0gJ3onKSByZXR1cm47XG5cdFx0aWYoIXAuWEYpIHJldHVybjtcblx0XHR0cnkge1xuXHRcdFx0dmFyIGZtdGlkID0gcC56IHx8IHAuWEYuaWZtdCB8fCAwO1xuXHRcdFx0aWYob3B0cy5jZWxsTkYpIHAueiA9IFNTRi5fdGFibGVbZm10aWRdO1xuXHRcdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHRcdGlmKCFvcHRzIHx8IG9wdHMuY2VsbFRleHQgIT09IGZhbHNlKSB0cnkge1xuXHRcdFx0aWYocC50ID09PSAnZScpIHsgcC53ID0gcC53IHx8IEJFcnJbcC52XTsgfVxuXHRcdFx0ZWxzZSBpZihmbXRpZCA9PT0gMCkge1xuXHRcdFx0XHRpZihwLnQgPT09ICduJykge1xuXHRcdFx0XHRcdGlmKChwLnZ8MCkgPT09IHAudikgcC53ID0gU1NGLl9nZW5lcmFsX2ludChwLnYpO1xuXHRcdFx0XHRcdGVsc2UgcC53ID0gU1NGLl9nZW5lcmFsX251bShwLnYpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgcC53ID0gU1NGLl9nZW5lcmFsKHAudik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHAudyA9IFNTRi5mb3JtYXQoZm10aWQscC52LCB7ZGF0ZTE5MDQ6ISFkYXRlMTkwNH0pO1xuXHRcdFx0aWYob3B0cy5jZWxsRGF0ZXMgJiYgZm10aWQgJiYgcC50ID09ICduJyAmJiBTU0YuaXNfZGF0ZShTU0YuX3RhYmxlW2ZtdGlkXSkpIHtcblx0XHRcdFx0dmFyIF9kID0gU1NGLnBhcnNlX2RhdGVfY29kZShwLnYpOyBpZihfZCkgeyBwLnQgPSAnZCc7IHAudiA9IG5ldyBEYXRlKERhdGUuVVRDKF9kLnksIF9kLm0tMSxfZC5kLF9kLkgsX2QuTSxfZC5TLF9kLnUpKTsgfVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHR9XG5cblx0ZnVuY3Rpb24gbWFrZV9jZWxsKHZhbCwgaXhmZSwgdCkge1xuXHRcdHJldHVybiAoe3Y6dmFsLCBpeGZlOml4ZmUsIHQ6dH0pO1xuXHR9XG5cblx0Ly8gMi4zLjJcblx0ZnVuY3Rpb24gcGFyc2Vfd29ya2Jvb2soYmxvYiwgb3B0aW9ucykge1xuXHRcdHZhciB3YiA9ICh7b3B0czp7fX0pO1xuXHRcdHZhciBTaGVldHMgPSB7fTtcblx0XHRpZihERU5TRSAhPSBudWxsICYmIG9wdGlvbnMuZGVuc2UgPT0gbnVsbCkgb3B0aW9ucy5kZW5zZSA9IERFTlNFO1xuXHRcdHZhciBvdXQgPSAob3B0aW9ucy5kZW5zZSA/IFtdIDoge30pO1xuXHRcdHZhciBEaXJlY3RvcnkgPSB7fTtcblx0XHR2YXIgZm91bmRfc2hlZXQgPSBmYWxzZTtcblx0XHR2YXIgcmFuZ2UgPSAoe30pO1xuXHRcdHZhciBsYXN0X2Zvcm11bGEgPSBudWxsO1xuXHRcdHZhciBzc3QgPSBbXTtcblx0XHR2YXIgY3VyX3NoZWV0ID0gXCJcIjtcblx0XHR2YXIgUHJlYW1ibGUgPSB7fTtcblx0XHR2YXIgbGFzdGNlbGwsIGxhc3RfY2VsbCA9IFwiXCIsIGNjLCBjbW50LCBybmcsIHJuZ0MsIHJuZ1I7XG5cdFx0dmFyIHNoYXJlZF9mb3JtdWxhZSA9IHt9O1xuXHRcdHZhciBhcnJheV9mb3JtdWxhZSA9IFtdOyAvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBjbGV2ZXIgKi9cblx0XHR2YXIgdGVtcF92YWw7XG5cdFx0dmFyIGNvdW50cnk7XG5cdFx0dmFyIGNlbGxfdmFsaWQgPSB0cnVlO1xuXHRcdHZhciBYRnMgPSBbXTsgLyogWEYgcmVjb3JkcyAqL1xuXHRcdHZhciBwYWxldHRlID0gW107XG5cdFx0dmFyIFdvcmtib29rID0geyBTaGVldHM6W10gfSwgd3Nwcm9wcyA9IHt9O1xuXHRcdHZhciBnZXRfcmdiID0gZnVuY3Rpb24gZ2V0cmdiKGljdikge1xuXHRcdFx0aWYoaWN2IDwgOCkgcmV0dXJuIFhMU0ljdltpY3ZdO1xuXHRcdFx0aWYoaWN2IDwgNjQpIHJldHVybiBwYWxldHRlW2ljdi04XSB8fCBYTFNJY3ZbaWN2XTtcblx0XHRcdHJldHVybiBYTFNJY3ZbaWN2XTtcblx0XHR9O1xuXHRcdHZhciBwcm9jZXNzX2NlbGxfc3R5bGUgPSBmdW5jdGlvbiBwY3MoY2VsbCwgbGluZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHhmZCA9IGxpbmUuWEYuZGF0YTtcblx0XHRcdGlmKCF4ZmQgfHwgIXhmZC5wYXR0ZXJuVHlwZSB8fCAhb3B0aW9ucyB8fCAhb3B0aW9ucy5jZWxsU3R5bGVzKSByZXR1cm47XG5cdFx0XHRsaW5lLnMgPSAoe30pO1xuXHRcdFx0bGluZS5zLnBhdHRlcm5UeXBlID0geGZkLnBhdHRlcm5UeXBlO1xuXHRcdFx0dmFyIHQ7XG5cdFx0XHRpZigodCA9IHJnYjJIZXgoZ2V0X3JnYih4ZmQuaWN2Rm9yZSkpKSkgeyBsaW5lLnMuZmdDb2xvciA9IHtyZ2I6dH07IH1cblx0XHRcdGlmKCh0ID0gcmdiMkhleChnZXRfcmdiKHhmZC5pY3ZCYWNrKSkpKSB7IGxpbmUucy5iZ0NvbG9yID0ge3JnYjp0fTsgfVxuXHRcdH07XG5cdFx0dmFyIGFkZGNlbGwgPSBmdW5jdGlvbiBhZGRjZWxsKGNlbGwsIGxpbmUsIG9wdGlvbnMpIHtcblx0XHRcdGlmKGZpbGVfZGVwdGggPiAxKSByZXR1cm47XG5cdFx0XHRpZighY2VsbF92YWxpZCkgcmV0dXJuO1xuXHRcdFx0aWYob3B0aW9ucy5jZWxsU3R5bGVzICYmIGxpbmUuWEYgJiYgbGluZS5YRi5kYXRhKSBwcm9jZXNzX2NlbGxfc3R5bGUoY2VsbCwgbGluZSwgb3B0aW9ucyk7XG5cdFx0XHRsYXN0Y2VsbCA9IGNlbGw7XG5cdFx0XHRsYXN0X2NlbGwgPSBlbmNvZGVfY2VsbChjZWxsKTtcblx0XHRcdGlmKHJhbmdlLnMpIHtcblx0XHRcdFx0aWYoY2VsbC5yIDwgcmFuZ2Uucy5yKSByYW5nZS5zLnIgPSBjZWxsLnI7XG5cdFx0XHRcdGlmKGNlbGwuYyA8IHJhbmdlLnMuYykgcmFuZ2Uucy5jID0gY2VsbC5jO1xuXHRcdFx0fVxuXHRcdFx0aWYocmFuZ2UuZSkge1xuXHRcdFx0XHRpZihjZWxsLnIgKyAxID4gcmFuZ2UuZS5yKSByYW5nZS5lLnIgPSBjZWxsLnIgKyAxO1xuXHRcdFx0XHRpZihjZWxsLmMgKyAxID4gcmFuZ2UuZS5jKSByYW5nZS5lLmMgPSBjZWxsLmMgKyAxO1xuXHRcdFx0fVxuXHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSAmJiBsaW5lLmYpIHtcblx0XHRcdFx0Zm9yKHZhciBhZmkgPSAwOyBhZmkgPCBhcnJheV9mb3JtdWxhZS5sZW5ndGg7ICsrYWZpKSB7XG5cdFx0XHRcdFx0aWYoYXJyYXlfZm9ybXVsYWVbYWZpXVswXS5zLmMgPiBjZWxsLmMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKGFycmF5X2Zvcm11bGFlW2FmaV1bMF0ucy5yID4gY2VsbC5yKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihhcnJheV9mb3JtdWxhZVthZmldWzBdLmUuYyA8IGNlbGwuYykgY29udGludWU7XG5cdFx0XHRcdFx0aWYoYXJyYXlfZm9ybXVsYWVbYWZpXVswXS5lLnIgPCBjZWxsLnIpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGxpbmUuRiA9IGVuY29kZV9yYW5nZShhcnJheV9mb3JtdWxhZVthZmldWzBdKTtcblx0XHRcdFx0XHRpZihhcnJheV9mb3JtdWxhZVthZmldWzBdLnMuYyAhPSBjZWxsLmMpIGRlbGV0ZSBsaW5lLmY7XG5cdFx0XHRcdFx0aWYoYXJyYXlfZm9ybXVsYWVbYWZpXVswXS5zLnIgIT0gY2VsbC5yKSBkZWxldGUgbGluZS5mO1xuXHRcdFx0XHRcdGlmKGxpbmUuZikgbGluZS5mID0gXCJcIiArIHN0cmluZ2lmeV9mb3JtdWxhKGFycmF5X2Zvcm11bGFlW2FmaV1bMV0sIHJhbmdlLCBjZWxsLCBzdXBib29rcywgb3B0cyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmKG9wdGlvbnMuc2hlZXRSb3dzICYmIGxhc3RjZWxsLnIgPj0gb3B0aW9ucy5zaGVldFJvd3MpIGNlbGxfdmFsaWQgPSBmYWxzZTtcblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZihvcHRpb25zLmRlbnNlKSB7XG5cdFx0XHRcdFx0aWYoIW91dFtjZWxsLnJdKSBvdXRbY2VsbC5yXSA9IFtdO1xuXHRcdFx0XHRcdG91dFtjZWxsLnJdW2NlbGwuY10gPSBsaW5lO1xuXHRcdFx0XHR9IGVsc2Ugb3V0W2xhc3RfY2VsbF0gPSBsaW5lO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dmFyIG9wdHMgPSAoe1xuXHRcdFx0ZW5jOiBmYWxzZSwgLy8gZW5jcnlwdGVkXG5cdFx0XHRzYmNjaDogMCwgLy8gY2NoIGluIHRoZSBwcmVjZWRpbmcgU3VwQm9va1xuXHRcdFx0c25hbWVzOiBbXSwgLy8gc2hlZXRuYW1lc1xuXHRcdFx0c2hhcmVkZjogc2hhcmVkX2Zvcm11bGFlLCAvLyBzaGFyZWQgZm9ybXVsYWUgYnkgYWRkcmVzc1xuXHRcdFx0YXJyYXlmOiBhcnJheV9mb3JtdWxhZSwgLy8gYXJyYXkgZm9ybXVsYWUgYXJyYXlcblx0XHRcdHJydGFiaWQ6IFtdLCAvLyBSUlRhYklkXG5cdFx0XHRsYXN0dXNlcjogXCJcIiwgLy8gTGFzdCBVc2VyIGZyb20gV3JpdGVBY2Nlc3Ncblx0XHRcdGJpZmY6IDgsIC8vIEJJRkYgdmVyc2lvblxuXHRcdFx0Y29kZXBhZ2U6IDAsIC8vIENQIGZyb20gQ29kZVBhZ2UgcmVjb3JkXG5cdFx0XHR3aW5sb2NrZWQ6IDAsIC8vIGZMb2NrV24gZnJvbSBXaW5Qcm90ZWN0XG5cdFx0XHRjZWxsU3R5bGVzOiAhIW9wdGlvbnMgJiYgISFvcHRpb25zLmNlbGxTdHlsZXMsXG5cdFx0XHRXVEY6ICEhb3B0aW9ucyAmJiAhIW9wdGlvbnMud3RmXG5cdFx0fSk7XG5cdFx0aWYob3B0aW9ucy5wYXNzd29yZCkgb3B0cy5wYXNzd29yZCA9IG9wdGlvbnMucGFzc3dvcmQ7XG5cdFx0dmFyIG1lcmdlY2VsbHMgPSBbXTtcblx0XHR2YXIgb2JqZWN0cyA9IFtdO1xuXHRcdHZhciBjb2xpbmZvID0gW10sIHJvd2luZm8gPSBbXTtcblx0XHR2YXIgZGVmd2lkdGggPSAwLCBkZWZoZWlnaHQgPSAwOyAvLyB0d2lwcyAvIE1EVyByZXNwZWN0aXZlbHlcblx0XHR2YXIgc2VlbmNvbCA9IGZhbHNlO1xuXHRcdHZhciBzdXBib29rcyA9IChbXSk7IC8vIDEtaW5kZXhlZCwgd2lsbCBob2xkIGV4dGVybiBuYW1lc1xuXHRcdHN1cGJvb2tzLlNoZWV0TmFtZXMgPSBvcHRzLnNuYW1lcztcblx0XHRzdXBib29rcy5zaGFyZWRmID0gb3B0cy5zaGFyZWRmO1xuXHRcdHN1cGJvb2tzLmFycmF5ZiA9IG9wdHMuYXJyYXlmO1xuXHRcdHN1cGJvb2tzLm5hbWVzID0gW107XG5cdFx0c3VwYm9va3MuWFRJID0gW107XG5cdFx0dmFyIGxhc3RfUm4gPSAnJztcblx0XHR2YXIgZmlsZV9kZXB0aCA9IDA7IC8qIFRPRE86IG1ha2UgYSByZWFsIHN0YWNrICovXG5cdFx0dmFyIEJJRkYyRm10ID0gMDtcblx0XHR2YXIgQklGRjJGbXRUYWJsZSA9IFtdO1xuXHRcdHZhciBGaWx0ZXJEYXRhYmFzZXMgPSBbXTsgLyogVE9ETzogc29ydCBvdXQgc3VwYm9va3MgYW5kIHByb2Nlc3MgZWxzZXdoZXJlICovXG5cdFx0dmFyIGxhc3RfbGJsO1xuXG5cdFx0LyogZXhwbGljaXQgb3ZlcnJpZGUgZm9yIHNvbWUgYnJva2VuIHdyaXRlcnMgKi9cblx0XHRvcHRzLmNvZGVwYWdlID0gMTIwMDtcblx0XHRzZXRfY3AoMTIwMCk7XG5cdFx0d2hpbGUoYmxvYi5sIDwgYmxvYi5sZW5ndGggLSAxKSB7XG5cdFx0XHR2YXIgcyA9IGJsb2IubDtcblx0XHRcdHZhciBSZWNvcmRUeXBlID0gYmxvYi5yZWFkX3NoaWZ0KDIpO1xuXHRcdFx0aWYoUmVjb3JkVHlwZSA9PT0gMCAmJiBsYXN0X1JuID09PSAnRU9GJykgYnJlYWs7XG5cdFx0XHR2YXIgbGVuZ3RoID0gKGJsb2IubCA9PT0gYmxvYi5sZW5ndGggPyAwIDogYmxvYi5yZWFkX3NoaWZ0KDIpKSwgeTtcblx0XHRcdHZhciBSID0gWExTUmVjb3JkRW51bVtSZWNvcmRUeXBlXTtcblx0XHRcdC8vY29uc29sZS5sb2coUmVjb3JkVHlwZS50b1N0cmluZygxNiksIFJlY29yZFR5cGUsIFIsIGJsb2IubCwgbGVuZ3RoLCBibG9iLmxlbmd0aCk7XG5cdFx0XHQvL2lmKCFSKSBjb25zb2xlLmxvZyhibG9iLnNsaWNlKGJsb2IubCwgYmxvYi5sICsgbGVuZ3RoKSk7XG5cdFx0XHRpZihSICYmIFIuZikge1xuXHRcdFx0XHRpZihvcHRpb25zLmJvb2tTaGVldHMpIHtcblx0XHRcdFx0XHRpZihsYXN0X1JuID09PSAnQm91bmRTaGVldDgnICYmIFIubiAhPT0gJ0JvdW5kU2hlZXQ4JykgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGFzdF9SbiA9IFIubjtcblx0XHRcdFx0aWYoUi5yID09PSAyIHx8IFIuciA9PSAxMikge1xuXHRcdFx0XHRcdHZhciBydCA9IGJsb2IucmVhZF9zaGlmdCgyKTsgbGVuZ3RoIC09IDI7XG5cdFx0XHRcdFx0aWYoIW9wdHMuZW5jICYmIHJ0ICE9PSBSZWNvcmRUeXBlKSB0aHJvdyBcInJ0IG1pc21hdGNoXCI7XG5cdFx0XHRcdFx0aWYoUi5yID09IDEyKXsgYmxvYi5sICs9IDEwOyBsZW5ndGggLT0gMTA7IH0gLy8gc2tpcCBGUlRcblx0XHRcdFx0fVxuXHRcdFx0XHQvL2NvbnNvbGUuZXJyb3IoUixibG9iLmwsbGVuZ3RoLGJsb2IubGVuZ3RoKTtcblx0XHRcdFx0dmFyIHZhbDtcblx0XHRcdFx0aWYoUi5uID09PSAnRU9GJykgdmFsID0gUi5mKGJsb2IsIGxlbmd0aCwgb3B0cyk7XG5cdFx0XHRcdGVsc2UgdmFsID0gc2x1cnAoUiwgYmxvYiwgbGVuZ3RoLCBvcHRzKTtcblx0XHRcdFx0dmFyIFJuID0gUi5uO1xuXHRcdFx0XHQvKiBuZXN0ZWQgc3dpdGNoIHN0YXRlbWVudHMgdG8gd29ya2Fyb3VuZCBWOCAxMjggbGltaXQgKi9cblx0XHRcdFx0c3dpdGNoKFJuKSB7XG5cdFx0XHRcdFx0LyogV29ya2Jvb2sgT3B0aW9ucyAqL1xuXHRcdFx0XHRcdGNhc2UgJ0RhdGUxOTA0Jzogd2Iub3B0cy5EYXRlMTkwNCA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnV3JpdGVQcm90ZWN0Jzogd2Iub3B0cy5Xcml0ZVByb3RlY3QgPSB0cnVlOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdGaWxlUGFzcyc6XG5cdFx0XHRcdFx0XHRpZighb3B0cy5lbmMpIGJsb2IubCA9IDA7XG5cdFx0XHRcdFx0XHRvcHRzLmVuYyA9IHZhbDtcblx0XHRcdFx0XHRcdGlmKG9wdHMuV1RGKSBjb25zb2xlLmVycm9yKHZhbCk7XG5cdFx0XHRcdFx0XHRpZighb3B0aW9ucy5wYXNzd29yZCkgdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBpcyBwYXNzd29yZC1wcm90ZWN0ZWRcIik7XG5cdFx0XHRcdFx0XHRpZih2YWwudmFsaWQgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKFwiRW5jcnlwdGlvbiBzY2hlbWUgdW5zdXBwb3J0ZWRcIik7XG5cdFx0XHRcdFx0XHRpZighdmFsLnZhbGlkKSB0aHJvdyBuZXcgRXJyb3IoXCJQYXNzd29yZCBpcyBpbmNvcnJlY3RcIik7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdXcml0ZUFjY2Vzcyc6IG9wdHMubGFzdHVzZXIgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0ZpbGVTaGFyaW5nJzogYnJlYWs7IC8vVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ0NvZGVQYWdlJzpcblx0XHRcdFx0XHRcdC8qIG92ZXJyaWRlcyBiYXNlZCBvbiB0ZXN0IGNhc2VzICovXG5cdFx0XHRcdFx0XHRpZih2YWwgPT09IDB4NTIxMikgdmFsID0gMTIwMDtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsID09PSAweDgwMDEpIHZhbCA9IDEyNTI7XG5cdFx0XHRcdFx0XHRvcHRzLmNvZGVwYWdlID0gdmFsO1xuXHRcdFx0XHRcdFx0c2V0X2NwKHZhbCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdSUlRhYklkJzogb3B0cy5ycnRhYmlkID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdXaW5Qcm90ZWN0Jzogb3B0cy53aW5sb2NrZWQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1RlbXBsYXRlJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdSZWZyZXNoQWxsJzogd2Iub3B0cy5SZWZyZXNoQWxsID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdCb29rQm9vbCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnVXNlc0VMRnMnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdNVFJTZXR0aW5ncyc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0NhbGNDb3VudCc6IHdiLm9wdHMuQ2FsY0NvdW50ID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDYWxjRGVsdGEnOiB3Yi5vcHRzLkNhbGNEZWx0YSA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQ2FsY0l0ZXInOiB3Yi5vcHRzLkNhbGNJdGVyID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDYWxjTW9kZSc6IHdiLm9wdHMuQ2FsY01vZGUgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0NhbGNQcmVjaXNpb24nOiB3Yi5vcHRzLkNhbGNQcmVjaXNpb24gPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0NhbGNTYXZlUmVjYWxjJzogd2Iub3B0cy5DYWxjU2F2ZVJlY2FsYyA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQ2FsY1JlZk1vZGUnOiBvcHRzLkNhbGNSZWZNb2RlID0gdmFsOyBicmVhazsgLy8gVE9ETzogaW1wbGVtZW50IFIxQzFcblx0XHRcdFx0XHRjYXNlICdVbmNhbGNlZCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0ZvcmNlRnVsbENhbGN1bGF0aW9uJzogd2Iub3B0cy5GdWxsQ2FsYyA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnV3NCb29sJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdYRic6IFhGcy5wdXNoKHZhbCk7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0V4dFNTVCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnQm9va0V4dCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnUmljaFRleHRTdHJlYW0nOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdCa0hpbSc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU3VwQm9vayc6XG5cdFx0XHRcdFx0XHRzdXBib29rcy5wdXNoKFt2YWxdKTtcblx0XHRcdFx0XHRcdHN1cGJvb2tzW3N1cGJvb2tzLmxlbmd0aC0xXS5YVEkgPSBbXTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0V4dGVybk5hbWUnOlxuXHRcdFx0XHRcdFx0c3VwYm9va3Nbc3VwYm9va3MubGVuZ3RoLTFdLnB1c2godmFsKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0luZGV4JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdMYmwnOlxuXHRcdFx0XHRcdFx0bGFzdF9sYmwgPSB7XG5cdFx0XHRcdFx0XHRcdE5hbWU6IHZhbC5OYW1lLFxuXHRcdFx0XHRcdFx0XHRSZWY6IHN0cmluZ2lmeV9mb3JtdWxhKHZhbC5yZ2NlLHJhbmdlLG51bGwsc3VwYm9va3Msb3B0cylcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRpZih2YWwuaXRhYiA+IDApIGxhc3RfbGJsLlNoZWV0ID0gdmFsLml0YWIgLSAxO1xuXHRcdFx0XHRcdFx0c3VwYm9va3MubmFtZXMucHVzaChsYXN0X2xibCk7XG5cdFx0XHRcdFx0XHRpZighc3VwYm9va3NbMF0pIHN1cGJvb2tzWzBdID0gW107XG5cdFx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGgtMV0ucHVzaCh2YWwpO1xuXHRcdFx0XHRcdFx0aWYodmFsLk5hbWUgPT0gXCJcXHJcIiAmJiB2YWwuaXRhYiA+IDApXG5cdFx0XHRcdFx0XHRcdGlmKHZhbC5yZ2NlICYmIHZhbC5yZ2NlWzBdICYmIHZhbC5yZ2NlWzBdWzBdICYmIHZhbC5yZ2NlWzBdWzBdWzBdID09ICdQdGdBcmVhM2QnKVxuXHRcdFx0XHRcdFx0XHRcdEZpbHRlckRhdGFiYXNlc1t2YWwuaXRhYiAtIDFdID0geyByZWY6IGVuY29kZV9yYW5nZSh2YWwucmdjZVswXVswXVsxXVsyXSkgfTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0V4dGVyblNoZWV0Jzpcblx0XHRcdFx0XHRcdGlmKHN1cGJvb2tzLmxlbmd0aCA9PSAwKSB7IHN1cGJvb2tzWzBdID0gW107IHN1cGJvb2tzWzBdLlhUSSA9IFtdOyB9XG5cdFx0XHRcdFx0XHRzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkgPSBzdXBib29rc1tzdXBib29rcy5sZW5ndGggLSAxXS5YVEkuY29uY2F0KHZhbCk7IHN1cGJvb2tzLlhUSSA9IHN1cGJvb2tzLlhUSS5jb25jYXQodmFsKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTmFtZUNtdCc6XG5cdFx0XHRcdFx0XHQvKiBUT0RPOiBzZWFyY2ggZm9yIGNvcnJlY3QgbmFtZSAqL1xuXHRcdFx0XHRcdFx0aWYob3B0cy5iaWZmIDwgOCkgYnJlYWs7XG5cdFx0XHRcdFx0XHRsYXN0X2xibC5Db21tZW50ID0gdmFsWzFdO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdQcm90ZWN0Jzogb3V0W1wiIXByb3RlY3RcIl0gPSB2YWw7IGJyZWFrOyAvKiBmb3Igc2hlZXQgb3IgYm9vayAqL1xuXHRcdFx0XHRcdGNhc2UgJ1Bhc3N3b3JkJzogaWYodmFsICE9PSAwICYmIG9wdHMuV1RGKSBjb25zb2xlLmVycm9yKFwiUGFzc3dvcmQgdmVyaWZpZXI6IFwiICsgdmFsKTsgYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnUHJvdDRSZXYnOiBjYXNlICdQcm90NFJldlBhc3MnOiBicmVhazsgLypUT0RPOiBSZXZpc2lvbiBDb250cm9sKi9cblxuXHRcdFx0XHRcdGNhc2UgJ0JvdW5kU2hlZXQ4Jzoge1xuXHRcdFx0XHRcdFx0RGlyZWN0b3J5W3ZhbC5wb3NdID0gdmFsO1xuXHRcdFx0XHRcdFx0b3B0cy5zbmFtZXMucHVzaCh2YWwubmFtZSk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdFT0YnOiB7XG5cdFx0XHRcdFx0XHRpZigtLWZpbGVfZGVwdGgpIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYocmFuZ2UuZSkge1xuXHRcdFx0XHRcdFx0XHRpZihyYW5nZS5lLnIgPiAwICYmIHJhbmdlLmUuYyA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRyYW5nZS5lLnItLTsgcmFuZ2UuZS5jLS07XG5cdFx0XHRcdFx0XHRcdFx0b3V0W1wiIXJlZlwiXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0XHRcdFx0XHRcdFx0cmFuZ2UuZS5yKys7IHJhbmdlLmUuYysrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmKG1lcmdlY2VsbHMubGVuZ3RoID4gMCkgb3V0W1wiIW1lcmdlc1wiXSA9IG1lcmdlY2VsbHM7XG5cdFx0XHRcdFx0XHRcdGlmKG9iamVjdHMubGVuZ3RoID4gMCkgb3V0W1wiIW9iamVjdHNcIl0gPSBvYmplY3RzO1xuXHRcdFx0XHRcdFx0XHRpZihjb2xpbmZvLmxlbmd0aCA+IDApIG91dFtcIiFjb2xzXCJdID0gY29saW5mbztcblx0XHRcdFx0XHRcdFx0aWYocm93aW5mby5sZW5ndGggPiAwKSBvdXRbXCIhcm93c1wiXSA9IHJvd2luZm87XG5cdFx0XHRcdFx0XHRcdFdvcmtib29rLlNoZWV0cy5wdXNoKHdzcHJvcHMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoY3VyX3NoZWV0ID09PSBcIlwiKSBQcmVhbWJsZSA9IG91dDsgZWxzZSBTaGVldHNbY3VyX3NoZWV0XSA9IG91dDtcblx0XHRcdFx0XHRcdG91dCA9IG9wdGlvbnMuZGVuc2UgPyBbXSA6IHt9O1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQk9GJzoge1xuXHRcdFx0XHRcdFx0aWYob3B0cy5iaWZmICE9PSA4KXsvKiBlbXB0eSAqL31cblx0XHRcdFx0XHRcdGVsc2UgaWYoUmVjb3JkVHlwZSAgPT09IDB4MDAwOSkgb3B0cy5iaWZmID0gMjtcblx0XHRcdFx0XHRcdGVsc2UgaWYoUmVjb3JkVHlwZSAgPT09IDB4MDIwOSkgb3B0cy5iaWZmID0gMztcblx0XHRcdFx0XHRcdGVsc2UgaWYoUmVjb3JkVHlwZSAgPT09IDB4MDQwOSkgb3B0cy5iaWZmID0gNDtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsLkJJRkZWZXIgPT09IDB4MDUwMCkgb3B0cy5iaWZmID0gNTtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsLkJJRkZWZXIgPT09IDB4MDYwMCkgb3B0cy5iaWZmID0gODtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsLkJJRkZWZXIgPT09IDB4MDAwMikgb3B0cy5iaWZmID0gMjtcblx0XHRcdFx0XHRcdGVsc2UgaWYodmFsLkJJRkZWZXIgPT09IDB4MDAwNykgb3B0cy5iaWZmID0gMjtcblx0XHRcdFx0XHRcdGlmKGZpbGVfZGVwdGgrKykgYnJlYWs7XG5cdFx0XHRcdFx0XHRjZWxsX3ZhbGlkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdG91dCA9IChvcHRpb25zLmRlbnNlID8gW10gOiB7fSk7XG5cblx0XHRcdFx0XHRcdGlmKG9wdHMuYmlmZiA8IDUpIHtcblx0XHRcdFx0XHRcdFx0aWYoY3VyX3NoZWV0ID09PSBcIlwiKSBjdXJfc2hlZXQgPSBcIlNoZWV0MVwiO1xuXHRcdFx0XHRcdFx0XHRyYW5nZSA9IHtzOntyOjAsYzowfSxlOntyOjAsYzowfX07XG5cdFx0XHRcdFx0XHRcdC8qIGZha2UgQm91bmRTaGVldDggKi9cblx0XHRcdFx0XHRcdFx0dmFyIGZha2ViczggPSB7cG9zOiBibG9iLmwgLSBsZW5ndGgsIG5hbWU6Y3VyX3NoZWV0fTtcblx0XHRcdFx0XHRcdFx0RGlyZWN0b3J5W2Zha2ViczgucG9zXSA9IGZha2Viczg7XG5cdFx0XHRcdFx0XHRcdG9wdHMuc25hbWVzLnB1c2goY3VyX3NoZWV0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgY3VyX3NoZWV0ID0gKERpcmVjdG9yeVtzXSB8fCB7bmFtZTpcIlwifSkubmFtZTtcblx0XHRcdFx0XHRcdGlmKHZhbC5kdCA9PSAweDIwKSBvdXRbXCIhdHlwZVwiXSA9IFwiY2hhcnRcIjtcblx0XHRcdFx0XHRcdG1lcmdlY2VsbHMgPSBbXTtcblx0XHRcdFx0XHRcdG9iamVjdHMgPSBbXTtcblx0XHRcdFx0XHRcdGFycmF5X2Zvcm11bGFlID0gW107IG9wdHMuYXJyYXlmID0gYXJyYXlfZm9ybXVsYWU7XG5cdFx0XHRcdFx0XHRjb2xpbmZvID0gW107IHJvd2luZm8gPSBbXTtcblx0XHRcdFx0XHRcdGRlZndpZHRoID0gZGVmaGVpZ2h0ID0gMDtcblx0XHRcdFx0XHRcdHNlZW5jb2wgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHdzcHJvcHMgPSB7SGlkZGVuOihEaXJlY3Rvcnlbc118fHtoczowfSkuaHMsIG5hbWU6Y3VyX3NoZWV0IH07XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ051bWJlcic6IGNhc2UgJ0JJRkYyTlVNJzogY2FzZSAnQklGRjJJTlQnOiB7XG5cdFx0XHRcdFx0XHRpZihvdXRbXCIhdHlwZVwiXSA9PSBcImNoYXJ0XCIpIGlmKG9wdGlvbnMuZGVuc2UgPyAob3V0W3ZhbC5yXXx8W10pW3ZhbC5jXTogb3V0W2VuY29kZV9jZWxsKHtjOnZhbC5jLCByOnZhbC5yfSldKSArK3ZhbC5jO1xuXHRcdFx0XHRcdFx0dGVtcF92YWwgPSB7aXhmZTogdmFsLml4ZmUsIFhGOiBYRnNbdmFsLml4ZmVdfHx7fSwgdjp2YWwudmFsLCB0OiduJ307XG5cdFx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4MUZdO1xuXHRcdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0Jvb2xFcnInOiB7XG5cdFx0XHRcdFx0XHR0ZW1wX3ZhbCA9IHtpeGZlOiB2YWwuaXhmZSwgWEY6IFhGc1t2YWwuaXhmZV0sIHY6dmFsLnZhbCwgdDp2YWwudH07XG5cdFx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4MUZdO1xuXHRcdFx0XHRcdFx0c2FmZV9mb3JtYXRfeGYodGVtcF92YWwsIG9wdGlvbnMsIHdiLm9wdHMuRGF0ZTE5MDQpO1xuXHRcdFx0XHRcdFx0YWRkY2VsbCh7Yzp2YWwuYywgcjp2YWwucn0sIHRlbXBfdmFsLCBvcHRpb25zKTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1JLJzoge1xuXHRcdFx0XHRcdFx0dGVtcF92YWwgPSB7aXhmZTogdmFsLml4ZmUsIFhGOiBYRnNbdmFsLml4ZmVdLCB2OnZhbC5ya251bSwgdDonbid9O1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDFGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdNdWxSayc6IHtcblx0XHRcdFx0XHRcdGZvcih2YXIgaiA9IHZhbC5jOyBqIDw9IHZhbC5DOyArK2opIHtcblx0XHRcdFx0XHRcdFx0dmFyIGl4ZmUgPSB2YWwucmtyZWNbai12YWwuY11bMF07XG5cdFx0XHRcdFx0XHRcdHRlbXBfdmFsPSB7aXhmZTppeGZlLCBYRjpYRnNbaXhmZV0sIHY6dmFsLnJrcmVjW2otdmFsLmNdWzFdLCB0OiduJ307XG5cdFx0XHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgxRl07XG5cdFx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdFx0YWRkY2VsbCh7YzpqLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRm9ybXVsYSc6IHtcblx0XHRcdFx0XHRcdGlmKHZhbC52YWwgPT0gJ1N0cmluZycpIHsgbGFzdF9mb3JtdWxhID0gdmFsOyBicmVhazsgfVxuXHRcdFx0XHRcdFx0dGVtcF92YWwgPSAoe3Y6dmFsLnZhbCwgaXhmZTp2YWwuY2VsbC5peGZlLCB0OnZhbC50dH0pO1xuXHRcdFx0XHRcdFx0dGVtcF92YWwuWEYgPSBYRnNbdGVtcF92YWwuaXhmZV07XG5cdFx0XHRcdFx0XHRpZihvcHRpb25zLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBfZiA9IHZhbC5mb3JtdWxhO1xuXHRcdFx0XHRcdFx0XHRpZihfZiAmJiBfZlswXSAmJiBfZlswXVswXSAmJiBfZlswXVswXVswXSA9PSAnUHRnRXhwJykge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBfZnIgPSBfZlswXVswXVsxXVswXSwgX2ZjID0gX2ZbMF1bMF1bMV1bMV07XG5cdFx0XHRcdFx0XHRcdFx0dmFyIF9mZSA9IGVuY29kZV9jZWxsKHtyOl9mciwgYzpfZmN9KTtcblx0XHRcdFx0XHRcdFx0XHRpZihzaGFyZWRfZm9ybXVsYWVbX2ZlXSkgdGVtcF92YWwuZiA9IFwiXCIrc3RyaW5naWZ5X2Zvcm11bGEodmFsLmZvcm11bGEscmFuZ2UsdmFsLmNlbGwsc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0XHRcdGVsc2UgdGVtcF92YWwuRiA9ICgob3B0aW9ucy5kZW5zZSA/IChvdXRbX2ZyXXx8W10pW19mY106IG91dFtfZmVdKSB8fCB7fSkuRjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHRlbXBfdmFsLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbC5mb3JtdWxhLHJhbmdlLHZhbC5jZWxsLHN1cGJvb2tzLCBvcHRzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgxRl07XG5cdFx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0XHRhZGRjZWxsKHZhbC5jZWxsLCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0XHRsYXN0X2Zvcm11bGEgPSB2YWw7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdTdHJpbmcnOiB7XG5cdFx0XHRcdFx0XHRpZihsYXN0X2Zvcm11bGEpIHsgLyogdGVjaG5pY2FsbHkgYWx3YXlzIHRydWUgKi9cblx0XHRcdFx0XHRcdFx0bGFzdF9mb3JtdWxhLnZhbCA9IHZhbDtcblx0XHRcdFx0XHRcdFx0dGVtcF92YWwgPSAoe3Y6dmFsLCBpeGZlOmxhc3RfZm9ybXVsYS5jZWxsLml4ZmUsIHQ6J3MnfSk7XG5cdFx0XHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdFx0XHRpZihvcHRpb25zLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGVtcF92YWwuZiA9IFwiXCIrc3RyaW5naWZ5X2Zvcm11bGEobGFzdF9mb3JtdWxhLmZvcm11bGEsIHJhbmdlLCBsYXN0X2Zvcm11bGEuY2VsbCwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgxRl07XG5cdFx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdFx0YWRkY2VsbChsYXN0X2Zvcm11bGEuY2VsbCwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdFx0XHRsYXN0X2Zvcm11bGEgPSBudWxsO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHRocm93IG5ldyBFcnJvcihcIlN0cmluZyByZWNvcmQgZXhwZWN0cyBGb3JtdWxhXCIpO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQXJyYXknOiB7XG5cdFx0XHRcdFx0XHRhcnJheV9mb3JtdWxhZS5wdXNoKHZhbCk7XG5cdFx0XHRcdFx0XHR2YXIgX2FycmF5c3RhcnQgPSBlbmNvZGVfY2VsbCh2YWxbMF0ucyk7XG5cdFx0XHRcdFx0XHRjYyA9IG9wdGlvbnMuZGVuc2UgPyAob3V0W3ZhbFswXS5zLnJdfHxbXSlbdmFsWzBdLnMuY10gOiBvdXRbX2FycmF5c3RhcnRdO1xuXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5jZWxsRm9ybXVsYSAmJiBjYykge1xuXHRcdFx0XHRcdFx0XHRpZighbGFzdF9mb3JtdWxhKSBicmVhazsgLyogdGVjaG5pY2FsbHkgdW5yZWFjaGFibGUgKi9cblx0XHRcdFx0XHRcdFx0aWYoIV9hcnJheXN0YXJ0IHx8ICFjYykgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNjLmYgPSBcIlwiK3N0cmluZ2lmeV9mb3JtdWxhKHZhbFsxXSwgcmFuZ2UsIHZhbFswXSwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0XHRjYy5GID0gZW5jb2RlX3JhbmdlKHZhbFswXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdTaHJGbWxhJzoge1xuXHRcdFx0XHRcdFx0aWYoIWNlbGxfdmFsaWQpIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuY2VsbEZvcm11bGEpIGJyZWFrO1xuXHRcdFx0XHRcdFx0aWYobGFzdF9jZWxsKSB7XG5cdFx0XHRcdFx0XHRcdC8qIFRPRE86IGNhcHR1cmUgcmFuZ2UgKi9cblx0XHRcdFx0XHRcdFx0aWYoIWxhc3RfZm9ybXVsYSkgYnJlYWs7IC8qIHRlY2huaWNhbGx5IHVucmVhY2hhYmxlICovXG5cdFx0XHRcdFx0XHRcdHNoYXJlZF9mb3JtdWxhZVtlbmNvZGVfY2VsbChsYXN0X2Zvcm11bGEuY2VsbCldPSB2YWxbMF07XG5cdFx0XHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbbGFzdF9mb3JtdWxhLmNlbGwucl18fFtdKVtsYXN0X2Zvcm11bGEuY2VsbC5jXSA6IG91dFtlbmNvZGVfY2VsbChsYXN0X2Zvcm11bGEuY2VsbCldO1xuXHRcdFx0XHRcdFx0XHQoY2N8fHt9KS5mID0gXCJcIitzdHJpbmdpZnlfZm9ybXVsYSh2YWxbMF0sIHJhbmdlLCBsYXN0Y2VsbCwgc3VwYm9va3MsIG9wdHMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTGFiZWxTc3QnOlxuXHRcdFx0XHRcdFx0dGVtcF92YWw9bWFrZV9jZWxsKHNzdFt2YWwuaXNzdF0udCwgdmFsLml4ZmUsICdzJyk7XG5cdFx0XHRcdFx0XHR0ZW1wX3ZhbC5YRiA9IFhGc1t0ZW1wX3ZhbC5peGZlXTtcblx0XHRcdFx0XHRcdGlmKEJJRkYyRm10ID4gMCkgdGVtcF92YWwueiA9IEJJRkYyRm10VGFibGVbKHRlbXBfdmFsLml4ZmU+PjgpICYgMHgxRl07XG5cdFx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0XHRhZGRjZWxsKHtjOnZhbC5jLCByOnZhbC5yfSwgdGVtcF92YWwsIG9wdGlvbnMpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQmxhbmsnOiBpZihvcHRpb25zLnNoZWV0U3R1YnMpIHtcblx0XHRcdFx0XHRcdHRlbXBfdmFsID0ge2l4ZmU6IHZhbC5peGZlLCBYRjogWEZzW3ZhbC5peGZlXSwgdDoneid9O1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDFGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdNdWxCbGFuayc6IGlmKG9wdGlvbnMuc2hlZXRTdHVicykge1xuXHRcdFx0XHRcdFx0Zm9yKHZhciBfaiA9IHZhbC5jOyBfaiA8PSB2YWwuQzsgKytfaikge1xuXHRcdFx0XHRcdFx0XHR2YXIgX2l4ZmUgPSB2YWwuaXhmZVtfai12YWwuY107XG5cdFx0XHRcdFx0XHRcdHRlbXBfdmFsPSB7aXhmZTpfaXhmZSwgWEY6WEZzW19peGZlXSwgdDoneid9O1xuXHRcdFx0XHRcdFx0XHRpZihCSUZGMkZtdCA+IDApIHRlbXBfdmFsLnogPSBCSUZGMkZtdFRhYmxlWyh0ZW1wX3ZhbC5peGZlPj44KSAmIDB4MUZdO1xuXHRcdFx0XHRcdFx0XHRzYWZlX2Zvcm1hdF94Zih0ZW1wX3ZhbCwgb3B0aW9ucywgd2Iub3B0cy5EYXRlMTkwNCk7XG5cdFx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6X2osIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdSU3RyaW5nJzpcblx0XHRcdFx0XHRjYXNlICdMYWJlbCc6IGNhc2UgJ0JJRkYyU1RSJzpcblx0XHRcdFx0XHRcdHRlbXBfdmFsPW1ha2VfY2VsbCh2YWwudmFsLCB2YWwuaXhmZSwgJ3MnKTtcblx0XHRcdFx0XHRcdHRlbXBfdmFsLlhGID0gWEZzW3RlbXBfdmFsLml4ZmVdO1xuXHRcdFx0XHRcdFx0aWYoQklGRjJGbXQgPiAwKSB0ZW1wX3ZhbC56ID0gQklGRjJGbXRUYWJsZVsodGVtcF92YWwuaXhmZT4+OCkgJiAweDFGXTtcblx0XHRcdFx0XHRcdHNhZmVfZm9ybWF0X3hmKHRlbXBfdmFsLCBvcHRpb25zLCB3Yi5vcHRzLkRhdGUxOTA0KTtcblx0XHRcdFx0XHRcdGFkZGNlbGwoe2M6dmFsLmMsIHI6dmFsLnJ9LCB0ZW1wX3ZhbCwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0RpbWVuc2lvbnMnOiB7XG5cdFx0XHRcdFx0XHRpZihmaWxlX2RlcHRoID09PSAxKSByYW5nZSA9IHZhbDsgLyogVE9ETzogc3RhY2sgKi9cblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NTVCc6IHtcblx0XHRcdFx0XHRcdHNzdCA9IHZhbDtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0Zvcm1hdCc6IHsgLyogdmFsID0gW2lkLCBmbXRdICovXG5cdFx0XHRcdFx0XHRTU0YubG9hZCh2YWxbMV0sIHZhbFswXSk7XG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdCSUZGMkZPUk1BVCc6IHtcblx0XHRcdFx0XHRcdEJJRkYyRm10VGFibGVbQklGRjJGbXQrK10gPSB2YWw7XG5cdFx0XHRcdFx0XHRmb3IodmFyIGIyaWR4ID0gMDsgYjJpZHggPCBCSUZGMkZtdCArIDE2MzsgKytiMmlkeCkgaWYoU1NGLl90YWJsZVtiMmlkeF0gPT0gdmFsKSBicmVhaztcblx0XHRcdFx0XHRcdGlmKGIyaWR4ID49IDE2MykgU1NGLmxvYWQodmFsLCBCSUZGMkZtdCArIDE2Myk7XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ01lcmdlQ2VsbHMnOiBtZXJnZWNlbGxzID0gbWVyZ2VjZWxscy5jb25jYXQodmFsKTsgYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdPYmonOiBvYmplY3RzW3ZhbC5jbW9bMF1dID0gb3B0cy5sYXN0b2JqID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdUeE8nOiBvcHRzLmxhc3RvYmouVHhPID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdJbURhdGEnOiBvcHRzLmxhc3RvYmouSW1EYXRhID0gdmFsOyBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0hMaW5rJzoge1xuXHRcdFx0XHRcdFx0Zm9yKHJuZ1IgPSB2YWxbMF0ucy5yOyBybmdSIDw9IHZhbFswXS5lLnI7ICsrcm5nUilcblx0XHRcdFx0XHRcdFx0Zm9yKHJuZ0MgPSB2YWxbMF0ucy5jOyBybmdDIDw9IHZhbFswXS5lLmM7ICsrcm5nQykge1xuXHRcdFx0XHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbcm5nUl18fFtdKVtybmdDXSA6IG91dFtlbmNvZGVfY2VsbCh7YzpybmdDLHI6cm5nUn0pXTtcblx0XHRcdFx0XHRcdFx0XHRpZihjYykgY2MubCA9IHZhbFsxXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnSExpbmtUb29sdGlwJzoge1xuXHRcdFx0XHRcdFx0Zm9yKHJuZ1IgPSB2YWxbMF0ucy5yOyBybmdSIDw9IHZhbFswXS5lLnI7ICsrcm5nUilcblx0XHRcdFx0XHRcdFx0Zm9yKHJuZ0MgPSB2YWxbMF0ucy5jOyBybmdDIDw9IHZhbFswXS5lLmM7ICsrcm5nQykge1xuXHRcdFx0XHRcdFx0XHRcdGNjID0gb3B0aW9ucy5kZW5zZSA/IChvdXRbcm5nUl18fFtdKVtybmdDXSA6IG91dFtlbmNvZGVfY2VsbCh7YzpybmdDLHI6cm5nUn0pXTtcblx0XHRcdFx0XHRcdFx0XHRpZihjYykgY2MubC5Ub29sdGlwID0gdmFsWzFdO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogQ29tbWVudHMgKi9cblx0XHRcdFx0XHRjYXNlICdOb3RlJzoge1xuXHRcdFx0XHRcdFx0aWYob3B0cy5iaWZmIDw9IDUgJiYgb3B0cy5iaWZmID49IDIpIGJyZWFrOyAvKiBUT0RPOiBCSUZGNSAqL1xuXHRcdFx0XHRcdFx0Y2MgPSBvcHRpb25zLmRlbnNlID8gKG91dFt2YWxbMF0ucl18fFtdKVt2YWxbMF0uY10gOiBvdXRbZW5jb2RlX2NlbGwodmFsWzBdKV07XG5cdFx0XHRcdFx0XHR2YXIgbm90ZW9iaiA9IG9iamVjdHNbdmFsWzJdXTtcblx0XHRcdFx0XHRcdGlmKCFjYykgYnJlYWs7XG5cdFx0XHRcdFx0XHRpZighY2MuYykgY2MuYyA9IFtdO1xuXHRcdFx0XHRcdFx0Y21udCA9IHthOnZhbFsxXSx0Om5vdGVvYmouVHhPLnR9O1xuXHRcdFx0XHRcdFx0Y2MuYy5wdXNoKGNtbnQpO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHRkZWZhdWx0OiBzd2l0Y2goUi5uKSB7IC8qIG5lc3RlZCAqL1xuXHRcdFx0XHRcdGNhc2UgJ0NscnRDbGllbnQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdYRkV4dCc6IHVwZGF0ZV94ZmV4dChYRnNbdmFsLml4ZmVdLCB2YWwuZXh0KTsgYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdEZWZDb2xXaWR0aCc6IGRlZndpZHRoID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRjYXNlICdEZWZhdWx0Um93SGVpZ2h0JzogZGVmaGVpZ2h0ID0gdmFsWzFdOyBicmVhazsgLy8gVE9ETzogZmxhZ3NcblxuXHRcdFx0XHRcdGNhc2UgJ0NvbEluZm8nOiB7XG5cdFx0XHRcdFx0XHRpZighb3B0cy5jZWxsU3R5bGVzKSBicmVhaztcblx0XHRcdFx0XHRcdHdoaWxlKHZhbC5lID49IHZhbC5zKSB7XG5cdFx0XHRcdFx0XHRcdGNvbGluZm9bdmFsLmUtLV0gPSB7IHdpZHRoOiB2YWwudy8yNTYgfTtcblx0XHRcdFx0XHRcdFx0aWYoIXNlZW5jb2wpIHsgc2VlbmNvbCA9IHRydWU7IGZpbmRfbWR3X2NvbHcodmFsLncvMjU2KTsgfVxuXHRcdFx0XHRcdFx0XHRwcm9jZXNzX2NvbChjb2xpbmZvW3ZhbC5lKzFdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1Jvdyc6IHtcblx0XHRcdFx0XHRcdHZhciByb3dvYmogPSB7fTtcblx0XHRcdFx0XHRcdGlmKHZhbC5oaWRkZW4pIHsgcm93aW5mb1t2YWwucl0gPSByb3dvYmo7IHJvd29iai5oaWRkZW4gPSB0cnVlOyB9XG5cdFx0XHRcdFx0XHRpZih2YWwuaHB0KSB7XG5cdFx0XHRcdFx0XHRcdHJvd2luZm9bdmFsLnJdID0gcm93b2JqO1xuXHRcdFx0XHRcdFx0XHRyb3dvYmouaHB0ID0gdmFsLmhwdDsgcm93b2JqLmhweCA9IHB0MnB4KHZhbC5ocHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdMZWZ0TWFyZ2luJzpcblx0XHRcdFx0XHRjYXNlICdSaWdodE1hcmdpbic6XG5cdFx0XHRcdFx0Y2FzZSAnVG9wTWFyZ2luJzpcblx0XHRcdFx0XHRjYXNlICdCb3R0b21NYXJnaW4nOlxuXHRcdFx0XHRcdFx0aWYoIW91dFsnIW1hcmdpbnMnXSkgZGVmYXVsdF9tYXJnaW5zKG91dFsnIW1hcmdpbnMnXSA9IHt9KTtcblx0XHRcdFx0XHRcdHN3aXRjaChSbikge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdMZWZ0TWFyZ2luJzogb3V0WychbWFyZ2lucyddLmxlZnQgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdSaWdodE1hcmdpbic6IG91dFsnIW1hcmdpbnMnXS5yaWdodCA9IHZhbDsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ1RvcE1hcmdpbic6IG91dFsnIW1hcmdpbnMnXS50b3AgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdCb3R0b21NYXJnaW4nOiBvdXRbJyFtYXJnaW5zJ10uYm90dG9tID0gdmFsOyBicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU2V0dXAnOiAvLyBUT0RPXG5cdFx0XHRcdFx0XHRpZighb3V0WychbWFyZ2lucyddKSBkZWZhdWx0X21hcmdpbnMob3V0WychbWFyZ2lucyddID0ge30pO1xuXHRcdFx0XHRcdFx0b3V0WychbWFyZ2lucyddLmhlYWRlciA9IHZhbC5oZWFkZXI7XG5cdFx0XHRcdFx0XHRvdXRbJyFtYXJnaW5zJ10uZm9vdGVyID0gdmFsLmZvb3Rlcjtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnSGVhZGVyJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdGb290ZXInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ0hDZW50ZXInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1ZDZW50ZXInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1Bscyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnR0NXJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTEhSZWNvcmQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdEQkNlbGwnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ0VudEV4VTInOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1N4Vmlldyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU3h2ZCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hWSSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hWREV4JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdTeEl2ZCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hESSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hMSSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hFeCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnUXNpU1hUYWcnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1NlbGVjdGlvbic6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0ZlYXQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdGZWF0SGRyJzogY2FzZSAnRmVhdEhkcjExJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRmVhdHVyZTExJzogY2FzZSAnRmVhdHVyZTEyJzogY2FzZSAnTGlzdDEyJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQ291bnRyeSc6IGNvdW50cnkgPSB2YWw7IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1JlY2FsY0lkJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRHhHQ29sJzogYnJlYWs7IC8vIFRPRE86IGh0bWxpZnlcblx0XHRcdFx0XHRjYXNlICdGYmknOiBjYXNlICdGYmkyJzogY2FzZSAnR2VsRnJhbWUnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdGb250JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdYRkNSQyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU3R5bGUnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1N0eWxlRXh0JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdQYWxldHRlJzogcGFsZXR0ZSA9IHZhbDsgYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdUaGVtZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0LyogUHJvdGVjdGlvbiAqL1xuXHRcdFx0XHRcdGNhc2UgJ1NjZW5hcmlvUHJvdGVjdCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ09ialByb3RlY3QnOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIENvbmRpdGlvbmFsIEZvcm1hdHRpbmcgKi9cblx0XHRcdFx0XHRjYXNlICdDb25kRm10MTInOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIFRhYmxlICovXG5cdFx0XHRcdFx0Y2FzZSAnVGFibGUnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1RhYmxlU3R5bGVzJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdUYWJsZVN0eWxlJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdUYWJsZVN0eWxlRWxlbWVudCc6IGJyZWFrOyAvLyBUT0RPXG5cblx0XHRcdFx0XHQvKiBQaXZvdFRhYmxlICovXG5cdFx0XHRcdFx0Y2FzZSAnU1hTdHJlYW1JRCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hWUyc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnRENvblJlZic6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hBZGRsJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdEQ29uQmluJzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdEQ29uTmFtZSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU1hQSSc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU3hGb3JtYXQnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1N4U2VsZWN0JzogYnJlYWs7IC8vIFRPRE9cblx0XHRcdFx0XHRjYXNlICdTeFJ1bGUnOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1N4RmlsdCc6IGJyZWFrOyAvLyBUT0RPXG5cdFx0XHRcdFx0Y2FzZSAnU3hJdG0nOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1N4RFhGJzogYnJlYWs7IC8vIFRPRE9cblxuXHRcdFx0XHRcdC8qIFNjZW5hcmlvIE1hbmFnZXIgKi9cblx0XHRcdFx0XHRjYXNlICdTY2VuTWFuJzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBEYXRhIENvbnNvbGlkYXRpb24gKi9cblx0XHRcdFx0XHRjYXNlICdEQ29uJzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBXYXRjaGVkIENlbGwgKi9cblx0XHRcdFx0XHRjYXNlICdDZWxsV2F0Y2gnOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIFByaW50IFNldHRpbmdzICovXG5cdFx0XHRcdFx0Y2FzZSAnUHJpbnRSb3dDb2wnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdQcmludEdyaWQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdQcmludFNpemUnOiBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1hDVCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0NSTic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU2NsJzoge1xuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcIlpvb20gTGV2ZWw6XCIsIHZhbFswXS92YWxbMV0sdmFsKTtcblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NoZWV0RXh0Jzoge1xuXHRcdFx0XHRcdFx0LyogZW1wdHkgKi9cblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NoZWV0RXh0T3B0aW9uYWwnOiB7XG5cdFx0XHRcdFx0XHQvKiBlbXB0eSAqL1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBWQkEgKi9cblx0XHRcdFx0XHRjYXNlICdPYk5vTWFjcm9zJzoge1xuXHRcdFx0XHRcdFx0LyogZW1wdHkgKi9cblx0XHRcdFx0XHR9IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ09iUHJvaic6IHtcblx0XHRcdFx0XHRcdC8qIGVtcHR5ICovXG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDb2RlTmFtZSc6IHtcblx0XHRcdFx0XHRcdC8qIGVtcHR5ICovXG5cdFx0XHRcdFx0fSBicmVhaztcblx0XHRcdFx0XHRjYXNlICdHVUlEVHlwZUxpYic6IHtcblx0XHRcdFx0XHRcdC8qIGVtcHR5ICovXG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1dPcHQnOiBicmVhazsgLy8gVE9ETzogV1RGP1xuXHRcdFx0XHRcdGNhc2UgJ1Bob25ldGljSW5mbyc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnT2xlT2JqZWN0U2l6ZSc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogRGlmZmVyZW50aWFsIEZvcm1hdHRpbmcgKi9cblx0XHRcdFx0XHRjYXNlICdEWEYnOiBjYXNlICdEWEZOJzogY2FzZSAnRFhGTjEyJzogY2FzZSAnRFhGTjEyTGlzdCc6IGNhc2UgJ0RYRk4xMk5vQ0InOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIERhdGEgVmFsaWRhdGlvbiAqL1xuXHRcdFx0XHRcdGNhc2UgJ0R2JzogY2FzZSAnRFZhbCc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogRGF0YSBTZXJpZXMgKi9cblx0XHRcdFx0XHRjYXNlICdCUkFJJzogY2FzZSAnU2VyaWVzJzogY2FzZSAnU2VyaWVzVGV4dCc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogRGF0YSBDb25uZWN0aW9uICovXG5cdFx0XHRcdFx0Y2FzZSAnRENvbm4nOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdEYk9yUGFyYW1RcnknOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdEQlF1ZXJ5RXh0JzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBGb3JtYXR0aW5nICovXG5cdFx0XHRcdFx0Y2FzZSAnSUZtdFJlY29yZCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0NvbmRGbXQnOiBjYXNlICdDRic6IGNhc2UgJ0NGMTInOiBjYXNlICdDRkV4JzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBFeHBsaWNpdGx5IElnbm9yZWQgKi9cblx0XHRcdFx0XHRjYXNlICdFeGNlbDlGaWxlJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnVW5pdHMnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdJbnRlcmZhY2VIZHInOiBjYXNlICdNbXMnOiBjYXNlICdJbnRlcmZhY2VFbmQnOiBjYXNlICdEU0YnOiBjYXNlICdCdWlsdEluRm5Hcm91cENvdW50JzogYnJlYWs7XG5cdFx0XHRcdFx0LyogVmlldyBTdHVmZiAqL1xuXHRcdFx0XHRcdGNhc2UgJ1dpbmRvdzEnOiBjYXNlICdXaW5kb3cyJzogY2FzZSAnSGlkZU9iaic6IGNhc2UgJ0dyaWRTZXQnOiBjYXNlICdHdXRzJzpcblx0XHRcdFx0XHRjYXNlICdVc2VyQlZpZXcnOiBjYXNlICdVc2VyU1ZpZXdCZWdpbic6IGNhc2UgJ1VzZXJTVmlld0VuZCc6XG5cdFx0XHRcdFx0Y2FzZSAnUGFuZSc6IGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHN3aXRjaChSLm4pIHsgLyogbmVzdGVkICovXG5cdFx0XHRcdFx0LyogQ2hhcnQgKi9cblx0XHRcdFx0XHRjYXNlICdEYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ0JlZ2luJzogY2FzZSAnRW5kJzpcblx0XHRcdFx0XHRjYXNlICdTdGFydEJsb2NrJzogY2FzZSAnRW5kQmxvY2snOlxuXHRcdFx0XHRcdGNhc2UgJ0ZyYW1lJzogY2FzZSAnQXJlYSc6XG5cdFx0XHRcdFx0Y2FzZSAnQXhpcyc6IGNhc2UgJ0F4aXNMaW5lJzogY2FzZSAnVGljayc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ0F4ZXNVc2VkJzpcblx0XHRcdFx0XHRjYXNlICdDcnRMYXlvdXQxMic6IGNhc2UgJ0NydExheW91dDEyQSc6IGNhc2UgJ0NydExpbmsnOiBjYXNlICdDcnRMaW5lJzogY2FzZSAnQ3J0TWxGcnQnOiBjYXNlICdDcnRNbEZydENvbnRpbnVlJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTGluZUZvcm1hdCc6IGNhc2UgJ0FyZWFGb3JtYXQnOlxuXHRcdFx0XHRcdGNhc2UgJ0NoYXJ0JzogY2FzZSAnQ2hhcnQzZCc6IGNhc2UgJ0NoYXJ0M0RCYXJTaGFwZSc6IGNhc2UgJ0NoYXJ0Rm9ybWF0JzogY2FzZSAnQ2hhcnRGcnRJbmZvJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnUGxvdEFyZWEnOiBjYXNlICdQbG90R3Jvd3RoJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnU2VyaWVzTGlzdCc6IGNhc2UgJ1NlclBhcmVudCc6IGNhc2UgJ1NlckF1eFRyZW5kJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRGF0YUZvcm1hdCc6IGNhc2UgJ1NlclRvQ3J0JzogY2FzZSAnRm9udFgnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDYXRTZXJSYW5nZSc6IGNhc2UgJ0F4Y0V4dCc6IGNhc2UgJ1NlckZtdCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NodFByb3BzJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRGVmYXVsdFRleHQnOiBjYXNlICdUZXh0JzogY2FzZSAnQ2F0TGFiJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRGF0YUxhYkV4dENvbnRlbnRzJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTGVnZW5kJzogY2FzZSAnTGVnZW5kRXhjZXB0aW9uJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnUGllJzogY2FzZSAnU2NhdHRlcic6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1BpZUZvcm1hdCc6IGNhc2UgJ01hcmtlckZvcm1hdCc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1N0YXJ0T2JqZWN0JzogY2FzZSAnRW5kT2JqZWN0JzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQWxSdW5zJzogY2FzZSAnT2JqZWN0TGluayc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NJSW5kZXgnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdBdHRhY2hlZExhYmVsJzogY2FzZSAnWU11bHQnOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIENoYXJ0IEdyb3VwICovXG5cdFx0XHRcdFx0Y2FzZSAnTGluZSc6IGNhc2UgJ0Jhcic6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1N1cmYnOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIEF4aXMgR3JvdXAgKi9cblx0XHRcdFx0XHRjYXNlICdBeGlzUGFyZW50JzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnUG9zJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnVmFsdWVSYW5nZSc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogUGl2b3QgQ2hhcnQgKi9cblx0XHRcdFx0XHRjYXNlICdTWFZpZXdFeDknOiBicmVhazsgLy8gVE9ET1xuXHRcdFx0XHRcdGNhc2UgJ1NYVmlld0xpbmsnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdQaXZvdENoYXJ0Qml0cyc6IGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ1NCYXNlUmVmJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnVGV4dFByb3BzU3RyZWFtJzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBDaGFydCBNaXNjICovXG5cdFx0XHRcdFx0Y2FzZSAnTG5FeHQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdNa3JFeHQnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdDcnRDb29wdCc6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogUXVlcnkgVGFibGUgKi9cblx0XHRcdFx0XHRjYXNlICdRc2knOiBjYXNlICdRc2lmJzogY2FzZSAnUXNpcic6IGNhc2UgJ1FzaVNYVGFnJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnVHh0UXJ5JzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBGaWx0ZXIgKi9cblx0XHRcdFx0XHRjYXNlICdGaWx0ZXJNb2RlJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQXV0b0ZpbHRlcic6IGNhc2UgJ0F1dG9GaWx0ZXJJbmZvJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQXV0b0ZpbHRlcjEyJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnRHJvcERvd25PYmpJZHMnOiBicmVhaztcblx0XHRcdFx0XHRjYXNlICdTb3J0JzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnU29ydERhdGEnOiBicmVhaztcblxuXHRcdFx0XHRcdC8qIERyYXdpbmcgKi9cblx0XHRcdFx0XHRjYXNlICdTaGFwZVByb3BzU3RyZWFtJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnTXNvRHJhd2luZyc6IGNhc2UgJ01zb0RyYXdpbmdHcm91cCc6IGNhc2UgJ01zb0RyYXdpbmdTZWxlY3Rpb24nOiBicmVhaztcblx0XHRcdFx0XHQvKiBQdWIgU3R1ZmYgKi9cblx0XHRcdFx0XHRjYXNlICdXZWJQdWInOiBjYXNlICdBdXRvV2ViUHViJzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBQcmludCBTdHVmZiAqL1xuXHRcdFx0XHRcdGNhc2UgJ0hlYWRlckZvb3Rlcic6IGNhc2UgJ0hGUGljdHVyZSc6IGNhc2UgJ1BMVic6XG5cdFx0XHRcdFx0Y2FzZSAnSG9yaXpvbnRhbFBhZ2VCcmVha3MnOiBjYXNlICdWZXJ0aWNhbFBhZ2VCcmVha3MnOiBicmVhaztcblx0XHRcdFx0XHQvKiBCZWhhdmlvcmFsICovXG5cdFx0XHRcdFx0Y2FzZSAnQmFja3VwJzogY2FzZSAnQ29tcHJlc3NQaWN0dXJlcyc6IGNhc2UgJ0NvbXBhdDEyJzogYnJlYWs7XG5cblx0XHRcdFx0XHQvKiBTaG91bGQgbm90IEhhcHBlbiAqL1xuXHRcdFx0XHRcdGNhc2UgJ0NvbnRpbnVlJzogY2FzZSAnQ29udGludWVGcnQxMic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogRnV0dXJlIFJlY29yZHMgKi9cblx0XHRcdFx0XHRjYXNlICdGcnRGb250TGlzdCc6IGNhc2UgJ0ZydFdyYXBwZXInOiBicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6IHN3aXRjaChSLm4pIHsgLyogbmVzdGVkICovXG5cdFx0XHRcdFx0LyogQklGRjUgcmVjb3JkcyAqL1xuXHRcdFx0XHRcdGNhc2UgJ0V4dGVybkNvdW50JzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnVGFiSWRDb25mJzogY2FzZSAnUmFkYXInOiBjYXNlICdSYWRhckFyZWEnOiBjYXNlICdEcm9wQmFyJzogY2FzZSAnSW50bCc6IGNhc2UgJ0Nvb3JkTGlzdCc6IGNhc2UgJ1NlckF1eEVyckJhcic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogQklGRjItNCByZWNvcmRzICovXG5cdFx0XHRcdFx0Y2FzZSAnQklGRjJGT05UQ0xSJzogY2FzZSAnQklGRjJGTVRDTlQnOiBjYXNlICdCSUZGMkZPTlRYVFJBJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQklGRjJYRic6IGNhc2UgJ0JJRkYzWEYnOiBjYXNlICdCSUZGNFhGJzogYnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnQklGRjRGTVRDTlQnOiBjYXNlICdCSUZGMlJPVyc6IGNhc2UgJ0JJRkYyV0lORE9XMic6IGJyZWFrO1xuXG5cdFx0XHRcdFx0LyogTWlzY2VsbGFuZW91cyAqL1xuXHRcdFx0XHRcdGNhc2UgJ1NDRU5BUklPJzogY2FzZSAnRENvbkJpbic6IGNhc2UgJ1BpY0YnOiBjYXNlICdEYXRhTGFiRXh0Jzpcblx0XHRcdFx0XHRjYXNlICdMZWwnOiBjYXNlICdCb3BQb3AnOiBjYXNlICdCb3BQb3BDdXN0b20nOiBjYXNlICdSZWFsVGltZURhdGEnOlxuXHRcdFx0XHRcdGNhc2UgJ05hbWUnOiBicmVhaztcblx0XHRcdFx0XHRkZWZhdWx0OiBpZihvcHRpb25zLldURikgdGhyb3cgJ1VucmVjb2duaXplZCBSZWNvcmQgJyArIFIubjtcblx0XHRcdFx0fX19fVxuXHRcdFx0fSBlbHNlIGJsb2IubCArPSBsZW5ndGg7XG5cdFx0fVxuXHRcdHZhciBzaGVldG5hbWVzcmF3ID0gT2JqZWN0LmtleXMoRGlyZWN0b3J5KS5zb3J0KGZ1bmN0aW9uKGEsYikgeyByZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpOyB9KS5tYXAoZnVuY3Rpb24oeCl7cmV0dXJuIERpcmVjdG9yeVt4XS5uYW1lO30pO1xuXHRcdHZhciBzaGVldG5hbWVzID0gc2hlZXRuYW1lc3Jhdy5zbGljZSgpO1xuXHRcdHdiLkRpcmVjdG9yeT1zaGVldG5hbWVzcmF3O1xuXHRcdHdiLlNoZWV0TmFtZXM9c2hlZXRuYW1lc3Jhdztcblx0XHRpZighb3B0aW9ucy5ib29rU2hlZXRzKSB3Yi5TaGVldHM9U2hlZXRzO1xuXHRcdGlmKHdiLlNoZWV0cykgRmlsdGVyRGF0YWJhc2VzLmZvckVhY2goZnVuY3Rpb24ocixpKSB7IHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2ldXVsnIWF1dG9maWx0ZXInXSA9IHI7IH0pO1xuXHRcdHdiLlByZWFtYmxlPVByZWFtYmxlO1xuXHRcdHdiLlN0cmluZ3MgPSBzc3Q7XG5cdFx0d2IuU1NGID0gU1NGLmdldF90YWJsZSgpO1xuXHRcdGlmKG9wdHMuZW5jKSB3Yi5FbmNyeXB0aW9uID0gb3B0cy5lbmM7XG5cdFx0d2IuTWV0YWRhdGEgPSB7fTtcblx0XHRpZihjb3VudHJ5ICE9PSB1bmRlZmluZWQpIHdiLk1ldGFkYXRhLkNvdW50cnkgPSBjb3VudHJ5O1xuXHRcdGlmKHN1cGJvb2tzLm5hbWVzLmxlbmd0aCA+IDApIFdvcmtib29rLk5hbWVzID0gc3VwYm9va3MubmFtZXM7XG5cdFx0d2IuV29ya2Jvb2sgPSBXb3JrYm9vaztcblx0XHRyZXR1cm4gd2I7XG5cdH1cblxuXHQvKiBUT0RPOiBXVEYgKi9cblx0ZnVuY3Rpb24gcGFyc2VfcHJvcHMoY2ZiKSB7XG5cdFx0LyogW01TLU9TSEFSRURdIDIuMy4zLjIuMiBEb2N1bWVudCBTdW1tYXJ5IEluZm9ybWF0aW9uIFByb3BlcnR5IFNldCAqL1xuXHRcdHZhciBEU0kgPSBjZmIuZmluZCgnIURvY3VtZW50U3VtbWFyeUluZm9ybWF0aW9uJyk7XG5cdFx0aWYoRFNJKSB0cnkgeyBjZmIuRG9jU3VtbWFyeSA9IHBhcnNlX1Byb3BlcnR5U2V0U3RyZWFtKERTSSwgRG9jU3VtbWFyeVBJRERTSSk7IH0gY2F0Y2goZSkgey8qIGVtcHR5ICovfVxuXG5cdFx0LyogW01TLU9TSEFSRURdIDIuMy4zLjIuMSBTdW1tYXJ5IEluZm9ybWF0aW9uIFByb3BlcnR5IFNldCovXG5cdFx0dmFyIFNJID0gY2ZiLmZpbmQoJyFTdW1tYXJ5SW5mb3JtYXRpb24nKTtcblx0XHRpZihTSSkgdHJ5IHsgY2ZiLlN1bW1hcnkgPSBwYXJzZV9Qcm9wZXJ0eVNldFN0cmVhbShTSSwgU3VtbWFyeVBJRFNJKTsgfSBjYXRjaChlKSB7LyogZW1wdHkgKi99XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZV94bHNjZmIoY2ZiLCBvcHRpb25zKSB7XG5cdGlmKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cdGZpeF9yZWFkX29wdHMob3B0aW9ucyk7XG5cdHJlc2V0X2NwKCk7XG5cdHZhciBDb21wT2JqLCBTdW1tYXJ5LCBXb3JrYm9vaztcblx0aWYoY2ZiLkZ1bGxQYXRocykge1xuXHRcdENvbXBPYmogPSBjZmIuZmluZCgnIUNvbXBPYmonKTtcblx0XHRTdW1tYXJ5ID0gY2ZiLmZpbmQoJyFTdW1tYXJ5SW5mb3JtYXRpb24nKTtcblx0XHRXb3JrYm9vayA9IGNmYi5maW5kKCcvV29ya2Jvb2snKTtcblx0fSBlbHNlIHtcblx0XHRwcmVwX2Jsb2IoY2ZiLCAwKTtcblx0XHRXb3JrYm9vayA9ICh7Y29udGVudDogY2ZifSk7XG5cdH1cblxuXHRpZighV29ya2Jvb2spIFdvcmtib29rID0gY2ZiLmZpbmQoJy9Cb29rJyk7XG5cdHZhciBDb21wT2JqUCwgU3VtbWFyeVAsIFdvcmtib29rUDtcblxuXHRpZihDb21wT2JqKSBDb21wT2JqUCA9IHBhcnNlX2NvbXBvYmooQ29tcE9iaik7XG5cdGlmKG9wdGlvbnMuYm9va1Byb3BzICYmICFvcHRpb25zLmJvb2tTaGVldHMpIFdvcmtib29rUCA9ICh7fSk7XG5cdGVsc2Uge1xuXHRcdGlmKFdvcmtib29rKSBXb3JrYm9va1AgPSBwYXJzZV93b3JrYm9vayhXb3JrYm9vay5jb250ZW50LCBvcHRpb25zLCAhIVdvcmtib29rLmZpbmQpO1xuXHRcdC8qIFF1YXR0cm8gUHJvIDctOCAqL1xuXHRcdGVsc2UgaWYoY2ZiLmZpbmQoJ1BlcmZlY3RPZmZpY2VfTUFJTicpKSBXb3JrYm9va1AgPSBXS18udG9fd29ya2Jvb2soY2ZiLmZpbmQoJ1BlcmZlY3RPZmZpY2VfTUFJTicpLmNvbnRlbnQsIG9wdGlvbnMpO1xuXHRcdC8qIFF1YXR0cm8gUHJvIDkgKi9cblx0XHRlbHNlIGlmKGNmYi5maW5kKCdOYXRpdmVDb250ZW50X01BSU4nKSkgV29ya2Jvb2tQID0gV0tfLnRvX3dvcmtib29rKGNmYi5maW5kKCdOYXRpdmVDb250ZW50X01BSU4nKS5jb250ZW50LCBvcHRpb25zKTtcblx0XHRlbHNlIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIFdvcmtib29rIHN0cmVhbVwiKTtcblx0fVxuXG5cdGlmKGNmYi5GdWxsUGF0aHMpIHBhcnNlX3Byb3BzKGNmYik7XG5cblx0dmFyIHByb3BzID0ge307XG5cdGZvcih2YXIgeSBpbiBjZmIuU3VtbWFyeSkgcHJvcHNbeV0gPSBjZmIuU3VtbWFyeVt5XTtcblx0Zm9yKHkgaW4gY2ZiLkRvY1N1bW1hcnkpIHByb3BzW3ldID0gY2ZiLkRvY1N1bW1hcnlbeV07XG5cdFdvcmtib29rUC5Qcm9wcyA9IFdvcmtib29rUC5DdXN0cHJvcHMgPSBwcm9wczsgLyogVE9ETzogc3BsaXQgdXAgcHJvcGVydGllcyAqL1xuXHRpZihvcHRpb25zLmJvb2tGaWxlcykgV29ya2Jvb2tQLmNmYiA9IGNmYjtcblx0LypXb3JrYm9va1AuQ29tcE9ialAgPSBDb21wT2JqUDsgLy8gVE9ETzogc3RvcmFnZT8gKi9cblx0cmV0dXJuIFdvcmtib29rUDtcblx0fVxuXG5cdC8qIFtNUy1YTFNCXSAyLjMgUmVjb3JkIEVudW1lcmF0aW9uICovXG5cdHZhciBYTFNCUmVjb3JkRW51bSA9IHtcblx0MHgwMDAwOiB7IG46XCJCcnRSb3dIZHJcIiwgZjpwYXJzZV9CcnRSb3dIZHIgfSxcblx0MHgwMDAxOiB7IG46XCJCcnRDZWxsQmxhbmtcIiwgZjpwYXJzZV9CcnRDZWxsQmxhbmsgfSxcblx0MHgwMDAyOiB7IG46XCJCcnRDZWxsUmtcIiwgZjpwYXJzZV9CcnRDZWxsUmsgfSxcblx0MHgwMDAzOiB7IG46XCJCcnRDZWxsRXJyb3JcIiwgZjpwYXJzZV9CcnRDZWxsRXJyb3IgfSxcblx0MHgwMDA0OiB7IG46XCJCcnRDZWxsQm9vbFwiLCBmOnBhcnNlX0JydENlbGxCb29sIH0sXG5cdDB4MDAwNTogeyBuOlwiQnJ0Q2VsbFJlYWxcIiwgZjpwYXJzZV9CcnRDZWxsUmVhbCB9LFxuXHQweDAwMDY6IHsgbjpcIkJydENlbGxTdFwiLCBmOnBhcnNlX0JydENlbGxTdCB9LFxuXHQweDAwMDc6IHsgbjpcIkJydENlbGxJc3N0XCIsIGY6cGFyc2VfQnJ0Q2VsbElzc3QgfSxcblx0MHgwMDA4OiB7IG46XCJCcnRGbWxhU3RyaW5nXCIsIGY6cGFyc2VfQnJ0Rm1sYVN0cmluZyB9LFxuXHQweDAwMDk6IHsgbjpcIkJydEZtbGFOdW1cIiwgZjpwYXJzZV9CcnRGbWxhTnVtIH0sXG5cdDB4MDAwQTogeyBuOlwiQnJ0Rm1sYUJvb2xcIiwgZjpwYXJzZV9CcnRGbWxhQm9vbCB9LFxuXHQweDAwMEI6IHsgbjpcIkJydEZtbGFFcnJvclwiLCBmOnBhcnNlX0JydEZtbGFFcnJvciB9LFxuXHQweDAwMTA6IHsgbjpcIkJydEZSVEFyY2hJRCRcIiwgZjpwYXJzZV9CcnRGUlRBcmNoSUQkIH0sXG5cdDB4MDAxMzogeyBuOlwiQnJ0U1NUSXRlbVwiLCBmOnBhcnNlX1JpY2hTdHIgfSxcblx0MHgwMDE0OiB7IG46XCJCcnRQQ0RJTWlzc2luZ1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMTU6IHsgbjpcIkJydFBDRElOdW1iZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDE2OiB7IG46XCJCcnRQQ0RJQm9vbGVhblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMTc6IHsgbjpcIkJydFBDRElFcnJvclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMTg6IHsgbjpcIkJydFBDRElTdHJpbmdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDE5OiB7IG46XCJCcnRQQ0RJRGF0ZXRpbWVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFBOiB7IG46XCJCcnRQQ0RJSW5kZXhcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFCOiB7IG46XCJCcnRQQ0RJQU1pc3NpbmdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFDOiB7IG46XCJCcnRQQ0RJQU51bWJlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMUQ6IHsgbjpcIkJydFBDRElBQm9vbGVhblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMUU6IHsgbjpcIkJydFBDRElBRXJyb3JcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDFGOiB7IG46XCJCcnRQQ0RJQVN0cmluZ1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjA6IHsgbjpcIkJydFBDRElBRGF0ZXRpbWVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDIxOiB7IG46XCJCcnRQQ1JSZWNvcmRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDIyOiB7IG46XCJCcnRQQ1JSZWNvcmREdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjM6IHsgbjpcIkJydEZSVEJlZ2luXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAyNDogeyBuOlwiQnJ0RlJURW5kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAyNTogeyBuOlwiQnJ0QUNCZWdpblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjY6IHsgbjpcIkJydEFDRW5kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAyNzogeyBuOlwiQnJ0TmFtZVwiLCBmOnBhcnNlX0JydE5hbWUgfSxcblx0MHgwMDI4OiB7IG46XCJCcnRJbmRleFJvd0Jsb2NrXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAyQTogeyBuOlwiQnJ0SW5kZXhCbG9ja1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkI6IHsgbjpcIkJydEZvbnRcIiwgZjpwYXJzZV9CcnRGb250IH0sXG5cdDB4MDAyQzogeyBuOlwiQnJ0Rm10XCIsIGY6cGFyc2VfQnJ0Rm10IH0sXG5cdDB4MDAyRDogeyBuOlwiQnJ0RmlsbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkU6IHsgbjpcIkJydEJvcmRlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMkY6IHsgbjpcIkJydFhGXCIsIGY6cGFyc2VfQnJ0WEYgfSxcblx0MHgwMDMwOiB7IG46XCJCcnRTdHlsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMzE6IHsgbjpcIkJydENlbGxNZXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzMjogeyBuOlwiQnJ0VmFsdWVNZXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzMzogeyBuOlwiQnJ0TWRiXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzNDogeyBuOlwiQnJ0QmVnaW5GbWRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDM1OiB7IG46XCJCcnRFbmRGbWRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDM2OiB7IG46XCJCcnRCZWdpbk1keFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMzc6IHsgbjpcIkJydEVuZE1keFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMzg6IHsgbjpcIkJydEJlZ2luTWR4VHVwbGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDM5OiB7IG46XCJCcnRFbmRNZHhUdXBsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwM0E6IHsgbjpcIkJydE1keE1icklzdHJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDNCOiB7IG46XCJCcnRTdHJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDNDOiB7IG46XCJCcnRDb2xJbmZvXCIsIGY6cGFyc2VfQ29sSW5mbyB9LFxuXHQweDAwM0U6IHsgbjpcIkJydENlbGxSU3RyaW5nXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAzRjogeyBuOlwiQnJ0Q2FsY0NoYWluSXRlbSRcIiwgZjpwYXJzZV9CcnRDYWxjQ2hhaW5JdGVtJCB9LFxuXHQweDAwNDA6IHsgbjpcIkJydERWYWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDQxOiB7IG46XCJCcnRTeHZjZWxsTnVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0MjogeyBuOlwiQnJ0U3h2Y2VsbFN0clwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwNDM6IHsgbjpcIkJydFN4dmNlbGxCb29sXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0NDogeyBuOlwiQnJ0U3h2Y2VsbEVyclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwNDU6IHsgbjpcIkJydFN4dmNlbGxEYXRlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0NjogeyBuOlwiQnJ0U3h2Y2VsbE5pbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwODA6IHsgbjpcIkJydEZpbGVWZXJzaW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4MTogeyBuOlwiQnJ0QmVnaW5TaGVldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwODI6IHsgbjpcIkJydEVuZFNoZWV0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4MzogeyBuOlwiQnJ0QmVnaW5Cb29rXCIsIGY6cGFyc2Vub29wLCBwOjAgfSxcblx0MHgwMDg0OiB7IG46XCJCcnRFbmRCb29rXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4NTogeyBuOlwiQnJ0QmVnaW5Xc1ZpZXdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4NjogeyBuOlwiQnJ0RW5kV3NWaWV3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwODc6IHsgbjpcIkJydEJlZ2luQm9va1ZpZXdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4ODogeyBuOlwiQnJ0RW5kQm9va1ZpZXdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4OTogeyBuOlwiQnJ0QmVnaW5Xc1ZpZXdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDhBOiB7IG46XCJCcnRFbmRXc1ZpZXdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDhCOiB7IG46XCJCcnRCZWdpbkNzVmlld3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDhDOiB7IG46XCJCcnRFbmRDc1ZpZXdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4RDogeyBuOlwiQnJ0QmVnaW5Dc1ZpZXdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDhFOiB7IG46XCJCcnRFbmRDc1ZpZXdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDhGOiB7IG46XCJCcnRCZWdpbkJ1bmRsZVNoc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwOTA6IHsgbjpcIkJydEVuZEJ1bmRsZVNoc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwOTE6IHsgbjpcIkJydEJlZ2luU2hlZXREYXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA5MjogeyBuOlwiQnJ0RW5kU2hlZXREYXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA5MzogeyBuOlwiQnJ0V3NQcm9wXCIsIGY6cGFyc2VfQnJ0V3NQcm9wIH0sXG5cdDB4MDA5NDogeyBuOlwiQnJ0V3NEaW1cIiwgZjpwYXJzZV9CcnRXc0RpbSwgcDoxNiB9LFxuXHQweDAwOTc6IHsgbjpcIkJydFBhbmVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDk4OiB7IG46XCJCcnRTZWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDk5OiB7IG46XCJCcnRXYlByb3BcIiwgZjpwYXJzZV9CcnRXYlByb3AgfSxcblx0MHgwMDlBOiB7IG46XCJCcnRXYkZhY3RvaWRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDlCOiB7IG46XCJCcnRGaWxlUmVjb3ZlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwOUM6IHsgbjpcIkJydEJ1bmRsZVNoXCIsIGY6cGFyc2VfQnJ0QnVuZGxlU2ggfSxcblx0MHgwMDlEOiB7IG46XCJCcnRDYWxjUHJvcFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwOUU6IHsgbjpcIkJydEJvb2tWaWV3XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA5RjogeyBuOlwiQnJ0QmVnaW5Tc3RcIiwgZjpwYXJzZV9CcnRCZWdpblNzdCB9LFxuXHQweDAwQTA6IHsgbjpcIkJydEVuZFNzdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQTE6IHsgbjpcIkJydEJlZ2luQUZpbHRlclwiLCBmOnBhcnNlX1VuY2hlY2tlZFJmWCB9LFxuXHQweDAwQTI6IHsgbjpcIkJydEVuZEFGaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEEzOiB7IG46XCJCcnRCZWdpbkZpbHRlckNvbHVtblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQTQ6IHsgbjpcIkJydEVuZEZpbHRlckNvbHVtblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQTU6IHsgbjpcIkJydEJlZ2luRmlsdGVyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQTY6IHsgbjpcIkJydEVuZEZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEE3OiB7IG46XCJCcnRGaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEE4OiB7IG46XCJCcnRDb2xvckZpbHRlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQTk6IHsgbjpcIkJydEljb25GaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEFBOiB7IG46XCJCcnRUb3AxMEZpbHRlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQUI6IHsgbjpcIkJydER5bmFtaWNGaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEFDOiB7IG46XCJCcnRCZWdpbkN1c3RvbUZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEFEOiB7IG46XCJCcnRFbmRDdXN0b21GaWx0ZXJzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBBRTogeyBuOlwiQnJ0Q3VzdG9tRmlsdGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBBRjogeyBuOlwiQnJ0QUZpbHRlckRhdGVHcm91cEl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEIwOiB7IG46XCJCcnRNZXJnZUNlbGxcIiwgZjpwYXJzZV9CcnRNZXJnZUNlbGwgfSxcblx0MHgwMEIxOiB7IG46XCJCcnRCZWdpbk1lcmdlQ2VsbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEIyOiB7IG46XCJCcnRFbmRNZXJnZUNlbGxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBCMzogeyBuOlwiQnJ0QmVnaW5QaXZvdENhY2hlRGVmXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBCNDogeyBuOlwiQnJ0RW5kUGl2b3RDYWNoZURlZlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQjU6IHsgbjpcIkJydEJlZ2luUENERmllbGRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBCNjogeyBuOlwiQnJ0RW5kUENERmllbGRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBCNzogeyBuOlwiQnJ0QmVnaW5QQ0RGaWVsZFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQjg6IHsgbjpcIkJydEVuZFBDREZpZWxkXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBCOTogeyBuOlwiQnJ0QmVnaW5QQ0RTb3VyY2VcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEJBOiB7IG46XCJCcnRFbmRQQ0RTb3VyY2VcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEJCOiB7IG46XCJCcnRCZWdpblBDRFNSYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQkM6IHsgbjpcIkJydEVuZFBDRFNSYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQkQ6IHsgbjpcIkJydEJlZ2luUENERkF0YmxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEJFOiB7IG46XCJCcnRFbmRQQ0RGQXRibFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQkY6IHsgbjpcIkJydEJlZ2luUENESVJ1blwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQzA6IHsgbjpcIkJydEVuZFBDRElSdW5cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEMxOiB7IG46XCJCcnRCZWdpblBpdm90Q2FjaGVSZWNvcmRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDMjogeyBuOlwiQnJ0RW5kUGl2b3RDYWNoZVJlY29yZHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEMzOiB7IG46XCJCcnRCZWdpblBDREhpZXJhcmNoaWVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDNDogeyBuOlwiQnJ0RW5kUENESGllcmFyY2hpZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEM1OiB7IG46XCJCcnRCZWdpblBDREhpZXJhcmNoeVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQzY6IHsgbjpcIkJydEVuZFBDREhpZXJhcmNoeVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQzc6IHsgbjpcIkJydEJlZ2luUENESEZpZWxkc1VzYWdlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDODogeyBuOlwiQnJ0RW5kUENESEZpZWxkc1VzYWdlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDOTogeyBuOlwiQnJ0QmVnaW5FeHRDb25uZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDQTogeyBuOlwiQnJ0RW5kRXh0Q29ubmVjdGlvblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQ0I6IHsgbjpcIkJydEJlZ2luRUNEYlByb3BzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDQzogeyBuOlwiQnJ0RW5kRUNEYlByb3BzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDRDogeyBuOlwiQnJ0QmVnaW5FQ09sYXBQcm9wc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwQ0U6IHsgbjpcIkJydEVuZEVDT2xhcFByb3BzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBDRjogeyBuOlwiQnJ0QmVnaW5QQ0RTQ29uc29sXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBEMDogeyBuOlwiQnJ0RW5kUENEU0NvbnNvbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDE6IHsgbjpcIkJydEJlZ2luUENEU0NQYWdlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDI6IHsgbjpcIkJydEVuZFBDRFNDUGFnZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEQzOiB7IG46XCJCcnRCZWdpblBDRFNDUGFnZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDQ6IHsgbjpcIkJydEVuZFBDRFNDUGFnZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDU6IHsgbjpcIkJydEJlZ2luUENEU0NQSXRlbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDY6IHsgbjpcIkJydEVuZFBDRFNDUEl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEQ3OiB7IG46XCJCcnRCZWdpblBDRFNDU2V0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDg6IHsgbjpcIkJydEVuZFBDRFNDU2V0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRDk6IHsgbjpcIkJydEJlZ2luUENEU0NTZXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMERBOiB7IG46XCJCcnRFbmRQQ0RTQ1NldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwREI6IHsgbjpcIkJydEJlZ2luUENERkdyb3VwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBEQzogeyBuOlwiQnJ0RW5kUENERkdyb3VwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBERDogeyBuOlwiQnJ0QmVnaW5QQ0RGR0l0ZW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBERTogeyBuOlwiQnJ0RW5kUENERkdJdGVtc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwREY6IHsgbjpcIkJydEJlZ2luUENERkdSYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRTA6IHsgbjpcIkJydEVuZFBDREZHUmFuZ2VcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEUxOiB7IG46XCJCcnRCZWdpblBDREZHRGlzY3JldGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEUyOiB7IG46XCJCcnRFbmRQQ0RGR0Rpc2NyZXRlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBFMzogeyBuOlwiQnJ0QmVnaW5QQ0RTRFR1cGxlQ2FjaGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEU0OiB7IG46XCJCcnRFbmRQQ0RTRFR1cGxlQ2FjaGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEU1OiB7IG46XCJCcnRCZWdpblBDRFNEVENFbnRyaWVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBFNjogeyBuOlwiQnJ0RW5kUENEU0RUQ0VudHJpZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEU3OiB7IG46XCJCcnRCZWdpblBDRFNEVENFTWVtYmVyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRTg6IHsgbjpcIkJydEVuZFBDRFNEVENFTWVtYmVyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRTk6IHsgbjpcIkJydEJlZ2luUENEU0RUQ0VNZW1iZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEVBOiB7IG46XCJCcnRFbmRQQ0RTRFRDRU1lbWJlclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRUI6IHsgbjpcIkJydEJlZ2luUENEU0RUQ1F1ZXJpZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEVDOiB7IG46XCJCcnRFbmRQQ0RTRFRDUXVlcmllc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRUQ6IHsgbjpcIkJydEJlZ2luUENEU0RUQ1F1ZXJ5XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBFRTogeyBuOlwiQnJ0RW5kUENEU0RUQ1F1ZXJ5XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBFRjogeyBuOlwiQnJ0QmVnaW5QQ0RTRFRDU2V0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRjA6IHsgbjpcIkJydEVuZFBDRFNEVENTZXRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGMTogeyBuOlwiQnJ0QmVnaW5QQ0RTRFRDU2V0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGMjogeyBuOlwiQnJ0RW5kUENEU0RUQ1NldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRjM6IHsgbjpcIkJydEJlZ2luUENEQ2FsY0l0ZW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGNDogeyBuOlwiQnJ0RW5kUENEQ2FsY0l0ZW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGNTogeyBuOlwiQnJ0QmVnaW5QQ0RDYWxjSXRlbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRjY6IHsgbjpcIkJydEVuZFBDRENhbGNJdGVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGNzogeyBuOlwiQnJ0QmVnaW5QUnVsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRjg6IHsgbjpcIkJydEVuZFBSdWxlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGOTogeyBuOlwiQnJ0QmVnaW5QUkZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEZBOiB7IG46XCJCcnRFbmRQUkZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEZCOiB7IG46XCJCcnRCZWdpblBSRmlsdGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBGQzogeyBuOlwiQnJ0RW5kUFJGaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMEZEOiB7IG46XCJCcnRCZWdpblBOYW1lc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRkU6IHsgbjpcIkJydEVuZFBOYW1lc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwRkY6IHsgbjpcIkJydEJlZ2luUE5hbWVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTAwOiB7IG46XCJCcnRFbmRQTmFtZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMDE6IHsgbjpcIkJydEJlZ2luUE5QYWlyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMDI6IHsgbjpcIkJydEVuZFBOUGFpcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTAzOiB7IG46XCJCcnRCZWdpblBOUGFpclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMDQ6IHsgbjpcIkJydEVuZFBOUGFpclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMDU6IHsgbjpcIkJydEJlZ2luRUNXZWJQcm9wc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMDY6IHsgbjpcIkJydEVuZEVDV2ViUHJvcHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTA3OiB7IG46XCJCcnRCZWdpbkVjV3BUYWJsZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTA4OiB7IG46XCJCcnRFbmRFQ1dQVGFibGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEwOTogeyBuOlwiQnJ0QmVnaW5FQ1BhcmFtc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMEE6IHsgbjpcIkJydEVuZEVDUGFyYW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEwQjogeyBuOlwiQnJ0QmVnaW5FQ1BhcmFtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEwQzogeyBuOlwiQnJ0RW5kRUNQYXJhbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMEQ6IHsgbjpcIkJydEJlZ2luUENES1BJc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMEU6IHsgbjpcIkJydEVuZFBDREtQSXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTBGOiB7IG46XCJCcnRCZWdpblBDREtQSVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTA6IHsgbjpcIkJydEVuZFBDREtQSVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTE6IHsgbjpcIkJydEJlZ2luRGltc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTI6IHsgbjpcIkJydEVuZERpbXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTEzOiB7IG46XCJCcnRCZWdpbkRpbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTQ6IHsgbjpcIkJydEVuZERpbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTU6IHsgbjpcIkJydEluZGV4UGFydEVuZFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTY6IHsgbjpcIkJydEJlZ2luU3R5bGVTaGVldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTc6IHsgbjpcIkJydEVuZFN0eWxlU2hlZXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTE4OiB7IG46XCJCcnRCZWdpblNYVmlld1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMTk6IHsgbjpcIkJydEVuZFNYVklcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTFBOiB7IG46XCJCcnRCZWdpblNYVklcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTFCOiB7IG46XCJCcnRCZWdpblNYVklzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDExQzogeyBuOlwiQnJ0RW5kU1hWSXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTFEOiB7IG46XCJCcnRCZWdpblNYVkRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTFFOiB7IG46XCJCcnRFbmRTWFZEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDExRjogeyBuOlwiQnJ0QmVnaW5TWFZEc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMjA6IHsgbjpcIkJydEVuZFNYVkRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEyMTogeyBuOlwiQnJ0QmVnaW5TWFBJXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEyMjogeyBuOlwiQnJ0RW5kU1hQSVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMjM6IHsgbjpcIkJydEJlZ2luU1hQSXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTI0OiB7IG46XCJCcnRFbmRTWFBJc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMjU6IHsgbjpcIkJydEJlZ2luU1hESVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMjY6IHsgbjpcIkJydEVuZFNYRElcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTI3OiB7IG46XCJCcnRCZWdpblNYRElzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEyODogeyBuOlwiQnJ0RW5kU1hESXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTI5OiB7IG46XCJCcnRCZWdpblNYTElcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTJBOiB7IG46XCJCcnRFbmRTWExJXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEyQjogeyBuOlwiQnJ0QmVnaW5TWExJUndzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEyQzogeyBuOlwiQnJ0RW5kU1hMSVJ3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMkQ6IHsgbjpcIkJydEJlZ2luU1hMSUNvbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTJFOiB7IG46XCJCcnRFbmRTWExJQ29sc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMkY6IHsgbjpcIkJydEJlZ2luU1hGb3JtYXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTMwOiB7IG46XCJCcnRFbmRTWEZvcm1hdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMzE6IHsgbjpcIkJydEJlZ2luU1hGb3JtYXRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzMjogeyBuOlwiQnJ0RW5kU3hGb3JtYXRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzMzogeyBuOlwiQnJ0QmVnaW5TeFNlbGVjdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMzQ6IHsgbjpcIkJydEVuZFN4U2VsZWN0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzNTogeyBuOlwiQnJ0QmVnaW5JU1hWRFJ3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxMzY6IHsgbjpcIkJydEVuZElTWFZEUndzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzNzogeyBuOlwiQnJ0QmVnaW5JU1hWRENvbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTM4OiB7IG46XCJCcnRFbmRJU1hWRENvbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTM5OiB7IG46XCJCcnRFbmRTWExvY2F0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzQTogeyBuOlwiQnJ0QmVnaW5TWExvY2F0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzQjogeyBuOlwiQnJ0RW5kU1hWaWV3XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzQzogeyBuOlwiQnJ0QmVnaW5TWFRIc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxM0Q6IHsgbjpcIkJydEVuZFNYVEhzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzRTogeyBuOlwiQnJ0QmVnaW5TWFRIXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDEzRjogeyBuOlwiQnJ0RW5kU1hUSFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNDA6IHsgbjpcIkJydEJlZ2luSVNYVEhSd3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTQxOiB7IG46XCJCcnRFbmRJU1hUSFJ3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNDI6IHsgbjpcIkJydEJlZ2luSVNYVEhDb2xzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0MzogeyBuOlwiQnJ0RW5kSVNYVEhDb2xzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0NDogeyBuOlwiQnJ0QmVnaW5TWFRETVBTXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0NTogeyBuOlwiQnJ0RW5kU1hURE1Qc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNDY6IHsgbjpcIkJydEJlZ2luU1hURE1QXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0NzogeyBuOlwiQnJ0RW5kU1hURE1QXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0ODogeyBuOlwiQnJ0QmVnaW5TWFRISXRlbXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTQ5OiB7IG46XCJCcnRFbmRTWFRISXRlbXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTRBOiB7IG46XCJCcnRCZWdpblNYVEhJdGVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0QjogeyBuOlwiQnJ0RW5kU1hUSEl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTRDOiB7IG46XCJCcnRCZWdpbk1ldGFkYXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE0RDogeyBuOlwiQnJ0RW5kTWV0YWRhdGFcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTRFOiB7IG46XCJCcnRCZWdpbkVzbWR0aW5mb1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNEY6IHsgbjpcIkJydE1kdGluZm9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTUwOiB7IG46XCJCcnRFbmRFc21kdGluZm9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTUxOiB7IG46XCJCcnRCZWdpbkVzbWRiXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1MjogeyBuOlwiQnJ0RW5kRXNtZGJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTUzOiB7IG46XCJCcnRCZWdpbkVzZm1kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1NDogeyBuOlwiQnJ0RW5kRXNmbWRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTU1OiB7IG46XCJCcnRCZWdpblNpbmdsZUNlbGxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1NjogeyBuOlwiQnJ0RW5kU2luZ2xlQ2VsbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTU3OiB7IG46XCJCcnRCZWdpbkxpc3RcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTU4OiB7IG46XCJCcnRFbmRMaXN0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1OTogeyBuOlwiQnJ0QmVnaW5MaXN0Q29sc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNUE6IHsgbjpcIkJydEVuZExpc3RDb2xzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1QjogeyBuOlwiQnJ0QmVnaW5MaXN0Q29sXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE1QzogeyBuOlwiQnJ0RW5kTGlzdENvbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNUQ6IHsgbjpcIkJydEJlZ2luTGlzdFhtbENQclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNUU6IHsgbjpcIkJydEVuZExpc3RYbWxDUHJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTVGOiB7IG46XCJCcnRMaXN0Q0NGbWxhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2MDogeyBuOlwiQnJ0TGlzdFRyRm1sYVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNjE6IHsgbjpcIkJydEJlZ2luRXh0ZXJuYWxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2MjogeyBuOlwiQnJ0RW5kRXh0ZXJuYWxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2MzogeyBuOlwiQnJ0U3VwQm9va1NyY1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNjU6IHsgbjpcIkJydFN1cFNlbGZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTY2OiB7IG46XCJCcnRTdXBTYW1lXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2NzogeyBuOlwiQnJ0U3VwVGFic1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNjg6IHsgbjpcIkJydEJlZ2luU3VwQm9va1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNjk6IHsgbjpcIkJydFBsYWNlaG9sZGVyTmFtZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNkE6IHsgbjpcIkJydEV4dGVyblNoZWV0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2QjogeyBuOlwiQnJ0RXh0ZXJuVGFibGVTdGFydFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNkM6IHsgbjpcIkJydEV4dGVyblRhYmxlRW5kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2RTogeyBuOlwiQnJ0RXh0ZXJuUm93SGRyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2RjogeyBuOlwiQnJ0RXh0ZXJuQ2VsbEJsYW5rXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE3MDogeyBuOlwiQnJ0RXh0ZXJuQ2VsbFJlYWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTcxOiB7IG46XCJCcnRFeHRlcm5DZWxsQm9vbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNzI6IHsgbjpcIkJydEV4dGVybkNlbGxFcnJvclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNzM6IHsgbjpcIkJydEV4dGVybkNlbGxTdHJpbmdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTc0OiB7IG46XCJCcnRCZWdpbkVzbWR4XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE3NTogeyBuOlwiQnJ0RW5kRXNtZHhcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTc2OiB7IG46XCJCcnRCZWdpbk1keFNldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNzc6IHsgbjpcIkJydEVuZE1keFNldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNzg6IHsgbjpcIkJydEJlZ2luTWR4TWJyUHJvcFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxNzk6IHsgbjpcIkJydEVuZE1keE1iclByb3BcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTdBOiB7IG46XCJCcnRCZWdpbk1keEtQSVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxN0I6IHsgbjpcIkJydEVuZE1keEtQSVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxN0M6IHsgbjpcIkJydEJlZ2luRXNzdHJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTdEOiB7IG46XCJCcnRFbmRFc3N0clwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxN0U6IHsgbjpcIkJydEJlZ2luUFJGSXRlbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxN0Y6IHsgbjpcIkJydEVuZFBSRkl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTgwOiB7IG46XCJCcnRCZWdpblBpdm90Q2FjaGVJRHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTgxOiB7IG46XCJCcnRFbmRQaXZvdENhY2hlSURzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE4MjogeyBuOlwiQnJ0QmVnaW5QaXZvdENhY2hlSURcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTgzOiB7IG46XCJCcnRFbmRQaXZvdENhY2hlSURcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTg0OiB7IG46XCJCcnRCZWdpbklTWFZJc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxODU6IHsgbjpcIkJydEVuZElTWFZJc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxODY6IHsgbjpcIkJydEJlZ2luQ29sSW5mb3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTg3OiB7IG46XCJCcnRFbmRDb2xJbmZvc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxODg6IHsgbjpcIkJydEJlZ2luUndCcmtcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTg5OiB7IG46XCJCcnRFbmRSd0Jya1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOEE6IHsgbjpcIkJydEJlZ2luQ29sQnJrXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE4QjogeyBuOlwiQnJ0RW5kQ29sQnJrXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE4QzogeyBuOlwiQnJ0QnJrXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE4RDogeyBuOlwiQnJ0VXNlckJvb2tWaWV3XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE4RTogeyBuOlwiQnJ0SW5mb1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOEY6IHsgbjpcIkJydENVc3JcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTkwOiB7IG46XCJCcnRVc3JcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTkxOiB7IG46XCJCcnRCZWdpblVzZXJzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE5MzogeyBuOlwiQnJ0RU9GXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE5NDogeyBuOlwiQnJ0VUNSXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE5NTogeyBuOlwiQnJ0UlJJbnNEZWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTk2OiB7IG46XCJCcnRSUkVuZEluc0RlbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOTc6IHsgbjpcIkJydFJSTW92ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOTg6IHsgbjpcIkJydFJSRW5kTW92ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOTk6IHsgbjpcIkJydFJSQ2hnQ2VsbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOUE6IHsgbjpcIkJydFJSRW5kQ2hnQ2VsbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOUI6IHsgbjpcIkJydFJSSGVhZGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE5QzogeyBuOlwiQnJ0UlJVc2VyVmlld1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxOUQ6IHsgbjpcIkJydFJSUmVuU2hlZXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMTlFOiB7IG46XCJCcnRSUkluc2VydFNoXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE5RjogeyBuOlwiQnJ0UlJEZWZOYW1lXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFBMDogeyBuOlwiQnJ0UlJOb3RlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFBMTogeyBuOlwiQnJ0UlJDb25mbGljdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQTI6IHsgbjpcIkJydFJSVFFTSUZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUEzOiB7IG46XCJCcnRSUkZvcm1hdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQTQ6IHsgbjpcIkJydFJSRW5kRm9ybWF0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFBNTogeyBuOlwiQnJ0UlJBdXRvRm10XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFBNjogeyBuOlwiQnJ0QmVnaW5Vc2VyU2hWaWV3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQTc6IHsgbjpcIkJydEJlZ2luVXNlclNoVmlld1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQTg6IHsgbjpcIkJydEVuZFVzZXJTaFZpZXdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUE5OiB7IG46XCJCcnRFbmRVc2VyU2hWaWV3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQUE6IHsgbjpcIkJydEFyckZtbGFcIiwgZjpwYXJzZV9CcnRBcnJGbWxhIH0sXG5cdDB4MDFBQjogeyBuOlwiQnJ0U2hyRm1sYVwiLCBmOnBhcnNlX0JydFNockZtbGEgfSxcblx0MHgwMUFDOiB7IG46XCJCcnRUYWJsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQUQ6IHsgbjpcIkJydEJlZ2luRXh0Q29ubmVjdGlvbnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUFFOiB7IG46XCJCcnRFbmRFeHRDb25uZWN0aW9uc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQUY6IHsgbjpcIkJydEJlZ2luUENEQ2FsY01lbXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUIwOiB7IG46XCJCcnRFbmRQQ0RDYWxjTWVtc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQjE6IHsgbjpcIkJydEJlZ2luUENEQ2FsY01lbVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQjI6IHsgbjpcIkJydEVuZFBDRENhbGNNZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUIzOiB7IG46XCJCcnRCZWdpblBDREhHTGV2ZWxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFCNDogeyBuOlwiQnJ0RW5kUENESEdMZXZlbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUI1OiB7IG46XCJCcnRCZWdpblBDREhHTGV2ZWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUI2OiB7IG46XCJCcnRFbmRQQ0RIR0xldmVsXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFCNzogeyBuOlwiQnJ0QmVnaW5QQ0RIR0xHcm91cHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUI4OiB7IG46XCJCcnRFbmRQQ0RIR0xHcm91cHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUI5OiB7IG46XCJCcnRCZWdpblBDREhHTEdyb3VwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFCQTogeyBuOlwiQnJ0RW5kUENESEdMR3JvdXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUJCOiB7IG46XCJCcnRCZWdpblBDREhHTEdNZW1iZXJzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFCQzogeyBuOlwiQnJ0RW5kUENESEdMR01lbWJlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUJEOiB7IG46XCJCcnRCZWdpblBDREhHTEdNZW1iZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUJFOiB7IG46XCJCcnRFbmRQQ0RIR0xHTWVtYmVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFCRjogeyBuOlwiQnJ0QmVnaW5RU0lcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUMwOiB7IG46XCJCcnRFbmRRU0lcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUMxOiB7IG46XCJCcnRCZWdpblFTSVJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUMyOiB7IG46XCJCcnRFbmRRU0lSXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDMzogeyBuOlwiQnJ0QmVnaW5EZWxldGVkTmFtZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUM0OiB7IG46XCJCcnRFbmREZWxldGVkTmFtZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUM1OiB7IG46XCJCcnRCZWdpbkRlbGV0ZWROYW1lXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDNjogeyBuOlwiQnJ0RW5kRGVsZXRlZE5hbWVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUM3OiB7IG46XCJCcnRCZWdpblFTSUZzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDODogeyBuOlwiQnJ0RW5kUVNJRnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUM5OiB7IG46XCJCcnRCZWdpblFTSUZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUNBOiB7IG46XCJCcnRFbmRRU0lGXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDQjogeyBuOlwiQnJ0QmVnaW5BdXRvU29ydFNjb3BlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDQzogeyBuOlwiQnJ0RW5kQXV0b1NvcnRTY29wZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxQ0Q6IHsgbjpcIkJydEJlZ2luQ29uZGl0aW9uYWxGb3JtYXR0aW5nXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDRTogeyBuOlwiQnJ0RW5kQ29uZGl0aW9uYWxGb3JtYXR0aW5nXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFDRjogeyBuOlwiQnJ0QmVnaW5DRlJ1bGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUQwOiB7IG46XCJCcnRFbmRDRlJ1bGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUQxOiB7IG46XCJCcnRCZWdpbkljb25TZXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUQyOiB7IG46XCJCcnRFbmRJY29uU2V0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFEMzogeyBuOlwiQnJ0QmVnaW5EYXRhYmFyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFENDogeyBuOlwiQnJ0RW5kRGF0YWJhclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRDU6IHsgbjpcIkJydEJlZ2luQ29sb3JTY2FsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRDY6IHsgbjpcIkJydEVuZENvbG9yU2NhbGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUQ3OiB7IG46XCJCcnRDRlZPXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFEODogeyBuOlwiQnJ0RXh0ZXJuVmFsdWVNZXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFEOTogeyBuOlwiQnJ0QmVnaW5Db2xvclBhbGV0dGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMURBOiB7IG46XCJCcnRFbmRDb2xvclBhbGV0dGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMURCOiB7IG46XCJCcnRJbmRleGVkQ29sb3JcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMURDOiB7IG46XCJCcnRNYXJnaW5zXCIsIGY6cGFyc2VfQnJ0TWFyZ2lucyB9LFxuXHQweDAxREQ6IHsgbjpcIkJydFByaW50T3B0aW9uc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxREU6IHsgbjpcIkJydFBhZ2VTZXR1cFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxREY6IHsgbjpcIkJydEJlZ2luSGVhZGVyRm9vdGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFMDogeyBuOlwiQnJ0RW5kSGVhZGVyRm9vdGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFMTogeyBuOlwiQnJ0QmVnaW5TWENydEZvcm1hdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRTI6IHsgbjpcIkJydEVuZFNYQ3J0Rm9ybWF0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFMzogeyBuOlwiQnJ0QmVnaW5TWENydEZvcm1hdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUU0OiB7IG46XCJCcnRFbmRTWENydEZvcm1hdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUU1OiB7IG46XCJCcnRXc0ZtdEluZm9cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUU2OiB7IG46XCJCcnRCZWdpbk1nc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRTc6IHsgbjpcIkJydEVuZE1Hc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRTg6IHsgbjpcIkJydEJlZ2luTUdNYXBzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFOTogeyBuOlwiQnJ0RW5kTUdNYXBzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFQTogeyBuOlwiQnJ0QmVnaW5NR1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRUI6IHsgbjpcIkJydEVuZE1HXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFFQzogeyBuOlwiQnJ0QmVnaW5NYXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUVEOiB7IG46XCJCcnRFbmRNYXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUVFOiB7IG46XCJCcnRITGlua1wiLCBmOnBhcnNlX0JydEhMaW5rIH0sXG5cdDB4MDFFRjogeyBuOlwiQnJ0QmVnaW5EQ29uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGMDogeyBuOlwiQnJ0RW5kRENvblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRjE6IHsgbjpcIkJydEJlZ2luRFJlZnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUYyOiB7IG46XCJCcnRFbmREUmVmc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRjM6IHsgbjpcIkJydERSZWZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUY0OiB7IG46XCJCcnRCZWdpblNjZW5NYW5cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUY1OiB7IG46XCJCcnRFbmRTY2VuTWFuXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGNjogeyBuOlwiQnJ0QmVnaW5TY3RcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUY3OiB7IG46XCJCcnRFbmRTY3RcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUY4OiB7IG46XCJCcnRTbGNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUY5OiB7IG46XCJCcnRCZWdpbkRYRnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMUZBOiB7IG46XCJCcnRFbmREWEZzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGQjogeyBuOlwiQnJ0RFhGXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGQzogeyBuOlwiQnJ0QmVnaW5UYWJsZVN0eWxlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAxRkQ6IHsgbjpcIkJydEVuZFRhYmxlU3R5bGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGRTogeyBuOlwiQnJ0QmVnaW5UYWJsZVN0eWxlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFGRjogeyBuOlwiQnJ0RW5kVGFibGVTdHlsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMDA6IHsgbjpcIkJydFRhYmxlU3R5bGVFbGVtZW50XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwMTogeyBuOlwiQnJ0VGFibGVTdHlsZUNsaWVudFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMDI6IHsgbjpcIkJydEJlZ2luVm9sRGVwc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMDM6IHsgbjpcIkJydEVuZFZvbERlcHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjA0OiB7IG46XCJCcnRCZWdpblZvbFR5cGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjA1OiB7IG46XCJCcnRFbmRWb2xUeXBlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwNjogeyBuOlwiQnJ0QmVnaW5Wb2xNYWluXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwNzogeyBuOlwiQnJ0RW5kVm9sTWFpblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMDg6IHsgbjpcIkJydEJlZ2luVm9sVG9waWNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjA5OiB7IG46XCJCcnRFbmRWb2xUb3BpY1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMEE6IHsgbjpcIkJydFZvbFN1YnRvcGljXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwQjogeyBuOlwiQnJ0Vm9sUmVmXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwQzogeyBuOlwiQnJ0Vm9sTnVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwRDogeyBuOlwiQnJ0Vm9sRXJyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwRTogeyBuOlwiQnJ0Vm9sU3RyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwRjogeyBuOlwiQnJ0Vm9sQm9vbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMTA6IHsgbjpcIkJydEJlZ2luQ2FsY0NoYWluJFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMTE6IHsgbjpcIkJydEVuZENhbGNDaGFpbiRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjEyOiB7IG46XCJCcnRCZWdpblNvcnRTdGF0ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMTM6IHsgbjpcIkJydEVuZFNvcnRTdGF0ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMTQ6IHsgbjpcIkJydEJlZ2luU29ydENvbmRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjE1OiB7IG46XCJCcnRFbmRTb3J0Q29uZFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMTY6IHsgbjpcIkJydEJvb2tQcm90ZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxNzogeyBuOlwiQnJ0U2hlZXRQcm90ZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxODogeyBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxOTogeyBuOlwiQnJ0UGhvbmV0aWNJbmZvXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxQTogeyBuOlwiQnJ0QmVnaW5FQ1R4dFdpelwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMUI6IHsgbjpcIkJydEVuZEVDVHh0V2l6XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxQzogeyBuOlwiQnJ0QmVnaW5FQ1RXRmxkSW5mb0xzdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMUQ6IHsgbjpcIkJydEVuZEVDVFdGbGRJbmZvTHN0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIxRTogeyBuOlwiQnJ0QmVnaW5FQ1R3RmxkSW5mb1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMjQ6IHsgbjpcIkJydEZpbGVTaGFyaW5nXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIyNTogeyBuOlwiQnJ0T2xlU2l6ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMjY6IHsgbjpcIkJydERyYXdpbmdcIiwgZjpwYXJzZV9SZWxJRCB9LFxuXHQweDAyMjc6IHsgbjpcIkJydExlZ2FjeURyYXdpbmdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjI4OiB7IG46XCJCcnRMZWdhY3lEcmF3aW5nSEZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjI5OiB7IG46XCJCcnRXZWJPcHRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjJBOiB7IG46XCJCcnRCZWdpbldlYlB1Ykl0ZW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIyQjogeyBuOlwiQnJ0RW5kV2ViUHViSXRlbXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjJDOiB7IG46XCJCcnRCZWdpbldlYlB1Ykl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjJEOiB7IG46XCJCcnRFbmRXZWJQdWJJdGVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIyRTogeyBuOlwiQnJ0QmVnaW5TWENvbmRGbXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjJGOiB7IG46XCJCcnRFbmRTWENvbmRGbXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjMwOiB7IG46XCJCcnRCZWdpblNYQ29uZEZtdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjMxOiB7IG46XCJCcnRFbmRTWENvbmRGbXRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIzMjogeyBuOlwiQnJ0QmtIaW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjM0OiB7IG46XCJCcnRDb2xvclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMzU6IHsgbjpcIkJydEJlZ2luSW5kZXhlZENvbG9yc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyMzY6IHsgbjpcIkJydEVuZEluZGV4ZWRDb2xvcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjM5OiB7IG46XCJCcnRCZWdpbk1SVUNvbG9yc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyM0E6IHsgbjpcIkJydEVuZE1SVUNvbG9yc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyM0M6IHsgbjpcIkJydE1SVUNvbG9yXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIzRDogeyBuOlwiQnJ0QmVnaW5EVmFsc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyM0U6IHsgbjpcIkJydEVuZERWYWxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0MTogeyBuOlwiQnJ0U3VwTmFtZVN0YXJ0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0MjogeyBuOlwiQnJ0U3VwTmFtZVZhbHVlU3RhcnRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjQzOiB7IG46XCJCcnRTdXBOYW1lVmFsdWVFbmRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjQ0OiB7IG46XCJCcnRTdXBOYW1lTnVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0NTogeyBuOlwiQnJ0U3VwTmFtZUVyclwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNDY6IHsgbjpcIkJydFN1cE5hbWVTdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNDc6IHsgbjpcIkJydFN1cE5hbWVOaWxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjQ4OiB7IG46XCJCcnRTdXBOYW1lQm9vbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNDk6IHsgbjpcIkJydFN1cE5hbWVGbWxhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0QTogeyBuOlwiQnJ0U3VwTmFtZUJpdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjRCOiB7IG46XCJCcnRTdXBOYW1lRW5kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0QzogeyBuOlwiQnJ0RW5kU3VwQm9va1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNEQ6IHsgbjpcIkJydENlbGxTbWFydFRhZ1Byb3BlcnR5XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI0RTogeyBuOlwiQnJ0QmVnaW5DZWxsU21hcnRUYWdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjRGOiB7IG46XCJCcnRFbmRDZWxsU21hcnRUYWdcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjUwOiB7IG46XCJCcnRCZWdpbkNlbGxTbWFydFRhZ3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjUxOiB7IG46XCJCcnRFbmRDZWxsU21hcnRUYWdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI1MjogeyBuOlwiQnJ0QmVnaW5TbWFydFRhZ3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjUzOiB7IG46XCJCcnRFbmRTbWFydFRhZ3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjU0OiB7IG46XCJCcnRTbWFydFRhZ1R5cGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjU1OiB7IG46XCJCcnRCZWdpblNtYXJ0VGFnVHlwZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjU2OiB7IG46XCJCcnRFbmRTbWFydFRhZ1R5cGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI1NzogeyBuOlwiQnJ0QmVnaW5TWEZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjU4OiB7IG46XCJCcnRFbmRTWEZpbHRlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjU5OiB7IG46XCJCcnRCZWdpblNYRklMVEVSXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI1QTogeyBuOlwiQnJ0RW5kU1hGaWx0ZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjVCOiB7IG46XCJCcnRCZWdpbkZpbGxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI1QzogeyBuOlwiQnJ0RW5kRmlsbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjVEOiB7IG46XCJCcnRCZWdpbkNlbGxXYXRjaGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI1RTogeyBuOlwiQnJ0RW5kQ2VsbFdhdGNoZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjVGOiB7IG46XCJCcnRDZWxsV2F0Y2hcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjYwOiB7IG46XCJCcnRCZWdpbkNSRXJyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNjE6IHsgbjpcIkJydEVuZENSRXJyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNjI6IHsgbjpcIkJydENyYXNoUmVjRXJyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI2MzogeyBuOlwiQnJ0QmVnaW5Gb250c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNjQ6IHsgbjpcIkJydEVuZEZvbnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI2NTogeyBuOlwiQnJ0QmVnaW5Cb3JkZXJzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI2NjogeyBuOlwiQnJ0RW5kQm9yZGVyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNjc6IHsgbjpcIkJydEJlZ2luRm10c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyNjg6IHsgbjpcIkJydEVuZEZtdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjY5OiB7IG46XCJCcnRCZWdpbkNlbGxYRnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjZBOiB7IG46XCJCcnRFbmRDZWxsWEZzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI2QjogeyBuOlwiQnJ0QmVnaW5TdHlsZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjZDOiB7IG46XCJCcnRFbmRTdHlsZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjcxOiB7IG46XCJCcnRCaWdOYW1lXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI3MjogeyBuOlwiQnJ0QmVnaW5DZWxsU3R5bGVYRnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjczOiB7IG46XCJCcnRFbmRDZWxsU3R5bGVYRnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjc0OiB7IG46XCJCcnRCZWdpbkNvbW1lbnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI3NTogeyBuOlwiQnJ0RW5kQ29tbWVudHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjc2OiB7IG46XCJCcnRCZWdpbkNvbW1lbnRBdXRob3JzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI3NzogeyBuOlwiQnJ0RW5kQ29tbWVudEF1dGhvcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjc4OiB7IG46XCJCcnRDb21tZW50QXV0aG9yXCIsIGY6cGFyc2VfQnJ0Q29tbWVudEF1dGhvciB9LFxuXHQweDAyNzk6IHsgbjpcIkJydEJlZ2luQ29tbWVudExpc3RcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjdBOiB7IG46XCJCcnRFbmRDb21tZW50TGlzdFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyN0I6IHsgbjpcIkJydEJlZ2luQ29tbWVudFwiLCBmOnBhcnNlX0JydEJlZ2luQ29tbWVudH0sXG5cdDB4MDI3QzogeyBuOlwiQnJ0RW5kQ29tbWVudFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyN0Q6IHsgbjpcIkJydENvbW1lbnRUZXh0XCIsIGY6cGFyc2VfQnJ0Q29tbWVudFRleHQgfSxcblx0MHgwMjdFOiB7IG46XCJCcnRCZWdpbk9sZU9iamVjdHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjdGOiB7IG46XCJCcnRPbGVPYmplY3RcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjgwOiB7IG46XCJCcnRFbmRPbGVPYmplY3RzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4MTogeyBuOlwiQnJ0QmVnaW5TeHJ1bGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4MjogeyBuOlwiQnJ0RW5kU3hSdWxlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyODM6IHsgbjpcIkJydEJlZ2luQWN0aXZlWENvbnRyb2xzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4NDogeyBuOlwiQnJ0QWN0aXZlWFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyODU6IHsgbjpcIkJydEVuZEFjdGl2ZVhDb250cm9sc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyODY6IHsgbjpcIkJydEJlZ2luUENEU0RUQ0VNZW1iZXJzU29ydEJ5XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4ODogeyBuOlwiQnJ0QmVnaW5DZWxsSWdub3JlRUNzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4OTogeyBuOlwiQnJ0Q2VsbElnbm9yZUVDXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4QTogeyBuOlwiQnJ0RW5kQ2VsbElnbm9yZUVDc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOEI6IHsgbjpcIkJydENzUHJvcFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOEM6IHsgbjpcIkJydENzUGFnZVNldHVwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4RDogeyBuOlwiQnJ0QmVnaW5Vc2VyQ3NWaWV3c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOEU6IHsgbjpcIkJydEVuZFVzZXJDc1ZpZXdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI4RjogeyBuOlwiQnJ0QmVnaW5Vc2VyQ3NWaWV3XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5MDogeyBuOlwiQnJ0RW5kVXNlckNzVmlld1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOTE6IHsgbjpcIkJydEJlZ2luUGNkU0ZDSUVudHJpZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjkyOiB7IG46XCJCcnRFbmRQQ0RTRkNJRW50cmllc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOTM6IHsgbjpcIkJydFBDRFNGQ0lFbnRyeVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOTQ6IHsgbjpcIkJydEJlZ2luTGlzdFBhcnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5NTogeyBuOlwiQnJ0TGlzdFBhcnRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjk2OiB7IG46XCJCcnRFbmRMaXN0UGFydHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjk3OiB7IG46XCJCcnRTaGVldENhbGNQcm9wXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5ODogeyBuOlwiQnJ0QmVnaW5Gbkdyb3VwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5OTogeyBuOlwiQnJ0Rm5Hcm91cFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOUE6IHsgbjpcIkJydEVuZEZuR3JvdXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjlCOiB7IG46XCJCcnRTdXBBZGRpblwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyOUM6IHsgbjpcIkJydFNYVERNUE9yZGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5RDogeyBuOlwiQnJ0Q3NQcm90ZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDI5RjogeyBuOlwiQnJ0QmVnaW5Xc1NvcnRNYXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMkEwOiB7IG46XCJCcnRFbmRXc1NvcnRNYXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMkExOiB7IG46XCJCcnRCZWdpblJSU29ydFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyQTI6IHsgbjpcIkJydEVuZFJSU29ydFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyQTM6IHsgbjpcIkJydFJSU29ydEl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMkE0OiB7IG46XCJCcnRGaWxlU2hhcmluZ0lzb1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAyQTU6IHsgbjpcIkJydEJvb2tQcm90ZWN0aW9uSXNvXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDJBNjogeyBuOlwiQnJ0U2hlZXRQcm90ZWN0aW9uSXNvXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDJBNzogeyBuOlwiQnJ0Q3NQcm90ZWN0aW9uSXNvXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDJBODogeyBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uSXNvXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwMDogeyBuOlwiQnJ0UndEZXNjZW50XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwMTogeyBuOlwiQnJ0S25vd25Gb250c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MDI6IHsgbjpcIkJydEJlZ2luU1hUdXBsZVNldFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MDM6IHsgbjpcIkJydEVuZFNYVHVwbGVTZXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDA0OiB7IG46XCJCcnRCZWdpblNYVHVwbGVTZXRIZWFkZXJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDA1OiB7IG46XCJCcnRFbmRTWFR1cGxlU2V0SGVhZGVyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwNjogeyBuOlwiQnJ0U1hUdXBsZVNldEhlYWRlckl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDA3OiB7IG46XCJCcnRCZWdpblNYVHVwbGVTZXREYXRhXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwODogeyBuOlwiQnJ0RW5kU1hUdXBsZVNldERhdGFcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDA5OiB7IG46XCJCcnRCZWdpblNYVHVwbGVTZXRSb3dcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDBBOiB7IG46XCJCcnRFbmRTWFR1cGxlU2V0Um93XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwQjogeyBuOlwiQnJ0U1hUdXBsZVNldFJvd0l0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDBDOiB7IG46XCJCcnROYW1lRXh0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwRDogeyBuOlwiQnJ0UENESDE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQwRTogeyBuOlwiQnJ0QmVnaW5QQ0RDYWxjTWVtMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDBGOiB7IG46XCJCcnRFbmRQQ0RDYWxjTWVtMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDEwOiB7IG46XCJCcnRTWFRIMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDExOiB7IG46XCJCcnRCZWdpblNwYXJrbGluZUdyb3VwXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQxMjogeyBuOlwiQnJ0RW5kU3BhcmtsaW5lR3JvdXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDEzOiB7IG46XCJCcnRTcGFya2xpbmVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDE0OiB7IG46XCJCcnRTWERJMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDE1OiB7IG46XCJCcnRXc0ZtdEluZm9FeDE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQxNjogeyBuOlwiQnJ0QmVnaW5Db25kaXRpb25hbEZvcm1hdHRpbmcxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MTc6IHsgbjpcIkJydEVuZENvbmRpdGlvbmFsRm9ybWF0dGluZzE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQxODogeyBuOlwiQnJ0QmVnaW5DRlJ1bGUxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MTk6IHsgbjpcIkJydEVuZENGUnVsZTE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQxQTogeyBuOlwiQnJ0Q0ZWTzE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQxQjogeyBuOlwiQnJ0QmVnaW5EYXRhYmFyMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDFDOiB7IG46XCJCcnRCZWdpbkljb25TZXQxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MUQ6IHsgbjpcIkJydERWYWwxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MUU6IHsgbjpcIkJydEJlZ2luRFZhbHMxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MUY6IHsgbjpcIkJydENvbG9yMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDIwOiB7IG46XCJCcnRCZWdpblNwYXJrbGluZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDIxOiB7IG46XCJCcnRFbmRTcGFya2xpbmVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQyMjogeyBuOlwiQnJ0QmVnaW5TcGFya2xpbmVHcm91cHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDIzOiB7IG46XCJCcnRFbmRTcGFya2xpbmVHcm91cHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDI1OiB7IG46XCJCcnRTWFZEMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDI2OiB7IG46XCJCcnRCZWdpblN4dmlldzE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQyNzogeyBuOlwiQnJ0RW5kU3h2aWV3MTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDJBOiB7IG46XCJCcnRCZWdpblBDRDE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQyQjogeyBuOlwiQnJ0RW5kUENEMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDJDOiB7IG46XCJCcnRCZWdpbkV4dENvbm4xNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MkQ6IHsgbjpcIkJydEVuZEV4dENvbm4xNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MkU6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVJRHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDJGOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZUlEc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MzA6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVJRFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MzE6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlSURcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDMzOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQzNDogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDM1OiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlRGVmXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQzNjogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVEZWZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDM3OiB7IG46XCJCcnRCZWdpblNsaWNlcnNFeFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0Mzg6IHsgbjpcIkJydEVuZFNsaWNlcnNFeFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0Mzk6IHsgbjpcIkJydEJlZ2luU2xpY2VyRXhcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDNBOiB7IG46XCJCcnRFbmRTbGljZXJFeFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0M0I6IHsgbjpcIkJydEJlZ2luU2xpY2VyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQzQzogeyBuOlwiQnJ0RW5kU2xpY2VyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQzRDogeyBuOlwiQnJ0U2xpY2VyQ2FjaGVQaXZvdFRhYmxlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0M0U6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVPbGFwSW1wbFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0M0Y6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlT2xhcEltcGxcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDQwOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlTGV2ZWxzRGF0YVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDE6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlTGV2ZWxzRGF0YVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDI6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVMZXZlbERhdGFcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDQzOiB7IG46XCJCcnRFbmRTbGljZXJDYWNoZUxldmVsRGF0YVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDQ6IHsgbjpcIkJydEJlZ2luU2xpY2VyQ2FjaGVTaVJhbmdlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDU6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlU2lSYW5nZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDQ2OiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlU2lSYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDc6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlU2lSYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NDg6IHsgbjpcIkJydFNsaWNlckNhY2hlT2xhcEl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDQ5OiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlU2VsZWN0aW9uc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NEE6IHsgbjpcIkJydFNsaWNlckNhY2hlU2VsZWN0aW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ0QjogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVTZWxlY3Rpb25zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ0QzogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZU5hdGl2ZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NEQ6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlTmF0aXZlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ0RTogeyBuOlwiQnJ0U2xpY2VyQ2FjaGVOYXRpdmVJdGVtXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ0RjogeyBuOlwiQnJ0UmFuZ2VQcm90ZWN0aW9uMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDUwOiB7IG46XCJCcnRSYW5nZVByb3RlY3Rpb25Jc28xNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NTE6IHsgbjpcIkJydENlbGxJZ25vcmVFQzE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ1NzogeyBuOlwiQnJ0TGlzdDE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ1ODogeyBuOlwiQnJ0Q0ZJY29uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ1OTogeyBuOlwiQnJ0QmVnaW5TbGljZXJDYWNoZXNQaXZvdENhY2hlSURzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ1QTogeyBuOlwiQnJ0RW5kU2xpY2VyQ2FjaGVzUGl2b3RDYWNoZUlEc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NUI6IHsgbjpcIkJydEJlZ2luU2xpY2Vyc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NUM6IHsgbjpcIkJydEVuZFNsaWNlcnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDVEOiB7IG46XCJCcnRXYlByb3AxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NUU6IHsgbjpcIkJydEJlZ2luU1hFZGl0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ1RjogeyBuOlwiQnJ0RW5kU1hFZGl0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2MDogeyBuOlwiQnJ0QmVnaW5TWEVkaXRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2MTogeyBuOlwiQnJ0RW5kU1hFZGl0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NjI6IHsgbjpcIkJydEJlZ2luU1hDaGFuZ2VcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDYzOiB7IG46XCJCcnRFbmRTWENoYW5nZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NjQ6IHsgbjpcIkJydEJlZ2luU1hDaGFuZ2VzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2NTogeyBuOlwiQnJ0RW5kU1hDaGFuZ2VzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2NjogeyBuOlwiQnJ0U1hUdXBsZUl0ZW1zXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2ODogeyBuOlwiQnJ0QmVnaW5TbGljZXJTdHlsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0Njk6IHsgbjpcIkJydEVuZFNsaWNlclN0eWxlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2QTogeyBuOlwiQnJ0U2xpY2VyU3R5bGVFbGVtZW50XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ2QjogeyBuOlwiQnJ0QmVnaW5TdHlsZVNoZWV0RXh0MTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDZDOiB7IG46XCJCcnRFbmRTdHlsZVNoZWV0RXh0MTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDZEOiB7IG46XCJCcnRCZWdpblNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NkU6IHsgbjpcIkJydEVuZFNsaWNlckNhY2hlc1Bpdm90Q2FjaGVJRFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NkY6IHsgbjpcIkJydEJlZ2luQ29uZGl0aW9uYWxGb3JtYXR0aW5nc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NzA6IHsgbjpcIkJydEVuZENvbmRpdGlvbmFsRm9ybWF0dGluZ3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDcxOiB7IG46XCJCcnRCZWdpblBDRENhbGNNZW1FeHRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDcyOiB7IG46XCJCcnRFbmRQQ0RDYWxjTWVtRXh0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3MzogeyBuOlwiQnJ0QmVnaW5QQ0RDYWxjTWVtc0V4dFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NzQ6IHsgbjpcIkJydEVuZFBDRENhbGNNZW1zRXh0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3NTogeyBuOlwiQnJ0UENERmllbGQxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0NzY6IHsgbjpcIkJydEJlZ2luU2xpY2VyU3R5bGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3NzogeyBuOlwiQnJ0RW5kU2xpY2VyU3R5bGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3ODogeyBuOlwiQnJ0QmVnaW5TbGljZXJTdHlsZUVsZW1lbnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3OTogeyBuOlwiQnJ0RW5kU2xpY2VyU3R5bGVFbGVtZW50c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0N0E6IHsgbjpcIkJydENGUnVsZUV4dFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0N0I6IHsgbjpcIkJydEJlZ2luU1hDb25kRm10MTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDdDOiB7IG46XCJCcnRFbmRTWENvbmRGbXQxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0N0Q6IHsgbjpcIkJydEJlZ2luU1hDb25kRm10czE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ3RTogeyBuOlwiQnJ0RW5kU1hDb25kRm10czE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ4MDogeyBuOlwiQnJ0QmVnaW5Tb3J0Q29uZDE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ4MTogeyBuOlwiQnJ0RW5kU29ydENvbmQxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0ODI6IHsgbjpcIkJydEVuZERWYWxzMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDgzOiB7IG46XCJCcnRFbmRJY29uU2V0MTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDg0OiB7IG46XCJCcnRFbmREYXRhYmFyMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDg1OiB7IG46XCJCcnRCZWdpbkNvbG9yU2NhbGUxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0ODY6IHsgbjpcIkJydEVuZENvbG9yU2NhbGUxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0ODc6IHsgbjpcIkJydEJlZ2luU3hydWxlczE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ4ODogeyBuOlwiQnJ0RW5kU3hydWxlczE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ4OTogeyBuOlwiQnJ0QmVnaW5QUnVsZTE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ4QTogeyBuOlwiQnJ0RW5kUFJ1bGUxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OEI6IHsgbjpcIkJydEJlZ2luUFJGaWx0ZXJzMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDhDOiB7IG46XCJCcnRFbmRQUkZpbHRlcnMxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OEQ6IHsgbjpcIkJydEJlZ2luUFJGaWx0ZXIxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OEU6IHsgbjpcIkJydEVuZFBSRmlsdGVyMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDhGOiB7IG46XCJCcnRCZWdpblBSRkl0ZW0xNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OTA6IHsgbjpcIkJydEVuZFBSRkl0ZW0xNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OTE6IHsgbjpcIkJydEJlZ2luQ2VsbElnbm9yZUVDczE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ5MjogeyBuOlwiQnJ0RW5kQ2VsbElnbm9yZUVDczE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ5MzogeyBuOlwiQnJ0RHhmMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDk0OiB7IG46XCJCcnRCZWdpbkR4RjE0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OTU6IHsgbjpcIkJydEVuZER4ZjE0c1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OTk6IHsgbjpcIkJydEZpbHRlcjE0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ5QTogeyBuOlwiQnJ0QmVnaW5DdXN0b21GaWx0ZXJzMTRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwNDlDOiB7IG46XCJCcnRDdXN0b21GaWx0ZXIxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OUQ6IHsgbjpcIkJydEljb25GaWx0ZXIxNFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0OUU6IHsgbjpcIkJydFBpdm90Q2FjaGVDb25uZWN0aW9uTmFtZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MDA6IHsgbjpcIkJydEJlZ2luRGVjb3VwbGVkUGl2b3RDYWNoZUlEc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MDE6IHsgbjpcIkJydEVuZERlY291cGxlZFBpdm90Q2FjaGVJRHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODAyOiB7IG46XCJCcnREZWNvdXBsZWRQaXZvdENhY2hlSURcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODAzOiB7IG46XCJCcnRCZWdpblBpdm90VGFibGVSZWZzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgwNDogeyBuOlwiQnJ0RW5kUGl2b3RUYWJsZVJlZnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODA1OiB7IG46XCJCcnRQaXZvdFRhYmxlUmVmXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgwNjogeyBuOlwiQnJ0U2xpY2VyQ2FjaGVCb29rUGl2b3RUYWJsZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODA3OiB7IG46XCJCcnRCZWdpblN4dmNlbGxzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgwODogeyBuOlwiQnJ0RW5kU3h2Y2VsbHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODA5OiB7IG46XCJCcnRCZWdpblN4Um93XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgwQTogeyBuOlwiQnJ0RW5kU3hSb3dcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODBDOiB7IG46XCJCcnRQY2RDYWxjTWVtMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODEzOiB7IG46XCJCcnRRc2kxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MTQ6IHsgbjpcIkJydEJlZ2luV2ViRXh0ZW5zaW9uc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MTU6IHsgbjpcIkJydEVuZFdlYkV4dGVuc2lvbnNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODE2OiB7IG46XCJCcnRXZWJFeHRlbnNpb25cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODE3OiB7IG46XCJCcnRBYnNQYXRoMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODE4OiB7IG46XCJCcnRCZWdpblBpdm90VGFibGVVSVNldHRpbmdzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgxOTogeyBuOlwiQnJ0RW5kUGl2b3RUYWJsZVVJU2V0dGluZ3NcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODFCOiB7IG46XCJCcnRUYWJsZVNsaWNlckNhY2hlSURzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgxQzogeyBuOlwiQnJ0VGFibGVTbGljZXJDYWNoZUlEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgxRDogeyBuOlwiQnJ0QmVnaW5UYWJsZVNsaWNlckNhY2hlXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgxRTogeyBuOlwiQnJ0RW5kVGFibGVTbGljZXJDYWNoZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MUY6IHsgbjpcIkJydFN4RmlsdGVyMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODIwOiB7IG46XCJCcnRCZWdpblRpbWVsaW5lQ2FjaGVQaXZvdENhY2hlSURzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyMTogeyBuOlwiQnJ0RW5kVGltZWxpbmVDYWNoZVBpdm90Q2FjaGVJRHNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODIyOiB7IG46XCJCcnRUaW1lbGluZUNhY2hlUGl2b3RDYWNoZUlEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyMzogeyBuOlwiQnJ0QmVnaW5UaW1lbGluZUNhY2hlSURzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyNDogeyBuOlwiQnJ0RW5kVGltZWxpbmVDYWNoZUlEc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MjU6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVDYWNoZUlEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyNjogeyBuOlwiQnJ0RW5kVGltZWxpbmVDYWNoZUlEXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyNzogeyBuOlwiQnJ0QmVnaW5UaW1lbGluZXNFeFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Mjg6IHsgbjpcIkJydEVuZFRpbWVsaW5lc0V4XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyOTogeyBuOlwiQnJ0QmVnaW5UaW1lbGluZUV4XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgyQTogeyBuOlwiQnJ0RW5kVGltZWxpbmVFeFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MkI6IHsgbjpcIkJydFdvcmtCb29rUHIxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MkM6IHsgbjpcIkJydFBDREgxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MkQ6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVTdHlsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MkU6IHsgbjpcIkJydEVuZFRpbWVsaW5lU3R5bGVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODJGOiB7IG46XCJCcnRUaW1lbGluZVN0eWxlRWxlbWVudFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MzA6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVTdHlsZXNoZWV0RXh0MTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODMxOiB7IG46XCJCcnRFbmRUaW1lbGluZVN0eWxlc2hlZXRFeHQxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MzI6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVTdHlsZXNcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODMzOiB7IG46XCJCcnRFbmRUaW1lbGluZVN0eWxlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4MzQ6IHsgbjpcIkJydEJlZ2luVGltZWxpbmVTdHlsZUVsZW1lbnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgzNTogeyBuOlwiQnJ0RW5kVGltZWxpbmVTdHlsZUVsZW1lbnRzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgzNjogeyBuOlwiQnJ0RHhmMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODM3OiB7IG46XCJCcnRCZWdpbkR4ZnMxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Mzg6IHsgbjpcImJydEVuZER4ZnMxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Mzk6IHsgbjpcIkJydFNsaWNlckNhY2hlSGlkZUl0ZW1zV2l0aE5vRGF0YVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4M0E6IHsgbjpcIkJydEJlZ2luSXRlbVVuaXF1ZU5hbWVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgzQjogeyBuOlwiQnJ0RW5kSXRlbVVuaXF1ZU5hbWVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDgzQzogeyBuOlwiQnJ0SXRlbVVuaXF1ZU5hbWVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODNEOiB7IG46XCJCcnRCZWdpbkV4dENvbm4xNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4M0U6IHsgbjpcIkJydEVuZEV4dENvbm4xNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4M0Y6IHsgbjpcIkJydEJlZ2luT2xlZGJQcjE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0MDogeyBuOlwiQnJ0RW5kT2xlZGJQcjE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0MTogeyBuOlwiQnJ0QmVnaW5EYXRhRmVlZFByMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODQyOiB7IG46XCJCcnRFbmREYXRhRmVlZFByMTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODQzOiB7IG46XCJCcnRUZXh0UHIxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NDQ6IHsgbjpcIkJydFJhbmdlUHIxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NDU6IHsgbjpcIkJydERiQ29tbWFuZDE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0NjogeyBuOlwiQnJ0QmVnaW5EYlRhYmxlczE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0NzogeyBuOlwiQnJ0RW5kRGJUYWJsZXMxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NDg6IHsgbjpcIkJydERiVGFibGUxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NDk6IHsgbjpcIkJydEJlZ2luRGF0YU1vZGVsXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0QTogeyBuOlwiQnJ0RW5kRGF0YU1vZGVsXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0QjogeyBuOlwiQnJ0QmVnaW5Nb2RlbFRhYmxlc1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NEM6IHsgbjpcIkJydEVuZE1vZGVsVGFibGVzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0RDogeyBuOlwiQnJ0TW9kZWxUYWJsZVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NEU6IHsgbjpcIkJydEJlZ2luTW9kZWxSZWxhdGlvbnNoaXBzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg0RjogeyBuOlwiQnJ0RW5kTW9kZWxSZWxhdGlvbnNoaXBzXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg1MDogeyBuOlwiQnJ0TW9kZWxSZWxhdGlvbnNoaXBcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODUxOiB7IG46XCJCcnRCZWdpbkVDVHh0V2l6MTVcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODUyOiB7IG46XCJCcnRFbmRFQ1R4dFdpejE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg1MzogeyBuOlwiQnJ0QmVnaW5FQ1RXRmxkSW5mb0xzdDE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg1NDogeyBuOlwiQnJ0RW5kRUNUV0ZsZEluZm9Mc3QxNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NTU6IHsgbjpcIkJydEJlZ2luRUNUV0ZsZEluZm8xNVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NTY6IHsgbjpcIkJydEZpZWxkTGlzdEFjdGl2ZUl0ZW1cIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODU3OiB7IG46XCJCcnRQaXZvdENhY2hlSWRWZXJzaW9uXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDg1ODogeyBuOlwiQnJ0U1hESTE1XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4RkZGRjogeyBuOlwiXCIsIGY6cGFyc2Vub29wIH1cblx0fTtcblxuXHR2YXIgZXZlcnRfUkUgPSBldmVydF9rZXkoWExTQlJlY29yZEVudW0sICduJyk7XG5cblx0LyogW01TLVhMU10gMi4zIFJlY29yZCBFbnVtZXJhdGlvbiAqL1xuXHR2YXIgWExTUmVjb3JkRW51bSA9IHtcblx0MHgwMDAzOiB7IG46XCJCSUZGMk5VTVwiLCBmOnBhcnNlX0JJRkYyTlVNIH0sXG5cdDB4MDAwNDogeyBuOlwiQklGRjJTVFJcIiwgZjpwYXJzZV9CSUZGMlNUUiB9LFxuXHQweDAwMDY6IHsgbjpcIkZvcm11bGFcIiwgZjpwYXJzZV9Gb3JtdWxhIH0sXG5cdDB4MDAwOTogeyBuOidCT0YnLCBmOnBhcnNlX0JPRiB9LFxuXHQweDAwMGE6IHsgbjonRU9GJywgZjpwYXJzZV9FT0YgfSxcblx0MHgwMDBjOiB7IG46XCJDYWxjQ291bnRcIiwgZjpwYXJzZV9DYWxjQ291bnQgfSxcblx0MHgwMDBkOiB7IG46XCJDYWxjTW9kZVwiLCBmOnBhcnNlX0NhbGNNb2RlIH0sXG5cdDB4MDAwZTogeyBuOlwiQ2FsY1ByZWNpc2lvblwiLCBmOnBhcnNlX0NhbGNQcmVjaXNpb24gfSxcblx0MHgwMDBmOiB7IG46XCJDYWxjUmVmTW9kZVwiLCBmOnBhcnNlX0NhbGNSZWZNb2RlIH0sXG5cdDB4MDAxMDogeyBuOlwiQ2FsY0RlbHRhXCIsIGY6cGFyc2VfQ2FsY0RlbHRhIH0sXG5cdDB4MDAxMTogeyBuOlwiQ2FsY0l0ZXJcIiwgZjpwYXJzZV9DYWxjSXRlciB9LFxuXHQweDAwMTI6IHsgbjpcIlByb3RlY3RcIiwgZjpwYXJzZV9Qcm90ZWN0IH0sXG5cdDB4MDAxMzogeyBuOlwiUGFzc3dvcmRcIiwgZjpwYXJzZV9QYXNzd29yZCB9LFxuXHQweDAwMTQ6IHsgbjpcIkhlYWRlclwiLCBmOnBhcnNlX0hlYWRlciB9LFxuXHQweDAwMTU6IHsgbjpcIkZvb3RlclwiLCBmOnBhcnNlX0Zvb3RlciB9LFxuXHQweDAwMTc6IHsgbjpcIkV4dGVyblNoZWV0XCIsIGY6cGFyc2VfRXh0ZXJuU2hlZXQgfSxcblx0MHgwMDE4OiB7IG46XCJMYmxcIiwgZjpwYXJzZV9MYmwgfSxcblx0MHgwMDE5OiB7IG46XCJXaW5Qcm90ZWN0XCIsIGY6cGFyc2VfV2luUHJvdGVjdCB9LFxuXHQweDAwMWE6IHsgbjpcIlZlcnRpY2FsUGFnZUJyZWFrc1wiLCBmOnBhcnNlX1ZlcnRpY2FsUGFnZUJyZWFrcyB9LFxuXHQweDAwMWI6IHsgbjpcIkhvcml6b250YWxQYWdlQnJlYWtzXCIsIGY6cGFyc2VfSG9yaXpvbnRhbFBhZ2VCcmVha3MgfSxcblx0MHgwMDFjOiB7IG46XCJOb3RlXCIsIGY6cGFyc2VfTm90ZSB9LFxuXHQweDAwMWQ6IHsgbjpcIlNlbGVjdGlvblwiLCBmOnBhcnNlX1NlbGVjdGlvbiB9LFxuXHQweDAwMjI6IHsgbjpcIkRhdGUxOTA0XCIsIGY6cGFyc2VfRGF0ZTE5MDQgfSxcblx0MHgwMDIzOiB7IG46XCJFeHRlcm5OYW1lXCIsIGY6cGFyc2VfRXh0ZXJuTmFtZSB9LFxuXHQweDAwMjY6IHsgbjpcIkxlZnRNYXJnaW5cIiwgZjpwYXJzZV9MZWZ0TWFyZ2luIH0sXG5cdDB4MDAyNzogeyBuOlwiUmlnaHRNYXJnaW5cIiwgZjpwYXJzZV9SaWdodE1hcmdpbiB9LFxuXHQweDAwMjg6IHsgbjpcIlRvcE1hcmdpblwiLCBmOnBhcnNlX1RvcE1hcmdpbiB9LFxuXHQweDAwMjk6IHsgbjpcIkJvdHRvbU1hcmdpblwiLCBmOnBhcnNlX0JvdHRvbU1hcmdpbiB9LFxuXHQweDAwMmE6IHsgbjpcIlByaW50Um93Q29sXCIsIGY6cGFyc2VfUHJpbnRSb3dDb2wgfSxcblx0MHgwMDJiOiB7IG46XCJQcmludEdyaWRcIiwgZjpwYXJzZV9QcmludEdyaWQgfSxcblx0MHgwMDJmOiB7IG46XCJGaWxlUGFzc1wiLCBmOnBhcnNlX0ZpbGVQYXNzIH0sXG5cdDB4MDAzMTogeyBuOlwiRm9udFwiLCBmOnBhcnNlX0ZvbnQgfSxcblx0MHgwMDMzOiB7IG46XCJQcmludFNpemVcIiwgZjpwYXJzZV9QcmludFNpemUgfSxcblx0MHgwMDNjOiB7IG46XCJDb250aW51ZVwiLCBmOnBhcnNlX0NvbnRpbnVlIH0sXG5cdDB4MDAzZDogeyBuOlwiV2luZG93MVwiLCBmOnBhcnNlX1dpbmRvdzEgfSxcblx0MHgwMDQwOiB7IG46XCJCYWNrdXBcIiwgZjpwYXJzZV9CYWNrdXAgfSxcblx0MHgwMDQxOiB7IG46XCJQYW5lXCIsIGY6cGFyc2VfUGFuZSB9LFxuXHQweDAwNDI6IHsgbjonQ29kZVBhZ2UnLCBmOnBhcnNlX0NvZGVQYWdlIH0sXG5cdDB4MDA0ZDogeyBuOlwiUGxzXCIsIGY6cGFyc2VfUGxzIH0sXG5cdDB4MDA1MDogeyBuOlwiRENvblwiLCBmOnBhcnNlX0RDb24gfSxcblx0MHgwMDUxOiB7IG46XCJEQ29uUmVmXCIsIGY6cGFyc2VfRENvblJlZiB9LFxuXHQweDAwNTI6IHsgbjpcIkRDb25OYW1lXCIsIGY6cGFyc2VfRENvbk5hbWUgfSxcblx0MHgwMDU1OiB7IG46XCJEZWZDb2xXaWR0aFwiLCBmOnBhcnNlX0RlZkNvbFdpZHRoIH0sXG5cdDB4MDA1OTogeyBuOlwiWENUXCIsIGY6cGFyc2VfWENUIH0sXG5cdDB4MDA1YTogeyBuOlwiQ1JOXCIsIGY6cGFyc2VfQ1JOIH0sXG5cdDB4MDA1YjogeyBuOlwiRmlsZVNoYXJpbmdcIiwgZjpwYXJzZV9GaWxlU2hhcmluZyB9LFxuXHQweDAwNWM6IHsgbjonV3JpdGVBY2Nlc3MnLCBmOnBhcnNlX1dyaXRlQWNjZXNzIH0sXG5cdDB4MDA1ZDogeyBuOlwiT2JqXCIsIGY6cGFyc2VfT2JqIH0sXG5cdDB4MDA1ZTogeyBuOlwiVW5jYWxjZWRcIiwgZjpwYXJzZV9VbmNhbGNlZCB9LFxuXHQweDAwNWY6IHsgbjpcIkNhbGNTYXZlUmVjYWxjXCIsIGY6cGFyc2VfQ2FsY1NhdmVSZWNhbGMgfSxcblx0MHgwMDYwOiB7IG46XCJUZW1wbGF0ZVwiLCBmOnBhcnNlX1RlbXBsYXRlIH0sXG5cdDB4MDA2MTogeyBuOlwiSW50bFwiLCBmOnBhcnNlX0ludGwgfSxcblx0MHgwMDYzOiB7IG46XCJPYmpQcm90ZWN0XCIsIGY6cGFyc2VfT2JqUHJvdGVjdCB9LFxuXHQweDAwN2Q6IHsgbjpcIkNvbEluZm9cIiwgZjpwYXJzZV9Db2xJbmZvIH0sXG5cdDB4MDA4MDogeyBuOlwiR3V0c1wiLCBmOnBhcnNlX0d1dHMgfSxcblx0MHgwMDgxOiB7IG46XCJXc0Jvb2xcIiwgZjpwYXJzZV9Xc0Jvb2wgfSxcblx0MHgwMDgyOiB7IG46XCJHcmlkU2V0XCIsIGY6cGFyc2VfR3JpZFNldCB9LFxuXHQweDAwODM6IHsgbjpcIkhDZW50ZXJcIiwgZjpwYXJzZV9IQ2VudGVyIH0sXG5cdDB4MDA4NDogeyBuOlwiVkNlbnRlclwiLCBmOnBhcnNlX1ZDZW50ZXIgfSxcblx0MHgwMDg1OiB7IG46J0JvdW5kU2hlZXQ4JywgZjpwYXJzZV9Cb3VuZFNoZWV0OCB9LFxuXHQweDAwODY6IHsgbjpcIldyaXRlUHJvdGVjdFwiLCBmOnBhcnNlX1dyaXRlUHJvdGVjdCB9LFxuXHQweDAwOGM6IHsgbjpcIkNvdW50cnlcIiwgZjpwYXJzZV9Db3VudHJ5IH0sXG5cdDB4MDA4ZDogeyBuOlwiSGlkZU9ialwiLCBmOnBhcnNlX0hpZGVPYmogfSxcblx0MHgwMDkwOiB7IG46XCJTb3J0XCIsIGY6cGFyc2VfU29ydCB9LFxuXHQweDAwOTI6IHsgbjpcIlBhbGV0dGVcIiwgZjpwYXJzZV9QYWxldHRlIH0sXG5cdDB4MDA5NzogeyBuOlwiU3luY1wiLCBmOnBhcnNlX1N5bmMgfSxcblx0MHgwMDk4OiB7IG46XCJMUHJcIiwgZjpwYXJzZV9MUHIgfSxcblx0MHgwMDk5OiB7IG46XCJEeEdDb2xcIiwgZjpwYXJzZV9EeEdDb2wgfSxcblx0MHgwMDlhOiB7IG46XCJGbkdyb3VwTmFtZVwiLCBmOnBhcnNlX0ZuR3JvdXBOYW1lIH0sXG5cdDB4MDA5YjogeyBuOlwiRmlsdGVyTW9kZVwiLCBmOnBhcnNlX0ZpbHRlck1vZGUgfSxcblx0MHgwMDljOiB7IG46XCJCdWlsdEluRm5Hcm91cENvdW50XCIsIGY6cGFyc2VfQnVpbHRJbkZuR3JvdXBDb3VudCB9LFxuXHQweDAwOWQ6IHsgbjpcIkF1dG9GaWx0ZXJJbmZvXCIsIGY6cGFyc2VfQXV0b0ZpbHRlckluZm8gfSxcblx0MHgwMDllOiB7IG46XCJBdXRvRmlsdGVyXCIsIGY6cGFyc2VfQXV0b0ZpbHRlciB9LFxuXHQweDAwYTA6IHsgbjpcIlNjbFwiLCBmOnBhcnNlX1NjbCB9LFxuXHQweDAwYTE6IHsgbjpcIlNldHVwXCIsIGY6cGFyc2VfU2V0dXAgfSxcblx0MHgwMGFlOiB7IG46XCJTY2VuTWFuXCIsIGY6cGFyc2VfU2Nlbk1hbiB9LFxuXHQweDAwYWY6IHsgbjpcIlNDRU5BUklPXCIsIGY6cGFyc2VfU0NFTkFSSU8gfSxcblx0MHgwMGIwOiB7IG46XCJTeFZpZXdcIiwgZjpwYXJzZV9TeFZpZXcgfSxcblx0MHgwMGIxOiB7IG46XCJTeHZkXCIsIGY6cGFyc2VfU3h2ZCB9LFxuXHQweDAwYjI6IHsgbjpcIlNYVklcIiwgZjpwYXJzZV9TWFZJIH0sXG5cdDB4MDBiNDogeyBuOlwiU3hJdmRcIiwgZjpwYXJzZV9TeEl2ZCB9LFxuXHQweDAwYjU6IHsgbjpcIlNYTElcIiwgZjpwYXJzZV9TWExJIH0sXG5cdDB4MDBiNjogeyBuOlwiU1hQSVwiLCBmOnBhcnNlX1NYUEkgfSxcblx0MHgwMGI4OiB7IG46XCJEb2NSb3V0ZVwiLCBmOnBhcnNlX0RvY1JvdXRlIH0sXG5cdDB4MDBiOTogeyBuOlwiUmVjaXBOYW1lXCIsIGY6cGFyc2VfUmVjaXBOYW1lIH0sXG5cdDB4MDBiZDogeyBuOlwiTXVsUmtcIiwgZjpwYXJzZV9NdWxSayB9LFxuXHQweDAwYmU6IHsgbjpcIk11bEJsYW5rXCIsIGY6cGFyc2VfTXVsQmxhbmsgfSxcblx0MHgwMGMxOiB7IG46J01tcycsIGY6cGFyc2VfTW1zIH0sXG5cdDB4MDBjNTogeyBuOlwiU1hESVwiLCBmOnBhcnNlX1NYREkgfSxcblx0MHgwMGM2OiB7IG46XCJTWERCXCIsIGY6cGFyc2VfU1hEQiB9LFxuXHQweDAwYzc6IHsgbjpcIlNYRkRCXCIsIGY6cGFyc2VfU1hGREIgfSxcblx0MHgwMGM4OiB7IG46XCJTWERCQlwiLCBmOnBhcnNlX1NYREJCIH0sXG5cdDB4MDBjOTogeyBuOlwiU1hOdW1cIiwgZjpwYXJzZV9TWE51bSB9LFxuXHQweDAwY2E6IHsgbjpcIlN4Qm9vbFwiLCBmOnBhcnNlX1N4Qm9vbCB9LFxuXHQweDAwY2I6IHsgbjpcIlN4RXJyXCIsIGY6cGFyc2VfU3hFcnIgfSxcblx0MHgwMGNjOiB7IG46XCJTWEludFwiLCBmOnBhcnNlX1NYSW50IH0sXG5cdDB4MDBjZDogeyBuOlwiU1hTdHJpbmdcIiwgZjpwYXJzZV9TWFN0cmluZyB9LFxuXHQweDAwY2U6IHsgbjpcIlNYRHRyXCIsIGY6cGFyc2VfU1hEdHIgfSxcblx0MHgwMGNmOiB7IG46XCJTeE5pbFwiLCBmOnBhcnNlX1N4TmlsIH0sXG5cdDB4MDBkMDogeyBuOlwiU1hUYmxcIiwgZjpwYXJzZV9TWFRibCB9LFxuXHQweDAwZDE6IHsgbjpcIlNYVEJSR0lJVE1cIiwgZjpwYXJzZV9TWFRCUkdJSVRNIH0sXG5cdDB4MDBkMjogeyBuOlwiU3hUYnBnXCIsIGY6cGFyc2VfU3hUYnBnIH0sXG5cdDB4MDBkMzogeyBuOlwiT2JQcm9qXCIsIGY6cGFyc2VfT2JQcm9qIH0sXG5cdDB4MDBkNTogeyBuOlwiU1hTdHJlYW1JRFwiLCBmOnBhcnNlX1NYU3RyZWFtSUQgfSxcblx0MHgwMGQ3OiB7IG46XCJEQkNlbGxcIiwgZjpwYXJzZV9EQkNlbGwgfSxcblx0MHgwMGQ4OiB7IG46XCJTWFJuZ1wiLCBmOnBhcnNlX1NYUm5nIH0sXG5cdDB4MDBkOTogeyBuOlwiU3hJc3hvcGVyXCIsIGY6cGFyc2VfU3hJc3hvcGVyIH0sXG5cdDB4MDBkYTogeyBuOlwiQm9va0Jvb2xcIiwgZjpwYXJzZV9Cb29rQm9vbCB9LFxuXHQweDAwZGM6IHsgbjpcIkRiT3JQYXJhbVFyeVwiLCBmOnBhcnNlX0RiT3JQYXJhbVFyeSB9LFxuXHQweDAwZGQ6IHsgbjpcIlNjZW5hcmlvUHJvdGVjdFwiLCBmOnBhcnNlX1NjZW5hcmlvUHJvdGVjdCB9LFxuXHQweDAwZGU6IHsgbjpcIk9sZU9iamVjdFNpemVcIiwgZjpwYXJzZV9PbGVPYmplY3RTaXplIH0sXG5cdDB4MDBlMDogeyBuOlwiWEZcIiwgZjpwYXJzZV9YRiB9LFxuXHQweDAwZTE6IHsgbjonSW50ZXJmYWNlSGRyJywgZjpwYXJzZV9JbnRlcmZhY2VIZHIgfSxcblx0MHgwMGUyOiB7IG46J0ludGVyZmFjZUVuZCcsIGY6cGFyc2VfSW50ZXJmYWNlRW5kIH0sXG5cdDB4MDBlMzogeyBuOlwiU1hWU1wiLCBmOnBhcnNlX1NYVlMgfSxcblx0MHgwMGU1OiB7IG46XCJNZXJnZUNlbGxzXCIsIGY6cGFyc2VfTWVyZ2VDZWxscyB9LFxuXHQweDAwZTk6IHsgbjpcIkJrSGltXCIsIGY6cGFyc2VfQmtIaW0gfSxcblx0MHgwMGViOiB7IG46XCJNc29EcmF3aW5nR3JvdXBcIiwgZjpwYXJzZV9Nc29EcmF3aW5nR3JvdXAgfSxcblx0MHgwMGVjOiB7IG46XCJNc29EcmF3aW5nXCIsIGY6cGFyc2VfTXNvRHJhd2luZyB9LFxuXHQweDAwZWQ6IHsgbjpcIk1zb0RyYXdpbmdTZWxlY3Rpb25cIiwgZjpwYXJzZV9Nc29EcmF3aW5nU2VsZWN0aW9uIH0sXG5cdDB4MDBlZjogeyBuOlwiUGhvbmV0aWNJbmZvXCIsIGY6cGFyc2VfUGhvbmV0aWNJbmZvIH0sXG5cdDB4MDBmMDogeyBuOlwiU3hSdWxlXCIsIGY6cGFyc2VfU3hSdWxlIH0sXG5cdDB4MDBmMTogeyBuOlwiU1hFeFwiLCBmOnBhcnNlX1NYRXggfSxcblx0MHgwMGYyOiB7IG46XCJTeEZpbHRcIiwgZjpwYXJzZV9TeEZpbHQgfSxcblx0MHgwMGY0OiB7IG46XCJTeERYRlwiLCBmOnBhcnNlX1N4RFhGIH0sXG5cdDB4MDBmNTogeyBuOlwiU3hJdG1cIiwgZjpwYXJzZV9TeEl0bSB9LFxuXHQweDAwZjY6IHsgbjpcIlN4TmFtZVwiLCBmOnBhcnNlX1N4TmFtZSB9LFxuXHQweDAwZjc6IHsgbjpcIlN4U2VsZWN0XCIsIGY6cGFyc2VfU3hTZWxlY3QgfSxcblx0MHgwMGY4OiB7IG46XCJTWFBhaXJcIiwgZjpwYXJzZV9TWFBhaXIgfSxcblx0MHgwMGY5OiB7IG46XCJTeEZtbGFcIiwgZjpwYXJzZV9TeEZtbGEgfSxcblx0MHgwMGZiOiB7IG46XCJTeEZvcm1hdFwiLCBmOnBhcnNlX1N4Rm9ybWF0IH0sXG5cdDB4MDBmYzogeyBuOlwiU1NUXCIsIGY6cGFyc2VfU1NUIH0sXG5cdDB4MDBmZDogeyBuOlwiTGFiZWxTc3RcIiwgZjpwYXJzZV9MYWJlbFNzdCB9LFxuXHQweDAwZmY6IHsgbjpcIkV4dFNTVFwiLCBmOnBhcnNlX0V4dFNTVCB9LFxuXHQweDAxMDA6IHsgbjpcIlNYVkRFeFwiLCBmOnBhcnNlX1NYVkRFeCB9LFxuXHQweDAxMDM6IHsgbjpcIlNYRm9ybXVsYVwiLCBmOnBhcnNlX1NYRm9ybXVsYSB9LFxuXHQweDAxMjI6IHsgbjpcIlNYREJFeFwiLCBmOnBhcnNlX1NYREJFeCB9LFxuXHQweDAxMzc6IHsgbjpcIlJSREluc0RlbFwiLCBmOnBhcnNlX1JSREluc0RlbCB9LFxuXHQweDAxMzg6IHsgbjpcIlJSREhlYWRcIiwgZjpwYXJzZV9SUkRIZWFkIH0sXG5cdDB4MDEzYjogeyBuOlwiUlJEQ2hnQ2VsbFwiLCBmOnBhcnNlX1JSRENoZ0NlbGwgfSxcblx0MHgwMTNkOiB7IG46XCJSUlRhYklkXCIsIGY6cGFyc2VfUlJUYWJJZCB9LFxuXHQweDAxM2U6IHsgbjpcIlJSRFJlblNoZWV0XCIsIGY6cGFyc2VfUlJEUmVuU2hlZXQgfSxcblx0MHgwMTNmOiB7IG46XCJSUlNvcnRcIiwgZjpwYXJzZV9SUlNvcnQgfSxcblx0MHgwMTQwOiB7IG46XCJSUkRNb3ZlXCIsIGY6cGFyc2VfUlJETW92ZSB9LFxuXHQweDAxNGE6IHsgbjpcIlJSRm9ybWF0XCIsIGY6cGFyc2VfUlJGb3JtYXQgfSxcblx0MHgwMTRiOiB7IG46XCJSUkF1dG9GbXRcIiwgZjpwYXJzZV9SUkF1dG9GbXQgfSxcblx0MHgwMTRkOiB7IG46XCJSUkluc2VydFNoXCIsIGY6cGFyc2VfUlJJbnNlcnRTaCB9LFxuXHQweDAxNGU6IHsgbjpcIlJSRE1vdmVCZWdpblwiLCBmOnBhcnNlX1JSRE1vdmVCZWdpbiB9LFxuXHQweDAxNGY6IHsgbjpcIlJSRE1vdmVFbmRcIiwgZjpwYXJzZV9SUkRNb3ZlRW5kIH0sXG5cdDB4MDE1MDogeyBuOlwiUlJESW5zRGVsQmVnaW5cIiwgZjpwYXJzZV9SUkRJbnNEZWxCZWdpbiB9LFxuXHQweDAxNTE6IHsgbjpcIlJSREluc0RlbEVuZFwiLCBmOnBhcnNlX1JSREluc0RlbEVuZCB9LFxuXHQweDAxNTI6IHsgbjpcIlJSRENvbmZsaWN0XCIsIGY6cGFyc2VfUlJEQ29uZmxpY3QgfSxcblx0MHgwMTUzOiB7IG46XCJSUkREZWZOYW1lXCIsIGY6cGFyc2VfUlJERGVmTmFtZSB9LFxuXHQweDAxNTQ6IHsgbjpcIlJSRFJzdEV0eHBcIiwgZjpwYXJzZV9SUkRSc3RFdHhwIH0sXG5cdDB4MDE1ZjogeyBuOlwiTFJuZ1wiLCBmOnBhcnNlX0xSbmcgfSxcblx0MHgwMTYwOiB7IG46XCJVc2VzRUxGc1wiLCBmOnBhcnNlX1VzZXNFTEZzIH0sXG5cdDB4MDE2MTogeyBuOlwiRFNGXCIsIGY6cGFyc2VfRFNGIH0sXG5cdDB4MDE5MTogeyBuOlwiQ1VzclwiLCBmOnBhcnNlX0NVc3IgfSxcblx0MHgwMTkyOiB7IG46XCJDYlVzclwiLCBmOnBhcnNlX0NiVXNyIH0sXG5cdDB4MDE5MzogeyBuOlwiVXNySW5mb1wiLCBmOnBhcnNlX1VzckluZm8gfSxcblx0MHgwMTk0OiB7IG46XCJVc3JFeGNsXCIsIGY6cGFyc2VfVXNyRXhjbCB9LFxuXHQweDAxOTU6IHsgbjpcIkZpbGVMb2NrXCIsIGY6cGFyc2VfRmlsZUxvY2sgfSxcblx0MHgwMTk2OiB7IG46XCJSUkRJbmZvXCIsIGY6cGFyc2VfUlJESW5mbyB9LFxuXHQweDAxOTc6IHsgbjpcIkJDVXNyc1wiLCBmOnBhcnNlX0JDVXNycyB9LFxuXHQweDAxOTg6IHsgbjpcIlVzckNoa1wiLCBmOnBhcnNlX1VzckNoayB9LFxuXHQweDAxYTk6IHsgbjpcIlVzZXJCVmlld1wiLCBmOnBhcnNlX1VzZXJCVmlldyB9LFxuXHQweDAxYWE6IHsgbjpcIlVzZXJTVmlld0JlZ2luXCIsIGY6cGFyc2VfVXNlclNWaWV3QmVnaW4gfSxcblx0MHgwMWFiOiB7IG46XCJVc2VyU1ZpZXdFbmRcIiwgZjpwYXJzZV9Vc2VyU1ZpZXdFbmQgfSxcblx0MHgwMWFjOiB7IG46XCJSUkRVc2VyVmlld1wiLCBmOnBhcnNlX1JSRFVzZXJWaWV3IH0sXG5cdDB4MDFhZDogeyBuOlwiUXNpXCIsIGY6cGFyc2VfUXNpIH0sXG5cdDB4MDFhZTogeyBuOlwiU3VwQm9va1wiLCBmOnBhcnNlX1N1cEJvb2sgfSxcblx0MHgwMWFmOiB7IG46XCJQcm90NFJldlwiLCBmOnBhcnNlX1Byb3Q0UmV2IH0sXG5cdDB4MDFiMDogeyBuOlwiQ29uZEZtdFwiLCBmOnBhcnNlX0NvbmRGbXQgfSxcblx0MHgwMWIxOiB7IG46XCJDRlwiLCBmOnBhcnNlX0NGIH0sXG5cdDB4MDFiMjogeyBuOlwiRFZhbFwiLCBmOnBhcnNlX0RWYWwgfSxcblx0MHgwMWI1OiB7IG46XCJEQ29uQmluXCIsIGY6cGFyc2VfRENvbkJpbiB9LFxuXHQweDAxYjY6IHsgbjpcIlR4T1wiLCBmOnBhcnNlX1R4TyB9LFxuXHQweDAxYjc6IHsgbjpcIlJlZnJlc2hBbGxcIiwgZjpwYXJzZV9SZWZyZXNoQWxsIH0sXG5cdDB4MDFiODogeyBuOlwiSExpbmtcIiwgZjpwYXJzZV9ITGluayB9LFxuXHQweDAxYjk6IHsgbjpcIkxlbFwiLCBmOnBhcnNlX0xlbCB9LFxuXHQweDAxYmE6IHsgbjpcIkNvZGVOYW1lXCIsIGY6cGFyc2VfWExTQ29kZU5hbWUgfSxcblx0MHgwMWJiOiB7IG46XCJTWEZEQlR5cGVcIiwgZjpwYXJzZV9TWEZEQlR5cGUgfSxcblx0MHgwMWJjOiB7IG46XCJQcm90NFJldlBhc3NcIiwgZjpwYXJzZV9Qcm90NFJldlBhc3MgfSxcblx0MHgwMWJkOiB7IG46XCJPYk5vTWFjcm9zXCIsIGY6cGFyc2VfT2JOb01hY3JvcyB9LFxuXHQweDAxYmU6IHsgbjpcIkR2XCIsIGY6cGFyc2VfRHYgfSxcblx0MHgwMWMwOiB7IG46XCJFeGNlbDlGaWxlXCIsIGY6cGFyc2VfRXhjZWw5RmlsZSB9LFxuXHQweDAxYzE6IHsgbjpcIlJlY2FsY0lkXCIsIGY6cGFyc2VfUmVjYWxjSWQsIHI6Mn0sXG5cdDB4MDFjMjogeyBuOlwiRW50RXhVMlwiLCBmOnBhcnNlX0VudEV4VTIgfSxcblx0MHgwMjAwOiB7IG46XCJEaW1lbnNpb25zXCIsIGY6cGFyc2VfRGltZW5zaW9ucyB9LFxuXHQweDAyMDE6IHsgbjpcIkJsYW5rXCIsIGY6cGFyc2VfQmxhbmsgfSxcblx0MHgwMjAzOiB7IG46XCJOdW1iZXJcIiwgZjpwYXJzZV9OdW1iZXIgfSxcblx0MHgwMjA0OiB7IG46XCJMYWJlbFwiLCBmOnBhcnNlX0xhYmVsIH0sXG5cdDB4MDIwNTogeyBuOlwiQm9vbEVyclwiLCBmOnBhcnNlX0Jvb2xFcnIgfSxcblx0MHgwMjA2OiB7IG46XCJGb3JtdWxhXCIsIGY6cGFyc2VfRm9ybXVsYSB9LFxuXHQweDAyMDc6IHsgbjpcIlN0cmluZ1wiLCBmOnBhcnNlX1N0cmluZyB9LFxuXHQweDAyMDg6IHsgbjonUm93JywgZjpwYXJzZV9Sb3cgfSxcblx0MHgwMjBiOiB7IG46XCJJbmRleFwiLCBmOnBhcnNlX0luZGV4IH0sXG5cdDB4MDIyMTogeyBuOlwiQXJyYXlcIiwgZjpwYXJzZV9BcnJheSB9LFxuXHQweDAyMjU6IHsgbjpcIkRlZmF1bHRSb3dIZWlnaHRcIiwgZjpwYXJzZV9EZWZhdWx0Um93SGVpZ2h0IH0sXG5cdDB4MDIzNjogeyBuOlwiVGFibGVcIiwgZjpwYXJzZV9UYWJsZSB9LFxuXHQweDAyM2U6IHsgbjpcIldpbmRvdzJcIiwgZjpwYXJzZV9XaW5kb3cyIH0sXG5cdDB4MDI3ZTogeyBuOlwiUktcIiwgZjpwYXJzZV9SSyB9LFxuXHQweDAyOTM6IHsgbjpcIlN0eWxlXCIsIGY6cGFyc2VfU3R5bGUgfSxcblx0MHgwNDA2OiB7IG46XCJGb3JtdWxhXCIsIGY6cGFyc2VfRm9ybXVsYSB9LFxuXHQweDA0MTg6IHsgbjpcIkJpZ05hbWVcIiwgZjpwYXJzZV9CaWdOYW1lIH0sXG5cdDB4MDQxZTogeyBuOlwiRm9ybWF0XCIsIGY6cGFyc2VfRm9ybWF0IH0sXG5cdDB4MDQzYzogeyBuOlwiQ29udGludWVCaWdOYW1lXCIsIGY6cGFyc2VfQ29udGludWVCaWdOYW1lIH0sXG5cdDB4MDRiYzogeyBuOlwiU2hyRm1sYVwiLCBmOnBhcnNlX1NockZtbGEgfSxcblx0MHgwODAwOiB7IG46XCJITGlua1Rvb2x0aXBcIiwgZjpwYXJzZV9ITGlua1Rvb2x0aXAgfSxcblx0MHgwODAxOiB7IG46XCJXZWJQdWJcIiwgZjpwYXJzZV9XZWJQdWIgfSxcblx0MHgwODAyOiB7IG46XCJRc2lTWFRhZ1wiLCBmOnBhcnNlX1FzaVNYVGFnIH0sXG5cdDB4MDgwMzogeyBuOlwiREJRdWVyeUV4dFwiLCBmOnBhcnNlX0RCUXVlcnlFeHQgfSxcblx0MHgwODA0OiB7IG46XCJFeHRTdHJpbmdcIiwgZjpwYXJzZV9FeHRTdHJpbmcgfSxcblx0MHgwODA1OiB7IG46XCJUeHRRcnlcIiwgZjpwYXJzZV9UeHRRcnkgfSxcblx0MHgwODA2OiB7IG46XCJRc2lyXCIsIGY6cGFyc2VfUXNpciB9LFxuXHQweDA4MDc6IHsgbjpcIlFzaWZcIiwgZjpwYXJzZV9Rc2lmIH0sXG5cdDB4MDgwODogeyBuOlwiUlJEVFFTSUZcIiwgZjpwYXJzZV9SUkRUUVNJRiB9LFxuXHQweDA4MDk6IHsgbjonQk9GJywgZjpwYXJzZV9CT0YgfSxcblx0MHgwODBhOiB7IG46XCJPbGVEYkNvbm5cIiwgZjpwYXJzZV9PbGVEYkNvbm4gfSxcblx0MHgwODBiOiB7IG46XCJXT3B0XCIsIGY6cGFyc2VfV09wdCB9LFxuXHQweDA4MGM6IHsgbjpcIlNYVmlld0V4XCIsIGY6cGFyc2VfU1hWaWV3RXggfSxcblx0MHgwODBkOiB7IG46XCJTWFRIXCIsIGY6cGFyc2VfU1hUSCB9LFxuXHQweDA4MGU6IHsgbjpcIlNYUElFeFwiLCBmOnBhcnNlX1NYUElFeCB9LFxuXHQweDA4MGY6IHsgbjpcIlNYVkRURXhcIiwgZjpwYXJzZV9TWFZEVEV4IH0sXG5cdDB4MDgxMDogeyBuOlwiU1hWaWV3RXg5XCIsIGY6cGFyc2VfU1hWaWV3RXg5IH0sXG5cdDB4MDgxMjogeyBuOlwiQ29udGludWVGcnRcIiwgZjpwYXJzZV9Db250aW51ZUZydCB9LFxuXHQweDA4MTM6IHsgbjpcIlJlYWxUaW1lRGF0YVwiLCBmOnBhcnNlX1JlYWxUaW1lRGF0YSB9LFxuXHQweDA4NTA6IHsgbjpcIkNoYXJ0RnJ0SW5mb1wiLCBmOnBhcnNlX0NoYXJ0RnJ0SW5mbyB9LFxuXHQweDA4NTE6IHsgbjpcIkZydFdyYXBwZXJcIiwgZjpwYXJzZV9GcnRXcmFwcGVyIH0sXG5cdDB4MDg1MjogeyBuOlwiU3RhcnRCbG9ja1wiLCBmOnBhcnNlX1N0YXJ0QmxvY2sgfSxcblx0MHgwODUzOiB7IG46XCJFbmRCbG9ja1wiLCBmOnBhcnNlX0VuZEJsb2NrIH0sXG5cdDB4MDg1NDogeyBuOlwiU3RhcnRPYmplY3RcIiwgZjpwYXJzZV9TdGFydE9iamVjdCB9LFxuXHQweDA4NTU6IHsgbjpcIkVuZE9iamVjdFwiLCBmOnBhcnNlX0VuZE9iamVjdCB9LFxuXHQweDA4NTY6IHsgbjpcIkNhdExhYlwiLCBmOnBhcnNlX0NhdExhYiB9LFxuXHQweDA4NTc6IHsgbjpcIllNdWx0XCIsIGY6cGFyc2VfWU11bHQgfSxcblx0MHgwODU4OiB7IG46XCJTWFZpZXdMaW5rXCIsIGY6cGFyc2VfU1hWaWV3TGluayB9LFxuXHQweDA4NTk6IHsgbjpcIlBpdm90Q2hhcnRCaXRzXCIsIGY6cGFyc2VfUGl2b3RDaGFydEJpdHMgfSxcblx0MHgwODVhOiB7IG46XCJGcnRGb250TGlzdFwiLCBmOnBhcnNlX0ZydEZvbnRMaXN0IH0sXG5cdDB4MDg2MjogeyBuOlwiU2hlZXRFeHRcIiwgZjpwYXJzZV9TaGVldEV4dCB9LFxuXHQweDA4NjM6IHsgbjpcIkJvb2tFeHRcIiwgZjpwYXJzZV9Cb29rRXh0LCByOjEyfSxcblx0MHgwODY0OiB7IG46XCJTWEFkZGxcIiwgZjpwYXJzZV9TWEFkZGwgfSxcblx0MHgwODY1OiB7IG46XCJDckVyclwiLCBmOnBhcnNlX0NyRXJyIH0sXG5cdDB4MDg2NjogeyBuOlwiSEZQaWN0dXJlXCIsIGY6cGFyc2VfSEZQaWN0dXJlIH0sXG5cdDB4MDg2NzogeyBuOidGZWF0SGRyJywgZjpwYXJzZV9GZWF0SGRyIH0sXG5cdDB4MDg2ODogeyBuOlwiRmVhdFwiLCBmOnBhcnNlX0ZlYXQgfSxcblx0MHgwODZhOiB7IG46XCJEYXRhTGFiRXh0XCIsIGY6cGFyc2VfRGF0YUxhYkV4dCB9LFxuXHQweDA4NmI6IHsgbjpcIkRhdGFMYWJFeHRDb250ZW50c1wiLCBmOnBhcnNlX0RhdGFMYWJFeHRDb250ZW50cyB9LFxuXHQweDA4NmM6IHsgbjpcIkNlbGxXYXRjaFwiLCBmOnBhcnNlX0NlbGxXYXRjaCB9LFxuXHQweDA4NzE6IHsgbjpcIkZlYXRIZHIxMVwiLCBmOnBhcnNlX0ZlYXRIZHIxMSB9LFxuXHQweDA4NzI6IHsgbjpcIkZlYXR1cmUxMVwiLCBmOnBhcnNlX0ZlYXR1cmUxMSB9LFxuXHQweDA4NzQ6IHsgbjpcIkRyb3BEb3duT2JqSWRzXCIsIGY6cGFyc2VfRHJvcERvd25PYmpJZHMgfSxcblx0MHgwODc1OiB7IG46XCJDb250aW51ZUZydDExXCIsIGY6cGFyc2VfQ29udGludWVGcnQxMSB9LFxuXHQweDA4NzY6IHsgbjpcIkRDb25uXCIsIGY6cGFyc2VfRENvbm4gfSxcblx0MHgwODc3OiB7IG46XCJMaXN0MTJcIiwgZjpwYXJzZV9MaXN0MTIgfSxcblx0MHgwODc4OiB7IG46XCJGZWF0dXJlMTJcIiwgZjpwYXJzZV9GZWF0dXJlMTIgfSxcblx0MHgwODc5OiB7IG46XCJDb25kRm10MTJcIiwgZjpwYXJzZV9Db25kRm10MTIgfSxcblx0MHgwODdhOiB7IG46XCJDRjEyXCIsIGY6cGFyc2VfQ0YxMiB9LFxuXHQweDA4N2I6IHsgbjpcIkNGRXhcIiwgZjpwYXJzZV9DRkV4IH0sXG5cdDB4MDg3YzogeyBuOlwiWEZDUkNcIiwgZjpwYXJzZV9YRkNSQywgcjoxMiB9LFxuXHQweDA4N2Q6IHsgbjpcIlhGRXh0XCIsIGY6cGFyc2VfWEZFeHQsIHI6MTIgfSxcblx0MHgwODdlOiB7IG46XCJBdXRvRmlsdGVyMTJcIiwgZjpwYXJzZV9BdXRvRmlsdGVyMTIgfSxcblx0MHgwODdmOiB7IG46XCJDb250aW51ZUZydDEyXCIsIGY6cGFyc2VfQ29udGludWVGcnQxMiB9LFxuXHQweDA4ODQ6IHsgbjpcIk1EVEluZm9cIiwgZjpwYXJzZV9NRFRJbmZvIH0sXG5cdDB4MDg4NTogeyBuOlwiTURYU3RyXCIsIGY6cGFyc2VfTURYU3RyIH0sXG5cdDB4MDg4NjogeyBuOlwiTURYVHVwbGVcIiwgZjpwYXJzZV9NRFhUdXBsZSB9LFxuXHQweDA4ODc6IHsgbjpcIk1EWFNldFwiLCBmOnBhcnNlX01EWFNldCB9LFxuXHQweDA4ODg6IHsgbjpcIk1EWFByb3BcIiwgZjpwYXJzZV9NRFhQcm9wIH0sXG5cdDB4MDg4OTogeyBuOlwiTURYS1BJXCIsIGY6cGFyc2VfTURYS1BJIH0sXG5cdDB4MDg4YTogeyBuOlwiTURCXCIsIGY6cGFyc2VfTURCIH0sXG5cdDB4MDg4YjogeyBuOlwiUExWXCIsIGY6cGFyc2VfUExWIH0sXG5cdDB4MDg4YzogeyBuOlwiQ29tcGF0MTJcIiwgZjpwYXJzZV9Db21wYXQxMiwgcjoxMiB9LFxuXHQweDA4OGQ6IHsgbjpcIkRYRlwiLCBmOnBhcnNlX0RYRiB9LFxuXHQweDA4OGU6IHsgbjpcIlRhYmxlU3R5bGVzXCIsIGY6cGFyc2VfVGFibGVTdHlsZXMsIHI6MTIgfSxcblx0MHgwODhmOiB7IG46XCJUYWJsZVN0eWxlXCIsIGY6cGFyc2VfVGFibGVTdHlsZSB9LFxuXHQweDA4OTA6IHsgbjpcIlRhYmxlU3R5bGVFbGVtZW50XCIsIGY6cGFyc2VfVGFibGVTdHlsZUVsZW1lbnQgfSxcblx0MHgwODkyOiB7IG46XCJTdHlsZUV4dFwiLCBmOnBhcnNlX1N0eWxlRXh0IH0sXG5cdDB4MDg5MzogeyBuOlwiTmFtZVB1Ymxpc2hcIiwgZjpwYXJzZV9OYW1lUHVibGlzaCB9LFxuXHQweDA4OTQ6IHsgbjpcIk5hbWVDbXRcIiwgZjpwYXJzZV9OYW1lQ210LCByOjEyIH0sXG5cdDB4MDg5NTogeyBuOlwiU29ydERhdGFcIiwgZjpwYXJzZV9Tb3J0RGF0YSB9LFxuXHQweDA4OTY6IHsgbjpcIlRoZW1lXCIsIGY6cGFyc2VfVGhlbWUsIHI6MTIgfSxcblx0MHgwODk3OiB7IG46XCJHVUlEVHlwZUxpYlwiLCBmOnBhcnNlX0dVSURUeXBlTGliIH0sXG5cdDB4MDg5ODogeyBuOlwiRm5HcnAxMlwiLCBmOnBhcnNlX0ZuR3JwMTIgfSxcblx0MHgwODk5OiB7IG46XCJOYW1lRm5HcnAxMlwiLCBmOnBhcnNlX05hbWVGbkdycDEyIH0sXG5cdDB4MDg5YTogeyBuOlwiTVRSU2V0dGluZ3NcIiwgZjpwYXJzZV9NVFJTZXR0aW5ncywgcjoxMiB9LFxuXHQweDA4OWI6IHsgbjpcIkNvbXByZXNzUGljdHVyZXNcIiwgZjpwYXJzZV9Db21wcmVzc1BpY3R1cmVzIH0sXG5cdDB4MDg5YzogeyBuOlwiSGVhZGVyRm9vdGVyXCIsIGY6cGFyc2VfSGVhZGVyRm9vdGVyIH0sXG5cdDB4MDg5ZDogeyBuOlwiQ3J0TGF5b3V0MTJcIiwgZjpwYXJzZV9DcnRMYXlvdXQxMiB9LFxuXHQweDA4OWU6IHsgbjpcIkNydE1sRnJ0XCIsIGY6cGFyc2VfQ3J0TWxGcnQgfSxcblx0MHgwODlmOiB7IG46XCJDcnRNbEZydENvbnRpbnVlXCIsIGY6cGFyc2VfQ3J0TWxGcnRDb250aW51ZSB9LFxuXHQweDA4YTM6IHsgbjpcIkZvcmNlRnVsbENhbGN1bGF0aW9uXCIsIGY6cGFyc2VfRm9yY2VGdWxsQ2FsY3VsYXRpb24gfSxcblx0MHgwOGE0OiB7IG46XCJTaGFwZVByb3BzU3RyZWFtXCIsIGY6cGFyc2VfU2hhcGVQcm9wc1N0cmVhbSB9LFxuXHQweDA4YTU6IHsgbjpcIlRleHRQcm9wc1N0cmVhbVwiLCBmOnBhcnNlX1RleHRQcm9wc1N0cmVhbSB9LFxuXHQweDA4YTY6IHsgbjpcIlJpY2hUZXh0U3RyZWFtXCIsIGY6cGFyc2VfUmljaFRleHRTdHJlYW0gfSxcblx0MHgwOGE3OiB7IG46XCJDcnRMYXlvdXQxMkFcIiwgZjpwYXJzZV9DcnRMYXlvdXQxMkEgfSxcblx0MHgxMDAxOiB7IG46XCJVbml0c1wiLCBmOnBhcnNlX1VuaXRzIH0sXG5cdDB4MTAwMjogeyBuOlwiQ2hhcnRcIiwgZjpwYXJzZV9DaGFydCB9LFxuXHQweDEwMDM6IHsgbjpcIlNlcmllc1wiLCBmOnBhcnNlX1NlcmllcyB9LFxuXHQweDEwMDY6IHsgbjpcIkRhdGFGb3JtYXRcIiwgZjpwYXJzZV9EYXRhRm9ybWF0IH0sXG5cdDB4MTAwNzogeyBuOlwiTGluZUZvcm1hdFwiLCBmOnBhcnNlX0xpbmVGb3JtYXQgfSxcblx0MHgxMDA5OiB7IG46XCJNYXJrZXJGb3JtYXRcIiwgZjpwYXJzZV9NYXJrZXJGb3JtYXQgfSxcblx0MHgxMDBhOiB7IG46XCJBcmVhRm9ybWF0XCIsIGY6cGFyc2VfQXJlYUZvcm1hdCB9LFxuXHQweDEwMGI6IHsgbjpcIlBpZUZvcm1hdFwiLCBmOnBhcnNlX1BpZUZvcm1hdCB9LFxuXHQweDEwMGM6IHsgbjpcIkF0dGFjaGVkTGFiZWxcIiwgZjpwYXJzZV9BdHRhY2hlZExhYmVsIH0sXG5cdDB4MTAwZDogeyBuOlwiU2VyaWVzVGV4dFwiLCBmOnBhcnNlX1Nlcmllc1RleHQgfSxcblx0MHgxMDE0OiB7IG46XCJDaGFydEZvcm1hdFwiLCBmOnBhcnNlX0NoYXJ0Rm9ybWF0IH0sXG5cdDB4MTAxNTogeyBuOlwiTGVnZW5kXCIsIGY6cGFyc2VfTGVnZW5kIH0sXG5cdDB4MTAxNjogeyBuOlwiU2VyaWVzTGlzdFwiLCBmOnBhcnNlX1Nlcmllc0xpc3QgfSxcblx0MHgxMDE3OiB7IG46XCJCYXJcIiwgZjpwYXJzZV9CYXIgfSxcblx0MHgxMDE4OiB7IG46XCJMaW5lXCIsIGY6cGFyc2VfTGluZSB9LFxuXHQweDEwMTk6IHsgbjpcIlBpZVwiLCBmOnBhcnNlX1BpZSB9LFxuXHQweDEwMWE6IHsgbjpcIkFyZWFcIiwgZjpwYXJzZV9BcmVhIH0sXG5cdDB4MTAxYjogeyBuOlwiU2NhdHRlclwiLCBmOnBhcnNlX1NjYXR0ZXIgfSxcblx0MHgxMDFjOiB7IG46XCJDcnRMaW5lXCIsIGY6cGFyc2VfQ3J0TGluZSB9LFxuXHQweDEwMWQ6IHsgbjpcIkF4aXNcIiwgZjpwYXJzZV9BeGlzIH0sXG5cdDB4MTAxZTogeyBuOlwiVGlja1wiLCBmOnBhcnNlX1RpY2sgfSxcblx0MHgxMDFmOiB7IG46XCJWYWx1ZVJhbmdlXCIsIGY6cGFyc2VfVmFsdWVSYW5nZSB9LFxuXHQweDEwMjA6IHsgbjpcIkNhdFNlclJhbmdlXCIsIGY6cGFyc2VfQ2F0U2VyUmFuZ2UgfSxcblx0MHgxMDIxOiB7IG46XCJBeGlzTGluZVwiLCBmOnBhcnNlX0F4aXNMaW5lIH0sXG5cdDB4MTAyMjogeyBuOlwiQ3J0TGlua1wiLCBmOnBhcnNlX0NydExpbmsgfSxcblx0MHgxMDI0OiB7IG46XCJEZWZhdWx0VGV4dFwiLCBmOnBhcnNlX0RlZmF1bHRUZXh0IH0sXG5cdDB4MTAyNTogeyBuOlwiVGV4dFwiLCBmOnBhcnNlX1RleHQgfSxcblx0MHgxMDI2OiB7IG46XCJGb250WFwiLCBmOnBhcnNlX0ZvbnRYIH0sXG5cdDB4MTAyNzogeyBuOlwiT2JqZWN0TGlua1wiLCBmOnBhcnNlX09iamVjdExpbmsgfSxcblx0MHgxMDMyOiB7IG46XCJGcmFtZVwiLCBmOnBhcnNlX0ZyYW1lIH0sXG5cdDB4MTAzMzogeyBuOlwiQmVnaW5cIiwgZjpwYXJzZV9CZWdpbiB9LFxuXHQweDEwMzQ6IHsgbjpcIkVuZFwiLCBmOnBhcnNlX0VuZCB9LFxuXHQweDEwMzU6IHsgbjpcIlBsb3RBcmVhXCIsIGY6cGFyc2VfUGxvdEFyZWEgfSxcblx0MHgxMDNhOiB7IG46XCJDaGFydDNkXCIsIGY6cGFyc2VfQ2hhcnQzZCB9LFxuXHQweDEwM2M6IHsgbjpcIlBpY0ZcIiwgZjpwYXJzZV9QaWNGIH0sXG5cdDB4MTAzZDogeyBuOlwiRHJvcEJhclwiLCBmOnBhcnNlX0Ryb3BCYXIgfSxcblx0MHgxMDNlOiB7IG46XCJSYWRhclwiLCBmOnBhcnNlX1JhZGFyIH0sXG5cdDB4MTAzZjogeyBuOlwiU3VyZlwiLCBmOnBhcnNlX1N1cmYgfSxcblx0MHgxMDQwOiB7IG46XCJSYWRhckFyZWFcIiwgZjpwYXJzZV9SYWRhckFyZWEgfSxcblx0MHgxMDQxOiB7IG46XCJBeGlzUGFyZW50XCIsIGY6cGFyc2VfQXhpc1BhcmVudCB9LFxuXHQweDEwNDM6IHsgbjpcIkxlZ2VuZEV4Y2VwdGlvblwiLCBmOnBhcnNlX0xlZ2VuZEV4Y2VwdGlvbiB9LFxuXHQweDEwNDQ6IHsgbjpcIlNodFByb3BzXCIsIGY6cGFyc2VfU2h0UHJvcHMgfSxcblx0MHgxMDQ1OiB7IG46XCJTZXJUb0NydFwiLCBmOnBhcnNlX1NlclRvQ3J0IH0sXG5cdDB4MTA0NjogeyBuOlwiQXhlc1VzZWRcIiwgZjpwYXJzZV9BeGVzVXNlZCB9LFxuXHQweDEwNDg6IHsgbjpcIlNCYXNlUmVmXCIsIGY6cGFyc2VfU0Jhc2VSZWYgfSxcblx0MHgxMDRhOiB7IG46XCJTZXJQYXJlbnRcIiwgZjpwYXJzZV9TZXJQYXJlbnQgfSxcblx0MHgxMDRiOiB7IG46XCJTZXJBdXhUcmVuZFwiLCBmOnBhcnNlX1NlckF1eFRyZW5kIH0sXG5cdDB4MTA0ZTogeyBuOlwiSUZtdFJlY29yZFwiLCBmOnBhcnNlX0lGbXRSZWNvcmQgfSxcblx0MHgxMDRmOiB7IG46XCJQb3NcIiwgZjpwYXJzZV9Qb3MgfSxcblx0MHgxMDUwOiB7IG46XCJBbFJ1bnNcIiwgZjpwYXJzZV9BbFJ1bnMgfSxcblx0MHgxMDUxOiB7IG46XCJCUkFJXCIsIGY6cGFyc2VfQlJBSSB9LFxuXHQweDEwNWI6IHsgbjpcIlNlckF1eEVyckJhclwiLCBmOnBhcnNlX1NlckF1eEVyckJhciB9LFxuXHQweDEwNWM6IHsgbjpcIkNscnRDbGllbnRcIiwgZjpwYXJzZV9DbHJ0Q2xpZW50IH0sXG5cdDB4MTA1ZDogeyBuOlwiU2VyRm10XCIsIGY6cGFyc2VfU2VyRm10IH0sXG5cdDB4MTA1ZjogeyBuOlwiQ2hhcnQzREJhclNoYXBlXCIsIGY6cGFyc2VfQ2hhcnQzREJhclNoYXBlIH0sXG5cdDB4MTA2MDogeyBuOlwiRmJpXCIsIGY6cGFyc2VfRmJpIH0sXG5cdDB4MTA2MTogeyBuOlwiQm9wUG9wXCIsIGY6cGFyc2VfQm9wUG9wIH0sXG5cdDB4MTA2MjogeyBuOlwiQXhjRXh0XCIsIGY6cGFyc2VfQXhjRXh0IH0sXG5cdDB4MTA2MzogeyBuOlwiRGF0XCIsIGY6cGFyc2VfRGF0IH0sXG5cdDB4MTA2NDogeyBuOlwiUGxvdEdyb3d0aFwiLCBmOnBhcnNlX1Bsb3RHcm93dGggfSxcblx0MHgxMDY1OiB7IG46XCJTSUluZGV4XCIsIGY6cGFyc2VfU0lJbmRleCB9LFxuXHQweDEwNjY6IHsgbjpcIkdlbEZyYW1lXCIsIGY6cGFyc2VfR2VsRnJhbWUgfSxcblx0MHgxMDY3OiB7IG46XCJCb3BQb3BDdXN0b21cIiwgZjpwYXJzZV9Cb3BQb3BDdXN0b20gfSxcblx0MHgxMDY4OiB7IG46XCJGYmkyXCIsIGY6cGFyc2VfRmJpMiB9LFxuXG5cdFx0LyogVGhlc2UgYXJlIHNwZWNpZmllZCBpbiBhbiBvbGRlciB2ZXJzaW9uIG9mIHRoZSBzcGVjICovXG5cdDB4MDAwMDogeyBuOlwiRGltZW5zaW9uc1wiLCBmOnBhcnNlX0RpbWVuc2lvbnMgfSxcblx0MHgwMDAyOiB7IG46XCJCSUZGMklOVFwiLCBmOnBhcnNlX0JJRkYySU5UIH0sXG5cdDB4MDAwNTogeyBuOlwiQm9vbEVyclwiLCBmOnBhcnNlX0Jvb2xFcnIgfSxcblx0MHgwMDA3OiB7IG46XCJTdHJpbmdcIiwgZjpwYXJzZV9CSUZGMlNUUklORyB9LFxuXHQweDAwMDg6IHsgbjpcIkJJRkYyUk9XXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAwYjogeyBuOlwiSW5kZXhcIiwgZjpwYXJzZV9JbmRleCB9LFxuXHQweDAwMTY6IHsgbjpcIkV4dGVybkNvdW50XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDAxZTogeyBuOlwiQklGRjJGT1JNQVRcIiwgZjpwYXJzZV9CSUZGMkZvcm1hdCB9LFxuXHQweDAwMWY6IHsgbjpcIkJJRkYyRk1UQ05UXCIsIGY6cGFyc2Vub29wIH0sIC8qIDE2LWJpdCBjbnQgb2YgQklGRjJGT1JNQVQgcmVjb3JkcyAqL1xuXHQweDAwMjA6IHsgbjpcIkJJRkYyQ09MSU5GT1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwMjE6IHsgbjpcIkFycmF5XCIsIGY6cGFyc2VfQXJyYXkgfSxcblx0MHgwMDI1OiB7IG46XCJEZWZhdWx0Um93SGVpZ2h0XCIsIGY6cGFyc2VfRGVmYXVsdFJvd0hlaWdodCB9LFxuXHQweDAwMzI6IHsgbjpcIkJJRkYyRk9OVFhUUkFcIiwgZjpwYXJzZV9CSUZGMkZPTlRYVFJBIH0sXG5cdDB4MDAzZTogeyBuOlwiQklGRjJXSU5ET1cyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA0NTogeyBuOlwiQklGRjJGT05UQ0xSXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA1NjogeyBuOlwiQklGRjRGTVRDTlRcIiwgZjpwYXJzZW5vb3AgfSwgLyogMTYtYml0IGNudCwgc2ltaWxhciB0byBCSUZGMiAqL1xuXHQweDAwN2U6IHsgbjpcIlJLXCIsIGY6cGFyc2Vub29wIH0sIC8qIE5vdCBuZWNlc3NhcmlseSBzYW1lIGFzIDB4MDI3ZSAqL1xuXHQweDAwN2Y6IHsgbjpcIkltRGF0YVwiLCBmOnBhcnNlX0ltRGF0YSB9LFxuXHQweDAwODc6IHsgbjpcIkFkZGluXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4ODogeyBuOlwiRWRnXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA4OTogeyBuOlwiUHViXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA5MTogeyBuOlwiU3ViXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDA5NDogeyBuOlwiTEhSZWNvcmRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMDk1OiB7IG46XCJMSE5HcmFwaFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwOTY6IHsgbjpcIlNvdW5kXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBhOTogeyBuOlwiQ29vcmRMaXN0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBhYjogeyBuOlwiR0NXXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBiYzogeyBuOlwiU2hyRm1sYVwiLCBmOnBhcnNlbm9vcCB9LCAvKiBOb3QgbmVjZXNzYXJpbHkgc2FtZSBhcyAweDA0YmMgKi9cblx0MHgwMGMyOiB7IG46XCJBZGRNZW51XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBjMzogeyBuOlwiRGVsTWVudVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDAwZDY6IHsgbjpcIlJTdHJpbmdcIiwgZjpwYXJzZV9SU3RyaW5nIH0sXG5cdDB4MDBkZjogeyBuOlwiVUREZXNjXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDBlYTogeyBuOlwiVGFiSWRDb25mXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDE2MjogeyBuOlwiWEw1TW9kaWZ5XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDFhNTogeyBuOlwiRmlsZVNoYXJpbmcyXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDIwOTogeyBuOidCT0YnLCBmOnBhcnNlX0JPRiB9LFxuXHQweDAyMTg6IHsgbjpcIkxibFwiLCBmOnBhcnNlX0xibCB9LFxuXHQweDAyMjM6IHsgbjpcIkV4dGVybk5hbWVcIiwgZjpwYXJzZV9FeHRlcm5OYW1lIH0sXG5cdDB4MDIzMTogeyBuOlwiRm9udFwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA0MDk6IHsgbjonQk9GJywgZjpwYXJzZV9CT0YgfSxcblx0MHgwODZkOiB7IG46XCJGZWF0SW5mb1wiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4NzM6IHsgbjpcIkZlYXRJbmZvMTFcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwODgxOiB7IG46XCJTWEFkZGwxMlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4YzA6IHsgbjpcIkF1dG9XZWJQdWJcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwOGMxOiB7IG46XCJMaXN0T2JqXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDhjMjogeyBuOlwiTGlzdEZpZWxkXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDhjMzogeyBuOlwiTGlzdERWXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDhjNDogeyBuOlwiTGlzdENvbmRGbXRcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwOGM1OiB7IG46XCJMaXN0Q0ZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwOGM2OiB7IG46XCJGTVFyeVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Yzc6IHsgbjpcIkZNU1FyeVwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Yzg6IHsgbjpcIlBMVlwiLCBmOnBhcnNlbm9vcCB9LFxuXHQweDA4Yzk6IHsgbjpcIkxuRXh0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDhjYTogeyBuOlwiTWtyRXh0XCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDhjYjogeyBuOlwiQ3J0Q29vcHRcIiwgZjpwYXJzZW5vb3AgfSxcblxuXHQweDAwNDM6IHsgbjpcIkJJRkYyWEZcIiwgZjpwYXJzZW5vb3AgfSxcblx0MHgwMjQzOiB7IG46XCJCSUZGM1hGXCIsIGY6cGFyc2Vub29wIH0sXG5cdDB4MDQ0MzogeyBuOlwiQklGRjRYRlwiLCBmOnBhcnNlbm9vcCB9LFxuXG5cdDB4NzI2Mjoge31cblx0fTtcblxuXG5cdC8qIEJJRkYyLTQgc2luZ2xlLXNoZWV0IHdvcmtib29rcyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9iaWZmX3JlYyhiYSwgdCwgcGF5bG9hZCwgbGVuZ3RoKSB7XG5cdFx0dmFyIGxlbiA9IChsZW5ndGggfHwgKHBheWxvYWR8fFtdKS5sZW5ndGgpO1xuXHRcdHZhciBvID0gYmEubmV4dCg0ICsgbGVuKTtcblx0XHRvLndyaXRlX3NoaWZ0KDIsIHQpO1xuXHRcdG8ud3JpdGVfc2hpZnQoMiwgbGVuKTtcblx0XHRpZihsZW4gPiAwICYmIGlzX2J1ZihwYXlsb2FkKSkgYmEucHVzaChwYXlsb2FkKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JPRih3Yiwgbykge1xuXHRcdGlmKG8uYm9va1R5cGUgIT0gJ2JpZmYyJykgdGhyb3cgXCJ1bnN1cHBvcnRlZCBCSUZGIHZlcnNpb25cIjtcblx0XHR2YXIgb3V0ID0gbmV3X2J1Zig0KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgMHgwMDAyKTsgLy8gXCJ1bnVzZWRcIlxuXHRcdG91dC53cml0ZV9zaGlmdCgyLCAweDAwMTApOyAvLyBTaGVldFxuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKSB7XG5cdFx0aWYoIW91dCkgb3V0ID0gbmV3X2J1Zig3KTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgcik7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDIsIGMpO1xuXHRcdG91dC53cml0ZV9zaGlmdCgxLCAwKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMSwgMCk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIDApO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV9CSUZGMklOVChyLCBjLCB2YWwpIHtcblx0XHR2YXIgb3V0ID0gbmV3X2J1Zig5KTtcblx0XHR3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKTtcblx0XHRvdXQud3JpdGVfc2hpZnQoMiwgdmFsKTtcblx0XHRyZXR1cm4gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVfQklGRjJOVU1CRVIociwgYywgdmFsKSB7XG5cdFx0dmFyIG91dCA9IG5ld19idWYoMTUpO1xuXHRcdHdyaXRlX0JJRkYyQ2VsbChvdXQsIHIsIGMpO1xuXHRcdG91dC53cml0ZV9zaGlmdCg4LCB2YWwsICdmJyk7XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX0JJRkYyQkVSUihyLCBjLCB2YWwsIHQpIHtcblx0XHR2YXIgb3V0ID0gbmV3X2J1Zig5KTtcblx0XHR3cml0ZV9CSUZGMkNlbGwob3V0LCByLCBjKTtcblx0XHRpZih0ID09ICdlJykgeyBvdXQud3JpdGVfc2hpZnQoMSwgdmFsKTsgb3V0LndyaXRlX3NoaWZ0KDEsIDEpOyB9XG5cdFx0ZWxzZSB7IG91dC53cml0ZV9zaGlmdCgxLCB2YWw/MTowKTsgb3V0LndyaXRlX3NoaWZ0KDEsIDApOyB9XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdC8qIFRPRE86IGNvZGVwYWdlLCBsYXJnZSBzdHJpbmdzICovXG5cdGZ1bmN0aW9uIHdyaXRlX0JJRkYyTEFCRUwociwgYywgdmFsKSB7XG5cdFx0dmFyIG91dCA9IG5ld19idWYoOCArIDIqdmFsLmxlbmd0aCk7XG5cdFx0d3JpdGVfQklGRjJDZWxsKG91dCwgciwgYyk7XG5cdFx0b3V0LndyaXRlX3NoaWZ0KDEsIHZhbC5sZW5ndGgpO1xuXHRcdG91dC53cml0ZV9zaGlmdCh2YWwubGVuZ3RoLCB2YWwsICdzYmNzJyk7XG5cdFx0cmV0dXJuIG91dC5sIDwgb3V0Lmxlbmd0aCA/IG91dC5zbGljZSgwLCBvdXQubCkgOiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZV93c19iaWZmX2NlbGwoYmEsIGNlbGwsIFIsIEMsIG9wdHMpIHtcblx0XHRpZihjZWxsLnYgIT0gbnVsbCkgc3dpdGNoKGNlbGwudCkge1xuXHRcdFx0Y2FzZSAnZCc6IGNhc2UgJ24nOlxuXHRcdFx0XHR2YXIgdiA9IGNlbGwudCA9PSAnZCcgPyBkYXRlbnVtKGNlbGwudikgOiBjZWxsLnY7XG5cdFx0XHRcdGlmKCh2ID09ICh2fDApKSAmJiAodiA+PSAwKSAmJiAodiA8IDY1NTM2KSlcblx0XHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDAyLCB3cml0ZV9CSUZGMklOVChSLCBDLCB2KSk7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDAzLCB3cml0ZV9CSUZGMk5VTUJFUihSLEMsIHYpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Y2FzZSAnYic6IGNhc2UgJ2UnOiB3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDA1LCB3cml0ZV9CSUZGMkJFUlIoUiwgQywgY2VsbC52LCBjZWxsLnQpKTsgcmV0dXJuO1xuXHRcdFx0LyogVE9ETzogY29kZXBhZ2UsIHNzdCAqL1xuXHRcdFx0Y2FzZSAncyc6IGNhc2UgJ3N0cic6XG5cdFx0XHRcdHdyaXRlX2JpZmZfcmVjKGJhLCAweDAwMDQsIHdyaXRlX0JJRkYyTEFCRUwoUiwgQywgY2VsbC52KSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwMSwgd3JpdGVfQklGRjJDZWxsKG51bGwsIFIsIEMpKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX2JpZmZfd3MoYmEsIHdzLCBpZHgsIG9wdHMsIHdiKSB7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0dmFyIHJhbmdlID0gc2FmZV9kZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSB8fCBcIkExXCIpLCByZWYsIHJyID0gXCJcIiwgY29scyA9IFtdO1xuXHRcdGZvcih2YXIgUiA9IHJhbmdlLnMucjsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdFx0cnIgPSBlbmNvZGVfcm93KFIpO1xuXHRcdFx0Zm9yKHZhciBDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7XG5cdFx0XHRcdGlmKFIgPT09IHJhbmdlLnMucikgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHRcdHJlZiA9IGNvbHNbQ10gKyBycjtcblx0XHRcdFx0dmFyIGNlbGwgPSBkZW5zZSA/IHdzW1JdW0NdIDogd3NbcmVmXTtcblx0XHRcdFx0aWYoIWNlbGwpIGNvbnRpbnVlO1xuXHRcdFx0XHQvKiB3cml0ZSBjZWxsICovXG5cdFx0XHRcdHdyaXRlX3dzX2JpZmZfY2VsbChiYSwgY2VsbCwgUiwgQywgb3B0cyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyogQmFzZWQgb24gdGVzdCBmaWxlcyAqL1xuXHRmdW5jdGlvbiB3cml0ZV9iaWZmX2J1Zih3Yiwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0cyB8fCB7fTtcblx0XHRpZihERU5TRSAhPSBudWxsICYmIG8uZGVuc2UgPT0gbnVsbCkgby5kZW5zZSA9IERFTlNFO1xuXHRcdHZhciBiYSA9IGJ1Zl9hcnJheSgpO1xuXHRcdHZhciBpZHggPSAwO1xuXHRcdGZvcih2YXIgaT0wO2k8d2IuU2hlZXROYW1lcy5sZW5ndGg7KytpKSBpZih3Yi5TaGVldE5hbWVzW2ldID09IG8uc2hlZXQpIGlkeD1pO1xuXHRcdGlmKGlkeCA9PSAwICYmICEhby5zaGVldCAmJiB3Yi5TaGVldE5hbWVzWzBdICE9IG8uc2hlZXQpIHRocm93IG5ldyBFcnJvcihcIlNoZWV0IG5vdCBmb3VuZDogXCIgKyBvLnNoZWV0KTtcblx0XHR3cml0ZV9iaWZmX3JlYyhiYSwgMHgwMDA5LCB3cml0ZV9CT0Yod2IsIG8pKTtcblx0XHQvKiAuLi4gKi9cblx0XHR3cml0ZV9iaWZmX3dzKGJhLCB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpZHhdXSwgaWR4LCBvLCB3Yik7XG5cdFx0LyogLi4uICovXG5cdFx0d3JpdGVfYmlmZl9yZWMoYmEsIDB4MDAwYSk7XG5cdFx0Ly8gVE9ET1xuXHRcdHJldHVybiBiYS5lbmQoKTtcblx0fVxuXHQvKiBUT0RPOiBpbiBicm93c2VyIGF0dGFjaCB0byBET007IGluIG5vZGUgdXNlIGFuIGh0bWwgcGFyc2VyICovXG5cdHZhciBIVE1MXyA9IChmdW5jdGlvbigpIHtcblx0XHRmdW5jdGlvbiBodG1sX3RvX3NoZWV0KHN0ciwgX29wdHMpIHtcblx0XHRcdHZhciBvcHRzID0gX29wdHMgfHwge307XG5cdFx0XHRpZihERU5TRSAhPSBudWxsICYmIG9wdHMuZGVuc2UgPT0gbnVsbCkgb3B0cy5kZW5zZSA9IERFTlNFO1xuXHRcdFx0dmFyIHdzID0gb3B0cy5kZW5zZSA/IChbXSkgOiAoe30pO1xuXHRcdFx0dmFyIGkgPSBzdHIuaW5kZXhPZihcIjx0YWJsZVwiKSwgaiA9IHN0ci5pbmRleE9mKFwiPC90YWJsZVwiKTtcblx0XHRcdGlmKGkgPT0gLTEgfHwgaiA9PSAtMSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBIVE1MOiBtaXNzaW5nIDx0YWJsZT4gLyA8L3RhYmxlPiBwYWlyXCIpO1xuXHRcdFx0dmFyIHJvd3MgPSBzdHIuc2xpY2UoaSwgaikuc3BsaXQoLyg6Pzx0cltePl0qPikvKTtcblx0XHRcdHZhciBSID0gLTEsIEMgPSAwLCBSUyA9IDAsIENTID0gMDtcblx0XHRcdHZhciByYW5nZSA9IHtzOntyOjEwMDAwMDAwLCBjOjEwMDAwMDAwfSxlOntyOjAsYzowfX07XG5cdFx0XHR2YXIgbWVyZ2VzID0gW10sIG1pZHggPSAwO1xuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgcm93ID0gcm93c1tpXS50cmltKCk7XG5cdFx0XHRcdGlmKHJvdy5zdWJzdHIoMCwzKSA9PSBcIjx0clwiKSB7ICsrUjsgQyA9IDA7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdGlmKHJvdy5zdWJzdHIoMCwzKSAhPSBcIjx0ZFwiKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIGNlbGxzID0gcm93LnNwbGl0KFwiPC90ZD5cIik7XG5cdFx0XHRcdGZvcihqID0gMDsgaiA8IGNlbGxzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdFx0dmFyIGNlbGwgPSBjZWxsc1tqXS50cmltKCk7XG5cdFx0XHRcdFx0aWYoY2VsbC5zdWJzdHIoMCwzKSAhPSBcIjx0ZFwiKSBjb250aW51ZTtcblx0XHRcdFx0XHR2YXIgbSA9IGNlbGwsIGNjID0gMDtcblx0XHRcdFx0XHQvKiBUT0RPOiBwYXJzZSBzdHlsZXMgZXRjICovXG5cdFx0XHRcdFx0d2hpbGUobS5jaGFyQXQoMCkgPT0gXCI8XCIgJiYgKGNjID0gbS5pbmRleE9mKFwiPlwiKSkgPiAtMSkgbSA9IG0uc2xpY2UoY2MrMSk7XG5cdFx0XHRcdFx0d2hpbGUobS5pbmRleE9mKFwiPlwiKSA+IC0xKSBtID0gbS5zbGljZSgwLCBtLmxhc3RJbmRleE9mKFwiPFwiKSk7XG5cdFx0XHRcdFx0dmFyIHRhZyA9IHBhcnNleG1sdGFnKGNlbGwuc2xpY2UoMCwgY2VsbC5pbmRleE9mKFwiPlwiKSkpO1xuXHRcdFx0XHRcdENTID0gdGFnLmNvbHNwYW4gPyArdGFnLmNvbHNwYW4gOiAxO1xuXHRcdFx0XHRcdGlmKChSUyA9ICt0YWcucm93c3Bhbik+MCB8fCBDUz4xKSBtZXJnZXMucHVzaCh7czp7cjpSLGM6Q30sZTp7cjpSICsgKFJTfHwxKSAtIDEsIGM6QyArIENTIC0gMX19KTtcblx0XHRcdFx0XHQvKiBUT0RPOiBnZW5lcmF0ZSBzdHViIGNlbGxzICovXG5cdFx0XHRcdFx0aWYoIW0ubGVuZ3RoKSB7IEMgKz0gQ1M7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0bSA9IHVuZXNjYXBleG1sKG0pLnJlcGxhY2UoL1tcXHJcXG5dL2csXCJcIik7XG5cdFx0XHRcdFx0aWYocmFuZ2Uucy5yID4gUikgcmFuZ2Uucy5yID0gUjtcblx0XHRcdFx0XHRpZihyYW5nZS5lLnIgPCBSKSByYW5nZS5lLnIgPSBSO1xuXHRcdFx0XHRcdGlmKHJhbmdlLnMuYyA+IEMpIHJhbmdlLnMuYyA9IEM7XG5cdFx0XHRcdFx0aWYocmFuZ2UuZS5jIDwgQykgcmFuZ2UuZS5jID0gQztcblx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7XG5cdFx0XHRcdFx0XHRpZighd3NbUl0pIHdzW1JdID0gW107XG5cdFx0XHRcdFx0XHRpZihOdW1iZXIobSkgPT0gTnVtYmVyKG0pKSB3c1tSXVtDXSA9IHt0OiduJywgdjorbX07XG5cdFx0XHRcdFx0XHRlbHNlIHdzW1JdW0NdID0ge3Q6J3MnLCB2Om19O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgY29vcmQgPSBlbmNvZGVfY2VsbCh7cjpSLCBjOkN9KTtcblx0XHRcdFx0XHRcdC8qIFRPRE86IHZhbHVlIHBhcnNpbmcgKi9cblx0XHRcdFx0XHRcdGlmKE51bWJlcihtKSA9PSBOdW1iZXIobSkpIHdzW2Nvb3JkXSA9IHt0OiduJywgdjorbX07XG5cdFx0XHRcdFx0XHRlbHNlIHdzW2Nvb3JkXSA9IHt0OidzJywgdjptfTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0QyArPSBDUztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0d3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0XHRyZXR1cm4gd3M7XG5cdFx0fVxuXHRcdGZ1bmN0aW9uIGh0bWxfdG9fYm9vayhzdHIsIG9wdHMpIHtcblx0XHRcdHJldHVybiBzaGVldF90b193b3JrYm9vayhodG1sX3RvX3NoZWV0KHN0ciwgb3B0cyksIG9wdHMpO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBtYWtlX2h0bWxfcm93KHdzLCByLCBSLCBvKSB7XG5cdFx0XHR2YXIgTSA9ICh3c1snIW1lcmdlcyddIHx8W10pO1xuXHRcdFx0dmFyIG9vID0gW107XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhciBSUyA9IDAsIENTID0gMDtcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IE0ubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0XHRpZihNW2pdLnMuciA+IFIgfHwgTVtqXS5zLmMgPiBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihNW2pdLmUuciA8IFIgfHwgTVtqXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZihNW2pdLnMuciA8IFIgfHwgTVtqXS5zLmMgPCBDKSB7IFJTID0gLTE7IGJyZWFrOyB9XG5cdFx0XHRcdFx0UlMgPSBNW2pdLmUuciAtIE1bal0ucy5yICsgMTsgQ1MgPSBNW2pdLmUuYyAtIE1bal0ucy5jICsgMTsgYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoUlMgPCAwKSBjb250aW51ZTtcblx0XHRcdFx0dmFyIGNvb3JkID0gZW5jb2RlX2NlbGwoe3I6UixjOkN9KTtcblx0XHRcdFx0dmFyIGNlbGwgPSBvLmRlbnNlID8gKHdzW1JdfHxbXSlbQ10gOiB3c1tjb29yZF07XG5cdFx0XHRcdGlmKCFjZWxsIHx8IGNlbGwudiA9PSBudWxsKSB7IG9vLnB1c2goXCI8dGQ+PC90ZD5cIik7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdC8qIFRPRE86IGh0bWwgZW50aXRpZXMgKi9cblx0XHRcdFx0dmFyIHcgPSBjZWxsLmggfHwgZXNjYXBleG1sKGNlbGwudyB8fCAoZm9ybWF0X2NlbGwoY2VsbCksIGNlbGwudykgfHwgXCJcIik7XG5cdFx0XHRcdHZhciBzcCA9IHt9O1xuXHRcdFx0XHRpZihSUyA+IDEpIHNwLnJvd3NwYW4gPSBSUztcblx0XHRcdFx0aWYoQ1MgPiAxKSBzcC5jb2xzcGFuID0gQ1M7XG5cdFx0XHRcdG9vLnB1c2god3JpdGV4dGFnKCd0ZCcsIHcsIHNwKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gXCI8dHI+XCIgKyBvby5qb2luKFwiXCIpICsgXCI8L3RyPlwiO1xuXHRcdH1cblx0XHRmdW5jdGlvbiBzaGVldF90b19odG1sKHdzLCBvcHRzKSB7XG5cdFx0XHR2YXIgbyA9IFtdO1xuXHRcdFx0dmFyIHIgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0XHRvLmRlbnNlID0gQXJyYXkuaXNBcnJheSh3cyk7XG5cdFx0XHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSBvLnB1c2gobWFrZV9odG1sX3Jvdyh3cywgciwgUiwgbykpO1xuXHRcdFx0cmV0dXJuIFwiPGh0bWw+PGJvZHk+PHRhYmxlPlwiICsgby5qb2luKFwiXCIpICsgXCI8L3RhYmxlPjwvYm9keT48L2h0bWw+XCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvX3dvcmtib29rOiBodG1sX3RvX2Jvb2ssXG5cdFx0XHR0b19zaGVldDogaHRtbF90b19zaGVldCxcblx0XHRcdF9yb3c6IG1ha2VfaHRtbF9yb3csXG5cdFx0XHRmcm9tX3NoZWV0OiBzaGVldF90b19odG1sXG5cdFx0fTtcblx0fSkoKTtcblxuXHRmdW5jdGlvbiBwYXJzZV9kb21fdGFibGUodGFibGUsIF9vcHRzKSB7XG5cdFx0dmFyIG9wdHMgPSBfb3B0cyB8fCB7fTtcblx0XHRpZihERU5TRSAhPSBudWxsKSBvcHRzLmRlbnNlID0gREVOU0U7XG5cdFx0dmFyIHdzID0gb3B0cy5kZW5zZSA/IChbXSkgOiAoe30pO1xuXHRcdHZhciByb3dzID0gdGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJyk7XG5cdFx0dmFyIHJhbmdlID0ge3M6e3I6MCxjOjB9LGU6e3I6cm93cy5sZW5ndGggLSAxLGM6MH19O1xuXHRcdHZhciBtZXJnZXMgPSBbXSwgbWlkeCA9IDA7XG5cdFx0dmFyIFIgPSAwLCBfQyA9IDAsIEMgPSAwLCBSUyA9IDAsIENTID0gMDtcblx0XHRmb3IoOyBSIDwgcm93cy5sZW5ndGg7ICsrUikge1xuXHRcdFx0dmFyIHJvdyA9IHJvd3NbUl07XG5cdFx0XHR2YXIgZWx0cyA9IHJvdy5jaGlsZHJlbjtcblx0XHRcdGZvcihfQyA9IEMgPSAwOyBfQyA8IGVsdHMubGVuZ3RoOyArK19DKSB7XG5cdFx0XHRcdHZhciBlbHQgPSBlbHRzW19DXSwgdiA9IGVsdHNbX0NdLmlubmVyVGV4dDtcblx0XHRcdFx0Zm9yKG1pZHggPSAwOyBtaWR4IDwgbWVyZ2VzLmxlbmd0aDsgKyttaWR4KSB7XG5cdFx0XHRcdFx0dmFyIG0gPSBtZXJnZXNbbWlkeF07XG5cdFx0XHRcdFx0aWYobS5zLmMgPT0gQyAmJiBtLnMuciA8PSBSICYmIFIgPD0gbS5lLnIpIHsgQyA9IG0uZS5jKzE7IG1pZHggPSAtMTsgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8qIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIGV4dHJhY3Qgbm9uc3RhbmRhcmQgbXNvLSBzdHlsZSAqL1xuXHRcdFx0XHRDUyA9ICtlbHQuZ2V0QXR0cmlidXRlKFwiY29sc3BhblwiKSB8fCAxO1xuXHRcdFx0XHRpZigoUlMgPSArZWx0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikpPjAgfHwgQ1M+MSkgbWVyZ2VzLnB1c2goe3M6e3I6UixjOkN9LGU6e3I6UiArIChSU3x8MSkgLSAxLCBjOkMgKyBDUyAtIDF9fSk7XG5cdFx0XHRcdHZhciBvID0ge3Q6J3MnLCB2OnZ9O1xuXHRcdFx0XHRpZih2ICE9IG51bGwgJiYgdi5sZW5ndGggJiYgIWlzTmFOKE51bWJlcih2KSkpIG8gPSB7dDonbicsIHY6TnVtYmVyKHYpfTtcblx0XHRcdFx0aWYob3B0cy5kZW5zZSkgeyBpZighd3NbUl0pIHdzW1JdID0gW107IHdzW1JdW0NdID0gbzsgfVxuXHRcdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtjOkMsIHI6Un0pXSA9IG87XG5cdFx0XHRcdGlmKHJhbmdlLmUuYyA8IEMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRcdEMgKz0gQ1M7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdzWychbWVyZ2VzJ10gPSBtZXJnZXM7XG5cdFx0d3NbJyFyZWYnXSA9IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0cmV0dXJuIHdzO1xuXHR9XG5cblx0ZnVuY3Rpb24gdGFibGVfdG9fYm9vayh0YWJsZSwgb3B0cykge1xuXHRcdHJldHVybiBzaGVldF90b193b3JrYm9vayhwYXJzZV9kb21fdGFibGUodGFibGUsIG9wdHMpLCBvcHRzKTtcblx0fVxuXHQvKiBPcGVuRG9jdW1lbnQgKi9cblx0dmFyIHBhcnNlX2NvbnRlbnRfeG1sID0gKGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIHBhcnNlX3RleHRfcCA9IGZ1bmN0aW9uKHRleHQsIHRhZykge1xuXHRcdFx0cmV0dXJuIHVuZXNjYXBleG1sKHRleHQucmVwbGFjZSgvPHRleHQ6c1xcLz4vZyxcIiBcIikucmVwbGFjZSgvPFtePl0qPi9nLFwiXCIpKTtcblx0XHR9O1xuXG5cdFx0dmFyIG51bWJlcl9mb3JtYXRzID0ge1xuXHRcdFx0Lyogb2RzIG5hbWU6IFtzaG9ydCBzc2YgZm10LCBsb25nIHNzZiBmbXRdICovXG5cdFx0XHRkYXk6IFtcImRcIiwgXCJkZFwiXSxcblx0XHRcdG1vbnRoOiBbXCJtXCIsIFwibW1cIl0sXG5cdFx0XHR5ZWFyOiBbXCJ5XCIsIFwieXlcIl0sXG5cdFx0XHRob3VyczogW1wiaFwiLCBcImhoXCJdLFxuXHRcdFx0bWludXRlczogW1wibVwiLCBcIm1tXCJdLFxuXHRcdFx0c2Vjb25kczogW1wic1wiLCBcInNzXCJdLFxuXHRcdFx0XCJhbS1wbVwiOiBbXCJBL1BcIiwgXCJBTS9QTVwiXSxcblx0XHRcdFwiZGF5LW9mLXdlZWtcIjogW1wiZGRkXCIsIFwiZGRkZFwiXVxuXHRcdH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcGN4KGQsIF9vcHRzKSB7XG5cdFx0XHR2YXIgb3B0cyA9IF9vcHRzIHx8IHt9O1xuXHRcdFx0aWYoREVOU0UgIT0gbnVsbCAmJiBvcHRzLmRlbnNlID09IG51bGwpIG9wdHMuZGVuc2UgPSBERU5TRTtcblx0XHRcdHZhciBzdHIgPSB4bG1sX25vcm1hbGl6ZShkKTtcblx0XHRcdHZhciBzdGF0ZSA9IFtdLCB0bXA7XG5cdFx0XHR2YXIgdGFnO1xuXHRcdFx0dmFyIE5GdGFnID0ge25hbWU6XCJcIn0sIE5GID0gXCJcIiwgcGlkeCA9IDA7XG5cdFx0XHR2YXIgc2hlZXRhZztcblx0XHRcdHZhciByb3d0YWc7XG5cdFx0XHR2YXIgU2hlZXRzID0ge30sIFNoZWV0TmFtZXMgPSBbXTtcblx0XHRcdHZhciB3cyA9IG9wdHMuZGVuc2UgPyAoW10pIDogKHt9KTtcblx0XHRcdHZhciBSbiwgcTtcblx0XHRcdHZhciBjdGFnID0ge3ZhbHVlOlwiXCJ9O1xuXHRcdFx0dmFyIHRleHRwID0gXCJcIiwgdGV4dHBpZHggPSAwLCB0ZXh0cHRhZztcblx0XHRcdHZhciBSID0gLTEsIEMgPSAtMSwgcmFuZ2UgPSB7czoge3I6MTAwMDAwMCxjOjEwMDAwMDAwfSwgZToge3I6MCwgYzowfX07XG5cdFx0XHR2YXIgbnVtYmVyX2Zvcm1hdF9tYXAgPSB7fTtcblx0XHRcdHZhciBtZXJnZXMgPSBbXSwgbXJhbmdlID0ge30sIG1SID0gMCwgbUMgPSAwO1xuXHRcdFx0dmFyIGFycmF5ZiA9IFtdO1xuXHRcdFx0dmFyIGNvbW1lbnRzID0gW10sIGNvbW1lbnQgPSB7fTtcblx0XHRcdHZhciBjcmVhdG9yID0gXCJcIiwgY3JlYXRvcmlkeCA9IDA7XG5cdFx0XHR2YXIgcmVwdCA9IDEsIGlzc3R1YiA9IGZhbHNlO1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0eGxtbHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG5cdFx0XHRzdHIgPSBzdHIucmVwbGFjZSgvPCEtLShbXlxcdTI2MDNdKj8pLS0+L21nLFwiXCIpLnJlcGxhY2UoLzwhRE9DVFlQRVteXFxbXSpcXFtbXlxcXV0qXFxdPi9nbSxcIlwiKTtcblx0XHRcdHdoaWxlKChSbiA9IHhsbWxyZWdleC5leGVjKHN0cikpKSBzd2l0Y2goKFJuWzNdPVJuWzNdLnJlcGxhY2UoL18uKiQvLFwiXCIpKSkge1xuXG5cdFx0XHRcdGNhc2UgJ3RhYmxlJzogY2FzZSAn5bel5L2c6KGoJzogLy8gOS4xLjIgPHRhYmxlOnRhYmxlPlxuXHRcdFx0XHRcdGlmKFJuWzFdPT09Jy8nKSB7XG5cdFx0XHRcdFx0XHRpZihyYW5nZS5lLmMgPj0gcmFuZ2Uucy5jICYmIHJhbmdlLmUuciA+PSByYW5nZS5zLnIpIHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdFx0XHRcdFx0aWYobWVyZ2VzLmxlbmd0aCkgd3NbJyFtZXJnZXMnXSA9IG1lcmdlcztcblx0XHRcdFx0XHRcdHNoZWV0YWcubmFtZSA9IHV0ZjhyZWFkKHNoZWV0YWdbJ+WQjeensCddIHx8IHNoZWV0YWcubmFtZSk7XG5cdFx0XHRcdFx0XHRTaGVldE5hbWVzLnB1c2goc2hlZXRhZy5uYW1lKTtcblx0XHRcdFx0XHRcdFNoZWV0c1tzaGVldGFnLm5hbWVdID0gd3M7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7XG5cdFx0XHRcdFx0XHRzaGVldGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRcdFIgPSBDID0gLTE7XG5cdFx0XHRcdFx0XHRyYW5nZS5zLnIgPSByYW5nZS5zLmMgPSAxMDAwMDAwMDsgcmFuZ2UuZS5yID0gcmFuZ2UuZS5jID0gMDtcblx0XHRcdFx0XHRcdHdzID0gb3B0cy5kZW5zZSA/IChbXSkgOiAoe30pOyBtZXJnZXMgPSBbXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndGFibGUtcm93JzogY2FzZSAn6KGMJzogLy8gOS4xLjMgPHRhYmxlOnRhYmxlLXJvdz5cblx0XHRcdFx0XHRpZihSblsxXSA9PT0gJy8nKSBicmVhaztcblx0XHRcdFx0XHRyb3d0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdGlmKHJvd3RhZ1sn6KGM5Y+3J10pIFIgPSByb3d0YWdbJ+ihjOWPtyddIC0gMTsgZWxzZSArK1I7XG5cdFx0XHRcdFx0QyA9IC0xOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnY292ZXJlZC10YWJsZS1jZWxsJzogLy8gOS4xLjUgPHRhYmxlOmNvdmVyZWQtdGFibGUtY2VsbD5cblx0XHRcdFx0XHQrK0M7XG5cdFx0XHRcdFx0aWYob3B0cy5zaGVldFN0dWJzKSB7XG5cdFx0XHRcdFx0XHRpZihvcHRzLmRlbnNlKSB7IGlmKCF3c1tSXSkgd3NbUl0gPSBbXTsgd3NbUl1bQ10gPSB7dDoneid9OyB9XG5cdFx0XHRcdFx0XHRlbHNlIHdzW2VuY29kZV9jZWxsKHtyOlIsYzpDfSldID0ge3Q6J3onfTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7IC8qIHN0dWIgKi9cblx0XHRcdFx0Y2FzZSAndGFibGUtY2VsbCc6IGNhc2UgJ+aVsOaNric6XG5cdFx0XHRcdFx0aWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSA9PT0gJy8nKSB7XG5cdFx0XHRcdFx0XHRjdGFnID0gcGFyc2V4bWx0YWcoUm5bMF0sIGZhbHNlKTtcblx0XHRcdFx0XHRcdGlmKGN0YWdbJ251bWJlci1jb2x1bW5zLXJlcGVhdGVkJ10pIEMrPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1yZXBlYXRlZCddLCAxMCk7XG5cdFx0XHRcdFx0XHRlbHNlICsrQztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZihSblsxXSE9PScvJykge1xuXHRcdFx0XHRcdFx0KytDO1xuXHRcdFx0XHRcdFx0cmVwdCA9IDE7XG5cdFx0XHRcdFx0XHRpZihDID4gcmFuZ2UuZS5jKSByYW5nZS5lLmMgPSBDO1xuXHRcdFx0XHRcdFx0aWYoUiA+IHJhbmdlLmUucikgcmFuZ2UuZS5yID0gUjtcblx0XHRcdFx0XHRcdGlmKEMgPCByYW5nZS5zLmMpIHJhbmdlLnMuYyA9IEM7XG5cdFx0XHRcdFx0XHRpZihSIDwgcmFuZ2Uucy5yKSByYW5nZS5zLnIgPSBSO1xuXHRcdFx0XHRcdFx0Y3RhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRjb21tZW50cyA9IFtdOyBjb21tZW50ID0ge307XG5cdFx0XHRcdFx0XHRxID0gKHt0OmN0YWdbJ+aVsOaNruexu+WeiyddIHx8IGN0YWdbJ3ZhbHVlLXR5cGUnXSwgdjpudWxsfSk7XG5cdFx0XHRcdFx0XHRpZihvcHRzLmNlbGxGb3JtdWxhKSB7XG5cdFx0XHRcdFx0XHRcdGlmKGN0YWcuZm9ybXVsYSkgY3RhZy5mb3JtdWxhID0gdW5lc2NhcGV4bWwoY3RhZy5mb3JtdWxhKTtcblx0XHRcdFx0XHRcdFx0aWYoY3RhZ1snbnVtYmVyLW1hdHJpeC1jb2x1bW5zLXNwYW5uZWQnXSAmJiBjdGFnWydudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddKSB7XG5cdFx0XHRcdFx0XHRcdFx0bVIgPSBwYXJzZUludChjdGFnWydudW1iZXItbWF0cml4LXJvd3Mtc3Bhbm5lZCddLDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRcdG1DID0gcGFyc2VJbnQoY3RhZ1snbnVtYmVyLW1hdHJpeC1jb2x1bW5zLXNwYW5uZWQnXSwxMCkgfHwgMDtcblx0XHRcdFx0XHRcdFx0XHRtcmFuZ2UgPSB7czoge3I6UixjOkN9LCBlOntyOlIgKyBtUi0xLGM6QyArIG1DLTF9fTtcblx0XHRcdFx0XHRcdFx0XHRxLkYgPSBlbmNvZGVfcmFuZ2UobXJhbmdlKTtcblx0XHRcdFx0XHRcdFx0XHRhcnJheWYucHVzaChbbXJhbmdlLCBxLkZdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZihjdGFnLmZvcm11bGEpIHEuZiA9IG9kc190b19jc2ZfZm9ybXVsYShjdGFnLmZvcm11bGEpO1xuXHRcdFx0XHRcdFx0XHRlbHNlIGZvcihpID0gMDsgaSA8IGFycmF5Zi5sZW5ndGg7ICsraSlcblx0XHRcdFx0XHRcdFx0XHRpZihSID49IGFycmF5ZltpXVswXS5zLnIgJiYgUiA8PSBhcnJheWZbaV1bMF0uZS5yKVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYoQyA+PSBhcnJheWZbaV1bMF0ucy5jICYmIEMgPD0gYXJyYXlmW2ldWzBdLmUuYylcblx0XHRcdFx0XHRcdFx0XHRcdFx0cS5GID0gYXJyYXlmW2ldWzFdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoY3RhZ1snbnVtYmVyLWNvbHVtbnMtc3Bhbm5lZCddIHx8IGN0YWdbJ251bWJlci1yb3dzLXNwYW5uZWQnXSkge1xuXHRcdFx0XHRcdFx0XHRtUiA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1yb3dzLXNwYW5uZWQnXSwxMCkgfHwgMDtcblx0XHRcdFx0XHRcdFx0bUMgPSBwYXJzZUludChjdGFnWydudW1iZXItY29sdW1ucy1zcGFubmVkJ10sMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRcdG1yYW5nZSA9IHtzOiB7cjpSLGM6Q30sIGU6e3I6UiArIG1SLTEsYzpDICsgbUMtMX19O1xuXHRcdFx0XHRcdFx0XHRtZXJnZXMucHVzaChtcmFuZ2UpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvKiAxOS42NzUuMiB0YWJsZTpudW1iZXItY29sdW1ucy1yZXBlYXRlZCAqL1xuXHRcdFx0XHRcdFx0aWYoY3RhZ1snbnVtYmVyLWNvbHVtbnMtcmVwZWF0ZWQnXSkgcmVwdCA9IHBhcnNlSW50KGN0YWdbJ251bWJlci1jb2x1bW5zLXJlcGVhdGVkJ10sIDEwKTtcblxuXHRcdFx0XHRcdFx0LyogMTkuMzg1IG9mZmljZTp2YWx1ZS10eXBlICovXG5cdFx0XHRcdFx0XHRzd2l0Y2gocS50KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2Jvb2xlYW4nOiBxLnQgPSAnYic7IHEudiA9IHBhcnNleG1sYm9vbChjdGFnWydib29sZWFuLXZhbHVlJ10pOyBicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnZmxvYXQnOiBxLnQgPSAnbic7IHEudiA9IHBhcnNlRmxvYXQoY3RhZy52YWx1ZSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdwZXJjZW50YWdlJzogcS50ID0gJ24nOyBxLnYgPSBwYXJzZUZsb2F0KGN0YWcudmFsdWUpOyBicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnY3VycmVuY3knOiBxLnQgPSAnbic7IHEudiA9IHBhcnNlRmxvYXQoY3RhZy52YWx1ZSk7IGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICdkYXRlJzogcS50ID0gJ2QnOyBxLnYgPSBwYXJzZURhdGUoY3RhZ1snZGF0ZS12YWx1ZSddKTtcblx0XHRcdFx0XHRcdFx0XHRpZighb3B0cy5jZWxsRGF0ZXMpIHsgcS50ID0gJ24nOyBxLnYgPSBkYXRlbnVtKHEudik7IH1cblx0XHRcdFx0XHRcdFx0XHRxLnogPSAnbS9kL3l5JzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3RpbWUnOiBxLnQgPSAnbic7IHEudiA9IHBhcnNlX2lzb2R1cihjdGFnWyd0aW1lLXZhbHVlJ10pLzg2NDAwOyBicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJzogcS50ID0gJ24nOyBxLnYgPSBwYXJzZUZsb2F0KGN0YWdbJ+aVsOaNruaVsOWAvCddKTsgYnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0aWYocS50ID09PSAnc3RyaW5nJyB8fCBxLnQgPT09ICd0ZXh0JyB8fCAhcS50KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRxLnQgPSAncyc7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZihjdGFnWydzdHJpbmctdmFsdWUnXSAhPSBudWxsKSB0ZXh0cCA9IHVuZXNjYXBleG1sKGN0YWdbJ3N0cmluZy12YWx1ZSddKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCB2YWx1ZSB0eXBlICcgKyBxLnQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpc3N0dWIgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGlmKHEudCA9PT0gJ3MnKSB7XG5cdFx0XHRcdFx0XHRcdHEudiA9IHRleHRwIHx8ICcnO1xuXHRcdFx0XHRcdFx0XHRpc3N0dWIgPSB0ZXh0cGlkeCA9PSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoY29tbWVudHMubGVuZ3RoID4gMCkgeyBxLmMgPSBjb21tZW50czsgY29tbWVudHMgPSBbXTsgfVxuXHRcdFx0XHRcdFx0aWYodGV4dHAgJiYgb3B0cy5jZWxsVGV4dCAhPT0gZmFsc2UpIHEudyA9IHRleHRwO1xuXHRcdFx0XHRcdFx0aWYoIWlzc3R1YiB8fCBvcHRzLnNoZWV0U3R1YnMpIHtcblx0XHRcdFx0XHRcdFx0aWYoIShvcHRzLnNoZWV0Um93cyAmJiBvcHRzLnNoZWV0Um93cyA8IFIpKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYob3B0cy5kZW5zZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYoIXdzW1JdKSB3c1tSXSA9IFtdO1xuXHRcdFx0XHRcdFx0XHRcdFx0d3NbUl1bQ10gPSBxO1xuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUoLS1yZXB0ID4gMCkgd3NbUl1bKytDXSA9IGR1cChxKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0d3NbZW5jb2RlX2NlbGwoe3I6UixjOkN9KV0gPSBxO1xuXHRcdFx0XHRcdFx0XHRcdFx0d2hpbGUoLS1yZXB0ID4gMCkgd3NbZW5jb2RlX2NlbGwoe3I6UixjOisrQ30pXSA9IGR1cChxKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYocmFuZ2UuZS5jIDw9IEMpIHJhbmdlLmUuYyA9IEM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7IEMgKz0gcmVwdDsgcmVwdCA9IDA7IH1cblx0XHRcdFx0XHRcdHEgPSB7fTtcblx0XHRcdFx0XHRcdHRleHRwID0gXCJcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7IC8vIDkuMS40IDx0YWJsZTp0YWJsZS1jZWxsPlxuXG5cdFx0XHRcdC8qIHB1cmUgc3RhdGUgKi9cblx0XHRcdFx0Y2FzZSAnZG9jdW1lbnQnOiAvLyBUT0RPOiA8b2ZmaWNlOmRvY3VtZW50PiBpcyB0aGUgcm9vdCBmb3IgRk9EU1xuXHRcdFx0XHRjYXNlICdkb2N1bWVudC1jb250ZW50JzogY2FzZSAn55S15a2Q6KGo5qC85paH5qGjJzogLy8gMy4xLjMuMiA8b2ZmaWNlOmRvY3VtZW50LWNvbnRlbnQ+XG5cdFx0XHRcdGNhc2UgJ3NwcmVhZHNoZWV0JzogY2FzZSAn5Li75L2TJzogLy8gMy43IDxvZmZpY2U6c3ByZWFkc2hlZXQ+XG5cdFx0XHRcdGNhc2UgJ3NjcmlwdHMnOiAvLyAzLjEyIDxvZmZpY2U6c2NyaXB0cz5cblx0XHRcdFx0Y2FzZSAnc3R5bGVzJzogLy8gVE9ETyA8b2ZmaWNlOnN0eWxlcz5cblx0XHRcdFx0Y2FzZSAnZm9udC1mYWNlLWRlY2xzJzogLy8gMy4xNCA8b2ZmaWNlOmZvbnQtZmFjZS1kZWNscz5cblx0XHRcdFx0XHRpZihSblsxXT09PScvJyl7aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgXCJCYWQgc3RhdGU6IFwiK3RtcDt9XG5cdFx0XHRcdFx0ZWxzZSBpZihSblswXS5jaGFyQXQoUm5bMF0ubGVuZ3RoLTIpICE9PSAnLycpIHN0YXRlLnB1c2goW1JuWzNdLCB0cnVlXSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYW5ub3RhdGlvbic6IC8vIDE0LjEgPG9mZmljZTphbm5vdGF0aW9uPlxuXHRcdFx0XHRcdGlmKFJuWzFdPT09Jy8nKXtcblx0XHRcdFx0XHRcdGlmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IFwiQmFkIHN0YXRlOiBcIit0bXA7XG5cdFx0XHRcdFx0XHRjb21tZW50LnQgPSB0ZXh0cDtcblx0XHRcdFx0XHRcdGNvbW1lbnQuYSA9IGNyZWF0b3I7XG5cdFx0XHRcdFx0XHRjb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmKFJuWzBdLmNoYXJBdChSblswXS5sZW5ndGgtMikgIT09ICcvJykge3N0YXRlLnB1c2goW1JuWzNdLCBmYWxzZV0pO31cblx0XHRcdFx0XHRjcmVhdG9yID0gXCJcIjsgY3JlYXRvcmlkeCA9IDA7XG5cdFx0XHRcdFx0dGV4dHAgPSBcIlwiOyB0ZXh0cGlkeCA9IDA7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnY3JlYXRvcic6IC8vIDQuMy4yLjcgPGRjOmNyZWF0b3I+XG5cdFx0XHRcdFx0aWYoUm5bMV09PT0nLycpIHsgY3JlYXRvciA9IHN0ci5zbGljZShjcmVhdG9yaWR4LFJuLmluZGV4KTsgfVxuXHRcdFx0XHRcdGVsc2UgY3JlYXRvcmlkeCA9IFJuLmluZGV4ICsgUm5bMF0ubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIGlnbm9yZSBzdGF0ZSAqL1xuXHRcdFx0XHRjYXNlICdtZXRhJzogY2FzZSAn5YWD5pWw5o2uJzogLy8gVE9ETzogPG9mZmljZTptZXRhPiA8dW9mOuWFg+aVsOaNrj4gRk9EUy9VT0Zcblx0XHRcdFx0Y2FzZSAnc2V0dGluZ3MnOiAvLyBUT0RPOiA8b2ZmaWNlOnNldHRpbmdzPlxuXHRcdFx0XHRjYXNlICdjb25maWctaXRlbS1zZXQnOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLXNldD5cblx0XHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0tbWFwLWluZGV4ZWQnOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLW1hcC1pbmRleGVkPlxuXHRcdFx0XHRjYXNlICdjb25maWctaXRlbS1tYXAtZW50cnknOiAvLyBUT0RPOiA8b2ZmaWNlOmNvbmZpZy1pdGVtLW1hcC1lbnRyeT5cblx0XHRcdFx0Y2FzZSAnY29uZmlnLWl0ZW0tbWFwLW5hbWVkJzogLy8gVE9ETzogPG9mZmljZTpjb25maWctaXRlbS1tYXAtZW50cnk+XG5cdFx0XHRcdGNhc2UgJ3NoYXBlcyc6IC8vIDkuMi44IDx0YWJsZTpzaGFwZXM+XG5cdFx0XHRcdGNhc2UgJ2ZyYW1lJzogLy8gMTAuNC4yIDxkcmF3OmZyYW1lPlxuXHRcdFx0XHRjYXNlICd0ZXh0LWJveCc6IC8vIDEwLjQuMyA8ZHJhdzp0ZXh0LWJveD5cblx0XHRcdFx0Y2FzZSAnaW1hZ2UnOiAvLyAxMC40LjQgPGRyYXc6aW1hZ2U+XG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtdGFibGVzJzogLy8gOS42LjIgPHRhYmxlOmRhdGEtcGlsb3QtdGFibGVzPlxuXHRcdFx0XHRjYXNlICdsaXN0LXN0eWxlJzogLy8gMTYuMzAgPHRleHQ6bGlzdC1zdHlsZT5cblx0XHRcdFx0Y2FzZSAnZm9ybSc6IC8vIDEzLjEzIDxmb3JtOmZvcm0+XG5cdFx0XHRcdGNhc2UgJ2RkZS1saW5rcyc6IC8vIDkuOCA8dGFibGU6ZGRlLWxpbmtzPlxuXHRcdFx0XHRjYXNlICdldmVudC1saXN0ZW5lcnMnOiAvLyBUT0RPXG5cdFx0XHRcdFx0aWYoUm5bMV09PT0nLycpe2lmKCh0bXA9c3RhdGUucG9wKCkpWzBdIT09Um5bM10pIHRocm93IFwiQmFkIHN0YXRlOiBcIit0bXA7fVxuXHRcdFx0XHRcdGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSBzdGF0ZS5wdXNoKFtSblszXSwgZmFsc2VdKTtcblx0XHRcdFx0XHR0ZXh0cCA9IFwiXCI7IHRleHRwaWR4ID0gMDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdzY2llbnRpZmljLW51bWJlcic6IC8vIFRPRE86IDxudW1iZXI6c2NpZW50aWZpYy1udW1iZXI+XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2N1cnJlbmN5LXN5bWJvbCc6IC8vIFRPRE86IDxudW1iZXI6Y3VycmVuY3ktc3ltYm9sPlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdjdXJyZW5jeS1zdHlsZSc6IC8vIFRPRE86IDxudW1iZXI6Y3VycmVuY3ktc3R5bGU+XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ251bWJlci1zdHlsZSc6IC8vIDE2LjI3LjIgPG51bWJlcjpudW1iZXItc3R5bGU+XG5cdFx0XHRcdGNhc2UgJ3BlcmNlbnRhZ2Utc3R5bGUnOiAvLyAxNi4yNy45IDxudW1iZXI6cGVyY2VudGFnZS1zdHlsZT5cblx0XHRcdFx0Y2FzZSAnZGF0ZS1zdHlsZSc6IC8vIDE2LjI3LjEwIDxudW1iZXI6ZGF0ZS1zdHlsZT5cblx0XHRcdFx0Y2FzZSAndGltZS1zdHlsZSc6IC8vIDE2LjI3LjE4IDxudW1iZXI6dGltZS1zdHlsZT5cblx0XHRcdFx0XHRpZihSblsxXT09PScvJyl7XG5cdFx0XHRcdFx0XHRudW1iZXJfZm9ybWF0X21hcFtORnRhZy5uYW1lXSA9IE5GO1xuXHRcdFx0XHRcdFx0aWYoKHRtcD1zdGF0ZS5wb3AoKSlbMF0hPT1SblszXSkgdGhyb3cgXCJCYWQgc3RhdGU6IFwiK3RtcDtcblx0XHRcdFx0XHR9IGVsc2UgaWYoUm5bMF0uY2hhckF0KFJuWzBdLmxlbmd0aC0yKSAhPT0gJy8nKSB7XG5cdFx0XHRcdFx0XHRORiA9IFwiXCI7XG5cdFx0XHRcdFx0XHRORnRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRzdGF0ZS5wdXNoKFtSblszXSwgdHJ1ZV0pO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnc2NyaXB0JzogYnJlYWs7IC8vIDMuMTMgPG9mZmljZTpzY3JpcHQ+XG5cdFx0XHRcdGNhc2UgJ2xpYnJhcmllcyc6IGJyZWFrOyAvLyBUT0RPOiA8b29vOmxpYnJhcmllcz5cblx0XHRcdFx0Y2FzZSAnYXV0b21hdGljLXN0eWxlcyc6IGJyZWFrOyAvLyAzLjE1LjMgPG9mZmljZTphdXRvbWF0aWMtc3R5bGVzPlxuXHRcdFx0XHRjYXNlICdtYXN0ZXItc3R5bGVzJzogYnJlYWs7IC8vIFRPRE86IDxvZmZpY2U6YXV0b21hdGljLXN0eWxlcz5cblxuXHRcdFx0XHRjYXNlICdkZWZhdWx0LXN0eWxlJzogLy8gVE9ETzogPHN0eWxlOmRlZmF1bHQtc3R5bGU+XG5cdFx0XHRcdGNhc2UgJ3BhZ2UtbGF5b3V0JzogYnJlYWs7IC8vIFRPRE86IDxzdHlsZTpwYWdlLWxheW91dD5cblx0XHRcdFx0Y2FzZSAnc3R5bGUnOiBicmVhazsgLy8gMTYuMiA8c3R5bGU6c3R5bGU+XG5cdFx0XHRcdGNhc2UgJ21hcCc6IGJyZWFrOyAvLyAxNi4zIDxzdHlsZTptYXA+XG5cdFx0XHRcdGNhc2UgJ2ZvbnQtZmFjZSc6IGJyZWFrOyAvLyAxNi4yMSA8c3R5bGU6Zm9udC1mYWNlPlxuXG5cdFx0XHRcdGNhc2UgJ3BhcmFncmFwaC1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjYgPHN0eWxlOnBhcmFncmFwaC1wcm9wZXJ0aWVzPlxuXHRcdFx0XHRjYXNlICd0YWJsZS1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjE1IDxzdHlsZTp0YWJsZS1wcm9wZXJ0aWVzPlxuXHRcdFx0XHRjYXNlICd0YWJsZS1jb2x1bW4tcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4xNiA8c3R5bGU6dGFibGUtY29sdW1uLXByb3BlcnRpZXM+XG5cdFx0XHRcdGNhc2UgJ3RhYmxlLXJvdy1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjE3IDxzdHlsZTp0YWJsZS1yb3ctcHJvcGVydGllcz5cblx0XHRcdFx0Y2FzZSAndGFibGUtY2VsbC1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE3LjE4IDxzdHlsZTp0YWJsZS1jZWxsLXByb3BlcnRpZXM+XG5cblx0XHRcdFx0Y2FzZSAnbnVtYmVyJzogLy8gMTYuMjcuMyA8bnVtYmVyOm51bWJlcj5cblx0XHRcdFx0XHRzd2l0Y2goc3RhdGVbc3RhdGUubGVuZ3RoLTFdWzBdKSB7XG5cdFx0XHRcdFx0XHRjYXNlICd0aW1lLXN0eWxlJzpcblx0XHRcdFx0XHRcdGNhc2UgJ2RhdGUtc3R5bGUnOlxuXHRcdFx0XHRcdFx0XHR0YWcgPSBwYXJzZXhtbHRhZyhSblswXSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRORiArPSBudW1iZXJfZm9ybWF0c1tSblszXV1bdGFnLnN0eWxlPT09J2xvbmcnPzE6MF07IGJyZWFrO1xuXHRcdFx0XHRcdH0gYnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnZnJhY3Rpb24nOiBicmVhazsgLy8gVE9ETyAxNi4yNy42IDxudW1iZXI6ZnJhY3Rpb24+XG5cblx0XHRcdFx0Y2FzZSAnZGF5JzogLy8gMTYuMjcuMTEgPG51bWJlcjpkYXk+XG5cdFx0XHRcdGNhc2UgJ21vbnRoJzogLy8gMTYuMjcuMTIgPG51bWJlcjptb250aD5cblx0XHRcdFx0Y2FzZSAneWVhcic6IC8vIDE2LjI3LjEzIDxudW1iZXI6eWVhcj5cblx0XHRcdFx0Y2FzZSAnZXJhJzogLy8gMTYuMjcuMTQgPG51bWJlcjplcmE+XG5cdFx0XHRcdGNhc2UgJ2RheS1vZi13ZWVrJzogLy8gMTYuMjcuMTUgPG51bWJlcjpkYXktb2Ytd2Vlaz5cblx0XHRcdFx0Y2FzZSAnd2Vlay1vZi15ZWFyJzogLy8gMTYuMjcuMTYgPG51bWJlcjp3ZWVrLW9mLXllYXI+XG5cdFx0XHRcdGNhc2UgJ3F1YXJ0ZXInOiAvLyAxNi4yNy4xNyA8bnVtYmVyOnF1YXJ0ZXI+XG5cdFx0XHRcdGNhc2UgJ2hvdXJzJzogLy8gMTYuMjcuMTkgPG51bWJlcjpob3Vycz5cblx0XHRcdFx0Y2FzZSAnbWludXRlcyc6IC8vIDE2LjI3LjIwIDxudW1iZXI6bWludXRlcz5cblx0XHRcdFx0Y2FzZSAnc2Vjb25kcyc6IC8vIDE2LjI3LjIxIDxudW1iZXI6c2Vjb25kcz5cblx0XHRcdFx0Y2FzZSAnYW0tcG0nOiAvLyAxNi4yNy4yMiA8bnVtYmVyOmFtLXBtPlxuXHRcdFx0XHRcdHN3aXRjaChzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ3RpbWUtc3R5bGUnOlxuXHRcdFx0XHRcdFx0Y2FzZSAnZGF0ZS1zdHlsZSc6XG5cdFx0XHRcdFx0XHRcdHRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdE5GICs9IG51bWJlcl9mb3JtYXRzW1JuWzNdXVt0YWcuc3R5bGU9PT0nbG9uZyc/MTowXTsgYnJlYWs7XG5cdFx0XHRcdFx0fSBicmVhaztcblxuXHRcdFx0XHRjYXNlICdib29sZWFuLXN0eWxlJzogYnJlYWs7IC8vIDE2LjI3LjIzIDxudW1iZXI6Ym9vbGVhbi1zdHlsZT5cblx0XHRcdFx0Y2FzZSAnYm9vbGVhbic6IGJyZWFrOyAvLyAxNi4yNy4yNCA8bnVtYmVyOmJvb2xlYW4+XG5cdFx0XHRcdGNhc2UgJ3RleHQtc3R5bGUnOiBicmVhazsgLy8gMTYuMjcuMjUgPG51bWJlcjp0ZXh0LXN0eWxlPlxuXHRcdFx0XHRjYXNlICd0ZXh0JzogLy8gMTYuMjcuMjYgPG51bWJlcjp0ZXh0PlxuXHRcdFx0XHRcdGlmKFJuWzBdLnNsaWNlKC0yKSA9PT0gXCIvPlwiKSBicmVhaztcblx0XHRcdFx0XHRlbHNlIGlmKFJuWzFdPT09XCIvXCIpIHN3aXRjaChzdGF0ZVtzdGF0ZS5sZW5ndGgtMV1bMF0pIHtcblx0XHRcdFx0XHRcdGNhc2UgJ251bWJlci1zdHlsZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdkYXRlLXN0eWxlJzpcblx0XHRcdFx0XHRcdGNhc2UgJ3RpbWUtc3R5bGUnOlxuXHRcdFx0XHRcdFx0XHRORiArPSBzdHIuc2xpY2UocGlkeCwgUm4uaW5kZXgpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3RleHQtY29udGVudCc6IGJyZWFrOyAvLyAxNi4yNy4yNyA8bnVtYmVyOnRleHQtY29udGVudD5cblx0XHRcdFx0Y2FzZSAndGV4dC1wcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDE2LjI3LjI3IDxzdHlsZTp0ZXh0LXByb3BlcnRpZXM+XG5cblx0XHRcdFx0Y2FzZSAnYm9keSc6IGNhc2UgJ+eUteWtkOihqOagvCc6IGJyZWFrOyAvLyAzLjMgMTYuOS42IDE5LjcyNi4zXG5cblx0XHRcdFx0Y2FzZSAnZm9ybXMnOiBicmVhazsgLy8gMTIuMjUuMiAxMy4yXG5cdFx0XHRcdGNhc2UgJ3RhYmxlLWNvbHVtbic6IGJyZWFrOyAvLyA5LjEuNiA8dGFibGU6dGFibGUtY29sdW1uPlxuXG5cdFx0XHRcdGNhc2UgJ251bGwtZGF0ZSc6IGJyZWFrOyAvLyA5LjQuMiA8dGFibGU6bnVsbC1kYXRlPiBUT0RPOiBkYXRlMTkwNFxuXG5cdFx0XHRcdGNhc2UgJ2dyYXBoaWMtcHJvcGVydGllcyc6IGJyZWFrOyAvLyAxNy4yMSA8c3R5bGU6Z3JhcGhpYy1wcm9wZXJ0aWVzPlxuXHRcdFx0XHRjYXNlICdjYWxjdWxhdGlvbi1zZXR0aW5ncyc6IGJyZWFrOyAvLyA5LjQuMSA8dGFibGU6Y2FsY3VsYXRpb24tc2V0dGluZ3M+XG5cdFx0XHRcdGNhc2UgJ25hbWVkLWV4cHJlc3Npb25zJzogYnJlYWs7IC8vIDkuNC4xMSA8dGFibGU6bmFtZWQtZXhwcmVzc2lvbnM+XG5cdFx0XHRcdGNhc2UgJ25hbWVkLXJhbmdlJzogYnJlYWs7IC8vIDkuNC4xMiA8dGFibGU6bmFtZWQtcmFuZ2U+XG5cdFx0XHRcdGNhc2UgJ25hbWVkLWV4cHJlc3Npb24nOiBicmVhazsgLy8gOS40LjEzIDx0YWJsZTpuYW1lZC1leHByZXNzaW9uPlxuXHRcdFx0XHRjYXNlICdzb3J0JzogYnJlYWs7IC8vIDkuNC4xOSA8dGFibGU6c29ydD5cblx0XHRcdFx0Y2FzZSAnc29ydC1ieSc6IGJyZWFrOyAvLyA5LjQuMjAgPHRhYmxlOnNvcnQtYnk+XG5cdFx0XHRcdGNhc2UgJ3NvcnQtZ3JvdXBzJzogYnJlYWs7IC8vIDkuNC4yMiA8dGFibGU6c29ydC1ncm91cHM+XG5cblx0XHRcdFx0Y2FzZSAnc3Bhbic6IGJyZWFrOyAvLyA8dGV4dDpzcGFuPlxuXHRcdFx0XHRjYXNlICdsaW5lLWJyZWFrJzogYnJlYWs7IC8vIDYuMS41IDx0ZXh0OmxpbmUtYnJlYWs+XG5cdFx0XHRcdGNhc2UgJ3AnOiBjYXNlICfmlofmnKzkuLInOlxuXHRcdFx0XHRcdGlmKFJuWzFdPT09Jy8nKSB0ZXh0cCA9ICh0ZXh0cC5sZW5ndGggPiAwID8gdGV4dHAgKyBcIlxcblwiIDogXCJcIikgKyBwYXJzZV90ZXh0X3Aoc3RyLnNsaWNlKHRleHRwaWR4LFJuLmluZGV4KSwgdGV4dHB0YWcpO1xuXHRcdFx0XHRcdGVsc2UgeyB0ZXh0cHRhZyA9IHBhcnNleG1sdGFnKFJuWzBdLCBmYWxzZSk7IHRleHRwaWR4ID0gUm4uaW5kZXggKyBSblswXS5sZW5ndGg7IH1cblx0XHRcdFx0XHRicmVhazsgLy8gPHRleHQ6cD5cblxuXHRcdFx0XHRjYXNlICdkYXRhYmFzZS1yYW5nZSc6IC8vIDkuNC4xNSA8dGFibGU6ZGF0YWJhc2UtcmFuZ2U+XG5cdFx0XHRcdFx0aWYoUm5bMV09PT0nLycpIGJyZWFrO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHR2YXIgQXV0b0ZpbHRlciA9IG9kc190b19jc2ZfcmFuZ2VfM0QocGFyc2V4bWx0YWcoUm5bMF0pWyd0YXJnZXQtcmFuZ2UtYWRkcmVzcyddKTtcblx0XHRcdFx0XHRcdFNoZWV0c1tBdXRvRmlsdGVyWzBdXVsnIWF1dG9maWx0ZXInXSA9IHsgcmVmOiBBdXRvRmlsdGVyWzFdIH07XG5cdFx0XHRcdFx0fSBjYXRjaChlKSB7LyogZW1wdHkgKi99XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAncyc6IGJyZWFrOyAvLyA8dGV4dDpzPlxuXHRcdFx0XHRjYXNlICdkYXRlJzogYnJlYWs7IC8vIDwqOmRhdGU+XG5cblx0XHRcdFx0Y2FzZSAnb2JqZWN0JzogYnJlYWs7IC8vIDEwLjQuNi4yIDxkcmF3Om9iamVjdD5cblx0XHRcdFx0Y2FzZSAndGl0bGUnOiBjYXNlICfmoIfpopgnOiBicmVhazsgLy8gPCo6dGl0bGU+IE9SIDx1b2Y65qCH6aKYPlxuXHRcdFx0XHRjYXNlICdkZXNjJzogYnJlYWs7IC8vIDwqOmRlc2M+XG5cblx0XHRcdFx0Y2FzZSAndGFibGUtc291cmNlJzogYnJlYWs7IC8vIDkuMi42XG5cblx0XHRcdFx0Y2FzZSAnaXRlcmF0aW9uJzogYnJlYWs7IC8vIDkuNC4zIDx0YWJsZTppdGVyYXRpb24+XG5cdFx0XHRcdGNhc2UgJ2NvbnRlbnQtdmFsaWRhdGlvbnMnOiBicmVhazsgLy8gOS40LjQgPHRhYmxlOlxuXHRcdFx0XHRjYXNlICdjb250ZW50LXZhbGlkYXRpb24nOiBicmVhazsgLy8gOS40LjUgPHRhYmxlOlxuXHRcdFx0XHRjYXNlICdlcnJvci1tZXNzYWdlJzogYnJlYWs7IC8vIDkuNC43IDx0YWJsZTpcblx0XHRcdFx0Y2FzZSAnZGF0YWJhc2UtcmFuZ2VzJzogYnJlYWs7IC8vIDkuNC4xNCA8dGFibGU6ZGF0YWJhc2UtcmFuZ2VzPlxuXHRcdFx0XHRjYXNlICdmaWx0ZXInOiBicmVhazsgLy8gOS41LjIgPHRhYmxlOmZpbHRlcj5cblx0XHRcdFx0Y2FzZSAnZmlsdGVyLWFuZCc6IGJyZWFrOyAvLyA5LjUuMyA8dGFibGU6ZmlsdGVyLWFuZD5cblx0XHRcdFx0Y2FzZSAnZmlsdGVyLW9yJzogYnJlYWs7IC8vIDkuNS40IDx0YWJsZTpmaWx0ZXItb3I+XG5cdFx0XHRcdGNhc2UgJ2ZpbHRlci1jb25kaXRpb24nOiBicmVhazsgLy8gOS41LjUgPHRhYmxlOmZpbHRlci1jb25kaXRpb24+XG5cblx0XHRcdFx0Y2FzZSAnbGlzdC1sZXZlbC1zdHlsZS1idWxsZXQnOiBicmVhazsgLy8gMTYuMzEgPHRleHQ6XG5cdFx0XHRcdGNhc2UgJ2xpc3QtbGV2ZWwtc3R5bGUtbnVtYmVyJzogYnJlYWs7IC8vIDE2LjMyIDx0ZXh0OlxuXHRcdFx0XHRjYXNlICdsaXN0LWxldmVsLXByb3BlcnRpZXMnOiBicmVhazsgLy8gMTcuMTkgPHN0eWxlOlxuXG5cdFx0XHRcdC8qIDcuMyBEb2N1bWVudCBGaWVsZHMgKi9cblx0XHRcdFx0Y2FzZSAnc2VuZGVyLWZpcnN0bmFtZSc6IC8vIDcuMy42LjJcblx0XHRcdFx0Y2FzZSAnc2VuZGVyLWxhc3RuYW1lJzogLy8gNy4zLjYuM1xuXHRcdFx0XHRjYXNlICdzZW5kZXItaW5pdGlhbHMnOiAvLyA3LjMuNi40XG5cdFx0XHRcdGNhc2UgJ3NlbmRlci10aXRsZSc6IC8vIDcuMy42LjVcblx0XHRcdFx0Y2FzZSAnc2VuZGVyLXBvc2l0aW9uJzogLy8gNy4zLjYuNlxuXHRcdFx0XHRjYXNlICdzZW5kZXItZW1haWwnOiAvLyA3LjMuNi43XG5cdFx0XHRcdGNhc2UgJ3NlbmRlci1waG9uZS1wcml2YXRlJzogLy8gNy4zLjYuOFxuXHRcdFx0XHRjYXNlICdzZW5kZXItZmF4JzogLy8gNy4zLjYuOVxuXHRcdFx0XHRjYXNlICdzZW5kZXItY29tcGFueSc6IC8vIDcuMy42LjEwXG5cdFx0XHRcdGNhc2UgJ3NlbmRlci1waG9uZS13b3JrJzogLy8gNy4zLjYuMTFcblx0XHRcdFx0Y2FzZSAnc2VuZGVyLXN0cmVldCc6IC8vIDcuMy42LjEyXG5cdFx0XHRcdGNhc2UgJ3NlbmRlci1jaXR5JzogLy8gNy4zLjYuMTNcblx0XHRcdFx0Y2FzZSAnc2VuZGVyLXBvc3RhbC1jb2RlJzogLy8gNy4zLjYuMTRcblx0XHRcdFx0Y2FzZSAnc2VuZGVyLWNvdW50cnknOiAvLyA3LjMuNi4xNVxuXHRcdFx0XHRjYXNlICdzZW5kZXItc3RhdGUtb3ItcHJvdmluY2UnOiAvLyA3LjMuNi4xNlxuXHRcdFx0XHRjYXNlICdhdXRob3ItbmFtZSc6IC8vIDcuMy43LjFcblx0XHRcdFx0Y2FzZSAnYXV0aG9yLWluaXRpYWxzJzogLy8gNy4zLjcuMlxuXHRcdFx0XHRjYXNlICdjaGFwdGVyJzogLy8gNy4zLjhcblx0XHRcdFx0Y2FzZSAnZmlsZS1uYW1lJzogLy8gNy4zLjlcblx0XHRcdFx0Y2FzZSAndGVtcGxhdGUtbmFtZSc6IC8vIDcuMy45XG5cdFx0XHRcdGNhc2UgJ3NoZWV0LW5hbWUnOiAvLyA3LjMuOVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2V2ZW50LWxpc3RlbmVyJzpcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0LyogVE9ETzogRk9EUyBQcm9wZXJ0aWVzICovXG5cdFx0XHRcdGNhc2UgJ2luaXRpYWwtY3JlYXRvcic6XG5cdFx0XHRcdGNhc2UgJ2NyZWF0aW9uLWRhdGUnOlxuXHRcdFx0XHRjYXNlICdnZW5lcmF0b3InOlxuXHRcdFx0XHRjYXNlICdkb2N1bWVudC1zdGF0aXN0aWMnOlxuXHRcdFx0XHRjYXNlICd1c2VyLWRlZmluZWQnOlxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIFRPRE86IEZPRFMgQ29uZmlnICovXG5cdFx0XHRcdGNhc2UgJ2NvbmZpZy1pdGVtJzpcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvKiBUT0RPOiBzdHlsZSB0b2tlbnMgKi9cblx0XHRcdFx0Y2FzZSAncGFnZS1udW1iZXInOiBicmVhazsgLy8gVE9ETyA8dGV4dDpwYWdlLW51bWJlcj5cblx0XHRcdFx0Y2FzZSAncGFnZS1jb3VudCc6IGJyZWFrOyAvLyBUT0RPIDx0ZXh0OnBhZ2UtY291bnQ+XG5cdFx0XHRcdGNhc2UgJ3RpbWUnOiBicmVhazsgLy8gVE9ETyA8dGV4dDp0aW1lPlxuXG5cdFx0XHRcdC8qIDkuNiBEYXRhIFBpbG90IFRhYmxlcyA8dGFibGU6ICovXG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtdGFibGUnOiAvLyA5LjYuM1xuXHRcdFx0XHRjYXNlICdzb3VyY2UtY2VsbC1yYW5nZSc6IC8vIDkuNi41XG5cdFx0XHRcdGNhc2UgJ3NvdXJjZS1zZXJ2aWNlJzogLy8gOS42LjZcblx0XHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1maWVsZCc6IC8vIDkuNi43XG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtbGV2ZWwnOiAvLyA5LjYuOFxuXHRcdFx0XHRjYXNlICdkYXRhLXBpbG90LXN1YnRvdGFscyc6IC8vIDkuNi45XG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3Qtc3VidG90YWwnOiAvLyA5LjYuMTBcblx0XHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1tZW1iZXJzJzogLy8gOS42LjExXG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtbWVtYmVyJzogLy8gOS42LjEyXG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZGlzcGxheS1pbmZvJzogLy8gOS42LjEzXG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3Qtc29ydC1pbmZvJzogLy8gOS42LjE0XG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtbGF5b3V0LWluZm8nOiAvLyA5LjYuMTVcblx0XHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1maWVsZC1yZWZlcmVuY2UnOiAvLyA5LjYuMTZcblx0XHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1ncm91cHMnOiAvLyA5LjYuMTdcblx0XHRcdFx0Y2FzZSAnZGF0YS1waWxvdC1ncm91cCc6IC8vIDkuNi4xOFxuXHRcdFx0XHRjYXNlICdkYXRhLXBpbG90LWdyb3VwLW1lbWJlcic6IC8vIDkuNi4xOVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIDEwLjMgRHJhd2luZyBTaGFwZXMgKi9cblx0XHRcdFx0Y2FzZSAncmVjdCc6IC8vIDEwLjMuMlxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8qIDE0LjYgRERFIENvbm5lY3Rpb25zICovXG5cdFx0XHRcdGNhc2UgJ2RkZS1jb25uZWN0aW9uLWRlY2xzJzogLy8gMTQuNi4yIDx0ZXh0OlxuXHRcdFx0XHRjYXNlICdkZGUtY29ubmVjdGlvbi1kZWNsJzogLy8gMTQuNi4zIDx0ZXh0OlxuXHRcdFx0XHRjYXNlICdkZGUtbGluayc6IC8vIDE0LjYuNCA8dGFibGU6XG5cdFx0XHRcdGNhc2UgJ2RkZS1zb3VyY2UnOiAvLyAxNC42LjUgPG9mZmljZTpcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdwcm9wZXJ0aWVzJzogYnJlYWs7IC8vIDEzLjcgPGZvcm06cHJvcGVydGllcz5cblx0XHRcdFx0Y2FzZSAncHJvcGVydHknOiBicmVhazsgLy8gMTMuOCA8Zm9ybTpwcm9wZXJ0eT5cblxuXHRcdFx0XHRjYXNlICdhJzogYnJlYWs7IC8vIDYuMS44IGh5cGVybGlua1xuXG5cdFx0XHRcdC8qIG5vbi1zdGFuZGFyZCAqL1xuXHRcdFx0XHRjYXNlICd0YWJsZS1wcm90ZWN0aW9uJzogYnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2RhdGEtcGlsb3QtZ3JhbmQtdG90YWwnOiBicmVhazsgLy8gPHRhYmxlOlxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKFJuWzJdID09PSAnZGM6JykgYnJlYWs7IC8vIFRPRE86IHByb3BlcnRpZXNcblx0XHRcdFx0XHRpZihSblsyXSA9PT0gJ2RyYXc6JykgYnJlYWs7IC8vIFRPRE86IGRyYXdpbmdcblx0XHRcdFx0XHRpZihSblsyXSA9PT0gJ3N0eWxlOicpIGJyZWFrOyAvLyBUT0RPOiBzdHlsZXNcblx0XHRcdFx0XHRpZihSblsyXSA9PT0gJ2NhbGNleHQ6JykgYnJlYWs7IC8vIGlnbm9yZSB1bmRvY3VtZW50ZWQgZXh0ZW5zaW9uc1xuXHRcdFx0XHRcdGlmKFJuWzJdID09PSAnbG9leHQ6JykgYnJlYWs7IC8vIGlnbm9yZSB1bmRvY3VtZW50ZWQgZXh0ZW5zaW9uc1xuXHRcdFx0XHRcdGlmKFJuWzJdID09PSAndW9mOicpIGJyZWFrOyAvLyBUT0RPOiB1b2Zcblx0XHRcdFx0XHRpZihSblsyXSA9PT0gJ+ihqDonKSBicmVhazsgLy8gVE9ETzogdW9mXG5cdFx0XHRcdFx0aWYoUm5bMl0gPT09ICflrZc6JykgYnJlYWs7IC8vIFRPRE86IHVvZlxuXHRcdFx0XHRcdGlmKG9wdHMuV1RGKSB0aHJvdyBuZXcgRXJyb3IoUm4pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIG91dCA9IHtcblx0XHRcdFx0U2hlZXRzOiBTaGVldHMsXG5cdFx0XHRcdFNoZWV0TmFtZXM6IFNoZWV0TmFtZXNcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gb3V0O1xuXHRcdH07XG5cdH0pKCk7XG5cblx0ZnVuY3Rpb24gcGFyc2Vfb2RzKHppcCwgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8ICh7fSk7XG5cdFx0dmFyIG9kcyA9ICEhc2FmZWdldHppcGZpbGUoemlwLCAnb2JqZWN0ZGF0YScpO1xuXHRcdGlmKG9kcykgdmFyIG1hbmlmZXN0ID0gcGFyc2VfbWFuaWZlc3QoZ2V0emlwZGF0YSh6aXAsICdNRVRBLUlORi9tYW5pZmVzdC54bWwnKSwgb3B0cyk7XG5cdFx0dmFyIGNvbnRlbnQgPSBnZXR6aXBzdHIoemlwLCAnY29udGVudC54bWwnKTtcblx0XHRpZighY29udGVudCkgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjb250ZW50LnhtbCBpbiBcIiArIChvZHMgPyBcIk9EU1wiIDogXCJVT0ZcIikrIFwiIGZpbGVcIik7XG5cdFx0cmV0dXJuIHBhcnNlX2NvbnRlbnRfeG1sKG9kcyA/IGNvbnRlbnQgOiB1dGY4cmVhZChjb250ZW50KSwgb3B0cyk7XG5cdH1cblx0ZnVuY3Rpb24gcGFyc2VfZm9kcyhkYXRhLCBvcHRzKSB7XG5cdFx0cmV0dXJuIHBhcnNlX2NvbnRlbnRfeG1sKGRhdGEsIG9wdHMpO1xuXHR9XG5cblx0LyogT3BlbkRvY3VtZW50ICovXG5cdHZhciB3cml0ZV9zdHlsZXNfb2RzID0gKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwYXlsb2FkID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cIlVURi04XCIgc3RhbmRhbG9uZT1cInllc1wiPz48b2ZmaWNlOmRvY3VtZW50LXN0eWxlcyB4bWxuczp0YWJsZT1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGFibGU6MS4wXCIgeG1sbnM6b2ZmaWNlPVwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZmZpY2U6MS4wXCIgeG1sbnM6dGV4dD1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6dGV4dDoxLjBcIiB4bWxuczpzdHlsZT1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6c3R5bGU6MS4wXCIgeG1sbnM6ZHJhdz1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIiB4bWxuczpmbz1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6eHNsLWZvLWNvbXBhdGlibGU6MS4wXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeG1sbnM6ZGM9XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiIHhtbG5zOm51bWJlcj1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZGF0YXN0eWxlOjEuMFwiIHhtbG5zOnN2Zz1cInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6c3ZnLWNvbXBhdGlibGU6MS4wXCIgeG1sbnM6b2Y9XCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOm9mOjEuMlwiIG9mZmljZTp2ZXJzaW9uPVwiMS4yXCI+PC9vZmZpY2U6ZG9jdW1lbnQtc3R5bGVzPic7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHdzbyh3Yiwgb3B0cykge1xuXHRcdFx0cmV0dXJuIHBheWxvYWQ7XG5cdFx0fTtcblx0fSkoKTtcblx0dmFyIHdyaXRlX2NvbnRlbnRfb2RzID0gKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBudWxsX2NlbGxfeG1sID0gJyAgICAgICAgICA8dGFibGU6dGFibGUtY2VsbCAvPlxcbic7XG5cdFx0dmFyIGNvdmVyZWRfY2VsbF94bWwgPSAnICAgICAgICAgIDx0YWJsZTpjb3ZlcmVkLXRhYmxlLWNlbGwvPlxcbic7XG5cdFx0dmFyIHdyaXRlX3dzID0gZnVuY3Rpb24od3MsIHdiLCBpLCBvcHRzKSB7XG5cdFx0XHQvKiBTZWN0aW9uIDkgVGFibGVzICovXG5cdFx0XHR2YXIgbyA9IFtdO1xuXHRcdFx0by5wdXNoKCcgICAgICA8dGFibGU6dGFibGUgdGFibGU6bmFtZT1cIicgKyBlc2NhcGV4bWwod2IuU2hlZXROYW1lc1tpXSkgKyAnXCI+XFxuJyk7XG5cdFx0XHR2YXIgUj0wLEM9MCwgcmFuZ2UgPSBkZWNvZGVfcmFuZ2Uod3NbJyFyZWYnXSk7XG5cdFx0XHR2YXIgbWFyciA9IHdzWychbWVyZ2VzJ10gfHwgW10sIG1pID0gMDtcblx0XHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkod3MpO1xuXHRcdFx0Zm9yKFIgPSAwOyBSIDwgcmFuZ2Uucy5yOyArK1IpIG8ucHVzaCgnICAgICAgICA8dGFibGU6dGFibGUtcm93PjwvdGFibGU6dGFibGUtcm93PlxcbicpO1xuXHRcdFx0Zm9yKDsgUiA8PSByYW5nZS5lLnI7ICsrUikge1xuXHRcdFx0XHRvLnB1c2goJyAgICAgICAgPHRhYmxlOnRhYmxlLXJvdz5cXG4nKTtcblx0XHRcdFx0Zm9yKEM9MDsgQyA8IHJhbmdlLnMuYzsgKytDKSBvLnB1c2gobnVsbF9jZWxsX3htbCk7XG5cdFx0XHRcdGZvcig7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHtcblx0XHRcdFx0XHR2YXIgc2tpcCA9IGZhbHNlLCBjdCA9IHt9LCB0ZXh0cCA9IFwiXCI7XG5cdFx0XHRcdFx0Zm9yKG1pID0gMDsgbWkgIT0gbWFyci5sZW5ndGg7ICsrbWkpIHtcblx0XHRcdFx0XHRcdGlmKG1hcnJbbWldLnMuYyA+IEMpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aWYobWFyclttaV0ucy5yID4gUikgY29udGludWU7XG5cdFx0XHRcdFx0XHRpZihtYXJyW21pXS5lLmMgPCBDKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdGlmKG1hcnJbbWldLmUuciA8IFIpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aWYobWFyclttaV0ucy5jICE9IEMgfHwgbWFyclttaV0ucy5yICE9IFIpIHNraXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Y3RbJ3RhYmxlOm51bWJlci1jb2x1bW5zLXNwYW5uZWQnXSA9IChtYXJyW21pXS5lLmMgLSBtYXJyW21pXS5zLmMgKyAxKTtcblx0XHRcdFx0XHRcdGN0Wyd0YWJsZTpudW1iZXItcm93cy1zcGFubmVkJ10gPSAgICAobWFyclttaV0uZS5yIC0gbWFyclttaV0ucy5yICsgMSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoc2tpcCkgeyBvLnB1c2goY292ZXJlZF9jZWxsX3htbCk7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0dmFyIHJlZiA9IGVuY29kZV9jZWxsKHtyOlIsIGM6Q30pLCBjZWxsID0gZGVuc2UgPyAod3NbUl18fFtdKVtDXTogd3NbcmVmXTtcblx0XHRcdFx0XHRpZihjZWxsICYmIGNlbGwuZikge1xuXHRcdFx0XHRcdFx0Y3RbJ3RhYmxlOmZvcm11bGEnXSA9IGVzY2FwZXhtbChjc2ZfdG9fb2RzX2Zvcm11bGEoY2VsbC5mKSk7XG5cdFx0XHRcdFx0XHRpZihjZWxsLkYpIHtcblx0XHRcdFx0XHRcdFx0aWYoY2VsbC5GLnN1YnN0cigwLCByZWYubGVuZ3RoKSA9PSByZWYpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgX0ZyZWYgPSBkZWNvZGVfcmFuZ2UoY2VsbC5GKTtcblx0XHRcdFx0XHRcdFx0XHRjdFsndGFibGU6bnVtYmVyLW1hdHJpeC1jb2x1bW5zLXNwYW5uZWQnXSA9IChfRnJlZi5lLmMgLSBfRnJlZi5zLmMgKyAxKTtcblx0XHRcdFx0XHRcdFx0XHRjdFsndGFibGU6bnVtYmVyLW1hdHJpeC1yb3dzLXNwYW5uZWQnXSA9ICAgIChfRnJlZi5lLnIgLSBfRnJlZi5zLnIgKyAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZighY2VsbCkgeyBvLnB1c2gobnVsbF9jZWxsX3htbCk7IGNvbnRpbnVlOyB9XG5cdFx0XHRcdFx0c3dpdGNoKGNlbGwudCkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnYic6XG5cdFx0XHRcdFx0XHRcdHRleHRwID0gKGNlbGwudiA/ICdUUlVFJyA6ICdGQUxTRScpO1xuXHRcdFx0XHRcdFx0XHRjdFsnb2ZmaWNlOnZhbHVlLXR5cGUnXSA9IFwiYm9vbGVhblwiO1xuXHRcdFx0XHRcdFx0XHRjdFsnb2ZmaWNlOmJvb2xlYW4tdmFsdWUnXSA9IChjZWxsLnYgPyAndHJ1ZScgOiAnZmFsc2UnKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICduJzpcblx0XHRcdFx0XHRcdFx0dGV4dHAgPSAoY2VsbC53fHxTdHJpbmcoY2VsbC52fHwwKSk7XG5cdFx0XHRcdFx0XHRcdGN0WydvZmZpY2U6dmFsdWUtdHlwZSddID0gXCJmbG9hdFwiO1xuXHRcdFx0XHRcdFx0XHRjdFsnb2ZmaWNlOnZhbHVlJ10gPSAoY2VsbC52fHwwKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdzJzogY2FzZSAnc3RyJzpcblx0XHRcdFx0XHRcdFx0dGV4dHAgPSBlc2NhcGV4bWwoY2VsbC52KTtcblx0XHRcdFx0XHRcdFx0Y3RbJ29mZmljZTp2YWx1ZS10eXBlJ10gPSBcInN0cmluZ1wiO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdFx0XHR0ZXh0cCA9IChjZWxsLnd8fChwYXJzZURhdGUoY2VsbC52KS50b0lTT1N0cmluZygpKSk7XG5cdFx0XHRcdFx0XHRcdGN0WydvZmZpY2U6dmFsdWUtdHlwZSddID0gXCJkYXRlXCI7XG5cdFx0XHRcdFx0XHRcdGN0WydvZmZpY2U6ZGF0ZS12YWx1ZSddID0gKHBhcnNlRGF0ZShjZWxsLnYpLnRvSVNPU3RyaW5nKCkpO1xuXHRcdFx0XHRcdFx0XHRjdFsndGFibGU6c3R5bGUtbmFtZSddID0gXCJjZTFcIjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHQvL2Nhc2UgJ2UnOlxuXHRcdFx0XHRcdFx0ZGVmYXVsdDogby5wdXNoKG51bGxfY2VsbF94bWwpOyBjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0by5wdXNoKCcgICAgICAgICAgJyArIHdyaXRleHRhZygndGFibGU6dGFibGUtY2VsbCcsIHdyaXRleHRhZygndGV4dDpwJywgdGV4dHAsIHt9KSwgY3QpICsgJ1xcbicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG8ucHVzaCgnICAgICAgICA8L3RhYmxlOnRhYmxlLXJvdz5cXG4nKTtcblx0XHRcdH1cblx0XHRcdG8ucHVzaCgnICAgICAgPC90YWJsZTp0YWJsZT5cXG4nKTtcblx0XHRcdHJldHVybiBvLmpvaW4oXCJcIik7XG5cdFx0fTtcblxuXHRcdHZhciB3cml0ZV9hdXRvbWF0aWNfc3R5bGVzX29kcyA9IGZ1bmN0aW9uKG8pIHtcblx0XHRcdG8ucHVzaCgnIDxvZmZpY2U6YXV0b21hdGljLXN0eWxlcz5cXG4nKTtcblx0XHRcdG8ucHVzaCgnICA8bnVtYmVyOmRhdGUtc3R5bGUgc3R5bGU6bmFtZT1cIk4zN1wiIG51bWJlcjphdXRvbWF0aWMtb3JkZXI9XCJ0cnVlXCI+XFxuJyk7XG5cdFx0XHRvLnB1c2goJyAgIDxudW1iZXI6bW9udGggbnVtYmVyOnN0eWxlPVwibG9uZ1wiLz5cXG4nKTtcblx0XHRcdG8ucHVzaCgnICAgPG51bWJlcjp0ZXh0Pi88L251bWJlcjp0ZXh0PlxcbicpO1xuXHRcdFx0by5wdXNoKCcgICA8bnVtYmVyOmRheSBudW1iZXI6c3R5bGU9XCJsb25nXCIvPlxcbicpO1xuXHRcdFx0by5wdXNoKCcgICA8bnVtYmVyOnRleHQ+LzwvbnVtYmVyOnRleHQ+XFxuJyk7XG5cdFx0XHRvLnB1c2goJyAgIDxudW1iZXI6eWVhci8+XFxuJyk7XG5cdFx0XHRvLnB1c2goJyAgPC9udW1iZXI6ZGF0ZS1zdHlsZT5cXG4nKTtcblx0XHRcdG8ucHVzaCgnICA8c3R5bGU6c3R5bGUgc3R5bGU6bmFtZT1cImNlMVwiIHN0eWxlOmZhbWlseT1cInRhYmxlLWNlbGxcIiBzdHlsZTpwYXJlbnQtc3R5bGUtbmFtZT1cIkRlZmF1bHRcIiBzdHlsZTpkYXRhLXN0eWxlLW5hbWU9XCJOMzdcIi8+XFxuJyk7XG5cdFx0XHRvLnB1c2goJyA8L29mZmljZTphdXRvbWF0aWMtc3R5bGVzPlxcbicpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gd2N4KHdiLCBvcHRzKSB7XG5cdFx0XHR2YXIgbyA9IFtYTUxfSEVBREVSXTtcblx0XHRcdC8qIDMuMS4zLjIgKi9cblx0XHRcdHZhciBhdHRyID0gd3h0X2hlbHBlcih7XG5cdFx0XHRcdCd4bWxuczpvZmZpY2UnOiAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6b2ZmaWNlOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6dGFibGUnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRhYmxlOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6c3R5bGUnOiAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnN0eWxlOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6dGV4dCc6ICAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnRleHQ6MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpkcmF3JzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZHJhd2luZzoxLjBcIixcblx0XHRcdFx0J3htbG5zOmZvJzogICAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczp4c2wtZm8tY29tcGF0aWJsZToxLjBcIixcblx0XHRcdFx0J3htbG5zOnhsaW5rJzogICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuXHRcdFx0XHQneG1sbnM6ZGMnOiAgICAgICAgICAgXCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiLFxuXHRcdFx0XHQneG1sbnM6bWV0YSc6ICAgICAgICAgXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOm1ldGE6MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpudW1iZXInOiAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6ZGF0YXN0eWxlOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6cHJlc2VudGF0aW9uJzogXCJ1cm46b2FzaXM6bmFtZXM6dGM6b3BlbmRvY3VtZW50OnhtbG5zOnByZXNlbnRhdGlvbjoxLjBcIixcblx0XHRcdFx0J3htbG5zOnN2Zyc6ICAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzdmctY29tcGF0aWJsZToxLjBcIixcblx0XHRcdFx0J3htbG5zOmNoYXJ0JzogICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpjaGFydDoxLjBcIixcblx0XHRcdFx0J3htbG5zOmRyM2QnOiAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpkcjNkOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6bWF0aCc6ICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG5cdFx0XHRcdCd4bWxuczpmb3JtJzogICAgICAgICBcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6Zm9ybToxLjBcIixcblx0XHRcdFx0J3htbG5zOnNjcmlwdCc6ICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpzY3JpcHQ6MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpvb28nOiAgICAgICAgICBcImh0dHA6Ly9vcGVub2ZmaWNlLm9yZy8yMDA0L29mZmljZVwiLFxuXHRcdFx0XHQneG1sbnM6b29vdyc6ICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNC93cml0ZXJcIixcblx0XHRcdFx0J3htbG5zOm9vb2MnOiAgICAgICAgIFwiaHR0cDovL29wZW5vZmZpY2Uub3JnLzIwMDQvY2FsY1wiLFxuXHRcdFx0XHQneG1sbnM6ZG9tJzogICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAxL3htbC1ldmVudHNcIixcblx0XHRcdFx0J3htbG5zOnhmb3Jtcyc6ICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMi94Zm9ybXNcIixcblx0XHRcdFx0J3htbG5zOnhzZCc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIixcblx0XHRcdFx0J3htbG5zOnhzaSc6ICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2VcIixcblx0XHRcdFx0J3htbG5zOnNoZWV0JzogICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDpzaDMzdGpzOjEuMFwiLFxuXHRcdFx0XHQneG1sbnM6cnB0JzogICAgICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwNS9yZXBvcnRcIixcblx0XHRcdFx0J3htbG5zOm9mJzogICAgICAgICAgIFwidXJuOm9hc2lzOm5hbWVzOnRjOm9wZW5kb2N1bWVudDp4bWxuczpvZjoxLjJcIixcblx0XHRcdFx0J3htbG5zOnhodG1sJzogICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFxuXHRcdFx0XHQneG1sbnM6Z3JkZGwnOiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAzL2cvZGF0YS12aWV3I1wiLFxuXHRcdFx0XHQneG1sbnM6dGFibGVvb28nOiAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAwOS90YWJsZVwiLFxuXHRcdFx0XHQneG1sbnM6ZHJhd29vbyc6ICAgICAgXCJodHRwOi8vb3Blbm9mZmljZS5vcmcvMjAxMC9kcmF3XCIsXG5cdFx0XHRcdCd4bWxuczpjYWxjZXh0JzogICAgICBcInVybjpvcmc6ZG9jdW1lbnRmb3VuZGF0aW9uOm5hbWVzOmV4cGVyaW1lbnRhbDpjYWxjOnhtbG5zOmNhbGNleHQ6MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpsb2V4dCc6ICAgICAgICBcInVybjpvcmc6ZG9jdW1lbnRmb3VuZGF0aW9uOm5hbWVzOmV4cGVyaW1lbnRhbDpvZmZpY2U6eG1sbnM6bG9leHQ6MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpmaWVsZCc6ICAgICAgICBcInVybjpvcGVub2ZmaWNlOm5hbWVzOmV4cGVyaW1lbnRhbDpvb28tbXMtaW50ZXJvcDp4bWxuczpmaWVsZDoxLjBcIixcblx0XHRcdFx0J3htbG5zOmZvcm14JzogICAgICAgIFwidXJuOm9wZW5vZmZpY2U6bmFtZXM6ZXhwZXJpbWVudGFsOm9veG1sLW9kZi1pbnRlcm9wOnhtbG5zOmZvcm06MS4wXCIsXG5cdFx0XHRcdCd4bWxuczpjc3MzdCc6ICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdGV4dC9cIixcblx0XHRcdFx0J29mZmljZTp2ZXJzaW9uJzogICAgIFwiMS4yXCJcblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgZm9kcyA9IHd4dF9oZWxwZXIoe1xuXHRcdFx0XHQneG1sbnM6Y29uZmlnJzpcInVybjpvYXNpczpuYW1lczp0YzpvcGVuZG9jdW1lbnQ6eG1sbnM6Y29uZmlnOjEuMFwiLFxuXHRcdFx0XHQnb2ZmaWNlOm1pbWV0eXBlJzpcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIlxuXHRcdFx0fSk7XG5cblx0XHRcdGlmKG9wdHMuYm9va1R5cGUgPT0gXCJmb2RzXCIpIG8ucHVzaCgnPG9mZmljZTpkb2N1bWVudCcgKyBhdHRyICsgZm9kcyArICc+XFxuJyk7XG5cdFx0XHRlbHNlIG8ucHVzaCgnPG9mZmljZTpkb2N1bWVudC1jb250ZW50JyArIGF0dHIgICsgJz5cXG4nKTtcblx0XHRcdHdyaXRlX2F1dG9tYXRpY19zdHlsZXNfb2RzKG8pO1xuXHRcdFx0by5wdXNoKCcgIDxvZmZpY2U6Ym9keT5cXG4nKTtcblx0XHRcdG8ucHVzaCgnICAgIDxvZmZpY2U6c3ByZWFkc2hlZXQ+XFxuJyk7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpICE9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK2kpIG8ucHVzaCh3cml0ZV93cyh3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tpXV0sIHdiLCBpLCBvcHRzKSk7XG5cdFx0XHRvLnB1c2goJyAgICA8L29mZmljZTpzcHJlYWRzaGVldD5cXG4nKTtcblx0XHRcdG8ucHVzaCgnICA8L29mZmljZTpib2R5PlxcbicpO1xuXHRcdFx0aWYob3B0cy5ib29rVHlwZSA9PSBcImZvZHNcIikgby5wdXNoKCc8L29mZmljZTpkb2N1bWVudD4nKTtcblx0XHRcdGVsc2Ugby5wdXNoKCc8L29mZmljZTpkb2N1bWVudC1jb250ZW50PicpO1xuXHRcdFx0cmV0dXJuIG8uam9pbihcIlwiKTtcblx0XHR9O1xuXHR9KSgpO1xuXG5cdGZ1bmN0aW9uIHdyaXRlX29kcyh3Yiwgb3B0cykge1xuXHRcdGlmKG9wdHMuYm9va1R5cGUgPT0gXCJmb2RzXCIpIHJldHVybiB3cml0ZV9jb250ZW50X29kcyh3Yiwgb3B0cyk7XG5cblx0dmFyIHppcCA9IG5ldyBqc3ppcCgpO1xuXHRcdHZhciBmID0gXCJcIjtcblxuXHRcdHZhciBtYW5pZmVzdCA9IFtdO1xuXHRcdHZhciByZGYgPSBbXTtcblxuXHRcdC8qIDM6My4zIGFuZCAyOjIuMi40ICovXG5cdFx0ZiA9IFwibWltZXR5cGVcIjtcblx0XHR6aXAuZmlsZShmLCBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXRcIik7XG5cblx0XHQvKiBQYXJ0IDEgU2VjdGlvbiAyLjIgRG9jdW1lbnRzICovXG5cdFx0ZiA9IFwiY29udGVudC54bWxcIjtcblx0XHR6aXAuZmlsZShmLCB3cml0ZV9jb250ZW50X29kcyh3Yiwgb3B0cykpO1xuXHRcdG1hbmlmZXN0LnB1c2goW2YsIFwidGV4dC94bWxcIl0pO1xuXHRcdHJkZi5wdXNoKFtmLCBcIkNvbnRlbnRGaWxlXCJdKTtcblxuXHRcdC8qIFRPRE86IHRoZXNlIGFyZSBoYXJkLWNvZGVkIHN0eWxlcyB0byBzYXRpYXRlIGV4Y2VsICovXG5cdFx0ZiA9IFwic3R5bGVzLnhtbFwiO1xuXHRcdHppcC5maWxlKGYsIHdyaXRlX3N0eWxlc19vZHMod2IsIG9wdHMpKTtcblx0XHRtYW5pZmVzdC5wdXNoKFtmLCBcInRleHQveG1sXCJdKTtcblx0XHRyZGYucHVzaChbZiwgXCJTdHlsZXNGaWxlXCJdKTtcblxuXHRcdC8qIFBhcnQgMyBTZWN0aW9uIDYgTWV0YWRhdGEgTWFuaWZlc3QgRmlsZSAqL1xuXHRcdGYgPSBcIm1hbmlmZXN0LnJkZlwiO1xuXHRcdHppcC5maWxlKGYsIHdyaXRlX3JkZihyZGYsIG9wdHMpKTtcblx0XHRtYW5pZmVzdC5wdXNoKFtmLCBcImFwcGxpY2F0aW9uL3JkZit4bWxcIl0pO1xuXG5cdFx0LyogVE9ETzogdGhpcyBpcyBoYXJkLWNvZGVkIHRvIHNhdGlhdGUgZXhjZWwgKi9cblx0XHRmID0gXCJtZXRhLnhtbFwiO1xuXHRcdHppcC5maWxlKGYsIHdyaXRlX21ldGFfb2RzKHdiLCBvcHRzKSk7XG5cdFx0bWFuaWZlc3QucHVzaChbZiwgXCJ0ZXh0L3htbFwiXSk7XG5cdFx0cmRmLnB1c2goW2YsIFwiTWV0YWRhdGFGaWxlXCJdKTtcblxuXHRcdC8qIFBhcnQgMyBTZWN0aW9uIDQgTWFuaWZlc3QgRmlsZSAqL1xuXHRcdGYgPSBcIk1FVEEtSU5GL21hbmlmZXN0LnhtbFwiO1xuXHRcdHppcC5maWxlKGYsIHdyaXRlX21hbmlmZXN0KG1hbmlmZXN0LCBvcHRzKSk7XG5cblx0XHRyZXR1cm4gemlwO1xuXHR9XG5cblx0LyogYWN0dWFsIGltcGxlbWVudGF0aW9uIGVsc2V3aGVyZSwgd3JhcHBlcnMgYXJlIGZvciByZWFkL3dyaXRlICovXG5cdGZ1bmN0aW9uIHdyaXRlX29ial9zdHIoZmFjdG9yeSkge1xuXHRcdHJldHVybiBmdW5jdGlvbiB3cml0ZV9zdHIod2IsIG8pIHtcblx0XHRcdHZhciBpZHggPSAwO1xuXHRcdFx0Zm9yKHZhciBpPTA7aTx3Yi5TaGVldE5hbWVzLmxlbmd0aDsrK2kpIGlmKHdiLlNoZWV0TmFtZXNbaV0gPT0gby5zaGVldCkgaWR4PWk7XG5cdFx0XHRpZihpZHggPT0gMCAmJiAhIW8uc2hlZXQgJiYgd2IuU2hlZXROYW1lc1swXSAhPSBvLnNoZWV0KSB0aHJvdyBuZXcgRXJyb3IoXCJTaGVldCBub3QgZm91bmQ6IFwiICsgby5zaGVldCk7XG5cdFx0XHRyZXR1cm4gZmFjdG9yeS5mcm9tX3NoZWV0KHdiLlNoZWV0c1t3Yi5TaGVldE5hbWVzW2lkeF1dLCBvKTtcblx0XHR9O1xuXHR9XG5cblx0dmFyIHdyaXRlX2h0bV9zdHIgPSB3cml0ZV9vYmpfc3RyKEhUTUxfKTtcblx0dmFyIHdyaXRlX2Nzdl9zdHIgPSB3cml0ZV9vYmpfc3RyKHtmcm9tX3NoZWV0OnNoZWV0X3RvX2Nzdn0pO1xuXHR2YXIgd3JpdGVfc2xrX3N0ciA9IHdyaXRlX29ial9zdHIoU1lMSyk7XG5cdHZhciB3cml0ZV9kaWZfc3RyID0gd3JpdGVfb2JqX3N0cihESUYpO1xuXHR2YXIgd3JpdGVfcHJuX3N0ciA9IHdyaXRlX29ial9zdHIoUFJOKTtcblx0dmFyIHdyaXRlX3R4dF9zdHIgPSB3cml0ZV9vYmpfc3RyKHtmcm9tX3NoZWV0OnNoZWV0X3RvX3R4dH0pO1xuXHRmdW5jdGlvbiBmaXhfb3B0c19mdW5jKGRlZmF1bHRzKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGZpeF9vcHRzKG9wdHMpIHtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgIT0gZGVmYXVsdHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dmFyIGQgPSBkZWZhdWx0c1tpXTtcblx0XHRcdFx0aWYob3B0c1tkWzBdXSA9PT0gdW5kZWZpbmVkKSBvcHRzW2RbMF1dID0gZFsxXTtcblx0XHRcdFx0aWYoZFsyXSA9PT0gJ24nKSBvcHRzW2RbMF1dID0gTnVtYmVyKG9wdHNbZFswXV0pO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHR2YXIgZml4X3JlYWRfb3B0cyA9IGZpeF9vcHRzX2Z1bmMoW1xuXHRcdFsnY2VsbE5GJywgZmFsc2VdLCAvKiBlbWl0IGNlbGwgbnVtYmVyIGZvcm1hdCBzdHJpbmcgYXMgLnogKi9cblx0XHRbJ2NlbGxIVE1MJywgdHJ1ZV0sIC8qIGVtaXQgaHRtbCBzdHJpbmcgYXMgLmggKi9cblx0XHRbJ2NlbGxGb3JtdWxhJywgdHJ1ZV0sIC8qIGVtaXQgZm9ybXVsYWUgYXMgLmYgKi9cblx0XHRbJ2NlbGxTdHlsZXMnLCBmYWxzZV0sIC8qIGVtaXRzIHN0eWxlL3RoZW1lIGFzIC5zICovXG5cdFx0WydjZWxsVGV4dCcsIHRydWVdLCAvKiBlbWl0IGZvcm1hdHRlZCB0ZXh0IGFzIC53ICovXG5cdFx0WydjZWxsRGF0ZXMnLCBmYWxzZV0sIC8qIGVtaXQgZGF0ZSBjZWxscyB3aXRoIHR5cGUgYGRgICovXG5cblx0XHRbJ3NoZWV0U3R1YnMnLCBmYWxzZV0sIC8qIGVtaXQgZW1wdHkgY2VsbHMgKi9cblx0XHRbJ3NoZWV0Um93cycsIDAsICduJ10sIC8qIHJlYWQgbiByb3dzICgwID0gcmVhZCBhbGwgcm93cykgKi9cblxuXHRcdFsnYm9va0RlcHMnLCBmYWxzZV0sIC8qIHBhcnNlIGNhbGN1bGF0aW9uIGNoYWlucyAqL1xuXHRcdFsnYm9va1NoZWV0cycsIGZhbHNlXSwgLyogb25seSB0cnkgdG8gZ2V0IHNoZWV0IG5hbWVzIChubyBTaGVldHMpICovXG5cdFx0Wydib29rUHJvcHMnLCBmYWxzZV0sIC8qIG9ubHkgdHJ5IHRvIGdldCBwcm9wZXJ0aWVzIChubyBTaGVldHMpICovXG5cdFx0Wydib29rRmlsZXMnLCBmYWxzZV0sIC8qIGluY2x1ZGUgcmF3IGZpbGUgc3RydWN0dXJlIChrZXlzLCBmaWxlcywgY2ZiKSAqL1xuXHRcdFsnYm9va1ZCQScsIGZhbHNlXSwgLyogaW5jbHVkZSB2YmEgcmF3IGRhdGEgKHZiYXJhdykgKi9cblxuXHRcdFsncGFzc3dvcmQnLCcnXSwgLyogcGFzc3dvcmQgKi9cblx0XHRbJ1dURicsIGZhbHNlXSAvKiBXVEYgbW9kZSAodGhyb3dzIGVycm9ycykgKi9cblx0XSk7XG5cblxuXHR2YXIgZml4X3dyaXRlX29wdHMgPSBmaXhfb3B0c19mdW5jKFtcblx0XHRbJ2NlbGxEYXRlcycsIGZhbHNlXSwgLyogd3JpdGUgZGF0ZSBjZWxscyB3aXRoIHR5cGUgYGRgICovXG5cblx0XHRbJ2Jvb2tTU1QnLCBmYWxzZV0sIC8qIEdlbmVyYXRlIFNoYXJlZCBTdHJpbmcgVGFibGUgKi9cblxuXHRcdFsnYm9va1R5cGUnLCAneGxzeCddLCAvKiBUeXBlIG9mIHdvcmtib29rICh4bHN4L20vYikgKi9cblxuXHRcdFsnY29tcHJlc3Npb24nLCBmYWxzZV0sIC8qIFVzZSBmaWxlIGNvbXByZXNzaW9uICovXG5cblx0XHRbJ1dURicsIGZhbHNlXSAvKiBXVEYgbW9kZSAodGhyb3dzIGVycm9ycykgKi9cblx0XSk7XG5cdGZ1bmN0aW9uIGdldF9zaGVldF90eXBlKG4pIHtcblx0XHRpZihSRUxTLldTLmluZGV4T2YobikgPiAtMSkgcmV0dXJuIFwic2hlZXRcIjtcblx0XHRpZihSRUxTLkNTICYmIG4gPT0gUkVMUy5DUykgcmV0dXJuIFwiY2hhcnRcIjtcblx0XHRpZihSRUxTLkRTICYmIG4gPT0gUkVMUy5EUykgcmV0dXJuIFwiZGlhbG9nXCI7XG5cdFx0aWYoUkVMUy5NUyAmJiBuID09IFJFTFMuTVMpIHJldHVybiBcIm1hY3JvXCI7XG5cdFx0aWYoIW4gfHwgIW4ubGVuZ3RoKSByZXR1cm4gXCJzaGVldFwiO1xuXHRcdHJldHVybiBuO1xuXHR9XG5cdGZ1bmN0aW9uIHNhZmVfcGFyc2Vfd2JyZWxzKHdicmVscywgc2hlZXRzKSB7XG5cdFx0aWYoIXdicmVscykgcmV0dXJuIDA7XG5cdFx0dHJ5IHtcblx0XHRcdHdicmVscyA9IHNoZWV0cy5tYXAoZnVuY3Rpb24gcHdicih3KSB7IGlmKCF3LmlkKSB3LmlkID0gdy5zdHJSZWxJRDsgcmV0dXJuIFt3Lm5hbWUsIHdicmVsc1snIWlkJ11bdy5pZF0uVGFyZ2V0LCBnZXRfc2hlZXRfdHlwZSh3YnJlbHNbJyFpZCddW3cuaWRdLlR5cGUpXTsgfSk7XG5cdFx0fSBjYXRjaChlKSB7IHJldHVybiBudWxsOyB9XG5cdFx0cmV0dXJuICF3YnJlbHMgfHwgd2JyZWxzLmxlbmd0aCA9PT0gMCA/IG51bGwgOiB3YnJlbHM7XG5cdH1cblxuXHRmdW5jdGlvbiBzYWZlX3BhcnNlX3NoZWV0KHppcCwgcGF0aCwgcmVsc1BhdGgsIHNoZWV0LCBzaGVldFJlbHMsIHNoZWV0cywgc3R5cGUsIG9wdHMsIHdiLCB0aGVtZXMsIHN0eWxlcykge1xuXHRcdHRyeSB7XG5cdFx0XHRzaGVldFJlbHNbc2hlZXRdPXBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgcmVsc1BhdGgsIHRydWUpLCBwYXRoKTtcblx0XHRcdHZhciBkYXRhID0gZ2V0emlwZGF0YSh6aXAsIHBhdGgpO1xuXHRcdFx0c3dpdGNoKHN0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ3NoZWV0Jzogc2hlZXRzW3NoZWV0XT1wYXJzZV93cyhkYXRhLCBwYXRoLCBvcHRzLHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlICdjaGFydCc6XG5cdFx0XHRcdFx0dmFyIGNzID0gcGFyc2VfY3MoZGF0YSwgcGF0aCwgb3B0cyxzaGVldFJlbHNbc2hlZXRdLCB3YiwgdGhlbWVzLCBzdHlsZXMpO1xuXHRcdFx0XHRcdHNoZWV0c1tzaGVldF0gPSBjcztcblx0XHRcdFx0XHRpZighY3MgfHwgIWNzWychY2hhcnQnXSkgYnJlYWs7XG5cdFx0XHRcdFx0dmFyIGRmaWxlID0gcmVzb2x2ZV9wYXRoKGNzWychY2hhcnQnXS5UYXJnZXQsIHBhdGgpO1xuXHRcdFx0XHRcdHZhciBkcmVsc3AgPSBnZXRfcmVsc19wYXRoKGRmaWxlKTtcblx0XHRcdFx0XHR2YXIgZHJhdyA9IHBhcnNlX2RyYXdpbmcoZ2V0emlwc3RyKHppcCwgZGZpbGUsIHRydWUpLCBwYXJzZV9yZWxzKGdldHppcHN0cih6aXAsZHJlbHNwLHRydWUpLCBkZmlsZSkpO1xuXHRcdFx0XHRcdHZhciBjaGFydHAgPSByZXNvbHZlX3BhdGgoZHJhdywgZGZpbGUpO1xuXHRcdFx0XHRcdHZhciBjcmVsc3AgPSBnZXRfcmVsc19wYXRoKGNoYXJ0cCk7XG5cdFx0XHRcdFx0Y3MgPSBwYXJzZV9jaGFydChnZXR6aXBzdHIoemlwLCBjaGFydHAsIHRydWUpLCBjaGFydHAsIG9wdHMsIHBhcnNlX3JlbHMoZ2V0emlwc3RyKHppcCwgY3JlbHNwLHRydWUpLCBjaGFydHApLCB3YiwgY3MpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdtYWNybyc6IHNoZWV0c1tzaGVldF09cGFyc2VfbXMoZGF0YSwgcGF0aCwgb3B0cyxzaGVldFJlbHNbc2hlZXRdLCB3YiwgdGhlbWVzLCBzdHlsZXMpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAnZGlhbG9nJzogc2hlZXRzW3NoZWV0XT1wYXJzZV9kcyhkYXRhLCBwYXRoLCBvcHRzLHNoZWV0UmVsc1tzaGVldF0sIHdiLCB0aGVtZXMsIHN0eWxlcyk7IGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2goZSkgeyBpZihvcHRzLldURikgdGhyb3cgZTsgfVxuXHR9XG5cblx0dmFyIG5vZGlycyA9IGZ1bmN0aW9uIG5vZGlycyh4KXtyZXR1cm4geC5zbGljZSgtMSkgIT0gJy8nO307XG5cdGZ1bmN0aW9uIHBhcnNlX3ppcCh6aXAsIG9wdHMpIHtcblx0XHRtYWtlX3NzZihTU0YpO1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdGZpeF9yZWFkX29wdHMob3B0cyk7XG5cdFx0cmVzZXRfY3AoKTtcblxuXHRcdC8qIE9wZW5Eb2N1bWVudCBQYXJ0IDMgU2VjdGlvbiAyLjIuMSBPcGVuRG9jdW1lbnQgUGFja2FnZSAqL1xuXHRcdGlmKHNhZmVnZXR6aXBmaWxlKHppcCwgJ01FVEEtSU5GL21hbmlmZXN0LnhtbCcpKSByZXR1cm4gcGFyc2Vfb2RzKHppcCwgb3B0cyk7XG5cdFx0LyogVU9DICovXG5cdFx0aWYoc2FmZWdldHppcGZpbGUoemlwLCAnb2JqZWN0ZGF0YS54bWwnKSkgcmV0dXJuIHBhcnNlX29kcyh6aXAsIG9wdHMpO1xuXG5cdFx0dmFyIGVudHJpZXMgPSBrZXlzKHppcC5maWxlcykuZmlsdGVyKG5vZGlycykuc29ydCgpO1xuXHRcdHZhciBkaXIgPSBwYXJzZV9jdCgoZ2V0emlwc3RyKHppcCwgJ1tDb250ZW50X1R5cGVzXS54bWwnKSksIG9wdHMpO1xuXHRcdHZhciB4bHNiID0gZmFsc2U7XG5cdFx0dmFyIHNoZWV0cywgYmlubmFtZTtcblx0XHRpZihkaXIud29ya2Jvb2tzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0YmlubmFtZSA9IFwieGwvd29ya2Jvb2sueG1sXCI7XG5cdFx0XHRpZihnZXR6aXBkYXRhKHppcCxiaW5uYW1lLCB0cnVlKSkgZGlyLndvcmtib29rcy5wdXNoKGJpbm5hbWUpO1xuXHRcdH1cblx0XHRpZihkaXIud29ya2Jvb2tzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0YmlubmFtZSA9IFwieGwvd29ya2Jvb2suYmluXCI7XG5cdFx0XHRpZighZ2V0emlwZmlsZSh6aXAsYmlubmFtZSx0cnVlKSkgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgd29ya2Jvb2tcIik7XG5cdFx0XHRkaXIud29ya2Jvb2tzLnB1c2goYmlubmFtZSk7XG5cdFx0XHR4bHNiID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYoZGlyLndvcmtib29rc1swXS5zbGljZSgtMykgPT0gXCJiaW5cIikgeGxzYiA9IHRydWU7XG5cdFx0aWYoeGxzYikgc2V0X2NwKDEyMDApO1xuXG5cdFx0dmFyIHRoZW1lcyA9ICh7fSk7XG5cdFx0dmFyIHN0eWxlcyA9ICh7fSk7XG5cdFx0aWYoIW9wdHMuYm9va1NoZWV0cyAmJiAhb3B0cy5ib29rUHJvcHMpIHtcblx0XHRcdHN0cnMgPSBbXTtcblx0XHRcdGlmKGRpci5zc3QpIHN0cnM9cGFyc2Vfc3N0KGdldHppcGRhdGEoemlwLCBkaXIuc3N0LnJlcGxhY2UoL15cXC8vLCcnKSksIGRpci5zc3QsIG9wdHMpO1xuXG5cdFx0XHRpZihvcHRzLmNlbGxTdHlsZXMgJiYgZGlyLnRoZW1lcy5sZW5ndGgpIHRoZW1lcyA9IHBhcnNlX3RoZW1lKGdldHppcHN0cih6aXAsIGRpci50aGVtZXNbMF0ucmVwbGFjZSgvXlxcLy8sJycpLCB0cnVlKXx8XCJcIixkaXIudGhlbWVzWzBdLCBvcHRzKTtcblxuXHRcdFx0aWYoZGlyLnN0eWxlKSBzdHlsZXMgPSBwYXJzZV9zdHkoZ2V0emlwZGF0YSh6aXAsIGRpci5zdHlsZS5yZXBsYWNlKC9eXFwvLywnJykpLGRpci5zdHlsZSwgdGhlbWVzLCBvcHRzKTtcblx0XHR9XG5cblx0XHR2YXIgd2IgPSBwYXJzZV93YihnZXR6aXBkYXRhKHppcCwgZGlyLndvcmtib29rc1swXS5yZXBsYWNlKC9eXFwvLywnJykpLCBkaXIud29ya2Jvb2tzWzBdLCBvcHRzKTtcblxuXHRcdHZhciBwcm9wcyA9IHt9LCBwcm9wZGF0YSA9IFwiXCI7XG5cblx0XHRpZihkaXIuY29yZXByb3BzLmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0cHJvcGRhdGEgPSBnZXR6aXBzdHIoemlwLCBkaXIuY29yZXByb3BzWzBdLnJlcGxhY2UoL15cXC8vLCcnKSwgdHJ1ZSk7XG5cdFx0XHRpZihwcm9wZGF0YSkgcHJvcHMgPSBwYXJzZV9jb3JlX3Byb3BzKHByb3BkYXRhKTtcblx0XHRcdGlmKGRpci5leHRwcm9wcy5sZW5ndGggIT09IDApIHtcblx0XHRcdFx0cHJvcGRhdGEgPSBnZXR6aXBzdHIoemlwLCBkaXIuZXh0cHJvcHNbMF0ucmVwbGFjZSgvXlxcLy8sJycpLCB0cnVlKTtcblx0XHRcdFx0aWYocHJvcGRhdGEpIHBhcnNlX2V4dF9wcm9wcyhwcm9wZGF0YSwgcHJvcHMpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBjdXN0cHJvcHMgPSB7fTtcblx0XHRpZighb3B0cy5ib29rU2hlZXRzIHx8IG9wdHMuYm9va1Byb3BzKSB7XG5cdFx0XHRpZiAoZGlyLmN1c3Rwcm9wcy5sZW5ndGggIT09IDApIHtcblx0XHRcdFx0cHJvcGRhdGEgPSBnZXR6aXBzdHIoemlwLCBkaXIuY3VzdHByb3BzWzBdLnJlcGxhY2UoL15cXC8vLCcnKSwgdHJ1ZSk7XG5cdFx0XHRcdGlmKHByb3BkYXRhKSBjdXN0cHJvcHMgPSBwYXJzZV9jdXN0X3Byb3BzKHByb3BkYXRhLCBvcHRzKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgb3V0ID0gKHt9KTtcblx0XHRpZihvcHRzLmJvb2tTaGVldHMgfHwgb3B0cy5ib29rUHJvcHMpIHtcblx0XHRcdGlmKHdiLlNoZWV0cykgc2hlZXRzID0gd2IuU2hlZXRzLm1hcChmdW5jdGlvbiBwbHVjayh4KXsgcmV0dXJuIHgubmFtZTsgfSk7XG5cdFx0XHRlbHNlIGlmKHByb3BzLldvcmtzaGVldHMgJiYgcHJvcHMuU2hlZXROYW1lcy5sZW5ndGggPiAwKSBzaGVldHM9cHJvcHMuU2hlZXROYW1lcztcblx0XHRcdGlmKG9wdHMuYm9va1Byb3BzKSB7IG91dC5Qcm9wcyA9IHByb3BzOyBvdXQuQ3VzdHByb3BzID0gY3VzdHByb3BzOyB9XG5cdFx0XHRpZihvcHRzLmJvb2tTaGVldHMgJiYgdHlwZW9mIHNoZWV0cyAhPT0gJ3VuZGVmaW5lZCcpIG91dC5TaGVldE5hbWVzID0gc2hlZXRzO1xuXHRcdFx0aWYob3B0cy5ib29rU2hlZXRzID8gb3V0LlNoZWV0TmFtZXMgOiBvcHRzLmJvb2tQcm9wcykgcmV0dXJuIG91dDtcblx0XHR9XG5cdFx0c2hlZXRzID0ge307XG5cblx0XHR2YXIgZGVwcyA9IHt9O1xuXHRcdGlmKG9wdHMuYm9va0RlcHMgJiYgZGlyLmNhbGNjaGFpbikgZGVwcz1wYXJzZV9jYyhnZXR6aXBkYXRhKHppcCwgZGlyLmNhbGNjaGFpbi5yZXBsYWNlKC9eXFwvLywnJykpLGRpci5jYWxjY2hhaW4sb3B0cyk7XG5cblx0XHR2YXIgaT0wO1xuXHRcdHZhciBzaGVldFJlbHMgPSAoe30pO1xuXHRcdHZhciBwYXRoLCByZWxzUGF0aDtcblxuXHRcdHtcblx0XHRcdHZhciB3YnNoZWV0cyA9IHdiLlNoZWV0cztcblx0XHRcdHByb3BzLldvcmtzaGVldHMgPSB3YnNoZWV0cy5sZW5ndGg7XG5cdFx0XHRwcm9wcy5TaGVldE5hbWVzID0gW107XG5cdFx0XHRmb3IodmFyIGogPSAwOyBqICE9IHdic2hlZXRzLmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHByb3BzLlNoZWV0TmFtZXNbal0gPSB3YnNoZWV0c1tqXS5uYW1lO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciB3YmV4dCA9IHhsc2IgPyBcImJpblwiIDogXCJ4bWxcIjtcblx0XHR2YXIgd2JyZWxzZmlsZSA9ICd4bC9fcmVscy93b3JrYm9vay4nICsgd2JleHQgKyAnLnJlbHMnO1xuXHRcdHZhciB3YnJlbHMgPSBwYXJzZV9yZWxzKGdldHppcHN0cih6aXAsIHdicmVsc2ZpbGUsIHRydWUpLCB3YnJlbHNmaWxlKTtcblx0XHRpZih3YnJlbHMpIHdicmVscyA9IHNhZmVfcGFyc2Vfd2JyZWxzKHdicmVscywgd2IuU2hlZXRzKTtcblx0XHQvKiBOdW1iZXJzIGlPUyBoYWNrICovXG5cdFx0dmFyIG5tb2RlID0gKGdldHppcGRhdGEoemlwLFwieGwvd29ya3NoZWV0cy9zaGVldC54bWxcIix0cnVlKSk/MTowO1xuXHRcdGZvcihpID0gMDsgaSAhPSBwcm9wcy5Xb3Jrc2hlZXRzOyArK2kpIHtcblx0XHRcdHZhciBzdHlwZSA9IFwic2hlZXRcIjtcblx0XHRcdGlmKHdicmVscyAmJiB3YnJlbHNbaV0pIHtcblx0XHRcdFx0cGF0aCA9ICd4bC8nICsgKHdicmVsc1tpXVsxXSkucmVwbGFjZSgvW1xcL10/eGxcXC8vLCBcIlwiKTtcblx0XHRcdFx0c3R5cGUgPSB3YnJlbHNbaV1bMl07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwYXRoID0gJ3hsL3dvcmtzaGVldHMvc2hlZXQnKyhpKzEtbm1vZGUpK1wiLlwiICsgd2JleHQ7XG5cdFx0XHRcdHBhdGggPSBwYXRoLnJlcGxhY2UoL3NoZWV0MFxcLi8sXCJzaGVldC5cIik7XG5cdFx0XHR9XG5cdFx0XHRyZWxzUGF0aCA9IHBhdGgucmVwbGFjZSgvXiguKikoXFwvKShbXlxcL10qKSQvLCBcIiQxL19yZWxzLyQzLnJlbHNcIik7XG5cdFx0XHRzYWZlX3BhcnNlX3NoZWV0KHppcCwgcGF0aCwgcmVsc1BhdGgsIHByb3BzLlNoZWV0TmFtZXNbaV0sIHNoZWV0UmVscywgc2hlZXRzLCBzdHlwZSwgb3B0cywgd2IsIHRoZW1lcywgc3R5bGVzKTtcblx0XHR9XG5cblx0XHRpZihkaXIuY29tbWVudHMpIHBhcnNlX2NvbW1lbnRzKHppcCwgZGlyLmNvbW1lbnRzLCBzaGVldHMsIHNoZWV0UmVscywgb3B0cyk7XG5cblx0XHRvdXQgPSAoe1xuXHRcdFx0RGlyZWN0b3J5OiBkaXIsXG5cdFx0XHRXb3JrYm9vazogd2IsXG5cdFx0XHRQcm9wczogcHJvcHMsXG5cdFx0XHRDdXN0cHJvcHM6IGN1c3Rwcm9wcyxcblx0XHRcdERlcHM6IGRlcHMsXG5cdFx0XHRTaGVldHM6IHNoZWV0cyxcblx0XHRcdFNoZWV0TmFtZXM6IHByb3BzLlNoZWV0TmFtZXMsXG5cdFx0XHRTdHJpbmdzOiBzdHJzLFxuXHRcdFx0U3R5bGVzOiBzdHlsZXMsXG5cdFx0XHRUaGVtZXM6IHRoZW1lcyxcblx0XHRcdFNTRjogU1NGLmdldF90YWJsZSgpXG5cdFx0fSk7XG5cdFx0aWYob3B0cy5ib29rRmlsZXMpIHtcblx0XHRcdG91dC5rZXlzID0gZW50cmllcztcblx0XHRcdG91dC5maWxlcyA9IHppcC5maWxlcztcblx0XHR9XG5cdFx0aWYob3B0cy5ib29rVkJBKSB7XG5cdFx0XHRpZihkaXIudmJhLmxlbmd0aCA+IDApIG91dC52YmFyYXcgPSBnZXR6aXBkYXRhKHppcCxkaXIudmJhWzBdLnJlcGxhY2UoL15cXC8vLCcnKSx0cnVlKTtcblx0XHRcdGVsc2UgaWYoZGlyLmRlZmF1bHRzICYmIGRpci5kZWZhdWx0cy5iaW4gPT09ICdhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLnZiYVByb2plY3QnKSBvdXQudmJhcmF3ID0gZ2V0emlwZGF0YSh6aXAsJ3hsL3ZiYVByb2plY3QuYmluJyx0cnVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dDtcblx0fVxuXG5cdC8qIHJlZmVyZW5jZXMgdG8gW01TLU9GRkNSWVBUT10gKi9cblx0ZnVuY3Rpb24gcGFyc2VfeGxzeGNmYihjZmIsIG9wdHMpIHtcblx0XHR2YXIgZiA9ICdWZXJzaW9uJztcblx0XHR2YXIgZGF0YSA9IGNmYi5maW5kKGYpO1xuXHRcdGlmKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdFx0dmFyIHZlcnNpb24gPSBwYXJzZV9EYXRhU3BhY2VWZXJzaW9uSW5mbyhkYXRhLmNvbnRlbnQpO1xuXG5cdFx0LyogMi4zLjQuMSAqL1xuXHRcdGYgPSAnRGF0YVNwYWNlTWFwJztcblx0XHRkYXRhID0gY2ZiLmZpbmQoZik7XG5cdFx0aWYoIWRhdGEpIHRocm93IG5ldyBFcnJvcihcIkVDTUEtMzc2IEVuY3J5cHRlZCBmaWxlIG1pc3NpbmcgXCIgKyBmKTtcblx0XHR2YXIgZHNtID0gcGFyc2VfRGF0YVNwYWNlTWFwKGRhdGEuY29udGVudCk7XG5cdFx0aWYoZHNtLmxlbmd0aCAhPSAxIHx8IGRzbVswXS5jb21wcy5sZW5ndGggIT0gMSB8fCBkc21bMF0uY29tcHNbMF0udCAhPSAwIHx8XG5cdFx0ICAgZHNtWzBdLm5hbWUgIT0gXCJTdHJvbmdFbmNyeXB0aW9uRGF0YVNwYWNlXCIgfHwgZHNtWzBdLmNvbXBzWzBdLnYgIT0gXCJFbmNyeXB0ZWRQYWNrYWdlXCIpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBiYWQgXCIgKyBmKTtcblxuXHRcdGYgPSAnU3Ryb25nRW5jcnlwdGlvbkRhdGFTcGFjZSc7XG5cdFx0ZGF0YSA9IGNmYi5maW5kKGYpO1xuXHRcdGlmKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdFx0dmFyIHNlZHMgPSBwYXJzZV9EYXRhU3BhY2VEZWZpbml0aW9uKGRhdGEuY29udGVudCk7XG5cdFx0aWYoc2Vkcy5sZW5ndGggIT0gMSB8fCBzZWRzWzBdICE9IFwiU3Ryb25nRW5jcnlwdGlvblRyYW5zZm9ybVwiKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgYmFkIFwiICsgZik7XG5cblx0XHQvKiAyLjMuNC4zICovXG5cdFx0ZiA9ICchUHJpbWFyeSc7XG5cdFx0ZGF0YSA9IGNmYi5maW5kKGYpO1xuXHRcdGlmKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJFQ01BLTM3NiBFbmNyeXB0ZWQgZmlsZSBtaXNzaW5nIFwiICsgZik7XG5cdFx0dmFyIGhkciA9IHBhcnNlX1ByaW1hcnkoZGF0YS5jb250ZW50KTtcblxuXHRcdGYgPSAnRW5jcnlwdGlvbkluZm8nO1xuXHRcdGRhdGEgPSBjZmIuZmluZChmKTtcblx0XHRpZighZGF0YSkgdGhyb3cgbmV3IEVycm9yKFwiRUNNQS0zNzYgRW5jcnlwdGVkIGZpbGUgbWlzc2luZyBcIiArIGYpO1xuXHRcdHZhciBlaW5mbyA9IHBhcnNlX0VuY3J5cHRpb25JbmZvKGRhdGEuY29udGVudCk7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGlzIHBhc3N3b3JkLXByb3RlY3RlZFwiKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlX3ppcCh3Yiwgb3B0cykge1xuXHRcdF9zaGFwZWlkID0gMTAyNDtcblx0XHRpZihvcHRzLmJvb2tUeXBlID09IFwib2RzXCIpIHJldHVybiB3cml0ZV9vZHMod2IsIG9wdHMpO1xuXHRcdGlmKHdiICYmICF3Yi5TU0YpIHtcblx0XHRcdHdiLlNTRiA9IFNTRi5nZXRfdGFibGUoKTtcblx0XHR9XG5cdFx0aWYod2IgJiYgd2IuU1NGKSB7XG5cdFx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdFx0bWFrZV9zc2YoU1NGKTsgU1NGLmxvYWRfdGFibGUod2IuU1NGKTtcblx0XHRcdC8vICRGbG93SWdub3JlXG5cdFx0XHRvcHRzLnJldnNzZiA9IGV2ZXJ0X251bSh3Yi5TU0YpOyBvcHRzLnJldnNzZlt3Yi5TU0ZbNjU1MzVdXSA9IDA7XG5cdFx0XHRvcHRzLnNzZiA9IHdiLlNTRjtcblx0XHR9XG5cdFx0b3B0cy5yZWxzID0ge307IG9wdHMud2JyZWxzID0ge307XG5cdFx0b3B0cy5TdHJpbmdzID0gW107IG9wdHMuU3RyaW5ncy5Db3VudCA9IDA7IG9wdHMuU3RyaW5ncy5VbmlxdWUgPSAwO1xuXHRcdHZhciB3YmV4dCA9IG9wdHMuYm9va1R5cGUgPT0gXCJ4bHNiXCIgPyBcImJpblwiIDogXCJ4bWxcIjtcblx0XHR2YXIgdmJhZm10ID0gb3B0cy5ib29rVHlwZSA9PSBcInhsc2JcIiB8fCBvcHRzLmJvb2tUeXBlID09IFwieGxzbVwiO1xuXHRcdHZhciBjdCA9ICh7XG5cdFx0XHR3b3JrYm9va3M6W10sIHNoZWV0czpbXSwgY2hhcnRzOltdLCBkaWFsb2dzOltdLCBtYWNyb3M6W10sXG5cdFx0XHRyZWxzOltdLCBzdHJzOltdLCBjb21tZW50czpbXSxcblx0XHRcdGNvcmVwcm9wczpbXSwgZXh0cHJvcHM6W10sIGN1c3Rwcm9wczpbXSwgdGhlbWVzOltdLCBzdHlsZXM6W10sXG5cdFx0XHRjYWxjY2hhaW5zOltdLCB2YmE6IFtdLCBkcmF3aW5nczogW10sXG5cdFx0XHRUT0RPOltdLCB4bWxuczogXCJcIiB9KTtcblx0XHRmaXhfd3JpdGVfb3B0cyhvcHRzID0gb3B0cyB8fCB7fSk7XG5cdHZhciB6aXAgPSBuZXcganN6aXAoKTtcblx0XHR2YXIgZiA9IFwiXCIsIHJJZCA9IDA7XG5cblx0XHRvcHRzLmNlbGxYZnMgPSBbXTtcblx0XHRnZXRfY2VsbF9zdHlsZShvcHRzLmNlbGxYZnMsIHt9LCB7cmV2c3NmOntcIkdlbmVyYWxcIjowfX0pO1xuXG5cdFx0aWYoIXdiLlByb3BzKSB3Yi5Qcm9wcyA9IHt9O1xuXG5cdFx0ZiA9IFwiZG9jUHJvcHMvY29yZS54bWxcIjtcblx0XHR6aXAuZmlsZShmLCB3cml0ZV9jb3JlX3Byb3BzKHdiLlByb3BzLCBvcHRzKSk7XG5cdFx0Y3QuY29yZXByb3BzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy5yZWxzLCAyLCBmLCBSRUxTLkNPUkVfUFJPUFMpO1xuXG5cdGYgPSBcImRvY1Byb3BzL2FwcC54bWxcIjtcblx0XHRpZih3Yi5Qcm9wcyAmJiB3Yi5Qcm9wcy5TaGVldE5hbWVzKXsvKiBlbXB0eSAqL31cblx0XHRlbHNlIGlmKCF3Yi5Xb3JrYm9vayB8fCAhd2IuV29ya2Jvb2suU2hlZXRzKSB3Yi5Qcm9wcy5TaGVldE5hbWVzID0gd2IuU2hlZXROYW1lcztcblx0XHQvLyAkRmxvd0lnbm9yZVxuXHRcdGVsc2Ugd2IuUHJvcHMuU2hlZXROYW1lcyA9IHdiLlNoZWV0TmFtZXMubWFwKGZ1bmN0aW9uKHgsaSkgeyByZXR1cm4gWyh3Yi5Xb3JrYm9vay5TaGVldHNbaV18fHt9KS5IaWRkZW4gIT0gMiwgeF07fSkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHhbMF07IH0pLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4WzFdOyB9KTtcblx0XHR3Yi5Qcm9wcy5Xb3Jrc2hlZXRzID0gd2IuUHJvcHMuU2hlZXROYW1lcy5sZW5ndGg7XG5cdFx0emlwLmZpbGUoZiwgd3JpdGVfZXh0X3Byb3BzKHdiLlByb3BzLCBvcHRzKSk7XG5cdFx0Y3QuZXh0cHJvcHMucHVzaChmKTtcblx0XHRhZGRfcmVscyhvcHRzLnJlbHMsIDMsIGYsIFJFTFMuRVhUX1BST1BTKTtcblxuXHRcdGlmKHdiLkN1c3Rwcm9wcyAhPT0gd2IuUHJvcHMgJiYga2V5cyh3Yi5DdXN0cHJvcHN8fHt9KS5sZW5ndGggPiAwKSB7XG5cdFx0XHRmID0gXCJkb2NQcm9wcy9jdXN0b20ueG1sXCI7XG5cdFx0XHR6aXAuZmlsZShmLCB3cml0ZV9jdXN0X3Byb3BzKHdiLkN1c3Rwcm9wcywgb3B0cykpO1xuXHRcdFx0Y3QuY3VzdHByb3BzLnB1c2goZik7XG5cdFx0XHRhZGRfcmVscyhvcHRzLnJlbHMsIDQsIGYsIFJFTFMuQ1VTVF9QUk9QUyk7XG5cdFx0fVxuXG5cdFx0ZiA9IFwieGwvd29ya2Jvb2suXCIgKyB3YmV4dDtcblx0XHR6aXAuZmlsZShmLCB3cml0ZV93Yih3YiwgZiwgb3B0cykpO1xuXHRcdGN0Lndvcmtib29rcy5wdXNoKGYpO1xuXHRcdGFkZF9yZWxzKG9wdHMucmVscywgMSwgZiwgUkVMUy5XQik7XG5cblx0XHRmb3IocklkPTE7cklkIDw9IHdiLlNoZWV0TmFtZXMubGVuZ3RoOyArK3JJZCkge1xuXHRcdFx0dmFyIHdzcmVscyA9IHsnIWlkJzp7fX07XG5cdFx0XHR2YXIgd3MgPSB3Yi5TaGVldHNbd2IuU2hlZXROYW1lc1tySWQtMV1dO1xuXHRcdFx0dmFyIF90eXBlID0gKHdzIHx8IHt9KVtcIiF0eXBlXCJdIHx8IFwic2hlZXRcIjtcblx0XHRcdHN3aXRjaChfdHlwZSkge1xuXHRcdFx0Y2FzZSBcImNoYXJ0XCI6IC8qXG5cdFx0XHRcdGYgPSBcInhsL2NoYXJ0c2hlZXRzL3NoZWV0XCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHR6aXAuZmlsZShmLCB3cml0ZV9jcyhySWQtMSwgZiwgb3B0cywgd2IsIHdzcmVscykpO1xuXHRcdFx0XHRjdC5jaGFydHMucHVzaChmKTtcblx0XHRcdFx0YWRkX3JlbHMod3NyZWxzLCAtMSwgXCJjaGFydHNoZWV0cy9zaGVldFwiICsgcklkICsgXCIuXCIgKyB3YmV4dCwgUkVMUy5DUyk7XG5cdFx0XHRcdGJyZWFrOyAqL1xuXHRcdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRmID0gXCJ4bC93b3Jrc2hlZXRzL3NoZWV0XCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHR6aXAuZmlsZShmLCB3cml0ZV93cyhySWQtMSwgZiwgb3B0cywgd2IsIHdzcmVscykpO1xuXHRcdFx0XHRjdC5zaGVldHMucHVzaChmKTtcblx0XHRcdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcIndvcmtzaGVldHMvc2hlZXRcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuV1NbMF0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih3cykge1xuXHRcdFx0XHR2YXIgY29tbWVudHMgPSB3c1snIWNvbW1lbnRzJ107XG5cdFx0XHRcdGlmKGNvbW1lbnRzICYmIGNvbW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgY2YgPSBcInhsL2NvbW1lbnRzXCIgKyBySWQgKyBcIi5cIiArIHdiZXh0O1xuXHRcdFx0XHRcdHppcC5maWxlKGNmLCB3cml0ZV9jbW50KGNvbW1lbnRzLCBjZiwgb3B0cykpO1xuXHRcdFx0XHRcdGN0LmNvbW1lbnRzLnB1c2goY2YpO1xuXHRcdFx0XHRcdGFkZF9yZWxzKHdzcmVscywgLTEsIFwiLi4vY29tbWVudHNcIiArIHJJZCArIFwiLlwiICsgd2JleHQsIFJFTFMuQ01OVCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYod3NbJyFsZWdhY3knXSkge1xuXHRcdFx0XHRcdHppcC5maWxlKFwieGwvZHJhd2luZ3Mvdm1sRHJhd2luZ1wiICsgKHJJZCkgKyBcIi52bWxcIiwgd3JpdGVfY29tbWVudHNfdm1sKHJJZCwgd3NbJyFjb21tZW50cyddKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIHdzWychY29tbWVudHMnXTtcblx0XHRcdFx0ZGVsZXRlIHdzWychbGVnYWN5J107XG5cdFx0XHR9XG5cblx0XHRcdGlmKHdzcmVsc1snIWlkJ10ucklkMSkgemlwLmZpbGUoZ2V0X3JlbHNfcGF0aChmKSwgd3JpdGVfcmVscyh3c3JlbHMpKTtcblx0XHR9XG5cblx0XHRpZihvcHRzLlN0cmluZ3MgIT0gbnVsbCAmJiBvcHRzLlN0cmluZ3MubGVuZ3RoID4gMCkge1xuXHRcdFx0ZiA9IFwieGwvc2hhcmVkU3RyaW5ncy5cIiArIHdiZXh0O1xuXHRcdFx0emlwLmZpbGUoZiwgd3JpdGVfc3N0KG9wdHMuU3RyaW5ncywgZiwgb3B0cykpO1xuXHRcdFx0Y3Quc3Rycy5wdXNoKGYpO1xuXHRcdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInNoYXJlZFN0cmluZ3MuXCIgKyB3YmV4dCwgUkVMUy5TU1QpO1xuXHRcdH1cblxuXHRcdC8qIFRPRE86IHNvbWV0aGluZyBtb3JlIGludGVsbGlnZW50IHdpdGggdGhlbWVzICovXG5cblx0XHRmID0gXCJ4bC90aGVtZS90aGVtZTEueG1sXCI7XG5cdFx0emlwLmZpbGUoZiwgd3JpdGVfdGhlbWUod2IuVGhlbWVzLCBvcHRzKSk7XG5cdFx0Y3QudGhlbWVzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInRoZW1lL3RoZW1lMS54bWxcIiwgUkVMUy5USEVNRSk7XG5cblx0XHQvKiBUT0RPOiBzb21ldGhpbmcgbW9yZSBpbnRlbGxpZ2VudCB3aXRoIHN0eWxlcyAqL1xuXG5cdFx0ZiA9IFwieGwvc3R5bGVzLlwiICsgd2JleHQ7XG5cdFx0emlwLmZpbGUoZiwgd3JpdGVfc3R5KHdiLCBmLCBvcHRzKSk7XG5cdFx0Y3Quc3R5bGVzLnB1c2goZik7XG5cdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInN0eWxlcy5cIiArIHdiZXh0LCBSRUxTLlNUWSk7XG5cblx0XHRpZih3Yi52YmFyYXcgJiYgdmJhZm10KSB7XG5cdFx0XHRmID0gXCJ4bC92YmFQcm9qZWN0LmJpblwiO1xuXHRcdFx0emlwLmZpbGUoZiwgd2IudmJhcmF3KTtcblx0XHRcdGN0LnZiYS5wdXNoKGYpO1xuXHRcdFx0YWRkX3JlbHMob3B0cy53YnJlbHMsIC0xLCBcInZiYVByb2plY3QuYmluXCIsIFJFTFMuVkJBKTtcblx0XHR9XG5cblx0XHR6aXAuZmlsZShcIltDb250ZW50X1R5cGVzXS54bWxcIiwgd3JpdGVfY3QoY3QsIG9wdHMpKTtcblx0XHR6aXAuZmlsZSgnX3JlbHMvLnJlbHMnLCB3cml0ZV9yZWxzKG9wdHMucmVscykpO1xuXHRcdHppcC5maWxlKCd4bC9fcmVscy93b3JrYm9vay4nICsgd2JleHQgKyAnLnJlbHMnLCB3cml0ZV9yZWxzKG9wdHMud2JyZWxzKSk7XG5cblx0XHRkZWxldGUgb3B0cy5yZXZzc2Y7IGRlbGV0ZSBvcHRzLnNzZjtcblx0XHRyZXR1cm4gemlwO1xuXHR9XG5cdGZ1bmN0aW9uIGZpcnN0Ynl0ZShmLG8pIHtcblx0XHR2YXIgeCA9IFwiXCI7XG5cdFx0c3dpdGNoKChvfHx7fSkudHlwZSB8fCBcImJhc2U2NFwiKSB7XG5cdFx0XHRjYXNlICdidWZmZXInOiByZXR1cm4gW2ZbMF0sIGZbMV0sIGZbMl0sIGZbM11dO1xuXHRcdFx0Y2FzZSAnYmFzZTY0JzogeCA9IEJhc2U2NC5kZWNvZGUoZi5zdWJzdHIoMCwyNCkpOyBicmVhaztcblx0XHRcdGNhc2UgJ2JpbmFyeSc6IHggPSBmOyBicmVhaztcblx0XHRcdGNhc2UgJ2FycmF5JzogIHJldHVybiBbZlswXSwgZlsxXSwgZlsyXSwgZlszXV07XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIChvID8gby50eXBlIDogXCJ1bmRlZmluZWRcIikpO1xuXHRcdH1cblx0XHRyZXR1cm4gW3guY2hhckNvZGVBdCgwKSwgeC5jaGFyQ29kZUF0KDEpLCB4LmNoYXJDb2RlQXQoMiksIHguY2hhckNvZGVBdCgzKV07XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkX2NmYihjZmIsIG9wdHMpIHtcblx0XHRpZihjZmIuZmluZChcIkVuY3J5cHRlZFBhY2thZ2VcIikpIHJldHVybiBwYXJzZV94bHN4Y2ZiKGNmYiwgb3B0cyk7XG5cdFx0cmV0dXJuIHBhcnNlX3hsc2NmYihjZmIsIG9wdHMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVhZF96aXAoZGF0YSwgb3B0cykge1xuXHR2YXIgemlwLCBkID0gZGF0YTtcblx0XHR2YXIgbyA9IG9wdHN8fHt9O1xuXHRcdGlmKCFvLnR5cGUpIG8udHlwZSA9IChoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgPyBcImJ1ZmZlclwiIDogXCJiYXNlNjRcIjtcblx0XHRzd2l0Y2goby50eXBlKSB7XG5cdFx0XHRjYXNlIFwiYmFzZTY0XCI6IHppcCA9IG5ldyBqc3ppcChkLCB7IGJhc2U2NDp0cnVlIH0pOyBicmVhaztcblx0XHRcdGNhc2UgXCJiaW5hcnlcIjogY2FzZSBcImFycmF5XCI6IHppcCA9IG5ldyBqc3ppcChkLCB7IGJhc2U2NDpmYWxzZSB9KTsgYnJlYWs7XG5cdFx0XHRjYXNlIFwiYnVmZmVyXCI6IHppcCA9IG5ldyBqc3ppcChkKTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG8udHlwZSk7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJzZV96aXAoemlwLCBvKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWRfdXRmMTYoZGF0YSwgbykge1xuXHRcdHZhciBkID0gZGF0YTtcblx0XHRpZihvLnR5cGUgPT0gJ2Jhc2U2NCcpIGQgPSBCYXNlNjQuZGVjb2RlKGQpO1xuXHRcdGQgPSBjcHRhYmxlLnV0aWxzLmRlY29kZSgxMjAwLCBkLnNsaWNlKDIpKTtcblx0XHRvLnR5cGUgPSBcImJpbmFyeVwiO1xuXHRcdGlmKGQuY2hhckNvZGVBdCgwKSA9PSAweDNDKSByZXR1cm4gcGFyc2VfeGxtbChkLG8pO1xuXHRcdHJldHVybiBQUk4udG9fd29ya2Jvb2soZCwgbyk7XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkU3luYyhkYXRhLCBvcHRzKSB7XG5cdFx0dmFyIHppcCwgZCA9IGRhdGEsIG49WzBdO1xuXHRcdHZhciBvID0gb3B0c3x8e307XG5cdFx0X3NzZm9wdHMgPSB7fTtcblx0XHRpZihvLmRhdGVORikgX3NzZm9wdHMuZGF0ZU5GID0gby5kYXRlTkY7XG5cdFx0aWYoIW8udHlwZSkgby50eXBlID0gKGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSA/IFwiYnVmZmVyXCIgOiBcImJhc2U2NFwiO1xuXHRcdGlmKG8udHlwZSA9PSBcImZpbGVcIikgeyBvLnR5cGUgPSBcImJ1ZmZlclwiOyBkID0gX2ZzLnJlYWRGaWxlU3luYyhkYXRhKTsgfVxuXHRcdHN3aXRjaCgobiA9IGZpcnN0Ynl0ZShkLCBvKSlbMF0pIHtcblx0XHRcdGNhc2UgMHhEMDogcmV0dXJuIHJlYWRfY2ZiKENGQi5yZWFkKGQsIG8pLCBvKTtcblx0XHRcdGNhc2UgMHgwOTogcmV0dXJuIHBhcnNlX3hsc2NmYihzMmEoby50eXBlID09PSAnYmFzZTY0JyA/IEJhc2U2NC5kZWNvZGUoZCkgOiBkKSwgbyk7XG5cdFx0XHRjYXNlIDB4M0M6IHJldHVybiBwYXJzZV94bG1sKGQsIG8pO1xuXHRcdFx0Y2FzZSAweDQ5OiBpZihuWzFdID09IDB4NDQpIHJldHVybiByZWFkX3diX0lEKGQsIG8pOyBicmVhaztcblx0XHRcdGNhc2UgMHg1NDogaWYoblsxXSA9PSAweDQxICYmIG5bMl0gPT0gMHg0MiAmJiBuWzNdID09IDB4NEMpIHJldHVybiBESUYudG9fd29ya2Jvb2soZCwgbyk7IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDUwOiBpZihuWzFdID09IDB4NEIgJiYgblsyXSA8IDB4MjAgJiYgblszXSA8IDB4MjApIHJldHVybiByZWFkX3ppcChkLCBvKTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4RUY6IHJldHVybiBuWzNdID09IDB4M0MgPyBwYXJzZV94bG1sKGQsIG8pIDogUFJOLnRvX3dvcmtib29rKGQsbyk7XG5cdFx0XHRjYXNlIDB4RkY6IGlmKG5bMV0gPT0gMHhGRSl7IHJldHVybiByZWFkX3V0ZjE2KGQsIG8pOyB9IGJyZWFrO1xuXHRcdFx0Y2FzZSAweDAwOiBpZihuWzFdID09IDB4MDAgJiYgblsyXSA+PSAweDAyICYmIG5bM10gPT0gMHgwMCkgcmV0dXJuIFdLXy50b193b3JrYm9vayhkLCBvKTsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4MDM6IGNhc2UgMHg4MzogY2FzZSAweDhCOiByZXR1cm4gREJGLnRvX3dvcmtib29rKGQsIG8pO1xuXHRcdH1cblx0XHRpZihuWzJdIDw9IDEyICYmIG5bM10gPD0gMzEpIHJldHVybiBEQkYudG9fd29ya2Jvb2soZCwgbyk7XG5cdFx0aWYoMHgyMD5uWzBdfHxuWzBdPjB4N0YpIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGZpbGUgXCIgKyBuLmpvaW4oXCJ8XCIpKTtcblx0XHRyZXR1cm4gUFJOLnRvX3dvcmtib29rKGQsIG8pO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVhZEZpbGVTeW5jKGZpbGVuYW1lLCBvcHRzKSB7XG5cdFx0dmFyIG8gPSBvcHRzfHx7fTsgby50eXBlID0gJ2ZpbGUnO1xuXHRcdHJldHVybiByZWFkU3luYyhmaWxlbmFtZSwgbyk7XG5cdH1cblx0ZnVuY3Rpb24gd3JpdGVfemlwX3R5cGUod2IsIG9wdHMpIHtcblx0XHR2YXIgbyA9IG9wdHN8fHt9O1xuXHRcdHZhciB6ID0gd3JpdGVfemlwKHdiLCBvKTtcblx0XHR2YXIgb29wdHMgPSB7fTtcblx0XHRpZihvLmNvbXByZXNzaW9uKSBvb3B0cy5jb21wcmVzc2lvbiA9ICdERUZMQVRFJztcblx0XHRzd2l0Y2goby50eXBlKSB7XG5cdFx0XHRjYXNlIFwiYmFzZTY0XCI6IG9vcHRzLnR5cGUgPSBcImJhc2U2NFwiOyBicmVhaztcblx0XHRcdGNhc2UgXCJiaW5hcnlcIjogb29wdHMudHlwZSA9IFwic3RyaW5nXCI7IGJyZWFrO1xuXHRcdFx0Y2FzZSBcImJ1ZmZlclwiOlxuXHRcdFx0Y2FzZSBcImZpbGVcIjogb29wdHMudHlwZSA9IFwibm9kZWJ1ZmZlclwiOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCB0eXBlIFwiICsgby50eXBlKTtcblx0XHR9XG5cdFx0aWYoby50eXBlID09PSBcImZpbGVcIikgcmV0dXJuIF9mcy53cml0ZUZpbGVTeW5jKG8uZmlsZSwgei5nZW5lcmF0ZShvb3B0cykpO1xuXHRcdHJldHVybiB6LmdlbmVyYXRlKG9vcHRzKTtcblx0fVxuXG5cdC8qIFRPRE86IHRlc3QgY29uc2lzdGVuY3kgKi9cblx0ZnVuY3Rpb24gd3JpdGVfYnN0cl90eXBlKG91dCwgb3B0cykge1xuXHRcdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIEJhc2U2NC5lbmNvZGUob3V0KTtcblx0XHRcdGNhc2UgXCJiaW5hcnlcIjogcmV0dXJuIG91dDtcblx0XHRcdGNhc2UgXCJmaWxlXCI6IHJldHVybiBfZnMud3JpdGVGaWxlU3luYyhvcHRzLmZpbGUsIG91dCwgJ2JpbmFyeScpO1xuXHRcdFx0Y2FzZSBcImJ1ZmZlclwiOiB7XG5cdFx0XHRcdGlmKGhhc19idWYpIHJldHVybiBuZXcgQnVmZmVyKG91dCwgJ3V0ZjgnKTtcblx0XHRcdFx0ZWxzZSByZXR1cm4gb3V0LnNwbGl0KFwiXCIpLm1hcChmdW5jdGlvbihjKSB7IHJldHVybiBjLmNoYXJDb2RlQXQoMCk7IH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdH1cblxuXHQvKiBUT0RPOiB0ZXN0IGNvbnNpc3RlbmN5ICovXG5cdGZ1bmN0aW9uIHdyaXRlX3N0cmluZ190eXBlKG91dCwgb3B0cykge1xuXHRcdHN3aXRjaChvcHRzLnR5cGUpIHtcblx0XHRcdGNhc2UgXCJiYXNlNjRcIjogcmV0dXJuIEJhc2U2NC5lbmNvZGUob3V0KTtcblx0XHRcdGNhc2UgXCJiaW5hcnlcIjogcmV0dXJuIG91dDtcblx0XHRcdGNhc2UgXCJmaWxlXCI6IHJldHVybiBfZnMud3JpdGVGaWxlU3luYyhvcHRzLmZpbGUsIG91dCwgJ3V0ZjgnKTtcblx0XHRcdGNhc2UgXCJidWZmZXJcIjoge1xuXHRcdFx0XHRpZihoYXNfYnVmKSByZXR1cm4gbmV3IEJ1ZmZlcihvdXQsICd1dGY4Jyk7XG5cdFx0XHRcdGVsc2UgcmV0dXJuIG91dC5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oYykgeyByZXR1cm4gYy5jaGFyQ29kZUF0KDApOyB9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHR5cGUgXCIgKyBvcHRzLnR5cGUpO1xuXHR9XG5cblx0LyogVE9ETzogdGVzdCBjb25zaXN0ZW5jeSAqL1xuXHRmdW5jdGlvbiB3cml0ZV9iaW5hcnlfdHlwZShvdXQsIG9wdHMpIHtcblx0XHRzd2l0Y2gob3B0cy50eXBlKSB7XG5cdFx0XHRjYXNlIFwiYmFzZTY0XCI6XG5cdFx0XHRjYXNlIFwiYmluYXJ5XCI6XG5cdFx0XHRcdHZhciBic3RyID0gXCJcIjtcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG91dC5sZW5ndGg7ICsraSkgYnN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG91dFtpXSk7XG5cdFx0XHRcdHJldHVybiBvcHRzLnR5cGUgPT0gJ2Jhc2U2NCcgPyBCYXNlNjQuZW5jb2RlKGJzdHIpIDogYnN0cjtcblx0XHRcdGNhc2UgXCJmaWxlXCI6IHJldHVybiBfZnMud3JpdGVGaWxlU3luYyhvcHRzLmZpbGUsIG91dCk7XG5cdFx0XHRjYXNlIFwiYnVmZmVyXCI6IHJldHVybiBvdXQ7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgdHlwZSBcIiArIG9wdHMudHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gd3JpdGVTeW5jKHdiLCBvcHRzKSB7XG5cdFx0Y2hlY2tfd2Iod2IpO1xuXHRcdHZhciBvID0gb3B0c3x8e307XG5cdFx0c3dpdGNoKG8uYm9va1R5cGUgfHwgJ3hsc2InKSB7XG5cdFx0XHRjYXNlICd4bWwnOlxuXHRcdFx0Y2FzZSAneGxtbCc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV94bG1sKHdiLCBvKSwgbyk7XG5cdFx0XHRjYXNlICdzbGsnOlxuXHRcdFx0Y2FzZSAnc3lsayc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9zbGtfc3RyKHdiLCBvKSwgbyk7XG5cdFx0XHRjYXNlICdodG1sJzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHdyaXRlX2h0bV9zdHIod2IsIG8pLCBvKTtcblx0XHRcdGNhc2UgJ3R4dCc6IHJldHVybiB3cml0ZV9ic3RyX3R5cGUod3JpdGVfdHh0X3N0cih3YiwgbyksIG8pO1xuXHRcdFx0Y2FzZSAnY3N2JzogcmV0dXJuIHdyaXRlX3N0cmluZ190eXBlKHdyaXRlX2Nzdl9zdHIod2IsIG8pLCBvKTtcblx0XHRcdGNhc2UgJ2RpZic6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9kaWZfc3RyKHdiLCBvKSwgbyk7XG5cdFx0XHRjYXNlICdwcm4nOiByZXR1cm4gd3JpdGVfc3RyaW5nX3R5cGUod3JpdGVfcHJuX3N0cih3YiwgbyksIG8pO1xuXHRcdFx0Y2FzZSAnZm9kcyc6IHJldHVybiB3cml0ZV9zdHJpbmdfdHlwZSh3cml0ZV9vZHMod2IsIG8pLCBvKTtcblx0XHRcdGNhc2UgJ2JpZmYyJzogcmV0dXJuIHdyaXRlX2JpbmFyeV90eXBlKHdyaXRlX2JpZmZfYnVmKHdiLCBvKSwgbyk7XG5cdFx0XHRjYXNlICd4bHN4Jzpcblx0XHRcdGNhc2UgJ3hsc20nOlxuXHRcdFx0Y2FzZSAneGxzYic6XG5cdFx0XHRjYXNlICdvZHMnOiByZXR1cm4gd3JpdGVfemlwX3R5cGUod2IsIG8pO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yIChcIlVucmVjb2duaXplZCBib29rVHlwZSB8XCIgKyBvLmJvb2tUeXBlICsgXCJ8XCIpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc29sdmVfYm9va190eXBlKG8vKj9Xcml0ZUZpbGVPcHRzKi8pIHtcblx0XHRpZighby5ib29rVHlwZSkgc3dpdGNoKG8uZmlsZS5zbGljZShvLmZpbGUubGFzdEluZGV4T2YoXCIuXCIpKS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRjYXNlICcueGxzeCc6IG8uYm9va1R5cGUgPSAneGxzeCc7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnLnhsc20nOiBvLmJvb2tUeXBlID0gJ3hsc20nOyBicmVhaztcblx0XHRcdGNhc2UgJy54bHNiJzogby5ib29rVHlwZSA9ICd4bHNiJzsgYnJlYWs7XG5cdFx0XHRjYXNlICcuZm9kcyc6IG8uYm9va1R5cGUgPSAnZm9kcyc7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnLnhsbWwnOiBvLmJvb2tUeXBlID0gJ3hsbWwnOyBicmVhaztcblx0XHRcdGNhc2UgJy5zeWxrJzogby5ib29rVHlwZSA9ICdzeWxrJzsgYnJlYWs7XG5cdFx0XHRjYXNlICcuaHRtbCc6IG8uYm9va1R5cGUgPSAnaHRtbCc7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnLnhscyc6IG8uYm9va1R5cGUgPSAnYmlmZjInOyBicmVhaztcblx0XHRcdGNhc2UgJy54bWwnOiBvLmJvb2tUeXBlID0gJ3htbCc7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnLm9kcyc6IG8uYm9va1R5cGUgPSAnb2RzJzsgYnJlYWs7XG5cdFx0XHRjYXNlICcuY3N2Jzogby5ib29rVHlwZSA9ICdjc3YnOyBicmVhaztcblx0XHRcdGNhc2UgJy50eHQnOiBvLmJvb2tUeXBlID0gJ3R4dCc7IGJyZWFrO1xuXHRcdFx0Y2FzZSAnLmRpZic6IG8uYm9va1R5cGUgPSAnZGlmJzsgYnJlYWs7XG5cdFx0XHRjYXNlICcucHJuJzogby5ib29rVHlwZSA9ICdwcm4nOyBicmVhaztcblx0XHRcdGNhc2UgJy5zbGsnOiBvLmJvb2tUeXBlID0gJ3N5bGsnOyBicmVhaztcblx0XHRcdGNhc2UgJy5odG0nOiBvLmJvb2tUeXBlID0gJ2h0bWwnOyBicmVhaztcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZUZpbGVTeW5jKHdiLCBmaWxlbmFtZSwgb3B0cykge1xuXHRcdHZhciBvID0gb3B0c3x8e307IG8udHlwZSA9ICdmaWxlJztcblx0XHRvLmZpbGUgPSBmaWxlbmFtZTtcblx0XHRyZXNvbHZlX2Jvb2tfdHlwZShvKTtcblx0XHRyZXR1cm4gd3JpdGVTeW5jKHdiLCBvKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdyaXRlRmlsZUFzeW5jKGZpbGVuYW1lLCB3Yiwgb3B0cywgY2IpIHtcblx0XHR2YXIgbyA9IG9wdHN8fHt9OyBvLnR5cGUgPSAnZmlsZSc7XG5cdFx0by5maWxlID0gZmlsZW5hbWU7XG5cdFx0cmVzb2x2ZV9ib29rX3R5cGUobyk7XG5cdFx0by50eXBlID0gJ2J1ZmZlcic7XG5cdFx0dmFyIF9jYiA9IGNiOyBpZighKF9jYiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkgX2NiID0gKG9wdHMpO1xuXHRcdHJldHVybiBfZnMud3JpdGVGaWxlKGZpbGVuYW1lLCB3cml0ZVN5bmMod2IsIG8pLCBfY2IpO1xuXHR9XG5cdGZ1bmN0aW9uIHNoZWV0X3RvX2pzb24oc2hlZXQsIG9wdHMpe1xuXHRcdGlmKHNoZWV0ID09IG51bGwgfHwgc2hlZXRbXCIhcmVmXCJdID09IG51bGwpIHJldHVybiBbXTtcblx0XHR2YXIgdmFsID0ge3Q6J24nLHY6MH0sIGhlYWRlciA9IDAsIG9mZnNldCA9IDEsIGhkciA9IFtdLCBpc2VtcHR5ID0gdHJ1ZSwgdj0wLCB2dj1cIlwiO1xuXHRcdHZhciByID0ge3M6e3I6MCxjOjB9LGU6e3I6MCxjOjB9fTtcblx0XHR2YXIgbyA9IG9wdHMgIT0gbnVsbCA/IG9wdHMgOiB7fTtcblx0XHR2YXIgcmF3ID0gby5yYXc7XG5cdFx0dmFyIGRlZnZhbCA9IG8uZGVmdmFsO1xuXHRcdHZhciByYW5nZSA9IG8ucmFuZ2UgIT0gbnVsbCA/IG8ucmFuZ2UgOiBzaGVldFtcIiFyZWZcIl07XG5cdFx0aWYoby5oZWFkZXIgPT09IDEpIGhlYWRlciA9IDE7XG5cdFx0ZWxzZSBpZihvLmhlYWRlciA9PT0gXCJBXCIpIGhlYWRlciA9IDI7XG5cdFx0ZWxzZSBpZihBcnJheS5pc0FycmF5KG8uaGVhZGVyKSkgaGVhZGVyID0gMztcblx0XHRzd2l0Y2godHlwZW9mIHJhbmdlKSB7XG5cdFx0XHRjYXNlICdzdHJpbmcnOiByID0gc2FmZV9kZWNvZGVfcmFuZ2UocmFuZ2UpOyBicmVhaztcblx0XHRcdGNhc2UgJ251bWJlcic6IHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pOyByLnMuciA9IHJhbmdlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHIgPSByYW5nZTtcblx0XHR9XG5cdFx0aWYoaGVhZGVyID4gMCkgb2Zmc2V0ID0gMDtcblx0XHR2YXIgcnIgPSBlbmNvZGVfcm93KHIucy5yKTtcblx0XHR2YXIgY29scyA9IG5ldyBBcnJheShyLmUuYy1yLnMuYysxKTtcblx0XHR2YXIgb3V0ID0gbmV3IEFycmF5KHIuZS5yLXIucy5yLW9mZnNldCsxKTtcblx0XHR2YXIgb3V0aSA9IDAsIGNvdW50ZXIgPSAwO1xuXHRcdHZhciBkZW5zZSA9IEFycmF5LmlzQXJyYXkoc2hlZXQpO1xuXHRcdHZhciBSID0gci5zLnIsIEMgPSAwLCBDQyA9IDA7XG5cdFx0aWYoZGVuc2UgJiYgIXNoZWV0W1JdKSBzaGVldFtSXSA9IFtdO1xuXHRcdGZvcihDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykge1xuXHRcdFx0Y29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0XHR2YWwgPSBkZW5zZSA/IHNoZWV0W1JdW0NdIDogc2hlZXRbY29sc1tDXSArIHJyXTtcblx0XHRcdHN3aXRjaChoZWFkZXIpIHtcblx0XHRcdFx0Y2FzZSAxOiBoZHJbQ10gPSBDIC0gci5zLmM7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6IGhkcltDXSA9IGNvbHNbQ107IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDM6IGhkcltDXSA9IG8uaGVhZGVyW0MgLSByLnMuY107IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmKHZhbCA9PSBudWxsKSBjb250aW51ZTtcblx0XHRcdFx0XHR2diA9IHYgPSBmb3JtYXRfY2VsbCh2YWwsIG51bGwsIG8pO1xuXHRcdFx0XHRcdGNvdW50ZXIgPSAwO1xuXHRcdFx0XHRcdGZvcihDQyA9IDA7IENDIDwgaGRyLmxlbmd0aDsgKytDQykgaWYoaGRyW0NDXSA9PSB2dikgdnYgPSB2ICsgXCJfXCIgKyAoKytjb3VudGVyKTtcblx0XHRcdFx0XHRoZHJbQ10gPSB2djtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHJvdyA9IChoZWFkZXIgPT09IDEpID8gW10gOiB7fTtcblx0XHRmb3IgKFIgPSByLnMuciArIG9mZnNldDsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0XHRpc2VtcHR5ID0gdHJ1ZTtcblx0XHRcdGlmKGhlYWRlciA9PT0gMSkgcm93ID0gW107XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0cm93ID0ge307XG5cdFx0XHRcdGlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgdHJ5IHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvdywgJ19fcm93TnVtX18nLCB7dmFsdWU6UiwgZW51bWVyYWJsZTpmYWxzZX0pOyB9IGNhdGNoKGUpIHsgcm93Ll9fcm93TnVtX18gPSBSOyB9XG5cdFx0XHRcdGVsc2Ugcm93Ll9fcm93TnVtX18gPSBSO1xuXHRcdFx0fVxuXHRcdFx0aWYoIWRlbnNlIHx8IHNoZWV0W1JdKSBmb3IgKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHRcdHZhbCA9IGRlbnNlID8gc2hlZXRbUl1bQ10gOiBzaGVldFtjb2xzW0NdICsgcnJdO1xuXHRcdFx0XHRpZih2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwudCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0aWYoZGVmdmFsID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlmKGhkcltDXSAhPSBudWxsKSB7IHJvd1toZHJbQ11dID0gZGVmdmFsOyBpc2VtcHR5ID0gZmFsc2U7IH1cblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2ID0gdmFsLnY7XG5cdFx0XHRcdHN3aXRjaCh2YWwudCl7XG5cdFx0XHRcdFx0Y2FzZSAneic6IGlmKHYgPT0gbnVsbCkgYnJlYWs7IGNvbnRpbnVlO1xuXHRcdFx0XHRcdGNhc2UgJ2UnOiBjb250aW51ZTtcblx0XHRcdFx0XHRjYXNlICdzJzogY2FzZSAnZCc6IGNhc2UgJ2InOiBjYXNlICduJzogYnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgdHlwZSAnICsgdmFsLnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGhkcltDXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYodiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRpZihkZWZ2YWwgIT09IHVuZGVmaW5lZCkgcm93W2hkcltDXV0gPSBkZWZ2YWw7XG5cdFx0XHRcdFx0XHRlbHNlIGlmKHJhdyAmJiB2ID09PSBudWxsKSByb3dbaGRyW0NdXSA9IG51bGw7XG5cdFx0XHRcdFx0XHRlbHNlIGNvbnRpbnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyb3dbaGRyW0NdXSA9IHJhdyA/IHYgOiBmb3JtYXRfY2VsbCh2YWwsdixvKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXNlbXB0eSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZigoaXNlbXB0eSA9PT0gZmFsc2UpIHx8IChoZWFkZXIgPT09IDEgPyBvLmJsYW5rcm93cyAhPT0gZmFsc2UgOiAhIW8uYmxhbmtyb3dzKSkgb3V0W291dGkrK10gPSByb3c7XG5cdFx0fVxuXHRcdG91dC5sZW5ndGggPSBvdXRpO1xuXHRcdHJldHVybiBvdXQ7XG5cdH1cblxuXHR2YXIgcXJlZyA9IC9cIi9nO1xuXHRmdW5jdGlvbiBtYWtlX2Nzdl9yb3coc2hlZXQsIHIsIFIsIGNvbHMsIGZzLCBycywgRlMsIG8pIHtcblx0XHR2YXIgaXNlbXB0eSA9IHRydWU7XG5cdFx0dmFyIHJvdyA9IFwiXCIsIHR4dCA9IFwiXCIsIHJyID0gZW5jb2RlX3JvdyhSKTtcblx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSB7XG5cdFx0XHR2YXIgdmFsID0gby5kZW5zZSA/IChzaGVldFtSXXx8W10pW0NdOiBzaGVldFtjb2xzW0NdICsgcnJdO1xuXHRcdFx0aWYodmFsID09IG51bGwpIHR4dCA9IFwiXCI7XG5cdFx0XHRlbHNlIGlmKHZhbC52ICE9IG51bGwpIHtcblx0XHRcdFx0aXNlbXB0eSA9IGZhbHNlO1xuXHRcdFx0XHR0eHQgPSAnJytmb3JtYXRfY2VsbCh2YWwsIG51bGwsIG8pO1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwLCBjYyA9IDA7IGkgIT09IHR4dC5sZW5ndGg7ICsraSkgaWYoKGNjID0gdHh0LmNoYXJDb2RlQXQoaSkpID09PSBmcyB8fCBjYyA9PT0gcnMgfHwgY2MgPT09IDM0KSB7dHh0ID0gXCJcXFwiXCIgKyB0eHQucmVwbGFjZShxcmVnLCAnXCJcIicpICsgXCJcXFwiXCI7IGJyZWFrOyB9XG5cdFx0XHRcdGlmKHR4dCA9PSBcIklEXCIpIHR4dCA9ICdcIklEXCInO1xuXHRcdFx0fSBlbHNlIGlmKHZhbC5mICE9IG51bGwgJiYgIXZhbC5GKSB7XG5cdFx0XHRcdGlzZW1wdHkgPSBmYWxzZTtcblx0XHRcdFx0dHh0ID0gJz0nICsgdmFsLmY7IGlmKHR4dC5pbmRleE9mKFwiLFwiKSA+PSAwKSB0eHQgPSAnXCInICsgdHh0LnJlcGxhY2UocXJlZywgJ1wiXCInKSArICdcIic7XG5cdFx0XHR9IGVsc2UgdHh0ID0gXCJcIjtcblx0XHRcdC8qIE5PVEU6IEV4Y2VsIENTViBkb2VzIG5vdCBzdXBwb3J0IGFycmF5IGZvcm11bGFlICovXG5cdFx0XHRyb3cgKz0gKEMgPT09IHIucy5jID8gXCJcIiA6IEZTKSArIHR4dDtcblx0XHR9XG5cdFx0aWYoby5ibGFua3Jvd3MgPT09IGZhbHNlICYmIGlzZW1wdHkpIHJldHVybiBudWxsO1xuXHRcdHJldHVybiByb3c7XG5cdH1cblxuXHRmdW5jdGlvbiBzaGVldF90b19jc3Yoc2hlZXQsIG9wdHMpIHtcblx0XHR2YXIgb3V0ID0gW107XG5cdFx0dmFyIG8gPSBvcHRzID09IG51bGwgPyB7fSA6IG9wdHM7XG5cdFx0aWYoc2hlZXQgPT0gbnVsbCB8fCBzaGVldFtcIiFyZWZcIl0gPT0gbnVsbCkgcmV0dXJuIFwiXCI7XG5cdFx0dmFyIHIgPSBzYWZlX2RlY29kZV9yYW5nZShzaGVldFtcIiFyZWZcIl0pO1xuXHRcdHZhciBGUyA9IG8uRlMgIT09IHVuZGVmaW5lZCA/IG8uRlMgOiBcIixcIiwgZnMgPSBGUy5jaGFyQ29kZUF0KDApO1xuXHRcdHZhciBSUyA9IG8uUlMgIT09IHVuZGVmaW5lZCA/IG8uUlMgOiBcIlxcblwiLCBycyA9IFJTLmNoYXJDb2RlQXQoMCk7XG5cdFx0dmFyIGVuZHJlZ2V4ID0gbmV3IFJlZ0V4cCgoRlM9PVwifFwiID8gXCJcXFxcfFwiIDogRlMpK1wiKyRcIik7XG5cdFx0dmFyIHJvdyA9IFwiXCIsIGNvbHMgPSBbXTtcblx0XHRvLmRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdFx0Zm9yKHZhciBDID0gci5zLmM7IEMgPD0gci5lLmM7ICsrQykgY29sc1tDXSA9IGVuY29kZV9jb2woQyk7XG5cdFx0Zm9yKHZhciBSID0gci5zLnI7IFIgPD0gci5lLnI7ICsrUikge1xuXHRcdFx0cm93ID0gbWFrZV9jc3Zfcm93KHNoZWV0LCByLCBSLCBjb2xzLCBmcywgcnMsIEZTLCBvKTtcblx0XHRcdGlmKHJvdyA9PSBudWxsKSB7IGNvbnRpbnVlOyB9XG5cdFx0XHRpZihvLnN0cmlwKSByb3cgPSByb3cucmVwbGFjZShlbmRyZWdleCxcIlwiKTtcblx0XHRcdG91dC5wdXNoKHJvdyArIFJTKTtcblx0XHR9XG5cdFx0ZGVsZXRlIG8uZGVuc2U7XG5cdFx0cmV0dXJuIG91dC5qb2luKFwiXCIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hlZXRfdG9fdHh0KHNoZWV0LCBvcHRzKSB7XG5cdFx0aWYoIW9wdHMpIG9wdHMgPSB7fTsgb3B0cy5GUyA9IFwiXFx0XCI7IG9wdHMuUlMgPSBcIlxcblwiO1xuXHRcdHZhciBzID0gc2hlZXRfdG9fY3N2KHNoZWV0LCBvcHRzKTtcblx0XHRpZih0eXBlb2YgY3B0YWJsZSA9PSAndW5kZWZpbmVkJykgcmV0dXJuIHM7XG5cdFx0dmFyIG8gPSBjcHRhYmxlLnV0aWxzLmVuY29kZSgxMjAwLCBzKTtcblx0XHRyZXR1cm4gXCJcXHhmZlxceGZlXCIgKyBvO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2hlZXRfdG9fZm9ybXVsYWUoc2hlZXQpIHtcblx0XHR2YXIgeSA9IFwiXCIsIHgsIHZhbD1cIlwiO1xuXHRcdGlmKHNoZWV0ID09IG51bGwgfHwgc2hlZXRbXCIhcmVmXCJdID09IG51bGwpIHJldHVybiBbXTtcblx0XHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pLCByciA9IFwiXCIsIGNvbHMgPSBbXSwgQztcblx0XHR2YXIgY21kcyA9IG5ldyBBcnJheSgoci5lLnItci5zLnIrMSkqKHIuZS5jLXIucy5jKzEpKTtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIGRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdFx0Zm9yKEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRmb3IodmFyIFIgPSByLnMucjsgUiA8PSByLmUucjsgKytSKSB7XG5cdFx0XHRyciA9IGVuY29kZV9yb3coUik7XG5cdFx0XHRmb3IoQyA9IHIucy5jOyBDIDw9IHIuZS5jOyArK0MpIHtcblx0XHRcdFx0eSA9IGNvbHNbQ10gKyBycjtcblx0XHRcdFx0eCA9IGRlbnNlID8gKHNoZWV0W1JdfHxbXSlbQ10gOiBzaGVldFt5XTtcblx0XHRcdFx0dmFsID0gXCJcIjtcblx0XHRcdFx0aWYoeCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblx0XHRcdFx0ZWxzZSBpZih4LkYgIT0gbnVsbCkge1xuXHRcdFx0XHRcdHkgPSB4LkY7XG5cdFx0XHRcdFx0aWYoIXguZikgY29udGludWU7XG5cdFx0XHRcdFx0dmFsID0geC5mO1xuXHRcdFx0XHRcdGlmKHkuaW5kZXhPZihcIjpcIikgPT0gLTEpIHkgPSB5ICsgXCI6XCIgKyB5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHguZiAhPSBudWxsKSB2YWwgPSB4LmY7XG5cdFx0XHRcdGVsc2UgaWYoeC50ID09ICd6JykgY29udGludWU7XG5cdFx0XHRcdGVsc2UgaWYoeC50ID09ICduJyAmJiB4LnYgIT0gbnVsbCkgdmFsID0gXCJcIiArIHgudjtcblx0XHRcdFx0ZWxzZSBpZih4LnQgPT0gJ2InKSB2YWwgPSB4LnYgPyBcIlRSVUVcIiA6IFwiRkFMU0VcIjtcblx0XHRcdFx0ZWxzZSBpZih4LncgIT09IHVuZGVmaW5lZCkgdmFsID0gXCInXCIgKyB4Lnc7XG5cdFx0XHRcdGVsc2UgaWYoeC52ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuXHRcdFx0XHRlbHNlIGlmKHgudCA9PSAncycpIHZhbCA9IFwiJ1wiICsgeC52O1xuXHRcdFx0XHRlbHNlIHZhbCA9IFwiXCIreC52O1xuXHRcdFx0XHRjbWRzW2krK10gPSB5ICsgXCI9XCIgKyB2YWw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNtZHMubGVuZ3RoID0gaTtcblx0XHRyZXR1cm4gY21kcztcblx0fVxuXG5cdGZ1bmN0aW9uIGpzb25fdG9fc2hlZXQoanMsIG9wdHMpIHtcblx0XHR2YXIgbyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHdzID0gKHt9KTtcblx0XHR2YXIgcmFuZ2UgPSAoe3M6IHtjOjAsIHI6MH0sIGU6IHtjOjAsIHI6anMubGVuZ3RofX0pO1xuXHRcdHZhciBoZHIgPSBvLmhlYWRlciB8fCBbXSwgQyA9IDA7XG5cblx0XHRmb3IodmFyIFIgPSAwOyBSICE9IGpzLmxlbmd0aDsgKytSKSB7XG5cdFx0XHRPYmplY3Qua2V5cyhqc1tSXSkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGpzW1JdLmhhc093blByb3BlcnR5KHgpOyB9KS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcblx0XHRcdFx0aWYoKEM9aGRyLmluZGV4T2YoaykpID09IC0xKSBoZHJbQz1oZHIubGVuZ3RoXSA9IGs7XG5cdFx0XHRcdHZhciB2ID0ganNbUl1ba107XG5cdFx0XHRcdHZhciB0ID0gJ3onO1xuXHRcdFx0XHRpZih0eXBlb2YgdiA9PSAnbnVtYmVyJykgdCA9ICduJztcblx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgdiA9PSAnYm9vbGVhbicpIHQgPSAnYic7XG5cdFx0XHRcdGVsc2UgaWYodHlwZW9mIHYgPT0gJ3N0cmluZycpIHQgPSAncyc7XG5cdFx0XHRcdGVsc2UgaWYodiBpbnN0YW5jZW9mIERhdGUpIHQgPSAnZCc7XG5cdFx0XHRcdHdzW2VuY29kZV9jZWxsKHtjOkMscjpSKzF9KV0gPSB7dDp0LCB2OnZ9O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJhbmdlLmUuYyA9IGhkci5sZW5ndGggLSAxO1xuXHRcdGZvcihDID0gMDsgQyA8IGhkci5sZW5ndGg7ICsrQykgd3NbZW5jb2RlX2NvbChDKSArIFwiMVwiXSA9IHt0OidzJywgdjpoZHJbQ119O1xuXHRcdHdzWychcmVmJ10gPSBlbmNvZGVfcmFuZ2UocmFuZ2UpO1xuXHRcdHJldHVybiB3cztcblx0fVxuXG5cdHZhciB1dGlscyA9IHtcblx0XHRlbmNvZGVfY29sOiBlbmNvZGVfY29sLFxuXHRcdGVuY29kZV9yb3c6IGVuY29kZV9yb3csXG5cdFx0ZW5jb2RlX2NlbGw6IGVuY29kZV9jZWxsLFxuXHRcdGVuY29kZV9yYW5nZTogZW5jb2RlX3JhbmdlLFxuXHRcdGRlY29kZV9jb2w6IGRlY29kZV9jb2wsXG5cdFx0ZGVjb2RlX3JvdzogZGVjb2RlX3Jvdyxcblx0XHRzcGxpdF9jZWxsOiBzcGxpdF9jZWxsLFxuXHRcdGRlY29kZV9jZWxsOiBkZWNvZGVfY2VsbCxcblx0XHRkZWNvZGVfcmFuZ2U6IGRlY29kZV9yYW5nZSxcblx0XHRmb3JtYXRfY2VsbDogZm9ybWF0X2NlbGwsXG5cdFx0Z2V0X2Zvcm11bGFlOiBzaGVldF90b19mb3JtdWxhZSxcblx0XHRtYWtlX2Nzdjogc2hlZXRfdG9fY3N2LFxuXHRcdG1ha2VfanNvbjogc2hlZXRfdG9fanNvbixcblx0XHRtYWtlX2Zvcm11bGFlOiBzaGVldF90b19mb3JtdWxhZSxcblx0XHRhb2FfdG9fc2hlZXQ6IGFvYV90b19zaGVldCxcblx0XHRqc29uX3RvX3NoZWV0OiBqc29uX3RvX3NoZWV0LFxuXHRcdHRhYmxlX3RvX3NoZWV0OiBwYXJzZV9kb21fdGFibGUsXG5cdFx0dGFibGVfdG9fYm9vazogdGFibGVfdG9fYm9vayxcblx0XHRzaGVldF90b19jc3Y6IHNoZWV0X3RvX2Nzdixcblx0XHRzaGVldF90b19qc29uOiBzaGVldF90b19qc29uLFxuXHRcdHNoZWV0X3RvX2Zvcm11bGFlOiBzaGVldF90b19mb3JtdWxhZSxcblx0XHRzaGVldF90b19yb3dfb2JqZWN0X2FycmF5OiBzaGVldF90b19qc29uXG5cdH07XG5cblx0KGZ1bmN0aW9uKHV0aWxzKSB7XG5cdHV0aWxzLmNvbnN0cyA9IHV0aWxzLmNvbnN0cyB8fCB7fTtcblx0ZnVuY3Rpb24gYWRkX2NvbnN0cyhSKSB7IFIuZm9yRWFjaChmdW5jdGlvbihhKXsgdXRpbHMuY29uc3RzW2FbMF1dID0gYVsxXTsgfSk7IH1cblxuXHRmdW5jdGlvbiBnZXRfZGVmYXVsdCh4LCB5LCB6KSB7IHJldHVybiB4W3ldICE9IG51bGwgPyB4W3ldIDogKHhbeV0gPSB6KTsgfVxuXG5cdC8qIGdldCBjZWxsLCBjcmVhdGluZyBhIHN0dWIgaWYgbmVjZXNzYXJ5ICovXG5cdGZ1bmN0aW9uIHdzX2dldF9jZWxsX3N0dWIod3MsIFIsIEMpIHtcblx0XHQvKiBBMSBjZWxsIGFkZHJlc3MgKi9cblx0XHRpZih0eXBlb2YgUiA9PSBcInN0cmluZ1wiKSByZXR1cm4gd3NbUl0gfHwgKHdzW1JdID0ge3Q6J3onfSk7XG5cdFx0LyogY2VsbCBhZGRyZXNzIG9iamVjdCAqL1xuXHRcdGlmKHR5cGVvZiBSICE9IFwibnVtYmVyXCIpIHJldHVybiB3c19nZXRfY2VsbF9zdHViKHdzLCBlbmNvZGVfY2VsbChSKSk7XG5cdFx0LyogUiBhbmQgQyBhcmUgMC1iYXNlZCBpbmRpY2VzICovXG5cdFx0cmV0dXJuIHdzX2dldF9jZWxsX3N0dWIod3MsIGVuY29kZV9jZWxsKHtyOlIsYzpDfSkpO1xuXHR9XG5cblx0LyogZmluZCBzaGVldCBpbmRleCBmb3IgZ2l2ZW4gbmFtZSAvIHZhbGlkYXRlIGluZGV4ICovXG5cdGZ1bmN0aW9uIHdiX3NoZWV0X2lkeCh3Yiwgc2gpIHtcblx0XHRpZih0eXBlb2Ygc2ggPT0gXCJudW1iZXJcIikge1xuXHRcdFx0aWYoc2ggPj0gMCAmJiB3Yi5TaGVldE5hbWVzLmxlbmd0aCA+IHNoKSByZXR1cm4gc2g7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBzaGVldCAjIFwiICsgc2gpO1xuXHRcdH0gZWxzZSBpZih0eXBlb2Ygc2ggPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0dmFyIGlkeCA9IHdiLlNoZWV0TmFtZXMuaW5kZXhPZihzaCk7XG5cdFx0XHRpZihpZHggPiAtMSkgcmV0dXJuIGlkeDtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNoZWV0IG5hbWUgfFwiICsgc2ggKyBcInxcIik7XG5cdFx0fSBlbHNlIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIHNoZWV0IHxcIiArIHNoICsgXCJ8XCIpO1xuXHR9XG5cblx0Lyogc2ltcGxlIGJsYW5rIHdvcmtib29rIG9iamVjdCAqL1xuXHR1dGlscy5ib29rX25ldyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7IFNoZWV0TmFtZXM6IFtdLCBTaGVldHM6IHt9IH07XG5cdH07XG5cblx0LyogYWRkIGEgd29ya3NoZWV0IHRvIHRoZSBlbmQgb2YgYSBnaXZlbiB3b3JrYm9vayAqL1xuXHR1dGlscy5ib29rX2FwcGVuZF9zaGVldCA9IGZ1bmN0aW9uKHdiLCB3cywgbmFtZSkge1xuXHRcdGlmKCFuYW1lKSBmb3IodmFyIGkgPSAxOyBpIDw9IDB4RkZGRjsgKytpKSBpZih3Yi5TaGVldE5hbWVzLmluZGV4T2YoXCJTaGVldFwiICsgaSkgPT0gLTEpIGJyZWFrO1xuXHRcdGNoZWNrX3dzX25hbWUobmFtZSk7XG5cdFx0aWYod2IuU2hlZXROYW1lcy5pbmRleE9mKG5hbWUpID49IDApIHRocm93IG5ldyBFcnJvcihcIldvcmtzaGVldCB3aXRoIG5hbWUgfFwiICsgbmFtZSArIFwifCBhbHJlYWR5IGV4aXN0cyFcIik7XG5cblx0XHR3Yi5TaGVldE5hbWVzLnB1c2gobmFtZSk7XG5cdFx0d2IuU2hlZXRzW25hbWVdID0gd3M7XG5cdH07XG5cblx0Lyogc2V0IHNoZWV0IHZpc2liaWxpdHkgKHZpc2libGUvaGlkZGVuL3ZlcnkgaGlkZGVuKSAqL1xuXHR1dGlscy5ib29rX3NldF9zaGVldF92aXNpYmlsaXR5ID0gZnVuY3Rpb24od2IsIHNoLCB2aXMpIHtcblx0XHRnZXRfZGVmYXVsdCh3YixcIldvcmtib29rXCIse30pO1xuXHRcdGdldF9kZWZhdWx0KHdiLldvcmtib29rLFwiU2hlZXRzXCIsW10pO1xuXG5cdFx0dmFyIGlkeCA9IHdiX3NoZWV0X2lkeCh3Yiwgc2gpO1xuXHRcdGdldF9kZWZhdWx0KHdiLldvcmtib29rLlNoZWV0cyxpZHgsIHt9KTtcblxuXHRcdHN3aXRjaCh2aXMpIHtcblx0XHRcdGNhc2UgMDogY2FzZSAxOiBjYXNlIDI6IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiQmFkIHNoZWV0IHZpc2liaWxpdHkgc2V0dGluZyBcIiArIHZpcyk7XG5cdFx0fVxuXHRcdHdiLldvcmtib29rLlNoZWV0c1tpZHhdLkhpZGRlbiA9IHZpcztcblx0fTtcblx0YWRkX2NvbnN0cyhbXG5cdFx0W1wiU0hFRVRfVklTSUJMRVwiLCAwXSxcblx0XHRbXCJTSEVFVF9ISURERU5cIiwgMV0sXG5cdFx0W1wiU0hFRVRfVkVSWV9ISURERU5cIiwgMl1cblx0XSk7XG5cblx0Lyogc2V0IG51bWJlciBmb3JtYXQgKi9cblx0dXRpbHMuY2VsbF9zZXRfbnVtYmVyX2Zvcm1hdCA9IGZ1bmN0aW9uKGNlbGwsIGZtdCkge1xuXHRcdGNlbGwueiA9IGZtdDtcblx0XHRyZXR1cm4gY2VsbDtcblx0fTtcblxuXHQvKiBzZXQgY2VsbCBoeXBlcmxpbmsgKi9cblx0dXRpbHMuY2VsbF9zZXRfaHlwZXJsaW5rID0gZnVuY3Rpb24oY2VsbCwgdGFyZ2V0LCB0b29sdGlwKSB7XG5cdFx0aWYoIXRhcmdldCkge1xuXHRcdFx0ZGVsZXRlIGNlbGwubDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2VsbC5sID0geyBUYXJnZXQ6IHRhcmdldCB9O1xuXHRcdFx0aWYodG9vbHRpcCkgY2VsbC5sLlRvb2x0aXAgPSB0b29sdGlwO1xuXHRcdH1cblx0XHRyZXR1cm4gY2VsbDtcblx0fTtcblxuXHQvKiBhZGQgdG8gY2VsbCBjb21tZW50cyAqL1xuXHR1dGlscy5jZWxsX2FkZF9jb21tZW50ID0gZnVuY3Rpb24oY2VsbCwgdGV4dCwgYXV0aG9yKSB7XG5cdFx0aWYoIWNlbGwuYykgY2VsbC5jID0gW107XG5cdFx0Y2VsbC5jLnB1c2goe3Q6dGV4dCwgYTphdXRob3J8fFwiU2hlZXRKU1wifSk7XG5cdH07XG5cblx0Lyogc2V0IGFycmF5IGZvcm11bGEgYW5kIGZsdXNoIHJlbGF0ZWQgY2VsbHMgKi9cblx0dXRpbHMuc2hlZXRfc2V0X2FycmF5X2Zvcm11bGEgPSBmdW5jdGlvbih3cywgcmFuZ2UsIGZvcm11bGEpIHtcblx0XHR2YXIgcm5nID0gdHlwZW9mIHJhbmdlICE9IFwic3RyaW5nXCIgPyByYW5nZSA6IHNhZmVfZGVjb2RlX3JhbmdlKHJhbmdlKTtcblx0XHR2YXIgcm5nc3RyID0gdHlwZW9mIHJhbmdlID09IFwic3RyaW5nXCIgPyByYW5nZSA6IGVuY29kZV9yYW5nZShyYW5nZSk7XG5cdFx0Zm9yKHZhciBSID0gcm5nLnMucjsgUiA8PSBybmcuZS5yOyArK1IpIGZvcih2YXIgQyA9IHJuZy5zLmM7IEMgPD0gcm5nLmUuYzsgKytDKSB7XG5cdFx0XHR2YXIgY2VsbCA9IHdzX2dldF9jZWxsX3N0dWIod3MsIFIsIEMpO1xuXHRcdFx0Y2VsbC50ID0gJ24nO1xuXHRcdFx0Y2VsbC5GID0gcm5nc3RyO1xuXHRcdFx0ZGVsZXRlIGNlbGwudjtcblx0XHRcdGlmKFIgPT0gcm5nLnMuciAmJiBDID09IHJuZy5zLmMpIGNlbGwuZiA9IGZvcm11bGE7XG5cdFx0fVxuXHRcdHJldHVybiB3cztcblx0fTtcblxuXHRyZXR1cm4gdXRpbHM7XG5cdH0pKHV0aWxzKTtcblxuXHRpZihoYXNfYnVmICYmIFwiZnVuY3Rpb25cIiAhPSAndW5kZWZpbmVkJykgKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBSZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNykuUmVhZGFibGU7XG5cblx0XHR2YXIgd3JpdGVfY3N2X3N0cmVhbSA9IGZ1bmN0aW9uKHNoZWV0LCBvcHRzKSB7XG5cdFx0XHR2YXIgc3RyZWFtID0gUmVhZGFibGUoKTtcblx0XHRcdHZhciBvdXQgPSBcIlwiO1xuXHRcdFx0dmFyIG8gPSBvcHRzID09IG51bGwgPyB7fSA6IG9wdHM7XG5cdFx0XHRpZihzaGVldCA9PSBudWxsIHx8IHNoZWV0W1wiIXJlZlwiXSA9PSBudWxsKSB7IHN0cmVhbS5wdXNoKG51bGwpOyByZXR1cm4gc3RyZWFtOyB9XG5cdFx0XHR2YXIgciA9IHNhZmVfZGVjb2RlX3JhbmdlKHNoZWV0W1wiIXJlZlwiXSk7XG5cdFx0XHR2YXIgRlMgPSBvLkZTICE9PSB1bmRlZmluZWQgPyBvLkZTIDogXCIsXCIsIGZzID0gRlMuY2hhckNvZGVBdCgwKTtcblx0XHRcdHZhciBSUyA9IG8uUlMgIT09IHVuZGVmaW5lZCA/IG8uUlMgOiBcIlxcblwiLCBycyA9IFJTLmNoYXJDb2RlQXQoMCk7XG5cdFx0XHR2YXIgZW5kcmVnZXggPSBuZXcgUmVnRXhwKChGUz09XCJ8XCIgPyBcIlxcXFx8XCIgOiBGUykrXCIrJFwiKTtcblx0XHRcdHZhciByb3cgPSBcIlwiLCBjb2xzID0gW107XG5cdFx0XHRvLmRlbnNlID0gQXJyYXkuaXNBcnJheShzaGVldCk7XG5cdFx0XHRmb3IodmFyIEMgPSByLnMuYzsgQyA8PSByLmUuYzsgKytDKSBjb2xzW0NdID0gZW5jb2RlX2NvbChDKTtcblx0XHRcdHZhciBSID0gci5zLnI7XG5cdFx0XHRzdHJlYW0uX3JlYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoUiA+IHIuZS5yKSByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG5cdFx0XHRcdHdoaWxlKFIgPD0gci5lLnIpIHtcblx0XHRcdFx0XHRyb3cgPSBtYWtlX2Nzdl9yb3coc2hlZXQsIHIsIFIsIGNvbHMsIGZzLCBycywgRlMsIG8pO1xuXHRcdFx0XHRcdGlmKHJvdyA9PSBudWxsKSB7ICsrUjsgY29udGludWU7IH1cblx0XHRcdFx0XHRpZihvLnN0cmlwKSByb3cgPSByb3cucmVwbGFjZShlbmRyZWdleCxcIlwiKTtcblx0XHRcdFx0XHRzdHJlYW0ucHVzaChyb3cgKyBSUyk7XG5cdFx0XHRcdFx0KytSO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuIHN0cmVhbTtcblx0XHR9O1xuXG5cdFx0dmFyIEhUTUxfQkVHSU4gPSBcIjxodG1sPjxib2R5Pjx0YWJsZT5cIjtcblx0XHR2YXIgSFRNTF9FTkQgPSBcIjwvdGFibGU+PC9ib2R5PjwvaHRtbD5cIjtcblxuXHRcdHZhciB3cml0ZV9odG1sX3N0cmVhbSA9IGZ1bmN0aW9uKHNoZWV0LCBvcHRzKSB7XG5cdFx0XHR2YXIgc3RyZWFtID0gUmVhZGFibGUoKTtcblxuXHRcdFx0dmFyIG8gPSBbXTtcblx0XHRcdHZhciByID0gZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pLCBjZWxsO1xuXHRcdFx0by5kZW5zZSA9IEFycmF5LmlzQXJyYXkoc2hlZXQpO1xuXHRcdFx0c3RyZWFtLnB1c2goSFRNTF9CRUdJTik7XG5cblx0XHRcdHZhciBSID0gci5zLnI7XG5cdFx0XHR2YXIgZW5kID0gZmFsc2U7XG5cdFx0XHRzdHJlYW0uX3JlYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoUiA+IHIuZS5yKSB7XG5cdFx0XHRcdFx0aWYoIWVuZCkgeyBlbmQgPSB0cnVlOyBzdHJlYW0ucHVzaChIVE1MX0VORCk7IH1cblx0XHRcdFx0XHRyZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUoUiA8PSByLmUucikge1xuXHRcdFx0XHRcdHN0cmVhbS5wdXNoKEhUTUxfLl9yb3coc2hlZXQsIHIsIFIsIG8pKTtcblx0XHRcdFx0XHQrK1I7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gc3RyZWFtO1xuXHRcdH07XG5cblx0XHRYTFNYLnN0cmVhbSA9IHtcblx0XHRcdHRvX2h0bWw6IHdyaXRlX2h0bWxfc3RyZWFtLFxuXHRcdFx0dG9fY3N2OiB3cml0ZV9jc3Zfc3RyZWFtXG5cdFx0fTtcblx0fSkoKTtcblxuXHRYTFNYLnBhcnNlX3hsc2NmYiA9IHBhcnNlX3hsc2NmYjtcblx0WExTWC5wYXJzZV9vZHMgPSBwYXJzZV9vZHM7XG5cdFhMU1gucGFyc2VfZm9kcyA9IHBhcnNlX2ZvZHM7XG5cdFhMU1gud3JpdGVfb2RzID0gd3JpdGVfb2RzO1xuXHRYTFNYLnBhcnNlX3ppcCA9IHBhcnNlX3ppcDtcblx0WExTWC5yZWFkID0gcmVhZFN5bmM7IC8veGxzcmVhZFxuXHRYTFNYLnJlYWRGaWxlID0gcmVhZEZpbGVTeW5jOyAvL3JlYWRGaWxlXG5cdFhMU1gucmVhZEZpbGVTeW5jID0gcmVhZEZpbGVTeW5jO1xuXHRYTFNYLndyaXRlID0gd3JpdGVTeW5jO1xuXHRYTFNYLndyaXRlRmlsZSA9IHdyaXRlRmlsZVN5bmM7XG5cdFhMU1gud3JpdGVGaWxlU3luYyA9IHdyaXRlRmlsZVN5bmM7XG5cdFhMU1gud3JpdGVGaWxlQXN5bmMgPSB3cml0ZUZpbGVBc3luYztcblx0WExTWC51dGlscyA9IHV0aWxzO1xuXHRYTFNYLkNGQiA9IENGQjtcblx0WExTWC5TU0YgPSBTU0Y7XG5cdH0pKCB0cnVlID8gZXhwb3J0cyA6IFhMU1gpO1xuXHQvKmV4cG9ydGVkIFhMUyAqL1xuXHR2YXIgWExTID0gWExTWDtcblx0LypleHBvcnRlZCBPRFMgKi9cblx0dmFyIE9EUyA9IFhMU1g7XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogY3BleGNlbC5qcyAoQykgMjAxMy1wcmVzZW50IFNoZWV0SlMgLS0gaHR0cDovL3NoZWV0anMuY29tICovXG5cdC8qanNoaW50IC1XMTAwICovXG5cdHZhciBjcHRhYmxlID0ge3ZlcnNpb246XCIxLjguMFwifTtcblx0Y3B0YWJsZVs0MzddID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/Dh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zCosKjwqXigqfGksOhw63Ds8O6w7HDkcKqwrrCv+KMkMKswr3CvMKhwqvCu+KWkeKWkuKWk+KUguKUpOKVoeKVouKVluKVleKVo+KVkeKVl+KVneKVnOKVm+KUkOKUlOKUtOKUrOKUnOKUgOKUvOKVnuKVn+KVmuKVlOKVqeKVpuKVoOKVkOKVrOKVp+KVqOKVpOKVpeKVmeKVmOKVkuKVk+KVq+KVquKUmOKUjOKWiOKWhOKWjOKWkOKWgM6xw5/Ok8+AzqPPg8K1z4TOps6YzqnOtOKIns+GzrXiiKniiaHCseKJpeKJpOKMoOKMocO34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbNjIwXSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/w4fDvMOpw6LDpMOgxIXDp8Oqw6vDqMOvw67Eh8OExITEmMSZxYLDtMO2xIbDu8O5xZrDlsOcwqLFgcKlxZvGksW5xbvDs8OTxYTFg8W6xbzCv+KMkMKswr3CvMKhwqvCu+KWkeKWkuKWk+KUguKUpOKVoeKVouKVluKVleKVo+KVkeKVl+KVneKVnOKVm+KUkOKUlOKUtOKUrOKUnOKUgOKUvOKVnuKVn+KVmuKVlOKVqeKVpuKVoOKVkOKVrOKVp+KVqOKVpOKVpeKVmeKVmOKVkuKVk+KVq+KVquKUmOKUjOKWiOKWhOKWjOKWkOKWgM6xw5/Ok8+AzqPPg8K1z4TOps6YzqnOtOKIns+GzrXiiKniiaHCseKJpeKJpOKMoOKMocO34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbNzM3XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/zpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoc6jzqTOpc6mzqfOqM6pzrHOss6zzrTOtc62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4LPhM+Fz4bPh8+I4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAz4nOrM6tzq7Pis6vz4zPjc+Lz47Ohs6IzonOis6Mzo7Oj8Kx4oml4omkzqrOq8O34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbODUwXSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/w4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67DrMOEw4XDicOmw4bDtMO2w7LDu8O5w7/DlsOcw7jCo8OYw5fGksOhw63Ds8O6w7HDkcKqwrrCv8KuwqzCvcK8wqHCq8K74paR4paS4paT4pSC4pSkw4HDgsOAwqnilaPilZHilZfilZ3CosKl4pSQ4pSU4pS04pSs4pSc4pSA4pS8w6PDg+KVmuKVlOKVqeKVpuKVoOKVkOKVrMKkw7DDkMOKw4vDiMSxw43DjsOP4pSY4pSM4paI4paEwqbDjOKWgMOTw5/DlMOSw7XDlcK1w77DnsOaw5vDmcO9w53Cr8K0wq3CseKAl8K+wrbCp8O3wrjCsMKowrfCucKzwrLilqDCoFwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVs4NTJdID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/Dh8O8w6nDosOkxa/Eh8OnxYLDq8WQxZHDrsW5w4TEhsOJxLnEusO0w7bEvcS+xZrFm8OWw5zFpMWlxYHDl8SNw6HDrcOzw7rEhMSFxb3FvsSYxJnCrMW6xIzFn8KrwrvilpHilpLilpPilILilKTDgcOCxJrFnuKVo+KVkeKVl+KVncW7xbzilJDilJTilLTilKzilJzilIDilLzEgsSD4pWa4pWU4pWp4pWm4pWg4pWQ4pWswqTEkcSQxI7Di8SPxYfDjcOOxJvilJjilIzilojiloTFosWu4paAw5PDn8OUxYPFhMWIxaDFocWUw5rFlcWww73DncWjwrTCrcudy5vLh8uYwqfDt8K4wrDCqMuZxbHFmMWZ4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbODU3XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/w4fDvMOpw6LDpMOgw6XDp8Oqw6vDqMOvw67EscOEw4XDicOmw4bDtMO2w7LDu8O5xLDDlsOcw7jCo8OYxZ7Fn8Ohw63Ds8O6w7HDkcSexJ/Cv8KuwqzCvcK8wqHCq8K74paR4paS4paT4pSC4pSkw4HDgsOAwqnilaPilZHilZfilZ3CosKl4pSQ4pSU4pS04pSs4pSc4pSA4pS8w6PDg+KVmuKVlOKVqeKVpuKVoOKVkOKVrMKkwrrCqsOKw4vDiO+/vcONw47Dj+KUmOKUjOKWiOKWhMKmw4ziloDDk8Ofw5TDksO1w5XCte+/vcOXw5rDm8OZw6zDv8KvwrTCrcKx77+9wr7CtsKnw7fCuMKwwqjCt8K5wrPCsuKWoMKgXCIsIEQgPSBbXSwgZSA9IHt9OyBmb3IodmFyIGk9MDtpIT1kLmxlbmd0aDsrK2kpIHsgaWYoZC5jaGFyQ29kZUF0KGkpICE9PSAweEZGRkQpIGVbZC5jaGFyQXQoaSldID0gaTsgRFtpXSA9IGQuY2hhckF0KGkpOyB9IHJldHVybiB7XCJlbmNcIjogZSwgXCJkZWNcIjogRCB9OyB9KSgpO1xuXHRjcHRhYmxlWzg2MV0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f8OHw7zDqcOiw6TDoMOlw6fDqsOrw6jDkMOww57DhMOFw4nDpsOGw7TDtsO+w7vDncO9w5bDnMO4wqPDmOKCp8aSw6HDrcOzw7rDgcONw5PDmsK/4oyQwqzCvcK8wqHCq8K74paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAzrHDn86Tz4DOo8+DwrXPhM6mzpjOqc604oiez4bOteKIqeKJocKx4oml4omk4oyg4oyhw7fiiYjCsOKImcK34oia4oG/wrLilqDCoFwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVs4NjVdID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/Dh8O8w6nDosOkw6DDpcOnw6rDq8Oow6/DrsOsw4TDhcOJw6bDhsO0w7bDssO7w7nDv8OWw5zDuMKjw5jigqfGksOhw63Ds8O6w7HDkcKqwrrCv+KMkMKswr3CvMKhwqvCpOKWkeKWkuKWk+KUguKUpOKVoeKVouKVluKVleKVo+KVkeKVl+KVneKVnOKVm+KUkOKUlOKUtOKUrOKUnOKUgOKUvOKVnuKVn+KVmuKVlOKVqeKVpuKVoOKVkOKVrOKVp+KVqOKVpOKVpeKVmeKVmOKVkuKVk+KVq+KVquKUmOKUjOKWiOKWhOKWjOKWkOKWgM6xw5/Ok8+AzqPPg8K1z4TOps6YzqnOtOKIns+GzrXiiKniiaHCseKJpeKJpOKMoOKMocO34omIwrDiiJnCt+KImuKBv8Ky4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbODY2XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/0JDQkdCS0JPQlNCV0JbQl9CY0JnQmtCb0JzQndCe0J/QoNCh0KLQo9Ck0KXQptCn0KjQqdCq0KvQrNCt0K7Qr9Cw0LHQstCz0LTQtdC20LfQuNC50LrQu9C80L3QvtC/4paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paA0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/QgdGR0ITRlNCH0ZfQjtGewrDiiJnCt+KImuKElsKk4pagwqBcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbODc0XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/4oKs77+977+977+977+94oCm77+977+977+977+977+977+977+977+977+977+977+94oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+977+977+977+977+977+977+977+9wqDguIHguILguIPguITguIXguIbguIfguIjguInguIrguIvguIzguI3guI7guI/guJDguJHguJLguJPguJTguJXguJbguJfguJjguJnguJrguJvguJzguJ3guJ7guJ/guKDguKHguKLguKPguKTguKXguKbguKfguKjguKnguKrguKvguKzguK3guK7guK/guLDguLHguLLguLPguLTguLXguLbguLfguLjguLnguLrvv73vv73vv73vv73guL/guYDguYHguYLguYPguYTguYXguYbguYfguYjguYnguYrguYvguYzguY3guY7guY/guZDguZHguZLguZPguZTguZXguZbguZfguZjguZnguZrguZvvv73vv73vv73vv71cIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbODk1XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/xIzDvMOpxI/DpMSOxaTEjcSbxJrEucONxL7HqsOEw4HDicW+xb3DtMO2w5PFr8Oaw73DlsOcxaDEvcOdxZjFpcOhw63Ds8O6xYjFh8Wuw5TFocWZxZXFlMK8wqfCq8K74paR4paS4paT4pSC4pSk4pWh4pWi4pWW4pWV4pWj4pWR4pWX4pWd4pWc4pWb4pSQ4pSU4pS04pSs4pSc4pSA4pS84pWe4pWf4pWa4pWU4pWp4pWm4pWg4pWQ4pWs4pWn4pWo4pWk4pWl4pWZ4pWY4pWS4pWT4pWr4pWq4pSY4pSM4paI4paE4paM4paQ4paAzrHDn86Tz4DOo8+DwrXPhM6mzpjOqc604oiez4bOteKIqeKJocKx4oml4omk4oyg4oyhw7fiiYjCsOKImcK34oia4oG/wrLilqDCoFwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVs5MzJdID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gW10sIGUgPSB7fSwgRCA9IFtdLCBqO1xuXHREWzBdID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vvaHvvaLvvaPvvaTvvaXvvabvvafvvajvvanvvarvvavvvazvva3vva7vva/vvbDvvbHvvbLvvbPvvbTvvbXvvbbvvbfvvbjvvbnvvbrvvbvvvbzvvb3vvb7vvb/vvoDvvoHvvoLvvoPvvoTvvoXvvobvvofvvojvvonvvorvvovvvozvvo3vvo7vvo/vvpDvvpHvvpLvvpPvvpTvvpXvvpbvvpfvvpjvvpnvvprvvpvvvpzvvp3vvp7vvp/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMF0ubGVuZ3RoOyArK2opIGlmKERbMF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFswXVtqXV0gPSAwICsgajsgZFswICsgal0gPSBEWzBdW2pdO31cblx0RFsxMjldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73jgIDjgIHjgILvvIzvvI7jg7vvvJrvvJvvvJ/vvIHjgpvjgpzCtO+9gMKo77y+77+j77y/44O944O+44Kd44Ke44CD5Lud44CF44CG44CH44O84oCV4oCQ77yP77y8772e4oil772c4oCm4oCl4oCY4oCZ4oCc4oCd77yI77yJ44CU44CV77y777y9772b772d44CI44CJ44CK44CL44CM44CN44CO44CP44CQ44CR77yL77yNwrHDl++/vcO377yd4omg77yc77ye4omm4omn4oie4oi04pmC4pmAwrDigLLigLPihIPvv6XvvITvv6Dvv6HvvIXvvIPvvIbvvIrvvKDCp+KYhuKYheKXi+KXj+KXjuKXh+KXhuKWoeKWoOKWs+KWsuKWveKWvOKAu+OAkuKGkuKGkOKGkeKGk+OAk++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKIiOKIi+KKhuKKh+KKguKKg+KIquKIqe+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKIp+KIqO+/ouKHkuKHlOKIgOKIg++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKIoOKKpeKMkuKIguKIh+KJoeKJkuKJquKJq+KImuKIveKIneKIteKIq+KIrO+/ve+/ve+/ve+/ve+/ve+/ve+/veKEq+KAsOKZr+KZreKZquKAoOKAocK277+977+977+977+94pev77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEyOV0ubGVuZ3RoOyArK2opIGlmKERbMTI5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEyOV1bal1dID0gMzMwMjQgKyBqOyBkWzMzMDI0ICsgal0gPSBEWzEyOV1bal07fVxuXHREWzEzMF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+8kO+8ke+8ku+8k++8lO+8le+8lu+8l++8mO+8me+/ve+/ve+/ve+/ve+/ve+/ve+/ve+8oe+8ou+8o++8pO+8pe+8pu+8p++8qO+8qe+8qu+8q++8rO+8re+8ru+8r++8sO+8se+8su+8s++8tO+8te+8tu+8t++8uO+8ue+8uu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+9ge+9gu+9g++9hO+9he+9hu+9h++9iO+9ie+9iu+9i++9jO+9je+9ju+9j++9kO+9ke+9ku+9k++9lO+9le+9lu+9l++9mO+9me+9mu+/ve+/ve+/ve+/veOBgeOBguOBg+OBhOOBheOBhuOBh+OBiOOBieOBiuOBi+OBjOOBjeOBjuOBj+OBkOOBkeOBkuOBk+OBlOOBleOBluOBl+OBmOOBmeOBmuOBm+OBnOOBneOBnuOBn+OBoOOBoeOBouOBo+OBpOOBpeOBpuOBp+OBqOOBqeOBquOBq+OBrOOBreOBruOBr+OBsOOBseOBsuOBs+OBtOOBteOBtuOBt+OBuOOBueOBuuOBu+OBvOOBveOBvuOBv+OCgOOCgeOCguOCg+OChOOCheOChuOCh+OCiOOCieOCiuOCi+OCjOOCjeOCjuOCj+OCkOOCkeOCkuOCk++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzBdLmxlbmd0aDsgKytqKSBpZihEWzEzMF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzBdW2pdXSA9IDMzMjgwICsgajsgZFszMzI4MCArIGpdID0gRFsxMzBdW2pdO31cblx0RFsxMzFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73jgqHjgqLjgqPjgqTjgqXjgqbjgqfjgqjjgqnjgqrjgqvjgqzjgq3jgq7jgq/jgrDjgrHjgrLjgrPjgrTjgrXjgrbjgrfjgrjjgrnjgrrjgrvjgrzjgr3jgr7jgr/jg4Djg4Hjg4Ljg4Pjg4Tjg4Xjg4bjg4fjg4jjg4njg4rjg4vjg4zjg43jg47jg4/jg5Djg5Hjg5Ljg5Pjg5Tjg5Xjg5bjg5fjg5jjg5njg5rjg5vjg5zjg53jg57jg5/vv73jg6Djg6Hjg6Ljg6Pjg6Tjg6Xjg6bjg6fjg6jjg6njg6rjg6vjg6zjg63jg67jg6/jg7Djg7Hjg7Ljg7Pjg7Tjg7Xjg7bvv73vv73vv73vv73vv73vv73vv73vv73Okc6SzpPOlM6VzpbOl86YzpnOms6bzpzOnc6ezp/OoM6hzqPOpM6lzqbOp86ozqnvv73vv73vv73vv73vv73vv73vv73vv73Osc6yzrPOtM61zrbOt864zrnOus67zrzOvc6+zr/PgM+Bz4PPhM+Fz4bPh8+Iz4nvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTMxXS5sZW5ndGg7ICsraikgaWYoRFsxMzFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTMxXVtqXV0gPSAzMzUzNiArIGo7IGRbMzM1MzYgKyBqXSA9IERbMTMxXVtqXTt9XG5cdERbMTMyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+90JDQkdCS0JPQlNCV0IHQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+90LDQsdCy0LPQtNC10ZHQttC30LjQudC60LvQvNC977+90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGP77+977+977+977+977+977+977+977+977+977+977+977+977+94pSA4pSC4pSM4pSQ4pSY4pSU4pSc4pSs4pSk4pS04pS84pSB4pSD4pSP4pST4pSb4pSX4pSj4pSz4pSr4pS74pWL4pSg4pSv4pSo4pS34pS/4pSd4pSw4pSl4pS44pWC77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzMl0ubGVuZ3RoOyArK2opIGlmKERbMTMyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzMl1bal1dID0gMzM3OTIgKyBqOyBkWzMzNzkyICsgal0gPSBEWzEzMl1bal07fVxuXHREWzEzNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKRoOKRoeKRouKRo+KRpOKRpeKRpuKRp+KRqOKRqeKRquKRq+KRrOKRreKRruKRr+KRsOKRseKRsuKRs+KFoOKFoeKFouKFo+KFpOKFpeKFpuKFp+KFqOKFqe+/veONieOMlOOMouONjeOMmOOMp+OMg+OMtuONkeONl+OMjeOMpuOMo+OMq+ONiuOMu+OOnOOOneOOnuOOjuOOj+OPhOOOoe+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veONu++/veOAneOAn+KEluOPjeKEoeOKpOOKpeOKpuOKp+OKqOOIseOIsuOIueONvuONveONvOKJkuKJoeKIq+KIruKIkeKImuKKpeKIoOKIn+KKv+KIteKIqeKIqu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzVdLmxlbmd0aDsgKytqKSBpZihEWzEzNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzVdW2pdXSA9IDM0NTYwICsgajsgZFszNDU2MCArIGpdID0gRFsxMzVdW2pdO31cblx0RFsxMzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73kupzllJblqIPpmL/lk4DmhJvmjKjlp7bpgKLokbXojJznqZDmgqrmj6HmuKXml63okaboiqbpr7XmopPlnKfmlqHmibHlrpvlp5Dombvpo7TntaLntr7pro7miJbnsp/oorflronlurXmjInmmpfmoYjpl4fpno3mnY/ku6XkvIrkvY3kvp3lgYnlm7LlpLflp5TlqIHlsInmg5/mhI/mhbDmmJPmpIXngrrnlY/nlbDnp7vntq3nt6/og4PokI7ooaPorILpgZXpgbrljLvkupXkuqXln5/ogrLpg4Hno6/kuIDlo7HmuqLpgLjnqLLojKjoiovpsK/lhYHljbDlkr3lk6Hlm6Dlp7vlvJXpo7Lmt6vog6TolK3vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM2XS5sZW5ndGg7ICsraikgaWYoRFsxMzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM2XVtqXV0gPSAzNDgxNiArIGo7IGRbMzQ4MTYgKyBqXSA9IERbMTM2XVtqXTt9XG5cdERbMTM3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Zmi6Zmw6Zqg6Z+75ZCL5Y+z5a6H54OP57696L+C6Zuo5Y2v6bWc56q65LiR56KT6Ie85rim5ZiY5ZSE5qyd6JSa6bC75ael5Y6p5rWm55Oc6ZaP5ZmC5LqR6YGL6Zuy6I2P6aSM5Y+h5Za25ayw5b2x5pig5puz5qCE5rC45rOz5rSp55Gb55uI56mO6aC06Iux6KGb6Kmg6Yut5ray55ar55uK6aeF5oKm6KyB6LaK6Zay5qaO5Y6t5YaG77+95ZyS5aCw5aWE5a605bu25oCo5o6p5o+05rK/5ryU54KO54SU54WZ54eV54y/57iB6Im26IuR6JaX6YGg6Ymb6bSb5aGp5pa85rGa55Sl5Ye55aSu5aWl5b6A5b+c5oq85pe65qiq5qyn5q60546L57+B6KWW6bSs6bSO6buE5bKh5rKW6I275YSE5bGL5oa26IeG5qG254mh5LmZ5L+65Y245oGp5rip56mP6Z+z5LiL5YyW5Luu5L2V5Ly95L6h5L2z5Yqg5Y+v5ZiJ5aSP5auB5a625a+h56eR5pqH5p6c5p625q2M5rKz54Gr54+C56aN56a+56i8566H6Iqx6Iub6IyE6I236I+v6I+T6J2m6Kqy5Zip6LKo6L+m6YGO6Zye6JqK5L+E5bOo5oiR54mZ55S76Iel6Iq96Ju+6LOA6ZuF6aST6aeV5LuL5Lya6Kej5Zue5aGK5aOK5bu75b+r5oCq5oKU5oGi5oeQ5oiS5ouQ5pS577+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzN10ubGVuZ3RoOyArK2opIGlmKERbMTM3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzN11bal1dID0gMzUwNzIgKyBqOyBkWzM1MDcyICsgal0gPSBEWzEzN11bal07fVxuXHREWzEzOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemtgeaZpuaisOa1t+eBsOeVjOeahue1teiKpeifuemWi+majuiyneWHseWKvuWkluWSs+Wus+W0luaFqOamgua2r+eijeiTi+ihl+ipsumOp+mquOa1rOmmqOibmeWeo+afv+ibjumIjuWKg+Wah+WQhOW7k+aLoeaSueagvOaguOauu+eNsueiuuepq+immuinkui1q+i8g+mDremWo+malOmdqeWtpuWys+alvemhjemhjuaOm+esoOaoq++/veapv+aitumwjea9n+WJsuWWneaBsOaLrOa0u+a4h+a7keiRm+ikkOi9hOS4lOmwueWPtuakm+aouumehOagquWFnOerg+iSsumHnOmOjOWZm+m0qOagouiMheiQseeypeWIiOiLheeTpuS5vuS+g+WGoOWvkuWIiuWLmOWLp+W3u+WWmuWgquWnpuWujOWumOWvm+W5suW5ueaCo+aEn+aFo+aGvuaPm+aVouafkeahk+ajuuasvuatk+axl+a8oua+l+a9heeSsOeUmOebo+eci+erv+euoeewoee3qee8tue/sOiCneiJpuiOnuims+irjOiyq+mChOmRkemWk+mWkemWoumZpemfk+mkqOiImOS4uOWQq+WyuOW3jOeOqeeZjOecvOWyqee/q+i0i+mbgemgkemhlOmhmOS8geS8juWNseWWnOWZqOWfuuWlh+WsieWvhOWykOW4jOW5vuW/jOaPruacuuaXl+aXouacn+aji+ajhO+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzhdLmxlbmd0aDsgKytqKSBpZihEWzEzOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzhdW2pdXSA9IDM1MzI4ICsgajsgZFszNTMyOCArIGpdID0gRFsxMzhdW2pdO31cblx0RFsxMzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mqZ/luLDmr4XmsJfmsb3nlb/npYjlraPnqIDntIDlvr3opo/oqJjosrTotbfou4zovJ3po6LpqI7prLzkuoDlgb3lhIDlppPlrpzmiK/mioDmk6zmrLrniqDnlpHnpYfnvqnon7voqrzorbDmjqzoj4rpnqDlkInlkIPllqvmoZTmqZjoqbDnoKfmnbXpu43ljbTlrqLohJromZDpgIbkuJjkuYXku4fkvJHlj4rlkLjlrq7lvJPmgKXmlZHvv73mnL3msYLmsbLms6PngbjnkIPnqbbnqq7nrIjntJrns77ntabml6fniZvljrvlsYXlt6jmi5Lmi6DmjJnmuKDomZroqLHot53pi7jmvIHnpqbprZrkuqjkuqvkuqzkvpvkvqDlg5HlhYfnq7blhbHlh7bljZTljKHljb/lj6vllqzlooPls6HlvLflvYrmgK/mgZDmga3mjJ/mlZnmqYvms4Hni4Lni63nn6/og7johIXoiIjolY7pg7fpj6Hpn7/ppZfpqZrku7Dlh53lsK3mmoHmpa3lsYDmm7LmpbXnjonmoZDnsoHlg4Xli6TlnYflt77pjKbmlqTmrKPmrL3nkLTnpoHnpr3nrYvnt4roirnoj4zoob/opZ/orLnov5Hph5HlkJ/pioDkuZ3lgLblj6XljLrni5fnjpbnn6noi6bouq/pp4bpp4jpp5LlhbfmhJromZ7llrDnqbrlgbblr5PpgYfpmoXkuLLmq5vph6flsZHlsYjvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM5XS5sZW5ndGg7ICsraikgaWYoRFsxMzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM5XVtqXV0gPSAzNTU4NCArIGo7IGRbMzU1ODQgKyBqXSA9IERbMTM5XVtqXTt9XG5cdERbMTQwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95o6Y56qf5rKT6Z206L2h56qq54aK6ZqI57KC5qCX57mw5qGR6Y2s5Yuy5ZCb6Jar6KiT576k6LuN6YOh5Y2m6KKI56WB5L+C5YK+5YiR5YWE5ZWT5Zyt54+q5Z6L5aWR5b2i5b6E5oG15oW25oWn5oap5o6y5pC65pWs5pmv5qGC5riT55Wm56i957O757WM57aZ57mL572r6IyO6I2K6JuN6KiI6Kmj6K2m6Lu96aCa6baP6Iq46L+O6a+o77+95YqH5oif5pKD5r+A6ZqZ5qGB5YKR5qyg5rG65r2U56m057WQ6KGA6Kij5pyI5Lu25YC55YCm5YGl5YW85Yi45Ymj5Zan5ZyP5aCF5auM5bu65oay5oe45ouz5o2y5qSc5qip54m954qs54yu56CU56Gv57W555yM6IKp6KaL6KyZ6LOi6LuS6YGj6Y216Zm66aGV6aiT6bm45YWD5Y6f5Y6z5bm75bym5rib5rqQ546E54++57WD6Ii36KiA6Ku66ZmQ5LmO5YCL5Y+k5ZG85Zu65aeR5a2k5bex5bqr5byn5oi45pWF5p6v5rmW54uQ57OK6KK06IKh6IOh6I+w6JmO6KqH6Leo6Yi36ZuH6aGn6byT5LqU5LqS5LyN5Y2I5ZGJ5ZC+5aiv5b6M5b6h5oKf5qKn5qqO55Ga56KB6Kqe6Kqk6K236YaQ5Lme6a+J5Lqk5L285L6v5YCZ5YCW5YWJ5YWs5Yqf5Yq55Yu+5Y6a5Y+j5ZCR77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0MF0ubGVuZ3RoOyArK2opIGlmKERbMTQwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0MF1bal1dID0gMzU4NDAgKyBqOyBkWzM1ODQwICsgal0gPSBEWzE0MF1bal07fVxuXHREWzE0MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWQjuWWieWdkeWeouWlveWtlOWtneWuj+W3peW3p+W3t+W5uOW6g+W6muW6t+W8mOaBkuaFjOaKl+aLmOaOp+aUu+aYguaZg+abtOadreagoeail+ani+axn+a0qua1qea4r+a6neeUsueah+ehrOeov+ezoOe0hee0mOe1nue2seiAleiAg+iCr+iCseiFlOiGj+iIquiNkuihjOihoeism+iyouizvOmDiumFtemJseegv+mLvOmWpOmZje+/vemghemmmemrmOm0u+WJm+WKq+WPt+WQiOWjleaLt+a/oOixqui9n+m6ueWFi+WIu+WRiuWbveepgOmFt+m1oOm7kueNhOa8ieiFsOeUkeW/veaDmumqqOeLm+i+vOatpOmgg+S7iuWbsOWdpOWivuWpmuaBqOaHh+aYj+aYhuagueaisea3t+eXlee0uuiJrumtguS6m+S9kOWPieWUhuW1r+W3puW3ruafu+aymeeRs+egguipkOmOluijn+WdkOW6p+aMq+WCteWCrOWGjeacgOWTieWhnuWmu+WusOW9qeaJjeaOoeagveats+a4iOeBvemHh+eKgOegleegpuelreaWjue0sOiPnOijgei8iemam+WJpOWcqOadkOe9quiyoeWGtOWdgumYquWguuamiuiCtOWSsuW0juWfvOeilem3uuS9nOWJiuWSi+aQvuaYqOaclOafteeqhOetlue0oumMr+ahnOmureesueWMmeWGiuWIt++/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDFdLmxlbmd0aDsgKytqKSBpZihEWzE0MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDFdW2pdXSA9IDM2MDk2ICsgajsgZFszNjA5NiArIGpdID0gRFsxNDFdW2pdO31cblx0RFsxNDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lr5/mi7bmkq7mk6bmnK3mrrrolqnpm5HnmpDpr5bmjYzpjIbprqvnmr/mmZLkuInlgpjlj4LlsbHmg6jmkpLmlaPmoZ/nh6bnj4rnlKPnrpfnuoLompXoroPos5vphbjppJDmlqzmmqvmrovku5Xku5TkvLrkvb/liLrlj7jlj7Lll6Plm5vlo6vlp4vlp4nlp7/lrZDlsY3luILluKvlv5fmgJ3mjIfmlK/lrZzmlq/mlr3ml6jmnp3mraLvv73mrbvmsI/njYXnpYnnp4Hns7jntJnntKvogqLohILoh7PoppboqZ7oqanoqaboqozoq67os4fos5zpm4zpo7zmra/kuovkvLzkvo3lhZDlrZflr7rmhYjmjIHmmYLmrKHmu4vmsrvniL7nkr3nl5Tno4HnpLrogIzogLPoh6rokpTovp7msZDpub/lvI/orZjptKvnq7rou7jlro3pm6vkuIPlj7Hln7flpLHlq4nlrqTmgonmub/mvIbnlr7os6rlrp/olIDnr6DlgbLmn7Toip3lsaHolYrnuJ7oiI7lhpnlsITmjajotabmlpznha7npL7ntJfogIXorJ3ou4rpga7om4fpgqrlgJ/li7rlsLrmnZPngbzniLXphYzph4jpjKvoi6Xlr4LlvLHmg7nkuLvlj5blrojmiYvmnLHmrorni6nnj6DnqK7ohavotqPphZLpppblhJLlj5flkarlr7/mjojmqLnntqzpnIDlm5rlj47lkajvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQyXS5sZW5ndGg7ICsraikgaWYoRFsxNDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQyXVtqXV0gPSAzNjM1MiArIGo7IGRbMzYzNTIgKyBqXSA9IERbMTQyXVtqXTt9XG5cdERbMTQzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95a6X5bCx5bee5L+u5oSB5ou+5rSy56eA56eL57WC57mN57+S6Iet6Iif6JKQ6KGG6KWy6K6Q6Lm06Lyv6YCx6YWL6YWs6ZuG6Yac5LuA5L2P5YWF5Y2B5b6T5oiO5p+U5rGB5riL542j57im6YeN6YqD5Y+U5aSZ5a6/5reR56Wd57iu57Kb5aG+54af5Ye66KGT6L+w5L+K5bO75pil556s56uj6Iic6ae/5YeG5b6q5pes5qWv5q6J5rez77+95rqW5r2k55u+57SU5beh6YG16YaH6aCG5Yem5Yid5omA5pqR5puZ5ria5bq257eS572y5pu46Jav6Je36Ku45Yqp5Y+Z5aWz5bqP5b6Q5oGV6Yuk6Zmk5YK35YSf5Yud5Yyg5Y2H5Y+s5ZOo5ZWG5ZSx5ZiX5aWo5aa+5ai85a615bCG5bCP5bCR5bCa5bqE5bqK5bug5b2w5om/5oqE5oub5o6M5o235piH5piM5pit5pm25p2+5qKi5qif5qi15rK85raI5riJ5rmY54S854Sm54Wn55eH55yB56Gd56SB56Wl56ew56ug56yR57Kn57S56IKW6I+W6JKL6JWJ6KGd6KOz6Kif6Ki86KmU6Kmz6LGh6LOe6Yak6Ymm6Y2+6ZCY6Zqc6Z6Y5LiK5LiI5Lie5LmX5YaX5Ymw5Z+O5aC05aOM5ayi5bi45oOF5pO+5p2h5p2W5rWE54q255Wz56mj6JK46K2y6Ya46Yyg5Zix5Z+06aO+77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0M10ubGVuZ3RoOyArK2opIGlmKERbMTQzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0M11bal1dID0gMzY2MDggKyBqOyBkWzM2NjA4ICsgal0gPSBEWzE0M11bal07fVxuXHREWzE0NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaLreakjeaulueHree5lOiBt+iJsuinpumjn+idlei+seWwu+S8uOS/oeS+teWUh+WooOWvneWvqeW/g+aFjuaMr+aWsOaZi+ajruamm+a1uOa3seeUs+eWueecn+elnuenpue0s+iHo+iKr+iWquimquiouui6q+i+m+mAsumHnemch+S6uuS7geWIg+WhteWjrOWwi+eUmuWwveiFjuioiui/hemZo+mdreespeirj+mgiOmFouWbs+WOqO+/vemAl+WQueWeguW4peaOqOawtOeCiuedoeeyi+e/oOihsOmBgumFlOmMkOmMmOmaj+eRnumrhOW0h+W1qeaVsOaeoui2qOmbm+aNruadieakmeiPhemgl+mbgOijvua+hOaRuuWvuOS4lueArOeVneaYr+WHhOWItuWLouWnk+W+geaAp+aIkOaUv+aVtOaYn+aZtOajsuagluato+a4heeJsueUn+ebm+eyvuiBluWjsOijveilv+iqoOiqk+iri+mAnemGkumdkumdmeaWieeojuiEhumau+W4reaDnOaImuaWpeaYlOaekOefs+epjeexjee4vuiEiuiyrOi1pOi3oei5n+eiqeWIh+aLmeaOpeaRguaKmOioreeqg+evgOiqrOmbque1tuiIjOidieS7meWFiOWNg+WNoOWuo+WwguWwluW3neaIpuaJh+aSsOagk+agtOaziea1hea0l+afk+a9nOeFjueFveaXi+epv+euree3mu+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDRdLmxlbmd0aDsgKytqKSBpZihEWzE0NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDRdW2pdXSA9IDM2ODY0ICsgajsgZFszNjg2NCArIGpdID0gRFsxNDRdW2pdO31cblx0RFsxNDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nuYrnvqjohbroiJvoiLnolqboqa7os47ot7Xpgbjpgbfpiq3pipHploPprq7liY3lloTmvLjnhLblhajnpoXnuZXohrPns47lmYzloZHlsqjmjqrmm77mm73mpZrni5nnlo/nlo7npI7npZbnp5/nspfntKDntYTomIfoqLTpmLvpgaHpvKDlg6flibXlj4zlj6LlgInllqrlo67lpY/niL3lrovlsaTljJ3mg6Pmg7PmjZzmjoPmjL/mjrvvv73mk43ml6nmm7nlt6Pmp43mp73mvJXnh6Xkuonnl6nnm7jnqpPns5/nt4/ntpzogaHojYnojZjokazokrzol7voo4XotbDpgIHpga3pjpfpnJzpqJLlg4/lopfmho7oh5PolLXotIjpgKDkv4PlgbTliYfljbPmga/mjYnmnZ/muKzotrPpgJ/kv5flsZ7os4rml4/ntprljZLoopblhbbmj4PlrZjlravlsIrmkI3mnZHpgZzku5blpJrlpKrmsbDoqZHllL7loJXlpqXmg7DmiZPmn4HoiLXmpZXpmYDpp4TpqKjkvZPloIblr77ogJDlsrHluK/lvoXmgKDmhYvmiLTmm7/ms7Dmu57og47ohb/oi5TooovosrjpgIDpgK7pmorpu5vpr5vku6Plj7DlpKfnrKzpho3poYzpt7nmu53ngKfljZPllYTlroXmiZjmip7mi5PmsqLmv6/nkKLoqJfpkLjmv4Hoq77ojLjlh6fom7jlj6rvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ1XS5sZW5ndGg7ICsraikgaWYoRFsxNDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ1XVtqXV0gPSAzNzEyMCArIGo7IGRbMzcxMjAgKyBqXSA9IERbMTQ1XVtqXTt9XG5cdERbMTQ2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95Y+p5L2G6YGU6L6w5aWq6ISx5be956uq6L6/5qOa6LC354u46bGI5qi96Kqw5Li55Y2Y5ZiG5Z2m5ouF5o6i5pem5q2O5reh5rmb54Kt55+t56uv566q57a76IC96IOG6JuL6KqV6Y2b5Zuj5aOH5by+5pat5pqW5qqA5q6155S36KuH5YCk55+l5Zyw5byb5oGl5pm65rGg55e056ia572u6Ie06JyY6YGF6aaz56+J55Wc56u5562R6JOE77+96YCQ56ep56qS6Iy25auh552A5Lit5Luy5a6Z5b+g5oq95pi85p+x5rOo6Jmr6KG36Ki76YWO6Yuz6aeQ5qiX54Cm54yq6Iun6JGX6LKv5LiB5YWG5YeL5ZaL5a+15biW5biz5bqB5byU5by15b2r5b605oey5oyR5pqi5pyd5r2u54mS55S655y66IG06IS56IW46J226Kq/6Kuc6LaF6Lez6Yqa6ZW36aCC6bOl5YuF5o2X55u05pyV5rKI54+N6LOD6Y6u6Zmz5rSl5aKc5qSO5qeM6L+96Y6a55eb6YCa5aGa5qCC5o605qe75L2D5rys5p+Y6L676JSm57a06Y2U5qS/5r2w5Z2q5aO35ays57Ss54iq5ZCK6Yej6ba05Lqt5L2O5YGc5YG15YmD6LKe5ZGI5aCk5a6a5bid5bqV5bqt5bu35byf5oKM5oq15oy65o+Q5qKv5rGA56KH56aO56iL57eg6ImH6KiC6Kum6LmE6YCT77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0Nl0ubGVuZ3RoOyArK2opIGlmKERbMTQ2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0Nl1bal1dID0gMzczNzYgKyBqOyBkWzM3Mzc2ICsgal0gPSBEWzE0Nl1bal07fVxuXHREWzE0N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemCuOmEremHmOm8juazpeaRmOaTouaVtea7tOeahOesm+mBqemPkea6uuWTsuW+ueaSpOi9jei/remJhOWFuOWhq+WkqeWxleW6l+a3u+e6j+eUnOiyvOi7oumhm+eCueS8neauv+a+seeUsOmbu+WFjuWQkOWgteWhl+WmrOWxoOW+kuaWl+adnOa4oeeZu+iPn+izremAlOmDvemNjeegpeeguuWKquW6puWcn+WltOaAkuWAkuWFmuWGrO+/veWHjeWIgOWUkOWhlOWhmOWll+WuleWztuW2i+aCvOaKleaQreadseahg+aivOajn+ebl+a3mOa5r+a2m+eBr+eHiOW9k+eXmOelt+etieetlOetkuezlue1seWIsOiRo+iVqeiXpOiojuishOixhui4j+mAg+mAj+mQmemZtumgremosOmXmOWDjeWLleWQjOWgguWwjuaGp+aSnua0nuees+erpeiDtOiQhOmBk+mKheWzoOm0h+WMv+W+l+W+s+a2nOeJueedo+emv+evpOavkueLrOiqreagg+apoeWHuOeqgeaktOWxiumztuiLq+WvhemFieeAnuWZuOWxr+aDh+aVpuayjOixmumBgemgk+WRkeabh+mIjeWliOmCo+WGheS5jeWHquiWmeisjueBmOaNuumNi+aloummtOe4hOeVt+WNl+aloOi7n+mbo+axneS6jOWwvOW8kOi/qeWMguizkeiCieiZueW7v+aXpeS5s+WFpe+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDddLmxlbmd0aDsgKytqKSBpZihEWzE0N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDddW2pdXSA9IDM3NjMyICsgajsgZFszNzYzMiArIGpdID0gRFsxNDddW2pdO31cblx0RFsxNDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lpoLlsL/pn67ku7vlporlv43oqo3mv6HnprDnpaLlr6fokbHnjKvnhrHlubTlv7Xmjbvmkprnh4PnspjkuYPlu7zkuYvln5zlmqLmgqnmv4PntI3og73ohLPohr/ovrLoppfomqTlt7Tmiormkq3opofmnbfms6LmtL7nkLbnoLTlqYbnvbXoiq3ppqzkv7Plu4Pmi53mjpLmlZfmna/nm4PniYzog4zogrrovKnphY3lgI3ln7nlqpLmooXvv73mpbPnhaTni73osrflo7Los6DpmarpgJnonb/np6Tnn6fokKnkvK/liaXljZrmi43mn4/ms4rnmb3nrpTnspXoiLboloTov6vmm53mvKDniIbnuJvojqvpp4Hpuqblh73nrrHnobLnrrjogofnrYjmq6jluaHogoznlZHnlaDlhavpiaLmuoznmbrphpfpq6rkvJDnvbDmipznrY/plqXps6nlmbrloZnom6TpmrzkvLTliKTljYrlj43lj5vluIbmkKzmlpHmnb/msL7msY7niYjniq/nj63nlZTnuYHoiKzol6nosqnnr4Tph4bnhanpoJLpo6/mjL3mmannlarnm6Tno5DolYPom67ljKrljZHlkKblpoPluoflvbzmgrLmiYnmibnmiqvmlpDmr5Tms4znlrLnmq7nopHnp5jnt4vnvbfogqXooqvoqrnosrvpgb/pnZ7po5vmqIvnsLjlgpnlsL7lvq7mnofmr5jnkLXnnInnvo7vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ4XS5sZW5ndGg7ICsraikgaWYoRFsxNDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ4XVtqXV0gPSAzNzg4OCArIGo7IGRbMzc4ODggKyBqXSA9IERbMTQ4XVtqXTt9XG5cdERbMTQ5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96by75p+K56iX5Yy555aL6aut5b2m6Iad6I+x6IKY5by85b+F55Wi562G6YC85qGn5aer5aqb57SQ55m+6Kys5L+15b2q5qiZ5rC35ryC55Oi56Wo6KGo6KmV6LG55buf5o+P55eF56eS6IuX6Yyo6Yuy6JKc6Jut6bCt5ZOB5b2s5paM5rWc54CV6LKn6LOT6aC75pWP55O25LiN5LuY5Z+g5aSr5amm5a+M5Yao5biD5bqc5oCW5om25pW377+95pan5pmu5rWu54i256ym6IWQ6Iaa6IqZ6K2c6LKg6LOm6LW06Zic6ZmE5L6u5pKr5q2m6Iie6JGh6JWq6YOo5bCB5qWT6aKo6JG66JWX5LyP5Ymv5b6p5bmF5pyN56aP6IW56KSH6KaG5re15byX5omV5rK45LuP54mp6a6S5YiG5ZC75Zm05aKz5oak5omu54Sa5aWu57KJ57Oe57Sb6Zuw5paH6IGe5LiZ5L215YW15aGA5bmj5bmz5byK5p+E5Lim6JS96ZaJ6Zmb57Gz6aCB5YO75aOB55mW56Kn5Yil556l6JSR566G5YGP5aSJ54mH56+H57eo6L666L+U6YGN5L6/5YuJ5aip5byB6Z6t5L+d6IiX6Yuq5ZyD5o2V5q2p55Sr6KOc6LyU56mC5Yuf5aKT5oWV5oiK5pqu5q+N57C/6I+p5YCj5L+45YyF5ZGG5aCx5aWJ5a6d5bOw5bOv5bSp5bqW5oqx5o2n5pS+5pa55pyL77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0OV0ubGVuZ3RoOyArK2opIGlmKERbMTQ5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0OV1bal1dID0gMzgxNDQgKyBqOyBkWzM4MTQ0ICsgal0gPSBEWzE0OV1bal07fVxuXHREWzE1MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veazleazoeeDueegsue4q+iDnuiKs+iQjOiTrOicguikkuioquixiumCpumLkumjvemzs+m1rOS5j+S6oeWCjeWJluWdiuWmqOW4veW/mOW/meaIv+aatOacm+afkOajkuWGkue0oeiCquiGqOisgOiyjOiyv+mJvumYsuWQoOmgrOWMl+WDleWNnOWiqOaSsuactOeJp+edpuephumHpuWLg+ayoeauhuWggOW5jOWllOacrOe/u+WHoeebhu+/veaRqeejqOmtlOm6u+Wfi+WmueaYp+aemuavjuWTqeanmeW5leiGnOaelemuquafvumxkuahneS6puS/o+WPiOaKueacq+ayq+i/hOS+ree5rem6v+S4h+aFoua6gOa8q+iUk+WRs+acqumtheW3s+euleWyrOWvhuicnOa5iuiTkeeolOiEiOWmmeeyjeawkeecoOWLmeWkoueEoeeJn+efm+mcp+m1oeaki+Wpv+WomOWGpeWQjeWRveaYjuebn+i/t+mKmOmztOWnqueJnea7heWFjeajiee2v+e3rOmdoum6uuaRuOaooeiMguWmhOWtn+avm+eMm+ebsue2suiAl+iSmeWEsuacqOm7meebruadouWLv+mkheWwpOaIu+exvuiysOWVj+aCtue0i+mWgOWMgeS5n+WGtuWknOeIuuiAtumHjuW8peefouWOhOW9uee0hOiWrOios+i6jemdluafs+iWrumRk+aEieaEiOayueeZku+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTBdLmxlbmd0aDsgKytqKSBpZihEWzE1MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTBdW2pdXSA9IDM4NDAwICsgajsgZFszODQwMCArIGpdID0gRFsxNTBdW2pdO31cblx0RFsxNTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oq63ovLjllK/kvZHlhKrli4flj4vlrqXlub3mgqDmhoLmj5bmnInmn5rmuafmtoznjLbnjLfnlLHnpZDoo5XoqpjpgYrpgpHpg7Xpm4Tono3lpJXkuojkvZnkuI7oqonovL/poJDlgq3lubzlppblrrnlurjmj5rmj7rmk4Hmm5zmpYrmp5jmtIvmurbnhpTnlKjnqq/nvorogIDokYnok4nopoHorKHouIrpgaXpmb3ppIrmhb7mipHmrLLvv73msoPmtbTnv4znv7zmt4DnvoXonrroo7jmnaXojrHpoLzpm7fmtJvntaHokL3pharkubHljbXltZDmrITmv6vol43omK3opqfliKnlkI/lsaXmnY7moqjnkIbnkoPnl6Loo4/oo6Hph4zpm6Lpmbjlvovnjofnq4vokY7mjqDnlaXlionmtYHmupznkInnlZnnoavnspLpmobnq5zpvo3kvrbmha7ml4XomZzkuobkuq7lg5rkuKHlh4zlr67mlpnmooHmtrznjJ/nmYLnnq3nqJzns6foia/oq5Lpgbzph4/pmbXpoJjlipvnt5HlgKvljpjmnpfmt4vnh5DnkLPoh6jovKrpmqPpsZfpup/nkaDloYHmtpnntK/poZ7ku6TkvLbkvovlhrflirHltrrmgJznjrLnpLzoi5PpiLTpmrfpm7bpnIrpupfpvaLmmqbmrbTliJfliqPng4joo4Llu4nmgYvmhpDmvKPnhYnnsL7nt7Toga/vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTUxXS5sZW5ndGg7ICsraikgaWYoRFsxNTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTUxXVtqXV0gPSAzODY1NiArIGo7IGRbMzg2NTYgKyBqXSA9IERbMTUxXVtqXTt9XG5cdERbMTUyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96JOu6YCj6Yys5ZGC6a2v5quT54KJ6LOC6Lev6Zyy5Yq05amB5buK5byE5pyX5qW85qaU5rWq5ryP54mi54u856+t6ICB6IG+6J2L6YOO5YWt6bqT56aE6IKL6Yyy6KuW5YCt5ZKM6Kmx5q2q6LOE6ISH5oOR5p6g6bey5LqZ5LqY6bCQ6Kmr6JeB6JWo5qSA5rm+56KX6IWV77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95byM5LiQ5LiV5Liq5Lix5Li25Li85Li/5LmC5LmW5LmY5LqC5LqF6LGr5LqK6IiS5byN5LqO5Lqe5Lqf5Lqg5Lqi5Lqw5Lqz5Lq25LuO5LuN5LuE5LuG5LuC5LuX5Lue5Lut5Luf5Lu35LyJ5L2a5Lyw5L2b5L2d5L2X5L2H5L225L6I5L6P5L6Y5L275L2p5L2w5L6R5L2v5L6G5L6W5YSY5L+U5L+f5L+O5L+Y5L+b5L+R5L+a5L+Q5L+k5L+l5YCa5YCo5YCU5YCq5YCl5YCF5Lyc5L+25YCh5YCp5YCs5L++5L+v5YCR5YCG5YGD5YGH5pyD5YGV5YGQ5YGI5YGa5YGW5YGs5YG45YKA5YKa5YKF5YK05YKy77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1Ml0ubGVuZ3RoOyArK2opIGlmKERbMTUyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1Ml1bal1dID0gMzg5MTIgKyBqOyBkWzM4OTEyICsgal0gPSBEWzE1Ml1bal07fVxuXHREWzE1M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWDieWDiuWCs+WDguWDluWDnuWDpeWDreWDo+WDruWDueWDteWEieWEgeWEguWEluWEleWElOWEmuWEoeWEuuWEt+WEvOWEu+WEv+WFgOWFkuWFjOWFlOWFoueruOWFqeWFquWFruWGgOWGguWbmOWGjOWGieWGj+WGkeWGk+WGleWGluWGpOWGpuWGouWGqeWGquWGq+WGs+WGseWGsuWGsOWGteWGveWHheWHieWHm+WHoOiZleWHqeWHre+/veWHsOWHteWHvuWIhOWIi+WIlOWIjuWIp+WIquWIruWIs+WIueWJj+WJhOWJi+WJjOWJnuWJlOWJquWJtOWJqeWJs+WJv+WJveWKjeWKlOWKkuWJseWKiOWKkei+qOi+p+WKrOWKreWKvOWKteWLgeWLjeWLl+WLnuWLo+WLpumjreWLoOWLs+WLteWLuOWLueWMhuWMiOeUuOWMjeWMkOWMj+WMleWMmuWMo+WMr+WMseWMs+WMuOWNgOWNhuWNheS4l+WNieWNjeWHluWNnuWNqeWNruWkmOWNu+WNt+WOguWOluWOoOWOpuWOpeWOruWOsOWOtuWPg+ewkumbmeWPn+abvOeHruWPruWPqOWPreWPuuWQgeWQveWRgOWQrOWQreWQvOWQruWQtuWQqeWQneWRjuWSj+WRteWSjuWRn+WRseWRt+WRsOWSkuWRu+WSgOWRtuWShOWSkOWShuWTh+WSouWSuOWSpeWSrOWThOWTiOWSqO+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTNdLmxlbmd0aDsgKytqKSBpZihEWzE1M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTNdW2pdXSA9IDM5MTY4ICsgajsgZFszOTE2OCArIGpdID0gRFsxNTNdW2pdO31cblx0RFsxNTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lkqvlk4LlkqTlkr7lkrzlk5jlk6Xlk6bllI/llJTlk73lk67lk63lk7rlk6LllLnllYDllaPllYzllK7llZzllYXllZbllZfllLjllLPllZ3llpnlloDlkq/llorllp/llbvllb7llpjllp7llq7llbzlloPllqnllofllqjll5rll4Xll5/ll4Tll5zll6Tll5TlmJTll7flmJbll77ll73lmJvll7nlmY7lmZDnh5/lmLTlmLblmLLlmLjvv73lmavlmaTlmK/lmazlmarlmoblmoDlmorlmqDlmpTlmo/lmqXlmq7lmrblmrTlm4Llmrzlm4Hlm4Plm4Dlm4jlm47lm5Hlm5Plm5flm67lm7nlnIDlm7/lnITlnInlnIjlnIvlnI3lnJPlnJjlnJbll4flnJzlnKblnLflnLjlnY7lnLvlnYDlnY/lnanln4DlnojlnaHlnb/lnonlnpPlnqDlnrPlnqTlnqrlnrDln4Pln4bln5Tln5Lln5PloIrln5bln6PloIvloJnloJ3lobLloKHloaLloYvlobDmr4DloZLloL3lobnlooXlornlop/loqvlorrlo57lorvlorjloq7lo4Xlo5Plo5Hlo5flo5nlo5jlo6Xlo5zlo6Tlo5/lo6/lo7rlo7nlo7vlo7zlo73lpILlpIrlpJDlpJvmoqblpKXlpKzlpK3lpLLlpLjlpL7nq5LlpZXlpZDlpY7lpZrlpZjlpaLlpaDlpaflpazlpanvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU0XS5sZW5ndGg7ICsraikgaWYoRFsxNTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU0XVtqXV0gPSAzOTQyNCArIGo7IGRbMzk0MjQgKyBqXSA9IERbMTU0XVtqXTt9XG5cdERbMTU1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95aW45aaB5aad5L2e5L6r5aaj5aay5aeG5aeo5aec5aaN5aeZ5aea5ail5aif5aiR5aic5aiJ5aia5amA5ams5amJ5ai15ai25ami5amq5aqa5aq85aq+5auL5auC5aq95auj5auX5aum5aup5auW5au65au75ayM5ayL5ayW5ayy5auQ5ayq5ay25ay+5a2D5a2F5a2A5a2R5a2V5a2a5a2b5a2l5a2p5a2w5a2z5a215a245paI5a265a6A77+95a6D5a6m5a645a+D5a+H5a+J5a+U5a+Q5a+k5a+m5a+i5a+e5a+l5a+r5a+w5a+25a+z5bCF5bCH5bCI5bCN5bCT5bCg5bCi5bCo5bC45bC55bGB5bGG5bGO5bGT5bGQ5bGP5a2x5bGs5bGu5Lmi5bG25bG55bKM5bKR5bKU5aab5bKr5bK75bK25bK85bK35bOF5bK+5bOH5bOZ5bOp5bO95bO65bOt5baM5bOq5bSL5bSV5bSX5bWc5bSf5bSb5bSR5bSU5bSi5bSa5bSZ5bSY5bWM5bWS5bWO5bWL5bWs5bWz5bW25baH5baE5baC5bai5bad5bas5bau5ba95baQ5ba35ba85beJ5beN5beT5beS5beW5beb5ber5bey5be15biL5bia5biZ5biR5bib5bi25bi35bmE5bmD5bmA5bmO5bmX5bmU5bmf5bmi5bmk5bmH5bm15bm25bm66bq85bm/5bqg5buB5buC5buI5buQ5buP77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1NV0ubGVuZ3RoOyArK2opIGlmKERbMTU1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1NV1bal1dID0gMzk2ODAgKyBqOyBkWzM5NjgwICsgal0gPSBEWzE1NV1bal07fVxuXHREWzE1Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veW7luW7o+W7neW7muW7m+W7ouW7oeW7qOW7qeW7rOW7seW7s+W7sOW7tOW7uOW7vuW8g+W8ieW9neW9nOW8i+W8keW8luW8qeW8reW8uOW9geW9iOW9jOW9juW8r+W9keW9luW9l+W9meW9oeW9reW9s+W9t+W+g+W+guW9v+W+iuW+iOW+keW+h+W+nuW+meW+mOW+oOW+qOW+reW+vOW/luW/u+W/pOW/uOW/seW/neaCs+W/v+aAoeaBoO+/veaAmeaAkOaAqeaAjuaAseaAm+aAleaAq+aApuaAj+aAuuaBmuaBgeaBquaBt+aBn+aBiuaBhuaBjeaBo+aBg+aBpOaBguaBrOaBq+aBmeaCgeaCjeaDp+aCg+aCmuaChOaCm+aCluaCl+aCkuaCp+aCi+aDoeaCuOaDoOaDk+aCtOW/sOaCveaDhuaCteaDmOaFjeaEleaEhuaDtuaDt+aEgOaDtOaDuuaEg+aEoeaDu+aDseaEjeaEjuaFh+aEvuaEqOaEp+aFiuaEv+aEvOaErOaEtOaEveaFguaFhOaFs+aFt+aFmOaFmeaFmuaFq+aFtOaFr+aFpeaFseaFn+aFneaFk+aFteaGmeaGluaGh+aGrOaGlOaGmuaGiuaGkeaGq+aGruaHjOaHiuaHieaHt+aHiOaHg+aHhuaGuuaHi+e9ueaHjeaHpuaHo+aHtuaHuuaHtOaHv+aHveaHvOaHvuaIgOaIiOaIieaIjeaIjOaIlOaIm++/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTZdLmxlbmd0aDsgKytqKSBpZihEWzE1Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTZdW2pdXSA9IDM5OTM2ICsgajsgZFszOTkzNiArIGpdID0gRFsxNTZdW2pdO31cblx0RFsxNTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73miJ7miKHmiKrmiK7miLDmiLLmiLPmiYHmiY7miZ7miaPmiZvmiaDmiajmibzmioLmionmib7mipLmipPmipbmi5TmioPmipTmi5fmi5Hmirvmi4/mi7/mi4bmk5Tmi4jmi5zmi4zmi4rmi4Lmi4fmipvmi4nmjIzmi67mi7HmjKfmjILmjIjmi6/mi7XmjZDmjL7mjY3mkJzmjY/mjpbmjo7mjoDmjqvmjbbmjqPmjo/mjonmjp/mjrXmjavvv73mjanmjr7mj6nmj4Dmj4bmj6Pmj4nmj5Lmj7bmj4TmkJbmkLTmkIbmkJPmkKbmkLbmlJ3mkJfmkKjmkI/mkafmka/mkbbmkY7mlKrmkpXmkpPmkqXmkqnmkojmkrzmk5rmk5Lmk4Xmk4fmkrvmk5jmk4Lmk7Hmk6foiInmk6Dmk6Hmiqzmk6Pmk6/mlKzmk7bmk7Tmk7Lmk7rmlIDmk73mlJjmlJzmlIXmlKTmlKPmlKvmlLTmlLXmlLfmlLbmlLjnlYvmlYjmlZbmlZXmlY3mlZjmlZ7mlZ3mlbLmlbjmloLmloPorormlpvmlp/mlqvmlrfml4Pml4bml4Hml4Tml4zml5Lml5vml5nml6Dml6Hml7HmnbLmmIrmmIPml7vmnbPmmLXmmLbmmLTmmJzmmY/mmYTmmYnmmYHmmZ7mmZ3mmaTmmafmmajmmZ/mmaLmmbDmmoPmmojmmo7mmonmmoTmmpjmmp3mm4Hmmrnmm4nmmr7mmrzvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU3XS5sZW5ndGg7ICsraikgaWYoRFsxNTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU3XVtqXV0gPSA0MDE5MiArIGo7IGRbNDAxOTIgKyBqXSA9IERbMTU3XVtqXTt9XG5cdERbMTU4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95puE5pq45puW5pua5pug5pi/5pum5pup5puw5pu15pu35pyP5pyW5pye5pym5pyn6Zy45pyu5py/5py25p2B5py45py35p2G5p2e5p2g5p2Z5p2j5p2k5p6J5p2w5p6p5p285p2q5p6M5p6L5p6m5p6h5p6F5p635p+v5p605p+s5p6z5p+p5p645p+k5p+e5p+d5p+i5p+u5p655p+O5p+G5p+n5qqc5qCe5qGG5qCp5qGA5qGN5qCy5qGO77+95qKz5qCr5qGZ5qGj5qG35qG/5qKf5qKP5qKt5qKU5qKd5qKb5qKD5qqu5qK55qG05qK15qKg5qK65qSP5qKN5qG+5qSB5qOK5qSI5qOY5qSi5qSm5qOh5qSM5qON5qOU5qOn5qOV5qS25qSS5qSE5qOX5qOj5qSl5qO55qOg5qOv5qSo5qSq5qSa5qSj5qSh5qOG5qW55qW35qWc5qW45qWr5qWU5qW+5qWu5qS55qW05qS95qWZ5qSw5qWh5qWe5qWd5qaB5qWq5qay5qau5qeQ5qa/5qeB5qeT5qa+5qeO5a+o5qeK5qed5qa75qeD5qan5qiu5qaR5qag5qac5qaV5qa05qee5qeo5qiC5qib5qe/5qyK5qe55qey5qen5qiF5qax5qie5qet5qiU5qer5qiK5qiS5quB5qij5qiT5qmE5qiM5qmy5qi25qm45qmH5qmi5qmZ5qmm5qmI5qi45qii5qqQ5qqN5qqg5qqE5qqi5qqj77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1OF0ubGVuZ3RoOyArK2opIGlmKERbMTU4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1OF1bal1dID0gNDA0NDggKyBqOyBkWzQwNDQ4ICsgal0gPSBEWzE1OF1bal07fVxuXHREWzE1OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaql+iYl+aqu+arg+arguaquOaqs+aqrOarnuarkearn+aqquarmuarquaru+asheiYluaruuaskuaslumsseasn+asuOast+ebnOasuemjruath+atg+atieatkOatmeatlOatm+atn+atoeatuOatueatv+augOauhOaug+aujeaumOauleaunuaupOauquauq+aur+ausuauseaus+aut+auvOavhuavi+avk+avn+avrOavq+avs+avr++/vem6vuawiOawk+awlOawm+awpOawo+axnuaxleaxouaxquayguayjeaymuaygeaym+axvuaxqOaxs+aykuaykOazhOazseazk+ayveazl+azheazneayruayseayvuayuuazm+azr+azmeazqua0n+ihjea0tua0q+a0vea0uOa0mea0tea0s+a0kua0jOa1o+a2k+a1pOa1mua1uea1mea2jua2lea/pOa2hea3uea4lea4iua2tea3h+a3pua2uOa3hua3rOa3nua3jOa3qOa3kua3hea3uua3mea3pOa3lea3qua3rua4rea5rua4rua4mea5sua5n+a4vua4o+a5q+a4q+a5tua5jea4n+a5g+a4uua5jua4pOa7v+a4nea4uOa6gua6qua6mOa7iea6t+a7k+a6vea6r+a7hOa6sua7lOa7lea6j+a6pea7gua6n+a9gea8keeBjOa7rOa7uOa7vua8v+a7sua8sea7r+a8sua7jO+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTldLmxlbmd0aDsgKytqKSBpZihEWzE1OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTldW2pdXSA9IDQwNzA0ICsgajsgZFs0MDcwNCArIGpdID0gRFsxNTldW2pdO31cblx0RFsyMjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mvL7mvJPmu7fmvobmvbrmvbjmvoHmvoDmva/mvZvmv7Pmva3mvoLmvbzmvZjmvo7mvpHmv4LmvabmvrPmvqPmvqHmvqTmvrnmv4bmvqrmv5/mv5Xmv6zmv5Tmv5jmv7Hmv67mv5vngInngIvmv7rngJHngIHngI/mv77ngJvngJrmvbTngJ3ngJjngJ/ngLDngL7ngLLngZHngaPngpnngpLngq/ng7HngqzngrjngrPngq7ng5/ng4vng53vv73ng5nnhInng73nhJznhJnnhaXnhZXnhojnhabnhaLnhYznhZbnhaznho/nh7vnhoTnhpXnhqjnhqznh5fnhrnnhr7nh5Lnh4nnh5Tnh47nh6Dnh6znh6fnh7Xnh7znh7nnh7/niI3niJDniJvniKjniK3niKzniLDniLLniLvniLzniL/niYDniYbniYvniZjnibTnib7nioLnioHniofnipLnipbniqLniqfnirnnirLni4Pni4bni4Tni47ni5Lni6Lni6Dni6Hni7nni7flgI/njJfnjIrnjJznjJbnjJ3njLTnjK/njKnnjKXnjL7njY7njY/pu5jnjZfnjarnjajnjbDnjbjnjbXnjbvnjbrnj4jnjrPnj47njrvnj4Dnj6Xnj67nj57nkqLnkIXnka/nkKXnj7jnkLLnkLrnkZXnkL/nkZ/nkZnnkYHnkZznkannkbDnkaPnkarnkbbnkb7nkovnkp7nkqfnk4rnk4/nk5Tnj7Hvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI0XS5sZW5ndGg7ICsraikgaWYoRFsyMjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI0XVtqXV0gPSA1NzM0NCArIGo7IGRbNTczNDQgKyBqXSA9IERbMjI0XVtqXTt9XG5cdERbMjI1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+955Og55Oj55On55Op55Ou55Oy55Ow55Ox55O455O355SE55SD55SF55SM55SO55SN55SV55ST55Se55Sm55Ss55S855WE55WN55WK55WJ55Wb55WG55Wa55Wp55Wk55Wn55Wr55Wt55W455W255aG55aH55W055aK55aJ55aC55aU55aa55ad55al55aj55eC55az55eD55a155a955a455a855ax55eN55eK55eS55eZ55ej55ee55e+55e/77+955e855iB55ew55e655ey55ez55iL55iN55iJ55if55in55ig55ih55ii55ik55i055iw55i755mH55mI55mG55mc55mY55mh55mi55mo55mp55mq55mn55ms55mw55my55m255m455m855qA55qD55qI55qL55qO55qW55qT55qZ55qa55qw55q055q455q555q655uC55uN55uW55uS55ue55uh55ul55un55uq6Jiv55u755yI55yH55yE55yp55yk55ye55yl55ym55yb55y355y4552H552a552o552r552b552l552/552+5525556O556L556R556g556e556w55625565556/55685569556755+H55+N55+X55+a55+c55+j55+u55+856CM56CS56Sm56Cg56Sq56GF56KO56G056KG56G856Ka56KM56Kj56K156Kq56Kv56OR56OG56OL56OU56K+56K856OF56OK56Os77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyNV0ubGVuZ3RoOyArK2opIGlmKERbMjI1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyNV1bal1dID0gNTc2MDAgKyBqOyBkWzU3NjAwICsgal0gPSBEWzIyNV1bal07fVxuXHREWzIyNl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veejp+ejmuejveejtOekh+ekkuekkeekmeekrOekq+elgOeloOell+eln+elmuelleelk+eluuelv+emiuemneemp+m9i+emquemruems+emueemuuenieenleenp+enrOenoeeno+eoiOeojeeomOeomeeooOeon+emgOeoseeou+eovueot+epg+epl+epieepoeepouepqem+neepsOepueepveeqiOeql+eqleeqmOeqlueqqeeriOeqsO+/veeqtuerheerhOeqv+mCg+erh+eriuerjeerj+erleerk+ermeermuerneeroeerouerpuerreersOesguesj+esiueshuess+esmOesmeesnuesteesqOestuetkOetuueshOetjeesi+etjOetheetteetpeettOetp+etsOetseetrOetrueuneeumOeun+eujeeunOeumueui+eukueuj+etneeumeevi+evgeevjOevj+eutOevhuevneevqeewkeewlOevpuevpeexoOewgOewh+ewk+evs+evt+ewl+ewjeevtuewo+ewp+ewquewn+ewt+ewq+ewveexjOexg+exlOexj+exgOexkOexmOexn+expOexluexpeexrOexteeyg+eykOeypOeyreeyoueyq+eyoeeyqOeys+eysueyseeyrueyueeyveezgOezheezguezmOezkueznOezoumsu+ezr+ezsueztOeztuezuue0hu+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjZdLmxlbmd0aDsgKytqKSBpZihEWzIyNl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjZdW2pdXSA9IDU3ODU2ICsgajsgZFs1Nzg1NiArIGpdID0gRFsyMjZdW2pdO31cblx0RFsyMjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ntILntJzntJXntIrntYXntYvntK7ntLLntL/ntLXntYbntbPntZbntY7ntbLntajnta7ntY/ntaPntpPntonntZvnto/ntb3ntpvntrrntq7ntqPntrXnt4fntr3ntqvnuL3ntqLntq/nt5zntrjntp/ntrDnt5jnt53nt6Tnt57nt7vnt7Lnt6HnuIXnuIrnuKPnuKHnuJLnuLHnuJ/nuInnuIvnuKLnuYbnuabnuLvnuLXnuLnnuYPnuLfvv73nuLLnuLrnuafnuZ3nuZbnuZ7nuZnnuZrnubnnuarnuannubznubvnuoPnt5Xnub3ovq7nub/nuojnuonnuoznupLnupDnupPnupTnupbnuo7nupvnupznvLjnvLrnvYXnvYznvY3nvY7nvZDnvZHnvZXnvZTnvZjnvZ/nvaDnvajnvannvafnvbjnvoLnvobnvoPnvojnvofnvoznvpTnvp7nvp3nvprnvqPnvq/nvrLnvrnnvq7nvrbnvrjorbHnv4Xnv4bnv4rnv5Xnv5Tnv6Hnv6bnv6nnv7Pnv7npo5zogIbogITogIvogJLogJjogJnogJzogKHogKjogL/ogLvogYrogYbogZLogZjogZrogZ/ogaLogajogbPogbLogbDogbbogbnogb3ogb/ogoTogobogoXogpvogpPogprogq3lhpDogqzog5vog6Xog5nog53og4Tog5rog5bohInog6/og7HohJvohKnohKPohK/ohYvvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI3XS5sZW5ndGg7ICsraikgaWYoRFsyMjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI3XVtqXV0gPSA1ODExMiArIGo7IGRbNTgxMTIgKyBqXSA9IERbMjI3XVtqXTt9XG5cdERbMjI4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ZqL6IWG6IS+6IWT6IWR6IO86IWx6IWu6IWl6IWm6IW06IaD6IaI6IaK6IaA6IaC6Iag6IaV6Iak6Iaj6IWf6IaT6Iap6Iaw6Ia16Ia+6Ia46Ia96IeA6IeC6Ia66IeJ6IeN6IeR6IeZ6IeY6IeI6Iea6Ief6Ieg6Ien6Ie66Ie76Ie+6IiB6IiC6IiF6IiH6IiK6IiN6IiQ6IiW6Iip6Iir6Ii46Iiz6ImA6ImZ6ImY6Imd6Ima6Imf6Imk77+96Imi6Imo6Imq6Imr6Iiu6Imx6Im36Im46Im+6IqN6IqS6Iqr6Iqf6Iq76Iqs6Iuh6Iuj6Iuf6IuS6Iu06Iuz6Iu66I6T6IyD6Iu76Iu56Iue6IyG6Iuc6IyJ6IuZ6Iy16Iy06IyW6Iyy6Iyx6I2A6Iy56I2Q6I2F6Iyv6Iyr6IyX6IyY6I6F6I6a6I6q6I6f6I6i6I6W6Iyj6I6O6I6H6I6K6I286I616I2z6I216I6g6I6J6I6o6I+06JCT6I+r6I+O6I+96JCD6I+Y6JCL6I+B6I+36JCH6I+g6I+y6JCN6JCi6JCg6I696JC46JSG6I+76JGt6JCq6JC86JWa6JKE6JG36JGr6JKt6JGu6JKC6JGp6JGG6JCs6JGv6JG56JC16JOK6JGi6JK56JK/6JKf6JOZ6JON6JK76JOa6JOQ6JOB6JOG6JOW6JKh6JSh6JO/6JO06JSX6JSY6JSs6JSf6JSV6JSU6JO86JWA6JWj6JWY6JWI77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyOF0ubGVuZ3RoOyArK2opIGlmKERbMjI4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyOF1bal1dID0gNTgzNjggKyBqOyBkWzU4MzY4ICsgal0gPSBEWzIyOF1bal07fVxuXHREWzIyOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiVgeiYguiVi+iVleiWgOiWpOiWiOiWkeiWiuiWqOiVreiWlOiWm+iXquiWh+iWnOiVt+iVvuiWkOiXieiWuuiXj+iWueiXkOiXleiXneiXpeiXnOiXueiYiuiYk+iYi+iXvuiXuuiYhuiYouiYmuiYsOiYv+iZjeS5leiZlOiZn+iZp+iZseiak+iao+iaqeiaquiai+iajOiatuiar+ibhOibhuiasOibieigo+iaq+iblOibnuibqeibrO+/veibn+ibm+ibr+ickuichuiciOicgOicg+ibu+ickeicieicjeibueiciuictOicv+ict+icu+icpeicqeicmuidoOidn+iduOidjOidjuidtOidl+idqOidruidmeidk+ido+idquigheieouien+ieguier+ifi+ieveifgOifkOmbluieq+ifhOies+ifh+ifhuieu+ifr+ifsuifoOigj+igjeifvuiftuift+igjuifkuigkeigluigleigouigoeigseigtuigueigp+igu+ihhOihguihkuihmeihnuihouihq+iigeihvuiinuihteihveiiteihsuiiguiil+iikuiiruiimeiiouiijeiipOiisOiiv+iiseijg+ijhOijlOijmOijmeijneijueikguijvOijtOijqOijsuikhOikjOikiuikk+ilg+iknuikpeikquikq+ilgeilhOiku+iktuikuOiljOikneiloOilnu+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjldLmxlbmd0aDsgKytqKSBpZihEWzIyOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjldW2pdXSA9IDU4NjI0ICsgajsgZFs1ODYyNCArIGpdID0gRFsyMjldW2pdO31cblx0RFsyMzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73opabopaTopa3oparopa/opbTopbfopb7opoPopojoporoppPoppjopqHopqnopqbopqzopq/oprLoprropr3opr/op4Dop5rop5zop53op6fop7Top7joqIPoqJboqJDoqIzoqJvoqJ3oqKXoqLboqYHoqZvoqZLoqYboqYjoqbzoqa3oqazoqaLoqoXoqoLoqoToqqjoqqHoqpHoqqXoqqboqproqqPoq4Toq43oq4Loq5roq6voq7Poq6fvv73oq6Toq7HorJToq6Doq6Loq7foq57oq5vorIzorIforJroq6HorJborJDorJforKDorLPpnqvorKborKvorL7orKjorYHorYzorY/orY7orYnorZborZvorZroravorZ/orazora/orbTorb3oroDorozoro7orpLorpPorpborpnorprosLrosYHosL/osYjosYzosY7osZDosZXosaLosazosbjosbrosoLosonosoXosoroso3oso7ospTosbzospjmiJ3osq3osqrosr3osrLosrPosq7osrbos4jos4Hos6Tos6Pos5ros73os7ros7votITotIXotIrotIfotI/otI3otJDpvY7otJPos43otJTotJbotafota3otbHotbPotoHotpnot4Lotr7otrrot4/ot5rot5bot4zot5vot4vot6rot6vot5/ot6Pot7zouIjouInot7/ouJ3ouJ7ouJDouJ/ouYLouLXouLDouLTouYrvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMwXS5sZW5ndGg7ICsraikgaWYoRFsyMzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMwXVtqXV0gPSA1ODg4MCArIGo7IGRbNTg4ODAgKyBqXSA9IERbMjMwXVtqXTt9XG5cdERbMjMxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96LmH6LmJ6LmM6LmQ6LmI6LmZ6Lmk6Lmg6Liq6Lmj6LmV6Lm26Lmy6Lm86LqB6LqH6LqF6LqE6LqL6LqK6LqT6LqR6LqU6LqZ6Lqq6Lqh6Lqs6Lqw6LuG6Lqx6Lq+6LuF6LuI6LuL6Lub6Luj6Lu86Lu76Lur6Lu+6LyK6LyF6LyV6LyS6LyZ6LyT6Lyc6Lyf6Lyb6LyM6Lym6Lyz6Ly76Ly56L2F6L2C6Ly+6L2M6L2J6L2G6L2O6L2X6L2c77+96L2i6L2j6L2k6L6c6L6f6L6j6L6t6L6v6L636L+a6L+l6L+i6L+q6L+v6YKH6L+06YCF6L+56L+66YCR6YCV6YCh6YCN6YCe6YCW6YCL6YCn6YC26YC16YC56L+46YGP6YGQ6YGR6YGS6YCO6YGJ6YC+6YGW6YGY6YGe6YGo6YGv6YG26Zqo6YGy6YKC6YG96YKB6YKA6YKK6YKJ6YKP6YKo6YKv6YKx6YK16YOi6YOk5omI6YOb6YSC6YSS6YSZ6YSy6YSw6YWK6YWW6YWY6YWj6YWl6YWp6YWz6YWy6YaL6YaJ6YaC6Yai6Yar6Yav6Yaq6Ya16Ya06Ya66YeA6YeB6YeJ6YeL6YeQ6YeW6Yef6Yeh6Yeb6Ye86Ye16Ye26Yie6Ye/6YiU6Yis6YiV6YiR6Yme6YmX6YmF6YmJ6Ymk6YmI6YqV6Yi/6YmL6YmQ6Yqc6YqW6YqT6Yqb6Yma6YuP6Yq56Yq36Yup6YyP6Yu66Y2E6Yyu77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzMV0ubGVuZ3RoOyArK2opIGlmKERbMjMxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzMV1bal1dID0gNTkxMzYgKyBqOyBkWzU5MTM2ICsgal0gPSBEWzIzMV1bal07fVxuXHREWzIzMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemMmemMoumMmumMo+mMuumMtemMu+mNnOmNoOmNvOmNrumNlumOsOmOrOmOremOlOmOuemPlumPl+mPqOmPpemPmOmPg+mPnemPkOmPiOmPpOmQmumQlOmQk+mQg+mQh+mQkOmQtumQq+mQtemQoemQuumRgemRkumRhOmRm+mRoOmRoumRnumRqumIqemRsOmRtemRt+mRvemRmumRvOmRvumSgemRv+mWgumWh+mWiumWlOmWlumWmOmWme+/vemWoOmWqOmWp+mWremWvOmWu+mWuemWvumXiua/tumXg+mXjemXjOmXlemXlOmXlumXnOmXoemXpemXoumYoemYqOmYrumYr+mZgumZjOmZj+mZi+mZt+mZnOmZnumZnemZn+mZpumZsumZrOmajemamOmalemal+maqumap+masemasumasOmatOmatumauOmauembjumbi+mbiembjeiljembnOmcjemblembuemchOmchumciOmck+mcjumckemcj+mclumcmemcpOmcqumcsOmcuemcvemcvumdhOmdhumdiOmdgumdiemdnOmdoOmdpOmdpumdqOWLkumdq+mdsemduemehemdvOmegemduumehumei+mej+mekOmenOmeqOmepumeo+mes+metOmfg+mfhumfiOmfi+mfnOmfrem9j+mfsuern+mftumftemgj+mgjOmguOmgpOmgoemgt+mgvemhhumhj+mhi+mhq+mhr+mhsO+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzJdLmxlbmd0aDsgKytqKSBpZihEWzIzMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzJdW2pdXSA9IDU5MzkyICsgajsgZFs1OTM5MiArIGpdID0gRFsyMzJdW2pdO31cblx0RFsyMzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pobHpobTpobPpoqrpoq/porHporbpo4Tpo4Ppo4bpo6npo6vppIPppInppJLppJTppJjppKHppJ3ppJ7ppKTppKDppKzppK7ppL3ppL7ppYLppYnppYXppZDppYvppZHppZLppYzppZXpppfpppjppqXppq3ppq7pprzpp5/pp5vpp53pp5jpp5Hpp63pp67pp7Hpp7Lpp7vpp7jpqIHpqI/pqIXpp6LpqJnpqKvpqLfpqYXpqYLpqYDpqYPvv73pqL7pqZXpqY3pqZvpqZfpqZ/pqaLpqaXpqaTpqanpqavpqarpqq3pqrDpqrzpq4Dpq4/pq5Hpq5Ppq5Tpq57pq5/pq6Lpq6Ppq6bpq6/pq6vpq67pq7Tpq7Hpq7fpq7vprIbprJjprJrprJ/prKLprKPprKXprKfprKjprKnprKrprK7prK/prLLprYTprYPprY/prY3prY7prZHprZjprbTprpPproPprpHprpbprpfprp/prqDprqjprrTpr4Dpr4rprrnpr4bpr4/pr5Hpr5Lpr6Ppr6Lpr6Tpr5Tpr6HpsLrpr7Lpr7Hpr7DpsJXpsJTpsInpsJPpsIzpsIbpsIjpsJLpsIrpsITpsK7psJvpsKXpsKTpsKHpsLDpsYfpsLLpsYbpsL7psZrpsaDpsafpsbbpsbjps6fps6zps7DptInptIjps6vptIPptIbptKrptKbptq/ptKPptJ/ptYTptJXptJLptYHptL/ptL7ptYbptYjvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMzXS5sZW5ndGg7ICsraikgaWYoRFsyMzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMzXVtqXV0gPSA1OTY0OCArIGo7IGRbNTk2NDggKyBqXSA9IERbMjMzXVtqXTt9XG5cdERbMjM0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96bWd6bWe6bWk6bWR6bWQ6bWZ6bWy6baJ6baH6bar6bWv6bW66baa6bak6bap6bay6beE6beB6ba76ba46ba66beG6beP6beC6beZ6beT6be46bem6bet6bev6be96bia6bib6bie6bm16bm56bm96bqB6bqI6bqL6bqM6bqS6bqV6bqR6bqd6bql6bqp6bq46bqq6bqt6Z2h6buM6buO6buP6buQ6buU6buc6bue6bud6bug6bul6buo6buv77+96bu06bu26bu36bu56bu76bu86bu96byH6byI55q36byV6byh6bys6by+6b2K6b2S6b2U6b2j6b2f6b2g6b2h6b2m6b2n6b2s6b2q6b236b2y6b226b6V6b6c6b6g5aCv5qeH6YGZ55Gk5Yec54aZ77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzNF0ubGVuZ3RoOyArK2opIGlmKERbMjM0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzNF1bal1dID0gNTk5MDQgKyBqOyBkWzU5OTA0ICsgal0gPSBEWzIzNF1bal07fVxuXHREWzIzN10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee6iuiknOmNiOmKiOiTnOS/ieeCu+aYseajiOmLueabu+W9heS4qOS7oeS7vOS8gOS8g+S8ueS9luS+kuS+iuS+muS+lOS/jeWBgOWAouS/v+WAnuWBhuWBsOWBguWClOWDtOWDmOWFiuWFpOWGneWGvuWHrOWIleWKnOWKpuWLgOWLm+WMgOWMh+WMpOWNsuWOk+WOsuWPne+ojuWSnOWSiuWSqeWTv+WWhuWdmeWdpeWerOWfiOWfh++oj++/ve+okOWinuWisuWki+Wlk+Wlm+WlneWlo+WmpOWmuuWtluWvgOeUr+WvmOWvrOWwnuWypuWyuuWzteW0p+W1k++okeW1guW1reW2uOW2ueW3kOW8oeW8tOW9p+W+t+W/nuaBneaCheaCiuaDnuaDleaEoOaDsuaEkeaEt+aEsOaGmOaIk+aKpuaPteaRoOaSneaTjuaVjuaYgOaYleaYu+aYieaYruaYnuaYpOaZpeaZl+aZme+okuaZs+aameaaoOaasuaav+abuuacju+kqeadpuaeu+ahkuafgOaggeahhOajj++ok+alqO+olOammOanouaosOapq+aphuaps+apvuarouarpOavluawv+axnOayhuaxr+azmua0hOa2h+a1r+a2lua2rOa3j+a3uOa3sua3vOa4uea5nOa4p+a4vOa6v+a+iOa+tea/teeAheeAh+eAqOeCheeCq+eEj+eEhOeFnOeFhueFh++oleeHgeeHvueKse+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzddLmxlbmd0aDsgKytqKSBpZihEWzIzN11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzddW2pdXSA9IDYwNjcyICsgajsgZFs2MDY3MiArIGpdID0gRFsyMzddW2pdO31cblx0RFsyMzhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nir7njKTvqJbnjbfnjr3nj4nnj5bnj6Pnj5LnkIfnj7XnkKbnkKrnkKnnkK7nkaLnkonnkp/nlIHnla/nmoLnmpznmp7nmpvnmqbvqJfnnYbliq/noKHnoY7noaTnobrnpLDvqJjvqJnvqJrnppTvqJvnppvnq5Hnq6fvqJznq6vnrp7vqJ3ntYjntZzntrfntqDnt5bnuZLnvYfnvqHvqJ7ojIHojaLojb/oj4foj7bokYjokrTolZPolZnvv73olavvqJ/olrDvqKDvqKHooIfoo7XoqJLoqLfoqbnoqqfoqr7oq5/vqKLoq7borZPorb/os7Dos7TotJLotbbvqKPou4/vqKTvqKXpgafpg57vqKbphJXphKfph5rph5fph57ph63ph67ph6Tph6XpiIbpiJDpiIrpiLrpiYDpiLzpiY7piZnpiZHpiLnpiafpiqfpibfpibjpi6fpi5fpi5npi5DvqKfpi5Xpi6Dpi5PpjKXpjKHpi7vvqKjpjJ7pi7/pjJ3pjILpjbDpjZfpjqTpj4bpj57pj7jpkLHpkYXpkYjplpLvp5zvqKnpmp3pmq/pnLPpnLvpnYPpnY3pnY/pnZHpnZXpoZfpoaXvqKrvqKvppKfvqKzppp7pqY7pq5npq5zprbXprbLpro/prrHprrvpsIDptbDptavvqK3puJnpu5Hvv73vv73ihbDihbHihbLihbPihbTihbXihbbihbfihbjihbnvv6Lvv6TvvIfvvILvv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM4XS5sZW5ndGg7ICsraikgaWYoRFsyMzhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM4XVtqXV0gPSA2MDkyOCArIGo7IGRbNjA5MjggKyBqXSA9IERbMjM4XVtqXTt9XG5cdERbMjUwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+94oWw4oWx4oWy4oWz4oW04oW14oW24oW34oW44oW54oWg4oWh4oWi4oWj4oWk4oWl4oWm4oWn4oWo4oWp77+i77+k77yH77yC44ix4oSW4oSh4oi157qK6KSc6Y2I6YqI6JOc5L+J54K75pix5qOI6Yu55pu75b2F5Lio5Luh5Lu85LyA5LyD5Ly55L2W5L6S5L6K5L6a5L6U5L+N5YGA5YCi5L+/5YCe5YGG5YGw5YGC5YKU5YO05YOY5YWK77+95YWk5Yad5Ya+5Yes5YiV5Yqc5Yqm5YuA5Yub5YyA5YyH5Yyk5Y2y5Y6T5Y6y5Y+d76iO5ZKc5ZKK5ZKp5ZO/5ZaG5Z2Z5Z2l5Z6s5Z+I5Z+H76iP76iQ5aKe5aKy5aSL5aWT5aWb5aWd5aWj5aak5aa65a2W5a+A55Sv5a+Y5a+s5bCe5bKm5bK65bO15bSn5bWT76iR5bWC5bWt5ba45ba55beQ5byh5by05b2n5b635b+e5oGd5oKF5oKK5oOe5oOV5oSg5oOy5oSR5oS35oSw5oaY5oiT5oqm5o+15pGg5pKd5pOO5pWO5piA5piV5pi75piJ5piu5pie5pik5pml5pmX5pmZ76iS5pmz5pqZ5pqg5pqy5pq/5pu65pyO76Sp5p2m5p675qGS5p+A5qCB5qGE5qOP76iT5qWo76iU5qaY5qei5qiw5qmr5qmG5qmz5qm+5qui5quk5q+W5rC/5rGc5rKG5rGv5rOa5rSE5raH5rWv77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI1MF0ubGVuZ3RoOyArK2opIGlmKERbMjUwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI1MF1bal1dID0gNjQwMDAgKyBqOyBkWzY0MDAwICsgal0gPSBEWzI1MF1bal07fVxuXHREWzI1MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea2lua2rOa3j+a3uOa3sua3vOa4uea5nOa4p+a4vOa6v+a+iOa+tea/teeAheeAh+eAqOeCheeCq+eEj+eEhOeFnOeFhueFh++oleeHgeeHvueKseeKvueMpO+olueNt+eOveePieePluePo+ePkueQh+ePteeQpueQqueQqeeQrueRoueSieeSn+eUgeeVr+eagueanOeanueam+eapu+ol+edhuWKr+egoeehjuehpOehuueksO+omO+ome+/ve+omuemlO+om+emm+erkeerp++onOerq+eunu+onee1iOe1nOe2t+e2oOe3lue5kue9h+e+oe+onuiMgeiNouiNv+iPh+iPtuiRiOiStOiVk+iVmeiVq++on+iWsO+ooO+ooeigh+ijteiokuiot+ipueiqp+iqvuirn++oouirtuitk+itv+izsOiztOi0kui1tu+oo+i7j++opO+opemBp+mDnu+opumElemEp+mHmumHl+mHnumHremHrumHpOmHpemIhumIkOmIiumIuumJgOmIvOmJjumJmemJkemIuemJp+mKp+mJt+mJuOmLp+mLl+mLmemLkO+op+mLlemLoOmLk+mMpemMoemLu++oqOmMnumLv+mMnemMgumNsOmNl+mOpOmPhumPnumPuOmQsemRhemRiOmWku+nnO+oqemanemar+mcs+mcu+mdg+mdjemdj+mdkemdlemhl+mhpe+oqu+oq+mkp++orOmmnumpjumrme+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNTFdLmxlbmd0aDsgKytqKSBpZihEWzI1MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNTFdW2pdXSA9IDY0MjU2ICsgajsgZFs2NDI1NiArIGpdID0gRFsyNTFdW2pdO31cblx0RFsyNTJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pq5zprbXprbLpro/prrHprrvpsIDptbDptavvqK3puJnpu5Hvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjUyXS5sZW5ndGg7ICsraikgaWYoRFsyNTJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjUyXVtqXV0gPSA2NDUxMiArIGo7IGRbNjQ1MTIgKyBqXSA9IERbMjUyXVtqXTt9XG5cdHJldHVybiB7XCJlbmNcIjogZSwgXCJkZWNcIjogZCB9OyB9KSgpO1xuXHRjcHRhYmxlWzkzNl0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBbXSwgZSA9IHt9LCBEID0gW10sIGo7XG5cdERbMF0gPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f+KCrO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFswXS5sZW5ndGg7ICsraikgaWYoRFswXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzBdW2pdXSA9IDAgKyBqOyBkWzAgKyBqXSA9IERbMF1bal07fVxuXHREWzEyOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veS4guS4hOS4heS4huS4j+S4kuS4l+S4n+S4oOS4oeS4o+S4puS4qeS4ruS4r+S4seS4s+S4teS4t+S4vOS5gOS5geS5guS5hOS5huS5iuS5keS5leS5l+S5muS5m+S5ouS5o+S5pOS5peS5p+S5qOS5quS5q+S5rOS5reS5ruS5r+S5suS5tOS5teS5tuS5t+S5uOS5ueS5uuS5u+S5vOS5veS5v+S6gOS6geS6guS6g+S6hOS6heS6h+S6iu+/veS6kOS6luS6l+S6meS6nOS6neS6nuS6o+S6quS6r+S6sOS6seS6tOS6tuS6t+S6uOS6ueS6vOS6veS6vuS7iOS7jOS7j+S7kOS7kuS7muS7m+S7nOS7oOS7ouS7puS7p+S7qeS7reS7ruS7r+S7seS7tOS7uOS7ueS7uuS7vOS7vuS8gOS8guS8g+S8hOS8heS8huS8h+S8iOS8i+S8jOS8kuS8k+S8lOS8leS8luS8nOS8neS8oeS8o+S8qOS8qeS8rOS8reS8ruS8seS8s+S8teS8t+S8ueS8u+S8vuS8v+S9gOS9geS9guS9hOS9heS9h+S9iOS9ieS9iuS9i+S9jOS9kuS9lOS9luS9oeS9ouS9puS9qOS9quS9q+S9reS9ruS9seS9suS9teS9t+S9uOS9ueS9uuS9veS+gOS+geS+guS+heS+huS+h+S+iuS+jOS+juS+kOS+kuS+k+S+leS+luS+mOS+meS+muS+nOS+nuS+n+S+oeS+ou+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMjldLmxlbmd0aDsgKytqKSBpZihEWzEyOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMjldW2pdXSA9IDMzMDI0ICsgajsgZFszMzAyNCArIGpdID0gRFsxMjldW2pdO31cblx0RFsxMzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73kvqTkvqvkvq3kvrDkvrHkvrLkvrPkvrTkvrbkvrfkvrjkvrnkvrrkvrvkvrzkvr3kvr7kv4Dkv4Hkv4Lkv4bkv4fkv4jkv4nkv4vkv4zkv43kv5Lkv5Pkv5Tkv5Xkv5bkv5nkv5vkv6Dkv6Lkv6Tkv6Xkv6fkv6vkv6zkv7Dkv7Lkv7Tkv7Xkv7bkv7fkv7nkv7vkv7zkv73kv7/lgIDlgIHlgILlgIPlgITlgIXlgIblgIflgIjlgInlgIrvv73lgIvlgI7lgJDlgJHlgJPlgJXlgJblgJflgJvlgJ3lgJ7lgKDlgKLlgKPlgKTlgKflgKvlgK/lgLDlgLHlgLLlgLPlgLTlgLXlgLblgLflgLjlgLnlgLvlgL3lgL/lgYDlgYHlgYLlgYTlgYXlgYblgYnlgYrlgYvlgY3lgZDlgZHlgZLlgZPlgZTlgZblgZflgZjlgZnlgZvlgZ3lgZ7lgZ/lgaDlgaHlgaLlgaPlgaTlgablgaflgajlganlgarlgavlga3lga7lga/lgbDlgbHlgbLlgbPlgbTlgbXlgbjlgbnlgbrlgbzlgb3lgoHlgoLlgoPlgoTlgoblgoflgonlgorlgovlgozlgo7lgo/lgpDlgpHlgpLlgpPlgpTlgpXlgpblgpflgpjlgpnlgprlgpvlgpzlgp3lgp7lgp/lgqDlgqHlgqLlgqTlgqblgqrlgqvlgq3lgq7lgq/lgrDlgrHlgrPlgrTlgrXlgrblgrflgrjlgrnlgrzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTMwXS5sZW5ndGg7ICsraikgaWYoRFsxMzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTMwXVtqXV0gPSAzMzI4MCArIGo7IGRbMzMyODAgKyBqXSA9IERbMTMwXVtqXTt9XG5cdERbMTMxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95YK95YK+5YK/5YOA5YOB5YOC5YOD5YOE5YOF5YOG5YOH5YOI5YOJ5YOK5YOL5YOM5YON5YOO5YOQ5YOR5YOS5YOT5YOU5YOV5YOX5YOY5YOZ5YOb5YOc5YOd5YOe5YOf5YOg5YOh5YOi5YOj5YOk5YOl5YOo5YOp5YOq5YOr5YOv5YOw5YOx5YOy5YO05YO25YO35YO45YO55YO65YO85YO95YO+5YO/5YSA5YSB5YSC5YSD5YSE5YSF5YSI77+95YSJ5YSK5YSM5YSN5YSO5YSP5YSQ5YSR5YST5YSU5YSV5YSW5YSX5YSY5YSZ5YSa5YSb5YSc5YSd5YSe5YSf5YSg5YSi5YSj5YSk5YSl5YSm5YSn5YSo5YSp5YSq5YSr5YSs5YSt5YSu5YSv5YSw5YSx5YSy5YSz5YS05YS15YS25YS35YS45YS55YS65YS75YS85YS95YS+5YWC5YWH5YWK5YWM5YWO5YWP5YWQ5YWS5YWT5YWX5YWY5YWZ5YWb5YWd5YWe5YWf5YWg5YWh5YWj5YWk5YWm5YWn5YWp5YWq5YWv5YWy5YW65YW+5YW/5YaD5YaE5YaG5YaH5YaK5YaL5YaO5YaP5YaQ5YaR5YaT5YaU5YaY5Yaa5Yad5Yae5Yaf5Yah5Yaj5Yam5Yan5Yao5Yap5Yaq5Yat5Yau5Ya05Ya45Ya55Ya65Ya+5Ya/5YeB5YeC5YeD5YeF5YeI5YeK5YeN5YeO5YeQ5YeS5YeT5YeU5YeV5YeW5YeX77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzMV0ubGVuZ3RoOyArK2opIGlmKERbMTMxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzMV1bal1dID0gMzM1MzYgKyBqOyBkWzMzNTM2ICsgal0gPSBEWzEzMV1bal07fVxuXHREWzEzMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWHmOWHmeWHmuWHnOWHnuWHn+WHouWHo+WHpeWHpuWHp+WHqOWHqeWHquWHrOWHruWHseWHsuWHtOWHt+WHvuWIhOWIheWIieWIi+WIjOWIj+WIkOWIk+WIlOWIleWInOWInuWIn+WIoeWIouWIo+WIpeWIpuWIp+WIquWIrOWIr+WIseWIsuWItOWIteWIvOWIvuWJhOWJheWJhuWJh+WJiOWJieWJi+WJjuWJj+WJkuWJk+WJleWJl+WJmO+/veWJmeWJmuWJm+WJneWJn+WJoOWJouWJo+WJpOWJpuWJqOWJq+WJrOWJreWJruWJsOWJseWJs+WJtOWJteWJtuWJt+WJuOWJueWJuuWJu+WJvOWJvuWKgOWKg+WKhOWKheWKhuWKh+WKieWKiuWKi+WKjOWKjeWKjuWKj+WKkeWKkuWKlOWKleWKluWKl+WKmOWKmeWKmuWKnOWKpOWKpeWKpuWKp+WKruWKr+WKsOWKtOWKteWKtuWKt+WKuOWKueWKuuWKu+WKvOWKveWLgOWLgeWLguWLhOWLheWLhuWLiOWLiuWLjOWLjeWLjuWLj+WLkeWLk+WLlOWLleWLl+WLmeWLmuWLm+WLnOWLneWLnuWLoOWLoeWLouWLo+WLpeWLpuWLp+WLqOWLqeWLquWLq+WLrOWLreWLruWLr+WLseWLsuWLs+WLtOWLteWLtuWLt+WLuOWLu+WLvOWLveWMgeWMguWMg+WMhOWMh+WMieWMiuWMi+WMjOWMju+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzJdLmxlbmd0aDsgKytqKSBpZihEWzEzMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzJdW2pdXSA9IDMzNzkyICsgajsgZFszMzc5MiArIGpdID0gRFsxMzJdW2pdO31cblx0RFsxMzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ljJHljJLljJPljJTljJjljJvljJzljJ7ljJ/ljKLljKTljKXljKfljKjljKnljKvljKzljK3ljK/ljLDljLHljLLljLPljLTljLXljLbljLfljLjljLzljL3ljYDljYLljYTljYbljYvljYzljY3ljZDljZTljZjljZnljZvljZ3ljaXljajljarljazlja3ljbLljbbljbnljbvljbzljb3ljb7ljoDljoHljoPljofljojljorljo7ljo/vv73ljpDljpHljpLljpPljpTljpbljpfljpnljpvljpzljp7ljqDljqHljqTljqfljqrljqvljqzljq3ljq/ljrDljrHljrLljrPljrTljrXljrfljrjljrnljrrljrzljr3ljr7lj4Dlj4Plj4Tlj4Xlj4blj4flj47lj4/lj5Dlj5Llj5Plj5Xlj5rlj5zlj53lj57lj6Hlj6Llj6flj7Tlj7rlj77lj7/lkIDlkILlkIXlkIflkIvlkJTlkJjlkJnlkJrlkJzlkKLlkKTlkKXlkKrlkLDlkLPlkLblkLflkLrlkL3lkL/lkYHlkYLlkYTlkYXlkYflkYnlkYzlkY3lkY7lkY/lkZHlkZrlkZ3lkZ7lkZ/lkaDlkaHlkaPlkaXlkaflkanlkarlkavlkazlka3lka7lka/lkbDlkbTlkbnlkbrlkb7lkb/lkoHlkoPlkoXlkoflkojlkonlkorlko3lkpHlkpPlkpflkpjlkpzlkp7lkp/lkqDlkqHvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTMzXS5sZW5ndGg7ICsraikgaWYoRFsxMzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTMzXVtqXV0gPSAzNDA0OCArIGo7IGRbMzQwNDggKyBqXSA9IERbMTMzXVtqXTt9XG5cdERbMTM0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZKi5ZKl5ZKu5ZKw5ZKy5ZK15ZK25ZK35ZK55ZK65ZK85ZK+5ZOD5ZOF5ZOK5ZOL5ZOW5ZOY5ZOb5ZOg5ZOh5ZOi5ZOj5ZOk5ZOr5ZOs5ZOv5ZOw5ZOx5ZO05ZO15ZO25ZO35ZO45ZO55ZO75ZO+5ZSA5ZSC5ZSD5ZSE5ZSF5ZSI5ZSK5ZSL5ZSM5ZSN5ZSO5ZSS5ZST5ZSV5ZSW5ZSX5ZSY5ZSZ5ZSa5ZSc5ZSd5ZSe5ZSf5ZSh5ZSl5ZSm77+95ZSo5ZSp5ZSr5ZSt5ZSy5ZS05ZS15ZS25ZS45ZS55ZS65ZS75ZS95ZWA5ZWC5ZWF5ZWH5ZWI5ZWL5ZWM5ZWN5ZWO5ZWP5ZWR5ZWS5ZWT5ZWU5ZWX5ZWY5ZWZ5ZWa5ZWb5ZWd5ZWe5ZWf5ZWg5ZWi5ZWj5ZWo5ZWp5ZWr5ZWv5ZWw5ZWx5ZWy5ZWz5ZW05ZW55ZW65ZW95ZW/5ZaF5ZaG5ZaM5ZaN5ZaO5ZaQ5ZaS5ZaT5ZaV5ZaW5ZaX5Zaa5Zab5Zae5Zag5Zah5Zai5Zaj5Zak5Zal5Zam5Zao5Zap5Zaq5Zar5Zas5Zat5Zau5Zav5Zaw5Zay5Za05Za25Za45Za65Za85Za/5ZeA5ZeB5ZeC5ZeD5ZeG5ZeH5ZeI5ZeK5ZeL5ZeO5ZeP5ZeQ5ZeV5ZeX5ZeY5ZeZ5Zea5Zeb5Zee5Zeg5Zei5Zen5Zep5Zet5Zeu5Zew5Zex5Ze05Ze25Ze45Ze55Ze65Ze75Ze85Ze/5ZiC5ZiD5ZiE5ZiF77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzNF0ubGVuZ3RoOyArK2opIGlmKERbMTM0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzNF1bal1dID0gMzQzMDQgKyBqOyBkWzM0MzA0ICsgal0gPSBEWzEzNF1bal07fVxuXHREWzEzNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWYhuWYh+WYiuWYi+WYjeWYkOWYkeWYkuWYk+WYlOWYleWYluWYl+WYmeWYmuWYnOWYneWYoOWYoeWYouWYpeWYpuWYqOWYqeWYquWYq+WYruWYr+WYsOWYs+WYteWYt+WYuOWYuuWYvOWYveWYvuWZgOWZgeWZguWZg+WZhOWZheWZhuWZh+WZiOWZieWZiuWZi+WZj+WZkOWZkeWZkuWZk+WZleWZluWZmuWZm+WZneWZnuWZn+WZoOWZoe+/veWZo+WZpeWZpuWZp+WZreWZruWZr+WZsOWZsuWZs+WZtOWZteWZt+WZuOWZueWZuuWZveWZvuWZv+WagOWageWaguWag+WahOWah+WaiOWaieWaiuWai+WajOWajeWakOWakeWakuWalOWaleWaluWal+WamOWameWamuWam+WanOWaneWanuWan+WaoOWaoeWaouWapOWapeWapuWap+WaqOWaqeWaquWaq+WarOWareWaruWasOWaseWasuWas+WatOWateWatuWauOWaueWauuWau+WaveWavuWav+WbgOWbgeWbguWbg+WbhOWbheWbhuWbh+WbiOWbieWbi+WbjOWbjeWbjuWbj+WbkOWbkeWbkuWbk+WbleWbluWbmOWbmeWbnOWbo+WbpeWbpuWbp+WbqOWbqeWbquWbrOWbruWbr+WbsuWbs+WbtuWbt+WbuOWbu+WbvOWcgOWcgeWcguWcheWch+Wci+WcjOWcjeWcjuWcj+WckOWcke+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzVdLmxlbmd0aDsgKytqKSBpZihEWzEzNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzVdW2pdXSA9IDM0NTYwICsgajsgZFszNDU2MCArIGpdID0gRFsxMzVdW2pdO31cblx0RFsxMzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lnJLlnJPlnJTlnJXlnJblnJflnJjlnJnlnJrlnJvlnJ3lnJ7lnKDlnKHlnKLlnKTlnKXlnKblnKflnKvlnLHlnLLlnLTlnLXlnLblnLflnLjlnLzlnL3lnL/lnYHlnYPlnYTlnYXlnYblnYjlnYnlnYvlnZLlnZPlnZTlnZXlnZblnZjlnZnlnaLlnaPlnaXlnaflnazlna7lnbDlnbHlnbLlnbTlnbXlnbjlnbnlnbrlnb3lnb7lnb/lnoDvv73lnoHlnoflnojlnonlnorlno3lno7lno/lnpDlnpHlnpTlnpXlnpblnpflnpjlnpnlnprlnpzlnp3lnp7lnp/lnqXlnqjlnqrlnqzlnq/lnrDlnrHlnrPlnrXlnrblnrflnrnlnrrlnrvlnrzlnr3lnr7lnr/ln4Dln4Hln4Tln4Xln4bln4fln4jln4nln4rln4zln43ln5Dln5Hln5Pln5bln5fln5vln5zln57ln6Hln6Lln6Pln6Xln6bln6fln6jln6nln6rln6vln6zln67ln7Dln7Hln7Lln7Pln7Xln7bln7fln7vln7zln77ln7/loIHloIPloITloIXloIjloInloIrloIzloI7loI/loJDloJLloJPloJTloJbloJfloJjloJrloJvloJzloJ3loJ/loKLloKPloKXloKbloKfloKjloKnloKvloKzloK3loK7loK/loLHloLLloLPloLTloLbloLfloLjloLnloLrloLvloLzloL3vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM2XS5sZW5ndGg7ICsraikgaWYoRFsxMzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM2XVtqXV0gPSAzNDgxNiArIGo7IGRbMzQ4MTYgKyBqXSA9IERbMTM2XVtqXTt9XG5cdERbMTM3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95aC+5aC/5aGA5aGB5aGC5aGD5aGF5aGG5aGH5aGI5aGJ5aGK5aGL5aGO5aGP5aGQ5aGS5aGT5aGV5aGW5aGX5aGZ5aGa5aGb5aGc5aGd5aGf5aGg5aGh5aGi5aGj5aGk5aGm5aGn5aGo5aGp5aGq5aGt5aGu5aGv5aGw5aGx5aGy5aGz5aG05aG15aG25aG35aG45aG55aG65aG75aG85aG95aG/5aKC5aKE5aKG5aKH5aKI5aKK5aKL5aKM77+95aKN5aKO5aKP5aKQ5aKR5aKU5aKV5aKW5aKX5aKY5aKb5aKc5aKd5aKg5aKh5aKi5aKj5aKk5aKl5aKm5aKn5aKq5aKr5aKs5aKt5aKu5aKv5aKw5aKx5aKy5aKz5aK05aK15aK25aK35aK45aK55aK65aK75aK95aK+5aK/5aOA5aOC5aOD5aOE5aOG5aOH5aOI5aOJ5aOK5aOL5aOM5aON5aOO5aOP5aOQ5aOS5aOT5aOU5aOW5aOX5aOY5aOZ5aOa5aOb5aOc5aOd5aOe5aOf5aOg5aOh5aOi5aOj5aOl5aOm5aOn5aOo5aOp5aOq5aOt5aOv5aOx5aOy5aO05aO15aO35aO45aO65aO75aO85aO95aO+5aO/5aSA5aSB5aSD5aSF5aSG5aSI5aSJ5aSK5aSL5aSM5aSO5aSQ5aSR5aSS5aST5aSX5aSY5aSb5aSd5aSe5aSg5aSh5aSi5aSj5aSm5aSo5aSs5aSw5aSy5aSz5aS15aS25aS777+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzN10ubGVuZ3RoOyArK2opIGlmKERbMTM3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzN11bal1dID0gMzUwNzIgKyBqOyBkWzM1MDcyICsgal0gPSBEWzEzN11bal07fVxuXHREWzEzOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWkveWkvuWkv+WlgOWlg+WlheWlhuWliuWljOWljeWlkOWlkuWlk+WlmeWlm+WlnOWlneWlnuWln+WloeWlo+WlpOWlpuWlp+WlqOWlqeWlquWlq+WlrOWlreWlruWlr+WlsOWlseWlsuWlteWlt+WluuWlu+WlvOWlvuWlv+WmgOWmheWmieWmi+WmjOWmjuWmj+WmkOWmkeWmlOWmleWmmOWmmuWmm+WmnOWmneWmn+WmoOWmoeWmouWmpu+/veWmp+WmrOWmreWmsOWmseWms+WmtOWmteWmtuWmt+WmuOWmuuWmvOWmveWmv+WngOWngeWnguWng+WnhOWnheWnh+WniOWnieWnjOWnjeWnjuWnj+WnleWnluWnmeWnm+WnnuWnn+WnoOWnoeWnouWnpOWnpuWnp+WnqeWnquWnq+WnreWnruWnr+WnsOWnseWnsuWns+WntOWnteWntuWnt+WnuOWnuuWnvOWnveWnvuWogOWoguWoiuWoi+WojeWojuWoj+WokOWokuWolOWoleWoluWol+WomeWomuWom+WoneWonuWooeWoouWopOWopuWop+WoqOWoquWoq+WorOWoreWoruWor+WosOWos+WoteWot+WouOWoueWouuWou+WoveWovuWov+WpgeWpguWpg+WphOWpheWph+WpiOWpi+WpjOWpjeWpjuWpj+WpkOWpkeWpkuWpk+WplOWpluWpl+WpmOWpmeWpm+WpnOWpneWpnuWpn+WpoO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzhdLmxlbmd0aDsgKytqKSBpZihEWzEzOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzhdW2pdXSA9IDM1MzI4ICsgajsgZFszNTMyOCArIGpdID0gRFsxMzhdW2pdO31cblx0RFsxMzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lqaHlqaPlqaTlqaXlqablqajlqanlqavlqazlqa3lqa7lqa/lqbDlqbHlqbLlqbPlqbjlqbnlqbvlqbzlqb3lqb7lqoDlqoHlqoLlqoPlqoTlqoXlqoblqoflqojlqonlqorlqovlqozlqo3lqo7lqo/lqpDlqpHlqpPlqpTlqpXlqpblqpflqpjlqpnlqpzlqp3lqp7lqp/lqqDlqqHlqqLlqqPlqqTlqqXlqqblqqflqqjlqqnlqqvlqqzvv73lqq3lqq7lqq/lqrDlqrHlqrTlqrblqrflqrnlqrrlqrvlqrzlqr3lqr/lq4Dlq4Plq4Tlq4Xlq4blq4flq4jlq4rlq4vlq43lq47lq4/lq5Dlq5Hlq5Plq5Xlq5flq5nlq5rlq5vlq53lq57lq5/lq6Llq6Tlq6Xlq6flq6jlq6rlq6zlq63lq67lq6/lq7Dlq7Llq7Plq7Tlq7Xlq7blq7flq7jlq7nlq7rlq7vlq7zlq73lq77lq7/lrIDlrIHlrILlrIPlrITlrIXlrIblrIflrIjlrIrlrIvlrIzlrI3lrI7lrI/lrJDlrJHlrJLlrJPlrJTlrJXlrJjlrJnlrJrlrJvlrJzlrJ3lrJ7lrJ/lrKDlrKHlrKLlrKPlrKTlrKXlrKblrKflrKjlrKnlrKrlrKvlrKzlrK3lrK7lrK/lrLDlrLHlrLPlrLXlrLblrLjlrLnlrLrlrLvlrLzlrL3lrL7lrL/lrYHlrYLlrYPlrYTlrYXlrYblrYfvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM5XS5sZW5ndGg7ICsraikgaWYoRFsxMzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM5XVtqXV0gPSAzNTU4NCArIGo7IGRbMzU1ODQgKyBqXSA9IERbMTM5XVtqXTt9XG5cdERbMTQwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95a2I5a2J5a2K5a2L5a2M5a2N5a2O5a2P5a2S5a2W5a2e5a2g5a2h5a2n5a2o5a2r5a2t5a2u5a2v5a2y5a205a225a235a245a255a275a285a2+5a2/5a6C5a6G5a6K5a6N5a6O5a6Q5a6R5a6S5a6U5a6W5a6f5a6n5a6o5a6p5a6s5a6t5a6u5a6v5a6x5a6y5a635a665a675a685a+A5a+B5a+D5a+I5a+J5a+K5a+L5a+N5a+O5a+P77+95a+R5a+U5a+V5a+W5a+X5a+Y5a+Z5a+a5a+b5a+c5a+g5a+i5a+j5a+m5a+n5a+p5a+q5a+r5a+s5a+t5a+v5a+x5a+y5a+z5a+05a+15a+25a+35a+95a++5bCA5bCC5bCD5bCF5bCH5bCI5bCL5bCM5bCN5bCO5bCQ5bCS5bCT5bCX5bCZ5bCb5bCe5bCf5bCg5bCh5bCj5bCm5bCo5bCp5bCq5bCr5bCt5bCu5bCv5bCw5bCy5bCz5bC15bC25bC35bGD5bGE5bGG5bGH5bGM5bGN5bGS5bGT5bGU5bGW5bGX5bGY5bGa5bGb5bGc5bGd5bGf5bGi5bGk5bGn5bGo5bGp5bGq5bGr5bGs5bGt5bGw5bGy5bGz5bG05bG15bG25bG35bG45bG75bG85bG95bG+5bKA5bKD5bKE5bKF5bKG5bKH5bKJ5bKK5bKL5bKO5bKP5bKS5bKT5bKV5bKd5bKe5bKf5bKg5bKh5bKk5bKl5bKm5bKn5bKo77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0MF0ubGVuZ3RoOyArK2opIGlmKERbMTQwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0MF1bal1dID0gMzU4NDAgKyBqOyBkWzM1ODQwICsgal0gPSBEWzE0MF1bal07fVxuXHREWzE0MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWyquWyruWyr+WysOWysuWytOWytuWyueWyuuWyu+WyvOWyvuWzgOWzguWzg+WzheWzhuWzh+WziOWzieWziuWzjOWzjeWzjuWzj+WzkOWzkeWzk+WzlOWzleWzluWzl+WzmOWzmuWzm+WznOWzneWznuWzn+WzoOWzouWzo+Wzp+WzqeWzq+WzrOWzruWzr+WzseWzsuWzs+WztOWzteWztuWzt+WzuOWzueWzuuWzvOWzveWzvuWzv+W0gO+/veW0geW0hOW0heW0iOW0ieW0iuW0i+W0jOW0jeW0j+W0kOW0keW0kuW0k+W0leW0l+W0mOW0meW0muW0nOW0neW0n+W0oOW0oeW0ouW0o+W0peW0qOW0quW0q+W0rOW0r+W0sOW0seW0suW0s+W0teW0tuW0t+W0uOW0ueW0uuW0u+W0vOW0v+W1gOW1geW1guW1g+W1hOW1heW1huW1iOW1ieW1jeW1juW1j+W1kOW1keW1kuW1k+W1lOW1leW1luW1l+W1meW1muW1nOW1nuW1n+W1oOW1oeW1ouW1o+W1pOW1peW1puW1p+W1qOW1quW1reW1ruW1sOW1seW1suW1s+W1teW1tuW1t+W1uOW1ueW1uuW1u+W1vOW1veW1vuW1v+W2gOW2geW2g+W2hOW2heW2huW2h+W2iOW2ieW2iuW2i+W2jOW2jeW2juW2j+W2kOW2keW2kuW2k+W2lOW2leW2luW2l+W2mOW2muW2m+W2nOW2nuW2n+W2oO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDFdLmxlbmd0aDsgKytqKSBpZihEWzE0MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDFdW2pdXSA9IDM2MDk2ICsgajsgZFszNjA5NiArIGpdID0gRFsxNDFdW2pdO31cblx0RFsxNDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ltqHltqLltqPltqTltqXltqbltqfltqjltqnltqrltqvltqzltq3ltq7ltq/ltrDltrHltrLltrPltrTltrXltrbltrjltrnltrrltrvltrzltr3ltr7ltr/lt4Dlt4Hlt4Llt4Plt4Tlt4blt4flt4jlt4nlt4rlt4vlt4zlt47lt4/lt5Dlt5Hlt5Llt5Plt5Tlt5Xlt5blt5flt5jlt5nlt5rlt5zlt5/lt6Dlt6Plt6Tlt6rlt6zlt63vv73lt7Dlt7Xlt7blt7jlt7nlt7rlt7vlt7zlt7/luIDluITluIfluInluIrluIvluI3luI7luJLluJPluJfluJ7luJ/luKDluKHluKLluKPluKTluKXluKjluKnluKrluKvluKzluK/luLDluLLluLPluLTluLXluLbluLnluLrluL7luL/luYDluYHluYPluYbluYfluYjluYnluYrluYvluY3luY7luY/luZDluZHluZLluZPluZbluZfluZjluZnluZrluZzluZ3luZ/luaDluaPluaTluaXluabluafluajluanluarluavluazlua3lua7lua/lubDlubHlubXlubflubnlub7luoHluoLluoPluoXluojluonluozluo3luo7lupLlupjlupvlup3luqHluqLluqPluqTluqjluqnluqrluqvluqzluq7luq/lurDlurHlurLlurTlurrlurvlurzlur3lur/lu4Dlu4Hlu4Llu4Plu4Tlu4Xvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQyXS5sZW5ndGg7ICsraikgaWYoRFsxNDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQyXVtqXV0gPSAzNjM1MiArIGo7IGRbMzYzNTIgKyBqXSA9IERbMTQyXVtqXTt9XG5cdERbMTQzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95buG5buH5buI5buL5buM5buN5buO5buP5buQ5buU5buV5buX5buY5buZ5bua5buc5bud5bue5buf5bug5buh5bui5buj5buk5bul5bum5bun5bup5bur5bus5but5buu5buv5buw5bux5buy5buz5bu15bu45bu55bu75bu85bu95byF5byG5byH5byJ5byM5byN5byO5byQ5byS5byU5byW5byZ5bya5byc5byd5bye5byh5byi5byj5byk77+95byo5byr5bys5byu5byw5byy5byz5by05by15by25by35by45by75by95by+5by/5b2B5b2C5b2D5b2E5b2F5b2G5b2H5b2I5b2J5b2K5b2L5b2M5b2N5b2O5b2P5b2R5b2U5b2Z5b2a5b2b5b2c5b2e5b2f5b2g5b2j5b2l5b2n5b2o5b2r5b2u5b2v5b2y5b205b215b225b245b265b295b2+5b2/5b6D5b6G5b6N5b6O5b6P5b6R5b6T5b6U5b6W5b6a5b6b5b6d5b6e5b6f5b6g5b6i5b6j5b6k5b6l5b6m5b6n5b6p5b6r5b6s5b6v5b6w5b6x5b6y5b6z5b605b625b645b655b665b675b6+5b6/5b+A5b+B5b+C5b+H5b+I5b+K5b+L5b+O5b+T5b+U5b+V5b+a5b+b5b+c5b+e5b+f5b+i5b+j5b+l5b+m5b+o5b+p5b+s5b+v5b+w5b+y5b+z5b+05b+25b+35b+55b+65b+85oCH77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0M10ubGVuZ3RoOyArK2opIGlmKERbMTQzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0M11bal1dID0gMzY2MDggKyBqOyBkWzM2NjA4ICsgal0gPSBEWzE0M11bal07fVxuXHREWzE0NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaAiOaAieaAi+aAjOaAkOaAkeaAk+aAl+aAmOaAmuaAnuaAn+aAouaAo+aApOaArOaAreaAruaAsOaAseaAsuaAs+aAtOaAtuaAt+aAuOaAueaAuuaAveaAvuaBgOaBhOaBheaBhuaBh+aBiOaBieaBiuaBjOaBjuaBj+aBkeaBk+aBlOaBluaBl+aBmOaBm+aBnOaBnuaBn+aBoOaBoeaBpeaBpuaBruaBseaBsuaBtOaBteaBt+aBvuaCgO+/veaCgeaCguaCheaChuaCh+aCiOaCiuaCi+aCjuaCj+aCkOaCkeaCk+aCleaCl+aCmOaCmeaCnOaCnuaCoeaCouaCpOaCpeaCp+aCqeaCquaCruaCsOaCs+aCteaCtuaCt+aCueaCuuaCveaCvuaCv+aDgOaDgeaDguaDg+aDhOaDh+aDiOaDieaDjOaDjeaDjuaDj+aDkOaDkuaDk+aDlOaDluaDl+aDmeaDm+aDnuaDoeaDouaDo+aDpOaDpeaDquaDseaDsuaDteaDt+aDuOaDu+aDvOaDveaDvuaDv+aEguaEg+aEhOaEheaEh+aEiuaEi+aEjOaEkOaEkeaEkuaEk+aElOaEluaEl+aEmOaEmeaEm+aEnOaEneaEnuaEoeaEouaEpeaEqOaEqeaEquaErOaEreaEruaEr+aEsOaEseaEsuaEs+aEtOaEteaEtuaEt+aEuOaEueaEuuaEu+aEvOaEveaEvuaFgOaFgeaFguaFg+aFhOaFheaFhu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDRdLmxlbmd0aDsgKytqKSBpZihEWzE0NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDRdW2pdXSA9IDM2ODY0ICsgajsgZFszNjg2NCArIGpdID0gRFsxNDRdW2pdO31cblx0RFsxNDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mhYfmhYnmhYvmhY3mhY/mhZDmhZLmhZPmhZTmhZbmhZfmhZjmhZnmhZrmhZvmhZzmhZ7mhZ/mhaDmhaHmhaPmhaTmhaXmhabmhanmharmhavmhazmha3mha7mha/mhbHmhbLmhbPmhbTmhbbmhbjmhbnmhbrmhbvmhbzmhb3mhb7mhb/mhoDmhoHmhoLmhoPmhoTmhoXmhobmhofmhojmhonmhormhozmho3mho/mhpDmhpHmhpLmhpPmhpXvv73mhpbmhpfmhpjmhpnmhprmhpvmhpzmhp7mhp/mhqDmhqHmhqLmhqPmhqTmhqXmhqbmhqrmhqvmhq3mhq7mhq/mhrDmhrHmhrLmhrPmhrTmhrXmhrbmhrjmhrnmhrrmhrvmhrzmhr3mhr/mh4Dmh4Hmh4Pmh4Tmh4Xmh4bmh4fmh4nmh4zmh43mh47mh4/mh5Dmh5Pmh5Xmh5bmh5fmh5jmh5nmh5rmh5vmh5zmh53mh57mh5/mh6Dmh6Hmh6Lmh6Pmh6Tmh6Xmh6fmh6jmh6nmh6rmh6vmh6zmh63mh67mh6/mh7Dmh7Hmh7Lmh7Pmh7Tmh7bmh7fmh7jmh7nmh7rmh7vmh7zmh73mh77miIDmiIHmiILmiIPmiITmiIXmiIfmiInmiJPmiJTmiJnmiJzmiJ3miJ7miKDmiKPmiKbmiKfmiKjmiKnmiKvmiK3miK/miLDmiLHmiLLmiLXmiLbmiLjmiLnmiLrmiLvmiLzmiYLmiYTmiYXmiYbmiYrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ1XS5sZW5ndGg7ICsraikgaWYoRFsxNDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ1XVtqXV0gPSAzNzEyMCArIGo7IGRbMzcxMjAgKyBqXSA9IERbMTQ1XVtqXTt9XG5cdERbMTQ2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95omP5omQ5omV5omW5omX5omZ5oma5omc5omd5ome5omf5omg5omh5omi5omk5oml5omo5omx5omy5om05om15om35om45om65om75om95oqB5oqC5oqD5oqF5oqG5oqH5oqI5oqL5oqM5oqN5oqO5oqP5oqQ5oqU5oqZ5oqc5oqd5oqe5oqj5oqm5oqn5oqp5oqq5oqt5oqu5oqv5oqw5oqy5oqz5oq05oq25oq35oq45oq65oq+5ouA5ouB77+95ouD5ouL5ouP5ouR5ouV5oud5oue5oug5ouh5ouk5ouq5our5ouw5ouy5ou15ou45ou55ou65ou75oyA5oyD5oyE5oyF5oyG5oyK5oyL5oyM5oyN5oyP5oyQ5oyS5oyT5oyU5oyV5oyX5oyY5oyZ5oyc5oym5oyn5oyp5oys5oyt5oyu5oyw5oyx5oyz5oy05oy15oy25oy35oy45oy75oy85oy+5oy/5o2A5o2B5o2E5o2H5o2I5o2K5o2R5o2S5o2T5o2U5o2W5o2X5o2Y5o2Z5o2a5o2b5o2c5o2d5o2g5o2k5o2l5o2m5o2o5o2q5o2r5o2s5o2v5o2w5o2y5o2z5o205o215o245o255o285o295o2+5o2/5o6B5o6D5o6E5o6F5o6G5o6L5o6N5o6R5o6T5o6U5o6V5o6X5o6Z5o6a5o6b5o6c5o6d5o6e5o6f5o6h5o6k5o6m5o6r5o6v5o6x5o6y5o615o625o655o675o695o6/5o+A77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0Nl0ubGVuZ3RoOyArK2opIGlmKERbMTQ2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0Nl1bal1dID0gMzczNzYgKyBqOyBkWzM3Mzc2ICsgal0gPSBEWzE0Nl1bal07fVxuXHREWzE0N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaPgeaPguaPg+aPheaPh+aPiOaPiuaPi+aPjOaPkeaPk+aPlOaPleaPl+aPmOaPmeaPmuaPm+aPnOaPneaPn+aPouaPpOaPpeaPpuaPp+aPqOaPq+aPrOaPruaPr+aPsOaPseaPs+aPteaPt+aPueaPuuaPu+aPvOaPvuaQg+aQhOaQhuaQh+aQiOaQieaQiuaQjeaQjuaQkeaQkuaQleaQluaQl+aQmOaQmeaQmuaQneaQn+aQouaQo+aQpO+/veaQpeaQp+aQqOaQqeaQq+aQruaQr+aQsOaQseaQsuaQs+aQteaQtuaQt+aQuOaQueaQu+aQvOaQvuaRgOaRguaRg+aRieaRi+aRjOaRjeaRjuaRj+aRkOaRkeaRk+aRleaRluaRl+aRmeaRmuaRm+aRnOaRneaRn+aRoOaRoeaRouaRo+aRpOaRpeaRpuaRqOaRquaRq+aRrOaRruaRr+aRsOaRseaRsuaRs+aRtOaRteaRtuaRt+aRu+aRvOaRveaRvuaRv+aSgOaSgeaSg+aShuaSiOaSieaSiuaSi+aSjOaSjeaSjuaSj+aSkOaSk+aSlOaSl+aSmOaSmuaSm+aSnOaSneaSn+aSoOaSoeaSouaSo+aSpeaSpuaSp+aSqOaSquaSq+aSr+aSseaSsuaSs+aStOaStuaSueaSu+aSveaSvuaSv+aTgeaTg+aThOaThuaTh+aTiOaTieaTiuaTi+aTjOaTj+aTkeaTk+aTlOaTleaTluaTmeaTmu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDddLmxlbmd0aDsgKytqKSBpZihEWzE0N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDddW2pdXSA9IDM3NjMyICsgajsgZFszNzYzMiArIGpdID0gRFsxNDddW2pdO31cblx0RFsxNDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mk5vmk5zmk53mk5/mk6Dmk6Hmk6Pmk6Xmk6fmk6jmk6nmk6rmk6vmk6zmk63mk67mk6/mk7Dmk7Hmk7Lmk7Pmk7Tmk7Xmk7bmk7fmk7jmk7nmk7rmk7vmk7zmk73mk77mk7/mlIHmlILmlIPmlITmlIXmlIbmlIfmlIjmlIrmlIvmlIzmlI3mlI7mlI/mlJDmlJHmlJPmlJTmlJXmlJbmlJfmlJnmlJrmlJvmlJzmlJ3mlJ7mlJ/mlKDmlKHvv73mlKLmlKPmlKTmlKbmlKfmlKjmlKnmlKrmlKzmlK3mlLDmlLHmlLLmlLPmlLfmlLrmlLzmlL3mlYDmlYHmlYLmlYPmlYTmlYbmlYfmlYrmlYvmlY3mlY7mlZDmlZLmlZPmlZTmlZfmlZjmlZrmlZzmlZ/mlaDmlaHmlaTmlaXmlafmlajmlanmlarmla3mla7mla/mlbHmlbPmlbXmlbbmlbjmlbnmlbrmlbvmlbzmlb3mlb7mlb/mloDmloHmloLmloPmloTmloXmlobmlojmlonmlormlo3mlo7mlo/mlpLmlpTmlpXmlpbmlpjmlprmlp3mlp7mlqDmlqLmlqPmlqbmlqjmlqrmlqzmlq7mlrHmlrLmlrPmlrTmlrXmlrbmlrfmlrjmlrrmlrvmlr7mlr/ml4Dml4Lml4fml4jml4nml4rml43ml5Dml5Hml5Pml5Tml5Xml5jml5nml5rml5vml5zml53ml57ml5/ml6Hml6Pml6Tml6rml6vvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ4XS5sZW5ndGg7ICsraikgaWYoRFsxNDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ4XVtqXV0gPSAzNzg4OCArIGo7IGRbMzc4ODggKyBqXSA9IERbMTQ4XVtqXTt9XG5cdERbMTQ5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95pey5pez5pe05pe15pe45pe55pe75pe85pe95pe+5pe/5piB5piE5piF5piH5piI5piJ5piL5piN5piQ5piR5piS5piW5piX5piY5pia5pib5pic5pie5pih5pii5pij5pik5pim5pip5piq5pir5pis5piu5piw5piy5piz5pi35pi45pi55pi65pi75pi95pi/5pmA5pmC5pmE5pmF5pmG5pmH5pmI5pmJ5pmK5pmN5pmO5pmQ5pmR5pmY77+95pmZ5pmb5pmc5pmd5pme5pmg5pmi5pmj5pml5pmn5pmp5pmq5pmr5pms5pmt5pmx5pmy5pmz5pm15pm45pm55pm75pm85pm95pm/5pqA5pqB5pqD5pqF5pqG5pqI5pqJ5pqK5pqL5pqN5pqO5pqP5pqQ5pqS5pqT5pqU5pqV5pqY5pqZ5pqa5pqb5pqc5pqe5pqf5pqg5pqh5pqi5pqj5pqk5pql5pqm5pqp5pqq5pqr5pqs5pqt5pqv5pqw5pqx5pqy5pqz5pq15pq25pq35pq45pq65pq75pq85pq95pq/5puA5puB5puC5puD5puE5puF5puG5puH5puI5puJ5puK5puL5puM5puN5puO5puP5puQ5puR5puS5puT5puU5puV5puW5puX5puY5pua5pue5puf5pug5puh5pui5puj5puk5pul5pun5puo5puq5pur5pus5put5puu5puv5pux5pu15pu25pu45pu65pu75pu95pyB5pyC5pyD77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0OV0ubGVuZ3RoOyArK2opIGlmKERbMTQ5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0OV1bal1dID0gMzgxNDQgKyBqOyBkWzM4MTQ0ICsgal0gPSBEWzE0OV1bal07fVxuXHREWzE1MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veachOacheachuach+acjOacjuacj+ackeackuack+acluacmOacmeacmuacnOacnuacoOacoeacouaco+acpOacpeacp+acqeacruacsOacsuacs+actuact+acuOacueacu+acvOacvuacv+adgeadhOadheadh+adiuadi+adjeadkuadlOadleadl+admOadmeadmuadm+adneadouado+adpOadpuadp+adq+adrOadruadseadtOadtu+/veaduOadueaduuadu+adveaegOaeguaeg+aeheaehuaeiOaeiuaejOaejeaejuaej+aekeaekuaek+aelOaeluaemeaem+aen+aeoOaeoeaepOaepuaeqeaerOaeruaeseaesuaetOaeueaeuuaeu+aevOaeveaevuaev+afgOafguafheafhuafh+afiOafieafiuafi+afjOafjeafjuafleafluafl+afm+afn+afoeafo+afpOafpuafp+afqOafquafq+afreafruafsuafteaftuaft+afuOafueafuuafu+afvOafvuaggeagguagg+aghOaghuagjeagkOagkuaglOagleagmOagmeagmuagm+agnOagnuagn+agoOagouago+agpOagpeagpuagp+agqOagq+agrOagreagruagr+agsOagseagtOagteagtuaguuagu+agv+ahh+ahi+ahjeahj+ahkuahluahl+ahmOahmeahmuahm++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTBdLmxlbmd0aDsgKytqKSBpZihEWzE1MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTBdW2pdXSA9IDM4NDAwICsgajsgZFszODQwMCArIGpdID0gRFsxNTBdW2pdO31cblx0RFsxNTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73moZzmoZ3moZ7moZ/moarmoazmoa3moa7moa/mobDmobHmobLmobPmobXmobjmobnmobrmobvmobzmob3mob7mob/mooDmooLmooTmoofmoojmoonmoormoovmoozmoo3moo7mopDmopHmopLmopTmopXmopbmopjmopnmoprmopvmopzmop3mop7mop/moqDmoqHmoqPmoqTmoqXmoqnmoqrmoqvmoqzmoq7morHmorLmorTmorbmorfmorjvv73mornmorrmorvmorzmor3mor7mor/mo4Hmo4Pmo4Tmo4Xmo4bmo4fmo4jmo4rmo4zmo47mo4/mo5Dmo5Hmo5Pmo5Tmo5bmo5fmo5nmo5vmo5zmo53mo57mo5/mo6Hmo6Lmo6Tmo6Xmo6bmo6fmo6jmo6nmo6rmo6vmo6zmo63mo6/mo7Lmo7Pmo7Tmo7bmo7fmo7jmo7vmo73mo77mo7/mpIDmpILmpIPmpITmpIbmpIfmpIjmpInmpIrmpIzmpI/mpJHmpJPmpJTmpJXmpJbmpJfmpJjmpJnmpJrmpJvmpJzmpJ3mpJ7mpKHmpKLmpKPmpKXmpKbmpKfmpKjmpKnmpKrmpKvmpKzmpK7mpK/mpLHmpLLmpLPmpLXmpLbmpLfmpLjmpLrmpLvmpLzmpL7mpYDmpYHmpYPmpYTmpYXmpYbmpYfmpYjmpYnmpYrmpYvmpYzmpY3mpY7mpY/mpZDmpZHmpZLmpZPmpZXmpZbmpZjmpZnmpZvmpZzmpZ/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTUxXS5sZW5ndGg7ICsraikgaWYoRFsxNTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTUxXVtqXV0gPSAzODY1NiArIGo7IGRbMzg2NTYgKyBqXSA9IERbMTUxXVtqXTt9XG5cdERbMTUyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95qWh5qWi5qWk5qWl5qWn5qWo5qWp5qWq5qWs5qWt5qWv5qWw5qWy5qWz5qW05qW15qW25qW65qW75qW95qW+5qW/5qaB5qaD5qaF5qaK5qaL5qaM5qaO5qaP5qaQ5qaR5qaS5qaT5qaW5qaX5qaZ5qaa5qad5qae5qaf5qag5qah5qai5qaj5qak5qal5qam5qap5qaq5qas5qau5qav5qaw5qay5qaz5qa15qa25qa45qa55qa65qa85qa977+95qa+5qa/5qeA5qeC5qeD5qeE5qeF5qeG5qeH5qeI5qeJ5qeL5qeN5qeP5qeR5qeS5qeT5qeV5qeW5qeX5qeY5qeZ5qea5qec5qed5qee5qeh5qei5qej5qek5qel5qem5qen5qeo5qep5qeq5qer5qes5qeu5qev5qew5qex5qez5qe05qe15qe25qe35qe45qe55qe65qe75qe85qe+5qiA5qiB5qiC5qiD5qiE5qiF5qiG5qiH5qiI5qiJ5qiL5qiM5qiN5qiO5qiP5qiQ5qiR5qiS5qiT5qiU5qiV5qiW5qiZ5qia5qib5qic5qid5qie5qig5qii5qij5qik5qil5qim5qin5qip5qir5qis5qit5qiu5qiw5qiy5qiz5qi05qi25qi35qi45qi55qi65qi75qi85qi/5qmA5qmB5qmC5qmD5qmF5qmG5qmI5qmJ5qmK5qmL5qmM5qmN5qmO5qmP5qmR5qmS5qmT5qmU5qmV5qmW5qmX5qma77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1Ml0ubGVuZ3RoOyArK2opIGlmKERbMTUyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1Ml1bal1dID0gMzg5MTIgKyBqOyBkWzM4OTEyICsgal0gPSBEWzE1Ml1bal07fVxuXHREWzE1M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veapnOapneapnuapn+apoOapouapo+appOappuapp+apqOapqeapquapq+aprOapreapruapr+apsOapsuaps+aptOapteaptuapt+apuOapuuapu+apveapvuapv+aqgeaqguaqg+aqheaqhuaqh+aqiOaqieaqiuaqi+aqjOaqjeaqj+aqkuaqk+aqlOaqleaqluaqmOaqmeaqmuaqm+aqnOaqneaqnuaqn+aqoeaqouaqo+aqpOaqpeaqpu+/veaqp+aqqOaqquaqreaqruaqr+aqsOaqseaqsuaqs+aqtOaqteaqtuaqt+aquOaqueaquuaqu+aqvOaqveaqvuaqv+argOargearguarg+arhOarhearhuarh+ariOarieariuari+arjOarjearjuarj+arkOarkearkuark+arlOarlearluarl+armOarmearmuarm+arnOarnearnuarn+aroOaroearouaro+arpOarpearpuarp+arqOarqearquarq+arrOarrearruarr+arsOarsearsuars+artOarteartuart+aruOaruearuuaru+arvOarvearvuarv+asgOasgeasguasg+ashOasheashuash+asiOasieasiuasi+asjOasjeasjuasj+askOaskeaskuask+aslOasleasluasl+asmOasmeasmuasm+asnOasneasnuasn+aspeaspuasqOasqeasquasq+asrOasreasru+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTNdLmxlbmd0aDsgKytqKSBpZihEWzE1M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTNdW2pdXSA9IDM5MTY4ICsgajsgZFszOTE2OCArIGpdID0gRFsxNTNdW2pdO31cblx0RFsxNTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mrK/mrLDmrLHmrLPmrLTmrLXmrLbmrLjmrLvmrLzmrL3mrL/mrYDmrYHmrYLmrYTmrYXmrYjmrYrmrYvmrY3mrY7mrY/mrZDmrZHmrZLmrZPmrZTmrZXmrZbmrZfmrZjmrZrmrZvmrZzmrZ3mrZ7mrZ/mraDmraHmrajmranmravmrazmra3mra7mra/mrbDmrbHmrbLmrbPmrbTmrbXmrbbmrbfmrbjmrbrmrb3mrb7mrb/mroDmroXmrojvv73mrozmro7mro/mrpDmrpHmrpTmrpXmrpfmrpjmrpnmrpzmrp3mrp7mrp/mrqDmrqLmrqPmrqTmrqXmrqbmrqfmrqjmrqnmrqvmrqzmrq3mrq7mrq/mrrDmrrHmrrLmrrbmrrjmrrnmrrrmrrvmrrzmrr3mrr7mr4Dmr4Pmr4Tmr4bmr4fmr4jmr4nmr4rmr4zmr47mr5Dmr5Hmr5jmr5rmr5zmr53mr57mr5/mr6Dmr6Lmr6Pmr6Tmr6Xmr6bmr6fmr6jmr6nmr6zmr63mr67mr7Dmr7Hmr7Lmr7Tmr7bmr7fmr7jmr7rmr7vmr7zmr77mr7/msIDmsIHmsILmsIPmsITmsIjmsInmsIrmsIvmsIzmsI7msJLmsJfmsJzmsJ3msJ7msKDmsKPmsKXmsKvmsKzmsK3msLHmsLPmsLbmsLfmsLnmsLrmsLvmsLzmsL7msL/msYPmsYTmsYXmsYjmsYvmsYzmsY3msY7msY/msZHmsZLmsZPmsZbmsZjvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU0XS5sZW5ndGg7ICsraikgaWYoRFsxNTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU0XVtqXV0gPSAzOTQyNCArIGo7IGRbMzk0MjQgKyBqXSA9IERbMTU0XVtqXTt9XG5cdERbMTU1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95rGZ5rGa5rGi5rGj5rGl5rGm5rGn5rGr5rGs5rGt5rGu5rGv5rGx5rGz5rG15rG35rG45rG65rG75rG85rG/5rKA5rKE5rKH5rKK5rKL5rKN5rKO5rKR5rKS5rKV5rKW5rKX5rKY5rKa5rKc5rKd5rKe5rKg5rKi5rKo5rKs5rKv5rKw5rK05rK15rK25rK35rK65rOA5rOB5rOC5rOD5rOG5rOH5rOI5rOL5rON5rOO5rOP5rOR5rOS5rOY77+95rOZ5rOa5rOc5rOd5rOf5rOk5rOm5rOn5rOp5rOs5rOt5rOy5rO05rO55rO/5rSA5rSC5rSD5rSF5rSG5rSI5rSJ5rSK5rSN5rSP5rSQ5rSR5rST5rSU5rSV5rSW5rSY5rSc5rSd5rSf5rSg5rSh5rSi5rSj5rSk5rSm5rSo5rSp5rSs5rSt5rSv5rSw5rS05rS25rS35rS45rS65rS/5rWA5rWC5rWE5rWJ5rWM5rWQ5rWV5rWW5rWX5rWY5rWb5rWd5rWf5rWh5rWi5rWk5rWl5rWn5rWo5rWr5rWs5rWt5rWw5rWx5rWy5rWz5rW15rW25rW55rW65rW75rW95rW+5rW/5raA5raB5raD5raE5raG5raH5raK5raL5raN5raP5raQ5raS5raW5raX5raY5raZ5raa5rac5rai5ral5ras5rat5raw5rax5raz5ra05ra25ra35ra55ra65ra75ra85ra95ra+5reB5reC5reD5reI5reJ5reK77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1NV0ubGVuZ3RoOyArK2opIGlmKERbMTU1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1NV1bal1dID0gMzk2ODAgKyBqOyBkWzM5NjgwICsgal0gPSBEWzE1NV1bal07fVxuXHREWzE1Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea3jea3jua3j+a3kOa3kua3k+a3lOa3lea3l+a3mua3m+a3nOa3n+a3oua3o+a3pea3p+a3qOa3qea3qua3rea3r+a3sOa3sua3tOa3tea3tua3uOa3uua3vea3vua3v+a4gOa4gea4gua4g+a4hOa4hua4h+a4iOa4iea4i+a4j+a4kua4k+a4lea4mOa4mea4m+a4nOa4nua4n+a4oua4pua4p+a4qOa4qua4rOa4rua4sOa4sea4s+a4te+/vea4tua4t+a4uea4u+a4vOa4vea4vua4v+a5gOa5gea5gua5hea5hua5h+a5iOa5iea5iua5i+a5jOa5j+a5kOa5kea5kua5lea5l+a5mea5mua5nOa5nea5nua5oOa5oea5oua5o+a5pOa5pea5pua5p+a5qOa5qea5qua5rOa5rea5r+a5sOa5sea5sua5s+a5tOa5tea5tua5t+a5uOa5uea5uua5u+a5vOa5vea6gOa6gea6gua6hOa6h+a6iOa6iua6i+a6jOa6jea6jua6kea6kua6k+a6lOa6lea6lua6l+a6mea6mua6m+a6nea6nua6oOa6oea6o+a6pOa6pua6qOa6qea6q+a6rOa6rea6rua6sOa6s+a6tea6uOa6uea6vOa6vua6v+a7gOa7g+a7hOa7hea7hua7iOa7iea7iua7jOa7jea7jua7kOa7kua7lua7mOa7mea7m+a7nOa7nea7o+a7p+a7qua7q+a7rOa7rea7rua7r++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTZdLmxlbmd0aDsgKytqKSBpZihEWzE1Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTZdW2pdXSA9IDM5OTM2ICsgajsgZFszOTkzNiArIGpdID0gRFsxNTZdW2pdO31cblx0RFsxNTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mu7Dmu7Hmu7Lmu7Pmu7Xmu7bmu7fmu7jmu7rmu7vmu7zmu73mu77mu7/mvIDmvIHmvIPmvITmvIXmvIfmvIjmvIrmvIvmvIzmvI3mvI7mvJDmvJHmvJLmvJbmvJfmvJjmvJnmvJrmvJvmvJzmvJ3mvJ7mvJ/mvKHmvKLmvKPmvKXmvKbmvKfmvKjmvKzmvK7mvLDmvLLmvLTmvLXmvLfmvLjmvLnmvLrmvLvmvLzmvL3mvL/mvYDmvYHmvYLvv73mvYPmvYTmvYXmvYjmvYnmvYrmvYzmvY7mvY/mvZDmvZHmvZLmvZPmvZTmvZXmvZbmvZfmvZnmvZrmvZvmvZ3mvZ/mvaDmvaHmvaPmvaTmvaXmvafmvajmvanmvarmvavmvazmva/mvbDmvbHmvbPmvbXmvbbmvbfmvbnmvbvmvb3mvb7mvb/mvoDmvoHmvoLmvoPmvoXmvobmvofmvormvovmvo/mvpDmvpHmvpLmvpPmvpTmvpXmvpbmvpfmvpjmvpnmvprmvpvmvp3mvp7mvp/mvqDmvqLmvqPmvqTmvqXmvqbmvqjmvqnmvqrmvqvmvqzmvq3mvq7mvq/mvrDmvrHmvrLmvrTmvrXmvrfmvrjmvrrmvrvmvrzmvr3mvr7mvr/mv4Hmv4Pmv4Tmv4Xmv4bmv4fmv4jmv4rmv4vmv4zmv43mv47mv4/mv5Dmv5Pmv5Tmv5Xmv5bmv5fmv5jmv5nmv5rmv5vmv5zmv53mv5/mv6Lmv6Pmv6Tmv6Xvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU3XS5sZW5ndGg7ICsraikgaWYoRFsxNTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU3XVtqXV0gPSA0MDE5MiArIGo7IGRbNDAxOTIgKyBqXSA9IERbMTU3XVtqXTt9XG5cdERbMTU4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95r+m5r+n5r+o5r+p5r+q5r+r5r+s5r+t5r+w5r+x5r+y5r+z5r+05r+15r+25r+35r+45r+55r+65r+75r+85r+95r++5r+/54CA54CB54CC54CD54CE54CF54CG54CH54CI54CJ54CK54CL54CM54CN54CO54CP54CQ54CS54CT54CU54CV54CW54CX54CY54CZ54Cc54Cd54Ce54Cf54Cg54Ch54Ci54Ck54Cl54Cm54Cn54Co54Cp54Cq77+954Cr54Cs54Ct54Cu54Cv54Cw54Cx54Cy54Cz54C054C254C354C454C654C754C854C954C+54C/54GA54GB54GC54GD54GE54GF54GG54GH54GI54GJ54GK54GL54GN54GO54GQ54GR54GS54GT54GU54GV54GW54GX54GY54GZ54Ga54Gb54Gc54Gd54Gf54Gg54Gh54Gi54Gj54Gk54Gl54Gm54Gn54Go54Gp54Gq54Gu54Gx54Gy54Gz54G054G354G554G654G754G954KB54KC54KD54KE54KG54KH54KI54KL54KM54KN54KP54KQ54KR54KT54KX54KY54Ka54Kb54Ke54Kf54Kg54Kh54Ki54Kj54Kk54Kl54Km54Kn54Ko54Kp54Kq54Kw54Ky54K054K154K254K654K+54K/54OE54OF54OG54OH54OJ54OL54OM54ON54OO54OP54OQ54OR54OS54OT54OU54OV54OW54OX54Oa77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1OF0ubGVuZ3RoOyArK2opIGlmKERbMTU4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1OF1bal1dID0gNDA0NDggKyBqOyBkWzQwNDQ4ICsgal0gPSBEWzE1OF1bal07fVxuXHREWzE1OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeDnOeDneeDnueDoOeDoeeDoueDo+eDpeeDqueDrueDsOeDseeDsueDs+eDtOeDteeDtueDuOeDuueDu+eDvOeDvueDv+eEgOeEgeeEgueEg+eEhOeEheeEhueEh+eEiOeEi+eEjOeEjeeEjueEj+eEkeeEkueElOeEl+eEm+eEnOeEneeEnueEn+eEoOeEoeeEoueEo+eEpOeEpeeEp+eEqOeEqeeEqueEq+eErOeEreeErueEsueEs+eEtO+/veeEteeEt+eEuOeEueeEuueEu+eEvOeEveeEvueEv+eFgOeFgeeFgueFg+eFhOeFhueFh+eFiOeFieeFi+eFjeeFj+eFkOeFkeeFkueFk+eFlOeFleeFlueFl+eFmOeFmeeFmueFm+eFneeFn+eFoOeFoeeFoueFo+eFpeeFqeeFqueFq+eFrOeFreeFr+eFsOeFseeFtOeFteeFtueFt+eFueeFu+eFvOeFvueFv+eGgOeGgeeGgueGg+eGheeGhueGh+eGiOeGieeGi+eGjOeGjeeGjueGkOeGkeeGkueGk+eGleeGlueGl+eGmueGm+eGnOeGneeGnueGoeeGoueGo+eGpOeGpeeGpueGp+eGqeeGqueGq+eGreeGrueGr+eGsOeGseeGsueGtOeGtueGt+eGuOeGuueGu+eGvOeGveeGvueGv+eHgOeHgeeHgueHhOeHheeHhueHh+eHiOeHieeHiueHi+eHjOeHjeeHj+eHkOeHkeeHkueHk++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTldLmxlbmd0aDsgKytqKSBpZihEWzE1OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTldW2pdXSA9IDQwNzA0ICsgajsgZFs0MDcwNCArIGpdID0gRFsxNTldW2pdO31cblx0RFsxNjBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nh5bnh5fnh5jnh5nnh5rnh5vnh5znh53nh57nh5/nh6Hnh6Lnh6Pnh6Tnh6bnh6jnh6nnh6rnh6vnh6znh63nh6/nh7Dnh7Hnh7Lnh7Pnh7Tnh7Xnh7bnh7fnh7jnh7rnh7vnh7znh73nh77nh7/niIDniIHniILniIPniITniIXniIfniIjniInniIrniIvniIzniI3niI7niI/niJDniJHniJLniJPniJTniJXniJbniJfniJjniJnniJrvv73niJvniJzniJ7niJ/niKDniKHniKLniKPniKTniKXniKbniKfniKnniKvniK3niK7niK/niLLniLPniLTniLrniLzniL7niYDniYHniYLniYPniYTniYXniYbniYnniYrniYvniY7niY/niZDniZHniZPniZTniZXniZfniZjniZrniZzniZ7niaDniaPniaTniaXniajniarniavniaznia3nibDnibHnibPnibTnibbnibfnibjnibvnibznib3nioLnioPnioXniobniofniojnionnioznio7nipDnipHnipPnipTnipXnipbnipfnipjnipnniprnipvnipznip3nip7niqDniqHniqLniqPniqTniqXniqbniqfniqjniqnniqrniqvniq7nirHnirLnirPnirXnirrnirvnirznir3nir7nir/ni4Dni4Xni4bni4fni4nni4rni4vni4zni4/ni5Hni5Pni5Tni5Xni5bni5jni5rni5vvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTYwXS5sZW5ndGg7ICsraikgaWYoRFsxNjBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTYwXVtqXV0gPSA0MDk2MCArIGo7IGRbNDA5NjAgKyBqXSA9IERbMTYwXVtqXTt9XG5cdERbMTYxXSA9IFwiwrfLicuHwqjjgIPjgIXigJTvvZ7igJbigKbigJjigJnigJzigJ3jgJTjgJXjgIjjgInjgIrjgIvjgIzjgI3jgI7jgI/jgJbjgJfjgJDjgJHCscOXw7fiiLbiiKfiiKjiiJHiiI/iiKriiKniiIjiiLfiiJriiqXiiKXiiKDijJLiipniiKviiK7iiaHiiYziiYjiiL3iiJ3iiaDiia7iia/iiaTiiaXiiJ7iiLXiiLTimYLimYDCsOKAsuKAs+KEg++8hMKk77+g77+h4oCwwqfihJbimIbimIXil4vil4/il47il4fil4bilqHilqDilrPilrLigLvihpLihpDihpHihpPjgJPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTYxXS5sZW5ndGg7ICsraikgaWYoRFsxNjFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTYxXVtqXV0gPSA0MTIxNiArIGo7IGRbNDEyMTYgKyBqXSA9IERbMTYxXVtqXTt9XG5cdERbMTYyXSA9IFwioWw4oWx4oWy4oWz4oW04oW14oW24oW34oW44oW577+977+977+977+977+977+94pKI4pKJ4pKK4pKL4pKM4pKN4pKO4pKP4pKQ4pKR4pKS4pKT4pKU4pKV4pKW4pKX4pKY4pKZ4pKa4pKb4pG04pG14pG24pG34pG44pG54pG64pG74pG84pG94pG+4pG/4pKA4pKB4pKC4pKD4pKE4pKF4pKG4pKH4pGg4pGh4pGi4pGj4pGk4pGl4pGm4pGn4pGo4pGp77+977+944ig44ih44ii44ij44ik44il44im44in44io44ip77+977+94oWg4oWh4oWi4oWj4oWk4oWl4oWm4oWn4oWo4oWp4oWq4oWr77+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2Ml0ubGVuZ3RoOyArK2opIGlmKERbMTYyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2Ml1bal1dID0gNDE0NzIgKyBqOyBkWzQxNDcyICsgal0gPSBEWzE2Ml1bal07fVxuXHREWzE2M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+8ge+8gu+8g++/pe+8he+8hu+8h++8iO+8ie+8iu+8i++8jO+8je+8ju+8j++8kO+8ke+8ku+8k++8lO+8le+8lu+8l++8mO+8me+8mu+8m++8nO+8ne+8nu+8n++8oO+8oe+8ou+8o++8pO+8pe+8pu+8p++8qO+8qe+8qu+8q++8rO+8re+8ru+8r++8sO+8se+8su+8s++8tO+8te+8tu+8t++8uO+8ue+8uu+8u++8vO+8ve+8vu+8v++9gO+9ge+9gu+9g++9hO+9he+9hu+9h++9iO+9ie+9iu+9i++9jO+9je+9ju+9j++9kO+9ke+9ku+9k++9lO+9le+9lu+9l++9mO+9me+9mu+9m++9nO+9ne+/o++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjNdLmxlbmd0aDsgKytqKSBpZihEWzE2M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjNdW2pdXSA9IDQxNzI4ICsgajsgZFs0MTcyOCArIGpdID0gRFsxNjNdW2pdO31cblx0RFsxNjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73jgYHjgYLjgYPjgYTjgYXjgYbjgYfjgYjjgYnjgYrjgYvjgYzjgY3jgY7jgY/jgZDjgZHjgZLjgZPjgZTjgZXjgZbjgZfjgZjjgZnjgZrjgZvjgZzjgZ3jgZ7jgZ/jgaDjgaHjgaLjgaPjgaTjgaXjgabjgafjgajjganjgarjgavjgazjga3jga7jga/jgbDjgbHjgbLjgbPjgbTjgbXjgbbjgbfjgbjjgbnjgbrjgbvjgbzjgb3jgb7jgb/jgoDjgoHjgoLjgoPjgoTjgoXjgobjgofjgojjgonjgorjgovjgozjgo3jgo7jgo/jgpDjgpHjgpLjgpPvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY0XS5sZW5ndGg7ICsraikgaWYoRFsxNjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY0XVtqXV0gPSA0MTk4NCArIGo7IGRbNDE5ODQgKyBqXSA9IERbMTY0XVtqXTt9XG5cdERbMTY1XSA9IFwih44Ki44Kj44Kk44Kl44Km44Kn44Ko44Kp44Kq44Kr44Ks44Kt44Ku44Kv44Kw44Kx44Ky44Kz44K044K144K244K344K444K544K644K744K844K944K+44K/44OA44OB44OC44OD44OE44OF44OG44OH44OI44OJ44OK44OL44OM44ON44OO44OP44OQ44OR44OS44OT44OU44OV44OW44OX44OY44OZ44Oa44Ob44Oc44Od44Oe44Of44Og44Oh44Oi44Oj44Ok44Ol44Om44On44Oo44Op44Oq44Or44Os44Ot44Ou44Ov44Ow44Ox44Oy44Oz44O044O144O277+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2NV0ubGVuZ3RoOyArK2opIGlmKERbMTY1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2NV1bal1dID0gNDIyNDAgKyBqOyBkWzQyMjQwICsgal0gPSBEWzE2NV1bal07fVxuXHREWzE2Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vc6RzpLOk86UzpXOls6XzpjOmc6azpvOnM6dzp7On86gzqHOo86kzqXOps6nzqjOqe+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vc6xzrLOs860zrXOts63zrjOuc66zrvOvM69zr7Ov8+Az4HPg8+Ez4XPhs+Hz4jPie+/ve+/ve+/ve+/ve+/ve+/ve+/ve+4te+4tu+4ue+4uu+4v++5gO+4ve+4vu+5ge+5gu+5g++5hO+/ve+/ve+4u++4vO+4t++4uO+4se+/ve+4s++4tO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjZdLmxlbmd0aDsgKytqKSBpZihEWzE2Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjZdW2pdXSA9IDQyNDk2ICsgajsgZFs0MjQ5NiArIGpdID0gRFsxNjZdW2pdO31cblx0RFsxNjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73QkNCR0JLQk9CU0JXQgdCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73QsNCx0LLQs9C00LXRkdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY3XS5sZW5ndGg7ICsraikgaWYoRFsxNjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY3XVtqXV0gPSA0Mjc1MiArIGo7IGRbNDI3NTIgKyBqXSA9IERbMTY3XVtqXTt9XG5cdERbMTY4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9y4rLi8uZ4oCT4oCV4oCl4oC14oSF4oSJ4oaW4oaX4oaY4oaZ4oiV4oif4oij4omS4omm4omn4oq/4pWQ4pWR4pWS4pWT4pWU4pWV4pWW4pWX4pWY4pWZ4pWa4pWb4pWc4pWd4pWe4pWf4pWg4pWh4pWi4pWj4pWk4pWl4pWm4pWn4pWo4pWp4pWq4pWr4pWs4pWt4pWu4pWv4pWw4pWx4pWy4pWz4paB4paC4paD4paE4paF4paG4paH77+94paI4paJ4paK4paL4paM4paN4paO4paP4paT4paU4paV4pa84pa94pei4pej4pek4pel4piJ4oqV44CS44Cd44Ce77+977+977+977+977+977+977+977+977+977+977+9xIHDoceOw6DEk8OpxJvDqMSrw63HkMOsxY3Ds8eSw7LFq8O6x5TDuceWx5jHmsecw7zDqsmR77+9xYTFiO+/vcmh77+977+977+977+944SF44SG44SH44SI44SJ44SK44SL44SM44SN44SO44SP44SQ44SR44SS44ST44SU44SV44SW44SX44SY44SZ44Sa44Sb44Sc44Sd44Se44Sf44Sg44Sh44Si44Sj44Sk44Sl44Sm44Sn44So44Sp77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2OF0ubGVuZ3RoOyArK2opIGlmKERbMTY4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2OF1bal1dID0gNDMwMDggKyBqOyBkWzQzMDA4ICsgal0gPSBEWzE2OF1bal07fVxuXHREWzE2OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veOAoeOAouOAo+OApOOApeOApuOAp+OAqOOAqeOKo+OOjuOOj+OOnOOOneOOnuOOoeOPhOOPjuOPkeOPkuOPle+4sO+/ou+/pO+/veKEoeOIse+/veKAkO+/ve+/ve+/veODvOOCm+OCnOODveODvuOAhuOCneOCnu+5ie+5iu+5i++5jO+5je+5ju+5j++5kO+5ke+5ku+5lO+5le+5lu+5l++5me+5mu+5m++5nO+5ne+5nu+5n++5oO+5oe+/ve+5ou+5o++5pO+5pe+5pu+5qO+5qe+5qu+5q++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veOAh++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKUgOKUgeKUguKUg+KUhOKUheKUhuKUh+KUiOKUieKUiuKUi+KUjOKUjeKUjuKUj+KUkOKUkeKUkuKUk+KUlOKUleKUluKUl+KUmOKUmeKUmuKUm+KUnOKUneKUnuKUn+KUoOKUoeKUouKUo+KUpOKUpeKUpuKUp+KUqOKUqeKUquKUq+KUrOKUreKUruKUr+KUsOKUseKUsuKUs+KUtOKUteKUtuKUt+KUuOKUueKUuuKUu+KUvOKUveKUvuKUv+KVgOKVgeKVguKVg+KVhOKVheKVhuKVh+KViOKVieKViuKVi++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjldLmxlbmd0aDsgKytqKSBpZihEWzE2OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjldW2pdXSA9IDQzMjY0ICsgajsgZFs0MzI2NCArIGpdID0gRFsxNjldW2pdO31cblx0RFsxNzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ni5zni53ni5/ni6Lni6Pni6Tni6Xni6bni6fni6rni6vni7Xni7bni7nni73ni77ni7/njIDnjILnjITnjIXnjIbnjIfnjIjnjInnjIvnjIznjI3njI/njJDnjJHnjJLnjJTnjJjnjJnnjJrnjJ/njKDnjKPnjKTnjKbnjKfnjKjnjK3njK/njLDnjLLnjLPnjLXnjLbnjLrnjLvnjLznjL3njYDnjYHnjYLnjYPnjYTnjYXnjYbnjYfnjYjvv73njYnnjYrnjYvnjYznjY7njY/njZHnjZPnjZTnjZXnjZbnjZjnjZnnjZrnjZvnjZznjZ3njZ7njZ/njaHnjaLnjaPnjaTnjaXnjabnjafnjajnjannjarnjavnja7njbDnjbHvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTcwXS5sZW5ndGg7ICsraikgaWYoRFsxNzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTcwXVtqXV0gPSA0MzUyMCArIGo7IGRbNDM1MjAgKyBqXSA9IERbMTcwXVtqXTt9XG5cdERbMTcxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9542y542z5420542154225423542454255426542754285429542/546A546B546C546D546F546G546I546K546M546N546P546Q546S546T546U546V546X546Y546Z546a546c546d546e546g546h546j546k546l546m546n546o546q546s546t546x5460546154625464546554685469546+546/54+B54+D54+E54+F54+G54+H77+954+L54+M54+O54+S54+T54+U54+V54+W54+X54+Y54+a54+b54+c54+d54+f54+h54+i54+j54+k54+m54+o54+q54+r54+s54+u54+v54+w54+x54+z54+054+154+254+377+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3MV0ubGVuZ3RoOyArK2opIGlmKERbMTcxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3MV1bal1dID0gNDM3NzYgKyBqOyBkWzQzNzc2ICsgal0gPSBEWzE3MV1bal07fVxuXHREWzE3Ml0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veePuOePueePuuePu+ePvOePveePvuePv+eQgOeQgeeQgueQhOeQh+eQiOeQi+eQjOeQjeeQjueQkeeQkueQk+eQlOeQleeQlueQl+eQmOeQmeeQnOeQneeQnueQn+eQoOeQoeeQo+eQpOeQp+eQqeeQq+eQreeQr+eQseeQsueQt+eQuOeQueeQuueQu+eQveeQvueQv+eRgOeRgueRg+eRhOeRheeRhueRh+eRiOeRieeRiueRi+eRjOeRje+/veeRjueRj+eRkOeRkeeRkueRk+eRlOeRlueRmOeRneeRoOeRoeeRoueRo+eRpOeRpeeRpueRp+eRqOeRqeeRqueRq+eRrOeRrueRr+eRseeRsueRs+eRtOeRteeRuOeRueeRuu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzJdLmxlbmd0aDsgKytqKSBpZihEWzE3Ml1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzJdW2pdXSA9IDQ0MDMyICsgajsgZFs0NDAzMiArIGpdID0gRFsxNzJdW2pdO31cblx0RFsxNzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nkbvnkbznkb3nkb/nkoLnkoTnkoXnkobnkojnkonnkornkoznko3nko/nkpHnkpLnkpPnkpTnkpXnkpbnkpfnkpjnkpnnkprnkpvnkp3nkp/nkqDnkqHnkqLnkqPnkqTnkqXnkqbnkqrnkqvnkqznkq3nkq7nkq/nkrDnkrHnkrLnkrPnkrTnkrXnkrbnkrfnkrjnkrnnkrvnkrznkr3nkr7nkr/nk4Dnk4Hnk4Lnk4Pnk4Tnk4Xnk4bnk4fvv73nk4jnk4nnk4rnk4vnk4znk43nk47nk4/nk5Dnk5Hnk5Pnk5Tnk5Xnk5bnk5fnk5jnk5nnk5rnk5vnk53nk5/nk6Hnk6Xnk6fnk6jnk6nnk6rnk6vnk6znk63nk7Dnk7Hnk7Lvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTczXS5sZW5ndGg7ICsraikgaWYoRFsxNzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTczXVtqXV0gPSA0NDI4OCArIGo7IGRbNDQyODggKyBqXSA9IERbMTczXVtqXTt9XG5cdERbMTc0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+955Oz55O155O455O555O655O755O855O955O+55SA55SB55SC55SD55SF55SG55SH55SI55SJ55SK55SL55SM55SO55SQ55SS55SU55SV55SW55SX55Sb55Sd55Se55Sg55Sh55Si55Sj55Sk55Sm55Sn55Sq55Su55S055S255S555S855S955S/55WB55WC55WD55WE55WG55WH55WJ55WK55WN55WQ55WR55WS55WT55WV55WW55WX55WY77+955Wd55We55Wf55Wg55Wh55Wi55Wj55Wk55Wn55Wo55Wp55Wr55Ws55Wt55Wu55Wv55Ww55Wx55Wz55W155W255W355W655W755W855W955W+55aA55aB55aC55aE55aF55aH77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3NF0ubGVuZ3RoOyArK2opIGlmKERbMTc0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3NF1bal1dID0gNDQ1NDQgKyBqOyBkWzQ0NTQ0ICsgal0gPSBEWzE3NF1bal07fVxuXHREWzE3NV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeWiOeWieeWiueWjOeWjeeWjueWkOeWk+eWleeWmOeWm+eWnOeWnueWoueWpueWp+eWqOeWqeeWqueWreeWtueWt+eWuueWu+eWv+eXgOeXgeeXhueXi+eXjOeXjueXj+eXkOeXkeeXk+eXl+eXmeeXmueXnOeXneeXn+eXoOeXoeeXpeeXqeeXrOeXreeXrueXr+eXsueXs+eXteeXtueXt+eXuOeXuueXu+eXveeXvueYgueYhOeYhueYh++/veeYiOeYieeYi+eYjeeYjueYj+eYkeeYkueYk+eYlOeYlueYmueYnOeYneeYnueYoeeYo+eYp+eYqOeYrOeYrueYr+eYseeYsueYtueYt+eYueeYuueYu+eYveeZgeeZgueZhO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzVdLmxlbmd0aDsgKytqKSBpZihEWzE3NV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzVdW2pdXSA9IDQ0ODAwICsgajsgZFs0NDgwMCArIGpdID0gRFsxNzVdW2pdO31cblx0RFsxNzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nmYXnmYbnmYfnmYjnmYnnmYrnmYvnmY7nmY/nmZDnmZHnmZLnmZPnmZXnmZfnmZjnmZnnmZrnmZvnmZ3nmZ/nmaDnmaHnmaLnmaTnmaXnmabnmafnmajnmannmarnmaznma3nma7nmbDnmbHnmbLnmbPnmbTnmbXnmbbnmbfnmbnnmbrnmbznmb/nmoDnmoHnmoPnmoXnmonnmornmoznmo3nmo/nmpDnmpLnmpTnmpXnmpfnmpjnmprnmpvvv73nmpznmp3nmp7nmp/nmqDnmqHnmqLnmqPnmqXnmqbnmqfnmqjnmqnnmqrnmqvnmqznmq3nmq/nmrDnmrPnmrXnmrbnmrfnmrjnmrnnmrrnmrvnmrznmr3nmr7nm4Dnm4Hnm4PllYrpmL/ln4PmjKjlk47llInlk4DnmpHnmYzolLznn67oib7noo3niLHpmpjpno3msKjlronkv7rmjInmmpflsrjog7rmoYjogq7mmILnm47lh7nmlZbnhqznv7HoooTlgrLlpaXmh4rmvrPoiq3mjYzmiZLlj63lkKfnrIblhavnlqTlt7Tmi5Tot4vpnbbmiorogJnlnZ3pnLjnvaLniLjnmb3mn4/nmb7mkYbkvbDotKXmi5znqJfmlpHnj63mkKzmibPoiKzpooHmnb/niYjmia7mi4zkvLTnk6PljYrlip7nu4rpgqbluK7moobmppzohoDnu5Hmo5Lno4XomozplZHlgo3osKToi57og57ljIXopJLliaXvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc2XS5sZW5ndGg7ICsraikgaWYoRFsxNzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc2XVtqXV0gPSA0NTA1NiArIGo7IGRbNDUwNTYgKyBqXSA9IERbMTc2XVtqXTt9XG5cdERbMTc3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+955uE55uH55uJ55uL55uM55uT55uV55uZ55ua55uc55ud55ue55ug55uh55ui55uj55uk55um55un55uo55up55uq55ur55us55ut55uw55uz55u155u255u355u655u755u955u/55yA55yC55yD55yF55yG55yK55yM55yO55yP55yQ55yR55yS55yT55yU55yV55yW55yX55yY55yb55yc55yd55ye55yh55yj55yk55yl55yn55yq55yr77+955ys55yu55yw55yx55yy55yz55y055y555y755y955y+55y/552C552E552F552G552I552J552K552L552M552N552O552P552S552T552U552V552W552X552Y552Z552c6JaE6Zu55L+d5aCh6aWx5a6d5oqx5oql5pq06LG56bKN54iG5p2v56KR5oKy5Y2R5YyX6L6I6IOM6LSd6ZKh5YCN54uI5aSH5oOr54SZ6KKr5aWU6Iuv5pys56yo5bSp57u355St5rO16Lmm6L+46YC86by75q+U6YSZ56yU5b2856Kn6JOW6JS95q+V5q+Z5q+W5biB5bqH55e56Zet5pWd5byK5b+F6L6f5aOB6IeC6YG/6Zmb6Z6t6L6557yW6LSs5omB5L6/5Y+Y5Y2e6L6o6L6p6L6r6YGN5qCH5b2q6IaY6KGo6bOW5oaL5Yir55iq5b2s5paM5r+S5ruo5a6+5pGI5YW15Yaw5p+E5LiZ56eJ6aW854Kz77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3N10ubGVuZ3RoOyArK2opIGlmKERbMTc3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3N11bal1dID0gNDUzMTIgKyBqOyBkWzQ1MzEyICsgal0gPSBEWzE3N11bal07fVxuXHREWzE3OF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veedneednuedn+edoOedpOedp+edqeedquedreedruedr+edsOedseedsueds+edtOedteedtuedt+eduOeduuedu+edvOeegeeegueeg+eehueeh+eeiOeeieeeiueei+eej+eekOeek+eelOeeleeelueel+eemOeemeeemueem+eenOeeneeenueeoeeeo+eepOeepueeqOeeq+eereeerueer+eeseeesueetOeetueet+eeuOeeueeeuu+/veeevOeevuefgOefgeefguefg+efhOefheefhuefh+efiOefieefiuefi+efjOefjuefj+efkOefkeefkuefk+eflOefleefluefmOefmeefmuefneefnuefn+efoOefoeefpOeXheW5tueOu+iPoOaSreaLqOmSteazouWNmuWLg+aQj+mTgueulOS8r+W4m+iItuiEluiGiua4pOaziumps+aNleWNnOWTuuihpeWfoOS4jeW4g+atpeewv+mDqOaAluaTpueMnOijgeadkOaJjei0ouedrOi4qemHh+W9qeiPnOiUoemkkOWPguialeaui+aDreaDqOeBv+iLjeiIseS7k+ayp+iXj+aTjeezmeanveabueiNieWOleetluS+p+WGjOa1i+Wxgui5reaPkuWPieiMrOiMtuafpeeitOaQveWvn+WylOW3ruivp+aLhuaftOixuuaQgOaOuuidiemmi+iwl+e8oOmTsuS6p+mYkOmipOaYjOeMlu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzhdLmxlbmd0aDsgKytqKSBpZihEWzE3OF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzhdW2pdXSA9IDQ1NTY4ICsgajsgZFs0NTU2OCArIGpdID0gRFsxNzhdW2pdO31cblx0RFsxNzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nn6bnn6jnn6rnn6/nn7Dnn7Hnn7Lnn7Tnn7Xnn7fnn7nnn7rnn7vnn7znoIPnoITnoIXnoIbnoIfnoIjnoIrnoIvnoI7noI/noJDnoJPnoJXnoJnnoJvnoJ7noKDnoKHnoKLnoKTnoKjnoKrnoKvnoK7noK/noLHnoLLnoLPnoLXnoLbnoL3noL/noYHnoYLnoYPnoYTnoYbnoYjnoYnnoYrnoYvnoY3noY/noZHnoZPnoZTnoZjnoZnnoZrvv73noZvnoZznoZ7noZ/noaDnoaHnoaLnoaPnoaTnoaXnoabnoafnoajnoannoa/nobDnobHnobLnobPnobTnobXnobbnobjnobnnobrnobvnob3nob7nob/nooDnooHnooLnooPlnLrlsJ3luLjplb/lgb/ogqDljoLmlZ7nlYXllLHlgKHotoXmioTpkp7mnJ3lmLLmva7lt6LlkLXngpLovabmia/mkqTmjqPlvbvmvojpg7Toh6PovrDlsJjmmajlv7HmsonpmYjotoHooazmkpHnp7Dln47mqZnmiJDlkYjkuZjnqIvmg6nmvoTor5rmib/pgJ7pqovnp6TlkIPnl7TmjIHljJnmsaDov5/lvJvpqbDogLvpvb/kvojlsLrotaTnv4XmlqXngr3lhYXlhrLomavltIflrqDmir3phaznlbTouIznqKDmhIHnrbnku4fnu7jnnoXkuJHoh63liJ3lh7rmqbHljqjouofplITpm4/mu4HpmaTmpZrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc5XS5sZW5ndGg7ICsraikgaWYoRFsxNzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc5XVtqXV0gPSA0NTgyNCArIGo7IGRbNDU4MjQgKyBqXSA9IERbMTc5XVtqXTt9XG5cdERbMTgwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+956KE56KF56KG56KI56KK56KL56KP56KQ56KS56KU56KV56KW56KZ56Kd56Ke56Kg56Ki56Kk56Km56Ko56Kp56Kq56Kr56Ks56Kt56Ku56Kv56K156K256K356K456K656K756K856K956K/56OA56OC56OD56OE56OG56OH56OI56OM56ON56OO56OP56OR56OS56OT56OW56OX56OY56Oa56Ob56Oc56Od56Oe56Of56Og56Oh56Oi56Oj77+956Ok56Ol56Om56On56Op56Oq56Or56Ot56Ou56Ov56Ow56Ox56Oz56O156O256O456O556O756O856O956O+56O/56SA56SC56SD56SE56SG56SH56SI56SJ56SK56SL56SM56GA5YKo55+X5pCQ6Kem5aSE5o+j5bed56m/5qS95Lyg6Ii55ZaY5Liy55au56qX5bmi5bqK6Zev5Yib5ZC554KK5o226ZSk5Z6C5pil5qS/6YaH5ZSH5rez57qv6KCi5oiz57uw55a16Iyo56OB6ZuM6L6e5oWI55O36K+N5q2k5Yi66LWQ5qyh6IGq6JGx5Zux5YyG5LuO5Lib5YeR57KX6YaL57CH5L+D6Lm/56+h56qc5pGn5bSU5YKs6ISG55iB57K55res57+g5p2R5a2Y5a+456OL5pKu5pCT5o6q5oyr6ZSZ5pCt6L6+562U55ip5omT5aSn5ZGG5q255YKj5oi05bim5q6G5Luj6LS36KKL5b6F6YCu77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4MF0ubGVuZ3RoOyArK2opIGlmKERbMTgwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4MF1bal1dID0gNDYwODAgKyBqOyBkWzQ2MDgwICsgal0gPSBEWzE4MF1bal07fVxuXHREWzE4MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veekjeekjuekj+ekkOekkeekkueklOekleekluekl+ekmOekmeekmuekm+eknOekneekn+ekoOekoeekoueko+ekpeekpuekp+ekqOekqeekquekq+ekrOekreekruekr+eksOekseeksueks+ekteektuekt+ekuOekueekveekv+elguelg+elhOelheelh+eliueli+eljOeljeeljuelj+elkOelkeelkuellOelleelmOelmeeloeelo++/veelpOelpuelqeelquelq+elrOelruelsOelseelsuels+eltOelteeltuelueelu+elvOelveelvuelv+emguemg+emhuemh+emiOemieemi+emjOemjeemjuemkOemkeemkuaAoOiAveaLheS4ueWNlemDuOaOuOiDhuaXpuawruS9huaDrua3oeivnuW8ueibi+W9k+aMoeWFmuiNoeaho+WIgOaNo+i5iOWAkuWym+elt+WvvOWIsOeou+aCvOmBk+ebl+W+t+W+l+eahOi5rOeBr+eZu+etieeequWHs+mCk+WgpOS9jua7tOi/quaVjOesm+eLhOa2pOe/n+WroeaKteW6leWcsOiSguesrOW4neW8n+mAkue8lOmioOaOgua7h+eimOeCueWFuOmdm+Weq+eUteS9g+eUuOW6l+aDpuWloOa3gOauv+eiieWPvOmbleWHi+WIgeaOieWQiumSk+iwg+i3jOeIueein+idtui/reiwjeWPoO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODFdLmxlbmd0aDsgKytqKSBpZihEWzE4MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODFdW2pdXSA9IDQ2MzM2ICsgajsgZFs0NjMzNiArIGpdID0gRFsxODFdW2pdO31cblx0RFsxODJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nppPnppTnppXnppbnppfnppjnppnnppvnppznpp3npp7npp/npqDnpqHnpqLnpqPnpqTnpqXnpqbnpqjnpqnnpqrnpqvnpqznpq3npq7npq/nprDnprHnprLnprTnprXnprbnprfnprjnprznpr/np4Lnp4Tnp4Xnp4fnp4jnp4rnp4znp47np4/np5Dnp5Pnp5Tnp5bnp5fnp5nnp5rnp5vnp5znp53np57np6Dnp6Hnp6Lnp6Xnp6jnp6rvv73np6znp67np7Hnp7Lnp7Pnp7Tnp7Xnp7bnp7fnp7nnp7rnp7znp77np7/nqIHnqITnqIXnqIfnqIjnqInnqIrnqIznqI/nqJDnqJHnqJLnqJPnqJXnqJbnqJjnqJnnqJvnqJzkuIHnm6/lj67pkonpobbpvI7plK3lrprorqLkuKLkuJzlhqzokaPmh4LliqjmoIvkvpfmgavlhrvmtJ7lhZzmipbmlpfpmaHosYbpgJfnl5jpg73nnaPmr5Lniorni6zor7vloLXnnbnotYzmnZzplYDogprluqbmuKHlppLnq6/nn63plLvmrrXmlq3nvI7loIblhZHpmJ/lr7nloqnlkKjoubLmlabpob/lm6Tpkp3nm77pgYHmjoflk4blpJrlpLrlnpvourLmnLXot7roiLXliYHmg7DloJXom77ls6jpuYXkv4Tpop3orrnlqKXmgbbljoTmibzpgY/phILppb/mganogIzlhL/ogLPlsJTppbXmtLHkuozvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTgyXS5sZW5ndGg7ICsraikgaWYoRFsxODJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTgyXVtqXV0gPSA0NjU5MiArIGo7IGRbNDY1OTIgKyBqXSA9IERbMTgyXVtqXTt9XG5cdERbMTgzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+956id56if56ih56ii56ik56il56im56in56io56ip56iq56ir56is56it56iu56iv56iw56ix56iy56i056i156i256i456i656i+56mA56mB56mC56mD56mE56mF56mH56mI56mJ56mK56mL56mM56mN56mO56mP56mQ56mS56mT56mU56mV56mW56mY56mZ56ma56mb56mc56md56me56mf56mg56mh56mi56mj56mk56ml56mm56mn56mo77+956mp56mq56mr56ms56mt56mu56mv56mx56my56mz56m156m756m856m956m+56qC56qF56qH56qJ56qK56qL56qM56qO56qP56qQ56qT56qU56qZ56qa56qb56qe56qh56qi6LSw5Y+R572a562P5LyQ5LmP6ZiA5rOV54+Q6Jep5biG55Wq57+75qiK55++6ZKS57mB5Yeh54Om5Y+N6L+U6IyD6LSp54qv6aWt5rOb5Z2K6Iqz5pa56IKq5oi/6Ziy5aao5Lu/6K6/57q65pS+6I+y6Z2e5ZWh6aOe6IKl5Yyq6K+95ZCg6IK65bqf5rK46LS56Iqs6YWa5ZCp5rCb5YiG57q35Z2f54Sa5rG+57KJ5aWL5Lu95b+/5oSk57Kq5Liw5bCB5p6r6JyC5bOw6ZSL6aOO55av54O96YCi5Yav57yd6K695aWJ5Yek5L2b5ZCm5aSr5pW36IKk5a215om25ouC6L6Q5bmF5rCf56ym5LyP5L+Y5pyN77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4M10ubGVuZ3RoOyArK2opIGlmKERbMTgzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4M11bal1dID0gNDY4NDggKyBqOyBkWzQ2ODQ4ICsgal0gPSBEWzE4M11bal07fVxuXHREWzE4NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeqo+eqpOeqp+eqqeeqqueqq+eqrueqr+eqsOeqseeqsueqtOeqteeqtueqt+equOequeequuequ+eqvOeqveeqvuergOergeerguerg+erhOerheerhuerh+eriOerieeriuerjOerjeerjuerj+erkOerkeerkuerk+erlOerleerl+ermOermuerm+ernOerneeroeerouerpOerp+erqOerqeerquerq+errOerruersOerseersuers++/veertOerteertuert+eruOeru+ervOervuesgOesgeesguesheesh+esieesjOesjeesjueskOeskuesk+esluesl+esmOesmuesnOesneesn+esoeesoueso+esp+esqeesrea1rua2quemj+iiseW8l+eUq+aKmui+heS/r+mHnOaWp+iEr+iFkeW6nOiFkOi1tOWJr+imhui1i+WkjeWCheS7mOmYnOeItuiFuei0n+WvjOiuo+mZhOWmh+e8muWSkOWZtuWYjuivpeaUueamgumSmeeblua6ieW5sueUmOadhuafkeerv+iCnei1tuaEn+enhuaVoui1o+WGiOWImumSoue8uOiCm+e6suWyl+a4r+adoOevmeeai+mrmOiGj+e+lOezleaQnumVkOeov+WRiuWTpeatjOaQgeaIiOm4veiDs+eWmeWJsumdqeiRm+agvOibpOmYgemalOmTrOS4quWQhOe7meaguei3n+iAleabtOW6mue+ue+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODRdLmxlbmd0aDsgKytqKSBpZihEWzE4NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODRdW2pdXSA9IDQ3MTA0ICsgajsgZFs0NzEwNCArIGpdID0gRFsxODRdW2pdO31cblx0RFsxODVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nrK/nrLDnrLLnrLTnrLXnrLbnrLfnrLnnrLvnrL3nrL/nrYDnrYHnrYLnrYPnrYTnrYbnrYjnrYrnrY3nrY7nrZPnrZXnrZfnrZnnrZznrZ7nrZ/nraHnraPnraTnraXnrabnrafnrajnrannrarnravnraznra3nra/nrbDnrbPnrbTnrbbnrbjnrbrnrbznrb3nrb/nroHnroLnroPnroTnrobnrofnrojnronnrornrovnroznro7nro/vv73nrpHnrpLnrpPnrpbnrpjnrpnnrprnrpvnrp7nrp/nrqDnrqPnrqTnrqXnrq7nrq/nrrDnrrLnrrPnrrXnrrbnrrfnrrnnrrrnrrvnrrznrr3nrr7nrr/nr4Dnr4Lnr4Pnr4Tln4LogL/mopflt6XmlLvlip/mga3pvprkvpvouqzlhazlrqvlvJPlt6nmsZ7mi7HotKHlhbHpkqnli77msp/oi5/ni5flnqLmnoTotK3lpJ/ovpzoj4flkpXnro3kvLDmsr3lraTlp5HpvJPlj6Tom4rpqqjosLfogqHmlYXpob7lm7rpm4fliK7nk5zliZDlr6HmjILopILkuZbmi5DmgKrmo7rlhbPlrpjlhqDop4LnrqHppobnvZDmg6/ngYzotK/lhYnlub/pgJvnkbDop4TlnK3noYXlvZLpvp/pl7rovajprLzor6HnmbjmoYLmn5zot6rotLXliL3ovormu5rmo43plIXpg63lm73mnpzoo7nov4flk4jvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg1XS5sZW5ndGg7ICsraikgaWYoRFsxODVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg1XVtqXV0gPSA0NzM2MCArIGo7IGRbNDczNjAgKyBqXSA9IERbMTg1XVtqXTt9XG5cdERbMTg2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+956+F56+I56+J56+K56+L56+N56+O56+P56+Q56+S56+U56+V56+W56+X56+Y56+b56+c56+e56+f56+g56+i56+j56+k56+n56+o56+p56+r56+s56+t56+v56+w56+y56+z56+056+156+256+456+556+656+756+956+/57CA57CB57CC57CD57CE57CF57CG57CI57CJ57CK57CN57CO57CQ57CR57CS57CT57CU57CV57CX57CY57CZ77+957Ca57Cb57Cc57Cd57Ce57Cg57Ch57Ci57Cj57Ck57Cl57Co57Cp57Cr57Cs57Ct57Cu57Cv57Cw57Cx57Cy57Cz57C057C157C257C357C557C657C757C857C957C+57GC6aq45a2p5rW35rCm5Lql5a6z6aqH6YWj5oao6YKv6Z+p5ZCr5ra15a+S5Ye95ZaK572V57+w5pK85o2N5pex5oa+5oKN54SK5rGX5rGJ5aSv5p2t6Iiq5aOV5ZqO6LGq5q+r6YOd5aW96ICX5Y+35rWp5ZG15Zad6I236I+P5qC456a+5ZKM5L2V5ZCI55uS6LKJ6ZiC5rKz5ra46LWr6KSQ6bmk6LS65Zi/6buR55eV5b6I54ug5oGo5ZO85Lqo5qiq6KGh5oGS6L2w5ZOE54OY6Jm56bi/5rSq5a6P5byY57qi5ZaJ5L6v54y05ZC85Y6a5YCZ5ZCO5ZG85LmO5b+955Ga5aO26JGr6IOh6J2054uQ57OK5rmW77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4Nl0ubGVuZ3RoOyArK2opIGlmKERbMTg2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4Nl1bal1dID0gNDc2MTYgKyBqOyBkWzQ3NjE2ICsgal0gPSBEWzE4Nl1bal07fVxuXHREWzE4N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veexg+exhOexheexhuexh+exiOexieexiuexi+exjOexjuexj+exkOexkeexkuexk+exlOexleexluexl+exmOexmeexmuexm+exnOexneexnuexn+exoOexoeexouexo+expOexpeexpuexp+exqOexqeexquexq+exrOexreexruexr+exsOexseexsuexteextuext+exuOexueexuuexvuexv+eygOeygeeygueyg+eyhOeyheeyhueyh++/veeyiOeyiueyi+eyjOeyjeeyjueyj+eykOeyk+eylOeylueymeeymueym+eyoOeyoeeyo+eypueyp+eyqOeyqeeyq+eyrOeyreeyr+eysOeytOeyteeytueyt+eyuOeyuueyu+W8p+iZjuWUrOaKpOS6kuayquaIt+iKseWTl+WNjueMvua7keeUu+WIkuWMluivneankOW+iuaAgOa3ruWdj+asoueOr+ahk+i/mOe8k+aNouaCo+WUpOeXquixoueElea2o+WupuW5u+iNkuaFjOm7hOejuuidl+ewp+eah+WHsOaDtueFjOaZg+W5jOaBjeiwjueBsOaMpei+ieW+veaBouiblOWbnuavgeaClOaFp+WNieaDoOaZpui0v+enveS8mueDqeaxh+ius+ivsue7mOiNpOaYj+Wpmumtgua1kea3t+ixgea0u+S8meeBq+iOt+aIluaDkemcjei0p+eluOWHu+WcvuWfuuacuueVuOeoveenr+eule+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODddLmxlbmd0aDsgKytqKSBpZihEWzE4N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODddW2pdXSA9IDQ3ODcyICsgajsgZFs0Nzg3MiArIGpdID0gRFsxODddW2pdO31cblx0RFsxODhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nsr/ns4Dns4Lns4Pns4Tns4bns4nns4vns47ns4/ns5Dns5Hns5Lns5Pns5Tns5jns5rns5vns53ns57ns6Hns6Lns6Pns6Tns6Xns6bns6fns6nns6rns6vns6zns63ns67ns7Dns7Hns7Lns7Pns7Tns7Xns7bns7fns7nns7rns7zns73ns77ns7/ntIDntIHntILntIPntITntIXntIbntIfntIjntInntIvntIzntI3ntI7ntI/ntJDvv73ntJHntJLntJPntJTntJXntJbntJfntJjntJnntJrntJvntJzntJ3ntJ7ntJ/ntKHntKPntKTntKXntKbntKjntKnntKrntKzntK3ntK7ntLDntLHntLLntLPntLTntLXntLbogozppaXov7nmv4DorqXpuKHlp6znu6nnvInlkInmnoHmo5jovpHnsY3pm4blj4rmgKXnlr7msbLljbPlq4nnuqfmjKTlh6DohIrlt7Hok5/mioDlhoDlraPkvI7npa3liYLmgrjmtY7lr4Tlr4LorqHorrDml6Llv4zpmYXlppPnu6fnuqrlmInmnrflpLnkvbPlrrbliqDojZrpoorotL7nlLLpkr7lgYfnqLzku7fmnrbpqb7lq4Hmrbznm5HlnZrlsJbnrLrpl7TnhY7lhbzogqnoibDlpbjnvITojKfmo4Dmn6znorHnobfmi6PmjaHnroDkv63liarlh4/ojZDmp5vpibTot7XotLHop4HplK7nrq3ku7bvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg4XS5sZW5ndGg7ICsraikgaWYoRFsxODhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg4XVtqXV0gPSA0ODEyOCArIGo7IGRbNDgxMjggKyBqXSA9IERbMTg4XVtqXTt9XG5cdERbMTg5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+957S357S457S557S657S757S857S957S+57S/57WA57WB57WC57WD57WE57WF57WG57WH57WI57WJ57WK57WL57WM57WN57WO57WP57WQ57WR57WS57WT57WU57WV57WW57WX57WY57WZ57Wa57Wb57Wc57Wd57We57Wf57Wg57Wh57Wi57Wj57Wk57Wl57Wm57Wn57Wo57Wp57Wq57Wr57Ws57Wt57Wv57Ww57Wx57Wy57Wz57W057W157W277+957W457W557W657W757W857W957W+57W/57aA57aB57aC57aD57aE57aF57aG57aH57aI57aJ57aK57aL57aM57aN57aO57aP57aQ57aR57aS57aT57aU57aV57aW57aX57aY5YGl6Iiw5YmR6aWv5riQ5rqF5ran5bu65YO15aec5bCG5rWG5rGf55aG6JKL5qGo5aWW6K6y5Yyg6YWx6ZmN6JWJ5qSS56SB54Sm6IO25Lqk6YOK5rWH6aqE5aiH5Zq85pCF6ZOw55+r5L6l6ISa54uh6KeS6aW657y057ue5Ym/5pWZ6YW16L2/6L6D5Y+r56qW5o+t5o6l55qG56e46KGX6Zi25oiq5Yqr6IqC5qGU5p2w5o23552r56ut5rSB57uT6Kej5aeQ5oiS6JeJ6Iql55WM5YCf5LuL55al6K+r5bGK5be+562L5pak6YeR5LuK5rSl6KWf57Sn6ZSm5LuF6LCo6L+b6Z2z5pmL56aB6L+R54Os5rW477+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4OV0ubGVuZ3RoOyArK2opIGlmKERbMTg5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4OV1bal1dID0gNDgzODQgKyBqOyBkWzQ4Mzg0ICsgal0gPSBEWzE4OV1bal07fVxuXHREWzE5MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee2mee2mue2m+e2nOe2nee2nue2n+e2oOe2oee2oue2o+e2pOe2pee2p+e2qOe2qee2que2q+e2rOe2ree2r+e2sOe2see2sue2s+e2tOe2tee2tue2t+e2uOe2uee2uue2u+e2vOe2vee2vue2v+e3gOe3gee3gue3g+e3hOe3hee3hue3h+e3iOe3iee3iue3i+e3jOe3jee3jue3j+e3kOe3kee3kue3k+e3lOe3lee3lue3l+e3mOe3me+/vee3mue3m+e3nOe3nee3nue3n+e3oOe3oee3oue3o+e3pOe3pee3pue3p+e3qOe3qee3que3q+e3rOe3ree3rue3r+e3sOe3see3sue3s+e3tOe3tee3tue3t+e3uOe3uee3uuWwveWKsuiNhuWFouiMjuedm+aZtumyuOS6rOaDiueyvueys+e7j+S6leitpuaZr+miiOmdmeWig+aVrOmVnOW+hOeXiemdluern+ernuWHgOeCr+eqmOaPqueptue6oOeOlumfreS5heeBuOS5nemFkuWOqeaVkeaXp+iHvOiIheWSjuWwseeWmumeoOaLmOeLmeeWveWxhempueiPiuWxgOWSgOefqeS4vuayruiBmuaLkuaNruW3qOWFt+i3nei4numUr+S/seWPpeaDp+eCrOWJp+aNkOm5g+Won+WApuect+WNt+e7ouaSheaUq+aKieaOmOWAlOeIteinieWGs+ivgOe7neWdh+iPjOmSp+WGm+WQm+Wzu++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTBdLmxlbmd0aDsgKytqKSBpZihEWzE5MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTBdW2pdXSA9IDQ4NjQwICsgajsgZFs0ODY0MCArIGpdID0gRFsxOTBdW2pdO31cblx0RFsxOTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nt7vnt7znt73nt77nt7/nuIDnuIHnuILnuIPnuITnuIXnuIbnuIfnuIjnuInnuIrnuIvnuIznuI3nuI7nuI/nuJDnuJHnuJLnuJPnuJTnuJXnuJbnuJfnuJjnuJnnuJrnuJvnuJznuJ3nuJ7nuJ/nuKDnuKHnuKLnuKPnuKTnuKXnuKbnuKfnuKjnuKnnuKrnuKvnuKznuK3nuK7nuK/nuLDnuLHnuLLnuLPnuLTnuLXnuLbnuLfnuLjnuLnvv73nuLrnuLznuL3nuL7nuL/nuYDnuYLnuYPnuYTnuYXnuYbnuYjnuYnnuYrnuYvnuYznuY3nuY7nuY/nuZDnuZHnuZLnuZPnuZTnuZXnuZbnuZfnuZjnuZnnuZrnuZvnuZznuZ3kv4rnq6PmtZrpg6Hpqo/lloDlkpbljaHlkq/lvIDmj6nmpbflh6/mhajliIrloKrli5jlnY7noI3nnIvlurfmhbfns6DmiZvmipfkuqLngpXogIPmi7fng6TpnaDlnbfoi5vmn6/mo7Xno5Xpopfnp5Hlo7PlkrPlj6/muLTlhYvliLvlrqLor77ogq/llYPlnqbmgbPlnZHlkK3nqbrmgZDlrZTmjqfmiqDlj6PmiaPlr4fmnq/lk63nqp/oi6bphbflupPoo6TlpLjlnq7mjI7ot6jog6/lnZfnrbfkvqnlv6vlrr3mrL7ljKHnrZDni4LmoYbnn7/nnLbml7flhrXkuo/nm5Tlsr/nqqXokbXlpY7prYHlgoDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTkxXS5sZW5ndGg7ICsraikgaWYoRFsxOTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTkxXVtqXV0gPSA0ODg5NiArIGo7IGRbNDg4OTYgKyBqXSA9IERbMTkxXVtqXTt9XG5cdERbMTkyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+957me57mf57mg57mh57mi57mj57mk57ml57mm57mn57mo57mp57mq57mr57ms57mt57mu57mv57mw57mx57my57mz57m057m157m257m357m457m557m657m757m857m957m+57m/57qA57qB57qD57qE57qF57qG57qH57qI57qJ57qK57qL57qM57qN57qO57qP57qQ57qR57qS57qT57qU57qV57qW57qX57qY57qZ57qa57qc57qd57qe77+957qu57q057q757q857uW57uk57us57u557yK57yQ57ye57y357y557y757y857y957y+57y/572A572B572D572G572H572I572J572K572L572M572N572O572P572S572T6aaI5oSn5rqD5Z2k5piG5o2G5Zuw5ous5omp5buT6ZiU5Z6D5ouJ5ZaH6Jyh6IWK6L6j5ZWm6I6x5p2l6LWW6JOd5amq5qCP5oum56+u6ZiR5YWw5r6c6LCw5o+96KeI5oeS57yG54OC5rul55CF5qaU54u85buK6YOO5pyX5rWq5o2e5Yqz54mi6ICB5L2s5ael6YWq54OZ5rad5YuS5LmQ6Zu36ZWt6JW+56OK57Sv5YSh5Z6S5pOC6IKL57G75rOq5qOx5qWe5Ya35Y6Y5qKo54qB6buO56+x54u456a75ryT55CG5p2O6YeM6bKk56S86I6J6I2U5ZCP5qCX5Li95Y6J5Yqx56C+5Y6G5Yip5YKI5L6L5L+Q77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5Ml0ubGVuZ3RoOyArK2opIGlmKERbMTkyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5Ml1bal1dID0gNDkxNTIgKyBqOyBkWzQ5MTUyICsgal0gPSBEWzE5Ml1bal07fVxuXHREWzE5M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee9lue9mee9m+e9nOe9nee9nue9oOe9o+e9pOe9pee9pue9p+e9q+e9rOe9ree9r+e9sOe9s+e9tee9tue9t+e9uOe9uue9u+e9vOe9vee9v+e+gOe+gue+g+e+hOe+hee+hue+h+e+iOe+iee+i+e+jee+j+e+kOe+kee+kue+k+e+lee+lue+l+e+mOe+mee+m+e+nOe+oOe+oue+o+e+pee+pue+qOe+qee+que+q+e+rOe+ree+rue+se+/vee+s+e+tOe+tee+tue+t+e+uue+u+e+vue/gOe/gue/g+e/hOe/hue/h+e/iOe/iee/i+e/jee/j+e/kOe/kee/kue/k+e/lue/l+e/mee/mue/m+e/nOe/nee/nue/oue/o+eXoueri+eykuaypematuWKm+eSg+WTqeS/qeiBlOiOsui/numVsOW7ieaAnOa2n+W4mOaVm+iEuOmTvuaBi+eCvOe7g+eyruWHieaigeeyseiJr+S4pOi+humHj+aZvuS6ruiwheaSqeiBiuWDmueWl+eHjuWvpei+vea9puS6huaSgumVo+W7luaWmeWIl+ijgueDiOWKo+eMjueQs+ael+ejt+mcluS4tOmCu+mznua3i+WHm+i1geWQneaLjueOsuiPsembtum+hOmTg+S8tue+muWHjOeBtemZteWyremihuWPpuS7pOa6nOeQieamtOehq+mmj+eVmeWImOeYpOa1geafs+WFrem+meiBi+WSmeesvOeqv++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTNdLmxlbmd0aDsgKytqKSBpZihEWzE5M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTNdW2pdXSA9IDQ5NDA4ICsgajsgZFs0OTQwOCArIGpdID0gRFsxOTNdW2pdO31cblx0RFsxOTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nv6Tnv6fnv6jnv6rnv6vnv6znv63nv6/nv7Lnv7Tnv7Xnv7bnv7fnv7jnv7nnv7rnv73nv77nv7/ogILogIfogIjogInogIrogI7ogI/ogJHogJPogJrogJvogJ3ogJ7ogJ/ogKHogKPogKTogKvogKzogK3ogK7ogK/ogLDogLLogLTogLnogLrogLzogL7ogYDogYHogYTogYXogYfogYjogYnogY7ogY/ogZDogZHogZPogZXogZbogZfvv73ogZnogZvogZzogZ3ogZ7ogZ/ogaDogaHogaLogaPogaTogaXogabogafogajogavogazoga3oga7oga/ogbDogbLogbPogbTogbXogbbogbfogbjogbnogbrogbvogbzogb3pmoblnoTmi6LpmYfmpbzlqITmkILnr5PmvI/pmYvoiqbljaLpooXlupDngonmjrPljaTomY/psoHpupPnoozpnLLot6/otYLpub/mvZ7npoTlvZXpmYbmiK7pqbTlkJXpk53kvqPml4XlsaXlsaHnvJXomZHmsK/lvovnjofmu6Tnu7/ls6bmjJvlrarmu6bljbXkubHmjqDnlaXmiqHova7kvKbku5HmsqbnurborrrokJ3onrrnvZfpgLvplKPnrqnpqqHoo7jokL3mtJvpqobnu5zlpojpurvnjpvnoIHomoLpqazpqoLlmJvlkJfln4vkubDpuqbljZbov4johInnnpLpppLom67mu6HolJPmm7zmhaLmvKvvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk0XS5sZW5ndGg7ICsraikgaWYoRFsxOTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk0XVtqXV0gPSA0OTY2NCArIGo7IGRbNDk2NjQgKyBqXSA9IERbMTk0XVtqXTt9XG5cdERbMTk1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96IG+6IKB6IKC6IKF6IKI6IKK6IKN6IKO6IKP6IKQ6IKR6IKS6IKU6IKV6IKX6IKZ6IKe6IKj6IKm6IKn6IKo6IKs6IKw6IKz6IK16IK26IK46IK56IK76IOF6IOH6IOI6IOJ6IOK6IOL6IOP6IOQ6IOR6IOS6IOT6IOU6IOV6IOY6IOf6IOg6IOi6IOj6IOm6IOu6IO16IO36IO56IO76IO+6IO/6ISA6ISB6ISD6ISE6ISF6ISH6ISI6ISL77+96ISM6ISV6ISX6ISZ6ISb6ISc6ISd6ISf6ISg6ISh6ISi6ISj6ISk6ISl6ISm6ISn6ISo6ISp6ISq6ISr6ISt6ISu6ISw6ISz6IS06IS16IS36IS56IS66IS76IS86IS96IS/6LCp6IqS6Iyr55uy5rCT5b+Z6I6954yr6IyF6ZSa5q+b55+b6ZOG5Y2v6IyC5YaS5bi96LKM6LS45LmI546r5p6a5qKF6YW26ZyJ54Wk5rKh55yJ5aqS6ZWB5q+P576O5pin5a+Q5aa55aqa6Zeo6Ze35Lus6JCM6JKZ5qqs55uf6ZSw54yb5qKm5a2f55yv6Yaa6Z2h57Oc6L+36LCc5byl57Gz56eY6KeF5rOM6Jyc5a+G5bmC5qOJ55yg57u15YaV5YWN5YuJ5aip57yF6Z2i6IuX5o+P556E6JeQ56eS5ri65bqZ5aaZ6JSR54Gt5rCR5oq/55q/5pWP5oKv6Ze95piO6J6f6bij6ZOt5ZCN5ZG96LCs5pG477+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5NV0ubGVuZ3RoOyArK2opIGlmKERbMTk1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5NV1bal1dID0gNDk5MjAgKyBqOyBkWzQ5OTIwICsgal0gPSBEWzE5NV1bal07fVxuXHREWzE5Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiFgOiFgeiFguiFg+iFhOiFheiFh+iFieiFjeiFjuiFj+iFkuiFluiFl+iFmOiFm+iFnOiFneiFnuiFn+iFoeiFouiFo+iFpOiFpuiFqOiFquiFq+iFrOiFr+iFsuiFs+iFteiFtuiFt+iFuOiGgeiGg+iGhOiGheiGhuiGh+iGieiGi+iGjOiGjeiGjuiGkOiGkuiGk+iGlOiGleiGluiGl+iGmeiGmuiGnuiGn+iGoOiGoeiGouiGpOiGpe+/veiGp+iGqeiGq+iGrOiGreiGruiGr+iGsOiGseiGsuiGtOiGteiGtuiGt+iGuOiGueiGvOiGveiGvuiGv+iHhOiHheiHh+iHiOiHieiHi+iHjeiHjuiHj+iHkOiHkeiHkuiHk+aRueiYkeaooeiGnOejqOaRqemtlOaKueacq+iOq+WiqOm7mOayq+a8oOWvnumZjOiwi+eJn+afkOaLh+eJoeS6qeWnhuavjeWik+aaruW5leWLn+aFleacqOebruedpueJp+ephuaLv+WTquWRkOmSoOmCo+WonOe6s+awluS5g+WltuiAkOWliOWNl+eUt+mavuWbiuaMoOiEkeaBvOmXuea3luWRoummgeWGheWrqeiDveWmrumck+WAquazpeWwvOaLn+S9oOWMv+iFu+mAhua6uuiUq+aLiOW5tOeivuaSteaNu+W/teWomOmFv+m4n+Wwv+aNj+iBguWtveWVrumViumVjea2heaCqOafoOeLnuWHneWuge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTZdLmxlbmd0aDsgKytqKSBpZihEWzE5Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTZdW2pdXSA9IDUwMTc2ICsgajsgZFs1MDE3NiArIGpdID0gRFsxOTZdW2pdO31cblx0RFsxOTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oh5Toh5Xoh5boh5foh5joh5noh5roh5voh5zoh53oh57oh5/oh6Doh6Hoh6Loh6Toh6Xoh6boh6joh6noh6voh67oh6/oh7Doh7Hoh7Loh7Xoh7boh7foh7joh7noh7roh73oh7/oiIPoiIfoiIjoiInoiIroiIvoiI7oiI/oiJHoiJPoiJXoiJboiJfoiJjoiJnoiJroiJ3oiKDoiKToiKXoiKboiKfoiKnoiK7oiLLoiLroiLzoiL3oiL/vv73oiYDoiYHoiYLoiYPoiYXoiYboiYjoiYroiYzoiY3oiY7oiZDoiZHoiZLoiZPoiZToiZXoiZboiZfoiZnoiZvoiZzoiZ3oiZ7oiaDoiaHoiaLoiaPoiaToiaXoiaboiafoianmi6fms57niZvmia3pkq7nur3ohJPmtZPlhpzlvITlpbTliqrmgJLlpbPmmpbomZDnlp/mjKrmh6bns6/or7rlk6bmrKfpuKXmrrTol5XlkZXlgbbmsqTllarotrTniKzluJXmgJXnkLbmi43mjpLniYzlvpjmuYPmtL7mlIDmvZjnm5jno5Dnm7znlZTliKTlj5vkuZPlup7ml4HogKrog5bmipvlkobliKjngq7ooo3ot5Hms6Hlkbjog5rln7noo7TotZTpmarphY3kvanmspvllrfnm4bnoLDmiqjng7nmvo7lva3ok6zmo5rnobznr7fohqjmnIvpuY/mjafnorDlna/noJLpnLnmibnmiqvliojnkLXmr5fvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk3XS5sZW5ndGg7ICsraikgaWYoRFsxOTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk3XVtqXV0gPSA1MDQzMiArIGo7IGRbNTA0MzIgKyBqXSA9IERbMTk3XVtqXTt9XG5cdERbMTk4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Imq6Imr6Ims6Imt6Imx6Im16Im26Im36Im46Im76Im86IqA6IqB6IqD6IqF6IqG6IqH6IqJ6IqM6IqQ6IqT6IqU6IqV6IqW6Iqa6Iqb6Iqe6Iqg6Iqi6Iqj6Iqn6Iqy6Iq16Iq26Iq66Iq76Iq86Iq/6IuA6IuC6IuD6IuF6IuG6IuJ6IuQ6IuW6IuZ6Iua6Iud6Iui6Iun6Iuo6Iup6Iuq6Ius6Iut6Iuu6Iuw6Iuy6Iuz6Iu16Iu26Iu477+96Iu66Iu86Iu96Iu+6Iu/6IyA6IyK6IyL6IyN6IyQ6IyS6IyT6IyW6IyY6IyZ6Iyd6Iye6Iyf6Iyg6Iyh6Iyi6Iyj6Iyk6Iyl6Iym6Iyp6Iyq6Iyu6Iyw6Iyy6Iy36Iy76Iy95ZWk6IS+55ay55qu5Yy555ee5YO75bGB6K2s56+H5YGP54mH6aqX6aOY5ryC55Oi56Wo5pKH556l5ou86aKR6LSr5ZOB6IGY5LmS5Z2q6Iu56JCN5bmz5Yet55O26K+E5bGP5Z2h5rO86aKH5amG56C06a2E6L+r57KV5YmW5omR6ZO65LuG6I6G6JGh6I+p6JKy5Z+U5py05ZyD5pmu5rWm6LCx5pud54CR5pyf5qy65qCW5oia5aa75LiD5YeE5ryG5p+S5rKP5YW25qOL5aWH5q2n55Wm5bSO6ISQ6b2Q5peX56WI56WB6aqR6LW35bKC5Lme5LyB5ZCv5aWR56CM5Zmo5rCU6L+E5byD5rG95rOj6K6r5o6Q77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5OF0ubGVuZ3RoOyArK2opIGlmKERbMTk4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5OF1bal1dID0gNTA2ODggKyBqOyBkWzUwNjg4ICsgal0gPSBEWzE5OF1bal07fVxuXHREWzE5OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiMvuiMv+iNgeiNguiNhOiNheiNiOiNiuiNi+iNjOiNjeiNjuiNk+iNleiNluiNl+iNmOiNmeiNneiNouiNsOiNseiNsuiNs+iNtOiNteiNtuiNueiNuuiNvuiNv+iOgOiOgeiOguiOg+iOhOiOh+iOiOiOiuiOi+iOjOiOjeiOj+iOkOiOkeiOlOiOleiOluiOl+iOmeiOmuiOneiOn+iOoeiOouiOo+iOpOiOpeiOpuiOp+iOrOiOreiOru+/veiOr+iOteiOu+iOvuiOv+iPguiPg+iPhOiPhuiPiOiPieiPi+iPjeiPjuiPkOiPkeiPkuiPk+iPleiPl+iPmeiPmuiPm+iPnuiPouiPo+iPpOiPpuiPp+iPqOiPq+iPrOiPreaBsOa0veeJteaJpumSjumTheWNg+i/geetvuS7n+iwpuS5vum7lOmSsemSs+WJjea9nOmBo+a1heiwtOWgkeW1jOasoOatieaequWRm+iFlOe+jOWimeiUt+W8uuaKouaph+mUueaVsuaChOahpeeep+S5lOS+qOW3p+memOaSrOe/mOWzreS/j+eqjeWIh+iMhOS4lOaAr+eqg+mSpuS+teS6suenpueQtOWLpOiKueaTkuemveWvneaygemdkui9u+awouWAvuWNv+a4heaTjuaZtOawsOaDhemht+ivt+W6hueQvOept+eni+S4mOmCseeQg+axguWbmumFi+azhei2i+WMuuibhuabsui6r+WxiOmpsea4oO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTldLmxlbmd0aDsgKytqKSBpZihEWzE5OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTldW2pdXSA9IDUwOTQ0ICsgajsgZFs1MDk0NCArIGpdID0gRFsxOTldW2pdO31cblx0RFsyMDBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oj67oj6/oj7Poj7Toj7Xoj7boj7foj7roj7voj7zoj77oj7/okIDokILokIXokIfokIjokInokIrokJDokJLokJPokJTokJXokJbokJfokJnokJrokJvokJ7okJ/okKDokKHokKLokKPokKnokKrokKvokKzokK3okK7okK/okLDokLLokLPokLTokLXokLbokLfokLnokLrokLvokL7okL/okYDokYHokYLokYPokYTokYXokYfokYjokYnvv73okYrokYvokYzokY3okY7okY/okZDokZLokZPokZTokZXokZbokZjokZ3okZ7okZ/okaDokaLokaTokaXokabokafokajokaroka7oka/okbDokbLokbTokbfokbnokbvokbzlj5blqLbpvovotqPljrvlnIjpoqfmnYPphpvms4nlhajnl4rmi7PniqzliLjlip3nvLrngpTnmLjljbTpuYrmprfnoa7pm4Doo5nnvqTnhLbnh4Plhonmn5Pnk6Tlo6TmlJjlmrforqnppbbmibDnu5Xmg7nng63lo6zku4Hkurrlv43pn6fku7vorqTliIPlpornuqvmiZTku43ml6XmiI7ojLjok4nojaPono3nhpTmurblrrnnu5Llhpfmj4nmn5TogonojLnooJXlhJLlrbrlpoLovrHkubPmsZ3lhaXopKXova/pmK7olYrnkZ7plJDpl7Dmtqboi6XlvLHmkpLmtJLokKjoha7ps4PloZ7otZvkuInlj4Hvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjAwXS5sZW5ndGg7ICsraikgaWYoRFsyMDBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjAwXVtqXV0gPSA1MTIwMCArIGo7IGRbNTEyMDAgKyBqXSA9IERbMjAwXVtqXTt9XG5cdERbMjAxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96JG96JG+6JG/6JKA6JKB6JKD6JKE6JKF6JKG6JKK6JKN6JKP6JKQ6JKR6JKS6JKT6JKU6JKV6JKW6JKY6JKa6JKb6JKd6JKe6JKf6JKg6JKi6JKj6JKk6JKl6JKm6JKn6JKo6JKp6JKq6JKr6JKs6JKt6JKu6JKw6JKx6JKz6JK16JK26JK36JK76JK86JK+6JOA6JOC6JOD6JOF6JOG6JOH6JOI6JOL6JOM6JOO6JOP6JOS6JOU6JOV6JOX77+96JOY6JOZ6JOa6JOb6JOc6JOe6JOh6JOi6JOk6JOn6JOo6JOp6JOq6JOr6JOt6JOu6JOv6JOx6JOy6JOz6JO06JO16JO26JO36JO46JO56JO66JO76JO96JO+6JSA6JSB6JSC5Lye5pWj5qGR5ZeT5Lin5pCU6aqa5omr5auC55Gf6Imy5rap5qOu5YOn6I6O56CC5p2A5Yi55rKZ57qx5YK75ZWl54We562b5pmS54+K6Iur5p2J5bGx5Yig54W96KGr6Zeq6ZmV5pOF6LWh6Iaz5ZaE5rGV5omH57yu5aKS5Lyk5ZWG6LWP5pmM5LiK5bCa6KOz5qKi5o2O56iN54On6IqN5Yu66Z+25bCR5ZOo6YK157uN5aWi6LWK6JuH6IiM6IiN6LWm5pGE5bCE5oWR5raJ56S+6K6+56C355Sz5ZG75Ly46Lqr5rex5aig57uF56We5rKI5a6h5am255Sa6IK+5oWO5riX5aOw55Sf55Sl54my5Y2H57uz77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwMV0ubGVuZ3RoOyArK2opIGlmKERbMjAxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwMV1bal1dID0gNTE0NTYgKyBqOyBkWzUxNDU2ICsgal0gPSBEWzIwMV1bal07fVxuXHREWzIwMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiUg+iUhOiUheiUhuiUh+iUiOiUieiUiuiUi+iUjeiUjuiUj+iUkOiUkuiUlOiUleiUluiUmOiUmeiUm+iUnOiUneiUnuiUoOiUouiUo+iUpOiUpeiUpuiUp+iUqOiUqeiUquiUreiUruiUr+iUsOiUseiUsuiUs+iUtOiUteiUtuiUvuiUv+iVgOiVgeiVguiVhOiVheiVhuiVh+iVi+iVjOiVjeiVjuiVj+iVkOiVkeiVkuiVk+iVlOiVle+/veiVl+iVmOiVmuiVm+iVnOiVneiVn+iVoOiVoeiVouiVo+iVpeiVpuiVp+iVqeiVquiVq+iVrOiVreiVruiVr+iVsOiVseiVs+iVteiVtuiVt+iVuOiVvOiVveiVv+iWgOiWgeecgeebm+WJqeiDnOWco+W4iOWkseeLruaWvea5v+ivl+WwuOiZseWNgeefs+aLvuaXtuS7gOmjn+iagOWunuivhuWPsuefouS9v+WxjumptuWni+W8j+ekuuWjq+S4luafv+S6i+aLreiqk+mAneWKv+aYr+WXnOWZrOmAguS7leS+jemHiumlsOawj+W4guaBg+WupOinhuivleaUtuaJi+mmluWuiOWvv+aOiOWUruWPl+eYpuWFveiUrOaeouais+auiuaKkui+k+WPlOiIkua3keeWj+S5pui1juWtsOeGn+iWr+aakeabmee9suicgOm7jem8oOWxnuacr+i/sOagkeadn+aIjeerluWiheW6tuaVsOa8se+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDJdLmxlbmd0aDsgKytqKSBpZihEWzIwMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDJdW2pdXSA9IDUxNzEyICsgajsgZFs1MTcxMiArIGpdID0gRFsyMDJdW2pdO31cblx0RFsyMDNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oloLoloPolobolojolonolorolovolozolo3olo7olpDolpHolpLolpPolpTolpXolpbolpfolpjolpnolprolp3olp7olp/olqDolqHolqLolqPolqXolqbolqfolqnolqvolqzolq3olrHolrLolrPolrTolrXolrbolrjolrrolrvolrzolr3olr7olr/ol4Dol4Lol4Pol4Tol4Xol4bol4fol4jol4rol4vol4zol43ol47ol5Hol5Lvv73ol5Tol5bol5fol5jol5nol5rol5vol53ol57ol5/ol6Dol6Hol6Lol6Pol6Xol6bol6fol6jol6rol6vol6zol63ol67ol6/ol7Dol7Hol7Lol7Pol7Tol7Xol7bol7fol7jmgZXliLfogI3mkZToobDnlKnluIXmoJPmi7TpnJzlj4zniL3osIHmsLTnnaHnqI7lkK7nnqzpobroiJzor7TnoZXmnJTng4Hmlq/mkpXlmLbmgJ3np4Hlj7jkuJ3mrbvogoblr7rll6Plm5vkvLrkvLzppbLlt7Pmnb7ogLjmgILpooLpgIHlrovorrzor7XmkJzoiZjmk57ll73oi4/phaXkv5fntKDpgJ/nsp/lg7PloZHmuq/lrr/or4nogoPphbjokpznrpfomb3pmovpmo/nu6Xpq5Pnoo7lsoHnqZfpgYLpmqfnpZ/lrZnmjZ/nrIvok5Hmoq3llIbnvKnnkJDntKLplIHmiYDloYzku5blroPlpbnloZTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjAzXS5sZW5ndGg7ICsraikgaWYoRFsyMDNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjAzXVtqXV0gPSA1MTk2OCArIGo7IGRbNTE5NjggKyBqXSA9IERbMjAzXVtqXTt9XG5cdERbMjA0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Je56Je66Je86Je96Je+6JiA6JiB6JiC6JiD6JiE6JiG6JiH6JiI6JiJ6JiK6JiL6JiM6JiN6JiO6JiP6JiQ6JiS6JiT6JiU6JiV6JiX6JiY6JiZ6Jia6Jib6Jic6Jid6Jie6Jif6Jig6Jih6Jii6Jij6Jik6Jil6Jim6Jio6Jiq6Jir6Jis6Jit6Jiu6Jiv6Jiw6Jix6Jiy6Jiz6Ji06Ji16Ji26Ji36Ji56Ji66Ji76Ji96Ji+6Ji/6JmA77+96JmB6JmC6JmD6JmE6JmF6JmG6JmH6JmI6JmJ6JmK6JmL6JmM6JmS6JmT6JmV6JmW6JmX6JmY6JmZ6Jmb6Jmc6Jmd6Jmf6Jmg6Jmh6Jmj6Jmk6Jml6Jmm6Jmn6Jmo6Jmp6Jmq542t5oye6LmL6LiP6IOO6IuU5oqs5Y+w5rOw6YWe5aSq5oCB5rGw5Z2N5pGK6LSq55ir5rup5Z2b5qqA55ew5r2t6LCt6LCI5Z2m5q+v6KKS56Kz5o6i5Y+554Kt5rGk5aGY5pCq5aCC5qOg6Iab5ZSQ57OW5YCY6Lq65reM6Laf54Or5o6P5rab5ruU57um6JCE5qGD6YCD5reY6Zm26K6o5aWX54m56Jek6IW+55a86KqK5qKv5YmU6Lii6ZSR5o+Q6aKY6LmE5ZW85L2T5pu/5ZqP5oOV5raV5YmD5bGJ5aSp5re75aGr55Sw55Sc5oGs6IiU6IWG5oyR5p2h6L+i55y66Lez6LS06ZOB5biW5Y6F5ZCs54OD77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwNF0ubGVuZ3RoOyArK2opIGlmKERbMjA0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwNF1bal1dID0gNTIyMjQgKyBqOyBkWzUyMjI0ICsgal0gPSBEWzIwNF1bal07fVxuXHREWzIwNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiZreiZr+iZsOiZsuiZs+iZtOiZteiZtuiZt+iZuOiag+iahOiaheiahuiah+iaiOiaieiajuiaj+iakOiakeiakuialOialuial+iamOiameiamuiam+ianuian+iaoOiaoeiaouiapeiapuiaq+iareiaruiasuias+iat+iauOiaueiau+iavOiaveiavuiav+ibgeibguibg+ibheibiOibjOibjeibkuibk+ibleibluibl+ibmuibnO+/veibneiboOiboeibouibo+ibpeibpuibp+ibqOibquibq+ibrOibr+ibteibtuibt+ibuuibu+ibvOibveibv+icgeichOicheichuici+icjOicjuicj+ickOickeiclOicluaxgOW7t+WBnOS6reW6reaMuuiJh+mAmuahkOmFruees+WQjOmTnOW9pOerpeahtuaNheetkue7n+eXm+WBt+aKleWktOmAj+WHuOeng+eqgeWbvuW+kumAlOa2guWxoOWcn+WQkOWFlOa5jeWbouaOqOmik+iFv+icleikqumAgOWQnuWxr+iHgOaLluaJmOiEsem4temZgOmprumpvOakreWmpeaLk+WUvuaMluWTh+ibmea0vOWog+eTpuiinOatquWkluixjOW8r+a5vueOqemhveS4uOeDt+WujOeil+aMveaZmuealuaDi+Wum+WpieS4h+iFleaxqueOi+S6oeaeiee9keW+gOaXuuacm+W/mOWmhOWoge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDVdLmxlbmd0aDsgKytqKSBpZihEWzIwNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDVdW2pdXSA9IDUyNDgwICsgajsgZFs1MjQ4MCArIGpdID0gRFsyMDVdW2pdO31cblx0RFsyMDZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73onJnonJvonJ3onJ/onKDonKTonKbonKfonKjonKronKvonKzonK3onK/onLDonLLonLPonLXonLbonLjonLnonLronLzonL3onYDonYHonYLonYPonYTonYXonYbonYronYvonY3onY/onZDonZHonZLonZTonZXonZbonZjonZronZvonZzonZ3onZ7onZ/onaHonaLonabonafonajonanonaronavonazona3ona/onbHonbLonbPonbXvv73onbfonbjonbnonbronb/onoDonoHonoTonobonofonononoronozono7ono/onpDonpHonpLonpTonpXonpbonpjonpnonpronpvonpzonp3onp7onqDonqHonqLonqPonqTlt43lvq7ljbHpn6bov53moYXlm7TllK/mg5/kuLrmvY3nu7Toi4fokI7lp5TkvJ/kvKrlsL7nuqzmnKrolJrlkbPnlY/og4PlloLprY/kvY3muK3osJPlsInmhbDljavnmJ/muKnomormlofpl7vnurnlkLvnqLPntIrpl67ll6Hnv4Hnk67mjJ3onJfmtqHnqp3miJHmlqHljafmj6HmsoPlt6vlkZzpkqjkuYzmsaHor6zlsYvml6DoipzmoqflkL7lkLTmr4vmrabkupTmjYLljYjoiJ7kvI3kvq7lnZ7miIrpm77mmaTnianli7/liqHmgp/or6/mmJTnhpnmnpDopb/noZLnn73mmbDlmLvlkLjplKHnibrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA2XS5sZW5ndGg7ICsraikgaWYoRFsyMDZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA2XVtqXV0gPSA1MjczNiArIGo7IGRbNTI3MzYgKyBqXSA9IERbMjA2XVtqXTt9XG5cdERbMjA3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96J6l6J6m6J6n6J6p6J6q6J6u6J6w6J6x6J6y6J606J626J636J646J656J676J686J6+6J6/6J+B6J+C6J+D6J+E6J+F6J+H6J+I6J+J6J+M6J+N6J+O6J+P6J+Q6J+U6J+V6J+W6J+X6J+Y6J+Z6J+a6J+c6J+d6J+e6J+f6J+h6J+i6J+j6J+k6J+m6J+n6J+o6J+p6J+r6J+s6J+t6J+v6J+w6J+x6J+y6J+z6J+06J+16J+26J+36J+477+96J+66J+76J+86J+96J+/6KCA6KCB6KCC6KCE6KCF6KCG6KCH6KCI6KCJ6KCL6KCM6KCN6KCO6KCP6KCQ6KCR6KCS6KCU6KCX6KCY6KCZ6KCa6KCc6KCd6KCe6KCf6KCg6KCj56iA5oGv5biM5oKJ6Iad5aSV5oOc54aE54Ov5rqq5rGQ54qA5qqE6KKt5bit5Lmg5aqz5Zac6ZOj5rSX57O76ZqZ5oiP57uG556O6Jm+5Yyj6Zye6L6W5pqH5bOh5L6g54ut5LiL5Y6m5aSP5ZCT5o6A6ZSo5YWI5LuZ6bKc57qk5ZK46LSk6KGU6Ii36Zey5raO5bym5auM5pi+6Zmp546w54yu5Y6/6IW66aaF576h5a6q6Zm36ZmQ57q/55u45Y6i6ZW26aaZ566x6KWE5rmY5Lmh57+U56Wl6K+m5oOz5ZON5Lqr6aG55be35qmh5YOP5ZCR6LGh6JCn56Gd6ZyE5YmK5ZOu5Zqj6ZSA5raI5a615reG5pmT77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwN10ubGVuZ3RoOyArK2opIGlmKERbMjA3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwN11bal1dID0gNTI5OTIgKyBqOyBkWzUyOTkyICsgal0gPSBEWzIwN11bal07fVxuXHREWzIwOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veigpOigpeigpuigp+igqOigqeigquigq+igrOigreigruigr+igsOigseigs+igtOigteigtuigt+iguOiguuigu+igveigvuigv+ihgeihguihg+ihhuihh+ihiOihieihiuihi+ihjuihj+ihkOihkeihkuihk+ihleihluihmOihmuihm+ihnOihneihnuihn+ihoOihpuihp+ihquihreihr+ihseihs+ihtOihteihtuihuOihueihuu+/veihu+ihvOiigOiig+iihuiih+iiieiiiuiijOiijuiij+iikOiikeiik+iilOiileiil+iimOiimeiimuiim+iineiinuiin+iioOiioeiio+iipeiipuiip+iiqOiiqeiiquWwj+WtneagoeiCluWVuOeskeaViOallOS6m+ath+idjumei+WNj+aMn+aQuumCquaWnOiDgeiwkOWGmeaisOWNuOifueaHiOazhOazu+iwouWxkeiWquiKr+mUjOaso+i+m+aWsOW/u+W/g+S/oeihheaYn+iFpeeMqeaDuuWFtOWIkeWei+W9oumCouihjOmGkuW5uOadj+aAp+Wnk+WFhOWHtuiDuOWMiOaxuembhOeGiuS8keS/rue+nuacveWXhemUiOengOiilue7o+Win+aIjOmcgOiZmuWYmOmhu+W+kOiuuOiThOmFl+WPmeaXreW6j+eVnOaBpOe1ruWpv+e7que7rei9qeWWp+Wuo+aCrOaXi+eOhO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDhdLmxlbmd0aDsgKytqKSBpZihEWzIwOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDhdW2pdXSA9IDUzMjQ4ICsgajsgZFs1MzI0OCArIGpdID0gRFsyMDhdW2pdO31cblx0RFsyMDldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ooqzooq7ooq/oorDoorLoorPoorToorXoorboorjoornoorroorvoor3oor7oor/oo4Doo4Poo4Too4foo4joo4roo4voo4zoo43oo4/oo5Doo5Hoo5Poo5boo5foo5roo5voo5zoo53oo57oo6Doo6Hoo6boo6foo6noo6roo6voo6zoo63oo67oo6/oo7Loo7Xoo7boo7foo7roo7voo73oo7/opIDopIHopIPopITopIXopIbopIfopIjvv73opInopIvopIzopI3opI7opI/opJHopJTopJXopJbopJfopJjopJzopJ3opJ7opJ/opKDopKLopKPopKTopKbopKfopKjopKnopKzopK3opK7opK/opLHopLLopLPopLXopLfpgInnmaPnnKnnu5rpnbTolpvlrabnqbTpm6rooYDli4vnho/lvqrml6zor6Llr7vpqa/lt6HmronmsZvorq3orq/pgIrov4XljovmirzpuKbpuK3lkYDkuKvoir3niZnompzltJbooZnmtq/pm4Xlk5HkuprorrbnhInlkr3pmInng5/mt7nnm5DkuKXnoJTonJLlsqnlu7boqIDpopzpmI7ngo7msr/lpYTmjqnnnLzooY3mvJToibPloLDnh5XljoznoJrpm4HllIHlvabnhLDlrrTosJrpqozmroPlpK7puK/np6fmnajmiazkva/nlqHnvormtIvpmLPmsKfku7Dnl5LlhbvmoLfmvL7pgoDohbDlppbnkbbvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA5XS5sZW5ndGg7ICsraikgaWYoRFsyMDldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA5XVtqXV0gPSA1MzUwNCArIGo7IGRbNTM1MDQgKyBqXSA9IERbMjA5XVtqXTt9XG5cdERbMjEwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96KS46KS56KS66KS76KS86KS96KS+6KS/6KWA6KWC6KWD6KWF6KWG6KWH6KWI6KWJ6KWK6KWL6KWM6KWN6KWO6KWP6KWQ6KWR6KWS6KWT6KWU6KWV6KWW6KWX6KWY6KWZ6KWa6KWb6KWc6KWd6KWg6KWh6KWi6KWj6KWk6KWl6KWn6KWo6KWp6KWq6KWr6KWs6KWt6KWu6KWv6KWw6KWx6KWy6KWz6KW06KW16KW26KW36KW46KW56KW66KW877+96KW96KW+6KaA6KaC6KaE6KaF6KaH6KaI6KaJ6KaK6KaL6KaM6KaN6KaO6KaP6KaQ6KaR6KaS6KaT6KaU6KaV6KaW6KaX6KaY6KaZ6Kaa6Kab6Kac6Kad6Kae6Kaf6Kag6Kah5pGH5bCn6YGl56qR6LCj5aea5ZKs6IiA6I2v6KaB6ICA5qSw5ZmO6IC254i36YeO5Ya25Lmf6aG15o6W5Lia5Y+25puz6IWL5aSc5ray5LiA5aO55Yy75o+W6ZOx5L6d5LyK6KGj6aKQ5aS36YGX56e75Luq6IOw55aR5rKC5a6c5aeo5b2d5qSF6JqB5YCa5bey5LmZ55+j5Lul6Im65oqR5piT6YKR5bG55Lq/5b256IeG6YC46IKE55ar5Lqm6KOU5oSP5q+F5b+G5LmJ55uK5rqi6K+j6K6u6LCK6K+R5byC57+857+M57uO6Iy16I2r5Zug5q636Z+z6Zi05ae75ZCf6ZO25rer5a+F6aWu5bC55byV6ZqQ77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxMF0ubGVuZ3RoOyArK2opIGlmKERbMjEwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxMF1bal1dID0gNTM3NjAgKyBqOyBkWzUzNzYwICsgal0gPSBEWzIxMF1bal07fVxuXHREWzIxMV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veimouimo+impOimpeimpuimp+imqOimqeimquimq+imrOimreimruimr+imsOimseimsuims+imtOimteimtuimt+imuOimueimuuimu+imvOimveimvuimv+ingOing+injeink+inlOinleinl+inmOinmeinm+inneinn+inoOinoeinouinpOinp+inqOinqeinquinrOinreinruinsOinseinsuintOinteintuint+inuOinueinuu+/veinu+invOinveinvuinv+iogeioguiog+iohOioheiohuioiOioieioiuioi+iojOiojeiojuioj+iokOiokeiokuiok+iolOioleioluiol+iomOiomeiomuiom+ionOioneWNsOiLseaoseWptOm5sOW6lOe8qOiOueiQpOiQpeiNp+idh+i/jui1ouebiOW9semiluehrOaYoOWTn+aLpeS9o+iHg+eXiOW6uOmbjei4iuibueWSj+azs+a2jOawuOaBv+WLh+eUqOW5veS8mOaCoOW/p+WwpOeUsemCrumTgOeKueayuea4uOmFieacieWPi+WPs+S9kemHieivseWPiOW5vOi/gua3pOS6juebguamhuiZnuaEmuiIhuS9meS/numAvumxvOaEiea4nea4lOmaheS6iOWosembqOS4juWxv+emueWuh+ivree+veeOieWfn+iKi+mDgeWQgemBh+WWu+WzquW+oeaEiOassueLseiCsuiqie+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTFdLmxlbmd0aDsgKytqKSBpZihEWzIxMV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTFdW2pdXSA9IDU0MDE2ICsgajsgZFs1NDAxNiArIGpdID0gRFsyMTFdW2pdO31cblx0RFsyMTJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oqJ7oqJ/oqKDoqKHoqKLoqKPoqKToqKXoqKboqKfoqKjoqKnoqKroqKvoqKzoqK3oqK7oqK/oqLDoqLHoqLLoqLPoqLToqLXoqLboqLfoqLjoqLnoqLroqLvoqLzoqL3oqL/oqYDoqYHoqYLoqYPoqYToqYXoqYboqYfoqYnoqYroqYvoqYzoqY3oqY7oqY/oqZDoqZHoqZLoqZPoqZToqZXoqZboqZfoqZjoqZnoqZroqZvoqZzoqZ3oqZ7vv73oqZ/oqaDoqaHoqaLoqaPoqaToqaXoqaboqafoqajoqanoqaroqavoqazoqa3oqa7oqa/oqbDoqbHoqbLoqbPoqbToqbXoqbboqbfoqbjoqbroqbvoqbzoqb3oqb7oqb/oqoDmtbTlr5Poo5XpooTosavpqa3puLPmuIrlhqTlhYPlnqPoooHljp/mj7TovpXlm63lkZjlnIbnjL/mupDnvJjov5zoi5HmhL/mgKjpmaLmm7Dnuqbotorot4PpkqXlsrPnsqTmnIjmgqbpmIXogJjkupHpg6fljIDpmajlhYHov5DolbTphZ3mmZXpn7XlrZXljJ3noLjmnYLmoL3lk4nngb7lrrDovb3lho3lnKjlkrHmlJLmmoLotZ7otYPohI/okazpga3ns5/lh7/ol7vmnqPml6nmvqHomqTouoHlmarpgKDnmoLngbbnh6XotKPmi6nliJnms73otLzmgI7lop7mho7mm77otaDmiY7llrPmuKPmnK3ovafvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjEyXS5sZW5ndGg7ICsraikgaWYoRFsyMTJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjEyXVtqXV0gPSA1NDI3MiArIGo7IGRbNTQyNzIgKyBqXSA9IERbMjEyXVtqXTt9XG5cdERbMjEzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96KqB6KqC6KqD6KqE6KqF6KqG6KqH6KqI6KqL6KqM6KqN6KqO6KqP6KqQ6KqR6KqS6KqU6KqV6KqW6KqX6KqY6KqZ6Kqa6Kqb6Kqc6Kqd6Kqe6Kqf6Kqg6Kqh6Kqi6Kqj6Kqk6Kql6Kqm6Kqn6Kqo6Kqp6Kqq6Kqr6Kqs6Kqt6Kqu6Kqv6Kqw6Kqx6Kqy6Kqz6Kq06Kq16Kq26Kq36Kq46Kq56Kq66Kq76Kq86Kq96Kq+6Kq/6KuA6KuB6KuC77+96KuD6KuE6KuF6KuG6KuH6KuI6KuJ6KuK6KuL6KuM6KuN6KuO6KuP6KuQ6KuR6KuS6KuT6KuU6KuV6KuW6KuX6KuY6KuZ6Kua6Kub6Kuc6Kud6Kue6Kuf6Kug6Kuh6Kui6Kuj6ZOh6Ze455yo5qCF5qao5ZKL5LmN54K46K+I5pGY5paL5a6F56qE5YC65a+o55675q+h6Km557KY5rK+55uP5pap6L6X5bSt5bGV6Ji45qCI5Y2g5oiY56uZ5rmb57u95qif56ug5b2w5ryz5byg5o6M5rao5p2W5LiI5biQ6LSm5LuX6IOA55i06Zqc5oub5pit5om+5rK86LW154Wn572p5YWG6IKH5Y+s6YGu5oqY5ZOy6Juw6L6Z6ICF6ZSX6JSX6L+Z5rWZ54+N5paf55yf55SE56Cn6Ie76LSe6ZKI5L6m5p6V55a56K+K6ZyH5oyv6ZWH6Zi16JK45oyj552B5b6B54uw5LqJ5oCU5pW05ouv5q2j5pS/77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxM10ubGVuZ3RoOyArK2opIGlmKERbMjEzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxM11bal1dID0gNTQ1MjggKyBqOyBkWzU0NTI4ICsgal0gPSBEWzIxM11bal07fVxuXHREWzIxNF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veirpOirpeirpuirp+irqOirqeirquirq+irrOirreirruirr+irsOirseirsuirs+irtOirteirtuirt+iruOirueiruuiru+irvOirveirvuirv+isgOisgeisguisg+ishOisheishuisiOisieisiuisi+isjOisjeisjuisj+iskOiskeiskuisk+islOisleisluisl+ismOismeismuism+isnOisneisnuisn+isoOisoeisouiso++/veispOispeisp+isqOisqeisquisq+isrOisreisruisr+issOisseissuiss+istOisteistuist+isuOisueisuuisu+isvOisveisvuisv+itgOitgeitguitg+ithOitheW4p+eXh+mDkeivgeiKneaeneaUr+WQseicmOefpeiCouiEguaxgeS5i+e7h+iBjOebtOakjeauluaJp+WAvOS+hOWdgOaMh+atoui2vuWPquaXqOe6uOW/l+aMmuaOt+iHs+iHtOe9ruW4nOWzmeWItuaZuuenqeeomui0qOeCmeeXlOa7nuayu+eqkuS4reebheW/oOmSn+iht+e7iOenjeiCv+mHjeS7suS8l+iIn+WRqOW3nua0suivjOeypei9tOiCmOW4muWSkueaseWumeaYvOmqpOePoOagquibm+acseeMquivuOivm+mAkOerueeDm+eFruaLhOeeqeWYseS4u+iRl+afseWKqeibgOi0rumTuOetke+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTRdLmxlbmd0aDsgKytqKSBpZihEWzIxNF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTRdW2pdXSA9IDU0Nzg0ICsgajsgZFs1NDc4NCArIGpdID0gRFsyMTRdW2pdO31cblx0RFsyMTVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73orYborYforYjorYnorYrorYvorYzorY3orY7orY/orZDorZHorZLorZPorZTorZXorZborZforZjorZnorZrorZvorZzorZ3orZ7orZ/oraDoraHoraLoraPoraToraXoraforajoranoraroravora3ora7ora/orbDorbHorbLorbPorbTorbXorbborbforbjorbnorbrorbvorbzorb3orb7orb/oroDoroHoroLoroPoroToroXorobvv73oroforojoronorororovorozoro3oro7oro/orpDorpHorpLorpPorpTorpXorpborpforpjorpnorprorpvorpzorp3orp7orp/orqzorrHorrvor4for5Dor6rosInosJ7kvY/ms6jnpZ3pqbvmipPniKrmi73kuJPnoJbovazmkrDotZrnr4bmoanluoToo4Xlpobmkp7lo67nirbmpI7plKXov73otZjlnaDnvIDosIblh4bmjYnmi5nljZPmoYznkKLojIHphYzllYTnnYDngbzmtYrlhbnlkqjotYTlp7/mu4vmt4TlrZzntKvku5Tnsb3mu5PlrZDoh6rmuI3lrZfprIPmo5XouKrlrpfnu7zmgLvnurXpgrnotbDlpY/mj43np5/otrPljZLml4/npZbor4XpmLvnu4TpkrvnuoLlmLTphonmnIDnvarlsIrpgbXmmKjlt6bkvZDmn57lgZrkvZzlnZDluqfvv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE1XS5sZW5ndGg7ICsraikgaWYoRFsyMTVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE1XVtqXV0gPSA1NTA0MCArIGo7IGRbNTUwNDAgKyBqXSA9IERbMjE1XVtqXTt9XG5cdERbMjE2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96LC46LC56LC66LC76LC86LC96LC+6LC/6LGA6LGC6LGD6LGE6LGF6LGI6LGK6LGL6LGN6LGO6LGP6LGQ6LGR6LGS6LGT6LGU6LGW6LGX6LGY6LGZ6LGb6LGc6LGd6LGe6LGf6LGg6LGj6LGk6LGl6LGm6LGn6LGo6LGp6LGs6LGt6LGu6LGv6LGw6LGx6LGy6LG06LG16LG26LG36LG76LG86LG96LG+6LG/6LKA6LKB6LKD6LKE6LKG6LKH77+96LKI6LKL6LKN6LKO6LKP6LKQ6LKR6LKS6LKT6LKV6LKW6LKX6LKZ6LKa6LKb6LKc6LKd6LKe6LKf6LKg6LKh6LKi6LKj6LKk6LKl6LKm6LKn6LKo6LKp6LKq6LKr6LKs6LKt5LqN5LiM5YWA5LiQ5bu/5Y2F5LiV5LqY5Lie6ayy5a2s5Zmp5Lio56a65Li/5YyV5LmH5aSt54i75Y2u5rCQ5Zuf6IOk6aaX5q+T552+6byX5Li25Lqf6byQ5Lmc5Lmp5LqT6IqI5a2b5ZWs5ZiP5LuE5Y6N5Y6d5Y6j5Y6l5Y6u6Z2l6LWd5Yya5Y+15Yym5Yyu5Yy+6LWc5Y2m5Y2j5YiC5YiI5YiO5Yit5Yiz5Yi/5YmA5YmM5Yme5Ymh5Ymc6JKv5Ym95YqC5YqB5YqQ5YqT5YaC572U5Lq75LuD5LuJ5LuC5Luo5Luh5Lur5Lue5Lyb5Luz5Lyi5L2k5Lu15Lyl5Lyn5LyJ5Lyr5L2e5L2n5pS45L2a5L2d77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxNl0ubGVuZ3RoOyArK2opIGlmKERbMjE2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxNl1bal1dID0gNTUyOTYgKyBqOyBkWzU1Mjk2ICsgal0gPSBEWzIxNl1bal07fVxuXHREWzIxN10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiyruiyr+iysOiyseiysuiys+iytOiyteiytuiyt+iyuOiyueiyuuiyu+iyvOiyveiyvuiyv+izgOizgeizguizg+izhOizheizhuizh+iziOizieiziuizi+izjOizjeizjuizj+izkOizkeizkuizk+izlOizleizluizl+izmOizmeizmuizm+iznOizneiznuizn+izoOizoeizouizo+izpOizpeizpuizp+izqOizqeizquizq+izrO+/veizreizruizr+izsOizseizsuizs+iztOizteiztuizt+izuOizueizuuizu+izvOizveizvuizv+i0gOi0gei0gui0g+i0hOi0hei0hui0h+i0iOi0iei0iui0i+i0jOi0jeS9n+S9l+S8suS8veS9tuS9tOS+keS+ieS+g+S+j+S9vuS9u+S+quS9vOS+rOS+lOS/puS/qOS/quS/heS/muS/o+S/nOS/keS/n+S/uOWAqeWBjOS/s+WArOWAj+WAruWAreS/vuWAnOWAjOWApeWAqOWBvuWBg+WBleWBiOWBjuWBrOWBu+WCpeWCp+WCqeWCuuWDluWEhuWDreWDrOWDpuWDruWEh+WEi+S7neawveS9mOS9peS/jum+oOaxhuextOWFruW3vem7iemmmOWGgeWklOWLueWMjeioh+WMkOWHq+WkmeWFleS6oOWFluS6s+ihruiipOS6teiElOijkuemgOWstOigg+e+uOWGq+WGseWGveWGvO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTddLmxlbmd0aDsgKytqKSBpZihEWzIxN11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTddW2pdXSA9IDU1NTUyICsgajsgZFs1NTU1MiArIGpdID0gRFsyMTddW2pdO31cblx0RFsyMThdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73otI7otI/otJDotJHotJLotJPotJTotJXotJbotJfotJjotJnotJrotJvotJzotKDotZHotZLotZfotZ/otaXotajotanotarotazota7ota/otbHotbLotbjotbnotbrotbvotbzotb3otb7otb/otoDotoLotoPotobotofotojotonotozoto3oto7oto/otpDotpLotpPotpXotpbotpfotpjotpnotprotpvotpzotp3otp7otqDotqHvv73otqLotqTotqXotqbotqfotqjotqnotqrotqvotqzotq3otq7otq/otrDotrLotrbotrfotrnotrvotr3ot4Dot4Hot4Lot4Xot4fot4jot4not4rot43ot5Dot5Lot5Pot5Tlh4flhpblhqLlhqXorqDorqborqforqrorrTorrXorrfor4Lor4Por4vor4/or47or5Lor5Por5Tor5bor5jor5nor5zor5/or6Dor6Tor6jor6nor67or7Dor7Por7bor7nor7zor7/osIDosILosITosIfosIzosI/osJHosJLosJTosJXosJbosJnosJvosJjosJ3osJ/osKDosKHosKXosKfosKrosKvosK7osK/osLLosLPosLXosLbljanljbrpmJ3pmKLpmKHpmLHpmKrpmL3pmLzpmYLpmYnpmZTpmZ/pmafpmazpmbLpmbTpmojpmo3pmpfpmrDpgpfpgpvpgp3pgpnpgqzpgqHpgrTpgrPpgrbpgrrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE4XS5sZW5ndGg7ICsraikgaWYoRFsyMThdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE4XVtqXV0gPSA1NTgwOCArIGo7IGRbNTU4MDggKyBqXSA9IERbMjE4XVtqXTt9XG5cdERbMjE5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96LeV6LeY6LeZ6Lec6Leg6Leh6Lei6Lel6Lem6Len6Lep6Let6Leu6Lew6Lex6Ley6Le06Le26Le86Le+6Le/6LiA6LiB6LiC6LiD6LiE6LiG6LiH6LiI6LiL6LiN6LiO6LiQ6LiR6LiS6LiT6LiV6LiW6LiX6LiY6LiZ6Lia6Lib6Lic6Lig6Lih6Lik6Lil6Lim6Lin6Lio6Lir6Lit6Liw6Liy6Liz6Li06Li26Li36Li46Li76Li86Li+77+96Li/6LmD6LmF6LmG6LmM6LmN6LmO6LmP6LmQ6LmT6LmU6LmV6LmW6LmX6LmY6Lma6Lmb6Lmc6Lmd6Lme6Lmf6Lmg6Lmh6Lmi6Lmj6Lmk6Lml6Lmn6Lmo6Lmq6Lmr6Lmu6Lmx6YK46YKw6YOP6YOF6YK+6YOQ6YOE6YOH6YOT6YOm6YOi6YOc6YOX6YOb6YOr6YOv6YO+6YSE6YSi6YSe6YSj6YSx6YSv6YS56YWD6YWG5YiN5aWC5Yqi5Yqs5Yqt5Yq+5ZO/5YuQ5YuW5Yuw5Y+f54eu55+N5bu05Ye15Ye86ayv5Y625byB55Wa5bev5Z2M5Z6p5Z6h5aG+5aK85aOF5aOR5Zyp5Zys5Zyq5Zyz5Zy55Zyu5Zyv5Z2c5Zy75Z2C5Z2p5Z6F5Z2r5Z6G5Z285Z275Z2o5Z2t5Z225Z2z5Z6t5Z6k5Z6M5Z6y5Z+P5Z6n5Z605Z6T5Z6g5Z+V5Z+Y5Z+a5Z+Z5Z+S5Z645Z+05Z+v5Z+45Z+k5Z+d77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxOV0ubGVuZ3RoOyArK2opIGlmKERbMjE5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxOV1bal1dID0gNTYwNjQgKyBqOyBkWzU2MDY0ICsgal0gPSBEWzIxOV1bal07fVxuXHREWzIyMF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vei5s+i5tei5t+i5uOi5uei5uui5u+i5vei5vui6gOi6gui6g+i6hOi6hui6iOi6iei6iui6i+i6jOi6jei6jui6kei6kui6k+i6lei6lui6l+i6mOi6mei6mui6m+i6nei6n+i6oOi6oei6oui6o+i6pOi6pei6pui6p+i6qOi6qei6qui6rei6rui6sOi6sei6s+i6tOi6tei6tui6t+i6uOi6uei6u+i6vOi6vei6vui6v+i7gOi7gei7gu+/vei7g+i7hOi7hei7hui7h+i7iOi7iei7iui7i+i7jOi7jei7j+i7kOi7kei7kui7k+i7lOi7lei7lui7l+i7mOi7mei7mui7m+i7nOi7nei7nui7n+i7oOi7oei7oui7o+i7pOWgi+WgjeWfveWfreWggOWgnuWgmeWhhOWgoOWhpeWhrOWigeWiieWimuWigOmmqOm8meaHv+iJueiJveiJv+iKj+iKiuiKqOiKhOiKjuiKkeiKl+iKmeiKq+iKuOiKvuiKsOiLiOiLiuiLo+iKmOiKt+iKruiLi+iLjOiLgeiKqeiKtOiKoeiKquiKn+iLhOiLjuiKpOiLoeiMieiLt+iLpOiMj+iMh+iLnOiLtOiLkuiLmOiMjOiLu+iLk+iMkeiMmuiMhuiMlOiMleiLoOiLleiMnOiNkeiNm+iNnOiMiOiOkuiMvOiMtOiMseiOm+iNnuiMr+iNj+iNh+iNg+iNn+iNgOiMl+iNoOiMreiMuuiMs+iNpuiNpe+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjBdLmxlbmd0aDsgKytqKSBpZihEWzIyMF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjBdW2pdXSA9IDU2MzIwICsgajsgZFs1NjMyMCArIGpdID0gRFsyMjBdW2pdO31cblx0RFsyMjFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ou6Xou6bou6fou6jou6nou6rou6vou6zou63ou67ou6/ou7Dou7Hou7Lou7Pou7Tou7Xou7bou7fou7jou7nou7rou7vou7zou73ou77ou7/ovIDovIHovILovIPovITovIXovIbovIfovIjovInovIrovIvovIzovI3ovI7ovI/ovJDovJHovJLovJPovJTovJXovJbovJfovJjovJnovJrovJvovJzovJ3ovJ7ovJ/ovKDovKHovKLovKPvv73ovKTovKXovKbovKfovKjovKnovKrovKvovKzovK3ovK7ovK/ovLDovLHovLLovLPovLTovLXovLbovLfovLjovLnovLrovLvovLzovL3ovL7ovL/ovYDovYHovYLovYPovYTojajojJvojanojazojaroja3oja7ojrDojbjojrPojrTojqDojqrojpPojpzojoXojbzojrbojqnojb3ojrjojbvojpjojp7ojqjojrrojrzoj4HokIHoj6Xoj5jloIfokJjokIvoj53oj73oj5bokJzokLjokJHokIboj5Toj5/okI/okIPoj7joj7noj6roj4Xoj4DokKboj7Doj6HokZzokZHokZrokZnokbPokofokojokbrokonokbjokLzokYbokanokbbokozoko7okLHoka3ok4Hok43ok5Dok6bokr3ok5Pok4rokr/okrrok6DokqHokrnokrTokpfok6Xok6PolIznlI3olLjok7DolLnolJ/olLrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjIxXS5sZW5ndGg7ICsraikgaWYoRFsyMjFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjIxXVtqXV0gPSA1NjU3NiArIGo7IGRbNTY1NzYgKyBqXSA9IERbMjIxXVtqXTt9XG5cdERbMjIyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96L2F6L2G6L2H6L2I6L2J6L2K6L2L6L2M6L2N6L2O6L2P6L2Q6L2R6L2S6L2T6L2U6L2V6L2W6L2X6L2Y6L2Z6L2a6L2b6L2c6L2d6L2e6L2f6L2g6L2h6L2i6L2j6L2k6L2l6L2q6L6A6L6M6L6S6L6d6L6g6L6h6L6i6L6k6L6l6L6m6L6n6L6q6L6s6L6t6L6u6L6v6L6y6L6z6L606L616L636L646L666L676L686L6/6L+A6L+D6L+G77+96L+J6L+K6L+L6L+M6L+N6L+P6L+S6L+W6L+X6L+a6L+g6L+h6L+j6L+n6L+s6L+v6L+x6L+y6L+06L+16L+26L+66L+76L+86L++6L+/6YCH6YCI6YCM6YCO6YCT6YCV6YCY6JWW6JS76JO/6JO86JWZ6JWI6JWo6JWk6JWe6JW6556i6JWD6JWy6JW76Jak6Jao6JaH6JaP6JW56Jau6Jac6JaF6Ja56Ja36Jaw6JeT6JeB6Jec6Je/6Jin6JiF6Jip6JiW6Ji85bu+5byI5aS85aWB6IC35aWV5aWa5aWY5YyP5bCi5bCl5bCs5bC05omM5omq5oqf5oq75ouK5oua5ouX5ouu5oyi5ou25oy55o2L5o2D5o6t5o+25o2x5o265o6O5o605o2t5o6s5o6K5o2p5o6u5o685o+y5o+45o+g5o+/5o+E5o+e5o+O5pGS5o+G5o6+5pGF5pGB5pCL5pCb5pCg5pCM5pCm5pCh5pGe5pKE5pGt5pKW77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyMl0ubGVuZ3RoOyArK2opIGlmKERbMjIyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyMl1bal1dID0gNTY4MzIgKyBqOyBkWzU2ODMyICsgal0gPSBEWzIyMl1bal07fVxuXHREWzIyM10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemAmemAnOmAo+mApOmApemAp+mAqOmAqemAqumAq+mArOmAsOmAsemAsumAs+mAtOmAt+mAuemAuumAvemAv+mBgOmBg+mBhemBhumBiOmBiemBiumBi+mBjOmBjumBlOmBlemBlumBmemBmumBnOmBnemBnumBn+mBoOmBoemBpOmBpumBp+mBqemBqumBq+mBrOmBr+mBsOmBsemBsumBs+mBtumBt+mBuOmBuemBuumBu+mBvOmBvumCge+/vemChOmChemChumCh+mCiemCiumCjOmCjemCjumCj+mCkOmCkumClOmClumCmOmCmumCnOmCnumCn+mCoOmCpOmCpemCp+mCqOmCqemCq+mCremCsumCt+mCvOmCvemCv+mDgOaRuuaSt+aSuOaSmeaSuuaTgOaTkOaTl+aTpOaTouaUieaUpeaUruW8i+W/kueUmeW8keWNn+WPseWPveWPqeWPqOWPu+WQkuWQluWQhuWRi+WRkuWRk+WRlOWRluWRg+WQoeWRl+WRmeWQo+WQsuWSguWSlOWRt+WRseWRpOWSmuWSm+WShOWRtuWRpuWSneWTkOWSreWTguWStOWTkuWSp+WSpuWTk+WTlOWRsuWSo+WTleWSu+WSv+WTjOWTmeWTmuWTnOWSqeWSquWSpOWTneWTj+WTnuWUm+WTp+WUoOWTveWUlOWTs+WUouWUo+WUj+WUkeWUp+WUquWVp+WWj+WWteWVieWVreWVgeWVleWUv+WVkOWUvO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjNdLmxlbmd0aDsgKytqKSBpZihEWzIyM11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjNdW2pdXSA9IDU3MDg4ICsgajsgZFs1NzA4OCArIGpdID0gRFsyMjNdW2pdO31cblx0RFsyMjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pg4Lpg4Ppg4bpg4jpg4npg4vpg4zpg43pg5Lpg5Tpg5Xpg5bpg5jpg5npg5rpg57pg5/pg6Dpg6Ppg6Tpg6Xpg6npg6rpg6zpg67pg7Dpg7Hpg7Lpg7Ppg7Xpg7bpg7fpg7npg7rpg7vpg7zpg7/phIDphIHphIPphIXphIbphIfphIjphInphIrphIvphIzphI3phI7phI/phJDphJHphJLphJPphJTphJXphJbphJfphJjphJrphJvphJzvv73phJ3phJ/phKDphKHphKTphKXphKbphKfphKjphKnphKrphKvphKzphK3phK7phLDphLLphLPphLTphLXphLbphLfphLjphLrphLvphLzphL3phL7phL/phYDphYHphYLphYTllLfllZbllbXllbbllbfllLPllLDllZzllovll5LlloPllrHllrnllojlloHllp/llb7ll5bllpHllbvll5/llr3llr7llpTllpnll6rll7fll4nlmJ/ll5Hll6vll6zll5Tll6bll53ll4Tll6/ll6Xll7Lll7Pll4zll43ll6jll7Xll6TovpTlmJ7lmIjlmIzlmIHlmKTlmKPll77lmIDlmKflmK3lmZjlmLnlmZflmKzlmY3lmaLlmZnlmZzlmYzlmZTlmoblmaTlmbHlmavlmbvlmbzlmoXlmpPlmq/lm5Tlm5flm53lm6Hlm7Xlm6vlm7nlm7/lnITlnIrlnInlnJzluI/luJnluJTluJHluLHluLvluLzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI0XS5sZW5ndGg7ICsraikgaWYoRFsyMjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI0XVtqXV0gPSA1NzM0NCArIGo7IGRbNTczNDQgKyBqXSA9IERbMjI0XVtqXTt9XG5cdERbMjI1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96YWF6YWH6YWI6YWR6YWT6YWU6YWV6YWW6YWY6YWZ6YWb6YWc6YWf6YWg6YWm6YWn6YWo6YWr6YWt6YWz6YW66YW76YW86YaA6YaB6YaC6YaD6YaE6YaG6YaI6YaK6YaO6YaP6YaT6YaU6YaV6YaW6YaX6YaY6YaZ6Yac6Yad6Yae6Yaf6Yag6Yah6Yak6Yal6Yam6Yan6Yao6Yap6Yar6Yas6Yaw6Yax6Yay6Yaz6Ya26Ya36Ya46Ya56Ya777+96Ya86Ya96Ya+6Ya/6YeA6YeB6YeC6YeD6YeE6YeF6YeG6YeI6YeL6YeQ6YeS6YeT6YeU6YeV6YeW6YeX6YeY6YeZ6Yea6Yeb6Yed6Yee6Yef6Yeg6Yeh6Yei6Yej6Yek6Yel5bi35bmE5bmU5bmb5bme5bmh5bKM5bG65bKN5bKQ5bKW5bKI5bKY5bKZ5bKR5bKa5bKc5bK15bKi5bK95bKs5bKr5bKx5bKj5bOB5bK35bOE5bOS5bOk5bOL5bOl5bSC5bSD5bSn5bSm5bSu5bSk5bSe5bSG5bSb5bWY5bS+5bS05bS95bWs5bWb5bWv5bWd5bWr5bWL5bWK5bWp5bW05baC5baZ5bad6LGz5ba35beF5b2z5b235b6C5b6H5b6J5b6M5b6V5b6Z5b6c5b6o5b6t5b615b686KGi5b2h54qt54qw54q054q354q454uD54uB54uO54uN54uS54uo54uv54up54uy54u054u354yB54uz54yD54u677+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyNV0ubGVuZ3RoOyArK2opIGlmKERbMjI1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyNV1bal1dID0gNTc2MDAgKyBqOyBkWzU3NjAwICsgal0gPSBEWzIyNV1bal07fVxuXHREWzIyNl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemHpumHp+mHqOmHqemHqumHq+mHrOmHremHrumHr+mHsOmHsemHsumHs+mHtOmHtemHtumHt+mHuOmHuemHuumHu+mHvOmHvemHvumHv+mIgOmIgemIgumIg+mIhOmIhemIhumIh+mIiOmIiemIiumIi+mIjOmIjemIjumIj+mIkOmIkemIkumIk+mIlOmIlemIlumIl+mImOmImemImumIm+mInOmInemInumIn+mIoOmIoemIoumIo+mIpO+/vemIpemIpumIp+mIqOmIqemIqumIq+mIrOmIremIrumIr+mIsOmIsemIsumIs+mItOmItemItumIt+mIuOmIuemIuumIu+mIvOmIvemIvumIv+mJgOmJgemJgumJg+mJhOmJheeLu+eMl+eMk+eMoeeMiueMnueMneeMleeMoueMueeMpeeMrOeMuOeMseeNkOeNjeeNl+eNoOeNrOeNr+eNvuiIm+Wkpemjp+WkpOWkgumlo+mlp+mlqOmlqemlqumlq+mlrOmltOmlt+mlvemmgOmmhOmmh+mmiummjemmkOmmkemmk+mmlOmmleW6gOW6keW6i+W6luW6peW6oOW6ueW6teW6vuW6s+i1k+W7kuW7keW7m+W7qOW7quiGuuW/hOW/ieW/luW/j+aAg+W/ruaAhOW/oeW/pOW/vuaAheaAhuW/quW/reW/uOaAmeaAteaApuaAm+aAj+aAjeaAqeaAq+aAiuaAv+aAoeaBuOaBueaBu+aBuuaBgu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjZdLmxlbmd0aDsgKytqKSBpZihEWzIyNl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjZdW2pdXSA9IDU3ODU2ICsgajsgZFs1Nzg1NiArIGpdID0gRFsyMjZdW2pdO31cblx0RFsyMjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73piYbpiYfpiYjpiYnpiYrpiYvpiYzpiY3piY7piY/piZDpiZHpiZLpiZPpiZTpiZXpiZbpiZfpiZjpiZnpiZrpiZvpiZzpiZ3piZ7piZ/piaDpiaHpiaLpiaPpiaTpiaXpiabpiafpiajpianpiarpiavpiazpia3pia7pia/pibDpibHpibLpibPpibXpibbpibfpibjpibnpibrpibvpibzpib3pib7pib/pioDpioHpioLpioPpioTpioXvv73piobpiofpiojpionpiorpiovpiozpio3pio/pipDpipHpipLpipPpipTpipXpipbpipfpipjpipnpiprpipvpipzpip3pip7pip/piqDpiqHpiqLpiqPpiqTpiqXpiqbpiqfmgarmgb3mgpbmgprmgq3mgp3mgoPmgpLmgozmgpvmg6zmgrvmgrHmg53mg5jmg4bmg5rmgrTmhKDmhKbmhJXmhKPmg7TmhIDmhI7mhKvmhYrmhbXmhqzmhpTmhqfmhrfmh5Tmh7Xlv53pmrPpl6npl6vpl7Hpl7Ppl7Xpl7bpl7zpl77pmIPpmITpmIbpmIjpmIrpmIvpmIzpmI3pmI/pmJLpmJXpmJbpmJfpmJnpmJrkuKzniL/miJXmsLXmsZTmsZzmsYrmsqPmsoXmspDmspTmsozmsajmsanmsbTmsbbmsobmsqnms5Dms5Tmsq3ms7fms7jms7Hms5fmsrLms6Dms5bms7rms6vms67msrHms5Pms6/ms77vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI3XS5sZW5ndGg7ICsraikgaWYoRFsyMjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI3XVtqXV0gPSA1ODExMiArIGo7IGRbNTgxMTIgKyBqXSA9IERbMjI3XVtqXTt9XG5cdERbMjI4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Yqo6Yqp6Yqq6Yqr6Yqs6Yqt6Yqv6Yqw6Yqx6Yqy6Yqz6Yq06Yq16Yq26Yq36Yq46Yq56Yq66Yq76Yq86Yq96Yq+6Yq/6YuA6YuB6YuC6YuD6YuE6YuF6YuG6YuH6YuJ6YuK6YuL6YuM6YuN6YuO6YuP6YuQ6YuR6YuS6YuT6YuU6YuV6YuW6YuX6YuY6YuZ6Yua6Yub6Yuc6Yud6Yue6Yuf6Yug6Yuh6Yui6Yuj6Yuk6Yul6Yum6Yun6Yuo77+96Yup6Yuq6Yur6Yus6Yut6Yuu6Yuv6Yuw6Yux6Yuy6Yuz6Yu06Yu16Yu26Yu36Yu46Yu56Yu66Yu76Yu86Yu96Yu+6Yu/6YyA6YyB6YyC6YyD6YyE6YyF6YyG6YyH6YyI6YyJ5rS55rSn5rSM5rWD5rWI5rSH5rSE5rSZ5rSO5rSr5rWN5rSu5rS15rSa5rWP5rWS5rWU5rSz5raR5rWv5rae5rag5rWe5raT5raU5rWc5rWg5rW85rWj5ria5reH5reF5ree5riO5ra/5reg5riR5rem5red5reZ5riW5rar5riM5rau5rir5rmu5rmO5rmr5rqy5rmf5rqG5rmT5rmU5riy5ril5rmE5ruf5rqx5rqY5rug5ryt5rui5rql5rqn5rq95rq75rq35ruX5rq05ruP5rqP5ruC5rqf5r2i5r2G5r2H5ryk5ryV5ru55ryv5ry25r2L5r205ryq5ryJ5ryp5r6J5r6N5r6M5r245r2y5r285r265r+R77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyOF0ubGVuZ3RoOyArK2opIGlmKERbMjI4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyOF1bal1dID0gNTgzNjggKyBqOyBkWzU4MzY4ICsgal0gPSBEWzIyOF1bal07fVxuXHREWzIyOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemMiumMi+mMjOmMjemMjumMj+mMkOmMkemMkumMk+mMlOmMlemMlumMl+mMmOmMmemMmumMm+mMnOmMnemMnumMn+mMoOmMoemMoumMo+mMpOmMpemMpumMp+mMqOmMqemMqumMq+mMrOmMremMrumMr+mMsOmMsemMsumMs+mMtOmMtemMtumMt+mMuOmMuemMuumMu+mMvOmMvemMv+mNgOmNgemNgumNg+mNhOmNhemNhumNh+mNiOmNie+/vemNiumNi+mNjOmNjemNjumNj+mNkOmNkemNkumNk+mNlOmNlemNlumNl+mNmOmNmemNmumNm+mNnOmNnemNnumNn+mNoOmNoemNoumNo+mNpOmNpemNpumNp+mNqOmNqemNq+a/iea+p+a+uea+tua/gua/oea/rua/nua/oOa/r+eAmueAo+eAm+eAueeAteeBj+eBnuWugOWuhOWuleWuk+WupeWuuOeUr+mqnuaQtOWvpOWvruiksOWvsOi5h+ish+i+tui/k+i/lei/pei/rui/pOi/qei/pui/s+i/qOmAhemAhOmAi+mApumAkemAjemAlumAoemAtemAtumAremAr+mBhOmBkemBkumBkOmBqOmBmOmBoumBm+aauemBtOmBvemCgumCiOmCg+mCi+W9kOW9l+W9luW9mOWwu+WSq+WxkOWxmeWtseWxo+Wxpue+vOW8quW8qeW8reiJtOW8vOmsu+WxruWmgeWmg+WmjeWmqeWmquWmo++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjldLmxlbmd0aDsgKytqKSBpZihEWzIyOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjldW2pdXSA9IDU4NjI0ICsgajsgZFs1ODYyNCArIGpdID0gRFsyMjldW2pdO31cblx0RFsyMzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pjazpja3pja7pja/pjbDpjbHpjbLpjbPpjbTpjbXpjbbpjbfpjbjpjbnpjbrpjbvpjbzpjb3pjb7pjb/pjoDpjoHpjoLpjoPpjoTpjoXpjobpjofpjojpjonpjorpjovpjozpjo3pjo7pjpDpjpHpjpLpjpPpjpTpjpXpjpbpjpfpjpjpjpnpjprpjpvpjpzpjp3pjp7pjp/pjqDpjqHpjqLpjqPpjqTpjqXpjqbpjqfpjqjpjqnpjqrpjqvvv73pjqzpjq3pjq7pjq/pjrDpjrHpjrLpjrPpjrTpjrXpjrbpjrfpjrjpjrnpjrrpjrvpjrzpjr3pjr7pjr/pj4Dpj4Hpj4Lpj4Ppj4Tpj4Xpj4bpj4fpj4jpj4npj4vpj4zpj43lppflp4rlpqvlpp7lpqTlp5LlprLlpq/lp5flpr7lqIXlqIblp53lqIjlp6Plp5jlp7nlqIzlqInlqLLlqLTlqJHlqKPlqJPlqYDlqaflqYrlqZXlqLzlqaLlqbXog6zlqqrlqpvlqbflqbrlqr7lq6vlqrLlq5Llq5Tlqrjlq6Dlq6Plq7Hlq5blq6blq5jlq5zlrInlrJflrJblrLLlrLflrYDlsJXlsJzlrZrlraXlrbPlrZHlrZPlraLpqbXpqbfpqbjpqbrpqb/pqb3pqoDpqoHpqoXpqojpqorpqpDpqpLpqpPpqpbpqpjpqpvpqpzpqp3pqp/pqqDpqqLpqqPpqqXpqqfnup/nuqHnuqPnuqXnuqjnuqnvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMwXS5sZW5ndGg7ICsraikgaWYoRFsyMzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMwXVtqXV0gPSA1ODg4MCArIGo7IGRbNTg4ODAgKyBqXSA9IERbMjMwXVtqXTt9XG5cdERbMjMxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Y+O6Y+P6Y+Q6Y+R6Y+S6Y+T6Y+U6Y+V6Y+X6Y+Y6Y+Z6Y+a6Y+b6Y+c6Y+d6Y+e6Y+f6Y+g6Y+h6Y+i6Y+j6Y+k6Y+l6Y+m6Y+n6Y+o6Y+p6Y+q6Y+r6Y+s6Y+t6Y+u6Y+v6Y+w6Y+x6Y+y6Y+z6Y+06Y+16Y+26Y+36Y+46Y+56Y+66Y+76Y+86Y+96Y++6Y+/6ZCA6ZCB6ZCC6ZCD6ZCE6ZCF6ZCG6ZCH6ZCI6ZCJ6ZCK6ZCL6ZCM6ZCN77+96ZCO6ZCP6ZCQ6ZCR6ZCS6ZCT6ZCU6ZCV6ZCW6ZCX6ZCY6ZCZ6ZCa6ZCb6ZCc6ZCd6ZCe6ZCf6ZCg6ZCh6ZCi6ZCj6ZCk6ZCl6ZCm6ZCn6ZCo6ZCp6ZCq6ZCr6ZCs6ZCt6ZCu57qt57qw57q+57uA57uB57uC57uJ57uL57uM57uQ57uU57uX57ub57ug57uh57uo57ur57uu57uv57ux57uy57yN57u257u657u757u+57yB57yC57yD57yH57yI57yL57yM57yP57yR57yS57yX57yZ57yc57yb57yf57yh57yi57yj57yk57yl57ym57yn57yq57yr57ys57yt57yv57yw57yx57yy57yz57y15bm655W/5beb55S+6YKV546O546R546u546i546f54+P54+C54+R5463546z54+A54+J54+I54+l54+Z6aG855CK54+p54+n54+e546654+y55CP55Cq55Gb55Cm55Cl55Co55Cw55Cu55Cs77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzMV0ubGVuZ3RoOyArK2opIGlmKERbMjMxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzMV1bal1dID0gNTkxMzYgKyBqOyBkWzU5MTM2ICsgal0gPSBEWzIzMV1bal07fVxuXHREWzIzMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemQr+mQsOmQsemQsumQs+mQtOmQtemQtumQt+mQuOmQuemQuumQu+mQvOmQvemQv+mRgOmRgemRgumRg+mRhOmRhemRhumRh+mRiOmRiemRiumRi+mRjOmRjemRjumRj+mRkOmRkemRkumRk+mRlOmRlemRlumRl+mRmOmRmemRmumRm+mRnOmRnemRnumRn+mRoOmRoemRoumRo+mRpOmRpemRpumRp+mRqOmRqemRqumRrOmRremRrumRr++/vemRsOmRsemRsumRs+mRtOmRtemRtumRt+mRuOmRuemRuumRu+mRvOmRvemRvumRv+mSgOmSgemSgumSg+mShOmSkemSlumSmOmTh+mTj+mTk+mTlOmTmumTpumTu+mUnOmUoOeQm+eQmueRgeeRnOeRl+eRleeRmeeRt+eRreeRvueSnOeSjueSgOeSgeeSh+eSi+eSnueSqOeSqeeSkOeSp+eTkueSuumfqumfq+mfrOadjOadk+adnuadiOadqeaepeaeh+adquads+aemOaep+adteaeqOaenuaereaei+adt+advOafsOagieafmOagiuafqeaesOagjOafmeaeteafmuaes+afneaggOafg+aeuOafouagjuafgeafveagsuags+ahoOahoeahjuahouahhOahpOaig+agneahleahpuahgeahp+ahgOagvuahiuahieagqeaiteaij+ahtOaht+aik+ahq+ajgualruajvOakn+akoOajue+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzJdLmxlbmd0aDsgKytqKSBpZihEWzIzMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzJdW2pdXSA9IDU5MzkyICsgajsgZFs1OTM5MiArIGpdID0gRFsyMzJdW2pdO31cblx0RFsyMzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73plKfplLPplL3plYPplYjplYvplZXplZrplaDpla7plbTplbXplbfplbjplbnplbrplbvplbzplb3plb7ploDploHploLploPploTploXplobplofplojplonplorplovplozplo3plo7plo/plpDplpHplpLplpPplpTplpXplpbplpfplpjplpnplprplpvplpzplp3plp7plp/plqDplqHplqLplqPplqTplqXplqbplqfplqjplqnplqrvv73plqvplqzplq3plq7plq/plrDplrHplrLplrPplrTplrXplrbplrfplrjplrnplrrplrvplrzplr3plr7plr/pl4Dpl4Hpl4Lpl4Ppl4Tpl4Xpl4bpl4fpl4jpl4npl4rpl4vmpKTmo7DmpIvmpIHmpZfmo6PmpJDmpbHmpLnmpaDmpYLmpZ3mpoTmpavmpoDmppjmpbjmpLTmp4zmpofmpojmp47mponmpabmpaPmpbnmppvmpqfmprvmpqvmpq3mp5TmprHmp4Hmp4rmp5/mppXmp6Dmpo3mp7/mqK/mp63mqJfmqJjmqaXmp7LmqYTmqL7mqqDmqZDmqZvmqLXmqo7mqbnmqL3mqKjmqZjmqbzmqpHmqpDmqqnmqpfmqqvnjLfnjZLmroHmroLmrofmroTmrpLmrpPmro3mrprmrpvmrqHmrqrovavova3ovbHovbLovbPovbXovbbovbjovbfovbnovbrovbzovb7ovoHovoLovoTovofovovvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMzXS5sZW5ndGg7ICsraikgaWYoRFsyMzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMzXVtqXV0gPSA1OTY0OCArIGo7IGRbNTk2NDggKyBqXSA9IERbMjMzXVtqXTt9XG5cdERbMjM0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ZeM6ZeN6ZeO6ZeP6ZeQ6ZeR6ZeS6ZeT6ZeU6ZeV6ZeW6ZeX6ZeY6ZeZ6Zea6Zeb6Zec6Zed6Zee6Zef6Zeg6Zeh6Zei6Zej6Zek6Zel6Zem6Zen6Zes6Ze/6ZiH6ZiT6ZiY6Zib6Zie6Zig6Zij6Zik6Zil6Zim6Zin6Zio6Zip6Zir6Zis6Zit6Ziv6Ziw6Zi36Zi46Zi56Zi66Zi+6ZmB6ZmD6ZmK6ZmO6ZmP6ZmR6ZmS6ZmT6ZmW6ZmX77+96ZmY6ZmZ6Zma6Zmc6Zmd6Zme6Zmg6Zmj6Zml6Zmm6Zmr6Zmt6Zmu6Zmv6Zmw6Zmx6Zmz6Zm46Zm56Zm66Zm76Zm86Zm96Zm+6Zm/6ZqA6ZqB6ZqC6ZqD6ZqE6ZqH6ZqJ6ZqK6L6N6L6O6L6P6L6Y6L6a6LuO5oiL5oiX5oib5oif5oii5oih5oil5oik5ois6Ien55Ov55O055O/55SP55SR55ST5pS05peu5pev5pew5piK5piZ5p2y5piD5piV5piA54KF5pu35pid5pi05pix5pi25pi16ICG5pmf5pmU5pmB5pmP5pmW5pmh5pmX5pm35pqE5pqM5pqn5pqd5pq+5pub5puc5pum5pup6LSy6LSz6LS26LS76LS96LWA6LWF6LWG6LWI6LWJ6LWH6LWN6LWV6LWZ6KeH6KeK6KeL6KeM6KeO6KeP6KeQ6KeR54mu54qf54md54mm54mv54m+54m/54qE54qL54qN54qP54qS5oyI5oyy5o6w77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzNF0ubGVuZ3RoOyArK2opIGlmKERbMjM0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzNF1bal1dID0gNTk5MDQgKyBqOyBkWzU5OTA0ICsgal0gPSBEWzIzNF1bal07fVxuXHREWzIzNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemajOmajumakemakumak+malemalumamumam+manemanuman+maoOmaoemaoumao+mapOmapemapumaqOmaqemaqumaq+marOmaremarumar+masemasumatOmatemat+mauOmauumau+mav+mbgumbg+mbiOmbiumbi+mbkOmbkembk+mblOmblumbl+mbmOmbmembmumbm+mbnOmbnembnumbn+mboemboumbo+mbpOmbpembpumbp+mbq++/vembrOmbrembrumbsOmbsembsumbtOmbtembuOmbuumbu+mbvOmbvembv+mcgumcg+mchemciumci+mcjOmckOmckemckumclOmclemcl+mcmOmcmemcmumcm+mcnemcn+mcoOaQv+aTmOiAhOavquavs+avveavteavueawheawh+awhuawjeawleawmOawmeawmuawoeawqeawpOawquawsuaUteaVleaVq+eJjeeJkueJlueIsOiZouWIluiCn+iCnOiCk+iCvOaciuiCveiCseiCq+iCreiCtOiCt+iDp+iDqOiDqeiDquiDm+iDguiDhOiDmeiDjeiDl+ackOiDneiDq+iDseiDtOiDreiEjeiEjuiDsuiDvOacleiEkuixmuiEtuiEnuiErOiEmOiEsuiFiOiFjOiFk+iFtOiFmeiFmuiFseiFoOiFqeiFvOiFveiFreiFp+WhjeWqteiGiOiGguiGkea7leiGo+iGquiHjOacpuiHiuiGu++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzVdLmxlbmd0aDsgKytqKSBpZihEWzIzNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzVdW2pdXSA9IDYwMTYwICsgajsgZFs2MDE2MCArIGpdID0gRFsyMzVdW2pdO31cblx0RFsyMzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pnKHpnKLpnKPpnKTpnKXpnKbpnKfpnKjpnKnpnKvpnKzpnK7pnK/pnLHpnLPpnLTpnLXpnLbpnLfpnLrpnLvpnLzpnL3pnL/pnYDpnYHpnYLpnYPpnYTpnYXpnYbpnYfpnYjpnYnpnYrpnYvpnYzpnY3pnY7pnY/pnZDpnZHpnZTpnZXpnZfpnZjpnZrpnZzpnZ3pnZ/pnaPpnaTpnabpnafpnajpnarpnavpnazpna3pna7pna/pnbDpnbHvv73pnbLpnbXpnbfpnbjpnbnpnbrpnbvpnb3pnb7pnb/pnoDpnoHpnoLpnoPpnoTpnobpnofpnojpnonpnorpnozpno7pno/pnpDpnpPpnpXpnpbpnpfpnpnpnprpnpvpnpzpnp3oh4HohqbmrKTmrLfmrLnmrYPmrYbmrZnpo5Hpo5Lpo5Ppo5Xpo5npo5rmrrPlvYDmr4Lop7PmlpDpvZHmlpPmlrzml4bml4Tml4Pml4zml47ml5Lml5bngoDngpzngpbngp3ngrvng4DngrfngqvngrHng6jng4rnhJDnhJPnhJbnhK/nhLHnhbPnhZznhajnhYXnhbLnhYrnhbjnhbrnhpjnhrPnhrXnhqjnhqDnh6Dnh5Tnh6fnh7nniJ3niKjngaznhJjnhabnhrnmiL7miL3miYPmiYjmiYnnpLvnpYDnpYbnpYnnpZvnpZznpZPnpZrnpaLnpZfnpaDnpa/npafnpbrnpoXnpornpprnpqfnprPlv5Hlv5Dvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM2XS5sZW5ndGg7ICsraikgaWYoRFsyMzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM2XVtqXV0gPSA2MDQxNiArIGo7IGRbNjA0MTYgKyBqXSA9IERbMjM2XVtqXTt9XG5cdERbMjM3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Z6e6Z6f6Z6h6Z6i6Z6k6Z6l6Z6m6Z6n6Z6o6Z6p6Z6q6Z6s6Z6u6Z6w6Z6x6Z6z6Z616Z626Z636Z646Z656Z666Z676Z686Z696Z6+6Z6/6Z+A6Z+B6Z+C6Z+D6Z+E6Z+F6Z+G6Z+H6Z+I6Z+J6Z+K6Z+L6Z+M6Z+N6Z+O6Z+P6Z+Q6Z+R6Z+S6Z+T6Z+U6Z+V6Z+W6Z+X6Z+Y6Z+Z6Z+a6Z+b6Z+c6Z+d6Z+e6Z+f6Z+g6Z+h6Z+i6Z+j77+96Z+k6Z+l6Z+o6Z+u6Z+v6Z+w6Z+x6Z+y6Z+06Z+36Z+46Z+56Z+66Z+76Z+86Z+96Z++6Z+/6aCA6aCB6aCC6aCD6aCE6aCF6aCG6aCH6aCI6aCJ6aCK6aCL6aCM6aCN6aCO5oC85oGd5oGa5oGn5oGB5oGZ5oGj5oKr5oSG5oSN5oWd5oap5oad5oeL5oeR5oiG6IKA6IG/5rKT5rO25re855+255+456CA56CJ56CX56CY56CR5par56Ct56Cc56Cd56C556C656C756Cf56C856Cl56Cs56Cj56Cp56GO56Gt56GW56GX56Cm56GQ56GH56GM56Gq56Kb56KT56Ka56KH56Kc56Kh56Kj56Ky56K556Kl56OU56OZ56OJ56Os56Oy56SF56O056ST56Sk56Se56S06b6b6bu56bu76bu855ux55yE55yN55u555yH55yI55ya55yi55yZ55yt55ym55y155y4552Q552R552H552D552a552o77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzN10ubGVuZ3RoOyArK2opIGlmKERbMjM3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzN11bal1dID0gNjA2NzIgKyBqOyBkWzYwNjcyICsgal0gPSBEWzIzN11bal07fVxuXHREWzIzOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemgj+mgkOmgkemgkumgk+mglOmglemglumgl+mgmOmgmemgmumgm+mgnOmgnemgnumgn+mgoOmgoemgoumgo+mgpOmgpemgpumgp+mgqOmgqemgqumgq+mgrOmgremgrumgr+mgsOmgsemgsumgs+mgtOmgtemgtumgt+mguOmguemguumgu+mgvOmgvemgvumgv+mhgOmhgemhgumhg+mhhOmhhemhhumhh+mhiOmhiemhiumhi+mhjOmhje+/vemhjumhj+mhkOmhkemhkumhk+mhlOmhlemhlumhl+mhmOmhmemhmumhm+mhnOmhnemhnumhn+mhoOmhoemhoumho+mhpOmhpemhpumhp+mhqOmhqemhqumhq+mhrOmhremhruedouedpeedv+eejeedveeegOeejOeekeeen+eeoOeesOeeteeeveeUuueVgOeVjueVi+eViOeVm+eVsueVueeWg+e9mOe9oee9n+ipiOe9qOe9tOe9see9uee+gee9vuebjeebpeigsumShemShumSh+mSi+mSiumSjOmSjemSj+mSkOmSlOmSl+mSlemSmumSm+mSnOmSo+mSpOmSq+mSqumSremSrOmSr+mSsOmSsumStOmStumSt+mSuOmSuemSuumSvOmSvemSv+mThOmTiOmTiemTiumTi+mTjOmTjemTjumTkOmTkemTkumTlemTlumTl+mTmemTmOmTm+mTnumTn+mToOmToumTpOmTpemTp+mTqOmTqu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzhdLmxlbmd0aDsgKytqKSBpZihEWzIzOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzhdW2pdXSA9IDYwOTI4ICsgajsgZFs2MDkyOCArIGpdID0gRFsyMzhdW2pdO31cblx0RFsyMzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73poa/pobDpobHpobLpobPpobTpoovpoo7popLpopXpopnpoqPpoqjpoqnpoqrpoqvpoqzpoq3poq7poq/porDporHporLporPporTporXporbporfporjpornporrporvporzpor3por7por/po4Dpo4Hpo4Lpo4Ppo4Tpo4Xpo4bpo4fpo4jpo4npo4rpo4vpo4zpo43po4/po5Dpo5Tpo5bpo5fpo5vpo5zpo53po6Dpo6Hpo6Lpo6Ppo6Tvv73po6Xpo6bpo6npo6rpo6vpo6zpo63po67po6/po7Dpo7Hpo7Lpo7Ppo7Tpo7Xpo7bpo7fpo7jpo7npo7rpo7vpo7zpo73po77po7/ppIDppIHppILppIPppITppIXppIbppIfpk6npk6vpk67pk6/pk7Ppk7Tpk7Xpk7fpk7npk7zpk73pk7/plIPplILplIbplIfplInplIrplI3plI7plI/plJLplJPplJTplJXplJbplJjplJvplJ3plJ7plJ/plKLplKrplKvplKnplKzplLHplLLplLTplLbplLfplLjplLzplL7plL/plYLplLXplYTplYXplYbplYnplYzplY7plY/plZLplZPplZTplZbplZfplZjplZnplZvplZ7plZ/plZ3plaHplaLplaTplaXplabplafplajplanplarplavplazpla/plbHplbLplbPplLrnn6fnn6zpm4nnp5Xnp63np6Pnp6vnqIbltYfnqIPnqILnqJ7nqJTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM5XS5sZW5ndGg7ICsraikgaWYoRFsyMzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM5XVtqXV0gPSA2MTE4NCArIGo7IGRbNjExODQgKyBqXSA9IERbMjM5XVtqXTt9XG5cdERbMjQwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96aSI6aSJ6aSK6aSL6aSM6aSO6aSP6aSR6aSS6aST6aSU6aSV6aSW6aSX6aSY6aSZ6aSa6aSb6aSc6aSd6aSe6aSf6aSg6aSh6aSi6aSj6aSk6aSl6aSm6aSn6aSo6aSp6aSq6aSr6aSs6aSt6aSv6aSw6aSx6aSy6aSz6aS06aS16aS26aS36aS46aS56aS66aS76aS86aS96aS+6aS/6aWA6aWB6aWC6aWD6aWE6aWF6aWG6aWH6aWI6aWJ77+96aWK6aWL6aWM6aWN6aWO6aWP6aWQ6aWR6aWS6aWT6aWW6aWX6aWY6aWZ6aWa6aWb6aWc6aWd6aWe6aWf6aWg6aWh6aWi6aWk6aWm6aWz6aW46aW56aW76aW+6aaC6aaD6aaJ56i556i356mR6buP6aal56mw55qI55qO55qT55qZ55qk55Oe55Og55Ss6big6bii6bio6bip6biq6bir6bis6biy6bix6bi26bi46bi36bi56bi66bi+6bmB6bmC6bmE6bmG6bmH6bmI6bmJ6bmL6bmM6bmO6bmR6bmV6bmX6bma6bmb6bmc6bme6bmj6bmm6bmn6bmo6bmp6bmq6bmr6bms6bmx6bmt6bmz55aS55aU55aW55ag55ad55as55aj55az55a055a455eE55ax55aw55eD55eC55eW55eN55ej55eo55em55ek55er55en55iD55ex55e855e/55iQ55iA55iF55iM55iX55iK55il55iY55iV55iZ77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0MF0ubGVuZ3RoOyArK2opIGlmKERbMjQwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0MF1bal1dID0gNjE0NDAgKyBqOyBkWzYxNDQwICsgal0gPSBEWzI0MF1bal07fVxuXHREWzI0MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemmjOmmjummmummm+mmnOmmnemmnummn+mmoOmmoemmoummo+mmpOmmpummp+mmqemmqummq+mmrOmmremmrummr+mmsOmmsemmsumms+mmtOmmtemmtummt+mmuOmmuemmuummu+mmvOmmvemmvummv+mngOmngemngumng+mnhOmnhemnhumnh+mniOmniemniumni+mnjOmnjemnjumnj+mnkOmnkemnkumnk+mnlOmnlemnlumnl+mnmO+/vemnmemnmumnm+mnnOmnnemnnumnn+mnoOmnoemnoumno+mnpOmnpemnpumnp+mnqOmnqemnqumnq+mnrOmnremnrumnr+mnsOmnsemnsumns+mntOmntemntumnt+mnuOmnueeYm+eYvOeYoueYoOeZgOeYreeYsOeYv+eYteeZg+eYvueYs+eZjeeZnueZlOeZnOeZlueZq+eZr+e/iuerpuepuOepueeqgOeqhueqiOeqleeqpueqoOeqrOeqqOeqreeqs+ihpOihqeihsuihveihv+iiguiiouijhuiit+iivOijieijouijjuijo+ijpeijseikmuijvOijqOijvuijsOikoeikmeikk+ikm+ikiuiktOikq+iktuilgeilpuilu+eWi+iDpeeasueatOefnOiAkuiAlOiAluiAnOiAoOiAouiApeiApuiAp+iAqeiAqOiAseiAi+iAteiBg+iBhuiBjeiBkuiBqeiBseimg+mhuOmigOmig++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDFdLmxlbmd0aDsgKytqKSBpZihEWzI0MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDFdW2pdXSA9IDYxNjk2ICsgajsgZFs2MTY5NiArIGpdID0gRFsyNDFdW2pdO31cblx0RFsyNDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pp7rpp7vpp7zpp73pp77pp7/pqIDpqIHpqILpqIPpqITpqIXpqIbpqIfpqIjpqInpqIrpqIvpqIzpqI3pqI7pqI/pqJDpqJHpqJLpqJPpqJTpqJXpqJbpqJfpqJjpqJnpqJrpqJvpqJzpqJ3pqJ7pqJ/pqKDpqKHpqKLpqKPpqKTpqKXpqKbpqKfpqKjpqKnpqKrpqKvpqKzpqK3pqK7pqK/pqLDpqLHpqLLpqLPpqLTpqLXpqLbpqLfpqLjvv73pqLnpqLrpqLvpqLzpqL3pqL7pqL/pqYDpqYHpqYLpqYPpqYTpqYXpqYbpqYfpqYjpqYnpqYrpqYvpqYzpqY3pqY7pqY/pqZDpqZHpqZLpqZPpqZTpqZXpqZbpqZfpqZjpqZnpoonpoozpoo3poo/popTpoprpopvpop7pop/poqHpoqLpoqXpoqbomY3omZTomazoma7omb/ombrombzombvomqjomo3omovomqzomp3omqfomqPomqrompPomqnomrbom4TomrXom47omrDomrromrHomq/om4nom4/omrTom6nom7Hom7Lom63om7Pom5DonJPom57om7Tom5/om5jom5HonIPonIfom7jonIjonIronI3onInonKPonLvonJ7onKXonK7onJronL7onYjonLTonLHonKnonLfonL/onoLonKLonb3onb7onbvonaDonbDonYzona7onovonZPonaPonbzonaTonZnonaXonpPonq/onqjon5Lvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQyXS5sZW5ndGg7ICsraikgaWYoRFsyNDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQyXVtqXV0gPSA2MTk1MiArIGo7IGRbNjE5NTIgKyBqXSA9IERbMjQyXVtqXTt9XG5cdERbMjQzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ama6amb6amc6amd6ame6amf6amg6amh6ami6amj6amk6aml6amm6amn6amo6amp6amq6amr6amy6aqD6aqJ6aqN6aqO6aqU6aqV6aqZ6aqm6aqp6aqq6aqr6aqs6aqt6aqu6aqv6aqy6aqz6aq06aq16aq56aq76aq96aq+6aq/6auD6auE6auG6auH6auI6auJ6auK6auN6auO6auP6auQ6auS6auU6auV6auW6auX6auZ6aua6aub6auc77+96aud6aue6aug6aui6auj6auk6aul6aun6auo6aup6auq6aus6auu6auw6aux6auy6auz6au06au16au26au36au46au66au86au96au+6au/6ayA6ayB6ayC6ayE6ayF6ayG6J+G6J6I6J6F6J6t6J6X6J6D6J6r6J+l6J6s6J616J6z6J+L6J+T6J696J+R6J+A6J+K6J+b6J+q6J+g6J+u6KCW6KCT6J++6KCK6KCb6KCh6KC56KC857y2572C572E572F6IiQ56u656u956yI56yD56yE56yV56yK56yr56yP562H56y456yq56yZ56yu56yx56yg56yl56yk56yz56y+56ye562Y562a562F5621562M562d562g562u5627562i562y562x566Q566m566n5664566s566d566o566F566q566c566i566r566056+R56+B56+M56+d56+a56+l56+m56+q57CM56++56+857CP57CW57CL77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0M10ubGVuZ3RoOyArK2opIGlmKERbMjQzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0M11bal1dID0gNjIyMDggKyBqOyBkWzYyMjA4ICsgal0gPSBEWzI0M11bal07fVxuXHREWzI0NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemsh+msiemsiumsi+msjOmsjemsjumskOmskemskumslOmslemslumsl+msmOmsmemsmumsm+msnOmsnemsnumsoOmsoemsoumspOmspemspumsp+msqOmsqemsqumsq+msrOmsremsrumssOmssemss+mstOmstemstumst+msuOmsuemsuumsvemsvumsv+mtgOmthumtiumti+mtjOmtjumtkOmtkumtk+mtlemtlumtl+mtmOmtmemtmu+/vemtm+mtnOmtnemtnumtn+mtoOmtoemtoumto+mtpOmtpemtpumtp+mtqOmtqemtqumtq+mtrOmtremtrumtr+mtsOmtsemtsumts+mttOmttemttumtt+mtuOmtuemtuumtu+ewn+ewquewpuewuOexgeexgOiHvuiIgeiIguiIhOiHrOihhOiIoeiIouiIo+iIreiIr+iIqOiIq+iIuOiIu+iIs+iItOiIvuiJhOiJieiJi+iJj+iJmuiJn+iJqOihvuiiheiiiOijmOijn+ilnue+nee+n+e+p+e+r+e+sOe+suexvOaVieeykeeyneeynOeynueyoueysueyvOeyveezgeezh+ezjOezjeeziOezheezl+ezqOiJruaaqOe+v+e/jue/lee/pee/oee/pue/qee/rue/s+ezuOe1t+e2pue2rue5h+e6m+m6uOm6tOi1s+i2hOi2lOi2kei2sei1p+i1reixh+ixiemFiumFkOmFjumFj+mFpO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDRdLmxlbmd0aDsgKytqKSBpZihEWzI0NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDRdW2pdXSA9IDYyNDY0ICsgajsgZFs2MjQ2NCArIGpdID0gRFsyNDRdW2pdO31cblx0RFsyNDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73prbzprb3prb7prb/proDproHproLproPproTproXprobprofprojpronprorprovprozpro3pro7pro/prpDprpHprpLprpPprpTprpXprpbprpfprpjprpnprprprpvprpzprp3prp7prp/prqDprqHprqLprqPprqTprqXprqbprqfprqjprqnprqrprqvprqzprq3prq7prq/prrDprrHprrLprrPprrTprrXprrbprrfprrjprrnprrrvv73prrvprrzprr3prr7prr/pr4Dpr4Hpr4Lpr4Ppr4Tpr4Xpr4bpr4fpr4jpr4npr4rpr4vpr4zpr43pr47pr4/pr5Dpr5Hpr5Lpr5Ppr5Tpr5Xpr5bpr5fpr5jpr5npr5rpr5vphaLphaHphbDphanpha/phb3phb7phbLphbTphbnphozphoXphpDpho3phpHphqLphqPphqrphq3phq7phq/phrXphrTphrrosZXpub7otrjot6vouIXouZnouanotrXotr/otrzotrrot4Tot5bot5fot5rot57ot47ot4/ot5vot4bot6zot7fot7jot6Pot7not7vot6TouInot73ouJTouJ3ouJ/ouKzouK7ouKPouK/ouLrouYDouLnouLXouL3ouLHouYnouYHouYLouZHouZLouYroubDoubboubzoua/oubTouoXouo/oupToupDoupzoup7osbjosoLosorosoXospjospTmlpvop5bop57op5rop5zvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ1XS5sZW5ndGg7ICsraikgaWYoRFsyNDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ1XVtqXV0gPSA2MjcyMCArIGo7IGRbNjI3MjAgKyBqXSA9IERbMjQ1XVtqXTt9XG5cdERbMjQ2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96a+c6a+d6a+e6a+f6a+g6a+h6a+i6a+j6a+k6a+l6a+m6a+n6a+o6a+p6a+q6a+r6a+s6a+t6a+u6a+v6a+w6a+x6a+y6a+z6a+06a+16a+26a+36a+46a+56a+66a+76a+86a+96a++6a+/6bCA6bCB6bCC6bCD6bCE6bCF6bCG6bCH6bCI6bCJ6bCK6bCL6bCM6bCN6bCO6bCP6bCQ6bCR6bCS6bCT6bCU6bCV6bCW6bCX6bCY6bCZ6bCa77+96bCb6bCc6bCd6bCe6bCf6bCg6bCh6bCi6bCj6bCk6bCl6bCm6bCn6bCo6bCp6bCq6bCr6bCs6bCt6bCu6bCv6bCw6bCx6bCy6bCz6bC06bC16bC26bC36bC46bC56bC66bC76Kel6Ker6Kev6Ki+6Kym6Z2T6Zup6Zuz6Zuv6ZyG6ZyB6ZyI6ZyP6ZyO6Zyq6Zyt6Zyw6Zy+6b6A6b6D6b6F6b6G6b6H6b6I6b6J6b6K6b6M6bu+6byL6byN6Zq56Zq86Zq96ZuO6ZuS556/6Zug6YqO6Yqu6YuI6Yy+6Y2q6Y+K6Y6P6ZC+6ZGr6bG/6bKC6bKF6bKG6bKH6bKI56ij6bKL6bKO6bKQ6bKR6bKS6bKU6bKV6bKa6bKb6bKe6bKf6bKg6bKh6bKi6bKj6bKl6bKm6bKn6bKo6bKp6bKr6bKt6bKu6bKw6bKx6bKy6bKz6bK06bK16bK26bK36bK66bK76bK86bK96bOE6bOF6bOG6bOH6bOK6bOL77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0Nl0ubGVuZ3RoOyArK2opIGlmKERbMjQ2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0Nl1bal1dID0gNjI5NzYgKyBqOyBkWzYyOTc2ICsgal0gPSBEWzI0Nl1bal07fVxuXHREWzI0N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemwvOmwvemwvumwv+mxgOmxgemxgumxg+mxhOmxhemxhumxh+mxiOmxiemxiumxi+mxjOmxjemxjumxj+mxkOmxkemxkumxk+mxlOmxlemxlumxl+mxmOmxmemxmumxm+mxnOmxnemxnumxn+mxoOmxoemxoumxo+mxpOmxpemxpumxp+mxqOmxqemxqumxq+mxrOmxremxrumxr+mxsOmxsemxsumxs+mxtOmxtemxtumxt+mxuOmxuemxuu+/vemxu+mxvemxvumygOmyg+myhOmyiemyiumyjOmyj+myk+mylumyl+mymOmymemynemyqumyrOmyr+myuemyvumyv+mzgOmzgemzgumziOmziemzkemzkumzmumzm+mzoOmzoemzjOmzjemzjumzj+mzkOmzk+mzlOmzlemzl+mzmOmzmemznOmznemzn+mzoumdvOmehemekemekumelOmer+meq+meo+mesumetOmqsemqsOmqt+m5mOmqtumquumqvOmrgemrgOmrhemrgumri+mrjOmrkemthemtg+mth+mtiemtiOmtjemtkemjqOmkjemkrumllemllOmrn+mroemrpumrr+mrq+mru+mrremruemsiOmsj+msk+msn+mso+m6vem6vue4u+m6gum6h+m6iOm6i+m6kumPlum6nem6n+m7m+m7nOm7nem7oOm7n+m7oum7qem7p+m7pem7qum7r+m8oum8rOm8r+m8uem8t+m8vem8vum9hO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDddLmxlbmd0aDsgKytqKSBpZihEWzI0N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDddW2pdXSA9IDYzMjMyICsgajsgZFs2MzIzMiArIGpdID0gRFsyNDddW2pdO31cblx0RFsyNDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ps6Pps6Tps6Xps6bps6fps6jps6nps6rps6vps6zps63ps67ps6/ps7Dps7Hps7Lps7Pps7Tps7Xps7bps7fps7jps7nps7rps7vps7zps73ps77ps7/ptIDptIHptILptIPptITptIXptIbptIfptIjptInptIrptIvptIzptI3ptI7ptI/ptJDptJHptJLptJPptJTptJXptJbptJfptJjptJnptJrptJvptJzptJ3ptJ7ptJ/ptKDptKHvv73ptKLptKPptKTptKXptKbptKfptKjptKnptKrptKvptKzptK3ptK7ptK/ptLDptLHptLLptLPptLTptLXptLbptLfptLjptLnptLrptLvptLzptL3ptL7ptL/ptYDptYHptYLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ4XS5sZW5ndGg7ICsraikgaWYoRFsyNDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ4XVtqXV0gPSA2MzQ4OCArIGo7IGRbNjM0ODggKyBqXSA9IERbMjQ4XVtqXTt9XG5cdERbMjQ5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96bWD6bWE6bWF6bWG6bWH6bWI6bWJ6bWK6bWL6bWM6bWN6bWO6bWP6bWQ6bWR6bWS6bWT6bWU6bWV6bWW6bWX6bWY6bWZ6bWa6bWb6bWc6bWd6bWe6bWf6bWg6bWh6bWi6bWj6bWk6bWl6bWm6bWn6bWo6bWp6bWq6bWr6bWs6bWt6bWu6bWv6bWw6bWx6bWy6bWz6bW06bW16bW26bW36bW46bW56bW66bW76bW86bW96bW+6bW/6baA6baB77+96baC6baD6baE6baF6baG6baH6baI6baJ6baK6baL6baM6baN6baO6baP6baQ6baR6baS6baT6baU6baV6baW6baX6baY6baZ6baa6bab6bac6bad6bae6baf6bag6bah6bai77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0OV0ubGVuZ3RoOyArK2opIGlmKERbMjQ5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0OV1bal1dID0gNjM3NDQgKyBqOyBkWzYzNzQ0ICsgal0gPSBEWzI0OV1bal07fVxuXHREWzI1MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vem2o+m2pOm2pem2pum2p+m2qOm2qem2qum2q+m2rOm2rem2rum2r+m2sOm2sem2sum2s+m2tOm2tem2tum2t+m2uOm2uem2uum2u+m2vOm2vem2vum2v+m3gOm3gem3gum3g+m3hOm3hem3hum3h+m3iOm3iem3ium3i+m3jOm3jem3jum3j+m3kOm3kem3kum3k+m3lOm3lem3lum3l+m3mOm3mem3mum3m+m3nOm3nem3num3n+m3oOm3oe+/vem3oum3o+m3pOm3pem3pum3p+m3qOm3qem3qum3q+m3rOm3rem3rum3r+m3sOm3sem3sum3s+m3tOm3tem3tum3t+m3uOm3uem3uum3u+m3vOm3vem3vum3v+m4gOm4gem4gu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNTBdLmxlbmd0aDsgKytqKSBpZihEWzI1MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNTBdW2pdXSA9IDY0MDAwICsgajsgZFs2NDAwMCArIGpdID0gRFsyNTBdW2pdO31cblx0RFsyNTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73puIPpuITpuIXpuIbpuIfpuIjpuInpuIrpuIvpuIzpuI3puI7puI/puJDpuJHpuJLpuJPpuJTpuJXpuJbpuJfpuJjpuJnpuJrpuJvpuJzpuJ3puJ7puKTpuKfpuK7puLDpuLTpuLvpuLzpuYDpuY3puZDpuZLpuZPpuZTpuZbpuZnpuZ3puZ/puaDpuaHpuaLpuaXpua7pua/pubLpubTpubXpubbpubfpubjpubnpubrpubvpubzpub3puoDvv73puoHpuoPpuoTpuoXpuobpuonpuorpuozpuo3puo7puo/pupDpupHpupTpupXpupbpupfpupjpupnpuprpupvpupzpup7puqDpuqHpuqLpuqPpuqTpuqXpuqfpuqjpuqnpuqrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjUxXS5sZW5ndGg7ICsraikgaWYoRFsyNTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjUxXVtqXV0gPSA2NDI1NiArIGo7IGRbNjQyNTYgKyBqXSA9IERbMjUxXVtqXTt9XG5cdERbMjUyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96bqr6bqs6bqt6bqu6bqv6bqw6bqx6bqy6bqz6bq16bq26bq36bq56bq66bq86bq/6buA6buB6buC6buD6buF6buG6buH6buI6buK6buL6buM6buQ6buS6buT6buV6buW6buX6buZ6bua6bue6buh6buj6buk6bum6buo6bur6bus6but6buu6buw6bux6buy6buz6bu06bu16bu26bu36bu46bu66bu96bu/6byA6byB6byC6byD6byE6byF77+96byG6byH6byI6byJ6byK6byM6byP6byR6byS6byU6byV6byW6byY6bya6byb6byc6byd6bye6byf6byh6byj6byk6byl6bym6byn6byo6byp6byq6byr6byt6byu6byw6byx77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI1Ml0ubGVuZ3RoOyArK2opIGlmKERbMjUyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI1Ml1bal1dID0gNjQ1MTIgKyBqOyBkWzY0NTEyICsgal0gPSBEWzI1Ml1bal07fVxuXHREWzI1M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vem8sum8s+m8tOm8tem8tum8uOm8uum8vOm8v+m9gOm9gem9gum9g+m9hem9hum9h+m9iOm9iem9ium9i+m9jOm9jem9jum9j+m9kum9k+m9lOm9lem9lum9l+m9mOm9mem9mum9m+m9nOm9nem9num9n+m9oOm9oem9oum9o+m9pOm9pem9pum9p+m9qOm9qem9qum9q+m9rOm9rem9rum9r+m9sOm9sem9sum9s+m9tOm9tem9tum9t+m9uO+/vem9uem9uum9u+m9vOm9vem9vum+gem+gum+jem+jum+j+m+kOm+kem+kum+k+m+lOm+lem+lum+l+m+mOm+nOm+nem+num+oem+oum+o+m+pOm+pe+krO+lue+mle+np++nse+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNTNdLmxlbmd0aDsgKytqKSBpZihEWzI1M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNTNdW2pdXSA9IDY0NzY4ICsgajsgZFs2NDc2OCArIGpdID0gRFsyNTNdW2pdO31cblx0RFsyNTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vqIzvqI3vqI7vqI/vqJHvqJPvqJTvqJjvqJ/vqKDvqKHvqKPvqKTvqKfvqKjvqKnvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjU0XS5sZW5ndGg7ICsraikgaWYoRFsyNTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjU0XVtqXV0gPSA2NTAyNCArIGo7IGRbNjUwMjQgKyBqXSA9IERbMjU0XVtqXTt9XG5cdHJldHVybiB7XCJlbmNcIjogZSwgXCJkZWNcIjogZCB9OyB9KSgpO1xuXHRjcHRhYmxlWzk0OV0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBbXSwgZSA9IHt9LCBEID0gW10sIGo7XG5cdERbMF0gPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFswXS5sZW5ndGg7ICsraikgaWYoRFswXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzBdW2pdXSA9IDAgKyBqOyBkWzAgKyBqXSA9IERbMF1bal07fVxuXHREWzEyOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veqwguqwg+qwheqwhuqwi+qwjOqwjeqwjuqwj+qwmOqwnuqwn+qwoeqwouqwo+qwpeqwpuqwp+qwqOqwqeqwquqwq+qwruqwsuqws+qwtO+/ve+/ve+/ve+/ve+/ve+/veqwteqwtuqwt+qwuuqwu+qwveqwvuqwv+qxgeqxguqxg+qxhOqxheqxhuqxh+qxiOqxieqxiuqxjOqxjuqxj+qxkOqxkeqxkuqxk+qxle+/ve+/ve+/ve+/ve+/ve+/veqxluqxl+qxmeqxmuqxm+qxneqxnuqxn+qxoOqxoeqxouqxo+qxpOqxpeqxpuqxp+qxqOqxqeqxquqxq+qxrOqxreqxruqxr+qxsuqxs+qxteqxtuqxueqxu+qxvOqxveqxvuqxv+qyguqyh+qyiOqyjeqyjuqyj+qykeqykuqyk+qyleqyluqyl+qymOqymeqymuqym+qynuqyouqyo+qypOqypeqypuqyp+qyq+qyreqyruqyseqysuqys+qytOqyteqytuqyt+qyuuqyvuqyv+qzgOqzguqzg+qzheqzhuqzh+qzieqziuqzi+qzjeqzjuqzj+qzkOqzkeqzkuqzk+qzlOqzluqzmOqzmeqzmuqzm+qznOqzneqznuqzn+qzouqzo+qzpeqzpuqzqeqzq+qzreqzruqzsuqztOqzt+qzuOqzueqzuuqzu+qzvuqzv+q0geq0guq0g+q0heq0h+q0iOq0ieq0iuq0i+q0juq0kOq0kuq0k++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMjldLmxlbmd0aDsgKytqKSBpZihEWzEyOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMjldW2pdXSA9IDMzMDI0ICsgajsgZFszMzAyNCArIGpdID0gRFsxMjldW2pdO31cblx0RFsxMzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73qtJTqtJXqtJbqtJfqtJnqtJrqtJvqtJ3qtJ7qtJ/qtKHqtKLqtKPqtKTqtKXqtKbqtKfqtKjqtKrqtKvqtK7qtK/qtLDqtLHqtLLqtLPvv73vv73vv73vv73vv73vv73qtLbqtLfqtLnqtLrqtLvqtL3qtL7qtL/qtYDqtYHqtYLqtYPqtYbqtYjqtYrqtYvqtYzqtY3qtY7qtY/qtZHqtZLqtZPqtZXqtZbqtZfvv73vv73vv73vv73vv73vv73qtZnqtZrqtZvqtZzqtZ3qtZ7qtZ/qtaDqtaLqtaTqtaXqtabqtafqtajqtanqtarqtavqta7qta/qtbHqtbLqtbfqtbjqtbnqtbrqtb7qtoDqtoPqtoTqtoXqtobqtofqtorqtovqto3qto7qto/qtpHqtpLqtpPqtpTqtpXqtpbqtpfqtpjqtpnqtprqtpvqtp7qtp/qtqDqtqHqtqLqtqPqtqXqtqbqtqfqtqjqtqnqtqrqtqvqtqzqtq3qtq7qtq/qtrDqtrHqtrLqtrPqtrTqtrXqtrbqtrjqtrnqtrrqtrvqtrzqtr3qtr7qtr/qt4Lqt4Pqt4Xqt4bqt4fqt4nqt4rqt4vqt4zqt43qt47qt4/qt5Lqt5Tqt5Xqt5bqt5fqt5jqt5nqt5rqt5vqt53qt57qt5/qt6Hqt6Lqt6Pqt6Xqt6bqt6fqt6jqt6nqt6rqt6vqt6zqt63qt67qt6/qt7Dqt7Hqt7Lqt7Pqt7Tqt7Xqt7bqt7fvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTMwXS5sZW5ndGg7ICsraikgaWYoRFsxMzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTMwXVtqXV0gPSAzMzI4MCArIGo7IGRbMzMyODAgKyBqXSA9IERbMTMwXVtqXTt9XG5cdERbMTMxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96re66re76re96re+6riC6riD6riE6riF6riG6riH6riK6riM6riO6riP6riQ6riR6riS6riT6riV6riW6riX6riY6riZ6ria6rib6ric77+977+977+977+977+977+96rid6rie6rif6rig6rih6rii6rij6rik6ril6rim6rin6rio6rip6riq6rir6ris6rit6riu6riv6riy6riz6ri16ri26ri56ri76ri877+977+977+977+977+977+96ri96ri+6ri/6rmC6rmE6rmH6rmI6rmJ6rmL6rmP6rmR6rmS6rmT6rmV6rmX6rmY6rmZ6rma6rmb6rme6rmi6rmj6rmk6rmm6rmn6rmq6rmr6rmt6rmu6rmv6rmx6rmy6rmz6rm06rm16rm26rm36rm66rm+6rm/6rqA6rqB6rqC6rqD6rqG6rqH6rqI6rqJ6rqK6rqL6rqN6rqO6rqP6rqQ6rqR6rqS6rqT6rqU6rqV6rqW6rqX6rqY6rqZ6rqa6rqb6rqc6rqd6rqe6rqf6rqg6rqh6rqi6rqj6rqk6rql6rqm6rqn6rqo6rqp6rqq6rqr6rqs6rqt6rqu6rqv6rqw6rqx6rqy6rqz6rq06rq16rq26rq36rq46rq56rq66rq76rq/6ruB6ruC6ruD6ruF6ruG6ruH6ruI6ruJ6ruK6ruL6ruO6ruS6ruT6ruU6ruV6ruW6ruX6rua6rub6rud6rue6ruf6rug6ruh6rui6ruj6ruk6rul77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzMV0ubGVuZ3RoOyArK2opIGlmKERbMTMxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzMV1bal1dID0gMzM1MzYgKyBqOyBkWzMzNTM2ICsgal0gPSBEWzEzMV1bal07fVxuXHREWzEzMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veq7puq7p+q7qeq7quq7rOq7ruq7r+q7sOq7seq7suq7s+q7teq7tuq7t+q7ueq7uuq7u+q7veq7vuq7v+q8gOq8geq8guq8g+q8hOq8he+/ve+/ve+/ve+/ve+/ve+/veq8huq8ieq8iuq8i+q8jOq8juq8j+q8keq8kuq8k+q8lOq8leq8luq8l+q8mOq8meq8muq8m+q8nOq8neq8nuq8n+q8oOq8oeq8ouq8o++/ve+/ve+/ve+/ve+/ve+/veq8pOq8peq8puq8p+q8qOq8qeq8quq8q+q8ruq8r+q8seq8s+q8teq8tuq8t+q8uOq8ueq8uuq8u+q8vuq9gOq9hOq9heq9huq9h+q9iuq9i+q9jOq9jeq9juq9j+q9keq9kuq9k+q9lOq9leq9luq9l+q9mOq9meq9muq9m+q9nuq9n+q9oOq9oeq9ouq9o+q9puq9p+q9qOq9qeq9quq9q+q9rOq9req9ruq9r+q9sOq9seq9suq9s+q9tOq9teq9tuq9t+q9uOq9uuq9u+q9vOq9veq9vuq9v+q+geq+guq+g+q+heq+huq+h+q+ieq+iuq+i+q+jOq+jeq+juq+j+q+kuq+k+q+lOq+luq+l+q+mOq+meq+muq+m+q+neq+nuq+n+q+oOq+oeq+ouq+o+q+pOq+peq+puq+p+q+qOq+qeq+quq+q+q+rOq+req+ruq+r+q+sOq+seq+suq+s+q+tOq+teq+tuq+t+q+uuq+u+q+veq+vu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzJdLmxlbmd0aDsgKytqKSBpZihEWzEzMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzJdW2pdXSA9IDMzNzkyICsgajsgZFszMzc5MiArIGpdID0gRFsxMzJdW2pdO31cblx0RFsxMzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73qvr/qv4Hqv4Lqv4Pqv4Tqv4Xqv4bqv4rqv4zqv4/qv5Dqv5Hqv5Lqv5Pqv5Xqv5bqv5fqv5jqv5nqv5rqv5vqv53qv57qv5/qv6Dqv6Hvv73vv73vv73vv73vv73vv73qv6Lqv6Pqv6Tqv6Xqv6bqv6fqv6rqv6vqv6zqv63qv67qv6/qv7Lqv7Pqv7Xqv7bqv7fqv7nqv7rqv7vqv7zqv73qv77qv7/rgILrgIPvv73vv73vv73vv73vv73vv73rgIXrgIbrgIfrgIjrgInrgIrrgIvrgI3rgI7rgI/rgJHrgJLrgJPrgJXrgJbrgJfrgJjrgJnrgJrrgJvrgJ7rgJ/rgKDrgKHrgKLrgKPrgKTrgKXrgKbrgKfrgKnrgKrrgKvrgKzrgK3rgK7rgK/rgLDrgLHrgLLrgLPrgLTrgLXrgLbrgLfrgLjrgLnrgLrrgLvrgLzrgL3rgL7rgL/rgYDrgYHrgYLrgYPrgYbrgYfrgYnrgYvrgY3rgY/rgZDrgZHrgZLrgZbrgZjrgZrrgZvrgZzrgZ7rgZ/rgaDrgaHrgaLrgaPrgaTrgaXrgabrgafrgajrganrgarrgavrgazrga3rga7rga/rgbDrgbHrgbLrgbPrgbTrgbXrgbbrgbfrgbjrgbnrgbrrgbvrgb7rgb/rgoHrgoLrgoPrgoXrgobrgofrgojrgonrgorrgovrgo7rgpDrgpLrgpPrgpTrgpXrgpbrgpfrgpvrgp3rgp7rgqPrgqTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTMzXS5sZW5ndGg7ICsraikgaWYoRFsxMzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTMzXVtqXV0gPSAzNDA0OCArIGo7IGRbMzQwNDggKyBqXSA9IERbMTMzXVtqXTt9XG5cdERbMTM0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+964Kl64Km64Kn64Kq64Kw64Ky64K264K364K564K664K764K964K+64K/64OA64OB64OC64OD64OG64OK64OL64OM64ON64OO64OP64OS77+977+977+977+977+977+964OT64OV64OW64OX64OZ64Oa64Ob64Oc64Od64Oe64Of64Oh64Oi64Oj64Ok64Om64On64Oo64Op64Oq64Or64Os64Ot64Ou64Ov64Ow77+977+977+977+977+977+964Ox64Oy64Oz64O064O164O264O364O464O564O664O764O864O964O+64O/64SA64SB64SC64SD64SE64SF64SG64SH64SK64SN64SO64SP64SR64SU64SV64SW64SX64Sa64Se64Sf64Sg64Sh64Si64Sm64Sn64Sp64Sq64Sr64St64Su64Sv64Sw64Sx64Sy64Sz64S264S664S764S864S964S+64S/64WC64WD64WF64WG64WH64WJ64WK64WL64WM64WN64WO64WP64WS64WT64WW64WX64WZ64Wa64Wb64Wd64We64Wf64Wh64Wi64Wj64Wk64Wl64Wm64Wn64Wo64Wp64Wq64Wr64Ws64Wt64Wu64Wv64Ww64Wx64Wy64Wz64W064W164W264W364W664W764W964W+64W/64aB64aD64aE64aF64aG64aH64aK64aM64aO64aP64aQ64aR64aV64aW64aX64aZ64aa64ab64ad77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzNF0ubGVuZ3RoOyArK2opIGlmKERbMTM0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzNF1bal1dID0gMzQzMDQgKyBqOyBkWzM0MzA0ICsgal0gPSBEWzEzNF1bal07fVxuXHREWzEzNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veuGnuuGn+uGoOuGoeuGouuGo+uGpOuGpeuGpuuGp+uGqeuGquuGq+uGrOuGreuGruuGr+uGsOuGseuGsuuGs+uGtOuGteuGtuuGt+uGuO+/ve+/ve+/ve+/ve+/ve+/veuGueuGuuuGu+uGvOuGveuGvuuGv+uHgOuHgeuHguuHg+uHhOuHheuHhuuHh+uHiOuHieuHiuuHi+uHjeuHjuuHj+uHkeuHkuuHk+uHle+/ve+/ve+/ve+/ve+/ve+/veuHluuHl+uHmOuHmeuHmuuHm+uHnuuHoOuHoeuHouuHo+uHpOuHpeuHpuuHp+uHquuHq+uHreuHruuHr+uHseuHsuuHs+uHtOuHteuHtuuHt+uHuOuHuuuHvOuHvuuHv+uIgOuIgeuIguuIg+uIhuuIh+uIieuIiuuIjeuIjuuIj+uIkOuIkeuIkuuIk+uIluuImOuImuuIm+uInOuIneuInuuIn+uIoeuIouuIo+uIpOuIpeuIpuuIp+uIqOuIqeuIquuIq+uIrOuIreuIruuIr+uIsOuIseuIsuuIs+uIteuItuuIt+uIuOuIueuIuuuIu+uIveuIvuuIv+uJgOuJgeuJguuJg+uJhOuJheuJhuuJh+uJiOuJieuJiuuJi+uJjOuJjeuJjuuJj+uJkOuJkeuJkuuJk+uJlOuJleuJluuJl+uJmeuJmuuJm+uJneuJnuuJn+uJoeuJouuJo+uJpOuJpeuJpuuJp+uJquuJq+uJrOuJreuJru+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzVdLmxlbmd0aDsgKytqKSBpZihEWzEzNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzVdW2pdXSA9IDM0NTYwICsgajsgZFszNDU2MCArIGpdID0gRFsxMzVdW2pdO31cblx0RFsxMzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ria/ribDribHribLribPribbribfribjribnribrribvrib3rib7rib/rioDrioHrioLrioPriobriofriojriorriovriozrio3rio7vv73vv73vv73vv73vv73vv73rio/ripLripPripXripbripfripvripzrip3rip7rip/riqLriqTriqfriqjriqnriqvriq3riq7riq/rirHrirLrirPrirXrirbrirfvv73vv73vv73vv73vv73vv73rirjrirnrirrrirvrirzrir3rir7rir/ri4Dri4Hri4Lri4Pri4Tri4Xri4bri4fri4rri4vri43ri47ri4/ri5Hri5Pri5Tri5Xri5bri5fri5rri5zri57ri5/ri6Dri6Hri6Pri6fri6nri6rri7Dri7Hri7Lri7bri7zri73ri77rjILrjIPrjIXrjIbrjIfrjInrjIrrjIvrjIzrjI3rjI7rjI/rjJLrjJbrjJfrjJjrjJnrjJrrjJvrjJ3rjJ7rjJ/rjKDrjKHrjKLrjKPrjKTrjKXrjKbrjKfrjKjrjKnrjKrrjKvrjKzrjK3rjK7rjK/rjLDrjLHrjLLrjLPrjLTrjLXrjLbrjLfrjLjrjLnrjLrrjLvrjLzrjL3rjL7rjL/rjYDrjYHrjYLrjYPrjYTrjYXrjYbrjYfrjYjrjYnrjYrrjYvrjYzrjY3rjY7rjY/rjZDrjZHrjZLrjZPrjZfrjZnrjZrrjZ3rjaDrjaHrjaLrjaPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM2XS5sZW5ndGg7ICsraikgaWYoRFsxMzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM2XVtqXV0gPSAzNDgxNiArIGo7IGRbMzQ4MTYgKyBqXSA9IERbMTM2XVtqXTt9XG5cdERbMTM3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9642m642o642q642s642t642v642y642z64216422642364256426642764286429642+642/646C646G646H646I646J646K646L646N77+977+977+977+977+977+9646O646P646R646S646T646V646W646X646Y646Z646a646b646c646d646e646f646i646j646k646l646m646n646p646q646r646t77+977+977+977+977+977+9646u646v646w646x646y646z6460646164626463646464656466646764686469646+646/64+A64+B64+C64+D64+G64+H64+J64+K64+N64+P64+R64+S64+T64+W64+Y64+a64+c64+e64+f64+h64+i64+j64+l64+m64+n64+p64+q64+r64+s64+t64+u64+v64+w64+x64+y64+z64+064+164+264+364+464+564+664+764+964++64+/65CA65CB65CC65CD65CE65CF65CG65CH65CI65CJ65CK65CL65CM65CN65CO65CP65CR65CS65CT65CU65CV65CW65CX65CZ65Ca65Cb65Cd65Ce65Cf65Ch65Ci65Cj65Ck65Cl65Cm65Cn65Cq65Cs65Ct65Cu65Cv65Cw65Cx65Cy65Cz65C165C265C365C465C565C665C765C865C965C+65C/65GA65GB65GC65GD65GE77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzEzN10ubGVuZ3RoOyArK2opIGlmKERbMTM3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzEzN11bal1dID0gMzUwNzIgKyBqOyBkWzM1MDcyICsgal0gPSBEWzEzN11bal07fVxuXHREWzEzOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veuRheuRhuuRh+uRiOuRieuRiuuRi+uRjOuRjeuRjuuRj+uRkuuRk+uRleuRluuRl+uRmeuRmuuRm+uRnOuRneuRnuuRn+uRouuRpOuRpu+/ve+/ve+/ve+/ve+/ve+/veuRp+uRqOuRqeuRquuRq+uRreuRruuRr+uRsOuRseuRsuuRs+uRtOuRteuRtuuRt+uRuOuRueuRuuuRu+uRvOuRveuRvuuRv+uSgeuSgu+/ve+/ve+/ve+/ve+/ve+/veuSg+uShOuSheuShuuSh+uSieuSiuuSi+uSjOuSjeuSjuuSj+uSkOuSkeuSkuuSk+uSlOuSleuSluuSl+uSmOuSmeuSmuuSm+uSnOuSnuuSn+uSoOuSoeuSouuSo+uSpeuSpuuSp+uSqeuSquuSq+uSreuSruuSr+uSsOuSseuSsuuSs+uStOuStuuSuOuSuuuSu+uSvOuSveuSvuuSv+uTgeuTguuTg+uTheuThuuTh+uTieuTiuuTi+uTjOuTjeuTjuuTj+uTkeuTkuuTk+uTlOuTluuTl+uTmOuTmeuTmuuTm+uTnuuTn+uToeuTouuTpeuTp+uTqOuTqeuTquuTq+uTruuTsOuTsuuTs+uTtOuTteuTtuuTt+uTueuTuuuTu+uTvOuTveuTvuuTv+uUgOuUgeuUguuUg+uUhOuUheuUhuuUh+uUiOuUieuUiuuUi+uUjOuUjeuUjuuUj+uUkOuUkeuUkuuUk+uUluuUl+uUmeuUmuuUne+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxMzhdLmxlbmd0aDsgKytqKSBpZihEWzEzOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxMzhdW2pdXSA9IDM1MzI4ICsgajsgZFszNTMyOCArIGpdID0gRFsxMzhdW2pdO31cblx0RFsxMzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73rlJ7rlJ/rlKDrlKHrlKLrlKPrlKbrlKvrlKzrlK3rlK7rlK/rlLLrlLPrlLXrlLbrlLfrlLnrlLrrlLvrlLzrlL3rlL7rlL/rlYLrlYbvv73vv73vv73vv73vv73vv73rlYfrlYjrlYnrlYrrlY7rlY/rlZHrlZLrlZPrlZXrlZbrlZfrlZjrlZnrlZrrlZvrlZ7rlaLrlaPrlaTrlaXrlabrlafrlajrlanrlarvv73vv73vv73vv73vv73vv73rlavrlazrla3rla7rla/rlbDrlbHrlbLrlbPrlbTrlbXrlbbrlbfrlbjrlbnrlbrrlbvrlbzrlb3rlb7rlb/rloDrloHrloLrloPrloTrloXrlobrlofrlojrlonrlorrlovrlozrlo3rlo7rlo/rlpDrlpHrlpLrlpPrlpTrlpXrlpbrlpfrlpjrlpnrlprrlpvrlpzrlp3rlp7rlp/rlqLrlqPrlqXrlqbrlqfrlqnrlqzrlq3rlq7rlq/rlrLrlrbrlrfrlrjrlrnrlrrrlr7rlr/rl4Hrl4Lrl4Prl4Xrl4brl4frl4jrl4nrl4rrl4vrl47rl5Lrl5Prl5Trl5Xrl5brl5frl5nrl5rrl5vrl5zrl53rl57rl5/rl6Drl6Hrl6Lrl6Prl6Trl6Xrl6brl6frl6jrl6nrl6rrl6vrl63rl67rl6/rl7Drl7Hrl7Lrl7Prl7Trl7Xrl7brl7frl7jrl7nrl7rrl7vrl7zrl73rl77rl7/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTM5XS5sZW5ndGg7ICsraikgaWYoRFsxMzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTM5XVtqXV0gPSAzNTU4NCArIGo7IGRbMzU1ODQgKyBqXSA9IERbMTM5XVtqXTt9XG5cdERbMTQwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+965iA65iB65iC65iD65iE65iF65iG65iH65iI65iJ65iK65iL65iM65iN65iO65iP65iS65iT65iV65iW65iX65iZ65ia65ib65ic65id77+977+977+977+977+977+965ie65if65ig65ih65ii65ij65ik65im65in65io65ip65iq65ir65it65iu65iv65iw65ix65iy65iz65i165i265i365i465i565i677+977+977+977+977+977+965i765i865i965i+65i/65mA65mB65mC65mD65mE65mF65mG65mH65mJ65mK65mL65mM65mN65mO65mP65mQ65mR65mS65mT65mU65mV65mW65mX65mY65mZ65ma65mb65mc65md65me65mf65mg65mh65mi65mj65ml65mm65mn65mp65mq65mr65ms65mt65mu65mv65mw65mx65my65mz65m065m165m265m365m465m565m665m765m865m965m+65m/65qA65qB65qC65qD65qE65qF65qG65qH65qI65qJ65qK65qL65qM65qN65qO65qP65qQ65qR65qS65qT65qU65qV65qW65qX65qY65qZ65qa65qb65qe65qf65qh65qi65qj65ql65qm65qn65qo65qp65qq65qt65qu65qv65qw65qy65qz65q065q165q265q365q465q565q665q765q865q965q+65q/65uA65uB65uC77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0MF0ubGVuZ3RoOyArK2opIGlmKERbMTQwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0MF1bal1dID0gMzU4NDAgKyBqOyBkWzM1ODQwICsgal0gPSBEWzE0MF1bal07fVxuXHREWzE0MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veubg+ubhOubheubhuubh+ubiOubieubiuubi+ubjOubjeubjuubj+ubkOubkeubkuubk+ubleubluubl+ubmOubmeubmuubm+ubnOubne+/ve+/ve+/ve+/ve+/ve+/veubnuubn+uboOuboeubouubo+ubpOubpeubpuubp+ubqOubqeubquubq+ubrOubreubruubr+ubseubsuubs+ubteubtuubt+ubueubuu+/ve+/ve+/ve+/ve+/ve+/veubu+ubvOubveubvuubv+ucguucg+uchOuchuuch+uciOucieuciuuci+ucjOucjeucjuucj+uckOuckeuckuuck+uclOucleucluucl+ucmOucmeucmuucm+ucnOucneucnuucn+ucoOucoeucouuco+ucpOucpeucpuucp+ucquucq+ucreucruucseucsuucs+uctOucteuctuuct+ucuuucvOucveucvuucv+udgOudgeudguudg+udheudhuudh+udieudiuudi+udjeudjuudj+udkOudkeudkuudk+udluudl+udmOudmeudmuudm+udnOudneudnuudn+udoeudouudo+udpeudpuudp+udqeudquudq+udrOudreudruudr+udsuudtOudtuudt+uduOudueuduuudu+udvuudv+uegeueguueg+ueheuehuueh+ueiOueieueiuuei+uejuuek+uelOueleuemuuem+ueneuenu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDFdLmxlbmd0aDsgKytqKSBpZihEWzE0MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDFdW2pdXSA9IDM2MDk2ICsgajsgZFszNjA5NiArIGpdID0gRFsxNDFdW2pdO31cblx0RFsxNDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73rnp/rnqHrnqLrnqPrnqTrnqXrnqbrnqfrnqrrnq7rnq/rnrDrnrHrnrLrnrPrnrbrnrfrnrnrnrrrnrvrnrzrnr3rnr7rnr/rn4Drn4Hvv73vv73vv73vv73vv73vv73rn4Lrn4Prn4Trn4Xrn4brn4jrn4rrn4vrn4zrn43rn47rn4/rn5Drn5Hrn5Lrn5Prn5Trn5Xrn5brn5frn5jrn5nrn5rrn5vrn5zrn53vv73vv73vv73vv73vv73vv73rn57rn5/rn6Drn6Hrn6Lrn6Prn6Trn6Xrn6brn6frn6jrn6nrn6rrn6vrn67rn6/rn7Hrn7Lrn7Prn7Xrn7brn7frn7jrn7nrn7rrn7vrn77roILroIProITroIXroIbroIrroIvroI3roI7roI/roJHroJLroJProJTroJXroJbroJfroJrroJzroJ7roJ/roKDroKHroKLroKProKbroKfroKnroKrroKvroK3roK7roK/roLDroLHroLLroLProLbroLrroLvroLzroL3roL7roL/roYHroYLroYProYXroYbroYfroYjroYnroYrroYvroYzroY3roY7roY/roZDroZLroZTroZXroZbroZfroZjroZnroZrroZvroZ7roZ/roaHroaLroaProaXroabroafroajroanroarroavroa7robDrobLrobProbTrobXrobbrobfrobnrobrrobvrob3rob7rob/rooDrooHrooLrooProoTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQyXS5sZW5ndGg7ICsraikgaWYoRFsxNDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQyXVtqXV0gPSAzNjM1MiArIGo7IGRbMzYzNTIgKyBqXSA9IERbMTQyXVtqXTt9XG5cdERbMTQzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+966KF66KG66KH66KI66KJ66KK66KL66KM66KO66KP66KQ66KR66KS66KT66KU66KV66KW66KX66KY66KZ66Ka66Kb66Kc66Kd66Ke66Kf77+977+977+977+977+977+966Kg66Kh66Ki66Kj66Kk66Kl66Km66Kn66Kp66Kq66Kr66Ks66Kt66Ku66Kv66Kx66Ky66Kz66K166K266K366K566K666K766K866K977+977+977+977+977+977+966K+66K/66OC66OE66OG66OH66OI66OJ66OK66OL66ON66OO66OP66OR66OS66OT66OV66OW66OX66OY66OZ66Oa66Ob66Oc66Oe66Og66Oi66Oj66Ok66Ol66Om66On66Oq66Or66Ot66Ou66Ov66Ox66Oy66Oz66O066O166O266O366O666O866O+66O/66SA66SB66SC66SD66SF66SG66SH66SI66SJ66SK66SL66SM66SN66SO66SP66SQ66SR66SS66ST66SU66SV66SW66SX66SZ66Sa66Sb66Sc66Sd66Se66Sf66Sh66Si66Sj66Sk66Sl66Sm66Sn66So66Sp66Sq66Sr66Ss66St66Su66Sv66Sw66Sx66Sy66Sz66S066S166S266S366S466S566S666S766S+66S/66WB66WC66WD66WF66WG66WH66WI66WJ66WK66WL66WN66WO66WQ66WS66WT66WU66WV66WW66WX77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0M10ubGVuZ3RoOyArK2opIGlmKERbMTQzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0M11bal1dID0gMzY2MDggKyBqOyBkWzM2NjA4ICsgal0gPSBEWzE0M11bal07fVxuXHREWzE0NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veulmuulm+ulneulnuuln+uloeulouulo+ulpOulpeulpuulp+ulquulrOulruulr+ulsOulseulsuuls+ultuult+ulueuluuulu+ulve+/ve+/ve+/ve+/ve+/ve+/veulvuulv+umgOumgeumguumg+umhuumiOumi+umjOumj+umkOumkeumkuumk+umlOumleumluuml+ummOummeummuumm+umnOumneumnu+/ve+/ve+/ve+/ve+/ve+/veumn+umoOumoeumouumo+umpOumpeumpuump+umqOumqeumquumq+umruumr+umseumsuums+umteumtuumt+umuOumueumuuumu+umvuungOunguung+unhOunheunhuunh+uniuuni+unjeunk+unlOunleunluunl+unmuunnOunn+unoOunouunpuunp+unqeunquunq+unreunruunr+unsOunseunsuuns+untuunu+unvOunveunvuunv+uoguuog+uohOuoheuohuuoh+uoieuoiuuoi+uojOuojeuojuuoj+uokOuokeuokuuok+uolOuoluuol+uomOuomeuomuuom+uonOuoneuonuuon+uooOuooeuoouuoo+uopOuopeuopuuop+uoqOuoqeuoquuoq+uorOuoreuoruuor+uosOuoseuosuuos+uotOuoteuotuuot+uouuuou+uoveuovuuov+upgeupg+uphOupheuphu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDRdLmxlbmd0aDsgKytqKSBpZihEWzE0NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDRdW2pdXSA9IDM2ODY0ICsgajsgZFszNjg2NCArIGpdID0gRFsxNDRdW2pdO31cblx0RFsxNDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73rqYfrqYrrqYzrqY/rqZDrqZHrqZLrqZbrqZfrqZnrqZrrqZvrqZ3rqZ7rqZ/rqaDrqaHrqaLrqaPrqabrqarrqavrqazrqa3rqa7rqa/vv73vv73vv73vv73vv73vv73rqbLrqbPrqbXrqbbrqbfrqbnrqbrrqbvrqbzrqb3rqb7rqb/rqoDrqoHrqoLrqobrqojrqonrqorrqovrqo3rqo7rqo/rqpDrqpHrqpLvv73vv73vv73vv73vv73vv73rqpPrqpTrqpXrqpbrqpfrqpjrqpnrqprrqpvrqpzrqp3rqp7rqp/rqqDrqqHrqqLrqqPrqqTrqqXrqqbrqqfrqqrrqq3rqq7rqq/rqrHrqrPrqrTrqrXrqrbrqrfrqrrrqrzrqr7rqr/rq4Drq4Hrq4Lrq4Prq4Xrq4brq4frq4nrq4rrq4vrq4zrq43rq47rq4/rq5Drq5Hrq5Lrq5Prq5Trq5Xrq5brq5frq5rrq5vrq5zrq53rq57rq5/rq6Drq6Hrq6Lrq6Prq6Trq6Xrq6brq6frq6jrq6nrq6rrq6vrq6zrq63rq67rq6/rq7Drq7Hrq7Lrq7Prq7Trq7Xrq7brq7frq7jrq7nrq7rrq7vrq73rq77rq7/rrIHrrILrrIPrrIXrrIbrrIfrrIjrrInrrIrrrIvrrIzrrI7rrJDrrJLrrJPrrJTrrJXrrJbrrJfrrJnrrJrrrJvrrJ3rrJ7rrJ/rrKHrrKLrrKPrrKTrrKXrrKbrrKfvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ1XS5sZW5ndGg7ICsraikgaWYoRFsxNDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ1XVtqXV0gPSAzNzEyMCArIGo7IGRbMzcxMjAgKyBqXSA9IERbMTQ1XVtqXTt9XG5cdERbMTQ2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+966yo66yq66ys66yt66yu66yv66yw66yx66yy66yz66y366y566y666y/662A662B662C662D662G662I662K662L662M662O662R662S77+977+977+977+977+977+9662T662V662W662X662Z662a662b662c662d662e662f662g662i662k662l662m662n662o662p662q662r662t662u662v662w662x77+977+977+977+977+977+9662y662z6620662166226623662466256626662766286629662+662/666A666B666C666D666E666F666G666H666J666K666L666N666O666P666R666S666T666U666V666W666X666Y666Z666a666b666c666d666e666f666g666h666i666j666l666m666n666p666q666r666t666u666v666w666x666y666z66616662666466656666666766686669666+666/66+B66+C66+D66+F66+G66+H66+J66+K66+L66+M66+N66+O66+P66+R66+S66+U66+V66+W66+X66+Y66+Z66+a66+b66+c66+d66+e66+f66+g66+h66+i66+j66+k66+l66+m66+n66+o66+p66+q66+r66+s66+t66+u66+v66+w66+x66+y66+z66+066+166+266+366+666+766+966++67CB77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0Nl0ubGVuZ3RoOyArK2opIGlmKERbMTQ2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0Nl1bal1dID0gMzczNzYgKyBqOyBkWzM3Mzc2ICsgal0gPSBEWzE0Nl1bal07fVxuXHREWzE0N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veuwg+uwhOuwheuwhuuwh+uwiuuwjuuwkOuwkuuwk+uwmeuwmuuwoOuwoeuwouuwo+uwpuuwqOuwquuwq+uwrOuwruuwr+uwsuuws+uwte+/ve+/ve+/ve+/ve+/ve+/veuwtuuwt+uwueuwuuuwu+uwvOuwveuwvuuwv+uxguuxhuuxh+uxiOuxiuuxi+uxjuuxj+uxkeuxkuuxk+uxlOuxleuxluuxl+uxmOuxme+/ve+/ve+/ve+/ve+/ve+/veuxmuuxm+uxnOuxnuuxn+uxoOuxoeuxouuxo+uxpOuxpeuxpuuxp+uxqOuxqeuxquuxq+uxrOuxreuxruuxr+uxsOuxseuxsuuxs+uxtOuxteuxtuuxt+uxuOuxueuxuuuxu+uxvOuxveuxvuuxv+uygOuygeuyguuyg+uyhuuyh+uyieuyiuuyjeuyj+uykOuykeuykuuyk+uyluuymOuym+uynOuyneuynuuyn+uyouuyo+uypeuypuuyqeuyquuyq+uyrOuyreuyruuyr+uysuuytuuyt+uyuOuyueuyuuuyu+uyvuuyv+uzgeuzguuzg+uzheuzhuuzh+uziOuzieuziuuzi+uzjOuzjuuzkuuzk+uzlOuzluuzl+uzmeuzmuuzm+uzneuznuuzn+uzoOuzoeuzouuzo+uzpOuzpeuzpuuzp+uzqOuzqeuzquuzq+uzrOuzreuzruuzr+uzsOuzseuzsuuzs+uzt+uzueuzuuuzu+uzve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNDddLmxlbmd0aDsgKytqKSBpZihEWzE0N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNDddW2pdXSA9IDM3NjMyICsgajsgZFszNzYzMiArIGpdID0gRFsxNDddW2pdO31cblx0RFsxNDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73rs77rs7/rtIDrtIHrtILrtIPrtIbrtIjrtIrrtIvrtIzrtI3rtI7rtI/rtJHrtJLrtJPrtJXrtJbrtJfrtJjrtJnrtJrrtJvrtJzrtJ3vv73vv73vv73vv73vv73vv73rtJ7rtJ/rtKDrtKHrtKLrtKPrtKXrtKbrtKfrtKjrtKnrtKrrtKvrtK3rtK7rtK/rtLDrtLHrtLLrtLPrtLTrtLXrtLbrtLfrtLjrtLnvv73vv73vv73vv73vv73vv73rtLrrtLvrtLzrtL3rtL7rtL/rtYHrtYLrtYPrtYTrtYXrtYbrtYfrtYrrtYvrtY3rtY7rtY/rtZHrtZLrtZPrtZTrtZXrtZbrtZfrtZrrtZvrtZzrtZ3rtZ7rtZ/rtaDrtaHrtaLrtaPrtaXrtabrtafrtanrtarrtavrtazrta3rta7rta/rtbDrtbHrtbLrtbPrtbTrtbXrtbbrtbfrtbjrtbnrtbrrtbvrtbzrtb3rtb7rtb/rtoLrtoPrtoXrtobrtovrtozrto3rto7rto/rtpLrtpTrtpbrtpfrtpjrtpvrtp3rtp7rtp/rtqDrtqHrtqLrtqPrtqXrtqbrtqfrtqjrtqnrtqrrtqvrtqzrtq3rtq7rtq/rtrHrtrLrtrPrtrTrtrXrtrbrtrfrtrnrtrrrtrvrtrzrtr3rtr7rtr/rt4Drt4Hrt4Lrt4Prt4Trt4Xrt4brt4frt4jrt4nrt4rrt4vrt4zrt43rt47rt4/rt5Drt5Hvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTQ4XS5sZW5ndGg7ICsraikgaWYoRFsxNDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTQ4XVtqXV0gPSAzNzg4OCArIGo7IGRbMzc4ODggKyBqXSA9IERbMTQ4XVtqXTt9XG5cdERbMTQ5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+967eS67eT67eW67eX67eZ67ea67eb67ed67ee67ef67eg67eh67ei67ej67ek67el67em67en67eo67eq67er67es67et67eu67ev67ex77+977+977+977+977+977+967ey67ez67e167e267e367e567e667e767e867e967e+67e/67iB67iC67iE67iG67iH67iI67iJ67iK67iL67iO67iP67iR67iS67iT77+977+977+977+977+977+967iV67iW67iX67iY67iZ67ia67ib67ie67ig67ih67ii67ij67ik67il67im67in67io67ip67iq67ir67is67it67iu67iv67iw67ix67iy67iz67i067i167i267i367i467i567i667i767i867i967i+67i/67mA67mB67mC67mD67mG67mH67mJ67mK67mL67mN67mP67mQ67mR67mS67mT67mW67mY67mc67md67me67mf67mi67mj67ml67mm67mn67mp67mr67ms67mt67mu67mv67my67m267m367m467m567m667m+67m/67qB67qC67qD67qF67qG67qH67qI67qJ67qK67qL67qO67qS67qT67qU67qV67qW67qX67qa67qb67qc67qd67qe67qf67qg67qh67qi67qj67qk67ql67qm67qn67qp67qq67qr67qs67qt67qu67qv67qw67qx67qy67qz67q067q167q267q377+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE0OV0ubGVuZ3RoOyArK2opIGlmKERbMTQ5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE0OV1bal1dID0gMzgxNDQgKyBqOyBkWzM4MTQ0ICsgal0gPSBEWzE0OV1bal07fVxuXHREWzE1MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veu6uOu6ueu6uuu6u+u6vOu6veu6vuu6v+u7gOu7geu7guu7g+u7hOu7heu7huu7h+u7iOu7ieu7iuu7i+u7jOu7jeu7juu7j+u7kuu7k++/ve+/ve+/ve+/ve+/ve+/veu7leu7luu7meu7muu7m+u7nOu7neu7nuu7n+u7oeu7ouu7puu7p+u7qOu7qeu7quu7q+u7reu7ruu7r+u7sOu7seu7suu7s+u7tOu7te+/ve+/ve+/ve+/ve+/ve+/veu7tuu7t+u7uOu7ueu7uuu7u+u7vOu7veu7vuu7v+u8gOu8guu8g+u8hOu8heu8huu8h+u8iuu8i+u8jOu8jeu8juu8j+u8kOu8keu8kuu8k+u8lOu8leu8luu8l+u8muu8nuu8n+u8oOu8oeu8ouu8o+u8pOu8peu8puu8p+u8qOu8qeu8quu8q+u8rOu8reu8ruu8r+u8sOu8seu8suu8s+u8tOu8teu8tuu8t+u8uOu8ueu8uuu8u+u8vOu8veu8vuu8v+u9guu9g+u9heu9huu9h+u9ieu9iuu9i+u9jOu9jeu9juu9j+u9kuu9k+u9lOu9luu9l+u9mOu9meu9muu9m+u9nOu9neu9nuu9n+u9oOu9oeu9ouu9o+u9pOu9peu9puu9p+u9qOu9qeu9quu9q+u9rOu9reu9ruu9r+u9sOu9seu9suu9s+u9tOu9teu9tuu9t+u9uOu9ueu9uuu9u+u9vOu9veu9vuu9v+u+gOu+geu+gu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTBdLmxlbmd0aDsgKytqKSBpZihEWzE1MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTBdW2pdXSA9IDM4NDAwICsgajsgZFszODQwMCArIGpdID0gRFsxNTBdW2pdO31cblx0RFsxNTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73rvoPrvoTrvoXrvobrvofrvojrvonrvorrvovrvozrvo3rvo7rvo/rvpDrvpHrvpLrvpPrvpXrvpbrvpfrvpjrvpnrvprrvpvrvpzrvp3vv73vv73vv73vv73vv73vv73rvp7rvp/rvqDrvqHrvqLrvqPrvqTrvqXrvqbrvqfrvqjrvqnrvqrrvqvrvqzrvq3rvq7rvq/rvrHrvrLrvrPrvrTrvrXrvrbrvrfrvrjvv73vv73vv73vv73vv73vv73rvrnrvrrrvrvrvrzrvr3rvr7rvr/rv4Drv4Hrv4Lrv4Prv4Trv4brv4frv4jrv4nrv4rrv4vrv47rv4/rv5Hrv5Lrv5Prv5Xrv5brv5frv5jrv5nrv5rrv5vrv53rv57rv6Drv6Lrv6Prv6Trv6Xrv6brv6frv6jrv6nrv6rrv6vrv6zrv63rv67rv6/rv7Drv7Hrv7Lrv7Prv7Trv7Xrv7brv7frv7jrv7nrv7rrv7vrv7zrv73rv77rv7/sgIDsgIHsgILsgIPsgITsgIXsgIbsgIfsgIjsgInsgIrsgIvsgIzsgI3sgI7sgI/sgJDsgJHsgJLsgJPsgJTsgJXsgJbsgJfsgJjsgJnsgJrsgJvsgJzsgJ3sgJ7sgJ/sgKDsgKHsgKLsgKPsgKTsgKXsgKbsgKfsgKjsgKnsgKrsgKvsgKzsgK3sgK7sgK/sgLDsgLHsgLLsgLPsgLTsgLXsgLbsgLfsgLjsgLnsgLrsgLvsgL3sgL7sgL/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTUxXS5sZW5ndGg7ICsraikgaWYoRFsxNTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTUxXVtqXV0gPSAzODY1NiArIGo7IGRbMzg2NTYgKyBqXSA9IERbMTUxXVtqXTt9XG5cdERbMTUyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97IGA7IGB7IGC7IGD7IGE7IGF7IGG7IGH7IGI7IGJ7IGK7IGL7IGM7IGN7IGO7IGP7IGQ7IGS7IGT7IGU7IGV7IGW7IGX7IGZ7IGa7IGb77+977+977+977+977+977+97IGd7IGe7IGf7IGh7IGi7IGj7IGk7IGl7IGm7IGn7IGq7IGr7IGs7IGt7IGu7IGv7IGw7IGx7IGy7IGz7IG07IG17IG27IG37IG47IG577+977+977+977+977+977+97IG67IG77IG87IG97IG+7IG/7IKA7IKB7IKC7IKD7IKE7IKF7IKG7IKH7IKI7IKJ7IKK7IKL7IKM7IKN7IKO7IKP7IKS7IKT7IKV7IKW7IKX7IKZ7IKa7IKb7IKc7IKd7IKe7IKf7IKi7IKk7IKm7IKn7IKo7IKp7IKq7IKr7IKu7IKx7IKy7IK37IK47IK57IK67IK77IK+7IOC7IOD7IOE7IOG7IOH7IOK7IOL7ION7IOO7IOP7IOR7IOS7IOT7IOU7IOV7IOW7IOX7IOa7IOe7IOf7IOg7IOh7IOi7IOj7IOm7IOn7IOp7IOq7IOr7IOt7IOu7IOv7IOw7IOx7IOy7IOz7IO27IO47IO67IO77IO87IO97IO+7IO/7ISB7ISC7ISD7ISF7ISG7ISH7ISJ7ISK7ISL7ISM7ISN7ISO7ISP7ISR7ISS7IST7ISU7ISW7ISX7ISY7ISZ7ISa7ISb7ISh7ISi7ISl7ISo7ISp7ISq7ISr7ISu77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1Ml0ubGVuZ3RoOyArK2opIGlmKERbMTUyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1Ml1bal1dID0gMzg5MTIgKyBqOyBkWzM4OTEyICsgal0gPSBEWzE1Ml1bal07fVxuXHREWzE1M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veyEsuyEs+yEtOyEteyEt+yEuuyEu+yEveyEvuyEv+yFgeyFguyFg+yFhOyFheyFhuyFh+yFiuyFjuyFj+yFkOyFkeyFkuyFk+yFluyFl++/ve+/ve+/ve+/ve+/ve+/veyFmeyFmuyFm+yFneyFnuyFn+yFoOyFoeyFouyFo+yFpuyFquyFq+yFrOyFreyFruyFr+yFseyFsuyFs+yFteyFtuyFt+yFueyFuuyFu++/ve+/ve+/ve+/ve+/ve+/veyFvOyFveyFvuyFv+yGgOyGgeyGguyGg+yGhOyGhuyGh+yGiOyGieyGiuyGi+yGj+yGkeyGkuyGk+yGleyGl+yGmOyGmeyGmuyGm+yGnuyGoOyGouyGo+yGpOyGpuyGp+yGquyGq+yGreyGruyGr+yGseyGsuyGs+yGtOyGteyGtuyGt+yGuOyGueyGuuyGu+yGvOyGvuyGv+yHgOyHgeyHguyHg+yHheyHhuyHh+yHieyHiuyHi+yHjeyHjuyHj+yHkOyHkeyHkuyHk+yHleyHluyHmeyHmuyHm+yHnOyHneyHnuyHn+yHoeyHouyHo+yHpeyHpuyHp+yHqeyHquyHq+yHrOyHreyHruyHr+yHsuyHtOyHteyHtuyHt+yHuOyHueyHuuyHu+yHvuyHv+yIgeyIguyIg+yIheyIhuyIh+yIiOyIieyIiuyIi+yIjuyIkOyIkuyIk+yIlOyIleyIluyIl+yImuyIm+yIneyInuyIoeyIouyIo++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTNdLmxlbmd0aDsgKytqKSBpZihEWzE1M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTNdW2pdXSA9IDM5MTY4ICsgajsgZFszOTE2OCArIGpdID0gRFsxNTNdW2pdO31cblx0RFsxNTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73siKTsiKXsiKbsiKfsiKrsiKzsiK7siLDsiLPsiLXsiLbsiLfsiLjsiLnsiLrsiLvsiLzsiL3siL7siL/siYDsiYHsiYLsiYPsiYTsiYXvv73vv73vv73vv73vv73vv73siYbsiYfsiYnsiYrsiYvsiYzsiY3siY7siY/siZLsiZPsiZXsiZbsiZfsiZnsiZrsiZvsiZzsiZ3siZ7siZ/siaHsiaLsiaPsiaTsiabvv73vv73vv73vv73vv73vv73siafsiajsiansiarsiavsia7sia/sibHsibLsibPsibXsibbsibfsibjsibnsibrsibvsib7sioDsioLsioPsioTsioXsiobsiofsiorsiovsiozsio3sio7sio/sipHsipLsipPsipTsipXsipbsipfsipnsiprsipzsip7sip/siqDsiqHsiqLsiqPsiqbsiqfsiqnsiqrsiqvsiq7siq/sirDsirHsirLsirPsirbsirjsirrsirvsirzsir3sir7sir/si4Dsi4Hsi4Lsi4Psi4Tsi4Xsi4bsi4fsi4jsi4nsi4rsi4vsi4zsi43si47si4/si5Dsi5Hsi5Lsi5Psi5Tsi5Xsi5bsi5fsi5jsi5nsi5rsi5vsi57si5/si6Hsi6Lsi6Xsi6bsi6fsi6jsi6nsi6rsi67si7Dsi7Lsi7Psi7Tsi7Xsi7fsi7rsi73si77si7/sjIHsjILsjIPsjITsjIXsjIbsjIfsjIrsjIvsjI7sjI/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU0XS5sZW5ndGg7ICsraikgaWYoRFsxNTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU0XVtqXV0gPSAzOTQyNCArIGo7IGRbMzk0MjQgKyBqXSA9IERbMTU0XVtqXTt9XG5cdERbMTU1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97IyQ7IyR7IyS7IyW7IyX7IyZ7Iya7Iyb7Iyd7Iye7Iyf7Iyg7Iyh7Iyi7Iyj7Iym7Iyn7Iyq7Iyr7Iys7Iyt7Iyu7Iyv7Iyw7Iyx7Iyy77+977+977+977+977+977+97Iyz7Iy07Iy17Iy27Iy37Iy47Iy57Iy67Iy77Iy87Iy97Iy+7Iy/7I2A7I2B7I2C7I2D7I2E7I2G7I2H7I2I7I2J7I2K7I2L7I2M7I2N77+977+977+977+977+977+97I2O7I2P7I2Q7I2R7I2S7I2T7I2U7I2V7I2W7I2X7I2Y7I2Z7I2a7I2b7I2c7I2d7I2e7I2f7I2g7I2h7I2i7I2j7I2k7I2l7I2m7I2n7I2q7I2r7I2t7I2u7I2v7I2x7I2z7I207I217I227I237I267I277I2+7I2/7I6A7I6B7I6C7I6D7I6F7I6G7I6H7I6J7I6K7I6L7I6N7I6O7I6P7I6Q7I6R7I6S7I6T7I6U7I6V7I6W7I6X7I6Y7I6Z7I6a7I6b7I6c7I6d7I6e7I6f7I6g7I6h7I6i7I6j7I6k7I6l7I6m7I6n7I6o7I6p7I6q7I6r7I6s7I6t7I6u7I6v7I6w7I6x7I6y7I6z7I607I617I627I637I647I657I667I677I687I697I6+7I6/7I+B7I+C7I+D7I+E7I+F7I+G7I+H7I+I7I+J7I+K7I+L7I+M7I+N7I+O7I+P7I+Q7I+R7I+S7I+T7I+U7I+V7I+W7I+X7I+a77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1NV0ubGVuZ3RoOyArK2opIGlmKERbMTU1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1NV1bal1dID0gMzk2ODAgKyBqOyBkWzM5NjgwICsgal0gPSBEWzE1NV1bal07fVxuXHREWzE1Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veyPm+yPneyPnuyPoeyPo+yPpOyPpeyPpuyPp+yPquyPq+yPrOyPruyPr+yPsOyPseyPsuyPs+yPtuyPt+yPueyPuuyPu+yPvOyPveyPvu+/ve+/ve+/ve+/ve+/ve+/veyPv+yQgOyQgeyQguyQg+yQhOyQheyQhuyQh+yQieyQiuyQi+yQjOyQjeyQjuyQj+yQkeyQkuyQk+yQlOyQleyQluyQl+yQmOyQmeyQmu+/ve+/ve+/ve+/ve+/ve+/veyQm+yQnOyQneyQnuyQn+yQoOyQoeyQouyQo+yQpeyQpuyQp+yQqOyQqeyQquyQq+yQreyQruyQr+yQseyQsuyQs+yQteyQtuyQt+yQuOyQueyQuuyQu+yQvuyQv+yRgOyRgeyRguyRg+yRhOyRheyRhuyRh+yRieyRiuyRi+yRjOyRjeyRjuyRj+yRkOyRkeyRkuyRk+yRlOyRleyRluyRl+yRmOyRmeyRmuyRm+yRnOyRneyRnuyRn+yRoOyRoeyRouyRo+yRpuyRp+yRqeyRquyRq+yRreyRruyRr+yRsOyRseyRsuyRs+yRtuyRt+yRuOyRuuyRu+yRvOyRveyRvuyRv+ySgeySguySg+yShOySheyShuySh+ySiOySieySiuySi+ySjOySjeySjuySj+ySkOySkeySkuySk+ySleySluySl+ySmOySmeySmuySm+ySneySnuySn+ySoOySoeySouySo+ySpOySpeySpuySp+ySqOySqe+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTZdLmxlbmd0aDsgKytqKSBpZihEWzE1Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTZdW2pdXSA9IDM5OTM2ICsgajsgZFszOTkzNiArIGpdID0gRFsxNTZdW2pdO31cblx0RFsxNTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73skqrskqvskqzskq3skq7skq/skrDskrHskrLskrPskrTskrXskrbskrfskrnskrrskrvskr3skr7skr/sk4Dsk4Hsk4Lsk4Psk4Tsk4Xvv73vv73vv73vv73vv73vv73sk4bsk4fsk4jsk4nsk4rsk4vsk4zsk43sk47sk4/sk5Dsk5Hsk5Lsk5Psk5Tsk5Xsk5bsk5fsk5jsk5nsk5rsk5vsk5zsk53sk57sk5/vv73vv73vv73vv73vv73vv73sk6Dsk6Hsk6Lsk6Psk6Tsk6Xsk6bsk6fsk6jsk6rsk6vsk6zsk63sk67sk6/sk7Lsk7Psk7Xsk7bsk7fsk7nsk7vsk7zsk73sk77slILslIPslITslIXslIbslIfslIjslInslIrslIvslI3slI7slI/slJHslJLslJPslJXslJbslJfslJjslJnslJrslJvslJ3slJ7slJ/slKDslKHslKLslKPslKTslKXslKbslKfslKrslKvslK3slK7slK/slLHslLLslLPslLTslLXslLbslLfslLrslLzslL7slL/slYDslYHslYLslYPslYbslYfslYvslY/slZDslZHslZLslZbslZrslZvslZzslZ/slaLslaPslaXslabslafslanslarslavslazsla3sla7sla/slbLslbbslbfslbjslbnslbrslbvslb7slb/sloHsloLsloPsloXslobslojslonslorslovslo7slpDslpLslpPslpTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTU3XS5sZW5ndGg7ICsraikgaWYoRFsxNTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTU3XVtqXV0gPSA0MDE5MiArIGo7IGRbNDAxOTIgKyBqXSA9IERbMTU3XVtqXTt9XG5cdERbMTU4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97JaW7JaZ7Jaa7Jab7Jad7Jae7Jaf7Jah7Jai7Jaj7Jak7Jal7Jam7Jan7Jao7Jaq7Jar7Jas7Jat7Jau7Jav7Jaw7Jax7Jay7Jaz7Ja277+977+977+977+977+977+97Ja37Ja67Ja/7JeA7JeB7JeC7JeD7JeL7JeN7JeP7JeS7JeT7JeV7JeW7JeX7JeZ7Jea7Jeb7Jec7Jed7Jee7Jef7Jei7Jek7Jem7Jen77+977+977+977+977+977+97Jeo7Jep7Jeq7Jer7Jev7Jex7Jey7Jez7Je17Je47Je57Je67Je77JiC7JiD7JiE7JiJ7JiK7JiL7JiN7JiO7JiP7JiR7JiS7JiT7JiU7JiV7JiW7JiX7Jia7Jid7Jie7Jif7Jig7Jih7Jii7Jij7Jim7Jin7Jip7Jiq7Jir7Jiv7Jix7Jiy7Ji27Ji47Ji67Ji87Ji97Ji+7Ji/7JmC7JmD7JmF7JmG7JmH7JmJ7JmK7JmL7JmM7JmN7JmO7JmP7JmS7JmW7JmX7JmY7JmZ7Jma7Jmb7Jme7Jmf7Jmh7Jmi7Jmj7Jmk7Jml7Jmm7Jmn7Jmo7Jmp7Jmq7Jmr7Jmt7Jmu7Jmw7Jmy7Jmz7Jm07Jm17Jm27Jm37Jm67Jm77Jm97Jm+7Jm/7JqB7JqC7JqD7JqE7JqF7JqG7JqH7JqK7JqM7JqO7JqP7JqQ7JqR7JqS7JqT7JqW7JqX7JqZ7Jqa7Jqb7Jqd7Jqe7Jqf7Jqg7Jqh7Jqi7Jqj7Jqm77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE1OF0ubGVuZ3RoOyArK2opIGlmKERbMTU4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE1OF1bal1dID0gNDA0NDggKyBqOyBkWzQwNDQ4ICsgal0gPSBEWzE1OF1bal07fVxuXHREWzE1OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veyaqOyaquyaq+yarOyareyaruyar+yasuyas+yateyatuyat+yau+yavOyaveyavuyav+ybguybhOybhuybh+ybiOybieybiuybi+ybju+/ve+/ve+/ve+/ve+/ve+/veybj+ybkeybkuybk+ybleybluybl+ybmOybmeybmuybm+ybnuybn+ybouybo+ybpOybpeybpuybp+ybquybq+ybreybruybr+ybseybsu+/ve+/ve+/ve+/ve+/ve+/veybs+ybtOybteybtuybt+ybuuybu+ybvOybvuybv+ycgOycgeycguycg+ychuych+ycieyciuyci+ycjeycjuycj+yckOyckeyckuyck+ycluycmOycmuycm+ycnOycneycnuycn+ycouyco+ycpeycpuycp+ycqeycquycq+ycrOycreycruycr+ycsuyctOyctuycuOycueycuuycu+ycvuycv+ydgeydguydg+ydheydhuydh+ydiOydieydi+ydjuydkOydmeydmuydm+ydneydnuydn+ydoeydouydo+ydpOydpeydpuydp+ydqeydquydrOydreydruydr+ydsOydseydsuyds+ydtuydt+ydueyduuydu+ydv+yegOyegeyeguyehuyei+yejOyejeyej+yekuyek+yeleyemeyem+yenOyeneyenuyen+yeouyep+yeqOyeqeyequyeq+yeruyer+yeseyesuyes+yeteyetuyet++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNTldLmxlbmd0aDsgKytqKSBpZihEWzE1OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNTldW2pdXSA9IDQwNzA0ICsgajsgZFs0MDcwNCArIGpdID0gRFsxNTldW2pdO31cblx0RFsxNjBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73snrjsnrnsnrrsnrvsnr7sn4Lsn4Psn4Tsn4Xsn4bsn4fsn4rsn4vsn43sn4/sn5Hsn5Lsn5Psn5Tsn5Xsn5bsn5fsn5nsn5rsn5vsn5zvv73vv73vv73vv73vv73vv73sn57sn5/sn6Dsn6Hsn6Lsn6Psn6Xsn6bsn6fsn6nsn6rsn6vsn63sn67sn6/sn7Dsn7Hsn7Lsn7Psn7Tsn7Xsn7bsn7fsn7jsn7nsn7rvv73vv73vv73vv73vv73vv73sn7vsn7zsn73sn77sn7/soILsoIPsoIXsoIbsoIfsoInsoIvsoIzsoI3soI7soI/soJLsoJTsoJfsoJjsoJnsoJrsoJvsoJ7soJ/soKHsoKLsoKPsoKXsoKbsoKfsoKjsoKnsoKrsoKvsoK7soLDsoLLsoLPsoLTsoLXsoLbsoLfsoLnsoLrsoLvsoL3soL7soL/soYHsoYLsoYPsoYTsoYXsoYbsoYfsoYrsoYvsoY7soY/soZDsoZHsoZLsoZPsoZXsoZbsoZfsoZjsoZnsoZrsoZvsoZzsoZ3soZ7soZ/soaDsoaHsoaLsoaPsoaTsoaXsoabsoafsoajsoansoarsoavsoazsoa3soa7soa/sobLsobPsobXsobbsobfsobnsobvsobzsob3sob7sob/sooLsooTsoojsoonsoorsoo7soo/sopDsopHsopLsopPsopXsopbsopfsopjsopnsoprsopvsopzsop7soqDsoqLsoqPsoqTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTYwXS5sZW5ndGg7ICsraikgaWYoRFsxNjBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTYwXVtqXV0gPSA0MDk2MCArIGo7IGRbNDA5NjAgKyBqXSA9IERbMTYwXVtqXTt9XG5cdERbMTYxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97KKl7KKm7KKn7KKp7KKq7KKr7KKs7KKt7KKu7KKv7KKw7KKx7KKy7KKz7KK07KK17KK27KK37KK47KK57KK67KK77KK+7KK/7KOA7KOB77+977+977+977+977+977+97KOC7KOD7KOF7KOG7KOH7KOJ7KOK7KOL7KON7KOO7KOP7KOQ7KOR7KOS7KOT7KOW7KOY7KOa7KOb7KOc7KOd7KOe7KOf7KOi7KOj7KOl77+977+977+977+977+977+97KOm7KOn7KOo7KOp7KOq7KOr7KOs7KOt7KOu7KOv7KOw7KOx7KOy7KOz7KO07KO27KO37KO47KO57KO67KO77KO+7KO/7KSB7KSC7KSD7KSH7KSI7KSJ7KSK7KSL7KSO44CA44CB44CCwrfigKXigKbCqOOAg8Kt4oCV4oil77y84oi84oCY4oCZ4oCc4oCd44CU44CV44CI44CJ44CK44CL44CM44CN44CO44CP44CQ44CRwrHDl8O34omg4omk4oml4oie4oi0wrDigLLigLPihIPihKvvv6Dvv6Hvv6XimYLimYDiiKDiiqXijJLiiILiiIfiiaHiiZLCp+KAu+KYhuKYheKXi+KXj+KXjuKXh+KXhuKWoeKWoOKWs+KWsuKWveKWvOKGkuKGkOKGkeKGk+KGlOOAk+KJquKJq+KImuKIveKIneKIteKIq+KIrOKIiOKIi+KKhuKKh+KKguKKg+KIquKIqeKIp+KIqO+/ou+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjFdLmxlbmd0aDsgKytqKSBpZihEWzE2MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjFdW2pdXSA9IDQxMjE2ICsgajsgZFs0MTIxNiArIGpdID0gRFsxNjFdW2pdO31cblx0RFsxNjJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73spJDspJLspJPspJTspJXspJbspJfspJnspJrspJvspJzspJ3spJ7spJ/spKDspKHspKLspKPspKTspKXspKbspKfspKjspKnspKrspKvvv73vv73vv73vv73vv73vv73spK3spK7spK/spLDspLHspLLspLPspLXspLbspLfspLjspLnspLrspLvspLzspL3spL7spL/spYDspYHspYLspYPspYTspYXspYbspYfvv73vv73vv73vv73vv73vv73spYjspYnspYrspYvspYzspY3spY7spY/spZLspZPspZXspZbspZfspZnspZrspZvspZzspZ3spZ7spZ/spaLspaTspaXspabspafspajspansparspavspa3spa7spa/ih5Lih5TiiIDiiIPCtO+9nsuHy5jLncuay5nCuMubwqHCv8uQ4oiu4oiR4oiPwqTihInigLDil4Hil4DilrfilrbimaTimaDimaHimaXimafimaPiipnil4jilqPil5Dil5HilpLilqTilqXilqjilqfilqbilqnimajimI/imI7imJzimJ7CtuKAoOKAoeKGleKGl+KGmeKGluKGmOKZreKZqeKZquKZrOOJv+OInOKEluOPh+KEouOPguOPmOKEoeKCrMKu77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2Ml0ubGVuZ3RoOyArK2opIGlmKERbMTYyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2Ml1bal1dID0gNDE0NzIgKyBqOyBkWzQxNDcyICsgal0gPSBEWzE2Ml1bal07fVxuXHREWzE2M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veylseylsuyls+ylteyltuylt+yluOylueyluuylu+ylveylvuylv+ymgOymgeymguymg+ymhOymheymhuymh+ymiuymi+ymjeymjuymj++/ve+/ve+/ve+/ve+/ve+/veymkeymkuymk+ymlOymleymluyml+ymmuymnOymnuymn+ymoOymoeymouymo+ympOympeympuymp+ymqOymqeymquymq+ymrOymreymru+/ve+/ve+/ve+/ve+/ve+/veymr+ymsOymseymsuyms+ymtOymteymtuymt+ymuOymueymuuymu+ymvOymveymvuymv+ynguyng+ynheynhuynieyni+ynjOynjeynjuynj+ynkuynlOynl+ynmOynm++8ge+8gu+8g++8hO+8he+8hu+8h++8iO+8ie+8iu+8i++8jO+8je+8ju+8j++8kO+8ke+8ku+8k++8lO+8le+8lu+8l++8mO+8me+8mu+8m++8nO+8ne+8nu+8n++8oO+8oe+8ou+8o++8pO+8pe+8pu+8p++8qO+8qe+8qu+8q++8rO+8re+8ru+8r++8sO+8se+8su+8s++8tO+8te+8tu+8t++8uO+8ue+8uu+8u++/pu+8ve+8vu+8v++9gO+9ge+9gu+9g++9hO+9he+9hu+9h++9iO+9ie+9iu+9i++9jO+9je+9ju+9j++9kO+9ke+9ku+9k++9lO+9le+9lu+9l++9mO+9me+9mu+9m++9nO+9ne+/o++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjNdLmxlbmd0aDsgKytqKSBpZihEWzE2M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjNdW2pdXSA9IDQxNzI4ICsgajsgZFs0MTcyOCArIGpdID0gRFsxNjNdW2pdO31cblx0RFsxNjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73sp57sp5/sp6Hsp6Psp6Xsp6bsp6jsp6nsp6rsp6vsp67sp7Lsp7Psp7Tsp7Xsp7bsp7fsp7rsp7vsp73sp77sp7/sqIHsqILsqIPsqITvv73vv73vv73vv73vv73vv73sqIXsqIbsqIfsqIrsqI7sqI/sqJDsqJHsqJLsqJPsqJXsqJbsqJfsqJnsqJrsqJvsqJzsqJ3sqJ7sqJ/sqKDsqKHsqKLsqKPsqKTsqKXvv73vv73vv73vv73vv73vv73sqKbsqKfsqKjsqKrsqKvsqKzsqK3sqK7sqK/sqLDsqLHsqLLsqLPsqLTsqLXsqLbsqLfsqLjsqLnsqLrsqLvsqLzsqL3sqL7sqL/sqYDsqYHsqYLsqYPsqYTsqYXsqYbjhLHjhLLjhLPjhLTjhLXjhLbjhLfjhLjjhLnjhLrjhLvjhLzjhL3jhL7jhL/jhYDjhYHjhYLjhYPjhYTjhYXjhYbjhYfjhYjjhYnjhYrjhYvjhYzjhY3jhY7jhY/jhZDjhZHjhZLjhZPjhZTjhZXjhZbjhZfjhZjjhZnjhZrjhZvjhZzjhZ3jhZ7jhZ/jhaDjhaHjhaLjhaPjhaTjhaXjhabjhafjhajjhanjharjhavjhazjha3jha7jha/jhbDjhbHjhbLjhbPjhbTjhbXjhbbjhbfjhbjjhbnjhbrjhbvjhbzjhb3jhb7jhb/jhoDjhoHjhoLjhoPjhoTjhoXjhobjhofjhojjhonjhorjhovjhozjho3jho7vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY0XS5sZW5ndGg7ICsraikgaWYoRFsxNjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY0XVtqXV0gPSA0MTk4NCArIGo7IGRbNDE5ODQgKyBqXSA9IERbMTY0XVtqXTt9XG5cdERbMTY1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97KmH7KmI7KmJ7KmK7KmL7KmO7KmP7KmR7KmS7KmT7KmV7KmW7KmX7KmY7KmZ7Kma7Kmb7Kme7Kmi7Kmj7Kmk7Kml7Kmm7Kmn7Kmp7Kmq77+977+977+977+977+977+97Kmr7Kms7Kmt7Kmu7Kmv7Kmw7Kmx7Kmy7Kmz7Km07Km17Km27Km37Km47Km57Km67Km77Km87Km+7Km/7KqA7KqB7KqC7KqD7KqF7KqG77+977+977+977+977+977+97KqH7KqI7KqJ7KqK7KqL7KqM7KqN7KqO7KqP7KqQ7KqR7KqS7KqT7KqU7KqV7KqW7KqX7KqZ7Kqa7Kqb7Kqc7Kqd7Kqe7Kqf7Kqg7Kqh7Kqi7Kqj7Kqk7Kql7Kqm7Kqn4oWw4oWx4oWy4oWz4oW04oW14oW24oW34oW44oW577+977+977+977+977+94oWg4oWh4oWi4oWj4oWk4oWl4oWm4oWn4oWo4oWp77+977+977+977+977+977+977+9zpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoc6jzqTOpc6mzqfOqM6p77+977+977+977+977+977+977+977+9zrHOss6zzrTOtc62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4TPhc+Gz4fPiM+J77+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2NV0ubGVuZ3RoOyArK2opIGlmKERbMTY1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2NV1bal1dID0gNDIyNDAgKyBqOyBkWzQyMjQwICsgal0gPSBEWzE2NV1bal07fVxuXHREWzE2Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veyqqOyqqeyqquyqq+yqrOyqreyqruyqr+yqsOyqseyqsuyqs+yqtOyqteyqtuyqt+yquOyqueyquuyqu+yqvuyqv+yrgeyrguyrg+yrhe+/ve+/ve+/ve+/ve+/ve+/veyrhuyrh+yriOyrieyriuyri+yrjuyrkOyrkuyrlOyrleyrluyrl+yrmuyrm+yrnOyrneyrnuyrn+yroeyrouyro+yrpOyrpeyrpuyrp++/ve+/ve+/ve+/ve+/ve+/veyrqOyrqeyrquyrq+yrreyrruyrr+yrsOyrseyrsuyrs+yrteyrtuyrt+yruOyrueyruuyru+yrvOyrveyrvuyrv+ysgOysgeysguysg+yshOysheyshuysh+ysieysiuKUgOKUguKUjOKUkOKUmOKUlOKUnOKUrOKUpOKUtOKUvOKUgeKUg+KUj+KUk+KUm+KUl+KUo+KUs+KUq+KUu+KVi+KUoOKUr+KUqOKUt+KUv+KUneKUsOKUpeKUuOKVguKUkuKUkeKUmuKUmeKUluKUleKUjuKUjeKUnuKUn+KUoeKUouKUpuKUp+KUqeKUquKUreKUruKUseKUsuKUteKUtuKUueKUuuKUveKUvuKVgOKVgeKVg+KVhOKVheKVhuKVh+KViOKVieKViu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjZdLmxlbmd0aDsgKytqKSBpZihEWzE2Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjZdW2pdXSA9IDQyNDk2ICsgajsgZFs0MjQ5NiArIGpdID0gRFsxNjZdW2pdO31cblx0RFsxNjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73srIvsrIzsrI3srI7srI/srJHsrJLsrJPsrJXsrJbsrJfsrJnsrJrsrJvsrJzsrJ3srJ7srJ/srKLsrKPsrKTsrKXsrKbsrKfsrKjsrKnvv73vv73vv73vv73vv73vv73srKrsrKvsrKzsrK3srK7srK/srLDsrLHsrLLsrLPsrLTsrLXsrLbsrLfsrLjsrLnsrLrsrLvsrLzsrL3srL7srL/srYDsrYLsrYPsrYTvv73vv73vv73vv73vv73vv73srYXsrYbsrYfsrYrsrYvsrY3srY7srY/srZHsrZLsrZPsrZTsrZXsrZbsrZfsrZrsrZvsrZzsrZ7srZ/sraDsraHsraLsraPsraXsrabsrafsrajsransrarsravsrazjjpXjjpbjjpfihJPjjpjjj4TjjqPjjqTjjqXjjqbjjpnjjprjjpvjjpzjjp3jjp7jjp/jjqDjjqHjjqLjj4rjjo3jjo7jjo/jj4/jjojjjonjj4jjjqfjjqjjjrDjjrHjjrLjjrPjjrTjjrXjjrbjjrfjjrjjjrnjjoDjjoHjjoLjjoPjjoTjjrrjjrvjjrzjjr3jjr7jjr/jjpDjjpHjjpLjjpPjjpTihKbjj4Djj4Hjjorjjovjjozjj5bjj4Xjjq3jjq7jjq/jj5vjjqnjjqrjjqvjjqzjj53jj5Djj5Pjj4Pjj4njj5zjj4bvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY3XS5sZW5ndGg7ICsraikgaWYoRFsxNjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY3XVtqXV0gPSA0Mjc1MiArIGo7IGRbNDI3NTIgKyBqXSA9IERbMTY3XVtqXTt9XG5cdERbMTY4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97K2t7K2u7K2v7K2w7K2x7K2y7K2z7K207K217K227K237K267K277K287K297K2+7K2/7K6A7K6B7K6C7K6D7K6E7K6F7K6G7K6H7K6I77+977+977+977+977+977+97K6J7K6K7K6L7K6M7K6N7K6O7K6P7K6Q7K6R7K6S7K6T7K6U7K6V7K6W7K6X7K6Y7K6Z7K6a7K6b7K6d7K6e7K6f7K6g7K6h7K6i7K6j77+977+977+977+977+977+97K6k7K6l7K6m7K6n7K6o7K6p7K6q7K6r7K6s7K6t7K6u7K6v7K6w7K6x7K6y7K6z7K607K617K627K637K657K667K677K687K697K6+7K6/7K+A7K+B7K+C7K+D7K+Ew4bDkMKqxKbvv73Esu+/vcS/xYHDmMWSwrrDnsWmxYrvv73jiaDjiaHjiaLjiaPjiaTjiaXjiabjiafjiajjianjiarjiavjiazjia3jia7jia/jibDjibHjibLjibPjibTjibXjibbjibfjibjjibnjibrjibvik5Dik5Hik5Lik5Pik5Tik5Xik5bik5fik5jik5nik5rik5vik5zik53ik57ik5/ik6Dik6Hik6Lik6Pik6Tik6Xik6bik6fik6jik6nikaDikaHikaLikaPikaTikaXikabikafikajikanikarikavikazika3ika7CveKFk+KFlMK8wr7ihZvihZzihZ3ihZ7vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY4XS5sZW5ndGg7ICsraikgaWYoRFsxNjhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY4XVtqXV0gPSA0MzAwOCArIGo7IGRbNDMwMDggKyBqXSA9IERbMTY4XVtqXTt9XG5cdERbMTY5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97K+F7K+G7K+H7K+I7K+J7K+K7K+L7K+M7K+N7K+O7K+P7K+Q7K+R7K+S7K+T7K+V7K+W7K+X7K+Y7K+Z7K+a7K+b7K+c7K+d7K+e7K+f77+977+977+977+977+977+97K+g7K+h7K+i7K+j7K+l7K+m7K+o7K+q7K+r7K+s7K+t7K+u7K+v7K+w7K+x7K+y7K+z7K+07K+17K+27K+37K+47K+57K+67K+77K+877+977+977+977+977+977+97K+97K++7K+/7LCA7LCB7LCC7LCD7LCE7LCF7LCG7LCH7LCI7LCJ7LCK7LCL7LCO7LCP7LCR7LCS7LCT7LCV7LCW7LCX7LCY7LCZ7LCa7LCb7LCe7LCf7LCg7LCj7LCkw6bEkcOwxKfEscSzxLjFgMWCw7jFk8Ofw77Fp8WLxYnjiIDjiIHjiILjiIPjiITjiIXjiIbjiIfjiIjjiInjiIrjiIvjiIzjiI3jiI7jiI/jiJDjiJHjiJLjiJPjiJTjiJXjiJbjiJfjiJjjiJnjiJrjiJvikpzikp3ikp7ikp/ikqDikqHikqLikqPikqTikqXikqbikqfikqjikqnikqrikqvikqzikq3ikq7ikq/ikrDikrHikrLikrPikrTikrXikbTikbXikbbikbfikbjikbnikbrikbvikbzikb3ikb7ikb/ikoDikoHikoLCucKywrPigbTigb/igoHigoLigoPigoTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY5XS5sZW5ndGg7ICsraikgaWYoRFsxNjldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY5XVtqXV0gPSA0MzI2NCArIGo7IGRbNDMyNjQgKyBqXSA9IERbMTY5XVtqXTt9XG5cdERbMTcwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97LCl7LCm7LCq7LCr7LCt7LCv7LCx7LCy7LCz7LC07LC17LC27LC37LC67LC/7LGA7LGB7LGC7LGD7LGG7LGH7LGJ7LGK7LGL7LGN7LGO77+977+977+977+977+977+97LGP7LGQ7LGR7LGS7LGT7LGW7LGa7LGb7LGc7LGd7LGe7LGf7LGh7LGi7LGj7LGl7LGn7LGp7LGq7LGr7LGs7LGt7LGu7LGv7LGx7LGy77+977+977+977+977+977+97LGz7LG07LG27LG37LG47LG57LG67LG77LG87LG97LG+7LG/7LKA7LKB7LKC7LKD7LKE7LKF7LKG7LKH7LKI7LKJ7LKK7LKL7LKM7LKN7LKO7LKP7LKQ7LKR7LKS7LKT44GB44GC44GD44GE44GF44GG44GH44GI44GJ44GK44GL44GM44GN44GO44GP44GQ44GR44GS44GT44GU44GV44GW44GX44GY44GZ44Ga44Gb44Gc44Gd44Ge44Gf44Gg44Gh44Gi44Gj44Gk44Gl44Gm44Gn44Go44Gp44Gq44Gr44Gs44Gt44Gu44Gv44Gw44Gx44Gy44Gz44G044G144G244G344G444G544G644G744G844G944G+44G/44KA44KB44KC44KD44KE44KF44KG44KH44KI44KJ44KK44KL44KM44KN44KO44KP44KQ44KR44KS44KT77+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3MF0ubGVuZ3RoOyArK2opIGlmKERbMTcwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3MF1bal1dID0gNDM1MjAgKyBqOyBkWzQzNTIwICsgal0gPSBEWzE3MF1bal07fVxuXHREWzE3MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veyylOyyleyyluyyl+yymuyym+yyneyynuyyn+yyoeyyouyyo+yypOyypeyypuyyp+yyquyyruyyr+yysOyyseyysuyys+yytuyyt+yyue+/ve+/ve+/ve+/ve+/ve+/veyyuuyyu+yyveyyvuyyv+yzgOyzgeyzguyzg+yzhuyziOyziuyzi+yzjOyzjeyzjuyzj+yzkeyzkuyzk+yzleyzluyzl+yzmOyzmeyzmu+/ve+/ve+/ve+/ve+/ve+/veyzm+yznOyzneyznuyzn+yzoOyzoeyzouyzo+yzpeyzpuyzp+yzqOyzqeyzquyzq+yzreyzruyzr+yzseyzsuyzs+yztOyzteyztuyzt+yzuOyzueyzuuyzu+yzvOyzveOCoeOCouOCo+OCpOOCpeOCpuOCp+OCqOOCqeOCquOCq+OCrOOCreOCruOCr+OCsOOCseOCsuOCs+OCtOOCteOCtuOCt+OCuOOCueOCuuOCu+OCvOOCveOCvuOCv+ODgOODgeODguODg+ODhOODheODhuODh+ODiOODieODiuODi+ODjOODjeODjuODj+ODkOODkeODkuODk+ODlOODleODluODl+ODmOODmeODmuODm+ODnOODneODnuODn+ODoOODoeODouODo+ODpOODpeODpuODp+ODqOODqeODquODq+ODrOODreODruODr+ODsOODseODsuODs+ODtOODteODtu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzFdLmxlbmd0aDsgKytqKSBpZihEWzE3MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzFdW2pdXSA9IDQzNzc2ICsgajsgZFs0Mzc3NiArIGpdID0gRFsxNzFdW2pdO31cblx0RFsxNzJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ss77ss7/stIDstILstIPstITstIXstIbstIfstIrstIvstI3stI7stI/stJHstJLstJPstJTstJXstJbstJfstJrstJzstJ7stJ/stKDvv73vv73vv73vv73vv73vv73stKHstKLstKPstKXstKbstKfstKnstKrstKvstK3stK7stK/stLDstLHstLLstLPstLTstLXstLbstLfstLjstLrstLvstLzstL3stL7vv73vv73vv73vv73vv73vv73stL/stYDstYHstYLstYPstYTstYXstYbstYfstYjstYnstYrstYvstYzstY3stY7stY/stZDstZHstZLstZPstZTstZXstZbstZfstZjstZnstZrstZvstZ3stZ7stZ/QkNCR0JLQk9CU0JXQgdCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73QsNCx0LLQs9C00LXRkdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTcyXS5sZW5ndGg7ICsraikgaWYoRFsxNzJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTcyXVtqXV0gPSA0NDAzMiArIGo7IGRbNDQwMzIgKyBqXSA9IERbMTcyXVtqXTt9XG5cdERbMTczXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97LWh7LWi7LWj7LWl7LWm7LWn7LWo7LWp7LWq7LWr7LWu7LWw7LWy7LWz7LW07LW17LW27LW37LW57LW67LW77LW87LW97LW+7LW/7LaA77+977+977+977+977+977+97LaB7LaC7LaD7LaE7LaF7LaG7LaH7LaJ7LaK7LaL7LaM7LaN7LaO7LaP7LaQ7LaR7LaS7LaT7LaW7LaX7LaZ7Laa7Lab7Lad7Lae7Laf77+977+977+977+977+977+97Lag7Lah7Lai7Laj7Lam7Lao7Laq7Lar7Las7Lat7Lau7Lav7Lax7Lay7Laz7La07La17La27La37La47La57La67La77La87La97La+7La/7LeA7LeB7LeC7LeD7LeF77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3M10ubGVuZ3RoOyArK2opIGlmKERbMTczXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3M11bal1dID0gNDQyODggKyBqOyBkWzQ0Mjg4ICsgal0gPSBEWzE3M11bal07fVxuXHREWzE3NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vey3huy3h+y3iOy3iey3iuy3i+y3jey3juy3j+y3key3kuy3k+y3lOy3ley3luy3l+y3mOy3mey3muy3m+y3nOy3ney3nuy3n+y3oOy3oe+/ve+/ve+/ve+/ve+/ve+/vey3ouy3o+y3pOy3pey3puy3p+y3qey3quy3q+y3rey3ruy3r+y3sey3suy3s+y3tOy3tey3tuy3t+y3uuy3vOy3vuy3v+y4gOy4gey4gu+/ve+/ve+/ve+/ve+/ve+/vey4g+y4hey4huy4h+y4iey4iuy4i+y4jey4juy4j+y4kOy4key4kuy4k+y4ley4luy4l+y4mOy4muy4m+y4nOy4ney4nuy4n+y4ouy4o+y4pey4puy4p+y4qey4quy4q++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzRdLmxlbmd0aDsgKytqKSBpZihEWzE3NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzRdW2pdXSA9IDQ0NTQ0ICsgajsgZFs0NDU0NCArIGpdID0gRFsxNzRdW2pdO31cblx0RFsxNzVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73suKzsuK3suK7suK/suLLsuLTsuLbsuLfsuLjsuLnsuLrsuLvsuLzsuL3suL7suL/suYDsuYHsuYLsuYPsuYTsuYXsuYbsuYfsuYjsuYnvv73vv73vv73vv73vv73vv73suYrsuYvsuYzsuY3suY7suY/suZDsuZHsuZLsuZPsuZTsuZXsuZbsuZfsuZrsuZvsuZ3suZ7suaLsuaPsuaTsuaXsuabsuafsuarsuazvv73vv73vv73vv73vv73vv73sua7sua/subDsubHsubLsubPsubbsubfsubnsubrsubvsub3sub7sub/suoDsuoHsuoLsuoPsuobsuojsuorsuovsuozsuo3suo7suo/supLsupPsupXsupbsupfsupnvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc1XS5sZW5ndGg7ICsraikgaWYoRFsxNzVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc1XVtqXV0gPSA0NDgwMCArIGo7IGRbNDQ4MDAgKyBqXSA9IERbMTc1XVtqXTt9XG5cdERbMTc2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97Lqa7Lqb7Lqc7Lqd7Lqe7Lqf7Lqi7Lqm7Lqn7Lqo7Lqp7Lqq7Lqr7Lqu7Lqv7Lqw7Lqx7Lqy7Lqz7Lq07Lq17Lq27Lq37Lq47Lq57Lq677+977+977+977+977+977+97Lq77Lq87Lq97Lq+7Lq/7LuA7LuC7LuD7LuE7LuF7LuG7LuH7LuI7LuJ7LuK7LuL7LuM7LuN7LuO7LuP7LuQ7LuR7LuS7LuT7LuU7LuV77+977+977+977+977+977+97LuW7LuX7LuY7LuZ7Lua7Lub7Luc7Lud7Lue7Luf7Lug7Luh7Lui7Luj7Lum7Lun7Lup7Luq7Lut7Luu7Luv7Luw7Lux7Luy7Luz7Lu27Lu67Lu77Lu87Lu97Lu+7Lu/6rCA6rCB6rCE6rCH6rCI6rCJ6rCK6rCQ6rCR6rCS6rCT6rCU6rCV6rCW6rCX6rCZ6rCa6rCb6rCc6rCd6rCg6rCk6rCs6rCt6rCv6rCw6rCx6rC46rC56rC86rGA6rGL6rGN6rGU6rGY6rGc6rGw6rGx6rG06rG36rG46rG66rKA6rKB6rKD6rKE6rKF6rKG6rKJ6rKK6rKL6rKM6rKQ6rKU6rKc6rKd6rKf6rKg6rKh6rKo6rKp6rKq6rKs6rKv6rKw6rK46rK56rK76rK86rK96rOB6rOE6rOI6rOM6rOV6rOX6rOg6rOh6rOk6rOn6rOo6rOq6rOs6rOv6rOw6rOx6rOz6rO16rO26rO86rO96rSA6rSE6rSG77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3Nl0ubGVuZ3RoOyArK2opIGlmKERbMTc2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3Nl1bal1dID0gNDUwNTYgKyBqOyBkWzQ1MDU2ICsgal0gPSBEWzE3Nl1bal07fVxuXHREWzE3N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vey8guy8g+y8hey8huy8h+y8iey8iuy8i+y8jOy8jey8juy8j+y8kuy8lOy8luy8l+y8mOy8mey8muy8m+y8ney8nuy8n+y8oey8ouy8o++/ve+/ve+/ve+/ve+/ve+/vey8pey8puy8p+y8qOy8qey8quy8q+y8ruy8suy8s+y8tOy8tey8tuy8t+y8uey8uuy8u+y8vOy8vey8vuy8v+y9gOy9gey9guy9g+y9hO+/ve+/ve+/ve+/ve+/ve+/vey9hey9huy9h+y9iOy9iey9iuy9i+y9jOy9jey9juy9j+y9kOy9key9kuy9k+y9luy9l+y9mey9muy9m+y9ney9nuy9n+y9oOy9oey9ouy9o+y9puy9qOy9quy9q+y9rOq0jOq0jeq0j+q0keq0mOq0nOq0oOq0qeq0rOq0req0tOq0teq0uOq0vOq1hOq1heq1h+q1ieq1kOq1lOq1mOq1oeq1o+q1rOq1req1sOq1s+q1tOq1teq1tuq1u+q1vOq1veq1v+q2geq2guq2iOq2ieq2jOq2kOq2nOq2neq2pOq2t+q3gOq3geq3hOq3iOq3kOq3keq3k+q3nOq3oOq3pOq3uOq3ueq3vOq3v+q4gOq4geq4iOq4ieq4i+q4jeq4lOq4sOq4seq4tOq4t+q4uOq4uuq5gOq5geq5g+q5heq5huq5iuq5jOq5jeq5juq5kOq5lOq5luq5nOq5neq5n+q5oOq5oeq5peq5qOq5qeq5rOq5sOq5uO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzddLmxlbmd0aDsgKytqKSBpZihEWzE3N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzddW2pdXSA9IDQ1MzEyICsgajsgZFs0NTMxMiArIGpdID0gRFsxNzddW2pdO31cblx0RFsxNzhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73sva3sva7sva/svbLsvbPsvbXsvbbsvbfsvbnsvbrsvbvsvbzsvb3svb7svb/svoHsvoLsvoPsvoTsvobsvofsvojsvonsvorsvovsvo3vv73vv73vv73vv73vv73vv73svo7svo/svpDsvpHsvpLsvpPsvpTsvpXsvpbsvpfsvpjsvpnsvprsvpvsvpzsvp3svp7svp/svqDsvqLsvqPsvqTsvqXsvqbsvqfsvqnvv73vv73vv73vv73vv73vv73svqrsvqvsvqzsvq3svq7svq/svrHsvrLsvrPsvrTsvrXsvrbsvrfsvrjsvrnsvrrsvrvsvrzsvr3svr7svr/sv4Dsv4Hsv4Lsv4Psv4Xsv4bsv4fsv4jsv4nsv4rsv4vqubnqubvqubzqub3quoTquoXquozqurzqur3qur7qu4Dqu4Tqu4zqu43qu4/qu5Dqu5Hqu5jqu5nqu5zqu6jqu6vqu63qu7Tqu7jqu7zqvIfqvIjqvI3qvJDqvKzqvK3qvLDqvLLqvLTqvLzqvL3qvL/qvYHqvYLqvYPqvYjqvYnqvZDqvZzqvZ3qvaTqvaXqvbnqvoDqvoTqvojqvpDqvpHqvpXqvpzqvrjqvrnqvrzqv4Dqv4fqv4jqv4nqv4vqv43qv47qv5Tqv5zqv6jqv6nqv7Dqv7Hqv7Tqv7jrgIDrgIHrgITrgIzrgJDrgJTrgJzrgJ3rgKjrgYTrgYXrgYjrgYrrgYzrgY7rgZPrgZTrgZXrgZfrgZnvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc4XS5sZW5ndGg7ICsraikgaWYoRFsxNzhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc4XVtqXV0gPSA0NTU2OCArIGo7IGRbNDU1NjggKyBqXSA9IERbMTc4XVtqXTt9XG5cdERbMTc5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97L+M7L+N7L+O7L+P7L+Q7L+R7L+S7L+T7L+U7L+V7L+W7L+X7L+Y7L+Z7L+a7L+b7L+c7L+d7L+e7L+f7L+i7L+j7L+l7L+m7L+n7L+p77+977+977+977+977+977+97L+q7L+r7L+s7L+t7L+u7L+v7L+y7L+07L+27L+37L+47L+57L+67L+77L+97L++7L+/7YCB7YCC7YCD7YCF7YCG7YCH7YCI7YCJ7YCK77+977+977+977+977+977+97YCL7YCM7YCN7YCO7YCP7YCQ7YCS7YCT7YCU7YCV7YCW7YCX7YCZ7YCa7YCb7YCc7YCd7YCe7YCf7YCg7YCh7YCi7YCj7YCk7YCl7YCm7YCn7YCo7YCp7YCq7YCr7YCs64Gd64G864G964KA64KE64KM64KN64KP64KR64KY64KZ64Ka64Kc64Kf64Kg64Kh64Ki64Ko64Kp64Kr64Ks64Kt64Ku64Kv64Kx64Kz64K064K164K464K864OE64OF64OH64OI64OJ64OQ64OR64OU64OY64Og64Ol64SI64SJ64SL64SM64SQ64SS64ST64SY64SZ64Sb64Sc64Sd64Sj64Sk64Sl64So64Ss64S064S164S364S464S564WA64WB64WE64WI64WQ64WR64WU64WV64WY64Wc64Wg64W464W564W864aA64aC64aI64aJ64aL64aN64aS64aT64aU64aY64ac64ao64eM64eQ64eU64ec64ed77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3OV0ubGVuZ3RoOyArK2opIGlmKERbMTc5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3OV1bal1dID0gNDU4MjQgKyBqOyBkWzQ1ODI0ICsgal0gPSBEWzE3OV1bal07fVxuXHREWzE4MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Aru2Ar+2AsO2Ase2Asu2As+2Atu2At+2Aue2Auu2Au+2Ave2Avu2Av+2BgO2Bge2Bgu2Bg+2Bhu2BiO2Biu2Bi+2BjO2Bje2Bju2Bj++/ve+/ve+/ve+/ve+/ve+/ve2Bke2Bku2Bk+2Ble2Blu2Bl+2Bme2Bmu2Bm+2BnO2Bne2Bnu2Bn+2Boe2Bou2Bo+2BpO2Bpe2Bpu2Bp+2BqO2Bqe2Bqu2Bq+2Bru2Br++/ve+/ve+/ve+/ve+/ve+/ve2Bse2Bsu2Bs+2Bte2Btu2Bt+2BuO2Bue2Buu2Bu+2Bvu2Bv+2CgO2Cgu2Cg+2ChO2Che2Chu2Ch+2CiO2Cie2Ciu2Ci+2CjO2Cje2Cju2Cj+2CkO2Cke2Cku2Ck+2ClOuHn+uHqOuHqeuHrOuHsOuHueuHu+uHveuIhOuIheuIiOuIi+uIjOuIlOuIleuIl+uImeuIoOuItOuIvOuJmOuJnOuJoOuJqOuJqeuJtOuJteuJvOuKhOuKheuKieuKkOuKkeuKlOuKmOuKmeuKmuuKoOuKoeuKo+uKpeuKpuuKquuKrOuKsOuKtOuLiOuLieuLjOuLkOuLkuuLmOuLmeuLm+uLneuLouuLpOuLpeuLpuuLqOuLq+uLrOuLreuLruuLr+uLs+uLtOuLteuLt+uLuOuLueuLuuuLu+uLv+uMgOuMgeuMhOuMiOuMkOuMkeuMk+uMlOuMleuMnOuNlOuNleuNluuNmOuNm+uNnOuNnuuNn+uNpOuNpe+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODBdLmxlbmd0aDsgKytqKSBpZihEWzE4MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODBdW2pdXSA9IDQ2MDgwICsgajsgZFs0NjA4MCArIGpdID0gRFsxODBdW2pdO31cblx0RFsxODFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73tgpXtgpbtgpftgpjtgpntgprtgpvtgpztgp3tgp7tgp/tgqDtgqHtgqLtgqPtgqbtgqftgqntgqrtgqvtgq3tgq7tgq/tgrDtgrHtgrLvv73vv73vv73vv73vv73vv73tgrPtgrbtgrjtgrrtgrvtgrztgr3tgr7tgr/tg4Ltg4Ptg4Xtg4btg4ftg4rtg4vtg4ztg43tg47tg4/tg5Ltg5btg5ftg5jtg5ntg5rvv73vv73vv73vv73vv73vv73tg5vtg57tg5/tg6Htg6Ltg6Ptg6Xtg6btg6ftg6jtg6ntg6rtg6vtg67tg7Ltg7Ptg7Ttg7Xtg7btg7ftg7ntg7rtg7vtg7ztg73tg77tg7/thIDthIHthILthIPthITrjafrjanrjavrja7rjbDrjbHrjbTrjbjrjoDrjoHrjoPrjoTrjoXrjozrjpDrjpTrjqDrjqHrjqjrjqzrj4Trj4Xrj4jrj4vrj4zrj47rj5Drj5Trj5Xrj5frj5nrj5vrj53rj6Drj6Trj6jrj7zrkJDrkJjrkJzrkKDrkKjrkKnrkKvrkLTrkZDrkZHrkZTrkZjrkaDrkaHrkaPrkaXrkazrkoDrkojrkp3rkqTrkqjrkqzrkrXrkrfrkrnrk4Drk4Trk4jrk5Drk5Xrk5zrk53rk6Drk6Prk6Trk6brk6zrk63rk6/rk7Hrk7jrlJTrlJXrlJjrlJvrlJzrlKTrlKXrlKfrlKjrlKnrlKrrlLDrlLHrlLTrlLjvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTgxXS5sZW5ndGg7ICsraikgaWYoRFsxODFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTgxXVtqXV0gPSA0NjMzNiArIGo7IGRbNDYzMzYgKyBqXSA9IERbMTgxXVtqXTt9XG5cdERbMTgyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97YSF7YSG7YSH7YSI7YSJ7YSK7YSL7YSM7YSO7YSP7YSQ7YSR7YSS7YST7YSU7YSV7YSW7YSX7YSY7YSZ7YSa7YSb7YSc7YSd7YSe7YSf77+977+977+977+977+977+97YSg7YSh7YSi7YSj7YSk7YSl7YSm7YSn7YSo7YSp7YSq7YSr7YSs7YSt7YSu7YSv7YSy7YSz7YS17YS27YS37YS57YS77YS87YS97YS+77+977+977+977+977+977+97YS/7YWC7YWG7YWH7YWI7YWJ7YWK7YWL7YWO7YWP7YWR7YWS7YWT7YWV7YWW7YWX7YWY7YWZ7YWa7YWb7YWe7YWg7YWi7YWj7YWk7YWl7YWm7YWn7YWp7YWq7YWr7YWt65WA65WB65WD65WE65WF65WL65WM65WN65WQ65WU65Wc65Wd65Wf65Wg65Wh65ag65ah65ak65ao65aq65ar65aw65ax65az65a065a165a765a865a965eA65eE65eM65eN65eP65eQ65eR65eY65es65iQ65iR65iU65iY65il65is65i065mI65mk65mo65qc65qd65qg65qk65qr65qs65qx65uU65uw65u065u465yA65yB65yF65yo65yp65ys65yv65yw65y465y565y7652E652I652M652U652V652g652k652o652w652x652z652165286529656A656E656M656N656P656Q656R656S656W656X77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4Ml0ubGVuZ3RoOyArK2opIGlmKERbMTgyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4Ml1bal1dID0gNDY1OTIgKyBqOyBkWzQ2NTkyICsgal0gPSBEWzE4Ml1bal07fVxuXHREWzE4M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Fru2Fr+2FsO2Fse2Fsu2Fs+2FtO2Fte2Ftu2Ft+2FuO2Fue2Fuu2Fu+2Fve2Fvu2Fv+2GgO2Gge2Ggu2Gg+2Ghe2Ghu2Gh+2Gie2Giu+/ve+/ve+/ve+/ve+/ve+/ve2Gi+2GjO2Gje2Gju2Gj+2GkO2Gke2Gku2Gk+2GlO2Gle2Glu2Gl+2GmO2Gme2Gmu2Gm+2GnO2Gne2Gnu2Gn+2Gou2Go+2Gpe2Gpu2Gp++/ve+/ve+/ve+/ve+/ve+/ve2Gqe2Gqu2Gq+2GrO2Gre2Gru2Gr+2Gsu2GtO2Gtu2Gt+2GuO2Gue2Gu+2Gve2Gvu2Gv+2Hge2Hgu2Hg+2HhO2Hhe2Hhu2Hh+2HiO2Hie2Hiu2Hi+2HjO2Hje2Hju2Hj+uemOuemeuenOueoOueqOueqeueq+uerOuereuetOueteueuOufh+ufieufrOufreufsOuftOufvOufveufv+uggOuggeugh+ugiOugieugjOugkOugmOugmeugm+ugneugpOugpeugqOugrOugtOugteugt+uguOugueuhgOuhhOuhkeuhk+uhnOuhneuhoOuhpOuhrOuhreuhr+uhseuhuOuhvOuijeuiqOuisOuitOuiuOujgOujgeujg+ujheujjOujkOujlOujneujn+ujoeujqOujqeujrOujsOujuOujueuju+ujveukhOukmOukoOukvOukveulgOulhOuljOulj+ulkeulmOulmeulnOuloOulqOulqe+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODNdLmxlbmd0aDsgKytqKSBpZihEWzE4M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODNdW2pdXSA9IDQ2ODQ4ICsgajsgZFs0Njg0OCArIGpdID0gRFsxODNdW2pdO31cblx0RFsxODRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73th5Dth5Hth5Lth5Pth5Tth5Xth5bth5fth5nth5rth5vth5zth53th57th5/th6Dth6Hth6Lth6Pth6Tth6Xth6bth6fth6jth6nth6rvv73vv73vv73vv73vv73vv73th6vth6zth63th67th6/th7Dth7Hth7Lth7Pth7Xth7bth7fth7nth7rth7vth7zth73th77th7/tiIDtiIHtiILtiIPtiITtiIXtiIbvv73vv73vv73vv73vv73vv73tiIjtiIrtiIvtiIztiI3tiI7tiI/tiJHtiJLtiJPtiJTtiJXtiJbtiJftiJjtiJntiJrtiJvtiJztiJ3tiJ7tiJ/tiKDtiKHtiKLtiKPtiKTtiKXtiKbtiKftiKjtiKnrpavrpa3rpbTrpbXrpbjrpbzrpoTrpoXrpofrponrporrpo3rpo7rpqzrpq3rprDrprTrprzrpr3rpr/rp4Hrp4jrp4nrp4zrp47rp4/rp5Drp5Hrp5Lrp5jrp5nrp5vrp53rp57rp6Hrp6Prp6Trp6Xrp6jrp6zrp7Trp7Xrp7frp7jrp7nrp7rrqIDrqIHrqIjrqJXrqLjrqLnrqLzrqYDrqYLrqYjrqYnrqYvrqY3rqY7rqZPrqZTrqZXrqZjrqZzrqaTrqaXrqafrqajrqanrqbDrqbHrqbTrqbjrqoPrqoTrqoXrqofrqozrqqjrqqnrqqvrqqzrqrDrqrLrqrjrqrnrqrvrqr3rq4Trq4jrq5jrq5nrq7zvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg0XS5sZW5ndGg7ICsraikgaWYoRFsxODRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg0XVtqXV0gPSA0NzEwNCArIGo7IGRbNDcxMDQgKyBqXSA9IERbMTg0XVtqXTt9XG5cdERbMTg1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97Yiq7Yir7Yiu7Yiv7Yix7Yiy7Yiz7Yi17Yi27Yi37Yi47Yi57Yi67Yi77Yi+7YmA7YmC7YmD7YmE7YmF7YmG7YmH7YmJ7YmK7YmL7YmM77+977+977+977+977+977+97YmN7YmO7YmP7YmQ7YmR7YmS7YmT7YmU7YmV7YmW7YmX7YmY7YmZ7Yma7Ymb7Ymd7Yme7Ymf7Ymg7Ymh7Ymi7Ymj7Yml7Ymm7Ymn7Ymo77+977+977+977+977+977+97Ymp7Ymq7Ymr7Yms7Ymt7Ymu7Ymv7Ymw7Ymx7Ymy7Ymz7Ym07Ym17Ym27Ym37Ym47Ym57Ym67Ym77Ym87Ym97Ym+7Ym/7YqC7YqD7YqF7YqG7YqH7YqJ7YqK7YqL7YqM66yA66yE66yN66yP66yR66yY66yc66yg66yp66yr66y066y166y266y466y766y866y966y+662E662F662H662J662N662P662Q662U662Y662h662j662s666I666M666Q666k666o666s6660666366+A66+E66+I66+Q66+T66+466+566+866+/67CA67CC67CI67CJ67CL67CM67CN67CP67CR67CU67CV67CW67CX67CY67Cb67Cc67Cd67Ce67Cf67Ck67Cl67Cn67Cp67Ct67Cw67Cx67C067C467GA67GB67GD67GE67GF67GJ67GM67GN67GQ67Gd67KE67KF67KI67KL67KM67KO67KU67KV67KX77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4NV0ubGVuZ3RoOyArK2opIGlmKERbMTg1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4NV1bal1dID0gNDczNjAgKyBqOyBkWzQ3MzYwICsgal0gPSBEWzE4NV1bal07fVxuXHREWzE4Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Kje2Kju2Kj+2Kku2Kk+2KlO2Klu2Kl+2KmO2Kme2Kmu2Km+2Kne2Knu2Kn+2Koe2Kou2Ko+2Kpe2Kpu2Kp+2KqO2Kqe2Kqu2Kq+2Kre+/ve+/ve+/ve+/ve+/ve+/ve2Kru2Kr+2KsO2Ksu2Ks+2KtO2Kte2Ktu2Kt+2Kuu2Ku+2Kve2Kvu2Lge2Lg+2LhO2Lhe2Lhu2Lh+2Liu2LjO2Lje2Lju2Lj+2LkO2Lke+/ve+/ve+/ve+/ve+/ve+/ve2Lku2Lk+2Lle2Llu2Ll+2Lme2Lmu2Lm+2Lne2Lnu2Ln+2LoO2Loe2Lou2Lo+2Lpu2Lp+2LqO2Lqe2Lqu2Lq+2LrO2Lre2Lru2Lr+2Lsu2Ls+2Lte2Ltu2Lt+2Lue2LuuuymeuymuuyoOuyoeuypOuyp+uyqOuysOuyseuys+uytOuyteuyvOuyveuzgOuzhOuzjeuzj+uzkOuzkeuzleuzmOuznOuztOuzteuztuuzuOuzvOu0hOu0heu0h+u0ieu0kOu0lOu0pOu0rOu1gOu1iOu1ieu1jOu1kOu1mOu1meu1pOu1qOu2gOu2geu2hOu2h+u2iOu2ieu2iuu2kOu2keu2k+u2leu2meu2muu2nOu2pOu2sOu2uOu3lOu3leu3mOu3nOu3qeu3sOu3tOu3uOu4gOu4g+u4heu4jOu4jeu4kOu4lOu4nOu4neu4n+u5hOu5heu5iOu5jOu5juu5lOu5leu5l+u5meu5muu5m+u5oOu5oeu5pO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODZdLmxlbmd0aDsgKytqKSBpZihEWzE4Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODZdW2pdXSA9IDQ3NjE2ICsgajsgZFs0NzYxNiArIGpdID0gRFsxODZdW2pdO31cblx0RFsxODddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ti7vti7zti73ti77ti7/tjILtjITtjIbtjIftjIjtjIntjIrtjIvtjI/tjJHtjJLtjJPtjJXtjJftjJjtjJntjJrtjJvtjJ7tjKLtjKPvv73vv73vv73vv73vv73vv73tjKTtjKbtjKftjKrtjKvtjK3tjK7tjK/tjLHtjLLtjLPtjLTtjLXtjLbtjLftjLrtjL7tjL/tjYDtjYHtjYLtjYPtjYbtjYftjYjtjYnvv73vv73vv73vv73vv73vv73tjYrtjYvtjYztjY3tjY7tjY/tjZDtjZHtjZLtjZPtjZTtjZXtjZbtjZftjZjtjZntjZrtjZvtjZztjZ3tjZ7tjZ/tjaDtjaHtjaLtjaPtjaTtjaXtjabtjaftjajtjanruajruarrubDrubHrubPrubTrubXrubvrubzrub3ruoDruoTruozruo3ruo/rupDrupHrupjrupnruqjru5Dru5Hru5Tru5fru5jru6Dru6Pru6Tru6Xru6zrvIHrvIjrvInrvJjrvJnrvJvrvJzrvJ3rvYDrvYHrvYTrvYjrvZDrvZHrvZXrvpTrvrDrv4Xrv4zrv43rv5Drv5Trv5zrv5/rv6HsgLzsgZHsgZjsgZzsgaDsgajsgansgpDsgpHsgpTsgpjsgqDsgqHsgqPsgqXsgqzsgq3sgq/sgrDsgrPsgrTsgrXsgrbsgrzsgr3sgr/sg4Dsg4Hsg4Xsg4jsg4nsg4zsg5Dsg5jsg5nsg5vsg5zsg53sg6Tvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg3XS5sZW5ndGg7ICsraikgaWYoRFsxODddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg3XVtqXV0gPSA0Nzg3MiArIGo7IGRbNDc4NzIgKyBqXSA9IERbMTg3XVtqXTt9XG5cdERbMTg4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97Y2q7Y2r7Y2s7Y2t7Y2u7Y2v7Y2w7Y2x7Y2y7Y2z7Y207Y217Y227Y237Y247Y257Y267Y277Y2+7Y2/7Y6B7Y6C7Y6D7Y6F7Y6G7Y6H77+977+977+977+977+977+97Y6I7Y6J7Y6K7Y6L7Y6O7Y6S7Y6T7Y6U7Y6V7Y6W7Y6X7Y6a7Y6b7Y6d7Y6e7Y6f7Y6h7Y6i7Y6j7Y6k7Y6l7Y6m7Y6n7Y6q7Y6s7Y6u77+977+977+977+977+977+97Y6v7Y6w7Y6x7Y6y7Y6z7Y617Y627Y637Y657Y667Y677Y697Y6+7Y6/7Y+A7Y+B7Y+C7Y+D7Y+G7Y+H7Y+K7Y+L7Y+M7Y+N7Y+O7Y+P7Y+R7Y+S7Y+T7Y+U7Y+V7Y+W7IOl7IOo7IOs7IO07IO17IO37IO57ISA7ISE7ISI7ISQ7ISV7ISc7ISd7ISe7ISf7ISg7ISj7ISk7ISm7ISn7ISs7ISt7ISv7ISw7ISx7IS27IS47IS57IS87IWA7IWI7IWJ7IWL7IWM7IWN7IWU7IWV7IWY7IWc7IWk7IWl7IWn7IWo7IWp7IWw7IW07IW47IaF7IaM7IaN7IaO7IaQ7IaU7IaW7Iac7Iad7Iaf7Iah7Ial7Iao7Iap7Ias7Iaw7Ia97IeE7IeI7IeM7IeU7IeX7IeY7Ieg7Iek7Ieo7Iew7Iex7Iez7Ie87Ie97IiA7IiE7IiM7IiN7IiP7IiR7IiY7IiZ7Iic7Iif7Iig7Iio7Iip7Iir7Iit77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4OF0ubGVuZ3RoOyArK2opIGlmKERbMTg4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4OF1bal1dID0gNDgxMjggKyBqOyBkWzQ4MTI4ICsgal0gPSBEWzE4OF1bal07fVxuXHREWzE4OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Pl+2Pme2Pmu2Pm+2PnO2Pne2Pnu2Pn+2PoO2Pou2PpO2Ppe2Ppu2Pp+2PqO2Pqe2Pqu2Pq+2Pru2Pr+2Pse2Psu2Ps+2Pte2Ptu2Pt++/ve+/ve+/ve+/ve+/ve+/ve2PuO2Pue2Puu2Pu+2Pvu2QgO2Qgu2Qg+2QhO2Qhe2Qhu2Qh+2Qie2Qiu2Qi+2QjO2Qje2Qju2Qj+2QkO2Qke2Qku2Qk+2QlO2Qle2Qlu+/ve+/ve+/ve+/ve+/ve+/ve2Ql+2QmO2Qme2Qmu2Qm+2QnO2Qnu2Qn+2QoO2Qoe2Qou2Qo+2QpO2Qpe2Qpu2Qp+2QqO2Qqe2Qqu2Qq+2QrO2Qre2Qru2Qr+2QsO2Qse2Qsu2Qs+2QtO2Qte2Qtu2Qt+yIr+yIseyIsuyItOyJiOyJkOyJkeyJlOyJmOyJoOyJpeyJrOyJreyJsOyJtOyJvOyJveyJv+yKgeyKiOyKieyKkOyKmOyKm+yKneyKpOyKpeyKqOyKrOyKreyKtOyKteyKt+yKueyLnOyLneyLoOyLo+yLpOyLq+yLrOyLreyLr+yLseyLtuyLuOyLueyLu+yLvOyMgOyMiOyMieyMjOyMjeyMk+yMlOyMleyMmOyMnOyMpOyMpeyMqOyMqeyNheyNqOyNqeyNrOyNsOyNsuyNuOyNueyNvOyNveyOhOyOiOyOjOyPgOyPmOyPmeyPnOyPn+yPoOyPouyPqOyPqeyPreyPtOyPteyPuOyQiOyQkOyQpOyQrOyQsO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODldLmxlbmd0aDsgKytqKSBpZihEWzE4OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODldW2pdXSA9IDQ4Mzg0ICsgajsgZFs0ODM4NCArIGpdID0gRFsxODldW2pdO31cblx0RFsxOTBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73tkLjtkLntkLrtkLvtkLztkL3tkL7tkL/tkYHtkYLtkYPtkYXtkYbtkYftkYjtkYntkYrtkYvtkYztkY3tkY7tkY/tkZDtkZHtkZLtkZPvv73vv73vv73vv73vv73vv73tkZTtkZXtkZbtkZftkZjtkZntkZrtkZvtkZ3tkZ7tkZ/tkaHtkaLtkaPtkaXtkabtkaftkajtkantkartkavtkaztka7tkbDtkbHtkbLvv73vv73vv73vv73vv73vv73tkbPtkbTtkbXtkbbtkbftkbrtkbvtkb3tkb7tkoHtkoPtkoTtkoXtkobtkoftkortkoztko7tko/tkpDtkpHtkpLtkpPtkpXtkpbtkpftkpjtkpntkprtkpvtkpztkp3skLTskLzskL3skYjskaTskaXskajskazskbTskbXskbnskoDskpTskpzskrjskrzsk6nsk7Dsk7Hsk7Tsk7jsk7rsk7/slIDslIHslIzslJDslJTslJzslKjslKnslKzslLDslLjslLnslLvslL3slYTslYXslYjslYnslYrslYzslY3slY7slZPslZTslZXslZfslZjslZnslZ3slZ7slaDslaHslaTslajslbDslbHslbPslbTslbXslbzslb3sloDsloTslofslozslo3slo/slpHslpXslpfslpjslpzslqDslqnslrTslrXslrjslrnslrvslrzslr3slr7sl4Tsl4Xsl4bsl4fsl4jsl4nsl4rsl4zsl47vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTkwXS5sZW5ndGg7ICsraikgaWYoRFsxOTBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTkwXVtqXV0gPSA0ODY0MCArIGo7IGRbNDg2NDAgKyBqXSA9IERbMTkwXVtqXTt9XG5cdERbMTkxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97ZKe7ZKf7ZKg7ZKh7ZKi7ZKj7ZKk7ZKl7ZKm7ZKn7ZKo7ZKq7ZKr7ZKs7ZKt7ZKu7ZKv7ZKw7ZKx7ZKy7ZKz7ZK07ZK17ZK27ZK37ZK477+977+977+977+977+977+97ZK57ZK67ZK77ZK87ZK97ZK+7ZK/7ZOA7ZOB7ZOC7ZOD7ZOE7ZOF7ZOG7ZOH7ZOI7ZOJ7ZOK7ZOL7ZON7ZOO7ZOP7ZOR7ZOS7ZOT7ZOV77+977+977+977+977+977+97ZOW7ZOX7ZOY7ZOZ7ZOa7ZOb7ZOd7ZOe7ZOg7ZOh7ZOi7ZOj7ZOk7ZOl7ZOm7ZOn7ZOp7ZOq7ZOr7ZOt7ZOu7ZOv7ZOx7ZOy7ZOz7ZO07ZO17ZO27ZO37ZO57ZO67ZO87JeQ7JeR7JeU7JeY7Jeg7Jeh7Jej7Jel7Jes7Jet7Jeu7Jew7Je07Je27Je37Je87Je97Je+7Je/7JiA7JiB7JiF7JiG7JiH7JiI7JiM7JiQ7JiY7JiZ7Jib7Jic7Jik7Jil7Jio7Jis7Jit7Jiu7Jiw7Jiz7Ji07Ji17Ji37Ji57Ji77JmA7JmB7JmE7JmI7JmQ7JmR7JmT7JmU7JmV7Jmc7Jmd7Jmg7Jms7Jmv7Jmx7Jm47Jm57Jm87JqA7JqI7JqJ7JqL7JqN7JqU7JqV7JqY7Jqc7Jqk7Jql7Jqn7Jqp7Jqw7Jqx7Jq07Jq47Jq57Jq67JuA7JuB7JuD7JuF7JuM7JuN7JuQ7JuU7Juc7Jud7Jug7Juh7Juo77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5MV0ubGVuZ3RoOyArK2opIGlmKERbMTkxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5MV1bal1dID0gNDg4OTYgKyBqOyBkWzQ4ODk2ICsgal0gPSBEWzE5MV1bal07fVxuXHREWzE5Ml0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Tvu2Tv+2UgO2Uge2Ugu2Ug+2Uhe2Uhu2Uh+2Uie2Uiu2Ui+2Uje2Uju2Uj+2UkO2Uke2Uku2Uk+2Ulu2UmO2Ume2Umu2Um+2UnO2Une+/ve+/ve+/ve+/ve+/ve+/ve2Unu2Un+2UoO2Uoe2Uou2Uo+2UpO2Upe2Upu2Up+2UqO2Uqe2Uqu2Uq+2UrO2Ure2Uru2Ur+2UsO2Use2Usu2Us+2UtO2Ute2Utu2Ut++/ve+/ve+/ve+/ve+/ve+/ve2UuO2Uue2Uuu2Uu+2Uvu2Uv+2Vge2Vgu2Vg+2Vhe2Vhu2Vh+2ViO2Vie2Viu2Vi+2Vju2VkO2Vku2Vk+2VlO2Vle2Vlu2Vl+2Vmu2Vm+2Vne2Vnu2Vn+2Voe2Vou2Vo+ybqeybrOybsOybuOybueybveychOycheyciOycjOyclOycleycl+ycmeycoOycoeycpOycqOycsOycseycs+ycteyct+ycvOycveydgOydhOydiuydjOydjeydj+ydkeydkuydk+ydlOydleydluydl+ydmOydnOydoOydqOydq+ydtOydteyduOydvOydveydvuyeg+yehOyeheyeh+yeiOyeieyeiuyejuyekOyekeyelOyeluyel+yemOyemuyeoOyeoeyeo+yepOyepeyepuyerOyereyesOyetOyevOyeveyev+yfgOyfgeyfiOyfieyfjOyfjuyfkOyfmOyfneyfpOyfqOyfrOyggOyggeyghOygiOygiu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTJdLmxlbmd0aDsgKytqKSBpZihEWzE5Ml1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTJdW2pdXSA9IDQ5MTUyICsgajsgZFs0OTE1MiArIGpdID0gRFsxOTJdW2pdO31cblx0RFsxOTNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73tlaTtlabtlaftlartlaztla7tla/tlbDtlbHtlbLtlbPtlbbtlbftlbntlbrtlbvtlb3tlb7tlb/tloDtloHtloLtloPtlobtlortlovvv73vv73vv73vv73vv73vv73tloztlo3tlo7tlo/tlpHtlpLtlpPtlpTtlpXtlpbtlpftlpjtlpntlprtlpvtlpztlp3tlp7tlp/tlqDtlqHtlqLtlqPtlqTtlqbtlqfvv73vv73vv73vv73vv73vv73tlqjtlqntlqrtlqvtlqztlq3tlq7tlq/tlrDtlrHtlrLtlrPtlrTtlrXtlrbtlrftlrjtlrntlrrtlrvtlrztlr3tlr7tlr/tl4Dtl4Htl4Ltl4Ptl4Ttl4Xtl4btl4fsoJDsoJHsoJPsoJXsoJbsoJzsoJ3soKDsoKTsoKzsoK3soK/soLHsoLjsoLzsoYDsoYjsoYnsoYzsoY3soZTsobDsobHsobTsobjsobrsooDsooHsooPsooXsoobsoofsoovsoozsoo3sopTsop3sop/soqHsoqjsorzsor3so4Tso4jso4zso5Tso5Xso5fso5nso6Dso6Hso6Tso7Xso7zso73spIDspITspIXspIbspIzspI3spI/spJHspJjspKzspLTspZDspZHspZTspZjspaDspaHspaPspazspbDspbTspbzspojsponspozsppDsppjsppnsppvspp3sp4Dsp4Hsp4Tsp4fsp4jsp4rsp5Dsp5Hsp5Pvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTkzXS5sZW5ndGg7ICsraikgaWYoRFsxOTNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTkzXVtqXV0gPSA0OTQwOCArIGo7IGRbNDk0MDggKyBqXSA9IERbMTkzXVtqXTt9XG5cdERbMTk0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97ZeK7ZeL7ZeN7ZeO7ZeP7ZeR7ZeT7ZeU7ZeV7ZeW7ZeX7Zea7Zec7Zee7Zef7Zeg7Zeh7Zei7Zej7Zem7Zen7Zep7Zeq7Zer7Zet7Zeu77+977+977+977+977+977+97Zev7Zew7Zex7Zey7Zez7Ze27Ze47Ze67Ze77Ze87Ze97Ze+7Ze/7ZiC7ZiD7ZiF7ZiG7ZiH7ZiJ7ZiK7ZiL7ZiM7ZiN7ZiO7ZiP7ZiS77+977+977+977+977+977+97ZiW7ZiX7ZiY7ZiZ7Zia7Zib7Zid7Zie7Zif7Zih7Zii7Zij7Zil7Zim7Zin7Zio7Zip7Ziq7Zir7Zis7Ziu7Ziv7Ziw7Zix7Ziy7Ziz7Zi07Zi17Zi27Zi37Zi67Zi77KeV7KeW7KeZ7Kea7Kec7Ked7Keg7Kei7Kek7Ken7Kes7Ket7Kev7Kew7Kex7Ke47Ke57Ke87KiA7KiI7KiJ7KiL7KiM7KiN7KiU7KiY7Kip7KmM7KmN7KmQ7KmU7Kmc7Kmd7Kmf7Kmg7Kmh7Kmo7Km97KqE7KqY7Kq87Kq97KuA7KuE7KuM7KuN7KuP7KuR7KuT7KuY7KuZ7Kug7Kus7Ku07KyI7KyQ7KyU7KyY7Kyg7Kyh7K2B7K2I7K2J7K2M7K2Q7K2Y7K2Z7K2d7K2k7K247K257K6c7K647K+U7K+k7K+n7K+p7LCM7LCN7LCQ7LCU7LCc7LCd7LCh7LCi7LCn7LCo7LCp7LCs7LCu7LCw7LC47LC57LC777+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5NF0ubGVuZ3RoOyArK2opIGlmKERbMTk0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5NF1bal1dID0gNDk2NjQgKyBqOyBkWzQ5NjY0ICsgal0gPSBEWzE5NF1bal07fVxuXHREWzE5NV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2Yve2Yvu2Yv+2Zge2Zgu2Zg+2ZhO2Zhu2Zh+2Ziu2ZjO2Zju2Zj+2ZkO2Zku2Zk+2Zlu2Zl+2Zme2Zmu2Zm+2Zne2Znu2Zn+2ZoO2Zoe+/ve+/ve+/ve+/ve+/ve+/ve2Zou2Zo+2ZpO2Zpe2Zpu2ZqO2Zqu2Zq+2ZrO2Zre2Zru2Zr+2Zsu2Zs+2Zte2Ztu2Zt+2ZuO2Zue2Zuu2Zu+2ZvO2Zve2Zvu2Zv+2agO+/ve+/ve+/ve+/ve+/ve+/ve2age2agu2ahO2ahu2ah+2aiO2aie2aiu2ai+2aju2aj+2ake2aku2ak+2ale2alu2al+2amO2ame2amu2am+2anO2anu2aoO2aou2ao+2apO2ape2apu2ap+2aqe2aquywvOywveywvuyxhOyxheyxiOyxjOyxlOyxleyxl+yxmOyxmeyxoOyxpOyxpuyxqOyxsOyxteyymOyymeyynOyyoOyyqOyyqeyyq+yyrOyyreyytOyyteyyuOyyvOyzhOyzheyzh+yzieyzkOyzlOyzpOyzrOyzsOy0gey0iOy0iey0jOy0kOy0mOy0mey0m+y0ney0pOy0qOy0rOy0uey1nOy1oOy1pOy1rOy1rey1r+y1sey1uOy2iOy2lOy2ley2mOy2nOy2pOy2pey2p+y2qey2sOy3hOy3jOy3kOy3qOy3rOy3sOy3uOy3uey3u+y3vey4hOy4iOy4jOy4lOy4mey4oOy4oey4pOy4qOy4sOy4sey4s+y4te+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTVdLmxlbmd0aDsgKytqKSBpZihEWzE5NV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTVdW2pdXSA9IDQ5OTIwICsgajsgZFs0OTkyMCArIGpdID0gRFsxOTVdW2pdO31cblx0RFsxOTZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73tmqvtmq3tmq7tmq/tmrHtmrLtmrPtmrTtmrXtmrbtmrftmrjtmrrtmrztmr3tmr7tmr/tm4Dtm4Htm4Ltm4Ptm4btm4ftm4ntm4rtm4vvv73vv73vv73vv73vv73vv73tm43tm47tm4/tm5Dtm5Ltm5Ptm5Xtm5btm5jtm5rtm5vtm5ztm53tm57tm5/tm6Htm6Ltm6Ptm6Xtm6btm6ftm6ntm6rtm6vtm6ztm63vv73vv73vv73vv73vv73vv73tm67tm6/tm7Htm7Ltm7Ptm7Ttm7btm7ftm7jtm7ntm7rtm7vtm77tm7/tnIHtnILtnIPtnIXtnIbtnIftnIjtnIntnIrtnIvtnIztnI3tnI7tnI/tnJDtnJLtnJPtnJTsuZjsuZnsuZzsuZ/suaDsuaHsuajsuansuavsua3subTsubXsubjsubzsuoTsuoXsuofsuonsupDsupHsupTsupjsuqDsuqHsuqPsuqTsuqXsuqzsuq3su4Hsu6Tsu6Xsu6jsu6vsu6zsu7Tsu7Xsu7fsu7jsu7nsvIDsvIHsvITsvIjsvJDsvJHsvJPsvJXsvJzsvKDsvKTsvKzsvK3svK/svLDsvLHsvLjsvZTsvZXsvZjsvZzsvaTsvaXsvafsvansvbDsvbHsvbTsvbjsvoDsvoXsvozsvqHsvqjsvrDsv4Tsv6Dsv6Hsv6Tsv6jsv7Dsv7Hsv7Psv7Xsv7ztgIDtgITtgJHtgJjtgK3tgLTtgLXtgLjtgLzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk2XS5sZW5ndGg7ICsraikgaWYoRFsxOTZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk2XVtqXV0gPSA1MDE3NiArIGo7IGRbNTAxNzYgKyBqXSA9IERbMTk2XVtqXTt9XG5cdERbMTk3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+97ZyV7ZyW7ZyX7Zya7Zyb7Zyd7Zye7Zyf7Zyh7Zyi7Zyj7Zyk7Zyl7Zym7Zyn7Zyq7Zys7Zyu7Zyv7Zyw7Zyx7Zyy7Zyz7Zy27Zy37Zy577+977+977+977+977+977+97Zy67Zy77Zy97Zy+7Zy/7Z2A7Z2B7Z2C7Z2D7Z2F7Z2G7Z2I7Z2K7Z2L7Z2M7Z2N7Z2O7Z2P7Z2S7Z2T7Z2V7Z2a7Z2b7Z2c7Z2d7Z2e77+977+977+977+977+977+97Z2f7Z2i7Z2k7Z2m7Z2n7Z2o7Z2q7Z2r7Z2t7Z2u7Z2v7Z2x7Z2y7Z2z7Z217Z227Z237Z247Z257Z267Z277Z2+7Z2/7Z6A7Z6C7Z6D7Z6E7Z6F7Z6G7Z6H7Z6K7Z6L7YGE7YGF7YGH7YGJ7YGQ7YGU7YGY7YGg7YGs7YGt7YGw7YG07YG87YG97YKB7YKk7YKl7YKo7YKs7YK07YK17YK37YK57YOA7YOB7YOE7YOI7YOJ7YOQ7YOR7YOT7YOU7YOV7YOc7YOd7YOg7YOk7YOs7YOt7YOv7YOw7YOx7YO47YSN7YSw7YSx7YS07YS47YS67YWA7YWB7YWD7YWE7YWF7YWM7YWN7YWQ7YWU7YWc7YWd7YWf7YWh7YWo7YWs7YW87YaE7YaI7Yag7Yah7Yak7Yao7Yaw7Yax7Yaz7Ya17Ya67Ya87YeA7YeY7Ye07Ye47YiH7YiJ7YiQ7Yis7Yit7Yiw7Yi07Yi87Yi97Yi/7YmB7YmI7Ymc77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5N10ubGVuZ3RoOyArK2opIGlmKERbMTk3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5N11bal1dID0gNTA0MzIgKyBqOyBkWzUwNDMyICsgal0gPSBEWzE5N11bal07fVxuXHREWzE5OF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2eje2eju2ej+2eke2eku2ek+2elO2ele2elu2el+2emu2enO2enu2en+2eoO2eoe2eou2eo++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve2JpO2KgO2Kge2KhO2KiO2KkO2Kke2Kle2KnO2KoO2KpO2KrO2Kse2KuO2Kue2KvO2Kv+2LgO2Lgu2LiO2Lie2Li+2LlO2LmO2LnO2LpO2Lpe2LsO2Lse2LtO2LuO2MgO2Mge2Mg+2Mhe2MjO2Mje2Mju2MkO2MlO2Mlu2MnO2Mne2Mn+2MoO2Moe2Mpe2MqO2Mqe2MrO2MsO2MuO2Mue2Mu+2MvO2Mve2NhO2Nhe2NvO2Nve2OgO2OhO2OjO2Oje2Oj+2OkO2Oke2OmO2Ome2OnO2OoO2OqO2Oqe2Oq+2Ore2OtO2OuO2OvO2PhO2Phe2PiO2Pie2PkO2PmO2Poe2Po+2PrO2Pre2PsO2PtO2PvO2Pve2Pv+2Qge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOThdLmxlbmd0aDsgKytqKSBpZihEWzE5OF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOThdW2pdXSA9IDUwNjg4ICsgajsgZFs1MDY4OCArIGpdID0gRFsxOThdW2pdO31cblx0RFsxOTldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73tkIjtkJ3tkYDtkYTtkZztkaDtkaTtka3tka/tkbjtkbntkbztkb/tkoDtkoLtkojtkontkovtko3tkpTtkqntk4ztk5Dtk5Ttk5ztk5/tk6jtk6ztk7Dtk7jtk7vtk73tlITtlIjtlIztlJTtlJXtlJftlLztlL3tlYDtlYTtlYztlY3tlY/tlZHtlZjtlZntlZztlaDtlaXtlajtlantlavtla3tlbTtlbXtlbjtlbztloTtloXtloftlojtlontlpDtlqXtl4jtl4ntl4ztl5Dtl5Ltl5jtl5ntl5vtl53tl6Ttl6Xtl6jtl6ztl7Ttl7Xtl7ftl7ntmIDtmIHtmITtmIjtmJDtmJHtmJPtmJTtmJXtmJztmKDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk5XS5sZW5ndGg7ICsraikgaWYoRFsxOTldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk5XVtqXV0gPSA1MDk0NCArIGo7IGRbNTA5NDQgKyBqXSA9IERbMTk5XVtqXTt9XG5cdERbMjAwXSA9IFwiik7Zit7Zi47Zi57Zi87ZmA7ZmF7ZmI7ZmJ7ZmL7ZmN7ZmR7ZmU7ZmV7ZmY7Zmc7Zmn7Zmp7Zmw7Zmx7Zm07ZqD7ZqF7ZqM7ZqN7ZqQ7ZqU7Zqd7Zqf7Zqh7Zqo7Zqs7Zqw7Zq57Zq77ZuE7ZuF7ZuI7ZuM7ZuR7ZuU7ZuX7ZuZ7Zug7Zuk7Zuo7Zuw7Zu17Zu87Zu97ZyA7ZyE7ZyR7ZyY7ZyZ7Zyc7Zyg7Zyo7Zyp7Zyr7Zyt7Zy07Zy17Zy47Zy87Z2E7Z2H7Z2J7Z2Q7Z2R7Z2U7Z2W7Z2X7Z2Y7Z2Z7Z2g7Z2h7Z2j7Z2l7Z2p7Z2s7Z2w7Z207Z287Z297Z6B7Z6I7Z6J7Z6M7Z6Q7Z6Y7Z6Z7Z6b7Z6d77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwMF0ubGVuZ3RoOyArK2opIGlmKERbMjAwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwMF1bal1dID0gNTEyMDAgKyBqOyBkWzUxMjAwICsgal0gPSBEWzIwMF1bal07fVxuXHREWzIwMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veS8veS9s+WBh+WDueWKoOWPr+WRteWTpeWYieWrgeWutuaah+aetuaet+afr+atjOePgueXgueovOiLm+iMhOihl+iiiOiotuiziOi3j+i7u+i/pumnleWIu+WNtOWQhOaBquaFpOauvOePj+iEmuimuuinkumWo+S+g+WIiuWivuWluOWnpuW5suW5ueaHh+aPgOadhuafrOahv+a+l+eZjueci+ejteeoiOerv+ewoeiCneiJruiJseirq+mWk+S5q+WWneabt+a4tOeio+erreiRm+ikkOidjumeqOWLmOWdjuWgquW1jOaEn+aGvuaIoeaVouafkeaphOa4m+eUmOeWs+ebo+eesOe0uumCr+mRkemRkum+le+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDJdLmxlbmd0aDsgKytqKSBpZihEWzIwMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDJdW2pdXSA9IDUxNzEyICsgajsgZFs1MTcxMiArIGpdID0gRFsyMDJdW2pdO31cblx0RFsyMDNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ljKPlsqznlLLog5vpiYDplpjliZvloIjlp5zlsqHltJflurflvLrlvYrmhbfmsZ/nlbrnlobns6DntbPntrHnvozohZToiKHolpHopYHorJvpi7zpmY3psYfku4vku7flgIvlh7HloY/mhLfmhL7mhajmlLnmp6rmvJHnlqXnmobnm5bnrofoiqXok4vvpIDpjqfplovlloDlrqLlnZHvpIHnsrPnvrnphrXlgKjljrvlsYXlt6jmi5Lmja7mk5rmk6fmuKDngqznpZvot53ouJ7vpILpgb3piYXpi7jkub7ku7blgaXlt77lu7rmhIbmpZfohbHomZTouYfpjbXpqKvkuZ7lgpHmnbDmoYDlhInlio3lipLmqqLvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjAzXS5sZW5ndGg7ICsraikgaWYoRFsyMDNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjAzXVtqXV0gPSA1MTk2OCArIGo7IGRbNTE5NjggKyBqXSA9IERbMjAzXVtqXTt9XG5cdERbMjA0XSA9IFwiiQ6buU5Yqr5oCv6L+y5YGI5oap5o+t5pOK5qC85qqE5r+A6IaI6Kah6ZqU5aCF54m954qs55SE57W557mt6IKp6KaL6K206YGj6bWR5oqJ5rG65r2U57WQ57y66Kij5YW85oWK566d6KyZ6YmX6Y6M5Lqs5L+T5YCe5YK+5YSG5YuB5YuN5Y2/5Z2w5aKD5bqa5b6R5oW25oas5pOO5pWs5pmv5pq75pu05qKX5raH54KF54Ox55Kf55Kl55OK55eZ56Gs56Os56uf56u257WF57aT6ICV6IC/6ISb6I6W6K2m6LyV6YCV6Y+h6aCD6aC46ama6a+o5L+C5ZWT5aC65aWR5a2j5bGG5oK45oiS5qGC5qKw77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwNF0ubGVuZ3RoOyArK2opIGlmKERbMjA0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwNF1bal1dID0gNTIyMjQgKyBqOyBkWzUyMjI0ICsgal0gPSBEWzIwNF1bal07fVxuXHREWzIwNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veajqOa6queVjOeZuOejjueoveezu+e5q+e5vOioiOiqoeiwv+majum3hOWPpOWPqeWRiuWRseWbuuWnkeWtpOWwu+W6q+aLt+aUt+aVheaVsuaaoOaer+angeayveeXvOeakOedvueov+e+lOiAg+iCoeiGj+iLpuiLveiPsOiXgeigseiitOiqpe+kg+i+nOmMrumbh+mhp+mrmOm8k+WTreaWm+absuaij+epgOiwt+m1oOWbsOWdpOW0keaYhuaiseajjea7vueQqOiinumvpOaxqO+khOmqqOS+m+WFrOWFseWKn+WtlOW3peaBkOaBreaLseaOp+aUu+ePmeepuuiao+iyoumej+S4suWvoeaIiOaenOeTnO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDVdLmxlbmd0aDsgKytqKSBpZihEWzIwNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDVdW2pdXSA9IDUyNDgwICsgajsgZFs1MjQ4MCArIGpdID0gRFsyMDVdW2pdO31cblx0RFsyMDZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73np5Hoj5PoqofoqrLot6jpgY7pjYvpoYblu5Pmp6jol7/pg63vpIXlhqDlrpjlr6zmhaPmo7rmrL7ngYznkK/nk5jnrqHnvZDoj4Xop4Dosqvpl5zppKjliK7mgZ3mi6zpgILkvorlhYnljKHlo5nlu6Pmm6DmtLjngprni4Lnj5bnrZDog7HpkZvljabmjpvnvavkuZblgoDloYrlo57mgKrmhKfmi5Dmp5DprYHlro/ntJjogrHovZ/kuqTlg5HlkqzllqzlrIzltqDlt6fmlKrmlY7moKHmqYvni6Hnmo7nn6/ntZ7nv7nohqDolY7om5/ovIPovY7pg4rppIPpqZXprqvkuJjkuYXkuZ3ku4fkv7Hlhbfli77vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA2XS5sZW5ndGg7ICsraikgaWYoRFsyMDZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA2XVtqXV0gPSA1MjczNiArIGo7IGRbNTI3MzYgKyBqXSA9IERbMjA2XVtqXTt9XG5cdERbMjA3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95Y2A5Y+j5Y+l5ZKO5ZiU5Z215Z6i5a+H5baH5buQ5oe85ouY5pWR5p645p+p5qeL5q2Q5q+G5q+s5rGC5rqd54G454uX546W55CD556/55+p56m257W/6ICJ6Ie86IiF6IiK6Iuf6KGi6Kyz6LO86LuA6YCR6YKx6Ymk6Yq26aeS6amF6bOp6beX6b6c5ZyL5bGA6I+K6Z6g6Z6r6bq05ZCb56qY576k6KOZ6LuN6YOh5aCA5bGI5o6Y56qf5a6u5byT56m556qu6IqO6Lqs5YCm5Yi45Yu45Y235ZyI5ouz5o2y5qyK5reD55y35Y6l542X6JWo6Lm26ZeV5py65quD5r2w6Kmt6LuM6aWL76SG5pm35q246LK077+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwN10ubGVuZ3RoOyArK2opIGlmKERbMjA3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwN11bal1dID0gNTI5OTIgKyBqOyBkWzUyOTkyICsgal0gPSBEWzIwN11bal07fVxuXHREWzIwOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemsvO+kh+WPq+WcreWljuaPhuanu+ePquehheequuerheezvuiRteimj+i1s+mAtemWqOWLu+Wdh+eVh+etoOiPjOmInu+kiOapmOWFi+WJi+WKh+aIn+ajmOaltemameWDheWKpOWLpOaHg+aWpOagueanv+eRvueti+iKueiPq+imsuisuei/kemlie+kieS7iuWml+aTkuaYkeaqjueQtOemgeemveiKqeihvuihv+iln++kiumMpuS8i+WPiuaApeaJseaxsue0mue1puS6mOWFouefnOiCr+S8geS8juWFtuWGgOWXnOWZqOWcu+WfuuWfvOWklOWlh+Wmk+WvhOWykOW0juW3seW5vuW/jOaKgOaXl+aXo++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDhdLmxlbmd0aDsgKytqKSBpZihEWzIwOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDhdW2pdXSA9IDUzMjQ4ICsgajsgZFs1MzI0OCArIGpdID0gRFsyMDhdW2pdO31cblx0RFsyMDldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mnJ7mnJ/mnZ7mo4vmo4TmqZ/mrLrmsKPmsb3msoLmt4fnjpjnkKbnkKrnkoLnkqPnlbjnlb/nooHno6/npYHnpYfnpYjnpbrnrpXntIDntrrnvojogIbogK3ogozoqJjorY/osYjotbfpjKHpjKTpo6LppZHpqI7pqI/pqaXpupLnt4rkvbblkInmi67moZTph5HllqvlhLrvpIvvpIzlqJzmh6bvpI3mi4/mi7/vpI7vpI/vpJDvpJHvpJLvpJPpgqPvpJTvpJXvpJbvpJfvpJjoq77vpJnvpJrvpJvvpJzmmpbvpJ3nhZbvpJ7vpJ/pm6PvpKDmjY/mjbrljZfvpKHmno/mpaDmubPvpKLnlLfvpKPvpKTvpKXvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA5XS5sZW5ndGg7ICsraikgaWYoRFsyMDldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA5XVtqXV0gPSA1MzUwNCArIGo7IGRbNTM1MDQgKyBqXSA9IERbMjA5XVtqXTt9XG5cdERbMjEwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+957SN76Sm76Sn6KGy5ZuK5aiY76So76Sp76Sq76Sr76Ss5LmD76St5YWn5aWI5p+w6ICQ76Su5aWz5bm05pKa56eK5b+15oGs5ouI5o275a+n5a+X5Yqq76Sv5aW05byp5oCS76Sw76Sx76Sy55GZ76Sz76S076S176S276S376S46aeR76S576S676S776S876S976S+76S/76WA76WB76WC76WD5r+D76WE76WF6Ia/6L6y5oOx76WG76WH6IWm76WI76WJ5bC/76WK76WL76WM76WN76WO76WP76WQ76WR5aup6Kil5p2757SQ76WS76WT76WU76WV76WW76WX6IO976WY76WZ5bC85rOl5Yy/5rq65aSa6Iy277+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxMF0ubGVuZ3RoOyArK2opIGlmKERbMjEwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxMF1bal1dID0gNTM3NjAgKyBqOyBkWzUzNzYwICsgal0gPSBEWzIxMF1bal07fVxuXHREWzIxMV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veS4ueS6tuS9huWWruWcmOWjh+W9luaWt+aXpuaqgOautea5jeefreerr+ewnue3nuibi+iikumEsumNm+aSu+a+vueNuueWuOmBlOWVluWdjeaGuuaTlOabh+a3oea5m+a9rea+ueeXsOiBg+iGveiVgeimg+irh+itmumMn+ayk+eVk+etlOi4j+mBneWUkOWgguWhmOW5ouaIh+aSnuajoOeVtuezluies+m7qOS7o+WeiOWdruWkp+WwjeWyseW4tuW+heaItOaToeeOs+iHuuiii+iyuOmaium7m+WuheW+t+aCs+WAkuWIgOWIsOWcluWgteWhl+WwjuWxoOWztuW2i+W6puW+kuaCvOaMkeaOieaQl+ahg++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTFdLmxlbmd0aDsgKytqKSBpZihEWzIxMV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTFdW2pdXSA9IDU0MDE2ICsgajsgZFs1NDAxNiArIGpdID0gRFsyMTFdW2pdO31cblx0RFsyMTJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mo7nmq4Lmt5jmuKHmu5Tmv6Tnh77nm5znnbnnprHnqLvokITopqnos63ot7PouYjpgIPpgJTpgZPpg73pjY3pmbbpn5zmr5LngIbniZjniqLnjajnnaPnpr/nr6TnupvoroDloqnmg4fmlabml73mmr7msoznhJ7nh4nosZrpoJPkua3nqoHku53lhqzlh43li5XlkIzmhqfmnbHmoZDmo5/mtJ7mvbznlrznnrPnq6Xog7TokaPpioXlhZzmlpfmnZzmnpPnl5jnq4fojbPvpZrosYbpgJfpoK3lsa/oh4DoiprpgYHpga/piI3lvpfltp3mqZnnh4jnmbvnrYnol6TorITphKfpqLDllofmh7bvpZvnmannvoXvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjEyXS5sZW5ndGg7ICsraikgaWYoRFsyMTJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjEyXVtqXV0gPSA1NDI3MiArIGo7IGRbNTQyNzIgKyBqXSA9IERbMjEyXVtqXTt9XG5cdERbMjEzXSA9IFwii/6J666KO46YKP76Wc5rSb54OZ54+e57Wh6JC976Wd6YWq6aex76We5LqC5Y215qyE5qyS54C+54ib6Jit6bie5YmM6L6j5bWQ5pOl5pSs5qyW5r+r57GD57qc6JeN6KWk6Ka95ouJ6IeY6KCf5buK5pyX5rWq54u855CF55Gv6J6C6YOe5L6G5bSN5b6g6JCK5Ya35o6g55Wl5Lqu5YCG5YWp5YeJ5qKB5qiR57Ku57Kx57On6Imv6KuS6Lyb6YeP5L625YS35Yu15ZGC5bus5oWu5oi+5peF5qua5r++56Sq6Jec6KCj6Zat6ami6amq6bqX6buO5Yqb5puG5q2354Cd56Sr6L2i6Z2C5oaQ5oiA5pSj5ryj77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxM10ubGVuZ3RoOyArK2opIGlmKERbMjEzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxM11bal1dID0gNTQ1MjggKyBqOyBkWzU0NTI4ICsgal0gPSBEWzIxM11bal07fVxuXHREWzIxNF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeFieeSiee3tOiBr+iTrui8pumAo+mNiuWGveWIl+WKo+a0jOeDiOijguW7ieaWguaurua/guewvueNteS7pOS8tuWbue+ln+WyuuW2uuaAnOeOsuesree+mue/juiBhumAnumItOmbtumdiOmgmOm9oeS+i+a+p+emrumGtOmat+WLnu+loOaSiOaThOark+a9nueAmOeIkOebp+iAgeiYhuiZnOi3r+i8hemcsumtr+m3uum5teeijOelv+e2oOiPiemMhOm5v+m6k+irluWjn+W8hOacp+eAp+eTj+exoOiBvuWEoeeAqOeJouejiuizguizmuiztOmbt+S6huWDmuWvruW7luaWmeeHjueZgueereiBiuiTvO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTRdLmxlbmd0aDsgKytqKSBpZihEWzIxNF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTRdW2pdXSA9IDU0Nzg0ICsgajsgZFs1NDc4NCArIGpdID0gRFsyMTRdW2pdO31cblx0RFsyMTVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pgbzprKfpvo3lo5jlqYHlsaLmqJPmt5rmvI/nmLvntK/nuLfolJ7opLjpj6TpmYvlionml5Lmn7PmprTmtYHmupzngI/nkInnkaDnlZnnmKTnoavorKzpoZ7lha3miK7pmbjkvpblgKvltJnmt6rntrjovKrlvovmhYTmoJfvpaHpmobli5Logovlh5zlh4zmpZ7nqJzntr7oj7HpmbXkv5rliKnljpjlkI/llI7lsaXmgqfmnY7moqjmtaznioHni7jnkIbnkoPvpaLnl6Lnsaznvbnnvrjojonoo4/oo6Hph4zph5Dpm6Lpr4nlkJ3mvb7nh5Dnkpjol7rouqrpmqPpsZfpup/mnpfmt4vnkLPoh6jpnJbnoKzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE1XS5sZW5ndGg7ICsraikgaWYoRFsyMTVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE1XVtqXV0gPSA1NTA0MCArIGo7IGRbNTUwNDAgKyBqXSA9IERbMjE1XVtqXTt9XG5cdERbMjE2XSA9IFwiuL56yg57KS5pGp55Gq55ey56K856Oo6aas6a2U6bq75a+e5bmV5ryg6Iac6I6r6YKI5LiH5Y2N5aip5beS5b2O5oWi5oy95pmp5pu85ru/5ryr54Gj556e6JCs6JST6KC76LyT6aWF6bC75ZSc5oq55pyr5rKr6IyJ6KWq6Z265Lqh5aaE5b+Y5b+Z5pyb57ay572U6IqS6Iyr6I696Lye6YKZ5Z+L5aa55aqS5a+Q5pin5p6a5qKF5q+P54Wk57216LK36LOj6YKB6a2F6ISI6LKK6ZmM6amA6bql5a2f5rCT54yb55uy55uf6JCM5Yaq6KaT5YWN5YaV5YuJ5qOJ5rKU55yE55yg57a/57es6Z2i6bq15ruF77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxNl0ubGVuZ3RoOyArK2opIGlmKERbMjE2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxNl1bal1dID0gNTUyOTYgKyBqOyBkWzU1Mjk2ICsgal0gPSBEWzIxNl1bal07fVxuXHREWzIxN10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiUkeWGpeWQjeWRveaYjuaaneakp+a6n+eav+eekeiMl+iTguien+mFqemKmOmztOiiguS+ruWGkuWLn+WnhuW4veaFleaRuOaRueaaruafkOaooeavjeavm+eJn+eJoeeRgeecuOefm+iAl+iKvOiMheisgOisqOiyjOacqOaykOeJp+ebruedpuephum2qeatv+aykuWkouacpuiSmeWNr+Wik+WmmeW7n+aPj+aYtOads+a4uueMq+erl+iLl+mMqOWLmeW3q+aGruaHi+aIiuaLh+aSq+aXoOalmeatpuavi+eEoeePt+eVnee5huiInuiMguiVquiqo+iyv+mcp+m1oeWiqOm7mOWAkeWIjuWQu+WVj+aWh++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTddLmxlbmd0aDsgKytqKSBpZihEWzIxN11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTddW2pdXSA9IDU1NTUyICsgajsgZFs1NTU1MiArIGpdID0gRFsyMTddW2pdO31cblx0RFsyMThdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73msbbntIrntIvogZ7omorploDpm6/li7/mspXnianlkbPlqprlsL7ltYvlvYzlvq7mnKrmorbmpaPmuLzmuYTnnInnsbPnvo7oloforI7ov7fpnaHpu7TlsrfmgrbmhI3mhqvmlY/ml7vml7zmsJHms6/njp/nj4nnt6HplpTlr4bonJzorJDliZ3ljZrmi43mkI/mkrLmnLTmqLjms4rnj4Dnkp7nrpTnspXnuJvohoroiLboloTov6vpm7npp4HkvLTljYrlj43lj5vmi4zmkKzmlIDmlpHmp4Pms67mvZjnj63nlZTnmKLnm6Tnm7zno5Dno7vnpKzntYboiKzon6Dov5TpoJLpo6/li4Pmi5TmkqXmuKTmvZHvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE4XS5sZW5ndGg7ICsraikgaWYoRFsyMThdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE4XVtqXV0gPSA1NTgwOCArIGo7IGRbNTU4MDggKyBqXSA9IERbMjE4XVtqXTt9XG5cdERbMjE5XSA9IFwim86LeL6Yax6Ymi6auu6a2D5YCj5YKN5Z2K5aao5bCo5bmH5b235oi/5pS+5pa55peB5piJ5p6L5qac5ruC56OF57Sh6IKq6IaA6Iir6Iqz6JKh6JqM6Kiq6KyX6YKm6Ziy6b6Q5YCN5L+z76Wj5Z+55b6Y5ouc5o6S5p2v5rmD54SZ55uD6IOM6IOa6KO06KO16KSZ6LOg6Lyp6YWN6Zmq5Lyv5L2w5bib5p+P5qCi55m955m+6a2E5bmh5qiK54Wp54eU55Wq76Wk57mB6JWD6Jep6aOc5LyQ562P572w6Zal5Yeh5biG5qK15rC+5rGO5rOb54qv56+E6IyD5rOV55C65YO75YqI5aOB5pOY5qqX55Kn55mW77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxOV0ubGVuZ3RoOyArK2opIGlmKERbMjE5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxOV1bal1dID0gNTYwNjQgKyBqOyBkWzU2MDY0ICsgal0gPSBEWzIxOV1bal07fVxuXHREWzIyMF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeip+iYl+mXoumcue+lpeWNnuW8geiuiui+qOi+r+mCiuWIpeeepemxiem8iOS4meWAguWFteWxm+W5t+aYnuaYuuafhOajheeCs+eUgeeXheenieernei8p+mkoOmoiOS/neWgoeWgseWvtuaZruatpea0kea5uua9veePpOeUq+iPqeijnOikk+itnOi8lOS8j+WDleWMkOWNnOWuk+W+qeacjeemj+iFueiMr+iUlOikh+imhui8uei8u+mmpemwkuacrOS5tuS/uOWlieWwgeWzr+WzsOaNp+ajkueDveeGoueQq+e4q+iTrOicgumAoumLkumzs+S4jeS7mOS/r+WCheWJluWJr+WQpuWSkOWfoOWkq+Wppu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjBdLmxlbmd0aDsgKytqKSBpZihEWzIyMF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjBdW2pdXSA9IDU2MzIwICsgajsgZFs1NjMyMCArIGpdID0gRFsyMjBdW2pdO31cblx0RFsyMjFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lrZrlrbXlr4zlupzvpabmibbmlbfmlqfmta7muqXniLbnrKbnsL/nvLbohZDohZHohproiYDoipnojqnoqIPosqDos6bos7votbTotrrpg6jph5zpmJzpmYTpp5nps6fljJfliIblkKnlmbTlorPlpZTlpa7lv7/mhqTmia7mmJDmsb7nhJrnm4bnsonns57ntJvoiqzos4Hpm7DvpafkvZvlvJflvb/mi4LltKnmnIvmo5rnobznuYPptazkuJXlgpnljJXljKrljZHlpoPlqaLluofmgrLmhormiYnmibnmlpDmnofmpqfmr5Tmr5bmr5fmr5jmsrjvpajnkLXnl7rnoJLnopHnp5Xnp5jnsoPnt4vnv6HogqXvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjIxXS5sZW5ndGg7ICsraikgaWYoRFsyMjFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjIxXVtqXV0gPSA1NjU3NiArIGo7IGRbNTY1NzYgKyBqXSA9IERbMjIxXVtqXTt9XG5cdERbMjIyXSA9IFwieC6I+y6Jya6KOo6Kq56K2s6LK76YSZ6Z2e6aOb6by75Zqs5ayq5b2s5paM5qqz5q6v5rWc5r+x54CV54md546t6LKn6LOT6aC75oaR5rC36IGY6aiB5LmN5LqL5Lqb5LuV5Ly65Ly85L2/5L+f5YO/5Y+y5Y+45ZSG5Zej5Zub5aOr5aWi5aiR5a+r5a+65bCE5bez5bir5b6Z5oCd5o2o5pac5pav5p+25p+75qKt5q275rKZ5rOX5rij54CJ542F56CC56S+56WA56Wg56eB56+p57SX57Wy6IKG6IiN6I6O6JOR6JuH6KOf6KmQ6Kme6Kyd6LOc6LWm6L6t6YKq6aO86aef6bqd5YmK76Wp5pyU76Wq77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyMl0ubGVuZ3RoOyArK2opIGlmKERbMjIyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyMl1bal1dID0gNTY4MzIgKyBqOyBkWzU2ODMyICsgal0gPSBEWzIyMl1bal07fVxuXHREWzIyM10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWCmOWIquWxseaVo+axleePiueUo+eWneeul+iSnOmFuOmcsOS5t+aSkuauuueFnuiWqeS4ie+lq+adieajrua4l+iKn+iUmOihq+aPt+a+gemIkumir+S4iuWCt+WDj+WEn+WVhuWWquWYl+WtgOWwmeWzoOW4uOW6iuW6oOW7guaDs+ahkeapoea5mOeIveeJgOeLgOebuOelpeeusee/lOijs+intOips+ixoeiznumcnOWhnueSveizveWXh++lrOepoee0ouiJsueJsueUn+eUpe+lreesmeWiheWju+W2vOW6j+W6tuW+kOaBleaKkuaNv+aVjeaakeabmeabuOagluajsueKgOeRnuetrue1rue3lue9su+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjNdLmxlbmd0aDsgKytqKSBpZihEWzIyM11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjNdW2pdXSA9IDU3MDg4ICsgajsgZFs1NzA4OCArIGpdID0gRFsyMjNdW2pdO31cblx0RFsyMjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73og6XoiJLolq/opb/oqpPpgJ3pi6Tpu43pvKDlpJXlpa3luK3mg5zmmJTmmbPmnpDmsZDmt4XmvZ/nn7Pnoqnok4bph4vpjKvku5nlg4rlhYjlloTlrIvlrqPmiYfmlb7ml4vmuLLnhb3nkIHnkYTnkofnkr/nmaznpqrnt5rnuZXnvqjohbrohrPoiLnomJron6zoqbXot6PpgbjpipHpkKXppY3prq7ljajlsZHmpZTms4TmtKnmuKvoiIzolpvopLvoqK3oqqrpm6rpvafliaHmmrnmrrLnupbon77otI3ploPpmZ3mlJ3mtonnh67vpa7ln47lp5PlrqzmgKfmg7rmiJDmmJ/mmZ/njKnnj7nnm5vnnIHnrazvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI0XS5sZW5ndGg7ICsraikgaWYoRFsyMjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI0XVtqXV0gPSA1NzM0NCArIGo7IGRbNTczNDQgKyBqXSA9IERbMjI0XVtqXTt9XG5cdERbMjI1XSA9IFwiy6IWl6Kqg6YaS5LiW5Yui5q2y5rSX56iF56y557Sw76Wv6LKw5Y+s5Ziv5aGR5a615bCP5bCR5bei5omA5o6D5pCU5pit5qKz5rK85raI5rqv54Cf54Kk54eS55Sm55aP55aO55iZ56yR56+g57Cr57Sg57S56JSs6JWt6JiH6Ki06YCN6YGh6YK16Yq36Z+26ai35L+X5bGs5p2f5raR57Kf57qM6KyW6LSW6YCf5a2r5be95pCN6JOA6YGc6aOh546H5a6L5oKa5p2+5ree6Kif6Kqm6YCB6aCM5Yi376Ww54GR56KO6Y6W6KGw6YeX5L+u5Y+X5Ze95Zua5Z6C5aO95auC5a6I5bKr5bOA5bil5oSB77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyNV0ubGVuZ3RoOyArK2opIGlmKERbMjI1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyNV1bal1dID0gNTc2MDAgKyBqOyBkWzU3NjAwICsgal0gPSBEWzIyNV1bal07fVxuXHREWzIyNl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaIjeaJi+aOiOaQnOaUtuaVuOaoueauiuawtOa0mea8seeHp+eLqeeNuOeQh+eSsueYpuedoeengOepl+erqueyuee2j+e2rOe5oee+nuiEqeiMseiSkOiTmuiXquiiluiqsOiukOi8uOmBgumCg+mFrOmKlumKuemai+map+maqOmblumcgOmgiOmmlumrk+msmuWPlOWhvuWkmeWtsOWuv+a3kea9mueGn+eQoeeSueiCheiPveW3oeW+h+W+quaBguaXrOagkualr+apk+auiea0tea3s+ePo+ebvueerOetjee0lOiEo+iInOiNgOiTtOiVo+ipouirhOmGh+mMnumghummtOaIjOihk+i/sOmJpeW0h+W0p++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjZdLmxlbmd0aDsgKytqKSBpZihEWzIyNl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjZdW2pdXSA9IDU3ODU2ICsgajsgZFs1Nzg1NiArIGpdID0gRFsyMjZdW2pdO31cblx0RFsyMjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ltannkZ/ohp3onajmv5Xmi77nv5LopLbopbLkuJ7kuZjlg6fli53ljYfmib/mmIfnuanooIXpmZ7kvo3ljJnlmLblp4vlqqTlsLjlsY7lsY3luILlvJHmgYPmlr3mmK/mmYLmnr7mn7TnjJznn6LnpLrnv4XokpTok43oppboqaboqanoq6HosZXosbrln7Tlr5TlvI/mga/mi63mpI3mrpbmuZznhoTnr5LonZXorZjou77po5/po77kvLjkvoHkv6HlkbvlqKDlrrjmhLzmlrDmmajnh7znlLPnpZ7ntLPohY7oh6Pojpjolqrol47onIPoqIrouqvovpvvpbHov4XlpLHlrqTlr6bmgonlr6nlsIvlv4PmsoHvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI3XS5sZW5ndGg7ICsraikgaWYoRFsyMjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI3XVtqXV0gPSA1ODExMiArIGo7IGRbNTgxMTIgKyBqXSA9IERbMjI3XVtqXTt9XG5cdERbMjI4XSA9IFwiy5rex54CL55Sa6Iqv6Ku25LuA5Y2B76Wz6ZuZ5rCP5Lqe5L+E5YWS5ZWe5ail5bOo5oiR54mZ6Iq96I6q6Ju+6KGZ6Kid6Zi/6ZuF6aST6bSJ6bWd5aCK5bKz5ba95bmE5oOh5oSV5o+h5qiC5ril6YSC6Y2U6aGO6bCQ6b235a6J5bK45oyJ5pmP5qGI55y86ZuB6Z6N6aGU6a6f5pah6KyB6LuL6Za85ZS15bKp5beW5bq15pqX55mM6I+06ZeH5aOT5oq854uO6bSo5Luw5aSu5oCP5pi75q6D56en6bSm5Y6T5ZOA5Z+D5bSW5oSb5puW5rav56KN6Im+6ZqY6Z2E5Y6E5om85o6W5ray57iK6IWL6aGN77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyOF0ubGVuZ3RoOyArK2opIGlmKERbMjI4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyOF1bal1dID0gNTgzNjggKyBqOyBkWzU4MzY4ICsgal0gPSBEWzIyOF1bal07fVxuXHREWzIyOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vearu+e9jOm2r+m4muS5n+WAu+WGtuWknOaDueaPtuaksOeIuuiAtu+ltOmHjuW8se+lte+ltue0hOiLpeiRr+iSu+iXpei6je+lt+S9r++luO+lueWjpOWtg+aBmeaPmuaUmOaVreaamO+luualiuaoo+a0i+eAgeeFrOeXkueYjeems+epsO+lu+e+iu+lvOilhO+lveiuk+mHgOmZve+lvumkiuWchOW+oeaWvOa8geeYgOempuiqnummremtmum9rOWEhOaGtuaKkeaqjeiHhuWBg+WgsOW9pueEieiogOiruuWtvOiYluS/uuWEvOWatOWlhOaOqea3ueW2qualreWGhuS6iOS9me+lv++mgO+mgeWmgu+mgu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjldLmxlbmd0aDsgKytqKSBpZihEWzIyOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjldW2pdXSA9IDU4NjI0ICsgajsgZFs1ODYyNCArIGpdID0gRFsyMjldW2pdO31cblx0RFsyMzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vpoPmrZ/msZ3vpoTnkrXnpJbvpoXoiIfoiYXojLnovL/ovZ3vpobppJjvpofvpojvponkuqbvporln5/lvbnmmJPvpovvpoznlqvnubnora/vpo3pgIbpqZvlmqXloKflp7jlqJ/lrrTvpo7lu7bvpo/vppDmjZDmjLvvppHmpL3msofmsr/mto7mtpPmt7XmvJTvppLng5/nhLbnhZnvppPnh4Pnh5XvppTnoY/noa/vppXnrbXnt6PvppbnuK/vppfooY3ou5/vppjvppnvpprpiZvvppvps7bvppzvpp3vpp7mgoXmtoXvpp/nhrHvpqDvpqHplrHljq3vpqLvpqPvpqTmn5PvpqXngo7nhLDnkLDoibboi5Lvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMwXS5sZW5ndGg7ICsraikgaWYoRFsyMzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMwXVtqXV0gPSA1ODg4MCArIGo7IGRbNTg4ODAgKyBqXSA9IERbMjMwXVtqXTt9XG5cdERbMjMxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+976am6Za76aul6bm95puE76an54eB6JGJ76ao76ap5aGL76aq76ar5ba45b2x76as5pig5pqO5qW55qau5rC45rOz5ri25r2B5r+a54Cb54Cv54WQ54ef542w76at55Gb76au55OU55uI56mO57qT76av76aw6Iux6Kmg6L+O76ax6Y2I76ay6ZyZ76az76a05LmC5YCq76a15YiI5Y+h5puz5rGt5r+K54yK552/56mi6Iqu6Jed6JiC76a26KOU6Kmj6K296LGr76a36Yqz76a46ZyT6aCQ5LqU5LyN5L+J5YKy5Y2I5ZC+5ZCz5Zea5aGi5aK65aWn5aib5a+k5oKf76a55oeK5pWW5pe/5pmk5qKn5rGa5r6z77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzMV0ubGVuZ3RoOyArK2opIGlmKERbMjMxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzMV1bal1dID0gNTkxMzYgKyBqOyBkWzU5MTM2ICsgal0gPSBEWzIzMV1bal07fVxuXHREWzIzMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeDj+eGrOeNkuetveiciOiqpOmwsum8h+Wxi+ayg+eNhOeOiemIuua6q+eRpeeYn+epqee4leiYiuWFgOWjheaTgeeTrueUleeZsOe/gemClembjemllOa4pueTpueqqeeqquiHpeibmeiduOiom+WpieWujOWum+aioeakgOa1o+eOqeeQk+eQrOeil+e3qee/q+iEmOiFleiOnuixjOmYrumgkeabsOW+gOaXuuaeieaxqueOi+WAreWog+atquefruWkluW1rOW3jeeMpeeVj++muu+mu+WDpeWHueWgr+WkreWmluWnmuWvpe+mvO+mveW2ouaLl+aQluaSk+aTvu+mvuabnO+mv+apiO+ngOeHv+eRpO+nge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzJdLmxlbmd0aDsgKytqKSBpZihEWzIzMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzJdW2pdXSA9IDU5MzkyICsgajsgZFs1OTM5MiArIGpdID0gRFsyMzJdW2pdO31cblx0RFsyMzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nqojnqq/nuYfnuZ7ogIDohbDvp4Lon6/opoHorKDpgZnvp4PpgoDppZLmhb7mrLLmtbTnuJ/opKXovrHkv5Hlgq3lhpfli4fln4floonlrrnlurjmhYLmppXmtozmuafmurbnhpTnkaLnlKjnlKzogbPojLjok4nouIrpjpTpj57vp4Tkuo7kvZHlgbblhKrlj4jlj4vlj7Plroflr5PlsKTmhJrmhoLml7TniZvnjpfnkYDnm4LnpZDnppHnprnntIbnvr3oiovol5XomZ7ov4LpgYfpg7Xph6rpmoXpm6jpm6nli5blvafml63mmLHmoK/nhZznqLbpg4HpoIrkupHvp4XmqZLmrp7mvpDnhonogJjoirjolZPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMzXS5sZW5ndGg7ICsraikgaWYoRFsyMzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMzXVtqXV0gPSA1OTY0OCArIGo7IGRbNTk2NDggKyBqXSA9IERbMjMzXVtqXTt9XG5cdERbMjM0XSA9IFwiqV6Zuy6Z+76JSa6ayx5LqQ54aK6ZuE5YWD5Y6f5ZOh5ZyT5ZyS5Z6j5aqb5auE5a+D5oCo5oS/5o+05rKF5rS55rmy5rqQ54iw54y/55GX6IuR6KKB6L2F6YGg76eG6Zmi6aGY6bSb5pyI6LaK6Yme5L2N5YGJ5YOe5Y2x5ZyN5aeU5aiB5bCJ5oWw5pqQ5rit54iy55GL57ev6IOD6JCO6JGm6JS/6J2f6KGb6KSY6KyC6YGV6Z+L6a2P5Lmz5L6R5YSS5YWq76eH5ZSv5Zap5a265a6l5bm85bm95bq+5oKg5oOf5oSI5oSJ5o+E5pS45pyJ76eI5p+U5p+a76eJ5qWh5qWi5rK55rSn76eK5ri476eL77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzNF0ubGVuZ3RoOyArK2opIGlmKERbMjM0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzNF1bal1dID0gNTk5MDQgKyBqOyBkWzU5OTA0ICsgal0gPSBEWzIzNF1bal07fVxuXHREWzIzNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea/oeeMtueMt++njOeRnOeUse+njeeZku+nju+nj+e2reiHvuiQuOijleiqmOirm+irrei4sOi5gumBiumAvumBuumFiemHiemNru+nkO+nkeWgie+nkuavk+iCieiCsu+nk++nlOWFgeWlq+Wwue+nle+nlua9pOeOp+iDpOi0h++nl+mIl+mWj++nmO+nme+nmu+nm+iBv+aIjueAnOe1qOieje+nnOWeoOaBqeaFh+aut+iqvumKgOmaseS5meWQn+a3q+iUremZsOmfs+mjruaPluazo+mCkeWHneaHieiGuum3ueS+neWAmuWEgOWunOaEj+aHv+aTrOakheavheeWkeefo+e+qeiJpOiWj+ifu+iho+iqvO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzVdLmxlbmd0aDsgKytqKSBpZihEWzIzNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzVdW2pdXSA9IDYwMTYwICsgajsgZFs2MDE2MCArIGpdID0gRFsyMzVdW2pdO31cblx0RFsyMzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73orbDphqvkuozku6XkvIrvp53vp57lpLflp6jvp5/lt7LlvJvlvZvmgKHvp6Dvp6Hvp6Lvp6PniL7nj6Xvp6TnlbDnl43vp6Xnp7vvp6bogIzogLPogoToi6HojZHvp6fvp6josr3osrPpgofvp6nvp6rpo7TppIzvp6vvp6zngLfnm4rnv4rnv4znv7zorJrkurrku4HliIPljbDvp63lkr3lm6Dlp7vlr4XlvJXlv43mua7vp67vp6/ntarojLXvp7DompPoqo3vp7Hpna3pnbfvp7Lvp7PkuIDkvZrkvb7lo7nml6XmuqLpgLjpjrDpprnku7vlo6zlporlp5nmgYHvp7Tvp7XnqJTvp7bojY/os4PlhaXljYTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM2XS5sZW5ndGg7ICsraikgaWYoRFsyMzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM2XVtqXV0gPSA2MDQxNiArIGo7IGRbNjA0MTYgKyBqXSA9IERbMjM2XVtqXTt9XG5cdERbMjM3XSA9IFwie376e476e55LuN5Ymp5a2V6Iq/5LuU5Yi65ZKo5aeJ5ae/5a2Q5a2X5a2c5oGj5oWI5ruL54KZ54Wu546G55O355a156OB57Sr6ICF6Ieq6Iyo6JSX6JeJ6Kuu6LOH6ZuM5L2c5Yu65Zq85par5pio54G854K454i157a96IqN6YWM6ZuA6bWy5a2x5qOn5q6Y5r2655ue5bKR5pqr5r2b566057Cq6KC26Zuc5LiI5LuX5Yyg5aC05aK75aOv5aWs5bCH5biz5bqE5by15o6M5pqy5p2W5qif5qqj5qyM5ry/54mG76e6542Q55KL56ug57Kn6IW46Ief6Ien6I6K6JGs6JSj6JaU6JeP6KOd6LST6Yas6ZW377+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzN10ubGVuZ3RoOyArK2opIGlmKERbMjM3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzN11bal1dID0gNjA2NzIgKyBqOyBkWzYwNjcyICsgal0gPSBEWzIzN11bal07fVxuXHREWzIzOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemanOWGjeWTieWcqOWusOaJjeadkOagveaik+a4vea7k+eBvee4oeijgeiyoei8iem9i+m9jueIreeuj+irjemMmuS9h+S9juWEsuWSgOWnkOW6leaKteadtealruaol+ayrua4mueLmeeMqueWveeuuOe0teiLp+iPueiRl+iXt+ipm+iyr+i6h+mAmemCuOmbjum9n+WLo+WQiuWroeWvguaRmOaVtea7tOeLhO+nu+eahOepjeesm+exjee4vue/n+iNu+isq+iziui1pOi3oei5n+i/qui/uemBqemPkeS9g+S9uuWCs+WFqOWFuOWJjeWJquWhoeWhvOWloOWwiOWxleW7m+aCm+aIsOagk+auv+awiOa+se+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzhdLmxlbmd0aDsgKytqKSBpZihEWzIzOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzhdW2pdXSA9IDYwOTI4ICsgajsgZFs2MDkyOCArIGpdID0gRFsyMzhdW2pdO31cblx0RFsyMzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nhY7nkKDnlLDnlLjnlZHnmbLnrYznrovnrq3nr4bnuo/oqa7ovL7ovYnpiL/pipPpjKLpkKvpm7vpoZrpoavppJ7liIfmiKrmipjmtZnnmaTnq4rnr4DntbbljaDlsr7lupfmvLjngrnnspjpnJHpro7pu57mjqXmkbronbbkuIHkupXkuq3lgZzlgbXlkYjlp4PlrprluYDluq3lu7flvoHmg4XmjLrmlL/mlbTml4zmmbbmmbjmn77mpajmqonmraPmsYDmt4Dmt6jmuJ/muZ7ngJ7ngqHnjo7nj73nlLrnnZvnoofnpo7nqIvnqb3nsr7nto7oiYfoqILoq6rosp7phK3phYrph5jpiabpi4zpjKDpnIbpnZbvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM5XS5sZW5ndGg7ICsraikgaWYoRFsyMzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM5XVtqXV0gPSA2MTE4NCArIGo7IGRbNjExODQgKyBqXSA9IERbMjM5XVtqXTt9XG5cdERbMjQwXSA9IFwic6aCC6byO5Yi25YqR5ZW85aCk5bid5byf5oKM5o+Q5qKv5r+f56Wt56ys6IeN6Ja66KO96Ku46LmE6YaN6Zmk6Zqb6Zy96aGM6b2K5L+O5YWG5YeL5Yqp5Ziy5byU5b2r5o6q5pON5pep5pmB5pu65pu55pyd5qKd5qOX5qe95ryV5r2u54Wn54el54iq55Kq55y656WW56Wa56ef56ig56qV57KX57Of57WE57mw6IKH6Je76Jqk6KmU6Kq/6LaZ6LqB6YCg6YGt6Yej6Zi76ZuV6bOl5peP57CH6Laz6Y+D5a2Y5bCK5Y2S5ouZ54yd5YCn5a6X5b6e5oKw5oWr5qOV5reZ55Cu56iu57WC57ac57ix6IWr77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0MF0ubGVuZ3RoOyArK2opIGlmKERbMjQwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0MF1bal1dID0gNjE0NDAgKyBqOyBkWzYxNDQwICsgal0gPSBEWzI0MF1bal07fVxuXHREWzI0MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vei4qui4temNvumQmOS9kOWdkOW3puW6p+aMq+e9quS4u+S9j+S+j+WBmuWnneiDhOWRquWRqOWXvuWlj+WumeW3nuW7muaZneacseafseagquazqOa0sua5iua+jeeCt+ePoOeWh+exjOe0gue0rOe2ouiIn+ibm+iou+iqhei1sOi6iui8s+mAsemFjumFkumRhOmnkOerueeypeS/iuWEgeWHhuWfiOWvr+Wzu+aZmeaovea1mua6lua/rOeEjOeVr+ero+igoumAoemBtembi+mnv+iMgeS4reS7suihhumHjeWNvearm+alq+axgeiRuuWinuaGjuabvuaLr+eDneeUkeeXh+e5kuiSuOitiei0iOS5i+WPqu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDFdLmxlbmd0aDsgKytqKSBpZihEWzI0MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDFdW2pdXSA9IDYxNjk2ICsgajsgZFs2MTY5NiArIGpdID0gRFsyNDFdW2pdO31cblx0RFsyNDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lkqvlnLDlnYDlv5fmjIHmjIfmka/mlK/ml6jmmbrmnp3mnrPmraLmsaDmsprmvKznn6XnoKXnpYnnpZfntJnogqLohILoh7Poip3oirfonJjoqozvp7zotITotr7pgbLnm7TnqJnnqLfnuZTogbfllIfll5TlobXmjK/mkKLmmYnmmYvmoa3mppvmroTmtKXmurHnj43nkajnkqHnlZvnlrnnm6HnnJ7nnovnp6bnuInnuJ3oh7volK/oopfoqLros5Hou6vovrDpgLLpjq3pmaPpmbPpnIfkvoTlj7Hlp6rlq4nluJnmoY7nk4bnlr7np6nnqpLohqPom63os6rot4zov63mlp/mnJXvp73ln7fmvZfnt53ovK/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQyXS5sZW5ndGg7ICsraikgaWYoRFsyNDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQyXVtqXV0gPSA2MTk1MiArIGo7IGRbNjE5NTIgKyBqXSA9IERbMjQyXVtqXTt9XG5cdERbMjQzXSA9IFwiuG5b615oey5r6E5LiU5L6Y5YCf5Y+J5Zef5bWv5beu5qyh5q2k56OL566a76e+6LmJ6LuK6YGu5o2J5pC+552A56qE6Yyv6ZG/6b2q5pKw5r6v54em55Ko55Oa56uE57CS57qC57Ky57qY6K6a6LSK6ZG96aSQ6aWM5Yi55a+f5pOm5pyt57Su5YOt5Y+D5aG55oWY5oWZ5oe65pas56uZ6K6S6K6W5YCJ5YCh5Ym15ZSx5ai85bug5b2w5oS05pWe5piM5pi25pqi5qeN5ruE5ryy54yW55ih56qT6IS56ImZ6I+W6JK85YK15Z+w5a+A5a+o5b2p5o6h56Cm57a16I+c6JSh6YeH6Ye15YaK5p+1562W77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0M10ubGVuZ3RoOyArK2opIGlmKERbMjQzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0M11bal1dID0gNjIyMDggKyBqOyBkWzYyMjA4ICsgal0gPSBEWzI0M11bal07fVxuXHREWzI0NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiyrOWHhOWmu+aCveiZleWAnO+nv+WJlOWwuuaFveaImuaLk+aTsuaWpea7jOeYoOiEiui5oOmZn+mau+S7n+WNg+WWmOWkqeW3neaTheaziea3uueOlOepv+iIm+iWpuizpOi4kOmBt+mHp+mXoemYoemfhuWHuOWTsuWWhuW+ueaSpOa+iOe2tOi8n+i9jemQteWDieWwluayvua3u+eUm+eeu+ewveexpOipueirguWgnuWmvuW4luaNt+eJkueWiuedq+irnOiyvOi8kuW7s+aZtOa3uOiBveiPgeiri+mdkemvlu+ogOWJg+abv+a2lea7r+e3oOirpumArumBnumrlOWIneWJv+WTqOaGlOaKhOaLm+aiou+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDRdLmxlbmd0aDsgKytqKSBpZihEWzI0NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDRdW2pdXSA9IDYyNDY0ICsgajsgZFs2MjQ2NCArIGpdID0gRFsyNDRdW2pdO31cblx0RFsyNDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mpJLmpZrmqLXngpLnhKbnoZ3npIHnpI7np5LnqI3ogpboibjoi5XojYnolYnosoLotoXphaLphovphq7kv4Plm5Hnh63nn5fonIDop7jlr7jlv5bmnZHpgqjlj6LloZrlr7XmgqTmhoHmkaDnuL3ogbDolKXpioPmkq7lgqzltJTmnIDlopzmir3mjqjmpI7mpbjmqJ7muavnmrrnp4voirvokKnoq4/otqjov73phJLphYvphpzpjJDpjJjpjprpm5vpqLbpsI3kuJHnlZznpZ3nq7rnrZHnr4nnuK7ok4TouZnoubTou7jpgJDmmKXmpL/nkYPlh7rmnK7pu5zlhYXlv6Dmspbon7LooZ3oobfmgrTohrXokIPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ1XS5sZW5ndGg7ICsraikgaWYoRFsyNDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ1XVtqXV0gPSA2MjcyMCArIGo7IGRbNjI3MjAgKyBqXSA9IERbMjQ1XVtqXTt9XG5cdERbMjQ2XSA9IFwii05ai25bCx54KK57+g6IGa6ISG6Iet6Laj6YaJ6amf6bey5YG05LuE5Y6g5oO75ris5bGk5L6I5YCk5Zek5bOZ5bmf5oGl5qKU5rK75reE54a+55eU55e055mh56ia56mJ57eH57e7572u6Ie06Jqp6Lyc6ZuJ6aaz6b2S5YmH5YuF6aOt6Kaq5LiD5p+S5ryG5L615a+i5p6V5rKI5rW455Cb56Cn6Yed6Y286J+E56ek56ix5b+r5LuW5ZKk5ZS+5aKu5aal5oOw5omT5ouW5py25qWV6Ii16ZmA6aax6aed5YCs5Y2T5ZWE5Z2876iB5omY76iC5pOi5pmr5p+d5r+B5r+v55Ci55C46KiX77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0Nl0ubGVuZ3RoOyArK2opIGlmKERbMjQ2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0Nl1bal1dID0gNjI5NzYgKyBqOyBkWzYyOTc2ICsgal0gPSBEWzI0Nl1bal07fVxuXHREWzI0N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemQuOWRkeWYhuWdpuW9iOaGmuatjueBmOeCree2u+iqleWlquiEq+aOoueciOiAveiyquWhlOaQreamu+WuleW4kea5r++og+iVqeWFjOWPsOWkquaAoOaFi+auhuaxsOazsOesnuiDjuiLlOi3humCsOmise+ohOaTh+a+pOaSkeaUhOWFjuWQkOWcn+iojuaFn+ahtu+oheeXm+etkue1semAmuWghuanjOiFv+ikqumAgOmgueWBuOWll+WmrOaKlemAj+msquaFneeJuemXluWdoeWphuW3tOaKiuaSreaTuuadt+azoua0vueIrOeQtuegtOe9t+iKrei3m+mgl+WIpOWdguadv+eJiOeTo+iyqei+pumIke+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDddLmxlbmd0aDsgKytqKSBpZihEWzI0N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDddW2pdXSA9IDYzMjMyICsgajsgZFs2MzIzMiArIGpdID0gRFsyNDddW2pdO31cblx0RFsyNDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pmKrlhavlj63mjYzkvanllITmgpbmlZfmspvmtb/niYzni73nqJfopofosp3lva3mvo7ng7nohqjmhI7kvr/lgY/miYHniYfnr4fnt6jnv6npgY3pnq3pqJnosrblnarlubPmnrDokI3oqZXlkKDlrJbluaPlu6LlvIrmloPogrrolL3plonpmZvkvYjljIXljI3ljI/lkoblk7rlnIPluIPmgJbmipvmirHmjZXvqIbms6HmtabnlrHnoLLog57ohK/oi57okaHokrLooo3opJLpgIvpi6rpo73prpHluYXmmrTmm53ngJHniIbvqIfkv7Xlib3lvarmhZPmnZPmqJnmvILnk6Lnpajooajosbnpo4fpo4TpqYPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ4XS5sZW5ndGg7ICsraikgaWYoRFsyNDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ4XVtqXV0gPSA2MzQ4OCArIGo7IGRbNjM0ODggKyBqXSA9IERbMjQ4XVtqXTt9XG5cdERbMjQ5XSA9IFwiif5qWT6Ku36LGK6aKo6aau5b285oqr55ay55qu6KKr6YG/6ZmC5Yy55by85b+F5rOM54+M55Wi55aL562G6Iu+6aad5LmP6YC85LiL5L2V5Y6m5aSP5buI5piw5rKz55GV6I236J2m6LOA6YGQ6Zye6bCV5aOR5a246JmQ6KyU6ba05a+S5oGo5oKN5pex5rGX5ryi5r6j54Ca572V57+w6ZaR6ZaS6ZmQ6Z+T5Ymy6L2E5Ye95ZCr5ZK45ZWj5ZaK5qq75ra157eY6Imm6Yqc6Zm36bm55ZCI5ZOI55uS6Juk6Zak6ZeU6Zmc5Lqi5LyJ5aeu5aum5be35oGS5oqX5p2t5qGB5rKG5riv57y46IKb6Iiq77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0OV0ubGVuZ3RoOyArK2opIGlmKERbMjQ5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0OV1bal1dID0gNjM3NDQgKyBqOyBkWzYzNzQ0ICsgal0gPSBEWzI0OV1bal07fVxuXHREWzI1MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+oiO+oiemgheS6peWBleWSs+Wek+WlmuWtqeWus+aHiOalt+a1t+eAo+ifueino+ipsuirp+mCgumnremquOWKvuaguOWAluW5uOadj+iNh+ihjOS6q+WQkeWaruePpumElemfv+mkiemll+mmmeWZk+Win+iZm+ioseaGsuartueNu+i7kuath+maqumpl+WlleeIgOi1q+mdqeS/lOWztOW8puaHuOaZm+azq+eCq+eOhOeOueePvuecqeedjee1g+e1oue4o+iIt+ihku+oiuizoumJiemhr+WtkeeptOihgOmggeWrjOS/oOWNlOWkvuWzveaMvua1ueeLueiEheiEh+iOoumLj+mgsOS6qOWFhOWIkeWei++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNTBdLmxlbmd0aDsgKytqKSBpZihEWzI1MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNTBdW2pdXSA9IDY0MDAwICsgajsgZFs2NDAwMCArIGpdID0gRFsyNTBdW2pdO31cblx0RFsyNTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lvaLms4Lmu47ngIXngZDngq/nhpLnj6nnkanojYronqLooaHpgIjpgqLpjqPppqjlha7lvZfmg6DmhafmmrPolZnouYrphq/pnovkuY7kupLlkbzlo5Xlo7rlpb3lsrXlvKfmiLbmiYjmmIrmmafmr6vmtanmt4/muZbmu7jmvpTmv6Dmv6nngZ3ni5DnkKXnkZrnk6DnmpPnpZzns4rnuJ7og6Hoiqbokavokr/omY7omZ/onbTorbfosarpjqzpoIDpoaXmg5HmiJbphbflqZrmmI/mt7fmuL7nkL/prYLlv73mg5rnrI/lk4TlvJjmsZ7ms5PmtKrng5jntIXombnoqIzptLvljJblkozlrIXmqLrngavnlbXvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjUxXS5sZW5ndGg7ICsraikgaWYoRFsyNTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjUxXVtqXV0gPSA2NDI1NiArIGo7IGRbNjQyNTYgKyBqXSA9IERbMjUxXVtqXTt9XG5cdERbMjUyXSA9IFwiaN56a+6Iqx6I+v6Kmx6K2B6LKo6Z2076iL5pO05pSr56K656K756mr5Li45Zaa5aWQ5a6m5bm75oKj5o+b5q2h5pml5qGT5riZ54Wl55Kw57SI6YKE6amp6bCl5rS75ruR54y+6LGB6ZeK5Yew5bmM5b6o5oGN5oO25oSw5oWM5pmD5pmE5qal5rOB5rmf5ruJ5r2i54WM55Kc55qH56+B57Cn6I2S6J2X6YGR6ZqN6buD5Yyv5Zue5bu75b6K5oGi5oKU5oe35pmm5pyD5qqc5reu5r6u54Gw542q57mq6Ia+6Iy06JuU6Kqo6LOE5YqD542y5a6W5qmr6ZCE5ZOu5ZqG5a2d5pWI5paF5puJ5qKf5raN5reG77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI1Ml0ubGVuZ3RoOyArK2opIGlmKERbMjUyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI1Ml1bal1dID0gNjQ1MTIgKyBqOyBkWzY0NTEyICsgal0gPSBEWzI1Ml1bal07fVxuXHREWzI1M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeIu+iCtOmFtempjeS+r+WAmeWOmuWQjuWQvOWWieWXheW4v+W+jOacveeFpuePnemAheWLm+WLs+WhpOWjjueEhOeGj+eHu+iWsOiok+aaiOiWqOWWp+aahOeFiuiQseWNieWWmeavgeW9meW+veaPruaaieeFh+irsei8nem6vuS8keaQuueDi+eVpuiZp+aBpOitjum3uOWFh+WHtuWMiOa0tuiDuOm7keaYleaso+eCmOeXleWQg+Wxuee0h+ioluasoOasveathuWQuOaBsOa0vee/leiIiOWDluWHnuWWnOWZq+WbjeWnrOWsieW4jOaGmeaGmOaIseaZnuabpueGmeeGueeGuueKp+emp+eogOe+suipsO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNTNdLmxlbmd0aDsgKytqKSBpZihEWzI1M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNTNdW2pdXSA9IDY0NzY4ICsgajsgZFs2NDc2OCArIGpdID0gRFsyNTNdW2pdO31cblx0cmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBkIH07IH0pKCk7XG5cdGNwdGFibGVbOTUwXSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFtdLCBlID0ge30sIEQgPSBbXSwgajtcblx0RFswXSA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzBdLmxlbmd0aDsgKytqKSBpZihEWzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMF1bal1dID0gMCArIGo7IGRbMCArIGpdID0gRFswXVtqXTt9XG5cdERbMTYxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+944CA77yM44CB44CC77yO4oCn77yb77ya77yf77yB77iw4oCm4oCl77mQ77mR77mSwrfvuZTvuZXvuZbvuZfvvZzigJPvuLHigJTvuLPilbTvuLTvuY/vvIjvvInvuLXvuLbvvZvvvZ3vuLfvuLjjgJTjgJXvuLnvuLrjgJDjgJHvuLvvuLzjgIrjgIvvuL3vuL7jgIjjgInvuL/vuYDjgIzjgI3vuYHvuYLjgI7jgI/vuYPvuYTvuZnvuZrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vuZvvuZzvuZ3vuZ7igJjigJnigJzigJ3jgJ3jgJ7igLXigLLvvIPvvIbvvIrigLvCp+OAg+KXi+KXj+KWs+KWsuKXjuKYhuKYheKXh+KXhuKWoeKWoOKWveKWvOOKo+KEhcKv77+j77y/y43vuYnvuYrvuY3vuY7vuYvvuYzvuZ/vuaDvuaHvvIvvvI3Dl8O3wrHiiJrvvJzvvJ7vvJ3iiabiiafiiaDiiJ7iiZLiiaHvuaLvuaPvuaTvuaXvuabvvZ7iiKniiKriiqXiiKDiiJ/iir/jj5Ljj5HiiKviiK7iiLXiiLTimYDimYLiipXiipnihpHihpPihpDihpLihpbihpfihpnihpjiiKXiiKPvvI/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTYxXS5sZW5ndGg7ICsraikgaWYoRFsxNjFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTYxXVtqXV0gPSA0MTIxNiArIGo7IGRbNDEyMTYgKyBqXSA9IERbMTYxXVtqXTt9XG5cdERbMTYyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977y84oiV77mo77yE77+l44CS77+g77+h77yF77yg4oSD4oSJ77mp77mq77mr44+V446c446d446e44+O446h446O446P44+EwrDlhZnlhZvlhZ7lhZ3lhaHlhaPll6fnk6nns47iloHiloLiloPiloTiloXilobilofilojilo/ilo7ilo3ilozilovilorilonilLzilLTilKzilKTilJzilpTilIDilILilpXilIzilJDilJTilJjila3vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ila7ilbDila/ilZDilZ7ilarilaHil6Lil6Pil6Xil6TilbHilbLilbPvvJDvvJHvvJLvvJPvvJTvvJXvvJbvvJfvvJjvvJnihaDihaHihaLihaPihaTihaXihabihafihajihanjgKHjgKLjgKPjgKTjgKXjgKbjgKfjgKjjgKnljYHljYTljYXvvKHvvKLvvKPvvKTvvKXvvKbvvKfvvKjvvKnvvKrvvKvvvKzvvK3vvK7vvK/vvLDvvLHvvLLvvLPvvLTvvLXvvLbvvLfvvLjvvLnvvLrvvYHvvYLvvYPvvYTvvYXvvYbvvYfvvYjvvYnvvYrvvYvvvYzvvY3vvY7vvY/vvZDvvZHvvZLvvZPvvZTvvZXvvZbvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTYyXS5sZW5ndGg7ICsraikgaWYoRFsxNjJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTYyXVtqXV0gPSA0MTQ3MiArIGo7IGRbNDE0NzIgKyBqXSA9IERbMTYyXVtqXTt9XG5cdERbMTYzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9772X772Y772Z772azpHOks6TzpTOlc6WzpfOmM6ZzprOm86czp3Ons6fzqDOoc6jzqTOpc6mzqfOqM6pzrHOss6zzrTOtc62zrfOuM65zrrOu868zr3Ovs6/z4DPgc+Dz4TPhc+Gz4fPiM+J44SF44SG44SH44SI44SJ44SK44SL44SM44SN44SO44SP77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+944SQ44SR44SS44ST44SU44SV44SW44SX44SY44SZ44Sa44Sb44Sc44Sd44Se44Sf44Sg44Sh44Si44Sj44Sk44Sl44Sm44Sn44So44Spy5nLicuKy4fLi++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veKCrO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjNdLmxlbmd0aDsgKytqKSBpZihEWzE2M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjNdW2pdXSA9IDQxNzI4ICsgajsgZFs0MTcyOCArIGpdID0gRFsxNjNdW2pdO31cblx0RFsxNjRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73kuIDkuZnkuIHkuIPkuYPkuZ3kuobkuozkurrlhL/lhaXlhavlh6DliIDliIHlipvljJXljYHljZzlj4jkuInkuIvkuIjkuIrkuKvkuLjlh6HkuYXkuYjkuZ/kuZ7kuo7kuqHlhYDliIPli7rljYPlj4nlj6PlnJ/lo6vlpJXlpKflpbPlrZDlrZHlrZPlr7jlsI/lsKLlsLjlsbHlt53lt6Xlt7Hlt7Llt7Plt77lubLlu77lvIvlvJPmiY3vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73kuJHkuJDkuI3kuK3kuLDkuLnkuYvlsLnkuojkupHkupXkupLkupTkuqLku4Hku4Dku4Pku4bku4fku43ku4rku4vku4TlhYPlhYHlhaflha3lha7lhazlhpflh7bliIbliIfliIjli7vli77li7/ljJbljLnljYjljYfljYXljZ7ljoTlj4vlj4rlj43lo6zlpKnlpKvlpKrlpK3lrZTlsJHlsKTlsLrlsa/lt7Tlubvlu7/lvJTlvJXlv4PmiIjmiLbmiYvmiY7mlK/mlofmlpfmlqTmlrnml6Xmm7DmnIjmnKjmrKDmraLmrbnmr4vmr5Tmr5vmsI/msLTngavniKrniLbniLvniYfniZnniZvniqznjovkuJnvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY0XS5sZW5ndGg7ICsraikgaWYoRFsxNjRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY0XVtqXV0gPSA0MTk4NCArIGo7IGRbNDE5ODQgKyBqXSA9IERbMTY0XVtqXTt9XG5cdERbMTY1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95LiW5LiV5LiU5LiY5Li75LmN5LmP5LmO5Lul5LuY5LuU5LuV5LuW5LuX5Luj5Luk5LuZ5Lue5YWF5YWE5YaJ5YaK5Yas5Ye55Ye65Ye45YiK5Yqg5Yqf5YyF5YyG5YyX5Yyd5Luf5Y2K5Y2J5Y2h5Y2g5Y2v5Y2u5Y675Y+v5Y+k5Y+z5Y+s5Y+u5Y+p5Y+o5Y+85Y+45Y+15Y+r5Y+m5Y+q5Y+y5Y+x5Y+w5Y+l5Y+t5Y+75Zub5Zua5aSW77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95aSu5aSx5aW05aW25a2V5a6D5bC85beo5ben5bem5biC5biD5bmz5bm85byB5byY5byX5b+F5oiK5omT5omU5omS5omR5pal5pem5pyu5pys5pyq5pyr5pyt5q2j5q+N5rCR5rCQ5rC45rGB5rGA5rC+54qv546E546J55Oc55Om55SY55Sf55So55Sp55Sw55Sx55Sy55Sz55aL55m955qu55q/55uu55+b55+i55+z56S656a+56m056uL5Lie5Lif5LmS5LmT5Lmp5LqZ5Lqk5Lqm5Lql5Lu/5LyJ5LyZ5LyK5LyV5LyN5LyQ5LyR5LyP5Luy5Lu25Lu75Luw5Luz5Lu95LyB5LyL5YWJ5YWH5YWG5YWI5YWo77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2NV0ubGVuZ3RoOyArK2opIGlmKERbMTY1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2NV1bal1dID0gNDIyNDAgKyBqOyBkWzQyMjQwICsgal0gPSBEWzE2NV1bal07fVxuXHREWzE2Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWFseWGjeWGsOWIl+WIkeWIkuWIjuWIluWKo+WMiOWMoeWMoOWNsOWNseWQieWQj+WQjOWQiuWQkOWQgeWQi+WQhOWQkeWQjeWQiOWQg+WQjuWQhuWQkuWboOWbnuWbneWcs+WcsOWcqOWcreWcrOWcr+WcqeWkmeWkmuWkt+WkuOWmhOWluOWmg+WlveWlueWmguWmgeWtl+WtmOWuh+WuiOWuheWuieWvuuWwluWxueW3nuW4huW5tuW5tO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veW8j+W8m+W/meW/luaIjuaIjOaIjeaIkOaJo+aJm+aJmOaUtuaXqeaXqOaXrOaXreabsuabs+acieacveactOacseacteasoeatpOatu+awluaxneaxl+axmeaxn+axoOaxkOaxleaxoeaxm+axjeaxjueBsOeJn+eJneeZvuerueexs+ezuOe8tue+iue+veiAgeiAg+iAjOiAkuiAs+iBv+iCieiCi+iCjOiHo+iHquiHs+iHvOiIjOiIm+iIn+iJruiJsuiJvuiZq+ihgOihjOiho+ilv+mYoeS4suS6qOS9jeS9j+S9h+S9l+S9nuS8tOS9m+S9leS8sOS9kOS9keS8veS8uuS8uOS9g+S9lOS8vOS9huS9o++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjZdLmxlbmd0aDsgKytqKSBpZihEWzE2Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjZdW2pdXSA9IDQyNDk2ICsgajsgZFs0MjQ5NiArIGpdID0gRFsxNjZdW2pdO31cblx0RFsxNjddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73kvZzkvaDkvK/kvY7kvLbkvZnkvZ3kvYjkvZrlhYzlhYvlhY3lhbXlhrblhrfliKXliKTliKnliKrliKjliqvliqnliqrliqzljKPljbPljbXlkJ3lkK3lkJ7lkL7lkKblkY7lkKflkYblkYPlkLPlkYjlkYLlkJvlkKnlkYrlkLnlkLvlkLjlkK7lkLXlkLblkKDlkLzlkYDlkLHlkKvlkJ/lkKzlm6rlm7Dlm6Tlm6vlnYrlnZHlnYDlnY3vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lnYflnY7lnL7lnZDlnY/lnLvlo6/lpL7lpp3lppLlpqjlpp7lpqPlppnlppblpo3lpqTlppPlporlpqXlrZ3lrZzlrZrlrZvlrozlrovlro/lsKzlsYDlsYHlsL/lsL7lspDlspHlspTlsozlt6vluIzluo/luofluorlu7flvITlvJ/lvaTlvaLlvbflvbnlv5jlv4zlv5flv43lv7Hlv6vlv7jlv6rmiJLmiJHmioTmipfmipbmioDmibbmionmia3miormibzmib7mibnmibPmipLmia/mipjmia7mipXmipPmipHmiobmlLnmlLvmlLjml7Hmm7TmnZ/mnY7mnY/mnZDmnZHmnZzmnZbmnZ7mnYnmnYbmnaDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTY3XS5sZW5ndGg7ICsraikgaWYoRFsxNjddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTY3XVtqXV0gPSA0Mjc1MiArIGo7IGRbNDI3NTIgKyBqXSA9IERbMTY3XVtqXTt9XG5cdERbMTY4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95p2T5p2X5q2l5q+P5rGC5rGe5rKZ5rKB5rKI5rKJ5rKF5rKb5rGq5rG65rKQ5rGw5rKM5rGo5rKW5rKS5rG95rKD5rGy5rG+5rG05rKG5rG25rKN5rKU5rKY5rKC54G254G854G954G454mi54mh54mg54uE54uC546W55Ss55Sr55S355S455qC55uv55+j56eB56eA56a/56m257O7572V6IKW6IKT6IKd6IKY6IKb6IKa6IKy6Imv6IqS77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96IqL6IqN6KaL6KeS6KiA6LC36LGG6LGV6LKd6LWk6LWw6Laz6Lqr6LuK6L6b6L6w6L+C6L+G6L+F6L+E5beh6YKR6YKi6YKq6YKm6YKj6YWJ6YeG6YeM6Ziy6Ziu6Zix6Ziq6Zis5Lim5LmW5Lmz5LqL5Lqb5Lqe5Lqr5Lqs5L2v5L6d5L6N5L2z5L2/5L2s5L6b5L6L5L6G5L6D5L2w5L215L6I5L2p5L275L6W5L2+5L6P5L6R5L265YWU5YWS5YWV5YWp5YW35YW25YW45Ya95Ye95Yi75Yi45Yi35Yi65Yiw5Yiu5Yi25YmB5Yq+5Yq75Y2S5Y2U5Y2T5Y2R5Y2m5Y235Y245Y255Y+W5Y+U5Y+X5ZGz5ZG177+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE2OF0ubGVuZ3RoOyArK2opIGlmKERbMTY4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE2OF1bal1dID0gNDMwMDggKyBqOyBkWzQzMDA4ICsgal0gPSBEWzE2OF1bal07fVxuXHREWzE2OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWSluWRuOWSleWSgOWRu+WRt+WShOWSkuWShuWRvOWSkOWRseWRtuWSjOWSmuWRouWRqOWSi+WRveWSjuWbuuWeg+Wdt+WdquWdqeWdoeWdpuWdpOWdvOWknOWlieWlh+WliOWlhOWllOWmvuWmu+WnlOWmueWmruWnkeWnhuWnkOWnjeWni+Wnk+WniuWmr+Wms+WnkuWnheWtn+WtpOWto+Wul+WumuWumOWunOWumeWum+WwmuWxiOWxhe+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWxhuWyt+WyoeWyuOWyqeWyq+WyseWys+W4mOW4muW4luW4leW4m+W4keW5uOW6muW6l+W6nOW6leW6luW7tuW8puW8p+W8qeW+gOW+geW9v+W9vOW/neW/oOW/veW/teW/v+aAj+aAlOaAr+aAteaAluaAquaAleaAoeaAp+aAqeaAq+aAm+aIluaIleaIv+aIvuaJgOaJv+aLieaLjOaLhOaKv+aLguaKueaLkuaLm+aKq+aLk+aLlOaLi+aLiOaKqOaKveaKvOaLkOaLmeaLh+aLjeaKteaLmuaKseaLmOaLluaLl+aLhuaKrOaLjuaUvuaWp+aWvOaXuuaYlOaYk+aYjOaYhuaYguaYjuaYgOaYj+aYleaYiu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNjldLmxlbmd0aDsgKytqKSBpZihEWzE2OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNjldW2pdXSA9IDQzMjY0ICsgajsgZFs0MzI2NCArIGpdID0gRFsxNjldW2pdO31cblx0RFsxNzBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mmIfmnI3mnIvmna3mnovmnpXmnbHmnpzmnbPmnbfmnofmnp3mnpfmna/mnbDmnb/mnonmnb7mnpDmnbXmnprmnpPmnbzmnarmnbLmrKPmrabmrafmrb/msJPmsJvms6Pms6jms7PmsrHms4zms6XmsrPmsr3msr7msrzms6Lmsqvms5Xms5Pmsrjms4Tmsrnms4Hmsq7ms5fms4Xms7Hmsr/msrvms6Hms5vms4rmsqzms6/ms5zms5bms6Dvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ngpXngo7ngpLngorngpnniKzniK3niLjniYjniafnianni4Dni47ni5nni5fni5Dnjqnnjqjnjp/njqvnjqXnlL3nlp3nlpnnlprnmoTnm4Lnm7Lnm7Tnn6Xnn73npL7npYDnpYHnp4nnp4jnqbrnqbnnq7rns77nvZTnvoznvovogIXogrrogqXogqLogrHogqHogqvogqnogrTogqrogq/oh6Xoh77oiI3oirPoip3oipnoiq3oir3oip/oirnoirHoiqzoiqXoiq/oirjoiqPoirDoir7oirfomY7ombHliJ3ooajou4vov47ov5Tov5HpgrXpgrjpgrHpgrbph4fph5HplbfploDpmJzpmYDpmL/pmLvpmYTvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTcwXS5sZW5ndGg7ICsraikgaWYoRFsxNzBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTcwXVtqXV0gPSA0MzUyMCArIGo7IGRbNDM1MjAgKyBqXSA9IERbMTcwXVtqXTt9XG5cdERbMTcxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ZmC6Zq56Zuo6Z2S6Z2e5Lqf5Lqt5Lqu5L+h5L615L6v5L6/5L+g5L+R5L+P5L+d5L+D5L625L+Y5L+f5L+K5L+X5L6u5L+Q5L+E5L+C5L+a5L+O5L+e5L635YWX5YaS5YaR5Yag5YmO5YmD5YmK5YmN5YmM5YmL5YmH5YuH5YuJ5YuD5YuB5YyN5Y2X5Y275Y6a5Y+b5ZKs5ZOA5ZKo5ZOO5ZOJ5ZK45ZKm5ZKz5ZOH5ZOC5ZK95ZKq5ZOB77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZOE5ZOI5ZKv5ZKr5ZKx5ZK75ZKp5ZKn5ZK/5Zu/5Z6C5Z6L5Z6g5Z6j5Z6i5Z+O5Z6u5Z6T5aWV5aWR5aWP5aWO5aWQ5aec5aeY5ae/5aej5aeo5aiD5ael5aeq5aea5aem5aiB5ae75a2p5a6j5a6m5a6k5a6i5a6l5bCB5bGO5bGP5bGN5bGL5bOZ5bOS5be35bid5bil5bif5bm95bqg5bqm5bu65byI5byt5b2l5b6I5b6F5b6K5b6L5b6H5b6M5b6J5oCS5oCd5oCg5oCl5oCO5oCo5oGN5oGw5oGo5oGi5oGG5oGD5oGs5oGr5oGq5oGk5omB5ouc5oyW5oyJ5ou85out5oyB5ouu5ou95oyH5oux5ou377+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3MV0ubGVuZ3RoOyArK2opIGlmKERbMTcxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3MV1bal1dID0gNDM3NzYgKyBqOyBkWzQzNzc2ICsgal0gPSBEWzE3MV1bal07fVxuXHREWzE3Ml0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaLr+aLrOaLvuaLtOaMkeaMguaUv+aVheaWq+aWveaXouaYpeaYreaYoOaYp+aYr+aYn+aYqOaYseaYpOabt+afv+afk+afseaflOafkOafrOaetuaer+afteafqeafr+afhOafkeaetOafmuafpeaeuOafj+afnuafs+aesOafmeafouafneafkuatquaug+auhuauteavkuavl+awn+aziea0i+a0sua0qua1gea0pea0jOa0sea0nua0l++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea0u+a0vea0vua0tua0m+aztea0uea0p+a0uOa0qea0rua0tea0jua0q+eCq+eCuueCs+eCrOeCr+eCreeCuOeCrueCpOeIsOeJsueJr+eJtOeLqeeLoOeLoeeOt+ePiueOu+eOsuePjeePgOeOs+eUmueUreeVj+eVjOeVjueVi+eWq+eWpOeWpeeWoueWo+eZuOeahueah+eaiOebiOebhuebg+ebheecgeebueebuOecieeci+ebvuebvOech+efnOeggueglOegjOegjeelhuelieeliOelh+emueemuuenkeenkueni+epv+eqgeerv+erveexvee0gue0hee0gOe0iee0h+e0hOe0hue8uOe+jue+v+iAhO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzJdLmxlbmd0aDsgKytqKSBpZihEWzE3Ml1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzJdW2pdXSA9IDQ0MDMyICsgajsgZFs0NDAzMiArIGpdID0gRFsxNzJdW2pdO31cblx0RFsxNzNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ogJDogI3ogJHogLbog5bog6Xog5rog4Pog4Tog4zog6Hog5vog47og57og6Tog53oh7ToiKLoi6fojIPojIXoi6Poi5voi6bojIToi6XojILojInoi5Loi5foi7HojIHoi5zoi5Toi5Hoi57oi5Poi5/oi6/ojIbomZDombnombvombrooY3ooavopoHop5ToqIjoqILoqIPosp7osqDotbTotbPotrTou43ou4zov7Dov6bov6Lov6rov6Xvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ov63ov6vov6Tov6jpg4rpg47pg4Hpg4PphYvphYrph43ploLpmZDpmYvpmYzpmY3pnaLpnanpn4vpn63pn7PpoIHpoqjpo5vpo5/pppbpppnkuZjkurPlgIzlgI3lgKPkv6/lgKblgKXkv7jlgKnlgJblgIblgLzlgJ/lgJrlgJLlgJHkv7rlgIDlgJTlgKjkv7HlgKHlgIvlgJnlgJjkv7Pkv67lgK3lgKrkv77lgKvlgInlhbzlhqTlhqXlhqLlh43lh4zlh4blh4vliZbliZzliZTliZvliZ3ljKrljb/ljp/ljp3lj5/lk6jllJDllIHllLflk7zlk6Xlk7LllIblk7rllJTlk6nlk63lk6HllInlk67lk6rvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTczXS5sZW5ndGg7ICsraikgaWYoRFsxNzNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTczXVtqXV0gPSA0NDI4OCArIGo7IGRbNDQyODggKyBqXSA9IERbMTczXVtqXTt9XG5cdERbMTc0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZOm5ZSn5ZSH5ZO95ZSP5ZyD5ZyE5Z+C5Z+U5Z+L5Z+D5aCJ5aSP5aWX5aWY5aWa5aiR5aiY5aic5aif5aib5aiT5aes5aig5aij5aip5ail5aiM5aiJ5a2r5bGY5a6w5a6z5a625a605a6u5a615a655a645bCE5bGR5bGV5bGQ5bOt5bO95bO75bOq5bOo5bOw5bO25bSB5bO05beu5bit5bir5bqr5bqt5bqn5byx5b6S5b6R5b6Q5oGZ77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95oGj5oGl5oGQ5oGV5oGt5oGp5oGv5oKE5oKf5oKa5oKN5oKU5oKM5oKF5oKW5omH5ouz5oyI5ou/5o2O5oy+5oyv5o2V5o2C5o2G5o2P5o2J5oy65o2Q5oy95oyq5oyr5oyo5o2N5o2M5pWI5pWJ5paZ5peB5peF5pmC5pmJ5pmP5pmD5pmS5pmM5pmF5pmB5pu45pyU5pyV5pyX5qCh5qC45qGI5qGG5qGT5qC55qGC5qGU5qCp5qKz5qCX5qGM5qGR5qC95p+05qGQ5qGA5qC85qGD5qCq5qGF5qCT5qCY5qGB5q6K5q6J5q635rCj5rCn5rCo5rCm5rCk5rOw5rWq5raV5raI5raH5rWm5rW45rW35rWZ5raT77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3NF0ubGVuZ3RoOyArK2opIGlmKERbMTc0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3NF1bal1dID0gNDQ1NDQgKyBqOyBkWzQ0NTQ0ICsgal0gPSBEWzE3NF1bal07fVxuXHREWzE3NV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea1rOa2iea1rua1mua1tOa1qea2jOa2iua1uea2hea1pea2lOeDiueDmOeDpOeDmeeDiOeDj+eIueeJueeLvOeLueeLveeLuOeLt+eOhuePreeQieePruePoOePquePnueVlOeVneeVnOeVmueVmeeWvueXheeXh+eWsueWs+eWveeWvOeWueeXgueWuOeai+easOebiuebjeebjuecqeecn+ecoOecqOefqeegsOegp+eguOegneegtOegt++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veegpeegreegoOegn+egsuelleelkOeloOeln+elluelnuelneell+elmuenpOeno+enp+enn+enpuenqeenmOeqhOeqiOermeeshueskeeyiee0oee0l+e0i+e0iue0oOe0oue0lOe0kOe0lee0mue0nOe0jee0mee0m+e8uue9n+e+lOe/hee/geiAhuiAmOiAleiAmeiAl+iAveiAv+iDseiEguiDsOiEheiDreiDtOiEhuiDuOiDs+iEiOiDveiEiuiDvOiDr+iHreiHrOiIgOiIkOiIquiIq+iIqOiIrOiKu+iMq+iNkuiNlOiNiuiMuOiNkOiNieiMteiMtOiNj+iMsuiMueiMtuiMl+iNgOiMseiMqOiNg++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzVdLmxlbmd0aDsgKytqKSBpZihEWzE3NV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzVdW2pdXSA9IDQ0ODAwICsgajsgZFs0NDgwMCArIGpdID0gRFsxNzVdW2pdO31cblx0RFsxNzZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73omZTomoromqrompPomqTomqnomozomqPompzoobDoobfoooHoooLoob3oobnoqJjoqJDoqI7oqIzoqJXoqIroqJfoqJPoqJboqI/oqJHosYjosbrosbnosqHosqLotbfouqzou5Lou5Tou4/ovrHpgIHpgIbov7fpgIDov7rov7TpgIPov73pgIXov7jpgpXpg6Hpg53pg6LphZLphY3phYzph5jph53ph5fph5zph5nploPpmaLpmaPpmaHvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pmZvpmZ3pmaTpmZjpmZ7pmrvpo6Lppqzpqqjpq5jprKXprLLprLzkub7lgbrlgb3lgZzlgYflgYPlgYzlgZrlgYnlgaXlgbblgY7lgZXlgbXlgbTlgbflgY/lgI/lga/lga3lhZzlhpXlh7Dliarlia/li5Lli5nli5jli5XljJDljI/ljJnljL/ljYDljL7lj4Pmm7zllYbllarllabllYTllZ7llaHllYPllYrllLHllZbllY/llZXllK/llaTllLjllK7llZzllKzllaPllLPllYHllZflnIjlnIvlnInln5/loIXloIrloIbln6Dln6Tln7rloILloLXln7fln7nlpKDlpaLlqLblqYHlqYnlqablqarlqYDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc2XS5sZW5ndGg7ICsraikgaWYoRFsxNzZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc2XVtqXV0gPSA0NTA1NiArIGo7IGRbNDUwNTYgKyBqXSA9IERbMTc2XVtqXTt9XG5cdERbMTc3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ai85ami5ama5amG5amK5a2w5a+H5a+F5a+E5a+C5a6/5a+G5bCJ5bCI5bCH5bGg5bGc5bGd5bSH5bSG5bSO5bSb5bSW5bSi5bSR5bSp5bSU5bSZ5bSk5bSn5bSX5bei5bi45bi25biz5bi35bq35bq45bq25bq15bq+5by15by35b2X5b2s5b2p5b2r5b6X5b6Z5b6e5b6Y5b6h5b6g5b6c5oG/5oKj5oKJ5oKg5oKo5oOL5oK05oOm5oK977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95oOF5oK75oK15oOc5oK85oOY5oOV5oOG5oOf5oK45oOa5oOH5oia5oib5omI5o6g5o6n5o2y5o6W5o6i5o6l5o235o2n5o6Y5o6q5o2x5o6p5o6J5o6D5o6b5o2r5o6o5o6E5o6I5o6Z5o6h5o6s5o6S5o6P5o6A5o275o2p5o2o5o265pWd5pWW5pWR5pWZ5pWX5ZWf5pWP5pWY5pWV5pWU5pac5pab5pas5peP5peL5peM5peO5pmd5pma5pmk5pmo5pmm5pme5pu55YuX5pyb5qKB5qKv5qKi5qKT5qK15qG/5qG25qKx5qKn5qKX5qKw5qKD5qOE5qKt5qKG5qKF5qKU5qKd5qKo5qKf5qKh5qKC5qyy5q6677+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE3N10ubGVuZ3RoOyArK2opIGlmKERbMTc3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE3N11bal1dID0gNDUzMTIgKyBqOyBkWzQ1MzEyICsgal0gPSBEWzE3N11bal07fVxuXHREWzE3OF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veavq+avrOawq+a2jua2vOa3s+a3mea2sua3oea3jOa3pOa3u+a3uua4hea3h+a3i+a2r+a3kea2rua3nua3uea2uOa3t+a3tea3hea3kua4mua2tea3mua3q+a3mOa3qua3sea3rua3qOa3hua3hOa2qua3rOa2v+a3pueDueeEieeEiueDveeDr+eIveeJveeKgeeMnOeMm+eMlueMk+eMmeeOh+eQheeQiueQg+eQhuePvueQjeeToOeTtu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeTt+eUnOeUoueVpeeVpueVoueVsOeWj+eXlOeXleeWteeXiueXjeeajueblOebkuebm+ect+ecvuecvOectuecuOecuuehq+ehg+ehjuelpeelqOelreenu+eqkueqleesoOesqOesm+esrOespuesmeesnuesrueykueyl+eylee1hue1g+e1see0rue0uee0vOe1gOe0sOe0s+e1hOe0r+e1gue0sue0see8vee+nue+mue/jOe/jue/kuiAnOiBiuiBhuiEr+iEluiEo+iEq+iEqeiEsOiEpOiIguiIteiIt+iItuiIueiOjuiOnuiOmOiNuOiOouiOluiOveiOq+iOkuiOiuiOk+iOieiOoOiNt+iNu+iNvO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxNzhdLmxlbmd0aDsgKytqKSBpZihEWzE3OF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxNzhdW2pdXSA9IDQ1NTY4ICsgajsgZFs0NTU2OCArIGpdID0gRFsxNzhdW2pdO31cblx0RFsxNzldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ojobojqfomZXlvarom4fom4Domrbom4TomrXom4bom4vomrHomq/om4nooZPoop7ooojooqvoopLoopbooo3ooovoppPopo/oqKroqJ3oqKPoqKXoqLHoqK3oqJ/oqJvoqKLosYnosZrosqnosqzosqvosqjosqrosqfotafotabotr7otrrou5vou5/pgJnpgI3pgJrpgJfpgKPpgJ/pgJ3pgJDpgJXpgJ7pgKDpgI/pgKLpgJbpgJvpgJTvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pg6jpg63pg73phZfph47ph7Xph6bph6Pph6fph63ph6nplonpmarpmbXpmbPpmbjpmbDpmbTpmbbpmbfpmazpm4Dpm6rpm6nnq6Dnq5/poILpoIPprZrps6XpubXpub/puqXpurvlgqLlgo3lgoXlgpnlgpHlgoDlgpblgpjlgprmnIDlh7HlibLlibTlibXlianli57li53li5vljZrljqXllbvlloDllqfllbzllorllp3llpjlloLllpzllqrllpTllofllovlloPllrPllq7llp/llL7llrLllprllrvllqzllrHllb7llonllqvllpnlnI3loK/loKrloLTloKTloLDloLHloKHloJ3loKDlo7nlo7rlpaDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTc5XS5sZW5ndGg7ICsraikgaWYoRFsxNzldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTc5XVtqXV0gPSA0NTgyNCArIGo7IGRbNDU4MjQgKyBqXSA9IERbMTc5XVtqXTt9XG5cdERbMTgwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95am35aqa5am/5aqS5aqb5aqn5a2z5a2x5a+S5a+M5a+T5a+Q5bCK5bCL5bCx5bWM5bWQ5bS05bWH5be95bmF5bi95bmA5bmD5bm+5buK5buB5buC5buE5by85b2t5b6p5b6q5b6o5oOR5oOh5oKy5oK25oOg5oSc5oSj5oO65oSV5oOw5oO75oO05oWo5oOx5oSO5oO25oSJ5oSA5oSS5oif5omJ5o6j5o6M5o+P5o+A5o+p5o+J5o+G5o+N77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95o+S5o+j5o+Q5o+h5o+W5o+t5o+u5o225o+05o+q5o+b5pGS5o+a5o+55pWe5pWm5pWi5pWj5paR5paQ5pav5pmu5pmw5pm05pm25pmv5pqR5pm65pm+5pm35pu+5pu/5pyf5pyd5qO65qOV5qOg5qOY5qOX5qSF5qOf5qO15qOu5qOn5qO55qOS5qOy5qOj5qOL5qON5qSN5qSS5qSO5qOJ5qOa5qWu5qO75qy+5qy65qy95q6Y5q6W5q685q+v5rCu5rCv5rCs5riv5ri45rmU5rih5riy5rmn5rmK5rig5ril5rij5rib5rmb5rmY5rik5rmW5rmu5rit5rim5rmv5ri05rmN5ri65ris5rmD5rid5ri+5ruL77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4MF0ubGVuZ3RoOyArK2opIGlmKERbMTgwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4MF1bal1dID0gNDYwODAgKyBqOyBkWzQ2MDgwICsgal0gPSBEWzE4MF1bal07fVxuXHREWzE4MV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea6iea4mea5jua5o+a5hOa5sua5qea5n+eEmeeEmueEpueEsOeEoeeEtueFrueEnOeJjOeKhOeKgOeMtueMpeeMtOeMqeeQuueQqueQs+eQoueQpeeQteeQtueQtOeQr+eQm+eQpueQqOeUpeeUpueVq+eVqueXoueXm+eXo+eXmeeXmOeXnueXoOeZu+eZvOealueak+eatOebnOedj+efreehneehrOehr+eojeeoiOeoi+eoheeogOeqmO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeql+eqluerpeero+etieetluethuetkOetkuetlOetjeeti+etj+etkeeyn+eypee1nue1kOe1qOe1lee0q+e1rue1sue1oee1pue1oue1sOe1s+WWhOe/lOe/leiAi+iBkuiCheiFleiFlOiFi+iFkeiFjuiEueiFhuiEvuiFjOiFk+iFtOiIkuiInOiPqeiQg+iPuOiQjeiPoOiPheiQi+iPgeiPr+iPseiPtOiRl+iQiuiPsOiQjOiPjOiPveiPsuiPiuiQuOiQjuiQhOiPnOiQh+iPlOiPn+iZm+ibn+ibmeibreiblOibm+ibpOibkOibnuihl+ijgeijguiiseimg+imluiou+ipoOipleipnuiovOipge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODFdLmxlbmd0aDsgKytqKSBpZihEWzE4MV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODFdW2pdXSA9IDQ2MzM2ICsgajsgZFs0NjMzNiArIGpdID0gRFsxODFdW2pdO31cblx0RFsxODJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oqZToqZvoqZDoqYboqLToqLroqLboqZbosaHosoLosq/osrzosrPosr3os4Hosrvos4DosrTosrfosrbosr/osrjotorotoXotoHot47ot53ot4vot5rot5Hot4zot5vot4bou7vou7jou7zovpzpgK7pgLXpgLHpgLjpgLLpgLbphILpg7XphInpg77phaPphaXph4/piJTpiJXpiKPpiInpiJ7piI3piJDpiIfpiJHplpTplo/plovplpHvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73plpPplpLplo7pmorpmo7pmovpmb3pmoXpmobpmo3pmbLpmoTpm4Hpm4Xpm4Tpm4bpm4fpm6/pm7Lpn4zpoIXpoIbpoIjpo6fpo6rpo6/po6npo7Lpo63ppq7ppq3pu4Ppu43pu5HkuoLlgq3lgrXlgrLlgrPlg4Xlgr7lgqzlgrflgrvlgq/lg4flib/libflib3li5/li6bli6Tli6Lli6PljK/ll5/ll6jll5Pll6bll47ll5zll4fll5Hll6Pll6Tll6/ll5rll6Hll4Xll4bll6Xll4nlnJLlnJPloZ7loZHloZjloZfloZrloZTloavloYzloa3loYrloaLloZLloYvlpaflq4Hlq4nlq4zlqr7lqr3lqrzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTgyXS5sZW5ndGg7ICsraikgaWYoRFsxODJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTgyXVtqXV0gPSA0NjU5MiArIGo7IGRbNDY1OTIgKyBqXSA9IERbMTgyXVtqXTt9XG5cdERbMTgzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95aqz5auC5aqy5bWp5bWv5bmM5bm55buJ5buI5byS5b2Z5b6s5b6u5oSa5oSP5oWI5oSf5oOz5oSb5oO55oSB5oSI5oWO5oWM5oWE5oWN5oS+5oS05oSn5oSN5oSG5oS35oih5oii5pCT5pC+5pCe5pCq5pCt5pC95pCs5pCP5pCc5pCU5pCN5pC25pCW5pCX5pCG5pWs5paf5paw5pqX5pqJ5pqH5pqI5pqW5pqE5pqY5pqN5pyD5qaU5qWt77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95qWa5qW35qWg5qWU5qW15qSw5qaC5qWK5qWo5qWr5qWe5qWT5qW55qaG5qWd5qWj5qWb5q2H5q2y5q+A5q6/5q+T5q+95rqi5rqv5ruT5rq25ruC5rqQ5rqd5ruH5ruF5rql5rqY5rq85rq65rqr5ruR5rqW5rqc5ruE5ruU5rqq5rqn5rq054WO54WZ54Wp54Wk54WJ54Wn54Wc54Ws54Wm54WM54Wl54We54WG54Wo54WW54i654mS54y3542F54y/54y+55Gv55Ga55GV55Gf55Ge55GB55C/55GZ55Gb55Gc55W255W455iA55ew55iB55ey55ex55e655e/55e055ez55ue55uf552b552r552m552e552j77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4M10ubGVuZ3RoOyArK2opIGlmKERbMTgzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4M11bal1dID0gNDY4NDggKyBqOyBkWzQ2ODQ4ICsgal0gPSBEWzE4M11bal07fVxuXHREWzE4NF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veedueedquedrOednOedpeedqOedouefrueijueisOeil+eimOeijOeiieehvOeikeeik+ehv+eluuelv+emgeiQrOemveeonOeomueooOeolOeon+eonueqn+eqoOett+evgOetoOetruetp+eyseeys+eytee2k+e1uee2kee2gee2j+e1m+e9rue9qee9que9sue+qee+qOe+pOiBluiBmOiChuiChOiFseiFsOiFuOiFpeiFruiFs+iFq++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiFueiFuuiFpuiIheiJh+iSguiRt+iQveiQseiRteiRpuiRq+iRieiRrOiRm+iQvOiQteiRoeiRo+iRqeiRreiRhuiZnuiZnOiZn+ibueick+iciOich+icgOibvuibu+icguicg+ichuiciuihmeijn+ijlOijmeijnOijmOijneijoeijiuijleijkuimnOino+ipq+ipsuips+ippuipqeipsOiqh+ipvOipo+iqoOipseiqheipreipouipruiprOipueipu+iovuipqOixouiyiuiyieiziuizh+iziOizhOiysuizg+izguizhei3oei3n+i3qOi3r+i3s+i3uui3qui3pOi3pui6sui8g+i8iei7vui8iu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODRdLmxlbmd0aDsgKytqKSBpZihEWzE4NF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODRdW2pdXSA9IDQ3MTA0ICsgajsgZFs0NzEwNCArIGpdID0gRFsxODRdW2pdO31cblx0RFsxODVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ovp/ovrLpgYvpgYrpgZPpgYLpgZTpgLzpgZXpgZDpgYfpgY/pgY7pgY3pgZHpgL7pgYHphJLphJfphazpharphanph4npiLfpiZfpiLjpiL3piYDpiL7piZvpiYvpiaTpiZHpiLTpiYnpiY3piYXpiLnpiL/piZrplpjpmpjpmpTpmpXpm43pm4vpm4npm4rpm7fpm7vpm7npm7bpnZbpnbTpnbbpoJDpoJHpoJPpoIrpoJLpoIzpo7zpo7Tvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73po73po77pprPpprHpprTpq6Hps6npuoLpvI7pvJPpvKDlg6flg67lg6Xlg5blg63lg5rlg5Xlg4/lg5Hlg7Hlg47lg6nlhaLlh7PlioPlioLljLHljq3ll77lmIDlmJvlmJfll73lmJTlmIblmInlmI3lmI7ll7flmJblmJ/lmIjlmJDll7blnJjlnJblobXlob7looPlopPloorlobnlooXlob3lo73lpKXlpKLlpKTlparlpanlq6Hlq6blq6nlq5flq5blq5jlq6PlrbXlr57lr6flr6Hlr6Xlr6blr6jlr6Llr6Tlr5/lsI3lsaLltoTltofluZvluaPluZXluZfluZTlu5Plu5blvIrlvYblvbDlvrnmhYfvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg1XS5sZW5ndGg7ICsraikgaWYoRFsxODVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg1XVtqXV0gPSA0NzM2MCArIGo7IGRbNDczNjAgKyBqXSA9IERbMTg1XVtqXTt9XG5cdERbMTg2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95oS/5oWL5oW35oWi5oWj5oWf5oWa5oWY5oW15oiq5pKH5pGY5pGU5pKk5pG45pGf5pG65pGR5pGn5pC05pGt5pG75pWy5pah5peX5peW5pqi5pqo5pqd5qac5qao5qaV5qeB5qau5qeT5qeL5qab5qa35qa75qar5qa05qeQ5qeN5qat5qeM5qam5qeD5qaj5q2J5q2M5rCz5ryz5ryU5ru+5ryT5ru05ryp5ry+5ryg5rys5ryP5ryC5ryi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ru/5ruv5ryG5ryx5ry45ryy5ryj5ryV5ryr5ryv5r6I5ryq5rus5ryB5ruy5ruM5ru354aU54aZ54W954aK54aE54aS54i+54qS54qW542E542Q55Gk55Gj55Gq55Gw55Gt55SE55aR55in55iN55iL55iJ55iT55uh55uj556E5529552/552h56OB56Kf56Kn56Kz56Kp56Kj56aO56aP56aN56iu56ix56qq56qp56ut56uv566h566V566L5621566X566d566U566P5664566H566E57K557K957K+57a757aw57ac57a957a+57ag57eK57a057ay57ax57a657ai57a/57a157a457at57eS57eH57as77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4Nl0ubGVuZ3RoOyArK2opIGlmKERbMTg2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4Nl1bal1dID0gNDc2MTYgKyBqOyBkWzQ3NjE2ICsgal0gPSBEWzE4Nl1bal07fVxuXHREWzE4N10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee9sOe/oOe/oee/n+iBnuiBmuiCh+iFkOiGgOiGj+iGiOiGiuiFv+iGguiHp+iHuuiIh+iIlOiInuiJi+iTieiSv+iThuiThOiSmeiSnuiSsuiSnOiTi+iSuOiTgOiTk+iSkOiSvOiTkeiTiuicv+icnOicu+icouicpeictOicmOidleict+icqeijs+ikguijtOijueijuOijveijqOikmuijr+iqpuiqjOiqnuiqo+iqjeiqoeiqk+iqpO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiqquiqpeiqqOiqmOiqkeiqmuiqp+ixquiyjeiyjOizk+izkeizkui1q+i2mei2lei3vOi8lOi8kui8lei8k+i+o+mBoOmBmOmBnOmBo+mBmemBnumBoumBnemBm+mEmemEmOmEnumFtemFuOmFt+mFtOmJuOmKgOmKhemKmOmKlumJu+mKk+mKnOmKqOmJvOmKkemWoemWqOmWqemWo+mWpemWpOmamemanOmam+mbjOmbkumcgOmdvOmehemftumgl+mgmOmir+misemkg+mkhemkjOmkiemngemqr+mqsOmrpumtgemtgumztOmztumzs+m6vOm8u+m9iuWEhOWEgOWDu+WDteWDueWEguWEiOWEieWEheWHnO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxODddLmxlbmd0aDsgKytqKSBpZihEWzE4N11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxODddW2pdXSA9IDQ3ODcyICsgajsgZFs0Nzg3MiArIGpdID0gRFsxODddW2pdO31cblx0RFsxODhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73liofliojlionlio3liorli7DljrLlmK7lmLvlmLnlmLLlmL/lmLTlmKnlmZPlmY7lmZflmbTlmLblmK/lmLDlooDlop/lop7lorPlopzloq7loqnloqblpa3lrInlq7vlrIvlq7XlrIzlrIjlr67lr6zlr6nlr6vlsaTlsaXltp3ltpTluaLluZ/luaHlu6Llu5rlu5/lu53lu6Plu6DlvYjlvbHlvrflvrXmhbbmhafmha7mhZ3mhZXmhoLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mhbzmhbDmhavmhb7mhqfmhpDmhqvmho7mhqzmhprmhqTmhpTmhq7miK7mkanmka/mkbnmkp7mkrLmkojmkpDmkrDmkqXmkpPmkpXmkqnmkpLmkq7mkq3mkqvmkprmkqzmkpnmkqLmkrPmlbXmlbfmlbjmmq7mmqvmmrTmmrHmqKPmqJ/mp6jmqIHmqJ7mqJnmp73mqKHmqJPmqIrmp7PmqILmqIXmp63mqJHmrZDmrY7mrqTmr4Xmr4bmvL/mvbzmvoTmvZHmvabmvZTmvobmva3mvZvmvbjmva7mvo7mvbrmvbDmvaTmvpfmvZjmu5Xmva/mvaDmvZ/nhp/nhqznhrHnhqjniZbnipvnjY7njZfnkannkovnkoPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTg4XS5sZW5ndGg7ICsraikgaWYoRFsxODhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTg4XVtqXV0gPSA0ODEyOCArIGo7IGRbNDgxMjggKyBqXSA9IERbMTg4XVtqXTt9XG5cdERbMTg5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+955G+55KA55W/55ig55ip55if55ik55im55ih55ii55qa55q655uk556O556H556M556R556L56OL56OF56K656OK56K+56OV56K856OQ56i/56i856mA56i956i356i756qv56qu566t566x56+E566056+G56+H56+B566g56+M57OK57eg57e057ev57e757eY57es57ed57eo57ej57ea57ee57ep57ae57eZ57ey57e557215723576v77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+957+p6ICm6Iab6Iac6Iad6Iag6Iaa6IaY6JSX6JS96JSa6JOu6JSs6JSt6JST6JSR6JSj6JSh6JSU6JOs6JSl6JO/6JSG6J6C6J206J226J2g6J2m6J246J2o6J2Z6J2X6J2M6J2T6KGb6KGd6KSQ6KSH6KSS6KST6KSV6KSK6Kq86KuS6KuH6KuE6KqV6KuL6Ku46Kqy6KuJ6KuC6Kq/6Kqw6KuW6KuN6Kq26Kq56Kub6LGM6LGO6LGs6LOg6LOe6LOm6LOk6LOs6LOt6LOi6LOj6LOc6LOq6LOh6LWt6Laf6Laj6Lir6LiQ6Lid6Lii6LiP6Lip6Lif6Lih6Lie6Lq66Lyd6Lyb6Lyf6Lyp6Lym6Lyq6Lyc6Lye77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE4OV0ubGVuZ3RoOyArK2opIGlmKERbMTg5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE4OV1bal1dID0gNDgzODQgKyBqOyBkWzQ4Mzg0ICsgal0gPSBEWzE4OV1bal07fVxuXHREWzE5MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vei8pemBqemBrumBqOmBremBt+mEsOmEremEp+mEsemGh+mGiemGi+mGg+mLhemKu+mKt+mLqumKrOmLpOmLgemKs+mKvOmLkumLh+mLsOmKsumWremWsemchOmchumch+mciemdoOmejemei+mej+mgoemgq+mgnOmis+mkiumkk+mkkumkmOmnnemnkOmnn+mnm+mnkemnlemnkumnmemqt+mrrumrr+msp+mthemthOmtt+mtr+m0hum0ie+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vem0g+m6qem6vum7juWiqOm9kuWEkuWEmOWElOWEkOWEleWGgOWGquWHneWKkeWKk+WLs+WZmeWZq+WZueWZqeWZpOWZuOWZquWZqOWZpeWZseWZr+WZrOWZouWZtuWjgeWivuWjh+WjheWlruWsneWstOWtuOWvsOWwjuW9iuaGsuaGkeaGqeaGiuaHjeaGtuaGvuaHiuaHiOaIsOaTheaTgeaTi+aSu+aSvOaTmuaThOaTh+aTguaTjeaSv+aTkuaTlOaSvuaVtOabhuabieaaueabhOabh+aauOaoveaouOaouuapmeapq+apmOaoueaphOapouapoeapi+aph+aoteapn+apiOatmeatt+awhea/gua+sea+oe+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTBdLmxlbmd0aDsgKytqKSBpZihEWzE5MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTBdW2pdXSA9IDQ4NjQwICsgajsgZFs0ODY0MCArIGpdID0gRFsxOTBdW2pdO31cblx0RFsxOTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mv4PmvqTmv4HmvqfmvrPmv4DmvrnmvrbmvqbmvqDmvrTnhr7nh4nnh5Dnh5Lnh4jnh5Xnhrnnh47nh5nnh5znh4Pnh4TnjajnkpznkqPnkpjnkp/nkp7nk6LnlIznlI3nmLTnmLjnmLrnm6fnm6XnnqDnnp7nnp/nnqXno6jno5rno6zno6fnpqbnqY3nqY7nqYbnqYznqYvnqrrnr5nnsJHnr4nnr6Tnr5vnr6Hnr6nnr6bns5Xns5bnuIrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nuJHnuIjnuJvnuKPnuJ7nuJ3nuInnuJDnvbnnvrLnv7Dnv7Hnv67ogKjohrPohqnohqjoh7voiIjoiZjoiZnolYrolZnolYjolajolanolYPolYnola3olarolZ7onoPonp/onp7onqLono3ooaHopKropLLopKXopKvopKHopqropqboq6boq7roq6voq7HorIDoq5zoq6foq67oq77orIHorILoq7foq63oq7Poq7boq7zosavosa3ospPos7TouYTouLHouLTouYLouLnouLXovLvovK/ovLjovLPovqjovqbpgbXpgbTpgbjpgbLpgbzpgbrphLTphpLpjKDpjLbpi7jpjLPpjK/pjKLpi7zpjKvpjITpjJrvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTkxXS5sZW5ndGg7ICsraikgaWYoRFsxOTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTkxXVtqXV0gPSA0ODg5NiArIGo7IGRbNDg4OTYgKyBqXSA9IERbMTkxXVtqXTt9XG5cdERbMTkyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96YyQ6Yym6Yyh6YyV6Yyu6YyZ6Za76Zqn6Zqo6Zqq6ZuV6ZyO6ZyR6ZyW6ZyN6ZyT6ZyP6Z2b6Z2c6Z2m6Z6Y6aCw6aC46aC76aC36aCt6aC56aCk6aSQ6aSo6aSe6aSb6aSh6aSa6aet6aei6aex6aq46aq86au76aut6ayo6a6R6bSV6bSj6bSm6bSo6bSS6bSb6buY6buU6b6N6b6c5YSq5YSf5YSh5YSy5Yu15ZqO5ZqA5ZqQ5ZqF5ZqH77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZqP5aOV5aOT5aOR5aOO5ayw5ayq5ayk5a265bC35bGo5ba85ba65ba95ba45bmr5b2M5b695oeJ5oeC5oeH5oem5oeL5oiy5oi05pOO5pOK5pOY5pOg5pOw5pOm5pOs5pOx5pOi5pOt5paC5paD5puZ5puW5qqA5qqU5qqE5qqi5qqc5qub5qqj5qm+5qqX5qqQ5qqg5q2c5q6u5q+a5rCI5r+Y5r+x5r+f5r+g5r+b5r+k5r+r5r+v5r6A5r+s5r+h5r+p5r+V5r+u5r+w54en54ef54eu54em54el54et54es54e054eg54i154mG542w542y55Kp55Kw55Km55Ko55mG55mC55mM55uq556z556q556w556s77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5Ml0ubGVuZ3RoOyArK2opIGlmKERbMTkyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5Ml1bal1dID0gNDkxNTIgKyBqOyBkWzQ5MTUyICsgal0gPSBEWzE5Ml1bal07fVxuXHREWzE5M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeep+eereefr+ejt+ejuuejtOejr+ekgeemp+emquepl+eqv+ewh+ewjeevvuevt+ewjOevoOezoOeznOeznuezouezn+ezmeeznee4rue4vue5hue4t+e4sue5g+e4q+e4vee4see5hee5gee4tOe4uee5iOe4tee4v+e4r+e9hOe/s+e/vOiBseiBsuiBsOiBr+iBs+iHhuiHg+iGuuiHguiHgOiGv+iGveiHieiGvuiHqOiIieiJseiWqu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiWhOiVvuiWnOiWkeiWlOiWr+iWm+iWh+iWqOiWiuiZp+ifgOifkeies+ifkuifhuieq+ieu+ieuuifiOifi+iku+iktuilhOikuOikveimrOisjuisl+ismeism+isiuisoOisneishOiskOixgeiwv+ixs+izuuizveizvOizuOizu+i2qOi5iei5i+i5iOi5iui9hOi8vui9gui9hei8v+mBv+mBvemChOmCgemCgumCgOmEuemGo+mGnumGnOmNjemOgumMqOmNtemNiumNpemNi+mMmOmNvumNrOmNm+mNsOmNmumNlOmXiumXi+mXjOmXiOmXhumasemauOmblumcnOmcnumeoOmfk+mhhumitumktemoge+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTNdLmxlbmd0aDsgKytqKSBpZihEWzE5M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTNdW2pdXSA9IDQ5NDA4ICsgajsgZFs0OTQwOCArIGpdID0gRFsxOTNdW2pdO31cblx0RFsxOTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pp7/prq7prqvprqrprq3ptLvptL/puovpu4/pu57pu5zpu53pu5vpvL7pvYvlj6LlmpXlmq7lo5nlo5jlrLjlvZ3mh6PmiLPmk7Tmk7Lmk77mlIbmk7rmk7vmk7fmlrfmm5zmnKbmqrPmqqzmq4Pmqrvmqrjmq4Lmqq7mqq/mrZ/mrbjmrq/ngInngIvmv77ngIbmv7rngJHngI/nh7vnh7znh77nh7jnjbfnjbXnkqfnkr/nlJXnmZbnmZjvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nmZLnnr3nnr/nnrvnnrznpI7npq7nqaHnqaLnqaDnq4Tnq4XnsKvnsKfnsKrnsJ7nsKPnsKHns6fnuZTnuZXnuZ7nuZrnuaHnuZLnuZnnvYjnv7nnv7vogbfogbboh43oh4/oiIrol4/olqnol43ol5Dol4nolrDolrrolrnolqbon6/on6zon7Lon6DopoboprLop7TorKjorLnorKzorKvosZDotIXouZnouaPouabouaTouZ/ouZXou4DovYnovY3pgofpgoPpgojphqvphqzph5DpjpTpjorpjpbpjqLpjrPpjq7pjqzpjrDpjpjpjprpjpfpl5Tpl5bpl5Dpl5Xpm6Lpm5zpm5npm5vpm57pnKTpnqPpnqbvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk0XS5sZW5ndGg7ICsraikgaWYoRFsxOTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk0XVtqXV0gPSA0OTY2NCArIGo7IGRbNDk2NjQgKyBqXSA9IERbMTk0XVtqXTt9XG5cdERbMTk1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Z6t6Z+56aGN6aGP6aGM6aGO6aGT6aK66aS+6aS/6aS96aSu6aal6aiO6auB6ayD6ayG6a2P6a2O6a2N6a+K6a+J6a+96a+I6a+A6bWR6bWd6bWg6bug6byV6bys5YSz5Zql5aOe5aOf5aOi5a+16b6Q5bus5oey5oe35oe25oe15pSA5pSP5pug5pud5qul5qud5qua5quT54Cb54Cf54Co54Ca54Cd54CV54CY54iG54iN54mY54qi542477+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9542655K955OK55Oj55aH55aG55mf55mh55+H56SZ56ax56mr56mp57C+57C/57C457C957C357GA57mr57mt57m557mp57mq576F57mz5762576557646IeY6Jep6Jed6Jeq6JeV6Jek6Jel6Je36J+76KCF6KCN6J+56J++6KWg6KWf6KWW6KWe6K2B6K2c6K2Y6K2J6K2a6K2O6K2P6K2G6K2Z6LSI6LSK6Lm86Lmy6LqH6Lm26Lms6Lm66Lm06L2U6L2O6L6t6YKK6YKL6Yax6Yau6Y+h6Y+R6Y+f6Y+D6Y+I6Y+c6Y+d6Y+W6Y+i6Y+N6Y+Y6Y+k6Y+X6Y+o6Zec6Zq06Zuj6Zyq6Zyn6Z2h6Z+c6Z+76aGe77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5NV0ubGVuZ3RoOyArK2opIGlmKERbMTk1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5NV1bal1dID0gNDk5MjAgKyBqOyBkWzQ5OTIwICsgal0gPSBEWzE5NV1bal07fVxuXHREWzE5Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemhmOmhm+mivOmlhemliemolumomemsjemvqOmvp+mvlumvm+m2iem1oem1sum1qum1rOm6kum6l+m6k+m6tOWLuOWaqOWat+WatuWatOWavOWjpOWtgOWtg+WtveWvtuW3ieaHuOaHuuaUmOaUlOaUmeabpuacp+arrOeAvueAsOeAsueIkOeNu+eTj+eZoueZpeekpuekquekrOekq+erh+ertuexjOexg+exjeezr+ezsOi+rue5vee5vO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee6gue9jOiAgOiHmuiJpuiXu+iXueiYkeiXuuiYhuiYi+iYh+iYiuiglOigleilpOimuuinuOitsOitrOitpuitr+itn+itq+i0j+i0jei6iei6gei6hei6gumGtOmHi+mQmOmQg+mPvemXoemcsOmjhOmlkumlkemmqOmoq+mosOmot+motemwk+mwjem5uem6tem7qOm8r+m9n+m9o+m9oeWEt+WEuOWbgeWbgOWbguWklOWxrOW3jeaHvOaHvuaUneaUnOaWleabqearu+ashOaruuausueBjOeIm+eKp+eTlueTlOeZqeefk+exkOe6j+e6jOe+vOiYl+iYreiYmuigo+igouigoeign+ilquilrOimveittO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsxOTZdLmxlbmd0aDsgKytqKSBpZihEWzE5Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsxOTZdW2pdXSA9IDUwMTc2ICsgajsgZFs1MDE3NiArIGpdID0gRFsxOTZdW2pdO31cblx0RFsxOTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73orbforb3otJPouorouo3ouovovZ/ovq/phrrpkK7pkLPpkLXpkLrpkLjpkLLpkKvpl6LpnLjpnLnpnLLpn7/poafpoaXppZfpqYXpqYPpqYDpqL7pq4/prZTprZHpsK3psKXptq/ptrTpt4Lptrjpup3pu6/pvJnpvZzpvabpvaflhLzlhLvlm4jlm4rlm4nlrb/lt5Tlt5LlvY7mh7/mlKTmrIrmraHngZHngZjnjoDnk6Tnlornma7nmazvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nprPnsaDnsZ/ogb7ogb3oh5/opbLopa/op7zoroDotJbotJfoupHoupPovaHphYjpkYTpkZHpkZLpnL3pnL7pn4Ppn4HpoavppZXpqZXpqY3pq5LprJrpsYnpsLHpsL7psLvpt5Ppt5fpvLTpvazpvarpvpTlm4zlt5bmiIDmlKPmlKvmlKrmm6zmrJDnk5rnq4rnsaTnsaPnsaXnupPnupbnupToh6LomLjomL/ooLHororpgpDpgo/pkaPpkaDpkaTpnajpoa/ppZzpqZrpqZvpqZfpq5Ppq5Tpq5HpsZTpsZfpsZbpt6Xpup/pu7Tlm5Hlo6nmlKzngZ7nmbHnmbLnn5fnvZDnvojooLbooLnooaLorpPorpLvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMTk3XS5sZW5ndGg7ICsraikgaWYoRFsxOTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMTk3XVtqXV0gPSA1MDQzMiArIGo7IGRbNTA0MzIgKyBqXSA9IERbMTk3XVtqXTt9XG5cdERbMTk4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96K6W6Im36LSb6YeA6ZGq6Z2C6Z2I6Z2E6Z+G6aGw6amf6ayi6a2Y6bGf6be56be66bm86bm96byH6b236b2y5buz5qyW54Gj57Gs57Gu6KC76KeA6Lqh6YeB6ZGy6ZGw6aGx6aWe6auW6ayj6buM54Gk55+a6K6a6ZG36Z+J6ami6aml57qc6K6c6Lqq6YeF6ZG96ZG+6ZG86bG36bG46bu36LGU6ZG/6bia54io6amq6ayx6bib6bie57Gy77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzE5OF0ubGVuZ3RoOyArK2opIGlmKERbMTk4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzE5OF1bal1dID0gNTA2ODggKyBqOyBkWzUwNjg4ICsgal0gPSBEWzE5OF1bal07fVxuXHREWzIwMV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veS5guS5nOWHteWMmuWOguS4h+S4jOS5h+S6jeWbl++ojOWxruW9s+S4j+WGh+S4juS4ruS6k+S7guS7ieS7iOWGmOWLvOWNrOWOueWcoOWkg+WkrOWwkOW3v+aXoeaus+avjOawlOeIv+S4seS4vOS7qOS7nOS7qeS7oeS7neS7muWIjOWMnOWNjOWcouWco+Wkl+Wkr+WugeWuhOWwkuWwu+WxtOWxs+W4hOW6gOW6guW/ieaIieaJkOawle+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veawtuaxg+awv+awu+eKrueKsOeOiuemuOiCiumYnuS8juS8mOS8rOS7teS8lOS7seS8gOS7t+S8iOS8neS8guS8heS8ouS8k+S8hOS7tOS8kuWGseWIk+WIieWIkOWKpuWMouWMn+WNjeWOiuWQh+WboeWbn+WcruWcquWctOWkvOWmgOWlvOWmheWlu+WlvuWlt+Wlv+WtluWwleWwpeWxvOWxuuWxu+WxvuW3n+W5teW6hOW8guW8muW9tOW/leW/lOW/j+aJnOaJnuaJpOaJoeaJpuaJouaJmeaJoOaJmuaJpeaXr+aXruacvuacueacuOacu+acuuacv+acvOacs+awmOaxhuaxkuaxnOaxj+axiuaxlOaxi++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDFdLmxlbmd0aDsgKytqKSBpZihEWzIwMV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDFdW2pdXSA9IDUxNDU2ICsgajsgZFs1MTQ1NiArIGpdID0gRFsyMDFdW2pdO31cblx0RFsyMDJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73msYzngbHniZ7nirTnirXnjo7nlKrnmb/nqbXnvZHoibjoibzoioDoib3oib/omY3opb7pgpnpgpfpgpjpgpvpgpTpmKLpmKTpmKDpmKPkvZbkvLvkvaLkvYnkvZPkvaTkvL7kvafkvZLkvZ/kvYHkvZjkvK3kvLPkvL/kvaHlho/lhrnliJzliJ7liKHliq3liq7ljInljaPljbLljo7ljo/lkLDlkLflkKrlkZTlkYXlkJnlkJzlkKXlkJjvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lkL3lkY/lkYHlkKjlkKTlkYflm67lm6flm6XlnYHlnYXlnYzlnYnlnYvlnZLlpIblpYDlpqblppjlpqDlppflpo7lpqLlppDlpo/lpqflpqHlro7lrpLlsKjlsKrlso3lso/lsojlsovlsonlspLlsorlsoblspPlspXlt6DluIrluI7luovluonluozluojluo3lvIXlvJ3lvbjlvbblv5Llv5Hlv5Dlv63lv6jlv67lv7Plv6Hlv6Tlv6Plv7rlv6/lv7flv7vmgIDlv7TmiLrmioPmiozmio7mio/mipTmiofmibHmibvmibrmibDmioHmiojmibfmib3mibLmibTmlLfml7Dml7Tml7Pml7Lml7XmnYXmnYfvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjAyXS5sZW5ndGg7ICsraikgaWYoRFsyMDJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjAyXVtqXV0gPSA1MTcxMiArIGo7IGRbNTE3MTIgKyBqXSA9IERbMjAyXVtqXTt9XG5cdERbMjAzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95p2Z5p2V5p2M5p2I5p2d5p2N5p2a5p2L5q+Q5rCZ5rCa5rG45rGn5rGr5rKE5rKL5rKP5rGx5rGv5rGp5rKa5rGt5rKH5rKV5rKc5rGm5rGz5rGl5rG75rKO54G054G654mj54q/54q954uD54uG54uB54q654uF546V546X546T546U546S55S655S555aU55aV55qB56S96IC06IKV6IKZ6IKQ6IKS6IKc6IqQ6IqP6IqF6IqO6IqR6IqT77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96IqK6IqD6IqE6LG46L+J6L6/6YKf6YKh6YKl6YKe6YKn6YKg6Ziw6Zio6Ziv6Zit5Liz5L6Y5L285L6F5L295L6A5L6H5L225L205L6J5L6E5L235L2M5L6X5L2q5L6a5L255L6B5L245L6Q5L6c5L6U5L6e5L6S5L6C5L6V5L2r5L2u5Yae5Ya85Ya+5Yi15Yiy5Yiz5YmG5Yix5Yq85YyK5YyL5Yy85Y6S5Y6U5ZKH5ZG/5ZKB5ZKR5ZKC5ZKI5ZGr5ZG65ZG+5ZGl5ZGs5ZG05ZGm5ZKN5ZGv5ZGh5ZGg5ZKY5ZGj5ZGn5ZGk5Zu35Zu55Z2v5Z2y5Z2t5Z2r5Z2x5Z2w5Z225Z6A5Z215Z275Z2z5Z205Z2i77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwM10ubGVuZ3RoOyArK2opIGlmKERbMjAzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwM11bal1dID0gNTE5NjggKyBqOyBkWzUxOTY4ICsgal0gPSBEWzIwM11bal07fVxuXHREWzIwNF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWdqOWdveWkjOWlheWmteWmuuWnj+WnjuWmsuWnjOWngeWmtuWmvOWng+WnluWmseWmveWngOWniOWmtOWnh+WtouWtpeWuk+WuleWxhOWxh+WyruWypOWyoOWyteWyr+WyqOWyrOWyn+Wyo+WyreWyouWyquWyp+WyneWypeWytuWysOWypuW4l+W4lOW4meW8qOW8ouW8o+W8pOW9lOW+guW9vuW9veW/nuW/peaAreaApuaAmeaAsuaAi++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaAtOaAiuaAl+aAs+aAmuaAnuaArOaAouaAjeaAkOaAruaAk+aAkeaAjOaAieaAnOaIlOaIveaKreaKtOaLkeaKvuaKquaKtuaLiuaKruaKs+aKr+aKu+aKqeaKsOaKuOaUveaWqOaWu+aYieaXvOaYhOaYkuaYiOaXu+aYg+aYi+aYjeaYheaXveaYkeaYkOabtuaciuaeheadrOaejuaekuadtuadu+aemOaehuaehOadtOaejeaejOaduuaen+aekeaemeaeg+adveaegeaduOadueaelOaspeaugOatvuavnuawneayk+azrOazq+azruazmeaytuazlOayreazp+ayt+azkOazguayuuazg+azhuazreazsu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDRdLmxlbmd0aDsgKytqKSBpZihEWzIwNF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDRdW2pdXSA9IDUyMjI0ICsgajsgZFs1MjIyNCArIGpdID0gRFsyMDRdW2pdO31cblx0RFsyMDVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ms5Lms53msrTmsormsp3msoDms57ms4DmtLDms43ms4fmsrDms7nms4/ms6nms5HngpTngpjngoXngpPngobngoTngpHngpbngoLngprngoPniarni5bni4vni5jni4nni5zni5Lni5Tni5rni4zni5HnjqTnjqHnjq3njqbnjqLnjqDnjqznjp3nk53nk6jnlL/nlYDnlL7nloznlpjnmq/nm7Pnm7Hnm7Dnm7Xnn7jnn7znn7nnn7vnn7rvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nn7fnpYLnpL/np4Xnqbjnqbvnq7vnsbXns73ogLXogo/ogq7ogqPogrjogrXogq3oiKDoiqDoi4DoiqvoiproipjoipvoirXoiqfoiq7oirzoip7oirroirToiqjoiqHoiqnoi4LoiqToi4PoirboiqLombDoma/oma3oma7osZbov5Lov4vov5Pov43ov5bov5Xov5fpgrLpgrTpgq/pgrPpgrDpmLnpmL3pmLzpmLrpmYPkv43kv4Xkv5PkvrLkv4nkv4vkv4Hkv5Tkv5zkv5nkvrvkvrPkv5vkv4fkv5bkvrrkv4Dkvrnkv6zliYTliYnli4Dli4LljL3ljbzljpfljpbljpnljpjlkrrlkqHlkq3lkqXlk4/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA1XS5sZW5ndGg7ICsraikgaWYoRFsyMDVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA1XVtqXV0gPSA1MjQ4MCArIGo7IGRbNTI0ODAgKyBqXSA9IERbMjA1XVtqXTt9XG5cdERbMjA2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZOD6IyN5ZK35ZKu5ZOW5ZK25ZOF5ZOG5ZKg5ZGw5ZK85ZKi5ZK+5ZGy5ZOe5ZKw5Z615Z6e5Z6f5Z6k5Z6M5Z6X5Z6d5Z6b5Z6U5Z6Y5Z6P5Z6Z5Z6l5Z6a5Z6V5aO05aSN5aWT5aeh5aee5aeu5aiA5aex5aed5ae65ae95ae85ae25aek5aey5ae35aeb5aep5aez5ae15aeg5ae+5ae05aet5a6o5bGM5bOQ5bOY5bOM5bOX5bOL5bOb77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95bOe5bOa5bOJ5bOH5bOK5bOW5bOT5bOU5bOP5bOI5bOG5bOO5bOf5bO45be55bih5bii5bij5big5bik5bqw5bqk5bqi5bqb5bqj5bql5byH5byu5b2W5b6G5oC35oC55oGU5oGy5oGe5oGF5oGT5oGH5oGJ5oGb5oGM5oGA5oGC5oGf5oCk5oGE5oGY5oGm5oGu5omC5omD5ouP5oyN5oyL5ou15oyO5oyD5our5ou55oyP5oyM5ou45ou25oyA5oyT5oyU5ou65oyV5ou75ouw5pWB5pWD5paq5pa/5pi25pih5piy5pi15pic5pim5pii5piz5pir5pi65pid5pi05pi55piu5pyP5pyQ5p+B5p+y5p+I5p6677+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwNl0ubGVuZ3RoOyArK2opIGlmKERbMjA2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwNl1bal1dID0gNTI3MzYgKyBqOyBkWzUyNzM2ICsgal0gPSBEWzIwNl1bal07fVxuXHREWzIwN10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veafnOaeu+afuOafmOafgOaet+afheafq+afpOafn+aeteafjeaes+aft+aftuafruafo+afguaeueafjuafp+afsOaesuafvOafhuafreafjOaeruafpuafm+afuuafieafiuafg+afquafi+asqOauguauhOautuavluavmOavoOawoOawoea0qOa0tOa0rea0n+a0vOa0v+a0kua0iuazmua0s+a0hOa0mea0uua0mua0kea0gOa0nea1gu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea0gea0mOa0t+a0g+a0j+a1gOa0h+a0oOa0rOa0iOa0oua0iea0kOeCt+eCn+eCvueCseeCsOeCoeeCtOeCteeCqeeJgeeJieeJiueJrOeJsOeJs+eJrueLiueLpOeLqOeLq+eLn+eLqueLpueLo+eOheePjOePguePiOePheeOueeOtueOteeOtOePq+eOv+ePh+eOvuePg+ePhueOuOePi+eTrOeTrueUrueVh+eViOeWp+eWqueZueebhOeciOecg+echOecheeciuebt+ebu+ebuuefp+efqOeghuegkeegkuegheegkOegj+egjuegieegg+egk+eliueljOeli+elheelhOenleenjeenj+enluenjueqgO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMDddLmxlbmd0aDsgKytqKSBpZihEWzIwN11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMDddW2pdXSA9IDUyOTkyICsgajsgZFs1Mjk5MiArIGpdID0gRFsyMDddW2pdO31cblx0RFsyMDhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nqb7nq5HnrIDnrIHnsbrnsbjnsbnnsb/nsoDnsoHntIPntIjntIHnvZjnvpHnvo3nvr7ogIfogI7ogI/ogJTogLfog5jog4fog6Dog5Hog4jog4Log5Dog4Xog6Pog5nog5zog4rog5Xog4nog4/og5fog6bog43oh7/oiKHoipToi5noi77oi7nojIfoi6jojIDoi5XojLroi6voi5boi7Toi6zoi6Hoi7Loi7XojIzoi7voi7boi7Doi6rvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oi6Toi6Doi7roi7Poi63ombfombTombzombPooYHooY7ooafooarooanop5PoqIToqIfotbLov6Pov6Hov67ov6Dpg7Hpgr3pgr/pg5Xpg4Xpgr7pg4fpg4vpg4jph5Tph5PpmZTpmY/pmZHpmZPpmYrpmY7lgJ7lgIXlgIflgJPlgKLlgLDlgJvkv7Xkv7TlgLPlgLflgKzkv7bkv7flgJflgJzlgKDlgKflgLXlgK/lgLHlgI7lhZrlhpTlhpPlh4rlh4Tlh4Xlh4jlh47liaHliZrliZLliZ7liZ/liZXliaLli43ljI7ljp7llKblk6LllJfllJLlk6flk7Plk6TllJrlk7/llITllIjlk6vllJHllIXlk7Hvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjA4XS5sZW5ndGg7ICsraikgaWYoRFsyMDhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjA4XVtqXV0gPSA1MzI0OCArIGo7IGRbNTMyNDggKyBqXSA9IERbMjA4XVtqXTt9XG5cdERbMjA5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZSK5ZO75ZO35ZO45ZOg5ZSO5ZSD5ZSL5ZyB5ZyC5Z+M5aCy5Z+V5Z+S5Z665Z+G5Z695Z685Z645Z625Z6/5Z+H5Z+Q5Z655Z+B5aSO5aWK5aiZ5aiW5ait5aiu5aiV5aiP5aiX5aiK5aie5aiz5a2s5a6n5a6t5a6s5bCD5bGW5bGU5bOs5bO/5bOu5bOx5bO35bSA5bO55bip5bio5bqo5bqu5bqq5bqs5byz5byw5b2n5oGd5oGa5oGn77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95oGB5oKi5oKI5oKA5oKS5oKB5oKd5oKD5oKV5oKb5oKX5oKH5oKc5oKO5oiZ5omG5ouy5oyQ5o2W5oys5o2E5o2F5oy25o2D5o+k5oy55o2L5o2K5oy85oyp5o2B5oy05o2Y5o2U5o2Z5oyt5o2H5oyz5o2a5o2R5oy45o2X5o2A5o2I5pWK5pWG5peG5peD5peE5peC5pmK5pmf5pmH5pmR5pyS5pyT5qCf5qCa5qGJ5qCy5qCz5qC75qGL5qGP5qCW5qCx5qCc5qC15qCr5qCt5qCv5qGO5qGE5qC05qCd5qCS5qCU5qCm5qCo5qCu5qGN5qC65qCl5qCg5qys5qyv5qyt5qyx5qy05q2t6IKC5q6I5q+m5q+k77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIwOV0ubGVuZ3RoOyArK2opIGlmKERbMjA5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIwOV1bal1dID0gNTM1MDQgKyBqOyBkWzUzNTA0ICsgal0gPSBEWzIwOV1bal07fVxuXHREWzIxMF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veavqOavo+avouavp+awpea1uua1o+a1pOa1tua0jea1oea2kua1mOa1oua1rea1r+a2kea2jea3r+a1v+a2hua1nua1p+a1oOa2l+a1sOa1vOa1n+a2gua2mOa0r+a1qOa2i+a1vua2gOa2hOa0lua2g+a1u+a1vea1tea2kOeDnOeDk+eDkeeDneeDi+e8ueeDoueDl+eDkueDnueDoOeDlOeDjeeDheeDhueDh+eDmueDjueDoeeJgueJuO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeJt+eJtueMgOeLuueLtOeLvueLtueLs+eLu+eMgeePk+ePmeePpeePlueOvOePp+ePo+ePqeePnOePkuePm+ePlOePneePmuePl+ePmOePqOeTnueTn+eTtOeTteeUoeeVm+eVn+eWsOeXgeeWu+eXhOeXgOeWv+eWtueWuueaiuebieecneecm+eckOeck+eckueco+eckeecleecmeecmuecouecp+ego+egrOegouegteegr+egqOegruegq+egoeegqeegs+egquegseellOelm+elj+elnOelk+elkuelkeenq+enrOenoOenruenreenquennOennuenneeqhueqieeqheeqi+eqjOeqiueqh+ermOeskO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTBdLmxlbmd0aDsgKytqKSBpZihEWzIxMF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTBdW2pdXSA9IDUzNzYwICsgajsgZFs1Mzc2MCArIGpdID0gRFsyMTBdW2pdO31cblx0RFsyMTFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nrITnrJPnrIXnrI/nrIjnrIrnrI7nrInnrJLnsoTnspHnsornsoznsojnso3nsoXntJ7ntJ3ntJHntI7ntJjntJbntJPntJ/ntJLntI/ntIznvZznvaHnvZ7nvaDnvZ3nvZvnvpbnvpLnv4Pnv4Lnv4DogJbogL7ogLnog7rog7Log7nog7XohIHog7vohIDoiIHoiK/oiKXojLPojK3ojYTojJnojZHojKXojZbojL/ojYHojKbojJzojKLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ojYLojY7ojJvojKrojIjojLzojY3ojJbojKTojKDojLfojK/ojKnojYfojYXojYzojZPojJ7ojKzojYvojKfojYjomZPomZLomqLomqjompbomo3ompHomp7omofompfomobomovompromoXomqXompnomqHomqfompXompjomo7omp3ompDompTooYPooYTooa3oobXoobboobLoooDoobHoob/ooa/oooPoob7oobToobzoqJLosYfosZfosbvosqTosqPotbbotbjotrXotrfotrbou5Hou5Pov77ov7XpgILov7/ov7vpgITov7zov7bpg5bpg6Dpg5npg5rpg6Ppg5/pg6Xpg5jpg5vpg5fpg5zpg6TphZDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjExXS5sZW5ndGg7ICsraikgaWYoRFsyMTFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjExXVtqXV0gPSA1NDAxNiArIGo7IGRbNTQwMTYgKyBqXSA9IERbMjExXVtqXTt9XG5cdERbMjEyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96YWO6YWP6YeV6Yei6Yea6Zmc6Zmf6Zq86aOj6auf6ayv5Lm/5YGw5YGq5YGh5YGe5YGg5YGT5YGL5YGd5YGy5YGI5YGN5YGB5YGb5YGK5YGi5YCV5YGF5YGf5YGp5YGr5YGj5YGk5YGG5YGA5YGu5YGz5YGX5YGR5YeQ5Ymr5Ymt5Yms5Ymu5YuW5YuT5Yyt5Y6c5ZW15ZW25ZS85ZWN5ZWQ5ZS05ZSq5ZWR5ZWi5ZS25ZS15ZSw5ZWS5ZWF77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95ZSM5ZSy5ZWl5ZWO5ZS55ZWI5ZSt5ZS75ZWA5ZWL5ZyK5ZyH5Z+75aCU5Z+i5Z+25Z+c5Z+05aCA5Z+t5Z+95aCI5Z+45aCL5Z+z5Z+P5aCH5Z+u5Z+j5Z+y5Z+l5Z+s5Z+h5aCO5Z+85aCQ5Z+n5aCB5aCM5Z+x5Z+p5Z+w5aCN5aCE5aWc5amg5amY5amV5amn5ame5ai45ai15amt5amQ5amf5aml5ams5amT5amk5amX5amD5amd5amS5amE5amb5amI5aqO5ai+5amN5ai55amM5amw5amp5amH5amR5amW5amC5amc5a2y5a2u5a+B5a+A5bGZ5bSe5bSL5bSd5bSa5bSg5bSM5bSo5bSN5bSm5bSl5bSP77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxMl0ubGVuZ3RoOyArK2opIGlmKERbMjEyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxMl1bal1dID0gNTQyNzIgKyBqOyBkWzU0MjcyICsgal0gPSBEWzIxMl1bal07fVxuXHREWzIxM10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veW0sOW0kuW0o+W0n+W0ruW4vuW4tOW6seW6tOW6ueW6suW6s+W8tuW8uOW+m+W+luW+n+aCiuaCkOaChuaCvuaCsOaCuuaDk+aDlOaDj+aDpOaDmeaDneaDiOaCseaDm+aCt+aDiuaCv+aDg+aDjeaDgOaMsuaNpeaOiuaOguaNveaOveaOnuaOreaOneaOl+aOq+aOjuaNr+aOh+aOkOaNruaOr+aNteaOnOaNreaOruaNvOaOpOaMu+aOn++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaNuOaOheaOgeaOkeaOjeaNsOaVk+aXjeaZpeaZoeaZm+aZmeaZnOaZouacmOahueaih+aikOainOahreahruairuaiq+alluahr+aio+airOaiqeahteahtOaisuaij+aht+aikuahvOahq+ahsuaiquaigOahseahvuaim+ailuaii+aioOaiieaipOahuOahu+aikeaijOaiiuahveastuass+ast+asuOaukeauj+aujeaujuaujOawqua3gOa2q+a2tOa2s+a5tOa2rOa3qea3oua2t+a3tua3lOa4gOa3iOa3oOa3n+a3lua2vua3pea3nOa3nea3m+a3tOa3iua2vea3rea3sOa2uua3lea3gua3j+a3ie+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTNdLmxlbmd0aDsgKytqKSBpZihEWzIxM11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTNdW2pdXSA9IDU0NTI4ICsgajsgZFs1NDUyOCArIGpdID0gRFsyMTNdW2pdO31cblx0RFsyMTRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mt5Dmt7Lmt5Pmt73mt5fmt43mt6Pmtrvng7rnhI3ng7fnhJfng7TnhIzng7DnhITng7PnhJDng7zng7/nhIbnhJPnhIDng7jng7bnhIvnhILnhI7nib7nibvnibznib/njJ3njJfnjIfnjJHnjJjnjIrnjIjni7/njI/njJ7njojnj7bnj7jnj7XnkITnkIHnj73nkIfnkIDnj7rnj7znj7/nkIznkIvnj7TnkIjnlaTnlaPnl47nl5Lnl4/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nl4vnl4znl5Hnl5Dnmo/nmonnm5PnnLnnnK/nnK3nnLHnnLLnnLTnnLPnnL3nnKXnnLvnnLXnoYjnoZLnoYnnoY3noYrnoYznoKbnoYXnoZDnpaTnpafnpannparnpaPnpavnpaHnprvnp7rnp7jnp7bnp7fnqo/nqpTnqpDnrLXnrYfnrLTnrKXnrLDnrKLnrKTnrLPnrJjnrKrnrJ3nrLHnrKvnrK3nrK/nrLLnrLjnrJrnrKPnspTnspjnspbnsqPntLXntL3ntLjntLbntLrntYXntKzntKnntYHntYfntL7ntL/ntYrntLvntKjnvaPnvpXnvpznvp3nvpvnv4rnv4vnv43nv5Dnv5Hnv4fnv4/nv4nogJ/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE0XS5sZW5ndGg7ICsraikgaWYoRFsyMTRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE0XVtqXV0gPSA1NDc4NCArIGo7IGRbNTQ3ODQgKyBqXSA9IERbMjE0XVtqXTt9XG5cdERbMjE1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ICe6ICb6IGH6IGD6IGI6ISY6ISl6ISZ6ISb6ISt6ISf6ISs6ISe6ISh6ISV6ISn6ISd6ISi6IiR6Ii46Iiz6Ii66Ii06Iiy6Im06I6Q6I6j6I6o6I6N6I266I2z6I6k6I206I6P6I6B6I6V6I6Z6I216I6U6I6p6I296I6D6I6M6I6d6I6b6I6q6I6L6I2+6I6l6I6v6I6I6I6X6I6w6I2/6I6m6I6H6I6u6I226I6a6JmZ6JmW6Jq/6Jq377+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96JuC6JuB6JuF6Jq66Jqw6JuI6Jq56Jqz6Jq46JuM6Jq06Jq76Jq86JuD6Jq96Jq+6KGS6KKJ6KKV6KKo6KKi6KKq6KKa6KKR6KKh6KKf6KKY6KKn6KKZ6KKb6KKX6KKk6KKs6KKM6KKT6KKO6KaC6KeW6KeZ6KeV6Kiw6Kin6Kis6Kie6LC56LC76LGc6LGd6LG96LKl6LW96LW76LW56La86LeC6La56La/6LeB6LuY6Lue6Lud6Luc6LuX6Lug6Luh6YCk6YCL6YCR6YCc6YCM6YCh6YOv6YOq6YOw6YO06YOy6YOz6YOU6YOr6YOs6YOp6YWW6YWY6YWa6YWT6YWV6Yes6Ye06Yex6Yez6Ye46Yek6Ye56Yeq77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxNV0ubGVuZ3RoOyArK2opIGlmKERbMjE1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxNV1bal1dID0gNTUwNDAgKyBqOyBkWzU1MDQwICsgal0gPSBEWzIxNV1bal07fVxuXHREWzIxNl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemHq+mHt+mHqOmHrumVuumWhumWiOmZvOmZremZq+mZsemZr+mav+mdqumghOmjpemml+WCm+WCleWClOWCnuWCi+WCo+WCg+WCjOWCjuWCneWBqOWCnOWCkuWCguWCh+WFn+WHlOWMkuWMkeWOpOWOp+WWkeWWqOWWpeWWreWVt+WZheWWouWWk+WWiOWWj+WWteWWgeWWo+WWkuWWpOWVveWWjOWWpuWVv+WWleWWoeWWjuWcjOWgqeWgt++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWgmeWgnuWgp+Wgo+WgqOWfteWhiOWgpeWgnOWgm+Wgs+Wgv+WgtuWgruWgueWguOWgreWgrOWgu+WloeWqr+WqlOWqn+WpuuWqouWqnuWpuOWqpuWpvOWqpeWqrOWqleWqruWot+WqhOWqiuWql+Wqg+Wqi+WqqeWpu+WpveWqjOWqnOWqj+Wqk+WqneWvquWvjeWvi+WvlOWvkeWviuWvjuWwjOWwsOW0t+W1g+W1q+W1geW1i+W0v+W0teW1keW1juW1leW0s+W0uuW1kuW0veW0seW1meW1guW0ueW1ieW0uOW0vOW0suW0tuW1gOW1heW5hOW5geW9mOW+puW+peW+q+aDieaCueaDjOaDouaDjuaDhOaElO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTZdLmxlbmd0aDsgKytqKSBpZihEWzIxNl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTZdW2pdXSA9IDU1Mjk2ICsgajsgZFs1NTI5NiArIGpdID0gRFsyMTZdW2pdO31cblx0RFsyMTddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mg7LmhIrmhJbmhIXmg7XmhJPmg7jmg7zmg77mg4HmhIPmhJjmhJ3mhJDmg7/mhITmhIvmiYrmjpTmjrHmjrDmj47mj6Xmj6jmj6/mj4Pmkp3mj7Pmj4rmj6Dmj7bmj5Xmj7Lmj7XmkaHmj5/mjr7mj53mj5zmj4Tmj5jmj5Pmj4Lmj4fmj4zmj4vmj4jmj7Dmj5fmj5nmlLLmlafmlarmlaTmlZzmlajmlaXmlozmlp3mlp7mlq7ml5Dml5Lvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mmbzmmazmmbvmmoDmmbHmmbnmmarmmbLmnIHmpIzmo5PmpITmo5zmpKrmo6zmo6rmo7HmpI/mo5bmo7fmo6vmo6Tmo7bmpJPmpJDmo7Pmo6HmpIfmo4zmpIjmpbDmorTmpJHmo6/mo4bmpJTmo7jmo5Dmo73mo7zmo6jmpIvmpIrmpJfmo47mo4jmo53mo57mo6bmo7Tmo5HmpIbmo5Tmo6nmpJXmpKXmo4fmrLnmrLvmrL/mrLzmrpTmrpfmrpnmrpXmrr3mr7Dmr7Lmr7PmsLDmt7zmuYbmuYfmuJ/muYnmuojmuLzmuL3muYXmuaLmuKvmuL/muYHmuZ3mubPmuJzmuLPmuYvmuYDmuZHmuLvmuIPmuK7muZ7vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjE3XS5sZW5ndGg7ICsraikgaWYoRFsyMTddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjE3XVtqXV0gPSA1NTU1MiArIGo7IGRbNTU1NTIgKyBqXSA9IERbMjE3XVtqXTt9XG5cdERbMjE4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95rmo5rmc5rmh5rix5rio5rmg5rmx5rmr5ri55rii5riw5rmT5rml5rin5rm45rmk5rm35rmV5rm55rmS5rmm5ri15ri25rma54Sg54Se54Sv54O754Su54Sx54Sj54Sl54Si54Sy54Sf54So54S654Sb54mL54ma54qI54qJ54qG54qF54qL54yS54yL54yw54yi54yx54yz54yn54yy54yt54ym54yj54y154yM55Cu55Cs55Cw55Cr55CW77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+955Ca55Ch55Ct55Cx55Ck55Cj55Cd55Cp55Cg55Cy55O755Sv55Wv55Ws55en55ea55eh55em55ed55ef55ek55eX55qV55qS55ua552G552H552E552N552F552K552O552L552M55+e55+s56Gg56Gk56Gl56Gc56Gt56Gx56Gq56Gu56Gw56Gp56Go56Ge56Gi56W056Wz56Wy56Ww56iC56iK56iD56iM56iE56qZ56um56uk562K56y7562E562I562M562O562A562Y562F57Ki57Ke57Ko57Kh57WY57Wv57Wj57WT57WW57Wn57Wq57WP57Wt57Wc57Wr57WS57WU57Wp57WR57Wf57WO57y+57y/572l77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIxOF0ubGVuZ3RoOyArK2opIGlmKERbMjE4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIxOF1bal1dID0gNTU4MDggKyBqOyBkWzU1ODA4ICsgal0gPSBEWzIxOF1bal07fVxuXHREWzIxOV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee9pue+oue+oOe+oee/l+iBkeiBj+iBkOiDvuiDlOiFg+iFiuiFkuiFj+iFh+iEveiFjeiEuuiHpuiHruiHt+iHuOiHueiIhOiIvOiIveiIv+iJteiMu+iPj+iPueiQo+iPgOiPqOiQkuiPp+iPpOiPvOiPtuiQkOiPhuiPiOiPq+iPo+iOv+iQgeiPneiPpeiPmOiPv+iPoeiPi+iPjuiPluiPteiPieiQieiQj+iPnuiQkeiQhuiPguiPs++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiPleiPuuiPh+iPkeiPquiQk+iPg+iPrOiPruiPhOiPu+iPl+iPouiQm+iPm+iPvuibmOibouibpuibk+ibo+ibmuibquibneibq+ibnOibrOibqeibl+ibqOibkeihiOihluihleiiuuijl+iiueiiuOijgOiivuiituiivOiit+iiveiisuikgeijieimleimmOiml+inneinmuinm+ipjuipjeioueipmeipgOipl+ipmOiphOipheipkuipiOipkeipiuipjOipj+ixn+iygeiygOiyuuiyvuiysOiyueiytei2hOi2gOi2iei3mOi3k+i3jei3h+i3lui3nOi3j+i3lei3mei3iOi3l+i3hei7r+i7t+i7uu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMTldLmxlbmd0aDsgKytqKSBpZihEWzIxOV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMTldW2pdXSA9IDU2MDY0ICsgajsgZFs1NjA2NCArIGpdID0gRFsyMTldW2pdO31cblx0RFsyMjBdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ou7nou6bou67ou6Xou7Xou6fou6jou7bou6vou7Hou6zou7Tou6npgK3pgLTpgK/phIbphKzphITpg7/pg7zphIjpg7npg7vphIHphIDphIfphIXphIPphaHphaTphZ/phaLphaDpiIHpiIrpiKXpiIPpiJrpiKbpiI/piIzpiIDpiJLph7/ph73piIbpiITpiKfpiILpiJzpiKTpiJnpiJfpiIXpiJbplbvplo3plozplpDpmofpmb7pmojvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pmonpmoPpmoDpm4Lpm4jpm4Ppm7Hpm7DpnazpnbDpna7poIfpoqnpo6vps6bpu7nkuoPkuoTkurblgr3lgr/lg4blgq7lg4Tlg4rlgrTlg4jlg4LlgrDlg4HlgrrlgrHlg4vlg4nlgrblgrjlh5flibrlibjlibvlibzll4Pll5vll4zll5Dll4vll4rll53ll4Dll5Tll4Tll6nllr/ll5Lllo3ll4/ll5Xll6Lll5bll4jll7Lll43ll5nll4LlnJTloZPloajloaTloY/loY3loYnloa/loZXloY7loZ3loZnloaXloZvloL3loaPlobHlo7zlq4flq4Tlq4vlqrrlqrjlqrHlqrXlqrDlqr/lq4jlqrvlq4bvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjIwXS5sZW5ndGg7ICsraikgaWYoRFsyMjBdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjIwXVtqXV0gPSA1NjMyMCArIGo7IGRbNTYzMjAgKyBqXSA9IERbMjIwXVtqXTt9XG5cdERbMjIxXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95aq35auA5auK5aq05aq25auN5aq55aqQ5a+W5a+Y5a+Z5bCf5bCz5bWx5bWj5bWK5bWl5bWy5bWs5bWe5bWo5bWn5bWi5bew5bmP5bmO5bmK5bmN5bmL5buF5buM5buG5buL5buH5b2A5b6v5b6t5oO35oWJ5oWK5oSr5oWF5oS25oSy5oSu5oWG5oSv5oWP5oSp5oWA5oig6YWo5oij5oil5oik5o+F5o+x5o+r5pCQ5pCS5pCJ5pCg5pCk77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95pCz5pGD5pCf5pCV5pCY5pC55pC35pCi5pCj5pCM5pCm5pCw5pCo5pGB5pC15pCv5pCK5pCa5pGA5pCl5pCn5pCL5o+n5pCb5pCu5pCh5pCO5pWv5paS5peT5pqG5pqM5pqV5pqQ5pqL5pqK5pqZ5pqU5pm45pyg5qWm5qWf5qS45qWO5qWi5qWx5qS/5qWF5qWq5qS55qWC5qWX5qWZ5qW65qWI5qWJ5qS15qWs5qSz5qS95qWl5qOw5qW45qS05qWp5qWA5qWv5qWE5qW25qWY5qWB5qW05qWM5qS75qWL5qS35qWc5qWP5qWR5qSy5qWS5qSv5qW75qS85q2G5q2F5q2D5q2C5q2I5q2B5q6b76iN5q+75q+877+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyMV0ubGVuZ3RoOyArK2opIGlmKERbMjIxXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyMV1bal1dID0gNTY1NzYgKyBqOyBkWzU2NTc2ICsgal0gPSBEWzIyMV1bal07fVxuXHREWzIyMl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veavueavt+avuOa6m+a7lua7iOa6j+a7gOa6n+a6k+a6lOa6oOa6sea6uea7hua7kua6vea7gea6nua7iea6t+a6sOa7jea6pua7j+a6sua6vua7g+a7nOa7mOa6mea6kua6jua6jea6pOa6oea6v+a6s+a7kOa7iua6l+a6rua6o+eFh+eFlOeFkueFo+eFoOeFgeeFneeFoueFsueFuOeFqueFoeeFgueFmOeFg+eFi+eFsOeFn+eFkOeFk++/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeFhOeFjeeFmueJj+eKjeeKjOeKkeeKkOeKjueMvOeNgueMu+eMuueNgOeNiueNieeRhOeRiueRi+eRkueRkeeRl+eRgOeRj+eRkOeRjueRgueRhueRjeeRlOeToeeTv+eTvueTveeUneeVueeVt+amg+eXr+eYj+eYg+eXt+eXvueXvOeXueeXuOeYkOeXu+eXtueXreeXteeXveeameeateebneedleedn+edoOedkuedluedmuedqeedp+edlOedmeedreefoOeih+eimueilOeij+eihOeileeiheeihueioeeig+ehueeimeeigOeiluehu+elvOemguelveelueeokeeomOeomeeokueol+eoleeooueok++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjJdLmxlbmd0aDsgKytqKSBpZihEWzIyMl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjJdW2pdXSA9IDU2ODMyICsgajsgZFs1NjgzMiArIGpdID0gRFsyMjJdW2pdO31cblx0RFsyMjNdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nqJvnqJDnqqPnqqLnqp7nq6vnrabnraTnra3nrbTnrannrbLnraXnrbPnrbHnrbDnraHnrbjnrbbnraPnsrLnsrTnsq/ntojntobntoDnto3ntb/ntoXntbrnto7ntbvntoPntbzntozntpTntoTntb3ntpLnva3nvavnvafnvajnvaznvqbnvqXnvqfnv5vnv5zogKHohaTohaDohbfohZzohanohZvohaLohbLmnKHohZ7ohbbohafoha/vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ohYTohaHoiJ3oiYnoiYToiYDoiYLoiYXok7HokL/okZbokbbokbnoko/oko3okaXokZHokYDokobokafokLDokY3okb3okZrokZnokbTokbPokZ3olIfokZ7okLfokLrokLTokbrokYPokbjokLLokYXokKnoj5nokYvokK/okYLokK3okZ/okbDokLnokY7okYzokZLoka/ok4Xoko7okLvokYfokLbokLPokajokb7okYTokKvokaDokZToka7okZDonIvonITom7fonIzom7rom5bom7XonY3om7jonI7onInonIHom7bonI3onIXoo5boo4voo43oo47oo57oo5voo5roo4zoo5DopoXoppvop5/op6Xop6Tvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjIzXS5sZW5ndGg7ICsraikgaWYoRFsyMjNdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjIzXVtqXV0gPSA1NzA4OCArIGo7IGRbNTcwODggKyBqXSA9IERbMjIzXVtqXTt9XG5cdERbMjI0XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Keh6Keg6Kei6Kec6Kem6Km26KqG6Km/6Kmh6Ki/6Km36KqC6KqE6Km16KqD6KqB6Km06Km66LC86LGL6LGK6LGl6LGk6LGm6LKG6LKE6LKF6LOM6LWo6LWp6LaR6LaM6LaO6LaP6LaN6LaT6LaU6LaQ6LaS6Lew6Leg6Les6Lex6Leu6LeQ6Lep6Lej6Lei6Len6Ley6Ler6Le06LyG6Lu/6LyB6LyA6LyF6LyH6LyI6LyC6LyL6YGS6YC/77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96YGE6YGJ6YC96YSQ6YSN6YSP6YSR6YSW6YSU6YSL6YSO6YWu6YWv6YmI6YmS6Yiw6Yi66Ymm6Yiz6Yml6Yme6YqD6Yiu6YmK6YmG6Ymt6Yms6YmP6Ymg6Ymn6Ymv6Yi26Ymh6Ymw6Yix6YmU6Ymj6YmQ6Ymy6YmO6YmT6YmM6YmW6Yiy6Zaf6Zac6Zae6Zab6ZqS6ZqT6ZqR6ZqX6ZuO6Zu66Zu96Zu46Zu16Z2z6Z236Z246Z2y6aCP6aCN6aCO6aKs6aO26aO56aav6aay6aaw6aa16aqt6aqr6a2b6bOq6bOt6bOn6bqA6bu95YOm5YOU5YOX5YOo5YOz5YOb5YOq5YOd5YOk5YOT5YOs5YOw5YOv5YOj5YOg77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyNF0ubGVuZ3RoOyArK2opIGlmKERbMjI0XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyNF1bal1dID0gNTczNDQgKyBqOyBkWzU3MzQ0ICsgal0gPSBEWzIyNF1bal07fVxuXHREWzIyNV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWHmOWKgOWKgeWLqeWLq+WMsOWOrOWYp+WYleWYjOWYkuWXvOWYj+WYnOWYgeWYk+WYguWXuuWYneWYhOWXv+WXueWiieWhvOWikOWimOWihuWigeWhv+WhtOWii+WhuuWih+WikeWijuWhtuWiguWiiOWhu+WilOWij+WjvuWlq+WrnOWrruWrpeWrleWrquWrmuWrreWrq+Wrs+WrouWroOWrm+WrrOWrnuWrneWrmeWrqOWrn+Wtt+WvoO+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veWvo+Wxo+W2guW2gOW1veW2huW1uuW2geW1t+W2iuW2ieW2iOW1vuW1vOW2jeW1ueW1v+W5mOW5meW5k+W7mOW7keW7l+W7juW7nOW7leW7meW7kuW7lOW9hOW9g+W9r+W+tuaErOaEqOaFgeaFnuaFseaFs+aFkuaFk+aFsuaFrOaGgOaFtOaFlOaFuuaFm+aFpeaEu+aFquaFoeaFluaIqeaIp+aIq+aQq+aRjeaRm+aRneaRtOaRtuaRsuaRs+aRveaRteaRpuaSpuaRjuaSguaRnuaRnOaRi+aRk+aRoOaRkOaRv+aQv+aRrOaRq+aRmeaRpeaRt+aVs+aWoOaaoeaaoOaan+acheachOacouamseamtuanie+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjVdLmxlbmd0aDsgKytqKSBpZihEWzIyNV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjVdW2pdXSA9IDU3NjAwICsgajsgZFs1NzYwMCArIGpdID0gRFsyMjVdW2pdO31cblx0RFsyMjZdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mpqDmp47mppbmprDmpqzmprzmppHmppnmpo7mpqfmpo3mpqnmpr7mpq/mpr/mp4Tmpr3mpqTmp5Tmprnmp4rmpprmp4/mprPmppPmpqrmpqHmpp7mp5nmppfmppDmp4LmprXmpqXmp4bmrYrmrY3mrYvmrp7mrp/mrqDmr4Pmr4Tmr77mu47mu7Xmu7HmvIPmvKXmu7jmvLfmu7vmvK7mvInmvY7mvJnmvJrmvKfmvJjmvLvmvJLmu63mvIrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mvLbmvbPmu7nmu67mvK3mvYDmvLDmvLzmvLXmu6vmvIfmvI7mvYPmvIXmu73mu7bmvLnmvJzmu7zmvLrmvJ/mvI3mvJ7mvIjmvKHnhofnhpDnhonnhoDnhoXnhoLnho/nhbvnhobnhoHnhpfniYTniZPnipfnipXnipPnjYPnjY3njZHnjYznkaLnkbPnkbHnkbXnkbLnkafnka7nlIDnlILnlIPnlb3nlpDnmJbnmIjnmIznmJXnmJHnmIrnmJTnmrjnnoHnnbznnoXnnoLnna7nnoDnna/nnb7nnoPnorLnoqrnorTnoq3noqjnob7noqvnop7noqXnoqDnoqznoqLnoqTnppjnpornpovnppbnppXnppTnppPvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI2XS5sZW5ndGg7ICsraikgaWYoRFsyMjZdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI2XVtqXV0gPSA1Nzg1NiArIGo7IGRbNTc4NTYgKyBqXSA9IERbMjI2XVtqXTt9XG5cdERbMjI3XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+956aX56aI56aS56aQ56ir56mK56iw56iv56io56im56qo56qr56qs56uu566I566c566K566R566Q566W566N566M566b566O566F566Y5YqE566Z566k566C57K757K/57K857K657an57a357eC57aj57aq57eB57eA57eF57ad57eO57eE57eG57eL57eM57av57a557aW57a857af57am57au57ap57ah57eJ572z57+i57+j57+l57+e77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96ICk6IGd6IGc6IaJ6IaG6IaD6IaH6IaN6IaM6IaL6IiV6JKX6JKk6JKh6JKf6JK66JOO6JOC6JKs6JKu6JKr6JK56JK06JOB6JON6JKq6JKa6JKx6JOQ6JKd6JKn6JK76JKi6JKU6JOH6JOM6JKb6JKp6JKv6JKo6JOW6JKY6JK26JOP6JKg6JOX6JOU6JOS6JOb6JKw6JKR6Jmh6Jyz6Jyj6Jyo6J2r6J2A6Jyu6Jye6Jyh6JyZ6Jyb6J2D6Jys6J2B6Jy+6J2G6Jyg6Jyy6Jyq6Jyt6Jy86JyS6Jy66Jyx6Jy16J2C6Jym6Jyn6Jy46Jyk6Jya6Jyw6JyR6KO36KOn6KOx6KOy6KO66KO+6KOu6KO86KO26KO777+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIyN10ubGVuZ3RoOyArK2opIGlmKERbMjI3XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIyN11bal1dID0gNTgxMTIgKyBqOyBkWzU4MTEyICsgal0gPSBEWzIyN11bal07fVxuXHREWzIyOF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veijsOijrOijq+imneimoeimn+imnuinqeinq+inqOiqq+iqmeiqi+iqkuiqj+iqluiwveixqOixqeizleizj+izl+i2lui4iei4gui3v+i4jei3vei4iui4g+i4h+i4hui4hei3vui4gOi4hOi8kOi8kei8jui8jemEo+mEnOmEoOmEoumEn+mEnemEmumEpOmEoemEm+mFuumFsumFuemFs+mKpemKpOmJtumKm+mJuumKoOmKlOmKqumKje+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemKpumKmumKq+mJuemKl+mJv+mKo+mLrumKjumKgumKlemKoumJvemKiOmKoemKiumKhumKjOmKmemKp+mJvumKh+mKqemKnemKi+mIremanumaoembv+mdmOmdvemduumdvumeg+megOmegumdu+mehOmegemdv+mfjumfjemglumiremirumkgumkgOmkh+mmnemmnOmng+mmuemmu+mmuumngummvemnh+mqsemro+mrp+msvumsv+mtoOmtoemtn+mzsemzsumztem6p+WDv+WEg+WEsOWDuOWEhuWEh+WDtuWDvuWEi+WEjOWDveWEiuWKi+WKjOWLseWLr+WZiOWZguWZjOWYteWZgeWZiuWZieWZhuWZmO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMjhdLmxlbmd0aDsgKytqKSBpZihEWzIyOF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMjhdW2pdXSA9IDU4MzY4ICsgajsgZFs1ODM2OCArIGpdID0gRFsyMjhdW2pdO31cblx0RFsyMjldID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lmZrlmYDlmLPlmL3lmKzlmL7lmLjlmKrlmLrlnJrloqvlop3lorHloqDloqPloq/loqzloqXloqHlo7/lq7/lq7Tlq73lq7flq7blrIPlq7jlrILlq7nlrIHlrIflrIXlrI/lsafltpnltpfltp/ltpLltqLltpPltpXltqDltpzltqHltprltp7luanluZ3luaDluZznt7Plu5vlu57lu6HlvYnlvrLmhovmhoPmhbnmhrHmhrDmhqLmhonvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73mhpvmhpPmhq/mhq3mhp/mhpLmhqrmhqHmho3mhabmhrPmiK3mka7mkbDmkpbmkqDmkoXmkpfmkpzmko/mkovmkormkozmkqPmkp/mkajmkrHmkpjmlbbmlbrmlbnmlbvmlrLmlrPmmrXmmrDmmqnmmrLmmrfmmqrmmq/mqIDmqIbmqJfmp6Xmp7jmqJXmp7Hmp6TmqKDmp7/mp6zmp6LmqJvmqJ3mp77mqKfmp7Lmp67mqJTmp7fmp6fmqYDmqIjmp6bmp7vmqI3mp7zmp6vmqInmqITmqJjmqKXmqI/mp7bmqKbmqIfmp7TmqJbmrZHmrqXmrqPmrqLmrqbmsIHmsIDmr7/msILmvYHmvKbmvb7mvofmv4bmvpLvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjI5XS5sZW5ndGg7ICsraikgaWYoRFsyMjldW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjI5XVtqXV0gPSA1ODYyNCArIGo7IGRbNTg2MjQgKyBqXSA9IERbMjI5XVtqXTt9XG5cdERbMjMwXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95r6N5r6J5r6M5r2i5r2P5r6F5r2a5r6W5r225r2s5r6C5r2V5r2y5r2S5r2Q5r2X5r6U5r6T5r2d5ryA5r2h5r2r5r295r2n5r6Q5r2T5r6L5r2p5r2/5r6V5r2j5r235r2q5r2754ay54av54ab54aw54ag54aa54ap54a154ad54al54ae54ak54ah54aq54ac54an54az54qY54qa542Y542S542e542f542g542d542b542h542a542Z77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+9542i55KH55KJ55KK55KG55KB55G955KF55KI55G855G555SI55SH55W+55il55ie55iZ55id55ic55ij55ia55io55ib55qc55qd55qe55qb556N556P556J556I56ON56K756OP56OM56OR56OO56OU56OI56OD56OE56OJ56aa56ah56ag56ac56ai56ab5q2256i556qy56q056qz566356+L566+566s56+O566v566556+K566157OF57OI57OM57OL57e357eb57eq57en57eX57eh57iD57e657em57e257ex57ew57eu57ef5722576s576w576t57+t57+r57+q57+s57+m57+o6IGk6IGn6Iaj6Iaf77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzMF0ubGVuZ3RoOyArK2opIGlmKERbMjMwXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzMF1bal1dID0gNTg4ODAgKyBqOyBkWzU4ODgwICsgal0gPSBEWzIzMF1bal07fVxuXHREWzIzMV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiGnuiGleiGouiGmeiGl+iIluiJj+iJk+iJkuiJkOiJjuiJkeiUpOiUu+iUj+iUgOiUqeiUjuiUieiUjeiUn+iUiuiUp+iUnOiTu+iUq+iTuuiUiOiUjOiTtOiUquiTsuiUleiTt+iTq+iTs+iTvOiUkuiTquiTqeiUluiTvuiUqOiUneiUruiUguiTveiUnuiTtuiUseiUpuiTp+iTqOiTsOiTr+iTueiUmOiUoOiUsOiUi+iUmeiUr+iZou+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veidluido+idpOidt+ifoeids+idmOidlOidm+idkuidoeidmuidkeidnuidreidquidkOidjuidn+idneidr+idrOiduuidruidnOidpeidj+idu+idteidouidp+idqeihmuikheikjOiklOiki+ikl+ikmOikmeikhuikluikkeikjuikieimouimpOimo+inreinsOinrOirj+irhuiquOirk+irkeirlOirleiqu+irl+iqvuirgOirheirmOirg+iquuiqveirmeiwvuixjeiyj+izpeizn+izmeizqOizmuizneizp+i2oOi2nOi2oei2m+i4oOi4o+i4pei4pOi4rui4lei4m+i4lui4kei4mei4pui4p++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzFdLmxlbmd0aDsgKytqKSBpZihEWzIzMV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzFdW2pdXSA9IDU5MTM2ICsgajsgZFs1OTEzNiArIGpdID0gRFsyMzFdW2pdO31cblx0RFsyMzJdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ouJTouJLouJjouJPouJzouJfouJrovKzovKTovJjovJrovKDovKPovJbovJfpgbPpgbDpga/pgafpgavphK/phKvphKnphKrphLLphKbphK7phoXphobphorphoHphoLphoTphoDpi5Dpi4Ppi4Tpi4Dpi5npirbpi4/pi7Hpi5/pi5jpi6npi5fpi53pi4zpi6/pi4Lpi6jpi4rpi4jpi47pi6bpi43pi5Xpi4npi6Dpi57pi6fpi5Hpi5Pvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pirXpi6Hpi4bpirTplbzplqzplqvplq7plrDpmqTpmqLpm5PpnIXpnIjpnILpnZrpnorpno7pnojpn5Dpn4/poJ7poJ3poKbpoKnpoKjpoKDpoJvpoKfporLppIjpo7rppJHppJTppJbppJfppJXpp5zpp43pp4/pp5Ppp5Tpp47pp4npp5bpp5jpp4vpp5fpp4zpqrPpq6zpq6vpq7Ppq7Lpq7HprYbprYPprafprbTprbHprabprbbprbXprbDprajpraTprazps7zps7rps73ps7/ps7fptIfptIDps7nps7vptIjptIXptITpuoPpu5PpvI/pvJDlhJzlhJPlhJflhJrlhJHlh57ljLTlj6HlmbDlmaDlma7vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjMyXS5sZW5ndGg7ICsraikgaWYoRFsyMzJdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjMyXVtqXV0gPSA1OTM5MiArIGo7IGRbNTkzOTIgKyBqXSA9IERbMjMyXVtqXTt9XG5cdERbMjMzXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95Zmz5Zmm5Zmj5Zmt5Zmy5Zme5Zm35Zyc5Zyb5aOI5aK95aOJ5aK/5aK65aOC5aK85aOG5ayX5ayZ5ayb5ayh5ayU5ayT5ayQ5ayW5ayo5aya5ayg5aye5a+v5bas5bax5bap5ban5ba15baw5bau5baq5bao5bay5bat5bav5ba05bmn5bmo5bmm5bmv5bup5bun5bum5buo5bul5b2L5b685oad5oao5oaW5oeF5oa05oeG5oeB5oeM5oa677+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95oa/5oa45oaM5pOX5pOW5pOQ5pOP5pOJ5pK95pKJ5pOD5pOb5pOz5pOZ5pSz5pW/5pW85pai5puI5pq+5puA5puK5puL5puP5pq95pq75pq65puM5pyj5qi05qmm5qmJ5qmn5qiy5qmo5qi+5qmd5qmt5qm25qmb5qmR5qio5qma5qi75qi/5qmB5qmq5qmk5qmQ5qmP5qmU5qmv5qmp5qmg5qi85qme5qmW5qmV5qmN5qmO5qmG5q2V5q2U5q2W5q6n5q6q5q6r5q+I5q+H5rCE5rCD5rCG5r6t5r+L5r6j5r+H5r685r+O5r+I5r2e5r+E5r695r6e5r+K5r6o54CE5r6l5r6u5r665r6s5r6q5r+P5r6/5r6477+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzM10ubGVuZ3RoOyArK2opIGlmKERbMjMzXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzM11bal1dID0gNTk2NDggKyBqOyBkWzU5NjQ4ICsgal0gPSBEWzIzM11bal07fVxuXHREWzIzNF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vea+oua/iea+q+a/jea+r+a+sua+sOeHheeHgueGv+eGuOeHlueHgOeHgeeHi+eHlOeHiueHh+eHj+eGveeHmOeGvOeHhueHmueHm+eKneeKnueNqeeNpueNp+eNrOeNpeeNq+eNqueRv+eSmueSoOeSlOeSkueSleeSoeeUi+eWgOeYr+eYreeYseeYveeYs+eYvOeYteeYsueYsOeau+ebpueemueeneeeoeeenOeem+eeoueeo+eeleeeme+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeel+ejneejqeejpeejquejnuejo+ejm+ejoeejouejreejn+ejoOempOephOepiOeph+eqtuequOeqteeqseeqt+evnuevo+evp+evneevleevpeevmuevqOevueevlOevquevouevnOevq+evmOevn+ezkuezlOezl+ezkOezkee4kue4oee4l+e4jOe4n+e4oOe4k+e4jue4nOe4lee4mue4oue4i+e4j+e4lue4jee4lOe4pee4pOe9g+e9u+e9vOe9uue+see/r+iAquiAqeiBrOiGseiGpuiGruiGueiGteiGq+iGsOiGrOiGtOiGsuiGt+iGp+iHsuiJleiJluiJl+iVluiVheiVq+iVjeiVk+iVoeiVmO+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzRdLmxlbmd0aDsgKytqKSBpZihEWzIzNF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzRdW2pdXSA9IDU5OTA0ICsgajsgZFs1OTkwNCArIGpdID0gRFsyMzRdW2pdO31cblx0RFsyMzVdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73olYDolYbolaTolYHolaLolYTolZHolYfolaPolL7olZvolbHolY7ola7olbXolZXolafolaDolozolabolZ3olZTolaXolazomaPomaXomaTonpvono/onpfonpPonpLonojonoHonpbonpjonbnonofonqPonoXonpDonpHonp3onoTonpTonpzonprononopJ7opKbopLDopK3opK7opKfopLHopKLopKnopKPopK/opKzopJ/op7Hoq6Dvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73oq6Loq7Loq7Toq7Xoq53orJToq6Toq5/oq7Doq4joq57oq6Hoq6joq7/oq6/oq7vospHospLospDos7Xos67os7Hos7Dos7Potazota7otqXotqfouLPouL7ouLjouYDouYXouLbouLzouL3ouYHouLDouL/our3ovLbovK7ovLXovLLovLnovLfovLTpgbbpgbnpgbvpgobpg7rphLPphLXphLbphpPphpDphpHpho3pho/pjKfpjJ7pjIjpjJ/pjIbpjI/pjbrpjLjpjLzpjJvpjKPpjJLpjIHpjYbpjK3pjI7pjI3pi4vpjJ3pi7rpjKXpjJPpi7npi7fpjLTpjILpjKTpi7/pjKnpjLnpjLXpjKrpjJTpjIzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM1XS5sZW5ndGg7ICsraikgaWYoRFsyMzVdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM1XVtqXV0gPSA2MDE2MCArIGo7IGRbNjAxNjAgKyBqXSA9IERbMjM1XVtqXTt9XG5cdERbMjM2XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96YyL6Yu+6YyJ6YyA6Yu76YyW6Za86ZeN6Za+6Za56Za66Za26Za/6Za16Za96Zqp6ZuU6ZyL6ZyS6ZyQ6Z6Z6Z6X6Z6U6Z+w6Z+46aC16aCv6aCy6aSk6aSf6aSn6aSp6aae6aeu6aes6ael6aek6aew6aej6aeq6aep6aen6aq56aq/6aq06aq76au26au66au56au36ayz6a6A6a6F6a6H6a286a2+6a276a6C6a6T6a6S6a6Q6a266a6V77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96a296a6I6bSl6bSX6bSg6bSe6bSU6bSp6bSd6bSY6bSi6bSQ6bSZ6bSf6bqI6bqG6bqH6bqu6bqt6buV6buW6bu66byS6by95YSm5YSl5YSi5YSk5YSg5YSp5Yu05ZqT5ZqM5ZqN5ZqG5ZqE5ZqD5Zm+5ZqC5Zm/5ZqB5aOW5aOU5aOP5aOS5ayt5ayl5ayy5ayj5ays5ayn5aym5ayv5ayu5a275a+x5a+y5ba35bms5bmq5b6+5b675oeD5oa15oa85oen5oeg5oel5oek5oeo5oee5pOv5pOp5pOj5pOr5pOk5pOo5paB5paA5pa25pea5puS5qqN5qqW5qqB5qql5qqJ5qqf5qqb5qqh5qqe5qqH5qqT5qqO77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzNl0ubGVuZ3RoOyArK2opIGlmKERbMjM2XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzNl1bal1dID0gNjA0MTYgKyBqOyBkWzYwNDE2ICsgal0gPSBEWzIzNl1bal07fVxuXHREWzIzN10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veaqleaqg+aqqOaqpOaqkeapv+aqpuaqmuaqheaqjOaqkuatm+aureawiea/jOa+qea/tOa/lOa/o+a/nOa/rea/p+a/pua/nua/sua/nea/oua/qOeHoeeHseeHqOeHsueHpOeHsOeHoueNs+eNrueNr+eSl+eSsueSq+eSkOeSqueSreeSseeSpeeSr+eUkOeUkeeUkueUj+eWhOeZg+eZiOeZieeZh+eapOebqeeeteeeq+eesueet+eetu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeetOeeseeeqOefsOejs+ejveekgueju+ejvOejsuekheejueejvuekhOemq+emqOepnOepm+epluepmOeplOepmueqvuergOergeewheewj+evsuewgOevv+evu+ewjuevtOewi+evs+ewguewieewg+ewgeevuOevveewhuevsOevseewkOewiuezqOe4ree4vOe5gue4s+mhiOe4uOe4que5iee5gOe5h+e4qee5jOe4sOe4u+e4tue5hOe4uue9hee9v+e9vue9vee/tOe/suiArOiGu+iHhOiHjOiHiuiHheiHh+iGvOiHqeiJm+iJmuiJnOiWg+iWgOiWj+iWp+iWleiWoOiWi+iWo+iVu+iWpOiWmuiWnu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyMzddLmxlbmd0aDsgKytqKSBpZihEWzIzN11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyMzddW2pdXSA9IDYwNjcyICsgajsgZFs2MDY3MiArIGpdID0gRFsyMzddW2pdO31cblx0RFsyMzhdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73olbfolbzolonolqHolbrolbjolZfolo7olpbolobolo3olpnolp3oloHolqLoloLolojoloXolbnolbbolpjolpDolp/omajonr7onqronq3on4XonrDonqzonrnonrXonrzonq7on4non4Pon4Lon4zonrfonq/on4Ton4ronrTonrbonr/onrjonr3on57onrLopLXopLPopLzopL7opYHopZLopLfopYLopq3opq/opq7op7Lop7PorJ7vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73orJjorJborJHorIXorIvorKLorI/orJLorJXorIforI3orIjorIborJzorJPorJrosY/osbDosbLosbHosa/ospXospTos7nota/ouY7ouY3ouZPouZDouYzouYfovYPovYDpgoXpgb7phLjphprphqLphpvphpnphp/phqHphp3phqDpjqHpjoPpjq/pjaTpjZbpjYfpjbzpjZjpjZzpjbbpjYnpjZDpjZHpjaDpja3pjo/pjYzpjarpjbnpjZfpjZXpjZLpjY/pjbHpjbfpjbvpjaHpjZ7pjaPpjafpjoDpjY7pjZnpl4fpl4Dpl4npl4Ppl4Xplrfpmq7pmrDpmqzpnKDpnJ/pnJjpnJ3pnJnpnprpnqHpnpzvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjM4XS5sZW5ndGg7ICsraikgaWYoRFsyMzhdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjM4XVtqXV0gPSA2MDkyOCArIGo7IGRbNjA5MjggKyBqXSA9IERbMjM4XVtqXTt9XG5cdERbMjM5XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Z6e6Z6d6Z+V6Z+U6Z+x6aGB6aGE6aGK6aGJ6aGF6aGD6aSl6aSr6aSs6aSq6aSz6aSy6aSv6aSt6aSx6aSw6aaY6aaj6aah6aiC6ae66ae06ae36ae56ae46ae26ae76ae96ae+6ae86aiD6aq+6au+6au96ayB6au86a2I6a6a6a6o6a6e6a6b6a6m6a6h6a6l6a6k6a6G6a6i6a6g6a6v6bSz6bWB6bWn6bS26bSu6bSv6bSx6bS46bSw77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96bWF6bWC6bWD6bS+6bS36bWA6bS957+16bSt6bqK6bqJ6bqN6bqw6buI6bua6bu76bu/6byk6byj6byi6b2U6b6g5YSx5YSt5YSu5ZqY5Zqc5ZqX5Zqa5Zqd5ZqZ5aWw5ay85bGp5bGq5beA5bmt5bmu5oeY5oef5oet5oeu5oex5oeq5oew5oer5oeW5oep5pO/5pSE5pO95pO45pSB5pSD5pO85paU5peb5pua5pub5puY5quF5qq55qq95quh5quG5qq65qq25qq35quH5qq05qqt5q2e5q+J5rCL54CH54CM54CN54CB54CF54CU54CO5r+/54CA5r+754Cm5r+85r+354CK54iB54e/54e554iD54e9542277+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzIzOV0ubGVuZ3RoOyArK2opIGlmKERbMjM5XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzIzOV1bal1dID0gNjExODQgKyBqOyBkWzYxMTg0ICsgal0gPSBEWzIzOV1bal07fVxuXHREWzI0MF0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veeSuOeTgOeSteeTgeeSvueStueSu+eTgueUlOeUk+eZnOeZpOeZmeeZkOeZk+eZl+eZmueapueaveebrOefgueeuuejv+ekjOekk+eklOekieekkOekkuekkeemreemrOepn+ewnOewqeewmeewoOewn+ewreewneewpuewqOewouewpeewsOe5nOe5kOe5lue5o+e5mOe5oue5n+e5kee5oOe5l+e5k+e+tee+s+e/t+e/uOiBteiHkeiHku+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veiHkOiJn+iJnuiWtOiXhuiXgOiXg+iXguiWs+iWteiWveiXh+iXhOiWv+iXi+iXjuiXiOiXheiWseiWtuiXkuiYpOiWuOiWt+iWvuiZqeifp+ifpuifouifm+ifq+ifquifpeifn+ifs+ifpOiflOifnOifk+ifreifmOifo+iepOifl+ifmeiggeiftOifqOifneilk+ili+ilj+iljOilhuilkOilkeilieisquisp+iso+iss+issOisteith+isr+isvOisvuisseispeist+ispuistuisruispOisu+isveisuuixguixteiymeiymOiyl+izvui0hOi0gui0gOi5nOi5oui5oOi5l+i5lui5nui5pei5p++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDBdLmxlbmd0aDsgKytqKSBpZihEWzI0MF1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDBdW2pdXSA9IDYxNDQwICsgajsgZFs2MTQ0MCArIGpdID0gRFsyNDBdW2pdO31cblx0RFsyNDFdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ouZvouZrouaHouZ3ouanouZTovYbovYfovYjovYvphKjphLrphLvphL7phqjphqXphqfphq/phqrpjrXpjozpjpLpjrfpjpvpjp3pjonpjqfpjo7pjqrpjp7pjqbpjpXpjojpjpnpjp/pjo3pjrHpjpHpjrLpjqTpjqjpjrTpjqPpjqXpl5Lpl5Ppl5HpmrPpm5fpm5rlt4Lpm5/pm5jpm53pnKPpnKLpnKXpnqzpnq7pnqjpnqvpnqTpnqrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pnqLpnqXpn5fpn5npn5bpn5jpn7rpoZDpoZHpoZLporjppYHppLzppLrpqI/pqIvpqInpqI3pqITpqJHpqIrpqIXpqIfpqIbpq4Dpq5zprIjprITprIXprKnprLXprYrprYzprYvpr4fpr4bpr4Pprr/pr4HprrXprrjpr5Pprrbpr4Tprrnprr3ptZzptZPptY/ptYrptZvptYvptZnptZbptYzptZfptZLptZTptZ/ptZjptZrpuo7puozpu5/pvIHpvIDpvJbpvKXpvKvpvKrpvKnpvKjpvYzpvZXlhLTlhLXlipbli7fljrTlmqvlmq3lmqblmqflmqrlmqzlo5rlo53lo5vlpJLlrL3lrL7lrL/lt4PlubDvv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQxXS5sZW5ndGg7ICsraikgaWYoRFsyNDFdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQxXVtqXV0gPSA2MTY5NiArIGo7IGRbNjE2OTYgKyBqXSA9IERbMjQxXVtqXTt9XG5cdERbMjQyXSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+95b6/5oe75pSH5pSQ5pSN5pSJ5pSM5pSO5paE5pee5ped5pue5qun5qug5quM5quR5quZ5quL5quf5quc5quQ5qur5quP5quN5que5q2g5q6w5rCM54CZ54Cn54Cg54CW54Cr54Ch54Ci54Cj54Cp54CX54Ck54Cc54Cq54iM54iK54iH54iC54iF54ql54qm54qk54qj54qh55OL55OF55K355OD55SW55mg55+J55+K55+E55+x56Sd56Sb77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+956Sh56Sc56SX56Se56aw56mn56mo57Cz57C857C557Cs57C757Os57Oq57m257m157m457mw57m357mv57m657my57m057mo572L572K576D576G576357+957++6IG46IeX6IeV6Imk6Imh6Imj6Jer6Jex6Jet6JeZ6Jeh6Jeo6Jea6JeX6Jes6Jey6Je46JeY6Jef6Jej6Jec6JeR6Jew6Jem6Jev6Jee6Jei6KCA6J+66KCD6J+26J+36KCJ6KCM6KCL6KCG6J+86KCI6J+/6KCK6KCC6KWi6KWa6KWb6KWX6KWh6KWc6KWY6KWd6KWZ6KaI6Ka36Ka26Ke26K2Q6K2I6K2K6K2A6K2T6K2W6K2U6K2L6K2V77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0Ml0ubGVuZ3RoOyArK2opIGlmKERbMjQyXVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0Ml1bal1dID0gNjE5NTIgKyBqOyBkWzYxOTUyICsgal0gPSBEWzI0Ml1bal07fVxuXHREWzI0M10gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veitkeitguitkuitl+ixg+ixt+ixtuiymui0hui0h+i0iei2rOi2qui2rei2q+i5rei5uOi5s+i5qui5r+i5u+i7gui9kui9kei9j+i9kOi9k+i+tOmFgOmEv+mGsOmGremPnumPh+mPj+mPgumPmumPkOmPuemPrOmPjOmPmemOqemPpumPiumPlOmPrumPo+mPlemPhOmPjumPgOmPkumPp+mVvemXmumXm+mboemcqemcq+mcrOmcqOmcpu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemes+met+metumfnemfnumfn+mhnOmhmemhnemhl+miv+mivemiu+mivumliOmlh+mlg+mmpummp+momumolemopemonemopOmom+mooumooOmop+moo+monumonOmolOmrgumsi+msiumsjumsjOmst+mvqumvq+mvoOmvnumvpOmvpumvoumvsOmvlOmvl+mvrOmvnOmvmemvpemvlemvoemvmum1t+m2gem2ium2hOm2iOm1sem2gOm1uOm2hum2i+m2jOm1vem1q+m1tOm1tem1sOm1qem2hem1s+m1u+m2gum1r+m1uem1v+m2h+m1qOm6lOm6kem7gOm7vOm8rem9gOm9gem9jem9lum9l+m9mOWMt+Wasu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDNdLmxlbmd0aDsgKytqKSBpZihEWzI0M11bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDNdW2pdXSA9IDYyMjA4ICsgajsgZFs2MjIwOCArIGpdID0gRFsyNDNdW2pdO31cblx0RFsyNDRdID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73lmrXlmrPlo6PlrYXlt4blt4flu67lu6/lv4Dlv4Hmh7nmlJfmlJbmlJXmlJPml5/mm6jmm6Pmm6Tmq7Pmq7Dmq6rmq6jmq7nmq7Hmq67mq6/ngLzngLXngK/ngLfngLTngLHngYLngLjngL/ngLrngLnngYDngLvngLPngYHniJPniJTniqjnjb3njbznkrrnmqvnmqrnmr7nm63nn4znn47nn4/nn43nn7LnpKXnpKPnpKfnpKjnpKTnpKnvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73nprLnqa7nqaznqa3nq7fnsYnnsYjnsYrnsYfnsYXns67nubvnub7nuoHnuoDnvrrnv7/ogbnoh5voh5noiIvoiajoianomKLol7/omIHol77omJvomIDol7bomITomInomIXomIzol73ooJnooJDooJHooJfooJPooJbopaPopaboprnop7foraDorarorZ3orajoraPoraXorafora3otq7ouobouojouoTovZnovZbovZfovZXovZjovZrpgo3phYPphYHphrfphrXphrLphrPpkIvpkJPpj7vpkKDpkI/pkJTpj77pkJXpkJDpkKjpkJnpkI3pj7XpkIDpj7fpkIfpkI7pkJbpkJLpj7rpkInpj7jpkIrpj7/vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ0XS5sZW5ndGg7ICsraikgaWYoRFsyNDRdW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ0XVtqXV0gPSA2MjQ2NCArIGo7IGRbNjI0NjQgKyBqXSA9IERbMjQ0XVtqXTt9XG5cdERbMjQ1XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96Y+86ZCM6Y+26ZCR6ZCG6Zee6Zeg6Zef6Zyu6Zyv6Z656Z676Z+96Z++6aGg6aGi6aGj6aGf6aOB6aOC6aWQ6aWO6aWZ6aWM6aWL6aWT6aiy6ai06aix6ais6aiq6ai26aip6aiu6ai46ait6auH6auK6auG6ayQ6ayS6ayR6bCL6bCI6a+36bCF6bCS6a+46bGA6bCH6bCO6bCG6bCX6bCU6bCJ6baf6baZ6bak6bad6baS6baY6baQ6bab77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96bag6baU6bac6baq6baX6bah6baa6bai6bao6bae6baj6ba/6bap6baW6bam6ban6bqZ6bqb6bqa6bul6buk6bun6bum6byw6byu6b2b6b2g6b2e6b2d6b2Z6b6R5YS65YS55YqY5YqX5ZuD5Zq95Zq+5a2I5a2H5beL5beP5bux5oe95pSb5qyC5qu85qyD5qu45qyA54GD54GE54GK54GI54GJ54GF54GG54id54ia54iZ542+55SX55mq55+Q56St56Sx56Sv57GU57GT57Oy57qK57qH57qI57qL57qG57qN572N57676ICw6Ied6JiY6Jiq6Jim6Jif6Jij6Jic6JiZ6Jin6Jiu6Jih6Jig6Jip6Jie6Jil77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0NV0ubGVuZ3RoOyArK2opIGlmKERbMjQ1XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0NV1bal1dID0gNjI3MjAgKyBqOyBkWzYyNzIwICsgal0gPSBEWzI0NV1bal07fVxuXHREWzI0Nl0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/veigqeigneigm+igoOigpOignOigq+ihiuilreilqeilruilq+inuuitueituOitheituuitu+i0kOi0lOi2r+i6jui6jOi9nui9m+i9nemFhumFhOmFhemGuemQv+mQu+mQtumQqemQvemQvOmQsOmQuemQqumQt+mQrOmRgOmQsemXpemXpOmXo+mctemcuumev+mfoemhpOmjiemjhumjgOmlmOmllumouemovemphumphOmpgumpgemouu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vemov+mrjemslemsl+msmOmslumsuumtkumwq+mwnemwnOmwrOmwo+mwqOmwqemwpOmwoem2t+m2tum2vOm3gem3h+m3ium3j+m2vum3hem3g+m2u+m2tem3jum2uem2uum2rOm3iOm2sem2rem3jOm2s+m3jem2sum5uum6nOm7q+m7rum7rem8m+m8mOm8mum8sem9jum9pem9pOm+kuS6ueWbhuWbheWbi+WlseWti+WtjOW3leW3keW7suaUoeaUoOaUpuaUouasi+asiOasieawjeeBleeBlueBl+eBkueInueIn+eKqeeNv+eTmOeTleeTmeeTl+eZreeareekteemtOepsOepseexl+exnOexmeexm+exmu+/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDZdLmxlbmd0aDsgKytqKSBpZihEWzI0Nl1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDZdW2pdXSA9IDYyOTc2ICsgajsgZFs2Mjk3NiArIGpdID0gRFsyNDZdW2pdO31cblx0RFsyNDddID0gXCLvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73ns7Tns7HnupHnvY/nvofoh57oiavomLTomLXomLPomKzomLLomLbooKzooKjooKbooKrooKXopbHopr/opr7op7vorb7oroToroLoroboroXorb/otJXoupXoupTouproupLoupDoupboupfovaDovaLphYfpkYzpkZDpkYrpkYvpkY/pkYfpkYXpkYjpkYnpkYbpnL/pn6Ppoarpoanpo4vppZTppZvpqY7pqZPpqZTpqYzpqY/pqYjpqYrvv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73vv73pqYnpqZLpqZDpq5DprJnprKvprLvprZbprZXpsYbpsYjpsL/psYTpsLnpsLPpsYHpsLzpsLfpsLTpsLLpsL3psLbpt5vpt5Lpt57pt5rpt4vpt5Dpt5zpt5Hpt5/pt6npt5npt5jpt5bpt7Xpt5Xpt53purbpu7DpvLXpvLPpvLLpvYLpvavpvpXpvqLlhL3lipnlo6jlo6flpbLlrY3lt5jooK/lvY/miIHmiIPmiITmlKnmlKXmlpbmm6vmrJHmrJLmrI/mr4rngZvngZrniKLnjoLnjoHnjoPnmbDnn5TnsafnsabnupXoiazomLromYDomLnomLzomLHomLvomL7ooLDooLLooK7ooLPopbbopbTopbPop77vv71cIi5zcGxpdChcIlwiKTtcblx0Zm9yKGogPSAwOyBqICE9IERbMjQ3XS5sZW5ndGg7ICsraikgaWYoRFsyNDddW2pdLmNoYXJDb2RlQXQoMCkgIT09IDB4RkZGRCkgeyBlW0RbMjQ3XVtqXV0gPSA2MzIzMiArIGo7IGRbNjMyMzIgKyBqXSA9IERbMjQ3XVtqXTt9XG5cdERbMjQ4XSA9IFwi77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96K6M6K6O6K6L6K6I6LGF6LSZ6LqY6L2k6L2j6Ya86ZGi6ZGV6ZGd6ZGX6ZGe6Z+E6Z+F6aCA6amW6amZ6aye6ayf6ayg6bGS6bGY6bGQ6bGK6bGN6bGL6bGV6bGZ6bGM6bGO6be76be36bev6bej6ber6be46bek6be26beh6beu6bem6bey6bew6bei6bes6be06bez6beo6bet6buC6buQ6buy6buz6byG6byc6by46by36by26b2D6b2P77+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+977+96b2x6b2w6b2u6b2v5ZuT5ZuN5a2O5bGt5pSt5put5puu5qyT54Gf54Gh54Gd54Gg54ij55Ob55Ol55+V56S456a356a257Gq57qX576J6Imt6JmD6KC46KC36KC16KGL6K6U6K6V6Lqe6Lqf6Lqg6Lqd6Ya+6Ya96YeC6ZGr6ZGo6ZGp6Zul6Z2G6Z2D6Z2H6Z+H6Z+l6ame6auV6a2Z6bGj6bGn6bGm6bGi6bGe6bGg6biC6be+6biH6biD6biG6biF6biA6biB6biJ6be/6be96biE6bqg6bye6b2G6b206b216b225ZuU5pSu5pa45qyY5qyZ5qyX5qya54Gi54im54qq55+Y55+Z56S557Gp57Gr57O257qa77+9XCIuc3BsaXQoXCJcIik7XG5cdGZvcihqID0gMDsgaiAhPSBEWzI0OF0ubGVuZ3RoOyArK2opIGlmKERbMjQ4XVtqXS5jaGFyQ29kZUF0KDApICE9PSAweEZGRkQpIHsgZVtEWzI0OF1bal1dID0gNjM0ODggKyBqOyBkWzYzNDg4ICsgal0gPSBEWzI0OF1bal07fVxuXHREWzI0OV0gPSBcIu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vee6mOe6m+e6meiHoOiHoeiZhuiZh+iZiOilueiluuilvOilu+inv+iumOiumei6pei6pOi6o+mRrumRremRr+mRsemRs+mdiemhsumln+mxqOmxrumxrem4i+m4jem4kOm4j+m4kum4kem6oem7tem8iem9h+m9uOm9u+m9uum9ueWcnueBpuexr+igvOi2sui6pumHg+mRtOmRuOmRtumRtempoOmxtOmxs+mxsemxtem4lOm4k+m7tum8iu+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/ve+/vem+pOeBqOeBpeezt+iZquigvuigveigv+iunuiynOi6qei7iemdi+mhs+mhtOmjjOmloemmq+mppOmppumpp+mspOm4lem4l+m9iOaIh+asnueIp+iZjOi6qOmSgumSgOmSgempqempqOmsrum4meeIqeiZi+iun+mSg+mxuem6t+eZtempq+mxuum4neeBqeeBqum6pOm9vum9iem+mOeigemKueijj+Wiu+aBkueyp+WruuKVlOKVpuKVl+KVoOKVrOKVo+KVmuKVqeKVneKVkuKVpOKVleKVnuKVquKVoeKVmOKVp+KVm+KVk+KVpeKVluKVn+KVq+KVouKVmeKVqOKVnOKVkeKVkOKVreKVruKVsOKVr+KWk++/vVwiLnNwbGl0KFwiXCIpO1xuXHRmb3IoaiA9IDA7IGogIT0gRFsyNDldLmxlbmd0aDsgKytqKSBpZihEWzI0OV1bal0uY2hhckNvZGVBdCgwKSAhPT0gMHhGRkZEKSB7IGVbRFsyNDldW2pdXSA9IDYzNzQ0ICsgajsgZFs2Mzc0NCArIGpdID0gRFsyNDldW2pdO31cblx0cmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBkIH07IH0pKCk7XG5cdGNwdGFibGVbMTI1MF0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f+KCrO+/veKAmu+/veKAnuKApuKAoOKAoe+/veKAsMWg4oC5xZrFpMW9xbnvv73igJjigJnigJzigJ3igKLigJPigJTvv73ihKLFoeKAusWbxaXFvsW6wqDLh8uYxYHCpMSEwqbCp8KowqnFnsKrwqzCrcKuxbvCsMKxy5vFgsK0wrXCtsK3wrjEhcWfwrvEvcudxL7FvMWUw4HDgsSCw4TEucSGw4fEjMOJxJjDi8Saw43DjsSOxJDFg8WHw5PDlMWQw5bDl8WYxa7DmsWww5zDncWiw5/FlcOhw6LEg8OkxLrEh8OnxI3DqcSZw6vEm8Otw67Ej8SRxYTFiMOzw7TFkcO2w7fFmcWvw7rFscO8w73Fo8uZXCIsIEQgPSBbXSwgZSA9IHt9OyBmb3IodmFyIGk9MDtpIT1kLmxlbmd0aDsrK2kpIHsgaWYoZC5jaGFyQ29kZUF0KGkpICE9PSAweEZGRkQpIGVbZC5jaGFyQXQoaSldID0gaTsgRFtpXSA9IGQuY2hhckF0KGkpOyB9IHJldHVybiB7XCJlbmNcIjogZSwgXCJkZWNcIjogRCB9OyB9KSgpO1xuXHRjcHRhYmxlWzEyNTFdID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/QgtCD4oCa0ZPigJ7igKbigKDigKHigqzigLDQieKAudCK0IzQi9CP0ZLigJjigJnigJzigJ3igKLigJPigJTvv73ihKLRmeKAutGa0ZzRm9GfwqDQjtGe0IjCpNKQwqbCp9CBwqnQhMKrwqzCrcKu0IfCsMKx0IbRltKRwrXCtsK30ZHihJbRlMK70ZjQhdGV0ZfQkNCR0JLQk9CU0JXQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y7Rj1wiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMjUyXSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsMWg4oC5xZLvv73Fve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlMuc4oSixaHigLrFk++/vcW+xbjCoMKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKtwq7Cr8KwwrHCssKzwrTCtcK2wrfCuMK5wrrCu8K8wr3CvsK/w4DDgcOCw4PDhMOFw4bDh8OIw4nDisOLw4zDjcOOw4/DkMORw5LDk8OUw5XDlsOXw5jDmcOaw5vDnMOdw57Dn8Ogw6HDosOjw6TDpcOmw6fDqMOpw6rDq8Osw63DrsOvw7DDscOyw7PDtMO1w7bDt8O4w7nDusO7w7zDvcO+w79cIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbMTI1M10gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f+KCrO+/veKAmsaS4oCe4oCm4oCg4oCh77+94oCw77+94oC577+977+977+977+977+94oCY4oCZ4oCc4oCd4oCi4oCT4oCU77+94oSi77+94oC677+977+977+977+9wqDOhc6GwqPCpMKlwqbCp8Kowqnvv73Cq8Kswq3CruKAlcKwwrHCssKzzoTCtcK2wrfOiM6JzorCu86Mwr3Ojs6PzpDOkc6SzpPOlM6VzpbOl86YzpnOms6bzpzOnc6ezp/OoM6h77+9zqPOpM6lzqbOp86ozqnOqs6rzqzOrc6uzq/OsM6xzrLOs860zrXOts63zrjOuc66zrvOvM69zr7Ov8+Az4HPgs+Dz4TPhc+Gz4fPiM+Jz4rPi8+Mz43Pju+/vVwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMjU0XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsMWg4oC5xZLvv73vv73vv73vv73igJjigJnigJzigJ3igKLigJPigJTLnOKEosWh4oC6xZPvv73vv73FuMKgwqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq3CrsKvwrDCscKywrPCtMK1wrbCt8K4wrnCusK7wrzCvcK+wr/DgMOBw4LDg8OEw4XDhsOHw4jDicOKw4vDjMONw47Dj8Sew5HDksOTw5TDlcOWw5fDmMOZw5rDm8OcxLDFnsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/En8Oxw7LDs8O0w7XDtsO3w7jDucO6w7vDvMSxxZ/Dv1wiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMjU1XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsO+/veKAue+/ve+/ve+/ve+/ve+/veKAmOKAmeKAnOKAneKAouKAk+KAlMuc4oSi77+94oC677+977+977+977+9wqDCocKiwqPigqrCpcKmwqfCqMKpw5fCq8Kswq3CrsKvwrDCscKywrPCtMK1wrbCt8K4wrnDt8K7wrzCvcK+wr/WsNax1rLWs9a01rXWtta31rjWue+/vda71rzWvda+1r/XgNeB14LXg9ew17HXstez17Tvv73vv73vv73vv73vv73vv73vv73XkNeR15LXk9eU15XXlteX15jXmdea15vXnNed157Xn9eg16HXotej16TXpdem16fXqNep16rvv73vv73igI7igI/vv71cIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbMTI1Nl0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f+KCrNm+4oCaxpLigJ7igKbigKDigKHLhuKAsNm54oC5xZLahtqY2ojar+KAmOKAmeKAnOKAneKAouKAk+KAlNqp4oSi2pHigLrFk+KAjOKAjdq6wqDYjMKiwqPCpMKlwqbCp8KowqnavsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCudibwrvCvMK9wr7Yn9uB2KHYotij2KTYpdim2KfYqNip2KrYq9is2K3Yrtiv2LDYsdiy2LPYtNi12LbDl9i32LjYudi62YDZgdmC2YPDoNmEw6LZhdmG2YfZiMOnw6jDqcOqw6vZidmKw67Dr9mL2YzZjdmOw7TZj9mQw7fZkcO52ZLDu8O84oCO4oCP25JcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbMTI1N10gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f+KCrO+/veKAmu+/veKAnuKApuKAoOKAoe+/veKAsO+/veKAue+/vcKoy4fCuO+/veKAmOKAmeKAnOKAneKAouKAk+KAlO+/veKEou+/veKAuu+/vcKvy5vvv73CoO+/vcKiwqPCpO+/vcKmwqfDmMKpxZbCq8Kswq3CrsOGwrDCscKywrPCtMK1wrbCt8O4wrnFl8K7wrzCvcK+w6bEhMSuxIDEhsOEw4XEmMSSxIzDicW5xJbEosS2xKrEu8WgxYPFhcOTxYzDlcOWw5fFssWBxZrFqsOcxbvFvcOfxIXEr8SBxIfDpMOlxJnEk8SNw6nFusSXxKPEt8SrxLzFocWExYbDs8WNw7XDtsO3xbPFgsWbxavDvMW8xb7LmVwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMjU4XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/4oKs77+94oCaxpLigJ7igKbigKDigKHLhuKAsO+/veKAucWS77+977+977+977+94oCY4oCZ4oCc4oCd4oCi4oCT4oCUy5zihKLvv73igLrFk++/ve+/vcW4wqDCocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCrcKuwq/CsMKxwrLCs8K0wrXCtsK3wrjCucK6wrvCvMK9wr7Cv8OAw4HDgsSCw4TDhcOGw4fDiMOJw4rDi8yAw43DjsOPxJDDkcyJw5PDlMagw5bDl8OYw5nDmsObw5zGr8yDw5/DoMOhw6LEg8Okw6XDpsOnw6jDqcOqw6vMgcOtw67Dr8SRw7HMo8Ozw7TGocO2w7fDuMO5w7rDu8O8xrDigqvDv1wiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMDAwMF0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f8OEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsKp4oSiwrTCqOKJoMOGw5jiiJ7CseKJpOKJpcKlwrXiiILiiJHiiI/PgOKIq8KqwrrihKbDpsO4wr/CocKs4oiaxpLiiYjiiIbCq8K74oCmwqDDgMODw5XFksWT4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rDv8W44oGEwqTigLnigLrvrIHvrILigKHCt+KAmuKAnuKAsMOCw4rDgcOLw4jDjcOOw4/DjMOTw5Tvv73DksOaw5vDmcSxy4bLnMKvy5jLmcuawrjLncuby4dcIiwgRCA9IFtdLCBlID0ge307IGZvcih2YXIgaT0wO2khPWQubGVuZ3RoOysraSkgeyBpZihkLmNoYXJDb2RlQXQoaSkgIT09IDB4RkZGRCkgZVtkLmNoYXJBdChpKV0gPSBpOyBEW2ldID0gZC5jaGFyQXQoaSk7IH0gcmV0dXJuIHtcImVuY1wiOiBlLCBcImRlY1wiOiBEIH07IH0pKCk7XG5cdGNwdGFibGVbMTAwMDZdID0gKGZ1bmN0aW9uKCl7IHZhciBkID0gXCJcXHUwMDAwXFx1MDAwMVxcdTAwMDJcXHUwMDAzXFx1MDAwNFxcdTAwMDVcXHUwMDA2XFx1MDAwN1xcYlxcdFxcblxcdTAwMGJcXGZcXHJcXHUwMDBlXFx1MDAwZlxcdTAwMTBcXHUwMDExXFx1MDAxMlxcdTAwMTNcXHUwMDE0XFx1MDAxNVxcdTAwMTZcXHUwMDE3XFx1MDAxOFxcdTAwMTlcXHUwMDFhXFx1MDAxYlxcdTAwMWNcXHUwMDFkXFx1MDAxZVxcdTAwMWYgIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn/DhMK5wrLDicKzw5bDnM6Fw6DDosOkzoTCqMOnw6nDqMOqw6vCo+KEosOuw6/igKLCveKAsMO0w7bCpsKtw7nDu8O84oCgzpPOlM6YzpvOns6gw5/CrsKpzqPOqsKn4omgwrDOh86RwrHiiaTiiaXCpc6SzpXOls6XzpnOms6czqbOq86ozqnOrM6dwqzOn86h4omIzqTCq8K74oCmwqDOpc6nzobOiMWT4oCT4oCV4oCc4oCd4oCY4oCZw7fOic6KzozOjs6tzq7Or8+Mzo/Pjc6xzrLPiM60zrXPhs6zzrfOuc6+zrrOu868zr3Ov8+Az47Pgc+Dz4TOuM+Jz4LPh8+FzrbPis+LzpDOsO+/vVwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMDAwN10gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f9CQ0JHQktCT0JTQldCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/igKDCsMKiwqPCp+KAosK20IbCrsKp4oSi0ILRkuKJoNCD0ZPiiJ7CseKJpOKJpdGWwrXiiILQiNCE0ZTQh9GX0InRmdCK0ZrRmNCFwqziiJrGkuKJiOKIhsKrwrvigKbCoNCL0ZvQjNGc0ZXigJPigJTigJzigJ3igJjigJnDt+KAntCO0Z7Qj9Gf4oSW0IHRkdGP0LDQsdCy0LPQtNC10LbQt9C40LnQutC70LzQvdC+0L/RgNGB0YLRg9GE0YXRhtGH0YjRidGK0YvRjNGN0Y7CpFwiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMDAyOV0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f8OExIDEgcOJxITDlsOcw6HEhcSMw6TEjcSGxIfDqcW5xbrEjsOtxI/EksSTxJbDs8SXw7TDtsO1w7rEmsSbw7zigKDCsMSYwqPCp+KAosK2w5/CrsKp4oSixJnCqOKJoMSjxK7Er8Sq4omk4omlxKvEtuKIguKIkcWCxLvEvMS9xL7EucS6xYXFhsWDwqziiJrFhMWH4oiGwqvCu+KApsKgxYjFkMOVxZHFjOKAk+KAlOKAnOKAneKAmOKAmcO34peKxY3FlMWVxZjigLnigLrFmcWWxZfFoOKAmuKAnsWhxZrFm8OBxaTFpcONxb3FvsWqw5PDlMWrxa7DmsWvxbDFscWyxbPDncO9xLfFu8WBxbzEosuHXCIsIEQgPSBbXSwgZSA9IHt9OyBmb3IodmFyIGk9MDtpIT1kLmxlbmd0aDsrK2kpIHsgaWYoZC5jaGFyQ29kZUF0KGkpICE9PSAweEZGRkQpIGVbZC5jaGFyQXQoaSldID0gaTsgRFtpXSA9IGQuY2hhckF0KGkpOyB9IHJldHVybiB7XCJlbmNcIjogZSwgXCJkZWNcIjogRCB9OyB9KSgpO1xuXHRjcHRhYmxlWzEwMDc5XSA9IChmdW5jdGlvbigpeyB2YXIgZCA9IFwiXFx1MDAwMFxcdTAwMDFcXHUwMDAyXFx1MDAwM1xcdTAwMDRcXHUwMDA1XFx1MDAwNlxcdTAwMDdcXGJcXHRcXG5cXHUwMDBiXFxmXFxyXFx1MDAwZVxcdTAwMGZcXHUwMDEwXFx1MDAxMVxcdTAwMTJcXHUwMDEzXFx1MDAxNFxcdTAwMTVcXHUwMDE2XFx1MDAxN1xcdTAwMThcXHUwMDE5XFx1MDAxYVxcdTAwMWJcXHUwMDFjXFx1MDAxZFxcdTAwMWVcXHUwMDFmICFcXFwiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/w4TDhcOHw4nDkcOWw5zDocOgw6LDpMOjw6XDp8Opw6jDqsOrw63DrMOuw6/DscOzw7LDtMO2w7XDusO5w7vDvMOdwrDCosKjwqfigKLCtsOfwq7CqeKEosK0wqjiiaDDhsOY4oiewrHiiaTiiaXCpcK14oiC4oiR4oiPz4DiiKvCqsK64oSmw6bDuMK/wqHCrOKImsaS4omI4oiGwqvCu+KApsKgw4DDg8OVxZLFk+KAk+KAlOKAnOKAneKAmOKAmcO34peKw7/FuOKBhMKkw5DDsMOew77DvcK34oCa4oCe4oCww4LDisOBw4vDiMONw47Dj8OMw5PDlO+/vcOSw5rDm8OZxLHLhsucwq/LmMuZy5rCuMudy5vLh1wiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0Y3B0YWJsZVsxMDA4MV0gPSAoZnVuY3Rpb24oKXsgdmFyIGQgPSBcIlxcdTAwMDBcXHUwMDAxXFx1MDAwMlxcdTAwMDNcXHUwMDA0XFx1MDAwNVxcdTAwMDZcXHUwMDA3XFxiXFx0XFxuXFx1MDAwYlxcZlxcclxcdTAwMGVcXHUwMDBmXFx1MDAxMFxcdTAwMTFcXHUwMDEyXFx1MDAxM1xcdTAwMTRcXHUwMDE1XFx1MDAxNlxcdTAwMTdcXHUwMDE4XFx1MDAxOVxcdTAwMWFcXHUwMDFiXFx1MDAxY1xcdTAwMWRcXHUwMDFlXFx1MDAxZiAhXFxcIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xcXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f8OEw4XDh8OJw5HDlsOcw6HDoMOiw6TDo8Olw6fDqcOow6rDq8Otw6zDrsOvw7HDs8Oyw7TDtsO1w7rDucO7w7zigKDCsMKiwqPCp+KAosK2w5/CrsKp4oSiwrTCqOKJoMOGw5jiiJ7CseKJpOKJpcKlwrXiiILiiJHiiI/PgOKIq8KqwrrihKbDpsO4wr/CocKs4oiaxpLiiYjiiIbCq8K74oCmwqDDgMODw5XFksWT4oCT4oCU4oCc4oCd4oCY4oCZw7fil4rDv8W4xJ7En8SwxLHFnsWf4oChwrfigJrigJ7igLDDgsOKw4HDi8OIw43DjsOPw4zDk8OU77+9w5LDmsObw5nvv73Lhsucwq/LmMuZy5rCuMudy5vLh1wiLCBEID0gW10sIGUgPSB7fTsgZm9yKHZhciBpPTA7aSE9ZC5sZW5ndGg7KytpKSB7IGlmKGQuY2hhckNvZGVBdChpKSAhPT0gMHhGRkZEKSBlW2QuY2hhckF0KGkpXSA9IGk7IERbaV0gPSBkLmNoYXJBdChpKTsgfSByZXR1cm4ge1wiZW5jXCI6IGUsIFwiZGVjXCI6IEQgfTsgfSkoKTtcblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGNwdGFibGU7XG5cdC8qIGNwdXRpbHMuanMgKEMpIDIwMTMtcHJlc2VudCBTaGVldEpTIC0tIGh0dHA6Ly9zaGVldGpzLmNvbSAqL1xuXHQvKiB2aW06IHNldCBmdD1qYXZhc2NyaXB0OiAqL1xuXHQvKmpzaGludCBuZXdjYXA6IGZhbHNlICovXG5cdChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdCAgXCJ1c2Ugc3RyaWN0XCI7XG5cdCAgaWYodHlwZW9mIGNwdGFibGUgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgIGlmKHRydWUpe1xuXHQgICAgICB2YXIgY3B0ID0gY3B0YWJsZTtcblx0ICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoY3B0KTtcblx0ICAgICAgZWxzZSByb290LmNwdGFibGUgPSBmYWN0b3J5KGNwdCk7XG5cdCAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKFwiY3B0YWJsZSBub3QgZm91bmRcIik7XG5cdCAgfSBlbHNlIGNwdGFibGUgPSBmYWN0b3J5KGNwdGFibGUpO1xuXHR9KHRoaXMsIGZ1bmN0aW9uKGNwdCl7XG5cdCAgXCJ1c2Ugc3RyaWN0XCI7XG5cdCAgdmFyIG1hZ2ljID0ge1xuXHQgICAgXCIxMjAwXCI6XCJ1dGYxNmxlXCIsXG5cdCAgICBcIjEyMDFcIjpcInV0ZjE2YmVcIixcblx0ICAgIFwiMTIwMDBcIjpcInV0ZjMybGVcIixcblx0ICAgIFwiMTIwMDFcIjpcInV0ZjMyYmVcIixcblx0ICAgIFwiMTY5NjlcIjpcInV0ZjY0bGVcIixcblx0ICAgIFwiMjAxMjdcIjpcImFzY2lpXCIsXG5cdCAgICBcIjY1MDAwXCI6XCJ1dGY3XCIsXG5cdCAgICBcIjY1MDAxXCI6XCJ1dGY4XCJcblx0ICB9O1xuXG5cdCAgdmFyIHNiY3NfY2FjaGUgPSBbODc0LDEyNTAsMTI1MSwxMjUyLDEyNTMsMTI1NCwxMjU1LDEyNTYsMTAwMDBdO1xuXHQgIHZhciBkYmNzX2NhY2hlID0gWzkzMiw5MzYsOTQ5LDk1MF07XG5cdCAgdmFyIG1hZ2ljX2NhY2hlID0gWzY1MDAxXTtcblx0ICB2YXIgbWFnaWNfZGVjb2RlID0ge307XG5cdCAgdmFyIG1hZ2ljX2VuY29kZSA9IHt9O1xuXHQgIHZhciBjcGRjYWNoZSA9IHt9O1xuXHQgIHZhciBjcGVjYWNoZSA9IHt9O1xuXG5cdCAgdmFyIHNmY2MgPSBmdW5jdGlvbiBzZmNjKHgpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7IH07XG5cdCAgdmFyIGNjYSA9IGZ1bmN0aW9uIGNjYSh4KSB7IHJldHVybiB4LmNoYXJDb2RlQXQoMCk7IH07XG5cblx0ICB2YXIgaGFzX2J1ZiA9ICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG5cdCAgaWYoaGFzX2J1Zikge1xuXHQgICAgdmFyIG1kbCA9IDEwMjQsIG1kYiA9IG5ldyBCdWZmZXIobWRsKTtcblx0ICAgIHZhciBtYWtlX0VFID0gZnVuY3Rpb24gbWFrZV9FRShFKXtcblx0ICAgICAgdmFyIEVFID0gbmV3IEJ1ZmZlcig2NTUzNik7XG5cdCAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCA2NTUzNjsrK2kpIEVFW2ldID0gMDtcblx0ICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhFKSwgbGVuID0ga2V5cy5sZW5ndGg7XG5cdCAgICAgIGZvcih2YXIgZWUgPSAwLCBlID0ga2V5c1tlZV07IGVlIDwgbGVuOyArK2VlKSB7XG5cdCAgICAgICAgaWYoIShlID0ga2V5c1tlZV0pKSBjb250aW51ZTtcblx0ICAgICAgICBFRVtlLmNoYXJDb2RlQXQoMCldID0gRVtlXTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gRUU7XG5cdCAgICB9O1xuXHQgICAgdmFyIHNiY3NfZW5jb2RlID0gZnVuY3Rpb24gbWFrZV9zYmNzX2VuY29kZShjcCkge1xuXHQgICAgICB2YXIgRUUgPSBtYWtlX0VFKGNwdFtjcF0uZW5jKTtcblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNiY3NfZShkYXRhLCBvZm10KSB7XG5cdCAgICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuXHQgICAgICAgIHZhciBvdXQsIGk9MCwgaj0wLCBEPTAsIHc9MDtcblx0ICAgICAgICBpZih0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIG91dCA9IG5ldyBCdWZmZXIobGVuKTtcblx0ICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgKytpKSBvdXRbaV0gPSBFRVtkYXRhLmNoYXJDb2RlQXQoaSldO1xuXHQgICAgICAgIH0gZWxzZSBpZihCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcblx0ICAgICAgICAgIG91dCA9IG5ldyBCdWZmZXIoMipsZW4pO1xuXHQgICAgICAgICAgaiA9IDA7XG5cdCAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgICAgICBEID0gZGF0YVtpXTtcblx0ICAgICAgICAgICAgaWYoRCA8IDEyOCkgb3V0W2orK10gPSBFRVtEXTtcblx0ICAgICAgICAgICAgZWxzZSBpZihEIDwgMjI0KSB7IG91dFtqKytdID0gRUVbKChEJjMxKTw8NikrKGRhdGFbaSsxXSY2MyldOyArK2k7IH1cblx0ICAgICAgICAgICAgZWxzZSBpZihEIDwgMjQwKSB7IG91dFtqKytdID0gRUVbKChEJjE1KTw8MTIpKygoZGF0YVtpKzFdJjYzKTw8NikrKGRhdGFbaSsyXSY2MyldOyBpKz0yOyB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgIHcgPSAoKEQmNyk8PDE4KSsoKGRhdGFbaSsxXSY2Myk8PDEyKSsoKGRhdGFbaSsyXSY2Myk8PDYpKyhkYXRhW2krM10mNjMpOyBpKz0zO1xuXHQgICAgICAgICAgICAgIGlmKHcgPCA2NTUzNikgb3V0W2orK10gPSBFRVt3XTtcblx0ICAgICAgICAgICAgICBlbHNlIHsgdyAtPSA2NTUzNjsgb3V0W2orK10gPSBFRVsweEQ4MDAgKyAoKHc+PjEwKSYxMDIzKV07IG91dFtqKytdID0gRUVbMHhEQzAwICsgKHcmMTAyMyldOyB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG91dCA9IG91dC5zbGljZSgwLGopO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvdXQgPSBuZXcgQnVmZmVyKGxlbik7XG5cdCAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47ICsraSkgb3V0W2ldID0gRUVbZGF0YVtpXS5jaGFyQ29kZUF0KDApXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYoIW9mbXQgfHwgb2ZtdCA9PT0gJ2J1ZicpIHJldHVybiBvdXQ7XG5cdCAgICAgICAgaWYob2ZtdCAhPT0gJ2FycicpIHJldHVybiBvdXQudG9TdHJpbmcoJ2JpbmFyeScpO1xuXHQgICAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKG91dCk7XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgdmFyIHNiY3NfZGVjb2RlID0gZnVuY3Rpb24gbWFrZV9zYmNzX2RlY29kZShjcCkge1xuXHQgICAgICB2YXIgRCA9IGNwdFtjcF0uZGVjO1xuXHQgICAgICB2YXIgREQgPSBuZXcgQnVmZmVyKDEzMTA3MiksIGQ9MCwgYz1cIlwiO1xuXHQgICAgICBmb3IoZD0wO2Q8RC5sZW5ndGg7KytkKSB7XG5cdCAgICAgICAgaWYoIShjPURbZF0pKSBjb250aW51ZTtcblx0ICAgICAgICB2YXIgdyA9IGMuY2hhckNvZGVBdCgwKTtcblx0ICAgICAgICBERFsyKmRdID0gdyYyNTU7IEREWzIqZCsxXSA9IHc+Pjg7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNiY3NfZChkYXRhKSB7XG5cdCAgICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoLCBpPTAsIGo9MDtcblx0ICAgICAgICBpZigyICogbGVuID4gbWRsKSB7IG1kbCA9IDIgKiBsZW47IG1kYiA9IG5ldyBCdWZmZXIobWRsKTsgfVxuXHQgICAgICAgIGlmKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuXHQgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgaiA9IDIqZGF0YVtpXTtcblx0ICAgICAgICAgICAgbWRiWzIqaV0gPSBERFtqXTsgbWRiWzIqaSsxXSA9IEREW2orMV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICBqID0gMipkYXRhLmNoYXJDb2RlQXQoaSk7XG5cdCAgICAgICAgICAgIG1kYlsyKmldID0gRERbal07IG1kYlsyKmkrMV0gPSBERFtqKzFdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICBqID0gMipkYXRhW2ldO1xuXHQgICAgICAgICAgICBtZGJbMippXSA9IEREW2pdOyBtZGJbMippKzFdID0gRERbaisxXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG1kYi5zbGljZSgwLCAyICogbGVuKS50b1N0cmluZygndWNzMicpO1xuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIHZhciBkYmNzX2VuY29kZSA9IGZ1bmN0aW9uIG1ha2VfZGJjc19lbmNvZGUoY3ApIHtcblx0ICAgICAgdmFyIEUgPSBjcHRbY3BdLmVuYztcblx0ICAgICAgdmFyIEVFID0gbmV3IEJ1ZmZlcigxMzEwNzIpO1xuXHQgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgMTMxMDcyOyArK2kpIEVFW2ldID0gMDtcblx0ICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhFKTtcblx0ICAgICAgZm9yKHZhciBlZSA9IDAsIGUgPSBrZXlzW2VlXTsgZWUgPCBrZXlzLmxlbmd0aDsgKytlZSkge1xuXHQgICAgICAgIGlmKCEoZSA9IGtleXNbZWVdKSkgY29udGludWU7XG5cdCAgICAgICAgdmFyIGYgPSBlLmNoYXJDb2RlQXQoMCk7XG5cdCAgICAgICAgRUVbMipmXSA9IEVbZV0gJiAyNTU7IEVFWzIqZisxXSA9IEVbZV0+Pjg7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRiY3NfZShkYXRhLCBvZm10KSB7XG5cdCAgICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoLCBvdXQgPSBuZXcgQnVmZmVyKDIqbGVuKSwgaT0wLCBqPTAsIGpqPTAsIGs9MCwgRD0wO1xuXHQgICAgICAgIGlmKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgZm9yKGkgPSBrID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICAgICAgICAgIGogPSBkYXRhLmNoYXJDb2RlQXQoaSkqMjtcblx0ICAgICAgICAgICAgb3V0W2srK10gPSBFRVtqKzFdIHx8IEVFW2pdOyBpZihFRVtqKzFdID4gMCkgb3V0W2srK10gPSBFRVtqXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG91dCA9IG91dC5zbGljZSgwLGspO1xuXHQgICAgICAgIH0gZWxzZSBpZihCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcblx0ICAgICAgICAgIGZvcihpID0gayA9IDA7IGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgICAgICBEID0gZGF0YVtpXTtcblx0ICAgICAgICAgICAgaWYoRCA8IDEyOCkgaiA9IEQ7XG5cdCAgICAgICAgICAgIGVsc2UgaWYoRCA8IDIyNCkgeyBqID0gKChEJjMxKTw8NikrKGRhdGFbaSsxXSY2Myk7ICsraTsgfVxuXHQgICAgICAgICAgICBlbHNlIGlmKEQgPCAyNDApIHsgaiA9ICgoRCYxNSk8PDEyKSsoKGRhdGFbaSsxXSY2Myk8PDYpKyhkYXRhW2krMl0mNjMpOyBpKz0yOyB9XG5cdCAgICAgICAgICAgIGVsc2UgeyBqID0gKChEJjcpPDwxOCkrKChkYXRhW2krMV0mNjMpPDwxMikrKChkYXRhW2krMl0mNjMpPDw2KSsoZGF0YVtpKzNdJjYzKTsgaSs9MzsgfVxuXHQgICAgICAgICAgICBpZihqPDY1NTM2KSB7IGoqPTI7IG91dFtrKytdID0gRUVbaisxXSB8fCBFRVtqXTsgaWYoRUVbaisxXSA+IDApIG91dFtrKytdID0gRUVbal07IH1cblx0ICAgICAgICAgICAgZWxzZSB7IGpqID0gai02NTUzNjtcblx0ICAgICAgICAgICAgICBqPTIqKDB4RDgwMCArICgoamo+PjEwKSYxMDIzKSk7IG91dFtrKytdID0gRUVbaisxXSB8fCBFRVtqXTsgaWYoRUVbaisxXSA+IDApIG91dFtrKytdID0gRUVbal07XG5cdCAgICAgICAgICAgICAgaj0yKigweERDMDAgKyAoamomMTAyMykpOyBvdXRbaysrXSA9IEVFW2orMV0gfHwgRUVbal07IGlmKEVFW2orMV0gPiAwKSBvdXRbaysrXSA9IEVFW2pdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBvdXQgPSBvdXQuc2xpY2UoMCxrKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZm9yKGkgPSBrID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgICAgICAgIGogPSBkYXRhW2ldLmNoYXJDb2RlQXQoMCkqMjtcblx0ICAgICAgICAgICAgb3V0W2srK10gPSBFRVtqKzFdIHx8IEVFW2pdOyBpZihFRVtqKzFdID4gMCkgb3V0W2srK10gPSBFRVtqXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYoIW9mbXQgfHwgb2ZtdCA9PT0gJ2J1ZicpIHJldHVybiBvdXQ7XG5cdCAgICAgICAgaWYob2ZtdCAhPT0gJ2FycicpIHJldHVybiBvdXQudG9TdHJpbmcoJ2JpbmFyeScpO1xuXHQgICAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKG91dCk7XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgdmFyIGRiY3NfZGVjb2RlID0gZnVuY3Rpb24gbWFrZV9kYmNzX2RlY29kZShjcCkge1xuXHQgICAgICB2YXIgRCA9IGNwdFtjcF0uZGVjO1xuXHQgICAgICB2YXIgREQgPSBuZXcgQnVmZmVyKDEzMTA3MiksIGQ9MCwgYywgdz0wLCBqPTAsIGk9MDtcblx0ICAgICAgZm9yKGkgPSAwOyBpIDwgNjU1MzY7ICsraSkgeyBERFsyKmldID0gMHhGRjsgRERbMippKzFdID0gMHhGRDt9XG5cdCAgICAgIGZvcihkID0gMDsgZCA8IEQubGVuZ3RoOyArK2QpIHtcblx0ICAgICAgICBpZighKGM9RFtkXSkpIGNvbnRpbnVlO1xuXHQgICAgICAgIHcgPSBjLmNoYXJDb2RlQXQoMCk7XG5cdCAgICAgICAgaiA9IDIqZDtcblx0ICAgICAgICBERFtqXSA9IHcmMjU1OyBERFtqKzFdID0gdz4+ODtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZnVuY3Rpb24gZGJjc19kKGRhdGEpIHtcblx0ICAgICAgICB2YXIgbGVuID0gZGF0YS5sZW5ndGgsIG91dCA9IG5ldyBCdWZmZXIoMipsZW4pLCBpPTAsIGo9MCwgaz0wO1xuXHQgICAgICAgIGlmKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuXHQgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgaiA9IDIqZGF0YVtpXTtcblx0ICAgICAgICAgICAgaWYoRERbal09PT0weEZGICYmIEREW2orMV09PT0weEZEKSB7IGo9MiooKGRhdGFbaV08PDgpK2RhdGFbaSsxXSk7ICsraTsgfVxuXHQgICAgICAgICAgICBvdXRbaysrXSA9IEREW2pdOyBvdXRbaysrXSA9IEREW2orMV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgICBqID0gMipkYXRhLmNoYXJDb2RlQXQoaSk7XG5cdCAgICAgICAgICAgIGlmKEREW2pdPT09MHhGRiAmJiBERFtqKzFdPT09MHhGRCkgeyBqPTIqKChkYXRhLmNoYXJDb2RlQXQoaSk8PDgpK2RhdGEuY2hhckNvZGVBdChpKzEpKTsgKytpOyB9XG5cdCAgICAgICAgICAgIG91dFtrKytdID0gRERbal07IG91dFtrKytdID0gRERbaisxXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0ICAgICAgICAgICAgaiA9IDIqZGF0YVtpXTtcblx0ICAgICAgICAgICAgaWYoRERbal09PT0weEZGICYmIEREW2orMV09PT0weEZEKSB7IGo9MiooKGRhdGFbaV08PDgpK2RhdGFbaSsxXSk7ICsraTsgfVxuXHQgICAgICAgICAgICBvdXRbaysrXSA9IEREW2pdOyBvdXRbaysrXSA9IEREW2orMV07XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBvdXQuc2xpY2UoMCxrKS50b1N0cmluZygndWNzMicpO1xuXHQgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIG1hZ2ljX2RlY29kZVs2NTAwMV0gPSBmdW5jdGlvbiB1dGY4X2QoZGF0YSkge1xuXHQgICAgICBpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIHV0ZjhfZChkYXRhLnNwbGl0KFwiXCIpLm1hcChjY2EpKTtcblx0ICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoLCB3ID0gMCwgd3cgPSAwO1xuXHQgICAgICBpZig0ICogbGVuID4gbWRsKSB7IG1kbCA9IDQgKiBsZW47IG1kYiA9IG5ldyBCdWZmZXIobWRsKTsgfVxuXHQgICAgICB2YXIgaSA9IDA7XG5cdCAgICAgIGlmKGxlbiA+PSAzICYmIGRhdGFbMF0gPT0gMHhFRikgaWYoZGF0YVsxXSA9PSAweEJCICYmIGRhdGFbMl0gPT0gMHhCRikgaSA9IDM7XG5cdCAgICAgIGZvcih2YXIgaiA9IDEsIGsgPSAwLCBEID0gMDsgaSA8IGxlbjsgaSs9aikge1xuXHQgICAgICAgIGogPSAxOyBEID0gZGF0YVtpXTtcblx0ICAgICAgICBpZihEIDwgMTI4KSB3ID0gRDtcblx0ICAgICAgICBlbHNlIGlmKEQgPCAyMjQpIHsgdz0oRCYzMSkqNjQrKGRhdGFbaSsxXSY2Myk7IGo9MjsgfVxuXHQgICAgICAgIGVsc2UgaWYoRCA8IDI0MCkgeyB3PSgoRCYxNSk8PDEyKSsoZGF0YVtpKzFdJjYzKSo2NCsoZGF0YVtpKzJdJjYzKTsgaj0zOyB9XG5cdCAgICAgICAgZWxzZSB7IHc9KEQmNykqMjYyMTQ0KygoZGF0YVtpKzFdJjYzKTw8MTIpKyhkYXRhW2krMl0mNjMpKjY0KyhkYXRhW2krM10mNjMpOyBqPTQ7IH1cblx0ICAgICAgICBpZih3IDwgNjU1MzYpIHsgbWRiW2srK10gPSB3JjI1NTsgbWRiW2srK10gPSB3Pj44OyB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICB3IC09IDY1NTM2OyB3dyA9IDB4RDgwMCArICgodz4+MTApJjEwMjMpOyB3ID0gMHhEQzAwICsgKHcmMTAyMyk7XG5cdCAgICAgICAgICBtZGJbaysrXSA9IHd3JjI1NTsgbWRiW2srK10gPSB3dz4+Pjg7IG1kYltrKytdID0gdyYyNTU7IG1kYltrKytdID0gKHc+Pj44KSYyNTU7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBtZGIuc2xpY2UoMCxrKS50b1N0cmluZygndWNzMicpO1xuXHQgICAgfTtcblx0ICAgIG1hZ2ljX2VuY29kZVs2NTAwMV0gPSBmdW5jdGlvbiB1dGY4X2UoZGF0YSwgb2ZtdCkge1xuXHQgICAgICBpZihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuXHQgICAgICAgIGlmKCFvZm10IHx8IG9mbXQgPT09ICdidWYnKSByZXR1cm4gZGF0YTtcblx0ICAgICAgICBpZihvZm10ICE9PSAnYXJyJykgcmV0dXJuIGRhdGEudG9TdHJpbmcoJ2JpbmFyeScpO1xuXHQgICAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGRhdGEpO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aCwgdyA9IDAsIHd3ID0gMCwgaiA9IDA7XG5cdCAgICAgIHZhciBkaXJlY3QgPSB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIjtcblx0ICAgICAgaWYoNCAqIGxlbiA+IG1kbCkgeyBtZGwgPSA0ICogbGVuOyBtZGIgPSBuZXcgQnVmZmVyKG1kbCk7IH1cblx0ICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICAgICAgdyA9IGRpcmVjdCA/IGRhdGEuY2hhckNvZGVBdChpKSA6IGRhdGFbaV0uY2hhckNvZGVBdCgwKTtcblx0ICAgICAgICBpZih3IDw9IDB4MDA3RikgbWRiW2orK10gPSB3O1xuXHQgICAgICAgIGVsc2UgaWYodyA8PSAweDA3RkYpIHtcblx0ICAgICAgICAgIG1kYltqKytdID0gMTkyICsgKHcgPj4gNik7XG5cdCAgICAgICAgICBtZGJbaisrXSA9IDEyOCArICh3JjYzKTtcblx0ICAgICAgICB9IGVsc2UgaWYodyA+PSAweEQ4MDAgJiYgdyA8PSAweERGRkYpIHtcblx0ICAgICAgICAgIHcgLT0gMHhEODAwOyArK2k7XG5cdCAgICAgICAgICB3dyA9IChkaXJlY3QgPyBkYXRhLmNoYXJDb2RlQXQoaSkgOiBkYXRhW2ldLmNoYXJDb2RlQXQoMCkpIC0gMHhEQzAwICsgKHcgPDwgMTApO1xuXHQgICAgICAgICAgbWRiW2orK10gPSAyNDAgKyAoKHd3Pj4+MTgpICYgMHgwNyk7XG5cdCAgICAgICAgICBtZGJbaisrXSA9IDE0NCArICgod3c+Pj4xMikgJiAweDNGKTtcblx0ICAgICAgICAgIG1kYltqKytdID0gMTI4ICsgKCh3dz4+PjYpICYgMHgzRik7XG5cdCAgICAgICAgICBtZGJbaisrXSA9IDEyOCArICh3dyAmIDB4M0YpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBtZGJbaisrXSA9IDIyNCArICh3ID4+IDEyKTtcblx0ICAgICAgICAgIG1kYltqKytdID0gMTI4ICsgKCh3ID4+IDYpJjYzKTtcblx0ICAgICAgICAgIG1kYltqKytdID0gMTI4ICsgKHcmNjMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBpZighb2ZtdCB8fCBvZm10ID09PSAnYnVmJykgcmV0dXJuIG1kYi5zbGljZSgwLGopO1xuXHQgICAgICBpZihvZm10ICE9PSAnYXJyJykgcmV0dXJuIG1kYi5zbGljZSgwLGopLnRvU3RyaW5nKCdiaW5hcnknKTtcblx0ICAgICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwobWRiLCAwLCBqKTtcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgdmFyIGVuY2FjaGUgPSBmdW5jdGlvbiBlbmNhY2hlKCkge1xuXHQgICAgaWYoaGFzX2J1Zikge1xuXHQgICAgICBpZihjcGRjYWNoZVtzYmNzX2NhY2hlWzBdXSkgcmV0dXJuO1xuXHQgICAgICB2YXIgaT0wLCBzPTA7XG5cdCAgICAgIGZvcihpID0gMDsgaSA8IHNiY3NfY2FjaGUubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICBzID0gc2Jjc19jYWNoZVtpXTtcblx0ICAgICAgICBpZihjcHRbc10pIHtcblx0ICAgICAgICAgIGNwZGNhY2hlW3NdID0gc2Jjc19kZWNvZGUocyk7XG5cdCAgICAgICAgICBjcGVjYWNoZVtzXSA9IHNiY3NfZW5jb2RlKHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBmb3IoaSA9IDA7IGkgPCBkYmNzX2NhY2hlLmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgcyA9IGRiY3NfY2FjaGVbaV07XG5cdCAgICAgICAgaWYoY3B0W3NdKSB7XG5cdCAgICAgICAgICBjcGRjYWNoZVtzXSA9IGRiY3NfZGVjb2RlKHMpO1xuXHQgICAgICAgICAgY3BlY2FjaGVbc10gPSBkYmNzX2VuY29kZShzKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZm9yKGkgPSAwOyBpIDwgbWFnaWNfY2FjaGUubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICBzID0gbWFnaWNfY2FjaGVbaV07XG5cdCAgICAgICAgaWYobWFnaWNfZGVjb2RlW3NdKSBjcGRjYWNoZVtzXSA9IG1hZ2ljX2RlY29kZVtzXTtcblx0ICAgICAgICBpZihtYWdpY19lbmNvZGVbc10pIGNwZWNhY2hlW3NdID0gbWFnaWNfZW5jb2RlW3NdO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0ICB2YXIgbnVsbF9lbmMgPSBmdW5jdGlvbihkYXRhLCBvZm10KSB7IHJldHVybiBcIlwiOyB9O1xuXHQgIHZhciBjcF9kZWNhY2hlID0gZnVuY3Rpb24gY3BfZGVjYWNoZShjcCkgeyBkZWxldGUgY3BkY2FjaGVbY3BdOyBkZWxldGUgY3BlY2FjaGVbY3BdOyB9O1xuXHQgIHZhciBkZWNhY2hlID0gZnVuY3Rpb24gZGVjYWNoZSgpIHtcblx0ICAgIGlmKGhhc19idWYpIHtcblx0ICAgICAgaWYoIWNwZGNhY2hlW3NiY3NfY2FjaGVbMF1dKSByZXR1cm47XG5cdCAgICAgIHNiY3NfY2FjaGUuZm9yRWFjaChjcF9kZWNhY2hlKTtcblx0ICAgICAgZGJjc19jYWNoZS5mb3JFYWNoKGNwX2RlY2FjaGUpO1xuXHQgICAgICBtYWdpY19jYWNoZS5mb3JFYWNoKGNwX2RlY2FjaGUpO1xuXHQgICAgfVxuXHQgICAgbGFzdF9lbmMgPSBudWxsX2VuYzsgbGFzdF9jcCA9IDA7XG5cdCAgfTtcblx0ICB2YXIgY2FjaGUgPSB7XG5cdCAgICBlbmNhY2hlOiBlbmNhY2hlLFxuXHQgICAgZGVjYWNoZTogZGVjYWNoZSxcblx0ICAgIHNiY3M6IHNiY3NfY2FjaGUsXG5cdCAgICBkYmNzOiBkYmNzX2NhY2hlXG5cdCAgfTtcblxuXHQgIGVuY2FjaGUoKTtcblxuXHQgIHZhciBCTSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXHQgIHZhciBTZXREID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OScoKSwtLi86P1wiO1xuXHQgIHZhciBsYXN0X2VuYyA9IG51bGxfZW5jLCBsYXN0X2NwID0gMDtcblx0ICB2YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGNwLCBkYXRhLCBvZm10KSB7XG5cdCAgICBpZihjcCA9PT0gbGFzdF9jcCAmJiBsYXN0X2VuYykgeyByZXR1cm4gbGFzdF9lbmMoZGF0YSwgb2ZtdCk7IH1cblx0ICAgIGlmKGNwZWNhY2hlW2NwXSkgeyBsYXN0X2VuYyA9IGNwZWNhY2hlW2xhc3RfY3A9Y3BdOyByZXR1cm4gbGFzdF9lbmMoZGF0YSwgb2ZtdCk7IH1cblx0ICAgIGlmKGhhc19idWYgJiYgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gZGF0YS50b1N0cmluZygndXRmOCcpO1xuXHQgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuXHQgICAgdmFyIG91dCA9IGhhc19idWYgPyBuZXcgQnVmZmVyKDQqbGVuKSA6IFtdLCB3PTAsIGk9MCwgaiA9IDAsIHd3PTA7XG5cdCAgICB2YXIgQyA9IGNwdFtjcF0sIEUsIE0gPSBcIlwiO1xuXHQgICAgdmFyIGlzc3RyID0gdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnO1xuXHQgICAgaWYoQyAmJiAoRT1DLmVuYykpIGZvcihpID0gMDsgaSA8IGxlbjsgKytpLCArK2opIHtcblx0ICAgICAgdyA9IEVbaXNzdHI/IGRhdGEuY2hhckF0KGkpIDogZGF0YVtpXV07XG5cdCAgICAgIGlmKHcgPiAyNTUpIHtcblx0ICAgICAgICBvdXRbal0gPSB3Pj44O1xuXHQgICAgICAgIG91dFsrK2pdID0gdyYyNTU7XG5cdCAgICAgIH0gZWxzZSBvdXRbal0gPSB3JjI1NTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYoKE09bWFnaWNbY3BdKSkgc3dpdGNoKE0pIHtcblx0ICAgICAgY2FzZSBcInV0ZjhcIjpcblx0ICAgICAgICBpZihoYXNfYnVmICYmIGlzc3RyKSB7IG91dCA9IG5ldyBCdWZmZXIoZGF0YSwgTSk7IGogPSBvdXQubGVuZ3RoOyBicmVhazsgfVxuXHQgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgKytpLCArK2opIHtcblx0ICAgICAgICAgIHcgPSBpc3N0ciA/IGRhdGEuY2hhckNvZGVBdChpKSA6IGRhdGFbaV0uY2hhckNvZGVBdCgwKTtcblx0ICAgICAgICAgIGlmKHcgPD0gMHgwMDdGKSBvdXRbal0gPSB3O1xuXHQgICAgICAgICAgZWxzZSBpZih3IDw9IDB4MDdGRikge1xuXHQgICAgICAgICAgICBvdXRbal0gICA9IDE5MiArICh3ID4+IDYpO1xuXHQgICAgICAgICAgICBvdXRbKytqXSA9IDEyOCArICh3JjYzKTtcblx0ICAgICAgICAgIH0gZWxzZSBpZih3ID49IDB4RDgwMCAmJiB3IDw9IDB4REZGRikge1xuXHQgICAgICAgICAgICB3IC09IDB4RDgwMDtcblx0ICAgICAgICAgICAgd3cgPSAoaXNzdHIgPyBkYXRhLmNoYXJDb2RlQXQoKytpKSA6IGRhdGFbKytpXS5jaGFyQ29kZUF0KDApKSAtIDB4REMwMCArICh3IDw8IDEwKTtcblx0ICAgICAgICAgICAgb3V0W2pdICAgPSAyNDAgKyAoKHd3Pj4+MTgpICYgMHgwNyk7XG5cdCAgICAgICAgICAgIG91dFsrK2pdID0gMTQ0ICsgKCh3dz4+PjEyKSAmIDB4M0YpO1xuXHQgICAgICAgICAgICBvdXRbKytqXSA9IDEyOCArICgod3c+Pj42KSAmIDB4M0YpO1xuXHQgICAgICAgICAgICBvdXRbKytqXSA9IDEyOCArICh3dyAmIDB4M0YpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgb3V0W2pdICAgPSAyMjQgKyAodyA+PiAxMik7XG5cdCAgICAgICAgICAgIG91dFsrK2pdID0gMTI4ICsgKCh3ID4+IDYpJjYzKTtcblx0ICAgICAgICAgICAgb3V0Wysral0gPSAxMjggKyAodyY2Myk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIFwiYXNjaWlcIjpcblx0ICAgICAgICBpZihoYXNfYnVmICYmIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7IG91dCA9IG5ldyBCdWZmZXIoZGF0YSwgTSk7IGogPSBvdXQubGVuZ3RoOyBicmVhazsgfVxuXHQgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgKytpLCArK2opIHtcblx0ICAgICAgICAgIHcgPSBpc3N0ciA/IGRhdGEuY2hhckNvZGVBdChpKSA6IGRhdGFbaV0uY2hhckNvZGVBdCgwKTtcblx0ICAgICAgICAgIGlmKHcgPD0gMHgwMDdGKSBvdXRbal0gPSB3O1xuXHQgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgYXNjaWkgXCIgKyB3KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgXCJ1dGYxNmxlXCI6XG5cdCAgICAgICAgaWYoaGFzX2J1ZiAmJiB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikgeyBvdXQgPSBuZXcgQnVmZmVyKGRhdGEsIE0pOyBqID0gb3V0Lmxlbmd0aDsgYnJlYWs7IH1cblx0ICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgICAgdyA9IGlzc3RyID8gZGF0YS5jaGFyQ29kZUF0KGkpIDogZGF0YVtpXS5jaGFyQ29kZUF0KDApO1xuXHQgICAgICAgICAgb3V0W2orK10gPSB3JjI1NTtcblx0ICAgICAgICAgIG91dFtqKytdID0gdz4+ODtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgXCJ1dGYxNmJlXCI6XG5cdCAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0ICAgICAgICAgIHcgPSBpc3N0ciA/IGRhdGEuY2hhckNvZGVBdChpKSA6IGRhdGFbaV0uY2hhckNvZGVBdCgwKTtcblx0ICAgICAgICAgIG91dFtqKytdID0gdz4+ODtcblx0ICAgICAgICAgIG91dFtqKytdID0gdyYyNTU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIFwidXRmMzJsZVwiOlxuXHQgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdCAgICAgICAgICB3ID0gaXNzdHIgPyBkYXRhLmNoYXJDb2RlQXQoaSkgOiBkYXRhW2ldLmNoYXJDb2RlQXQoMCk7XG5cdCAgICAgICAgICBpZih3ID49IDB4RDgwMCAmJiB3IDw9IDB4REZGRikgdyA9IDB4MTAwMDAgKyAoKHcgLSAweEQ4MDApIDw8IDEwKSArIChkYXRhWysraV0uY2hhckNvZGVBdCgwKSAtIDB4REMwMCk7XG5cdCAgICAgICAgICBvdXRbaisrXSA9IHcmMjU1OyB3ID4+PSA4O1xuXHQgICAgICAgICAgb3V0W2orK10gPSB3JjI1NTsgdyA+Pj0gODtcblx0ICAgICAgICAgIG91dFtqKytdID0gdyYyNTU7IHcgPj49IDg7XG5cdCAgICAgICAgICBvdXRbaisrXSA9IHcmMjU1O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSBcInV0ZjMyYmVcIjpcblx0ICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgICAgdyA9IGlzc3RyID8gZGF0YS5jaGFyQ29kZUF0KGkpIDogZGF0YVtpXS5jaGFyQ29kZUF0KDApO1xuXHQgICAgICAgICAgaWYodyA+PSAweEQ4MDAgJiYgdyA8PSAweERGRkYpIHcgPSAweDEwMDAwICsgKCh3IC0gMHhEODAwKSA8PCAxMCkgKyAoZGF0YVsrK2ldLmNoYXJDb2RlQXQoMCkgLSAweERDMDApO1xuXHQgICAgICAgICAgb3V0W2orM10gPSB3JjI1NTsgdyA+Pj0gODtcblx0ICAgICAgICAgIG91dFtqKzJdID0gdyYyNTU7IHcgPj49IDg7XG5cdCAgICAgICAgICBvdXRbaisxXSA9IHcmMjU1OyB3ID4+PSA4O1xuXHQgICAgICAgICAgb3V0W2pdID0gdyYyNTU7XG5cdCAgICAgICAgICBqKz00O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSBcInV0ZjdcIjpcblx0ICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICAgICAgdmFyIGMgPSBpc3N0ciA/IGRhdGEuY2hhckF0KGkpIDogZGF0YVtpXS5jaGFyQXQoMCk7XG5cdCAgICAgICAgICBpZihjID09PSBcIitcIikgeyBvdXRbaisrXSA9IDB4MmI7IG91dFtqKytdID0gMHgyZDsgY29udGludWU7IH1cblx0ICAgICAgICAgIGlmKFNldEQuaW5kZXhPZihjKSA+IC0xKSB7IG91dFtqKytdID0gYy5jaGFyQ29kZUF0KDApOyBjb250aW51ZTsgfVxuXHQgICAgICAgICAgdmFyIHR0ID0gZW5jb2RlKDEyMDEsIGMpO1xuXHQgICAgICAgICAgb3V0W2orK10gPSAweDJiO1xuXHQgICAgICAgICAgb3V0W2orK10gPSBCTS5jaGFyQ29kZUF0KHR0WzBdPj4yKTtcblx0ICAgICAgICAgIG91dFtqKytdID0gQk0uY2hhckNvZGVBdCgoKHR0WzBdJjB4MDMpPDw0KSArICgodHRbMV18fDApPj40KSk7XG5cdCAgICAgICAgICBvdXRbaisrXSA9IEJNLmNoYXJDb2RlQXQoKCh0dFsxXSYweDBGKTw8MikgKyAoKHR0WzJdfHwwKT4+NikpO1xuXHQgICAgICAgICAgb3V0W2orK10gPSAweDJkO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgbWFnaWM6IFwiICsgY3AgKyBcIiBcIiArIG1hZ2ljW2NwXSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBDUDogXCIgKyBjcCk7XG5cdCAgICBvdXQgPSBvdXQuc2xpY2UoMCxqKTtcblx0ICAgIGlmKCFoYXNfYnVmKSByZXR1cm4gKG9mbXQgPT0gJ3N0cicpID8gKG91dCkubWFwKHNmY2MpLmpvaW4oXCJcIikgOiBvdXQ7XG5cdCAgICBpZighb2ZtdCB8fCBvZm10ID09PSAnYnVmJykgcmV0dXJuIG91dDtcblx0ICAgIGlmKG9mbXQgIT09ICdhcnInKSByZXR1cm4gb3V0LnRvU3RyaW5nKCdiaW5hcnknKTtcblx0ICAgIHJldHVybiBbXS5zbGljZS5jYWxsKG91dCk7XG5cdCAgfTtcblx0ICB2YXIgZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGNwLCBkYXRhKSB7XG5cdCAgICB2YXIgRjsgaWYoKEY9Y3BkY2FjaGVbY3BdKSkgcmV0dXJuIEYoZGF0YSk7XG5cdCAgICBpZih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGRlY29kZShjcCwgZGF0YS5zcGxpdChcIlwiKS5tYXAoY2NhKSk7XG5cdCAgICB2YXIgbGVuID0gZGF0YS5sZW5ndGgsIG91dCA9IG5ldyBBcnJheShsZW4pLCBzPVwiXCIsIHc9MCwgaT0wLCBqPTEsIGs9MCwgd3c9MDtcblx0ICAgIHZhciBDID0gY3B0W2NwXSwgRCwgTT1cIlwiO1xuXHQgICAgaWYoQyAmJiAoRD1DLmRlYykpIHtcblx0ICAgICAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKz1qKSB7XG5cdCAgICAgICAgaiA9IDI7XG5cdCAgICAgICAgcyA9IERbKGRhdGFbaV08PDgpKyBkYXRhW2krMV1dO1xuXHQgICAgICAgIGlmKCFzKSB7XG5cdCAgICAgICAgICBqID0gMTtcblx0ICAgICAgICAgIHMgPSBEW2RhdGFbaV1dO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZighcykgdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgY29kZTogJyArIGRhdGFbaV0gKyAnICcgKyBkYXRhW2krai0xXSArICcgJyArIGkgKyAnICcgKyBqICsgJyAnICsgRFtkYXRhW2ldXSk7XG5cdCAgICAgICAgb3V0W2srK10gPSBzO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmKChNPW1hZ2ljW2NwXSkpIHN3aXRjaChNKSB7XG5cdCAgICAgIGNhc2UgXCJ1dGY4XCI6XG5cdCAgICAgICAgaWYobGVuID49IDMgJiYgZGF0YVswXSA9PSAweEVGKSBpZihkYXRhWzFdID09IDB4QkIgJiYgZGF0YVsyXSA9PSAweEJGKSBpID0gMztcblx0ICAgICAgICBmb3IoOyBpIDwgbGVuOyBpKz1qKSB7XG5cdCAgICAgICAgICBqID0gMTtcblx0ICAgICAgICAgIGlmKGRhdGFbaV0gPCAxMjgpIHcgPSBkYXRhW2ldO1xuXHQgICAgICAgICAgZWxzZSBpZihkYXRhW2ldIDwgMjI0KSB7IHc9KGRhdGFbaV0mMzEpKjY0KyhkYXRhW2krMV0mNjMpOyBqPTI7IH1cblx0ICAgICAgICAgIGVsc2UgaWYoZGF0YVtpXSA8IDI0MCkgeyB3PSgoZGF0YVtpXSYxNSk8PDEyKSsoZGF0YVtpKzFdJjYzKSo2NCsoZGF0YVtpKzJdJjYzKTsgaj0zOyB9XG5cdCAgICAgICAgICBlbHNlIHsgdz0oZGF0YVtpXSY3KSoyNjIxNDQrKChkYXRhW2krMV0mNjMpPDwxMikrKGRhdGFbaSsyXSY2MykqNjQrKGRhdGFbaSszXSY2Myk7IGo9NDsgfVxuXHQgICAgICAgICAgaWYodyA8IDY1NTM2KSB7IG91dFtrKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh3KTsgfVxuXHQgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHcgLT0gNjU1MzY7IHd3ID0gMHhEODAwICsgKCh3Pj4xMCkmMTAyMyk7IHcgPSAweERDMDAgKyAodyYxMDIzKTtcblx0ICAgICAgICAgICAgb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHd3KTsgb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHcpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSBcImFzY2lpXCI6XG5cdCAgICAgICAgaWYoaGFzX2J1ZiAmJiBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHJldHVybiBkYXRhLnRvU3RyaW5nKE0pO1xuXHQgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSBvdXRbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pO1xuXHQgICAgICAgIGsgPSBsZW47IGJyZWFrO1xuXHQgICAgICBjYXNlIFwidXRmMTZsZVwiOlxuXHQgICAgICAgIGlmKGxlbiA+PSAyICYmIGRhdGFbMF0gPT0gMHhGRikgaWYoZGF0YVsxXSA9PSAweEZFKSBpID0gMjtcblx0ICAgICAgICBpZihoYXNfYnVmICYmIEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkgcmV0dXJuIGRhdGEudG9TdHJpbmcoTSk7XG5cdCAgICAgICAgaiA9IDI7XG5cdCAgICAgICAgZm9yKDsgaSsxIDwgbGVuOyBpKz1qKSB7XG5cdCAgICAgICAgICBvdXRbaysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGRhdGFbaSsxXTw8OCkgKyBkYXRhW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgXCJ1dGYxNmJlXCI6XG5cdCAgICAgICAgaWYobGVuID49IDIgJiYgZGF0YVswXSA9PSAweEZFKSBpZihkYXRhWzFdID09IDB4RkYpIGkgPSAyO1xuXHQgICAgICAgIGogPSAyO1xuXHQgICAgICAgIGZvcig7IGkrMSA8IGxlbjsgaSs9aikge1xuXHQgICAgICAgICAgb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChkYXRhW2ldPDw4KSArIGRhdGFbaSsxXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIFwidXRmMzJsZVwiOlxuXHQgICAgICAgIGlmKGxlbiA+PSA0ICYmIGRhdGFbMF0gPT0gMHhGRikgaWYoZGF0YVsxXSA9PSAweEZFICYmIGRhdGFbMl0gPT09IDAgJiYgZGF0YVszXSA9PT0gMCkgaSA9IDQ7XG5cdCAgICAgICAgaiA9IDQ7XG5cdCAgICAgICAgZm9yKDsgaSA8IGxlbjsgaSs9aikge1xuXHQgICAgICAgICAgdyA9IChkYXRhW2krM108PDI0KSArIChkYXRhW2krMl08PDE2KSArIChkYXRhW2krMV08PDgpICsgKGRhdGFbaV0pO1xuXHQgICAgICAgICAgaWYodyA+IDB4RkZGRikge1xuXHQgICAgICAgICAgICB3IC09IDB4MTAwMDA7XG5cdCAgICAgICAgICAgIG91dFtrKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MDAgKyAoKHcgPj4gMTApICYgMHgzRkYpKTtcblx0ICAgICAgICAgICAgb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4REMwMCArICh3ICYgMHgzRkYpKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGVsc2Ugb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSBcInV0ZjMyYmVcIjpcblx0ICAgICAgICBpZihsZW4gPj0gNCAmJiBkYXRhWzNdID09IDB4RkYpIGlmKGRhdGFbMl0gPT0gMHhGRSAmJiBkYXRhWzFdID09PSAwICYmIGRhdGFbMF0gPT09IDApIGkgPSA0O1xuXHQgICAgICAgIGogPSA0O1xuXHQgICAgICAgIGZvcig7IGkgPCBsZW47IGkrPWopIHtcblx0ICAgICAgICAgIHcgPSAoZGF0YVtpXTw8MjQpICsgKGRhdGFbaSsxXTw8MTYpICsgKGRhdGFbaSsyXTw8OCkgKyAoZGF0YVtpKzNdKTtcblx0ICAgICAgICAgIGlmKHcgPiAweEZGRkYpIHtcblx0ICAgICAgICAgICAgdyAtPSAweDEwMDAwO1xuXHQgICAgICAgICAgICBvdXRbaysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKCh3ID4+IDEwKSAmIDB4M0ZGKSk7XG5cdCAgICAgICAgICAgIG91dFtrKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweERDMDAgKyAodyAmIDB4M0ZGKSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBlbHNlIG91dFtrKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh3KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIGNhc2UgXCJ1dGY3XCI6XG5cdCAgICAgICAgaWYobGVuID49IDQgJiYgZGF0YVswXSA9PSAweDJCICYmIGRhdGFbMV0gPT0gMHgyRiAmJiBkYXRhWzJdID09IDB4NzYpIHtcblx0ICAgICAgICAgIGlmKGxlbiA+PSA1ICYmIGRhdGFbM10gPT0gMHgzOCAmJiBkYXRhWzRdID09IDB4MkQpIGkgPSA1O1xuXHQgICAgICAgICAgZWxzZSBpZihkYXRhWzNdID09IDB4MzggfHwgZGF0YVszXSA9PSAweDM5IHx8IGRhdGFbM10gPT0gMHgyQiB8fCBkYXRhWzNdID09IDB4MkYpIGkgPSA0O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IoOyBpIDwgbGVuOyBpKz1qKSB7XG5cdCAgICAgICAgICBpZihkYXRhW2ldICE9PSAweDJiKSB7IGo9MTsgb3V0W2srK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0pOyBjb250aW51ZTsgfVxuXHQgICAgICAgICAgaj0xO1xuXHQgICAgICAgICAgaWYoZGF0YVtpKzFdID09PSAweDJkKSB7IGogPSAyOyBvdXRbaysrXSA9IFwiK1wiOyBjb250aW51ZTsgfVxuXHQgICAgICAgICAgd2hpbGUoU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2kral0pLm1hdGNoKC9bQS1aYS16MC05K1xcL10vKSkgaisrO1xuXHQgICAgICAgICAgdmFyIGRhc2ggPSAwO1xuXHQgICAgICAgICAgaWYoZGF0YVtpK2pdID09PSAweDJkKSB7ICsrajsgZGFzaD0xOyB9XG5cdCAgICAgICAgICB2YXIgdHQgPSBbXTtcblx0ICAgICAgICAgIHZhciBvNjQgPSBcIlwiO1xuXHQgICAgICAgICAgdmFyIGMxPTAsIGMyPTAsIGMzPTA7XG5cdCAgICAgICAgICB2YXIgZTE9MCwgZTI9MCwgZTM9MCwgZTQ9MDtcblx0ICAgICAgICAgIGZvcih2YXIgbCA9IDE7IGwgPCBqIC0gZGFzaDspIHtcblx0ICAgICAgICAgICAgZTEgPSBCTS5pbmRleE9mKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpK2wrK10pKTtcblx0ICAgICAgICAgICAgZTIgPSBCTS5pbmRleE9mKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpK2wrK10pKTtcblx0ICAgICAgICAgICAgYzEgPSBlMSA8PCAyIHwgZTIgPj4gNDtcblx0ICAgICAgICAgICAgdHQucHVzaChjMSk7XG5cdCAgICAgICAgICAgIGUzID0gQk0uaW5kZXhPZihTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaStsKytdKSk7XG5cdCAgICAgICAgICAgIGlmKGUzID09PSAtMSkgYnJlYWs7XG5cdCAgICAgICAgICAgIGMyID0gKGUyICYgMTUpIDw8IDQgfCBlMyA+PiAyO1xuXHQgICAgICAgICAgICB0dC5wdXNoKGMyKTtcblx0ICAgICAgICAgICAgZTQgPSBCTS5pbmRleE9mKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpK2wrK10pKTtcblx0ICAgICAgICAgICAgaWYoZTQgPT09IC0xKSBicmVhaztcblx0ICAgICAgICAgICAgYzMgPSAoZTMgJiAzKSA8PCA2IHwgZTQ7XG5cdCAgICAgICAgICAgIGlmKGU0IDwgNjQpIHR0LnB1c2goYzMpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgbzY0ID0gZGVjb2RlKDEyMDEsIHR0KTtcblx0ICAgICAgICAgIGZvcihsID0gMDsgbCA8IG82NC5sZW5ndGg7ICsrbCkgb3V0W2srK10gPSBvNjQuY2hhckF0KGwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgbWFnaWM6IFwiICsgY3AgKyBcIiBcIiArIG1hZ2ljW2NwXSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBDUDogXCIgKyBjcCk7XG5cdCAgICByZXR1cm4gb3V0LnNsaWNlKDAsaykuam9pbihcIlwiKTtcblx0ICB9O1xuXHQgIHZhciBoYXNjcCA9IGZ1bmN0aW9uIGhhc2NwKGNwKSB7IHJldHVybiAhIShjcHRbY3BdIHx8IG1hZ2ljW2NwXSk7IH07XG5cdCAgY3B0LnV0aWxzID0geyBkZWNvZGU6IGRlY29kZSwgZW5jb2RlOiBlbmNvZGUsIGhhc2NwOiBoYXNjcCwgbWFnaWM6IG1hZ2ljLCBjYWNoZTpjYWNoZSB9O1xuXHQgIHJldHVybiBjcHQ7XG5cdH0pKTtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHJlcXVpcmU7dmFyIHJlcXVpcmU7LyohXG5cblx0SlNaaXAgLSBBIEphdmFzY3JpcHQgY2xhc3MgZm9yIGdlbmVyYXRpbmcgYW5kIHJlYWRpbmcgemlwIGZpbGVzXG5cdDxodHRwOi8vc3R1YXJ0ay5jb20vanN6aXA+XG5cblx0KGMpIDIwMDktMjAxNCBTdHVhcnQgS25pZ2h0bGV5IDxzdHVhcnQgW2F0XSBzdHVhcnRrLmNvbT5cblx0RHVhbCBsaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Ugb3IgR1BMdjMuIFNlZSBodHRwczovL3Jhdy5naXRodWIuY29tL1N0dWsvanN6aXAvbWFzdGVyL0xJQ0VOU0UubWFya2Rvd24uXG5cblx0SlNaaXAgdXNlcyB0aGUgbGlicmFyeSBwYWtvIHJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSA6XG5cdGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9ibG9iL21hc3Rlci9MSUNFTlNFXG5cdCovXG5cdCFmdW5jdGlvbihlKXtcblx0XHRpZih0cnVlKW1vZHVsZS5leHBvcnRzPWUoKTtcblx0XHRlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCl7SlNaaXA9ZSgpO2RlZmluZShbXSxlKTt9XG5cdFx0ZWxzZXtcblx0XHRcdHZhciBmO1xuXHRcdFx0XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz9mPXdpbmRvdzpcblx0XHRcdFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Zj1nbG9iYWw6XG5cdFx0XHRcInVuZGVmaW5lZFwiIT10eXBlb2YgJCAmJiAkLmdsb2JhbD9mPSQuZ2xvYmFsOlxuXHRcdFx0XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJihmPXNlbGYpLGYuSlNaaXA9ZSgpXG5cdFx0fVxuXHR9KGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIHJlcXVpcmUobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8vIHByaXZhdGUgcHJvcGVydHlcblx0dmFyIF9rZXlTdHIgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7XG5cblxuXHQvLyBwdWJsaWMgbWV0aG9kIGZvciBlbmNvZGluZ1xuXHRleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGlucHV0LCB1dGY4KSB7XG5cdCAgICB2YXIgb3V0cHV0ID0gXCJcIjtcblx0ICAgIHZhciBjaHIxLCBjaHIyLCBjaHIzLCBlbmMxLCBlbmMyLCBlbmMzLCBlbmM0O1xuXHQgICAgdmFyIGkgPSAwO1xuXG5cdCAgICB3aGlsZSAoaSA8IGlucHV0Lmxlbmd0aCkge1xuXG5cdCAgICAgICAgY2hyMSA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcblx0ICAgICAgICBjaHIyID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuXHQgICAgICAgIGNocjMgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG5cblx0ICAgICAgICBlbmMxID0gY2hyMSA+PiAyO1xuXHQgICAgICAgIGVuYzIgPSAoKGNocjEgJiAzKSA8PCA0KSB8IChjaHIyID4+IDQpO1xuXHQgICAgICAgIGVuYzMgPSAoKGNocjIgJiAxNSkgPDwgMikgfCAoY2hyMyA+PiA2KTtcblx0ICAgICAgICBlbmM0ID0gY2hyMyAmIDYzO1xuXG5cdCAgICAgICAgaWYgKGlzTmFOKGNocjIpKSB7XG5cdCAgICAgICAgICAgIGVuYzMgPSBlbmM0ID0gNjQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGlzTmFOKGNocjMpKSB7XG5cdCAgICAgICAgICAgIGVuYzQgPSA2NDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBvdXRwdXQgPSBvdXRwdXQgKyBfa2V5U3RyLmNoYXJBdChlbmMxKSArIF9rZXlTdHIuY2hhckF0KGVuYzIpICsgX2tleVN0ci5jaGFyQXQoZW5jMykgKyBfa2V5U3RyLmNoYXJBdChlbmM0KTtcblxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gb3V0cHV0O1xuXHR9O1xuXG5cdC8vIHB1YmxpYyBtZXRob2QgZm9yIGRlY29kaW5nXG5cdGV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24oaW5wdXQsIHV0ZjgpIHtcblx0ICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuXHQgICAgdmFyIGNocjEsIGNocjIsIGNocjM7XG5cdCAgICB2YXIgZW5jMSwgZW5jMiwgZW5jMywgZW5jNDtcblx0ICAgIHZhciBpID0gMDtcblxuXHQgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZywgXCJcIik7XG5cblx0ICAgIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG5cblx0ICAgICAgICBlbmMxID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcblx0ICAgICAgICBlbmMyID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcblx0ICAgICAgICBlbmMzID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcblx0ICAgICAgICBlbmM0ID0gX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtcblxuXHQgICAgICAgIGNocjEgPSAoZW5jMSA8PCAyKSB8IChlbmMyID4+IDQpO1xuXHQgICAgICAgIGNocjIgPSAoKGVuYzIgJiAxNSkgPDwgNCkgfCAoZW5jMyA+PiAyKTtcblx0ICAgICAgICBjaHIzID0gKChlbmMzICYgMykgPDwgNikgfCBlbmM0O1xuXG5cdCAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICsgU3RyaW5nLmZyb21DaGFyQ29kZShjaHIxKTtcblxuXHQgICAgICAgIGlmIChlbmMzICE9IDY0KSB7XG5cdCAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChlbmM0ICE9IDY0KSB7XG5cdCAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyMyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvdXRwdXQ7XG5cblx0fTtcblxuXHR9LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRmdW5jdGlvbiBDb21wcmVzc2VkT2JqZWN0KCkge1xuXHQgICAgdGhpcy5jb21wcmVzc2VkU2l6ZSA9IDA7XG5cdCAgICB0aGlzLnVuY29tcHJlc3NlZFNpemUgPSAwO1xuXHQgICAgdGhpcy5jcmMzMiA9IDA7XG5cdCAgICB0aGlzLmNvbXByZXNzaW9uTWV0aG9kID0gbnVsbDtcblx0ICAgIHRoaXMuY29tcHJlc3NlZENvbnRlbnQgPSBudWxsO1xuXHR9XG5cblx0Q29tcHJlc3NlZE9iamVjdC5wcm90b3R5cGUgPSB7XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybiB0aGUgZGVjb21wcmVzc2VkIGNvbnRlbnQgaW4gYW4gdW5zcGVjaWZpZWQgZm9ybWF0LlxuXHQgICAgICogVGhlIGZvcm1hdCB3aWxsIGRlcGVuZCBvbiB0aGUgZGVjb21wcmVzc29yLlxuXHQgICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgZGVjb21wcmVzc2VkIGNvbnRlbnQuXG5cdCAgICAgKi9cblx0ICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBudWxsOyAvLyBzZWUgaW1wbGVtZW50YXRpb25cblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybiB0aGUgY29tcHJlc3NlZCBjb250ZW50IGluIGFuIHVuc3BlY2lmaWVkIGZvcm1hdC5cblx0ICAgICAqIFRoZSBmb3JtYXQgd2lsbCBkZXBlbmQgb24gdGhlIGNvbXByZXNzZWQgY29udGVuIHNvdXJjZS5cblx0ICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIGNvbXByZXNzZWQgY29udGVudC5cblx0ICAgICAqL1xuXHQgICAgZ2V0Q29tcHJlc3NlZENvbnRlbnQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBudWxsOyAvLyBzZWUgaW1wbGVtZW50YXRpb25cblx0ICAgIH1cblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBDb21wcmVzc2VkT2JqZWN0O1xuXG5cdH0se31dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdGV4cG9ydHMuU1RPUkUgPSB7XG5cdCAgICBtYWdpYzogXCJcXHgwMFxceDAwXCIsXG5cdCAgICBjb21wcmVzczogZnVuY3Rpb24oY29udGVudCkge1xuXHQgICAgICAgIHJldHVybiBjb250ZW50OyAvLyBubyBjb21wcmVzc2lvblxuXHQgICAgfSxcblx0ICAgIHVuY29tcHJlc3M6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0ICAgICAgICByZXR1cm4gY29udGVudDsgLy8gbm8gY29tcHJlc3Npb25cblx0ICAgIH0sXG5cdCAgICBjb21wcmVzc0lucHV0VHlwZTogbnVsbCxcblx0ICAgIHVuY29tcHJlc3NJbnB1dFR5cGU6IG51bGxcblx0fTtcblx0ZXhwb3J0cy5ERUZMQVRFID0gX2RlcmVxXygnLi9mbGF0ZScpO1xuXG5cdH0se1wiLi9mbGF0ZVwiOjh9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciB1dGlscyA9IF9kZXJlcV8oJy4vdXRpbHMnKTtcblxuXHR2YXIgdGFibGUgPSBbXG5cdCAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweEVFMEU2MTJDLCAweDk5MDk1MUJBLFxuXHQgICAgMHgwNzZEQzQxOSwgMHg3MDZBRjQ4RiwgMHhFOTYzQTUzNSwgMHg5RTY0OTVBMyxcblx0ICAgIDB4MEVEQjg4MzIsIDB4NzlEQ0I4QTQsIDB4RTBENUU5MUUsIDB4OTdEMkQ5ODgsXG5cdCAgICAweDA5QjY0QzJCLCAweDdFQjE3Q0JELCAweEU3QjgyRDA3LCAweDkwQkYxRDkxLFxuXHQgICAgMHgxREI3MTA2NCwgMHg2QUIwMjBGMiwgMHhGM0I5NzE0OCwgMHg4NEJFNDFERSxcblx0ICAgIDB4MUFEQUQ0N0QsIDB4NkREREU0RUIsIDB4RjRENEI1NTEsIDB4ODNEMzg1QzcsXG5cdCAgICAweDEzNkM5ODU2LCAweDY0NkJBOEMwLCAweEZENjJGOTdBLCAweDhBNjVDOUVDLFxuXHQgICAgMHgxNDAxNUM0RiwgMHg2MzA2NkNEOSwgMHhGQTBGM0Q2MywgMHg4RDA4MERGNSxcblx0ICAgIDB4M0I2RTIwQzgsIDB4NEM2OTEwNUUsIDB4RDU2MDQxRTQsIDB4QTI2NzcxNzIsXG5cdCAgICAweDNDMDNFNEQxLCAweDRCMDRENDQ3LCAweEQyMEQ4NUZELCAweEE1MEFCNTZCLFxuXHQgICAgMHgzNUI1QThGQSwgMHg0MkIyOTg2QywgMHhEQkJCQzlENiwgMHhBQ0JDRjk0MCxcblx0ICAgIDB4MzJEODZDRTMsIDB4NDVERjVDNzUsIDB4RENENjBEQ0YsIDB4QUJEMTNENTksXG5cdCAgICAweDI2RDkzMEFDLCAweDUxREUwMDNBLCAweEM4RDc1MTgwLCAweEJGRDA2MTE2LFxuXHQgICAgMHgyMUI0RjRCNSwgMHg1NkIzQzQyMywgMHhDRkJBOTU5OSwgMHhCOEJEQTUwRixcblx0ICAgIDB4MjgwMkI4OUUsIDB4NUYwNTg4MDgsIDB4QzYwQ0Q5QjIsIDB4QjEwQkU5MjQsXG5cdCAgICAweDJGNkY3Qzg3LCAweDU4Njg0QzExLCAweEMxNjExREFCLCAweEI2NjYyRDNELFxuXHQgICAgMHg3NkRDNDE5MCwgMHgwMURCNzEwNiwgMHg5OEQyMjBCQywgMHhFRkQ1MTAyQSxcblx0ICAgIDB4NzFCMTg1ODksIDB4MDZCNkI1MUYsIDB4OUZCRkU0QTUsIDB4RThCOEQ0MzMsXG5cdCAgICAweDc4MDdDOUEyLCAweDBGMDBGOTM0LCAweDk2MDlBODhFLCAweEUxMEU5ODE4LFxuXHQgICAgMHg3RjZBMERCQiwgMHgwODZEM0QyRCwgMHg5MTY0NkM5NywgMHhFNjYzNUMwMSxcblx0ICAgIDB4NkI2QjUxRjQsIDB4MUM2QzYxNjIsIDB4ODU2NTMwRDgsIDB4RjI2MjAwNEUsXG5cdCAgICAweDZDMDY5NUVELCAweDFCMDFBNTdCLCAweDgyMDhGNEMxLCAweEY1MEZDNDU3LFxuXHQgICAgMHg2NUIwRDlDNiwgMHgxMkI3RTk1MCwgMHg4QkJFQjhFQSwgMHhGQ0I5ODg3Qyxcblx0ICAgIDB4NjJERDFEREYsIDB4MTVEQTJENDksIDB4OENEMzdDRjMsIDB4RkJENDRDNjUsXG5cdCAgICAweDREQjI2MTU4LCAweDNBQjU1MUNFLCAweEEzQkMwMDc0LCAweEQ0QkIzMEUyLFxuXHQgICAgMHg0QURGQTU0MSwgMHgzREQ4OTVENywgMHhBNEQxQzQ2RCwgMHhEM0Q2RjRGQixcblx0ICAgIDB4NDM2OUU5NkEsIDB4MzQ2RUQ5RkMsIDB4QUQ2Nzg4NDYsIDB4REE2MEI4RDAsXG5cdCAgICAweDQ0MDQyRDczLCAweDMzMDMxREU1LCAweEFBMEE0QzVGLCAweEREMEQ3Q0M5LFxuXHQgICAgMHg1MDA1NzEzQywgMHgyNzAyNDFBQSwgMHhCRTBCMTAxMCwgMHhDOTBDMjA4Nixcblx0ICAgIDB4NTc2OEI1MjUsIDB4MjA2Rjg1QjMsIDB4Qjk2NkQ0MDksIDB4Q0U2MUU0OUYsXG5cdCAgICAweDVFREVGOTBFLCAweDI5RDlDOTk4LCAweEIwRDA5ODIyLCAweEM3RDdBOEI0LFxuXHQgICAgMHg1OUIzM0QxNywgMHgyRUI0MEQ4MSwgMHhCN0JENUMzQiwgMHhDMEJBNkNBRCxcblx0ICAgIDB4RURCODgzMjAsIDB4OUFCRkIzQjYsIDB4MDNCNkUyMEMsIDB4NzRCMUQyOUEsXG5cdCAgICAweEVBRDU0NzM5LCAweDlERDI3N0FGLCAweDA0REIyNjE1LCAweDczREMxNjgzLFxuXHQgICAgMHhFMzYzMEIxMiwgMHg5NDY0M0I4NCwgMHgwRDZENkEzRSwgMHg3QTZBNUFBOCxcblx0ICAgIDB4RTQwRUNGMEIsIDB4OTMwOUZGOUQsIDB4MEEwMEFFMjcsIDB4N0QwNzlFQjEsXG5cdCAgICAweEYwMEY5MzQ0LCAweDg3MDhBM0QyLCAweDFFMDFGMjY4LCAweDY5MDZDMkZFLFxuXHQgICAgMHhGNzYyNTc1RCwgMHg4MDY1NjdDQiwgMHgxOTZDMzY3MSwgMHg2RTZCMDZFNyxcblx0ICAgIDB4RkVENDFCNzYsIDB4ODlEMzJCRTAsIDB4MTBEQTdBNUEsIDB4NjdERDRBQ0MsXG5cdCAgICAweEY5QjlERjZGLCAweDhFQkVFRkY5LCAweDE3QjdCRTQzLCAweDYwQjA4RUQ1LFxuXHQgICAgMHhENkQ2QTNFOCwgMHhBMUQxOTM3RSwgMHgzOEQ4QzJDNCwgMHg0RkRGRjI1Mixcblx0ICAgIDB4RDFCQjY3RjEsIDB4QTZCQzU3NjcsIDB4M0ZCNTA2REQsIDB4NDhCMjM2NEIsXG5cdCAgICAweEQ4MEQyQkRBLCAweEFGMEExQjRDLCAweDM2MDM0QUY2LCAweDQxMDQ3QTYwLFxuXHQgICAgMHhERjYwRUZDMywgMHhBODY3REY1NSwgMHgzMTZFOEVFRiwgMHg0NjY5QkU3OSxcblx0ICAgIDB4Q0I2MUIzOEMsIDB4QkM2NjgzMUEsIDB4MjU2RkQyQTAsIDB4NTI2OEUyMzYsXG5cdCAgICAweENDMEM3Nzk1LCAweEJCMEI0NzAzLCAweDIyMDIxNkI5LCAweDU1MDUyNjJGLFxuXHQgICAgMHhDNUJBM0JCRSwgMHhCMkJEMEIyOCwgMHgyQkI0NUE5MiwgMHg1Q0IzNkEwNCxcblx0ICAgIDB4QzJEN0ZGQTcsIDB4QjVEMENGMzEsIDB4MkNEOTlFOEIsIDB4NUJERUFFMUQsXG5cdCAgICAweDlCNjRDMkIwLCAweEVDNjNGMjI2LCAweDc1NkFBMzlDLCAweDAyNkQ5MzBBLFxuXHQgICAgMHg5QzA5MDZBOSwgMHhFQjBFMzYzRiwgMHg3MjA3Njc4NSwgMHgwNTAwNTcxMyxcblx0ICAgIDB4OTVCRjRBODIsIDB4RTJCODdBMTQsIDB4N0JCMTJCQUUsIDB4MENCNjFCMzgsXG5cdCAgICAweDkyRDI4RTlCLCAweEU1RDVCRTBELCAweDdDRENFRkI3LCAweDBCREJERjIxLFxuXHQgICAgMHg4NkQzRDJENCwgMHhGMUQ0RTI0MiwgMHg2OEREQjNGOCwgMHgxRkRBODM2RSxcblx0ICAgIDB4ODFCRTE2Q0QsIDB4RjZCOTI2NUIsIDB4NkZCMDc3RTEsIDB4MThCNzQ3NzcsXG5cdCAgICAweDg4MDg1QUU2LCAweEZGMEY2QTcwLCAweDY2MDYzQkNBLCAweDExMDEwQjVDLFxuXHQgICAgMHg4RjY1OUVGRiwgMHhGODYyQUU2OSwgMHg2MTZCRkZEMywgMHgxNjZDQ0Y0NSxcblx0ICAgIDB4QTAwQUUyNzgsIDB4RDcwREQyRUUsIDB4NEUwNDgzNTQsIDB4MzkwM0IzQzIsXG5cdCAgICAweEE3NjcyNjYxLCAweEQwNjAxNkY3LCAweDQ5Njk0NzRELCAweDNFNkU3N0RCLFxuXHQgICAgMHhBRUQxNkE0QSwgMHhEOUQ2NUFEQywgMHg0MERGMEI2NiwgMHgzN0Q4M0JGMCxcblx0ICAgIDB4QTlCQ0FFNTMsIDB4REVCQjlFQzUsIDB4NDdCMkNGN0YsIDB4MzBCNUZGRTksXG5cdCAgICAweEJEQkRGMjFDLCAweENBQkFDMjhBLCAweDUzQjM5MzMwLCAweDI0QjRBM0E2LFxuXHQgICAgMHhCQUQwMzYwNSwgMHhDREQ3MDY5MywgMHg1NERFNTcyOSwgMHgyM0Q5NjdCRixcblx0ICAgIDB4QjM2NjdBMkUsIDB4QzQ2MTRBQjgsIDB4NUQ2ODFCMDIsIDB4MkE2RjJCOTQsXG5cdCAgICAweEI0MEJCRTM3LCAweEMzMEM4RUExLCAweDVBMDVERjFCLCAweDJEMDJFRjhEXG5cdF07XG5cblx0LyoqXG5cdCAqXG5cdCAqICBKYXZhc2NyaXB0IGNyYzMyXG5cdCAqICBodHRwOi8vd3d3LndlYnRvb2xraXQuaW5mby9cblx0ICpcblx0ICovXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JjMzIoaW5wdXQsIGNyYykge1xuXHQgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhaW5wdXQubGVuZ3RoKSB7XG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICB9XG5cblx0ICAgIHZhciBpc0FycmF5ID0gdXRpbHMuZ2V0VHlwZU9mKGlucHV0KSAhPT0gXCJzdHJpbmdcIjtcblxuXHQgICAgaWYgKHR5cGVvZihjcmMpID09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgICAgICBjcmMgPSAwO1xuXHQgICAgfVxuXHQgICAgdmFyIHggPSAwO1xuXHQgICAgdmFyIHkgPSAwO1xuXHQgICAgdmFyIGIgPSAwO1xuXG5cdCAgICBjcmMgPSBjcmMgXiAoLTEpO1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGlUb3AgPSBpbnB1dC5sZW5ndGg7IGkgPCBpVG9wOyBpKyspIHtcblx0ICAgICAgICBiID0gaXNBcnJheSA/IGlucHV0W2ldIDogaW5wdXQuY2hhckNvZGVBdChpKTtcblx0ICAgICAgICB5ID0gKGNyYyBeIGIpICYgMHhGRjtcblx0ICAgICAgICB4ID0gdGFibGVbeV07XG5cdCAgICAgICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB4O1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY3JjIF4gKC0xKTtcblx0fTtcblx0Ly8gdmltOiBzZXQgc2hpZnR3aWR0aD00IHNvZnR0YWJzdG9wPTQ6XG5cblx0fSx7XCIuL3V0aWxzXCI6MjF9XSw1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzJyk7XG5cblx0ZnVuY3Rpb24gRGF0YVJlYWRlcihkYXRhKSB7XG5cdCAgICB0aGlzLmRhdGEgPSBudWxsOyAvLyB0eXBlIDogc2VlIGltcGxlbWVudGF0aW9uXG5cdCAgICB0aGlzLmxlbmd0aCA9IDA7XG5cdCAgICB0aGlzLmluZGV4ID0gMDtcblx0fVxuXHREYXRhUmVhZGVyLnByb3RvdHlwZSA9IHtcblx0ICAgIC8qKlxuXHQgICAgICogQ2hlY2sgdGhhdCB0aGUgb2Zmc2V0IHdpbGwgbm90IGdvIHRvbyBmYXIuXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2Zmc2V0IHRoZSBhZGRpdGlvbmFsIG9mZnNldCB0byBjaGVjay5cblx0ICAgICAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgb2Zmc2V0IGlzIG91dCBvZiBib3VuZHMuXG5cdCAgICAgKi9cblx0ICAgIGNoZWNrT2Zmc2V0OiBmdW5jdGlvbihvZmZzZXQpIHtcblx0ICAgICAgICB0aGlzLmNoZWNrSW5kZXgodGhpcy5pbmRleCArIG9mZnNldCk7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBDaGVjayB0aGF0IHRoZSBzcGVjaWZlZCBpbmRleCB3aWxsIG5vdCBiZSB0b28gZmFyLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0luZGV4IHRoZSBpbmRleCB0byBjaGVjay5cblx0ICAgICAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIGJvdW5kcy5cblx0ICAgICAqL1xuXHQgICAgY2hlY2tJbmRleDogZnVuY3Rpb24obmV3SW5kZXgpIHtcblx0ICAgICAgICBpZiAodGhpcy5sZW5ndGggPCBuZXdJbmRleCB8fCBuZXdJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW5kIG9mIGRhdGEgcmVhY2hlZCAoZGF0YSBsZW5ndGggPSBcIiArIHRoaXMubGVuZ3RoICsgXCIsIGFza2VkIGluZGV4ID0gXCIgKyAobmV3SW5kZXgpICsgXCIpLiBDb3JydXB0ZWQgemlwID9cIik7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogQ2hhbmdlIHRoZSBpbmRleC5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZXdJbmRleCBUaGUgbmV3IGluZGV4LlxuXHQgICAgICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBuZXcgaW5kZXggaXMgb3V0IG9mIHRoZSBkYXRhLlxuXHQgICAgICovXG5cdCAgICBzZXRJbmRleDogZnVuY3Rpb24obmV3SW5kZXgpIHtcblx0ICAgICAgICB0aGlzLmNoZWNrSW5kZXgobmV3SW5kZXgpO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSBuZXdJbmRleDtcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFNraXAgdGhlIG5leHQgbiBieXRlcy5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gc2tpcC5cblx0ICAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgbmV3IGluZGV4IGlzIG91dCBvZiB0aGUgZGF0YS5cblx0ICAgICAqL1xuXHQgICAgc2tpcDogZnVuY3Rpb24obikge1xuXHQgICAgICAgIHRoaXMuc2V0SW5kZXgodGhpcy5pbmRleCArIG4pO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogR2V0IHRoZSBieXRlIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gaSB0aGUgaW5kZXggdG8gdXNlLlxuXHQgICAgICogQHJldHVybiB7bnVtYmVyfSBhIGJ5dGUuXG5cdCAgICAgKi9cblx0ICAgIGJ5dGVBdDogZnVuY3Rpb24oaSkge1xuXHQgICAgICAgIC8vIHNlZSBpbXBsZW1lbnRhdGlvbnNcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIEdldCB0aGUgbmV4dCBudW1iZXIgd2l0aCBhIGdpdmVuIGJ5dGUgc2l6ZS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cblx0ICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGNvcnJlc3BvbmRpbmcgbnVtYmVyLlxuXHQgICAgICovXG5cdCAgICByZWFkSW50OiBmdW5jdGlvbihzaXplKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IDAsXG5cdCAgICAgICAgICAgIGk7XG5cdCAgICAgICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcblx0ICAgICAgICBmb3IgKGkgPSB0aGlzLmluZGV4ICsgc2l6ZSAtIDE7IGkgPj0gdGhpcy5pbmRleDsgaS0tKSB7XG5cdCAgICAgICAgICAgIHJlc3VsdCA9IChyZXN1bHQgPDwgOCkgKyB0aGlzLmJ5dGVBdChpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5pbmRleCArPSBzaXplO1xuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBHZXQgdGhlIG5leHQgc3RyaW5nIHdpdGggYSBnaXZlbiBieXRlIHNpemUuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQuXG5cdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBjb3JyZXNwb25kaW5nIHN0cmluZy5cblx0ICAgICAqL1xuXHQgICAgcmVhZFN0cmluZzogZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCB0aGlzLnJlYWREYXRhKHNpemUpKTtcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIEdldCByYXcgZGF0YSB3aXRob3V0IGNvbnZlcnNpb24sIDxzaXplPiBieXRlcy5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cblx0ICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIHJhdyBkYXRhLCBpbXBsZW1lbnRhdGlvbiBzcGVjaWZpYy5cblx0ICAgICAqL1xuXHQgICAgcmVhZERhdGE6IGZ1bmN0aW9uKHNpemUpIHtcblx0ICAgICAgICAvLyBzZWUgaW1wbGVtZW50YXRpb25zXG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBGaW5kIHRoZSBsYXN0IG9jY3VyZW5jZSBvZiBhIHppcCBzaWduYXR1cmUgKDQgYnl0ZXMpLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IHNpZyB0aGUgc2lnbmF0dXJlIHRvIGZpbmQuXG5cdCAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBvY2N1cmVuY2UsIC0xIGlmIG5vdCBmb3VuZC5cblx0ICAgICAqL1xuXHQgICAgbGFzdEluZGV4T2ZTaWduYXR1cmU6IGZ1bmN0aW9uKHNpZykge1xuXHQgICAgICAgIC8vIHNlZSBpbXBsZW1lbnRhdGlvbnNcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIEdldCB0aGUgbmV4dCBkYXRlLlxuXHQgICAgICogQHJldHVybiB7RGF0ZX0gdGhlIGRhdGUuXG5cdCAgICAgKi9cblx0ICAgIHJlYWREYXRlOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgZG9zdGltZSA9IHRoaXMucmVhZEludCg0KTtcblx0ICAgICAgICByZXR1cm4gbmV3IERhdGUoXG5cdCAgICAgICAgKChkb3N0aW1lID4+IDI1KSAmIDB4N2YpICsgMTk4MCwgLy8geWVhclxuXHQgICAgICAgICgoZG9zdGltZSA+PiAyMSkgJiAweDBmKSAtIDEsIC8vIG1vbnRoXG5cdCAgICAgICAgKGRvc3RpbWUgPj4gMTYpICYgMHgxZiwgLy8gZGF5XG5cdCAgICAgICAgKGRvc3RpbWUgPj4gMTEpICYgMHgxZiwgLy8gaG91clxuXHQgICAgICAgIChkb3N0aW1lID4+IDUpICYgMHgzZiwgLy8gbWludXRlXG5cdCAgICAgICAgKGRvc3RpbWUgJiAweDFmKSA8PCAxKTsgLy8gc2Vjb25kXG5cdCAgICB9XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gRGF0YVJlYWRlcjtcblxuXHR9LHtcIi4vdXRpbHNcIjoyMX1dLDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdGV4cG9ydHMuYmFzZTY0ID0gZmFsc2U7XG5cdGV4cG9ydHMuYmluYXJ5ID0gZmFsc2U7XG5cdGV4cG9ydHMuZGlyID0gZmFsc2U7XG5cdGV4cG9ydHMuY3JlYXRlRm9sZGVycyA9IGZhbHNlO1xuXHRleHBvcnRzLmRhdGUgPSBudWxsO1xuXHRleHBvcnRzLmNvbXByZXNzaW9uID0gbnVsbDtcblx0ZXhwb3J0cy5jb21tZW50ID0gbnVsbDtcblxuXHR9LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzJyk7XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gd2l0aG91dCByZXBsYWNlbWVudC5cblx0ICovXG5cdGV4cG9ydHMuc3RyaW5nMmJpbmFyeSA9IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgcmV0dXJuIHV0aWxzLnN0cmluZzJiaW5hcnkoc3RyKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWRcblx0ICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0ZXhwb3J0cy5zdHJpbmcyVWludDhBcnJheSA9IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgcmV0dXJuIHV0aWxzLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLCBzdHIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAqL1xuXHRleHBvcnRzLnVpbnQ4QXJyYXkyU3RyaW5nID0gZnVuY3Rpb24oYXJyYXkpIHtcblx0ICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBhcnJheSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gd2l0aG91dCByZXBsYWNlbWVudC5cblx0ICovXG5cdGV4cG9ydHMuc3RyaW5nMkJsb2IgPSBmdW5jdGlvbihzdHIpIHtcblx0ICAgIHZhciBidWZmZXIgPSB1dGlscy50cmFuc2Zvcm1UbyhcImFycmF5YnVmZmVyXCIsIHN0cik7XG5cdCAgICByZXR1cm4gdXRpbHMuYXJyYXlCdWZmZXIyQmxvYihidWZmZXIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAqL1xuXHRleHBvcnRzLmFycmF5QnVmZmVyMkJsb2IgPSBmdW5jdGlvbihidWZmZXIpIHtcblx0ICAgIHJldHVybiB1dGlscy5hcnJheUJ1ZmZlcjJCbG9iKGJ1ZmZlcik7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gd2l0aG91dCByZXBsYWNlbWVudC5cblx0ICovXG5cdGV4cG9ydHMudHJhbnNmb3JtVG8gPSBmdW5jdGlvbihvdXRwdXRUeXBlLCBpbnB1dCkge1xuXHQgICAgcmV0dXJuIHV0aWxzLnRyYW5zZm9ybVRvKG91dHB1dFR5cGUsIGlucHV0KTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWRcblx0ICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0ZXhwb3J0cy5nZXRUeXBlT2YgPSBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgcmV0dXJuIHV0aWxzLmdldFR5cGVPZihpbnB1dCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gd2l0aG91dCByZXBsYWNlbWVudC5cblx0ICovXG5cdGV4cG9ydHMuY2hlY2tTdXBwb3J0ID0gZnVuY3Rpb24odHlwZSkge1xuXHQgICAgcmV0dXJuIHV0aWxzLmNoZWNrU3VwcG9ydCh0eXBlKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWRcblx0ICogVGhpcyB2YWx1ZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0ZXhwb3J0cy5NQVhfVkFMVUVfMTZCSVRTID0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUztcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWRcblx0ICogVGhpcyB2YWx1ZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0ZXhwb3J0cy5NQVhfVkFMVUVfMzJCSVRTID0gdXRpbHMuTUFYX1ZBTFVFXzMyQklUUztcblxuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAqL1xuXHRleHBvcnRzLnByZXR0eSA9IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgcmV0dXJuIHV0aWxzLnByZXR0eShzdHIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAqL1xuXHRleHBvcnRzLmZpbmRDb21wcmVzc2lvbiA9IGZ1bmN0aW9uKGNvbXByZXNzaW9uTWV0aG9kKSB7XG5cdCAgICByZXR1cm4gdXRpbHMuZmluZENvbXByZXNzaW9uKGNvbXByZXNzaW9uTWV0aG9kKTtcblx0fTtcblxuXHQvKipcblx0ICogQGRlcHJlY2F0ZWRcblx0ICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0ZXhwb3J0cy5pc1JlZ0V4cCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcblx0ICAgIHJldHVybiB1dGlscy5pc1JlZ0V4cChvYmplY3QpO1xuXHR9O1xuXG5cblx0fSx7XCIuL3V0aWxzXCI6MjF9XSw4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgVVNFX1RZUEVEQVJSQVkgPSAodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnKSAmJiAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiYgKHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpO1xuXG5cdHZhciBwYWtvID0gX2RlcmVxXyhcInBha29cIik7XG5cdGV4cG9ydHMudW5jb21wcmVzc0lucHV0VHlwZSA9IFVTRV9UWVBFREFSUkFZID8gXCJ1aW50OGFycmF5XCIgOiBcImFycmF5XCI7XG5cdGV4cG9ydHMuY29tcHJlc3NJbnB1dFR5cGUgPSBVU0VfVFlQRURBUlJBWSA/IFwidWludDhhcnJheVwiIDogXCJhcnJheVwiO1xuXG5cdGV4cG9ydHMubWFnaWMgPSBcIlxceDA4XFx4MDBcIjtcblx0ZXhwb3J0cy5jb21wcmVzcyA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICByZXR1cm4gcGFrby5kZWZsYXRlUmF3KGlucHV0KTtcblx0fTtcblx0ZXhwb3J0cy51bmNvbXByZXNzID0gIGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICByZXR1cm4gcGFrby5pbmZsYXRlUmF3KGlucHV0KTtcblx0fTtcblxuXHR9LHtcInBha29cIjoyNH1dLDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGJhc2U2NCA9IF9kZXJlcV8oJy4vYmFzZTY0Jyk7XG5cblx0LyoqXG5cdFVzYWdlOlxuXHQgICB6aXAgPSBuZXcgSlNaaXAoKTtcblx0ICAgemlwLmZpbGUoXCJoZWxsby50eHRcIiwgXCJIZWxsbywgV29ybGQhXCIpLmZpbGUoXCJ0ZW1wZmlsZVwiLCBcIm5vdGhpbmdcIik7XG5cdCAgIHppcC5mb2xkZXIoXCJpbWFnZXNcIikuZmlsZShcInNtaWxlLmdpZlwiLCBiYXNlNjREYXRhLCB7YmFzZTY0OiB0cnVlfSk7XG5cdCAgIHppcC5maWxlKFwiWG1hcy50eHRcIiwgXCJIbyBobyBobyAhXCIsIHtkYXRlIDogbmV3IERhdGUoXCJEZWNlbWJlciAyNSwgMjAwNyAwMDowMDowMVwiKX0pO1xuXHQgICB6aXAucmVtb3ZlKFwidGVtcGZpbGVcIik7XG5cblx0ICAgYmFzZTY0emlwID0gemlwLmdlbmVyYXRlKCk7XG5cblx0KiovXG5cblx0LyoqXG5cdCAqIFJlcHJlc2VudGF0aW9uIGEgb2YgemlwIGZpbGUgaW4ganNcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7U3RyaW5nPXxBcnJheUJ1ZmZlcj18VWludDhBcnJheT19IGRhdGEgdGhlIGRhdGEgdG8gbG9hZCwgaWYgYW55IChvcHRpb25hbCkuXG5cdCAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhpcyBvYmplY3RzIChvcHRpb25hbCkuXG5cdCAqL1xuXHRmdW5jdGlvbiBKU1ppcChkYXRhLCBvcHRpb25zKSB7XG5cdCAgICAvLyBpZiB0aGlzIGNvbnN0cnVjdG9yIGlzwqB1c2VkIHdpdGhvdXTCoGBuZXdgLCBpdMKgYWRkcyBgbmV3YCBiZWZvcmXCoGl0c2VsZjpcblx0ICAgIGlmKCEodGhpcyBpbnN0YW5jZW9mIEpTWmlwKSkgcmV0dXJuIG5ldyBKU1ppcChkYXRhLCBvcHRpb25zKTtcblxuXHQgICAgLy8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZpbGVzIDpcblx0ICAgIC8vIHtcblx0ICAgIC8vICAgXCJmb2xkZXIvXCIgOiB7Li4ufSxcblx0ICAgIC8vICAgXCJmb2xkZXIvZGF0YS50eHRcIiA6IHsuLi59XG5cdCAgICAvLyB9XG5cdCAgICB0aGlzLmZpbGVzID0ge307XG5cblx0ICAgIHRoaXMuY29tbWVudCA9IG51bGw7XG5cblx0ICAgIC8vIFdoZXJlIHdlIGFyZSBpbiB0aGUgaGllcmFyY2h5XG5cdCAgICB0aGlzLnJvb3QgPSBcIlwiO1xuXHQgICAgaWYgKGRhdGEpIHtcblx0ICAgICAgICB0aGlzLmxvYWQoZGF0YSwgb3B0aW9ucyk7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIG5ld09iaiA9IG5ldyBKU1ppcCgpO1xuXHQgICAgICAgIGZvciAodmFyIGkgaW4gdGhpcykge1xuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbaV0gIT09IFwiZnVuY3Rpb25cIikge1xuXHQgICAgICAgICAgICAgICAgbmV3T2JqW2ldID0gdGhpc1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbmV3T2JqO1xuXHQgICAgfTtcblx0fVxuXHRKU1ppcC5wcm90b3R5cGUgPSBfZGVyZXFfKCcuL29iamVjdCcpO1xuXHRKU1ppcC5wcm90b3R5cGUubG9hZCA9IF9kZXJlcV8oJy4vbG9hZCcpO1xuXHRKU1ppcC5zdXBwb3J0ID0gX2RlcmVxXygnLi9zdXBwb3J0Jyk7XG5cdEpTWmlwLmRlZmF1bHRzID0gX2RlcmVxXygnLi9kZWZhdWx0cycpO1xuXG5cdC8qKlxuXHQgKiBAZGVwcmVjYXRlZFxuXHQgKiBUaGlzIG5hbWVzcGFjZSB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbiB3aXRob3V0IHJlcGxhY2VtZW50LlxuXHQgKi9cblx0SlNaaXAudXRpbHMgPSBfZGVyZXFfKCcuL2RlcHJlY2F0ZWRQdWJsaWNVdGlscycpO1xuXG5cdEpTWmlwLmJhc2U2NCA9IHtcblx0ICAgIC8qKlxuXHQgICAgICogQGRlcHJlY2F0ZWRcblx0ICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAgICAgKi9cblx0ICAgIGVuY29kZSA6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIGJhc2U2NC5lbmNvZGUoaW5wdXQpO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogQGRlcHJlY2F0ZWRcblx0ICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAgICAgKi9cblx0ICAgIGRlY29kZSA6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGUoaW5wdXQpO1xuXHQgICAgfVxuXHR9O1xuXHRKU1ppcC5jb21wcmVzc2lvbnMgPSBfZGVyZXFfKCcuL2NvbXByZXNzaW9ucycpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IEpTWmlwO1xuXG5cdH0se1wiLi9iYXNlNjRcIjoxLFwiLi9jb21wcmVzc2lvbnNcIjozLFwiLi9kZWZhdWx0c1wiOjYsXCIuL2RlcHJlY2F0ZWRQdWJsaWNVdGlsc1wiOjcsXCIuL2xvYWRcIjoxMCxcIi4vb2JqZWN0XCI6MTMsXCIuL3N1cHBvcnRcIjoxN31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgYmFzZTY0ID0gX2RlcmVxXygnLi9iYXNlNjQnKTtcblx0dmFyIFppcEVudHJpZXMgPSBfZGVyZXFfKCcuL3ppcEVudHJpZXMnKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkYXRhLCBvcHRpb25zKSB7XG5cdCAgICB2YXIgZmlsZXMsIHppcEVudHJpZXMsIGksIGlucHV0O1xuXHQgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgICBpZiAob3B0aW9ucy5iYXNlNjQpIHtcblx0ICAgICAgICBkYXRhID0gYmFzZTY0LmRlY29kZShkYXRhKTtcblx0ICAgIH1cblxuXHQgICAgemlwRW50cmllcyA9IG5ldyBaaXBFbnRyaWVzKGRhdGEsIG9wdGlvbnMpO1xuXHQgICAgZmlsZXMgPSB6aXBFbnRyaWVzLmZpbGVzO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgaW5wdXQgPSBmaWxlc1tpXTtcblx0ICAgICAgICB0aGlzLmZpbGUoaW5wdXQuZmlsZU5hbWUsIGlucHV0LmRlY29tcHJlc3NlZCwge1xuXHQgICAgICAgICAgICBiaW5hcnk6IHRydWUsXG5cdCAgICAgICAgICAgIG9wdGltaXplZEJpbmFyeVN0cmluZzogdHJ1ZSxcblx0ICAgICAgICAgICAgZGF0ZTogaW5wdXQuZGF0ZSxcblx0ICAgICAgICAgICAgZGlyOiBpbnB1dC5kaXIsXG5cdCAgICAgICAgICAgIGNvbW1lbnQgOiBpbnB1dC5maWxlQ29tbWVudC5sZW5ndGggPyBpbnB1dC5maWxlQ29tbWVudCA6IG51bGwsXG5cdCAgICAgICAgICAgIGNyZWF0ZUZvbGRlcnM6IG9wdGlvbnMuY3JlYXRlRm9sZGVyc1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgaWYgKHppcEVudHJpZXMuemlwQ29tbWVudC5sZW5ndGgpIHtcblx0ICAgICAgICB0aGlzLmNvbW1lbnQgPSB6aXBFbnRyaWVzLnppcENvbW1lbnQ7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdH0se1wiLi9iYXNlNjRcIjoxLFwiLi96aXBFbnRyaWVzXCI6MjJ9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdChmdW5jdGlvbiAoQnVmZmVyKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRhdGEsIGVuY29kaW5nKXtcblx0ICAgIHJldHVybiBuZXcgQnVmZmVyKGRhdGEsIGVuY29kaW5nKTtcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMudGVzdCA9IGZ1bmN0aW9uKGIpe1xuXHQgICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihiKTtcblx0fTtcblx0fSkuY2FsbCh0aGlzLCh0eXBlb2YgQnVmZmVyICE9PSBcInVuZGVmaW5lZFwiID8gQnVmZmVyIDogdW5kZWZpbmVkKSlcblx0fSx7fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBVaW50OEFycmF5UmVhZGVyID0gX2RlcmVxXygnLi91aW50OEFycmF5UmVhZGVyJyk7XG5cblx0ZnVuY3Rpb24gTm9kZUJ1ZmZlclJlYWRlcihkYXRhKSB7XG5cdCAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXHQgICAgdGhpcy5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuXHQgICAgdGhpcy5pbmRleCA9IDA7XG5cdH1cblx0Tm9kZUJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBuZXcgVWludDhBcnJheVJlYWRlcigpO1xuXG5cdC8qKlxuXHQgKiBAc2VlIERhdGFSZWFkZXIucmVhZERhdGFcblx0ICovXG5cdE5vZGVCdWZmZXJSZWFkZXIucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcblx0ICAgIHZhciByZXN1bHQgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy5pbmRleCwgdGhpcy5pbmRleCArIHNpemUpO1xuXHQgICAgdGhpcy5pbmRleCArPSBzaXplO1xuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBOb2RlQnVmZmVyUmVhZGVyO1xuXG5cdH0se1wiLi91aW50OEFycmF5UmVhZGVyXCI6MTh9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHN1cHBvcnQgPSBfZGVyZXFfKCcuL3N1cHBvcnQnKTtcblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi91dGlscycpO1xuXHR2YXIgY3JjMzIgPSBfZGVyZXFfKCcuL2NyYzMyJyk7XG5cdHZhciBzaWduYXR1cmUgPSBfZGVyZXFfKCcuL3NpZ25hdHVyZScpO1xuXHR2YXIgZGVmYXVsdHMgPSBfZGVyZXFfKCcuL2RlZmF1bHRzJyk7XG5cdHZhciBiYXNlNjQgPSBfZGVyZXFfKCcuL2Jhc2U2NCcpO1xuXHR2YXIgY29tcHJlc3Npb25zID0gX2RlcmVxXygnLi9jb21wcmVzc2lvbnMnKTtcblx0dmFyIENvbXByZXNzZWRPYmplY3QgPSBfZGVyZXFfKCcuL2NvbXByZXNzZWRPYmplY3QnKTtcblx0dmFyIG5vZGVCdWZmZXIgPSBfZGVyZXFfKCcuL25vZGVCdWZmZXInKTtcblx0dmFyIHV0ZjggPSBfZGVyZXFfKCcuL3V0ZjgnKTtcblx0dmFyIFN0cmluZ1dyaXRlciA9IF9kZXJlcV8oJy4vc3RyaW5nV3JpdGVyJyk7XG5cdHZhciBVaW50OEFycmF5V3JpdGVyID0gX2RlcmVxXygnLi91aW50OEFycmF5V3JpdGVyJyk7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHJhdyBkYXRhIG9mIGEgWmlwT2JqZWN0LCBkZWNvbXByZXNzIHRoZSBjb250ZW50IGlmIG5lY2Vzc2FyeS5cblx0ICogQHBhcmFtIHtaaXBPYmplY3R9IGZpbGUgdGhlIGZpbGUgdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IHRoZSBkYXRhLlxuXHQgKi9cblx0dmFyIGdldFJhd0RhdGEgPSBmdW5jdGlvbihmaWxlKSB7XG5cdCAgICBpZiAoZmlsZS5fZGF0YSBpbnN0YW5jZW9mIENvbXByZXNzZWRPYmplY3QpIHtcblx0ICAgICAgICBmaWxlLl9kYXRhID0gZmlsZS5fZGF0YS5nZXRDb250ZW50KCk7XG5cdCAgICAgICAgZmlsZS5vcHRpb25zLmJpbmFyeSA9IHRydWU7XG5cdCAgICAgICAgZmlsZS5vcHRpb25zLmJhc2U2NCA9IGZhbHNlO1xuXG5cdCAgICAgICAgaWYgKHV0aWxzLmdldFR5cGVPZihmaWxlLl9kYXRhKSA9PT0gXCJ1aW50OGFycmF5XCIpIHtcblx0ICAgICAgICAgICAgdmFyIGNvcHkgPSBmaWxlLl9kYXRhO1xuXHQgICAgICAgICAgICAvLyB3aGVuIHJlYWRpbmcgYW4gYXJyYXlidWZmZXIsIHRoZSBDb21wcmVzc2VkT2JqZWN0IG1lY2hhbmlzbSB3aWxsIGtlZXAgaXQgYW5kIHN1YmFycmF5KCkgYSBVaW50OEFycmF5LlxuXHQgICAgICAgICAgICAvLyBpZiB3ZSByZXF1ZXN0IGEgZmlsZSBpbiB0aGUgc2FtZSBmb3JtYXQsIHdlIG1pZ2h0IGdldCB0aGUgc2FtZSBVaW50OEFycmF5IG9yIGl0cyBBcnJheUJ1ZmZlciAodGhlIG9yaWdpbmFsIHppcCBmaWxlKS5cblx0ICAgICAgICAgICAgZmlsZS5fZGF0YSA9IG5ldyBVaW50OEFycmF5KGNvcHkubGVuZ3RoKTtcblx0ICAgICAgICAgICAgLy8gd2l0aCBhbiBlbXB0eSBVaW50OEFycmF5LCBPcGVyYSBmYWlscyB3aXRoIGEgXCJPZmZzZXQgbGFyZ2VyIHRoYW4gYXJyYXkgc2l6ZVwiXG5cdCAgICAgICAgICAgIGlmIChjb3B5Lmxlbmd0aCAhPT0gMCkge1xuXHQgICAgICAgICAgICAgICAgZmlsZS5fZGF0YS5zZXQoY29weSwgMCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gZmlsZS5fZGF0YTtcblx0fTtcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGF0YSBvZiBhIFppcE9iamVjdCBpbiBhIGJpbmFyeSBmb3JtLiBJZiB0aGUgY29udGVudCBpcyBhbiB1bmljb2RlIHN0cmluZywgZW5jb2RlIGl0LlxuXHQgKiBAcGFyYW0ge1ppcE9iamVjdH0gZmlsZSB0aGUgZmlsZSB0byB1c2UuXG5cdCAqIEByZXR1cm4ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIGRhdGEuXG5cdCAqL1xuXHR2YXIgZ2V0QmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGZpbGUpIHtcblx0ICAgIHZhciByZXN1bHQgPSBnZXRSYXdEYXRhKGZpbGUpLFxuXHQgICAgICAgIHR5cGUgPSB1dGlscy5nZXRUeXBlT2YocmVzdWx0KTtcblx0ICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG5cdCAgICAgICAgaWYgKCFmaWxlLm9wdGlvbnMuYmluYXJ5KSB7XG5cdCAgICAgICAgICAgIC8vIHVuaWNvZGUgdGV4dCAhXG5cdCAgICAgICAgICAgIC8vIHVuaWNvZGUgc3RyaW5nID0+IGJpbmFyeSBzdHJpbmcgaXMgYSBwYWluZnVsIHByb2Nlc3MsIGNoZWNrIGlmIHdlIGNhbiBhdm9pZCBpdC5cblx0ICAgICAgICAgICAgaWYgKHN1cHBvcnQubm9kZWJ1ZmZlcikge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVCdWZmZXIocmVzdWx0LCBcInV0Zi04XCIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBmaWxlLmFzQmluYXJ5KCk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm0gdGhpcy5fZGF0YSBpbnRvIGEgc3RyaW5nLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmaWx0ZXIgYSBmdW5jdGlvbiBTdHJpbmcgLT4gU3RyaW5nLCBhcHBsaWVkIGlmIG5vdCBudWxsIG9uIHRoZSByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHN0cmluZyByZXByZXNlbnRpbmcgdGhpcy5fZGF0YS5cblx0ICovXG5cdHZhciBkYXRhVG9TdHJpbmcgPSBmdW5jdGlvbihhc1VURjgpIHtcblx0ICAgIHZhciByZXN1bHQgPSBnZXRSYXdEYXRhKHRoaXMpO1xuXHQgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgICAgcmV0dXJuIFwiXCI7XG5cdCAgICB9XG5cdCAgICAvLyBpZiB0aGUgZGF0YSBpcyBhIGJhc2U2NCBzdHJpbmcsIHdlIGRlY29kZSBpdCBiZWZvcmUgY2hlY2tpbmcgdGhlIGVuY29kaW5nICFcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMuYmFzZTY0KSB7XG5cdCAgICAgICAgcmVzdWx0ID0gYmFzZTY0LmRlY29kZShyZXN1bHQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGFzVVRGOCAmJiB0aGlzLm9wdGlvbnMuYmluYXJ5KSB7XG5cdCAgICAgICAgLy8gSlNaaXAucHJvdG90eXBlLnV0ZjhkZWNvZGUgc3VwcG9ydHMgYXJyYXlzIGFzIGlucHV0XG5cdCAgICAgICAgLy8gc2tpcCB0byBhcnJheSA9PiBzdHJpbmcgc3RlcCwgdXRmOGRlY29kZSB3aWxsIGRvIGl0LlxuXHQgICAgICAgIHJlc3VsdCA9IG91dC51dGY4ZGVjb2RlKHJlc3VsdCk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICAvLyBubyB1dGY4IHRyYW5zZm9ybWF0aW9uLCBkbyB0aGUgYXJyYXkgPT4gc3RyaW5nIHN0ZXAuXG5cdCAgICAgICAgcmVzdWx0ID0gdXRpbHMudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgcmVzdWx0KTtcblx0ICAgIH1cblxuXHQgICAgaWYgKCFhc1VURjggJiYgIXRoaXMub3B0aW9ucy5iaW5hcnkpIHtcblx0ICAgICAgICByZXN1bHQgPSB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBvdXQudXRmOGVuY29kZShyZXN1bHQpKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cdC8qKlxuXHQgKiBBIHNpbXBsZSBvYmplY3QgcmVwcmVzZW50aW5nIGEgZmlsZSBpbiB0aGUgemlwIGZpbGUuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgZmlsZVxuXHQgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gZGF0YSB0aGUgZGF0YVxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyBvZiB0aGUgZmlsZVxuXHQgKi9cblx0dmFyIFppcE9iamVjdCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG9wdGlvbnMpIHtcblx0ICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cdCAgICB0aGlzLmRpciA9IG9wdGlvbnMuZGlyO1xuXHQgICAgdGhpcy5kYXRlID0gb3B0aW9ucy5kYXRlO1xuXHQgICAgdGhpcy5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuXG5cdCAgICB0aGlzLl9kYXRhID0gZGF0YTtcblx0ICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0ICAgIC8qXG5cdCAgICAgKiBUaGlzIG9iamVjdCBjb250YWlucyBpbml0aWFsIHZhbHVlcyBmb3IgZGlyIGFuZCBkYXRlLlxuXHQgICAgICogV2l0aCB0aGVtLCB3ZSBjYW4gY2hlY2sgaWYgdGhlIHVzZXIgY2hhbmdlZCB0aGUgZGVwcmVjYXRlZCBtZXRhZGF0YSBpblxuXHQgICAgICogYFppcE9iamVjdCNvcHRpb25zYCBvciBub3QuXG5cdCAgICAgKi9cblx0ICAgIHRoaXMuX2luaXRpYWxNZXRhZGF0YSA9IHtcblx0ICAgICAgZGlyIDogb3B0aW9ucy5kaXIsXG5cdCAgICAgIGRhdGUgOiBvcHRpb25zLmRhdGVcblx0ICAgIH07XG5cdH07XG5cblx0WmlwT2JqZWN0LnByb3RvdHlwZSA9IHtcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJuIHRoZSBjb250ZW50IGFzIFVURjggc3RyaW5nLlxuXHQgICAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgVVRGOCBzdHJpbmcuXG5cdCAgICAgKi9cblx0ICAgIGFzVGV4dDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIGRhdGFUb1N0cmluZy5jYWxsKHRoaXMsIHRydWUpO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgYmluYXJ5IGNvbnRlbnQuXG5cdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBjb250ZW50IGFzIGJpbmFyeS5cblx0ICAgICAqL1xuXHQgICAgYXNCaW5hcnk6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiBkYXRhVG9TdHJpbmcuY2FsbCh0aGlzLCBmYWxzZSk7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIHRoZSBjb250ZW50IGFzIGEgbm9kZWpzIEJ1ZmZlci5cblx0ICAgICAqIEByZXR1cm4ge0J1ZmZlcn0gdGhlIGNvbnRlbnQgYXMgYSBCdWZmZXIuXG5cdCAgICAgKi9cblx0ICAgIGFzTm9kZUJ1ZmZlcjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IGdldEJpbmFyeURhdGEodGhpcyk7XG5cdCAgICAgICAgcmV0dXJuIHV0aWxzLnRyYW5zZm9ybVRvKFwibm9kZWJ1ZmZlclwiLCByZXN1bHQpO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgY29udGVudCBhcyBhbiBVaW50OEFycmF5LlxuXHQgICAgICogQHJldHVybiB7VWludDhBcnJheX0gdGhlIGNvbnRlbnQgYXMgYW4gVWludDhBcnJheS5cblx0ICAgICAqL1xuXHQgICAgYXNVaW50OEFycmF5OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0QmluYXJ5RGF0YSh0aGlzKTtcblx0ICAgICAgICByZXR1cm4gdXRpbHMudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsIHJlc3VsdCk7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZXR1cm5zIHRoZSBjb250ZW50IGFzIGFuIEFycmF5QnVmZmVyLlxuXHQgICAgICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IHRoZSBjb250ZW50IGFzIGFuIEFycmF5QnVmZXIuXG5cdCAgICAgKi9cblx0ICAgIGFzQXJyYXlCdWZmZXI6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmFzVWludDhBcnJheSgpLmJ1ZmZlcjtcblx0ICAgIH1cblx0fTtcblxuXHQvKipcblx0ICogVHJhbnNmb3JtIGFuIGludGVnZXIgaW50byBhIHN0cmluZyBpbiBoZXhhZGVjaW1hbC5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRlYyB0aGUgbnVtYmVyIHRvIGNvbnZlcnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBieXRlcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgcmVzdWx0LlxuXHQgKi9cblx0dmFyIGRlY1RvSGV4ID0gZnVuY3Rpb24oZGVjLCBieXRlcykge1xuXHQgICAgdmFyIGhleCA9IFwiXCIsXG5cdCAgICAgICAgaTtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG5cdCAgICAgICAgaGV4ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjICYgMHhmZik7XG5cdCAgICAgICAgZGVjID0gZGVjID4+PiA4O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIGhleDtcblx0fTtcblxuXHQvKipcblx0ICogTWVyZ2UgdGhlIG9iamVjdHMgcGFzc2VkIGFzIHBhcmFtZXRlcnMgaW50byBhIG5ldyBvbmUuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7Li4uT2JqZWN0fSB2YXJfYXJncyBBbGwgb2JqZWN0cyB0byBtZXJnZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgZGF0YSBvZiB0aGUgb3RoZXJzLlxuXHQgKi9cblx0dmFyIGV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHJlc3VsdCA9IHt9LCBpLCBhdHRyO1xuXHQgICAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyAvLyBhcmd1bWVudHMgaXMgbm90IGVudW1lcmFibGUgaW4gc29tZSBicm93c2Vyc1xuXHQgICAgICAgIGZvciAoYXR0ciBpbiBhcmd1bWVudHNbaV0pIHtcblx0ICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXS5oYXNPd25Qcm9wZXJ0eShhdHRyKSAmJiB0eXBlb2YgcmVzdWx0W2F0dHJdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgICAgICAgICAgICByZXN1bHRbYXR0cl0gPSBhcmd1bWVudHNbaV1bYXR0cl07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSAoaW5jb21wbGV0ZSkgb3B0aW9ucyBmcm9tIHRoZSB1c2VyIGludG8gdGhlIGNvbXBsZXRlXG5cdCAqIHNldCBvZiBvcHRpb25zIHRvIGNyZWF0ZSBhIGZpbGUuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvIHRoZSBvcHRpb25zIGZyb20gdGhlIHVzZXIuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gdGhlIGNvbXBsZXRlIHNldCBvZiBvcHRpb25zLlxuXHQgKi9cblx0dmFyIHByZXBhcmVGaWxlQXR0cnMgPSBmdW5jdGlvbihvKSB7XG5cdCAgICBvID0gbyB8fCB7fTtcblx0ICAgIGlmIChvLmJhc2U2NCA9PT0gdHJ1ZSAmJiAoby5iaW5hcnkgPT09IG51bGwgfHwgby5iaW5hcnkgPT09IHVuZGVmaW5lZCkpIHtcblx0ICAgICAgICBvLmJpbmFyeSA9IHRydWU7XG5cdCAgICB9XG5cdCAgICBvID0gZXh0ZW5kKG8sIGRlZmF1bHRzKTtcblx0ICAgIG8uZGF0ZSA9IG8uZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuXHQgICAgaWYgKG8uY29tcHJlc3Npb24gIT09IG51bGwpIG8uY29tcHJlc3Npb24gPSBvLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCk7XG5cblx0ICAgIHJldHVybiBvO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBZGQgYSBmaWxlIGluIHRoZSBjdXJyZW50IGZvbGRlci5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIG5hbWUgb2YgdGhlIGZpbGVcblx0ICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGRhdGEgb2YgdGhlIGZpbGVcblx0ICogQHBhcmFtIHtPYmplY3R9IG8gdGhlIG9wdGlvbnMgb2YgdGhlIGZpbGVcblx0ICogQHJldHVybiB7T2JqZWN0fSB0aGUgbmV3IGZpbGUuXG5cdCAqL1xuXHR2YXIgZmlsZUFkZCA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG8pIHtcblx0ICAgIC8vIGJlIHN1cmUgc3ViIGZvbGRlcnMgZXhpc3Rcblx0ICAgIHZhciBkYXRhVHlwZSA9IHV0aWxzLmdldFR5cGVPZihkYXRhKSxcblx0ICAgICAgICBwYXJlbnQ7XG5cblx0ICAgIG8gPSBwcmVwYXJlRmlsZUF0dHJzKG8pO1xuXG5cdCAgICBpZiAoby5jcmVhdGVGb2xkZXJzICYmIChwYXJlbnQgPSBwYXJlbnRGb2xkZXIobmFtZSkpKSB7XG5cdCAgICAgICAgZm9sZGVyQWRkLmNhbGwodGhpcywgcGFyZW50LCB0cnVlKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKG8uZGlyIHx8IGRhdGEgPT09IG51bGwgfHwgdHlwZW9mIGRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgICAgICBvLmJhc2U2NCA9IGZhbHNlO1xuXHQgICAgICAgIG8uYmluYXJ5ID0gZmFsc2U7XG5cdCAgICAgICAgZGF0YSA9IG51bGw7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmIChkYXRhVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIGlmIChvLmJpbmFyeSAmJiAhby5iYXNlNjQpIHtcblx0ICAgICAgICAgICAgLy8gb3B0aW1pemVkQmluYXJ5U3RyaW5nID09IHRydWUgbWVhbnMgdGhhdCB0aGUgZmlsZSBoYXMgYWxyZWFkeSBiZWVuIGZpbHRlcmVkIHdpdGggYSAweEZGIG1hc2tcblx0ICAgICAgICAgICAgaWYgKG8ub3B0aW1pemVkQmluYXJ5U3RyaW5nICE9PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGEgc3RyaW5nLCBub3QgaW4gYSBiYXNlNjQgZm9ybWF0LlxuXHQgICAgICAgICAgICAgICAgLy8gQmUgc3VyZSB0aGF0IHRoaXMgaXMgYSBjb3JyZWN0IFwiYmluYXJ5IHN0cmluZ1wiXG5cdCAgICAgICAgICAgICAgICBkYXRhID0gdXRpbHMuc3RyaW5nMmJpbmFyeShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIGVsc2UgeyAvLyBhcnJheWJ1ZmZlciwgdWludDhhcnJheSwgLi4uXG5cdCAgICAgICAgby5iYXNlNjQgPSBmYWxzZTtcblx0ICAgICAgICBvLmJpbmFyeSA9IHRydWU7XG5cblx0ICAgICAgICBpZiAoIWRhdGFUeXBlICYmICEoZGF0YSBpbnN0YW5jZW9mIENvbXByZXNzZWRPYmplY3QpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkYXRhIG9mICdcIiArIG5hbWUgKyBcIicgaXMgaW4gYW4gdW5zdXBwb3J0ZWQgZm9ybWF0ICFcIik7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gc3BlY2lhbCBjYXNlIDogaXQncyB3YXkgZWFzaWVyIHRvIHdvcmsgd2l0aCBVaW50OEFycmF5IHRoYW4gd2l0aCBBcnJheUJ1ZmZlclxuXHQgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gXCJhcnJheWJ1ZmZlclwiKSB7XG5cdCAgICAgICAgICAgIGRhdGEgPSB1dGlscy50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIiwgZGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICB2YXIgb2JqZWN0ID0gbmV3IFppcE9iamVjdChuYW1lLCBkYXRhLCBvKTtcblx0ICAgIHRoaXMuZmlsZXNbbmFtZV0gPSBvYmplY3Q7XG5cdCAgICByZXR1cm4gb2JqZWN0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBGaW5kIHRoZSBwYXJlbnQgZm9sZGVyIG9mIHRoZSBwYXRoLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCB0aGUgcGF0aCB0byB1c2Vcblx0ICogQHJldHVybiB7c3RyaW5nfSB0aGUgcGFyZW50IGZvbGRlciwgb3IgXCJcIlxuXHQgKi9cblx0dmFyIHBhcmVudEZvbGRlciA9IGZ1bmN0aW9uIChwYXRoKSB7XG5cdCAgICBpZiAocGF0aC5zbGljZSgtMSkgPT0gJy8nKSB7XG5cdCAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKDAsIHBhdGgubGVuZ3RoIC0gMSk7XG5cdCAgICB9XG5cdCAgICB2YXIgbGFzdFNsYXNoID0gcGF0aC5sYXN0SW5kZXhPZignLycpO1xuXHQgICAgcmV0dXJuIChsYXN0U2xhc2ggPiAwKSA/IHBhdGguc3Vic3RyaW5nKDAsIGxhc3RTbGFzaCkgOiBcIlwiO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBZGQgYSAoc3ViKSBmb2xkZXIgaW4gdGhlIGN1cnJlbnQgZm9sZGVyLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgZm9sZGVyJ3MgbmFtZVxuXHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBbY3JlYXRlRm9sZGVyc10gSWYgdHJ1ZSwgYXV0b21hdGljYWxseSBjcmVhdGUgc3ViXG5cdCAqICBmb2xkZXJzLiBEZWZhdWx0cyB0byBmYWxzZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSB0aGUgbmV3IGZvbGRlci5cblx0ICovXG5cdHZhciBmb2xkZXJBZGQgPSBmdW5jdGlvbihuYW1lLCBjcmVhdGVGb2xkZXJzKSB7XG5cdCAgICAvLyBDaGVjayB0aGUgbmFtZSBlbmRzIHdpdGggYSAvXG5cdCAgICBpZiAobmFtZS5zbGljZSgtMSkgIT0gXCIvXCIpIHtcblx0ICAgICAgICBuYW1lICs9IFwiL1wiOyAvLyBJRSBkb2Vzbid0IGxpa2Ugc3Vic3RyKC0xKVxuXHQgICAgfVxuXG5cdCAgICBjcmVhdGVGb2xkZXJzID0gKHR5cGVvZiBjcmVhdGVGb2xkZXJzICE9PSAndW5kZWZpbmVkJykgPyBjcmVhdGVGb2xkZXJzIDogZmFsc2U7XG5cblx0ICAgIC8vIERvZXMgdGhpcyBmb2xkZXIgYWxyZWFkeSBleGlzdD9cblx0ICAgIGlmICghdGhpcy5maWxlc1tuYW1lXSkge1xuXHQgICAgICAgIGZpbGVBZGQuY2FsbCh0aGlzLCBuYW1lLCBudWxsLCB7XG5cdCAgICAgICAgICAgIGRpcjogdHJ1ZSxcblx0ICAgICAgICAgICAgY3JlYXRlRm9sZGVyczogY3JlYXRlRm9sZGVyc1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRoaXMuZmlsZXNbbmFtZV07XG5cdH07XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlIGEgSlNaaXAuQ29tcHJlc3NlZE9iamVjdCBmb3IgYSBnaXZlbiB6aXBPamVjdC5cblx0ICogQHBhcmFtIHtaaXBPYmplY3R9IGZpbGUgdGhlIG9iamVjdCB0byByZWFkLlxuXHQgKiBAcGFyYW0ge0pTWmlwLmNvbXByZXNzaW9ufSBjb21wcmVzc2lvbiB0aGUgY29tcHJlc3Npb24gdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtKU1ppcC5Db21wcmVzc2VkT2JqZWN0fSB0aGUgY29tcHJlc3NlZCByZXN1bHQuXG5cdCAqL1xuXHR2YXIgZ2VuZXJhdGVDb21wcmVzc2VkT2JqZWN0RnJvbSA9IGZ1bmN0aW9uKGZpbGUsIGNvbXByZXNzaW9uKSB7XG5cdCAgICB2YXIgcmVzdWx0ID0gbmV3IENvbXByZXNzZWRPYmplY3QoKSxcblx0ICAgICAgICBjb250ZW50O1xuXG5cdCAgICAvLyB0aGUgZGF0YSBoYXMgbm90IGJlZW4gZGVjb21wcmVzc2VkLCB3ZSBtaWdodCByZXVzZSB0aGluZ3MgIVxuXHQgICAgaWYgKGZpbGUuX2RhdGEgaW5zdGFuY2VvZiBDb21wcmVzc2VkT2JqZWN0KSB7XG5cdCAgICAgICAgcmVzdWx0LnVuY29tcHJlc3NlZFNpemUgPSBmaWxlLl9kYXRhLnVuY29tcHJlc3NlZFNpemU7XG5cdCAgICAgICAgcmVzdWx0LmNyYzMyID0gZmlsZS5fZGF0YS5jcmMzMjtcblxuXHQgICAgICAgIGlmIChyZXN1bHQudW5jb21wcmVzc2VkU2l6ZSA9PT0gMCB8fCBmaWxlLmRpcikge1xuXHQgICAgICAgICAgICBjb21wcmVzc2lvbiA9IGNvbXByZXNzaW9uc1snU1RPUkUnXTtcblx0ICAgICAgICAgICAgcmVzdWx0LmNvbXByZXNzZWRDb250ZW50ID0gXCJcIjtcblx0ICAgICAgICAgICAgcmVzdWx0LmNyYzMyID0gMDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoZmlsZS5fZGF0YS5jb21wcmVzc2lvbk1ldGhvZCA9PT0gY29tcHJlc3Npb24ubWFnaWMpIHtcblx0ICAgICAgICAgICAgcmVzdWx0LmNvbXByZXNzZWRDb250ZW50ID0gZmlsZS5fZGF0YS5nZXRDb21wcmVzc2VkQ29udGVudCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29udGVudCA9IGZpbGUuX2RhdGEuZ2V0Q29udGVudCgpO1xuXHQgICAgICAgICAgICAvLyBuZWVkIHRvIGRlY29tcHJlc3MgLyByZWNvbXByZXNzXG5cdCAgICAgICAgICAgIHJlc3VsdC5jb21wcmVzc2VkQ29udGVudCA9IGNvbXByZXNzaW9uLmNvbXByZXNzKHV0aWxzLnRyYW5zZm9ybVRvKGNvbXByZXNzaW9uLmNvbXByZXNzSW5wdXRUeXBlLCBjb250ZW50KSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgLy8gaGF2ZSB1bmNvbXByZXNzZWQgZGF0YVxuXHQgICAgICAgIGNvbnRlbnQgPSBnZXRCaW5hcnlEYXRhKGZpbGUpO1xuXHQgICAgICAgIGlmICghY29udGVudCB8fCBjb250ZW50Lmxlbmd0aCA9PT0gMCB8fCBmaWxlLmRpcikge1xuXHQgICAgICAgICAgICBjb21wcmVzc2lvbiA9IGNvbXByZXNzaW9uc1snU1RPUkUnXTtcblx0ICAgICAgICAgICAgY29udGVudCA9IFwiXCI7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJlc3VsdC51bmNvbXByZXNzZWRTaXplID0gY29udGVudC5sZW5ndGg7XG5cdCAgICAgICAgcmVzdWx0LmNyYzMyID0gY3JjMzIoY29udGVudCk7XG5cdCAgICAgICAgcmVzdWx0LmNvbXByZXNzZWRDb250ZW50ID0gY29tcHJlc3Npb24uY29tcHJlc3ModXRpbHMudHJhbnNmb3JtVG8oY29tcHJlc3Npb24uY29tcHJlc3NJbnB1dFR5cGUsIGNvbnRlbnQpKTtcblx0ICAgIH1cblxuXHQgICAgcmVzdWx0LmNvbXByZXNzZWRTaXplID0gcmVzdWx0LmNvbXByZXNzZWRDb250ZW50Lmxlbmd0aDtcblx0ICAgIHJlc3VsdC5jb21wcmVzc2lvbk1ldGhvZCA9IGNvbXByZXNzaW9uLm1hZ2ljO1xuXG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZSB0aGUgdmFyaW91cyBwYXJ0cyB1c2VkIGluIHRoZSBjb25zdHJ1Y3Rpb24gb2YgdGhlIGZpbmFsIHppcCBmaWxlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgZmlsZSBuYW1lLlxuXHQgKiBAcGFyYW0ge1ppcE9iamVjdH0gZmlsZSB0aGUgZmlsZSBjb250ZW50LlxuXHQgKiBAcGFyYW0ge0pTWmlwLkNvbXByZXNzZWRPYmplY3R9IGNvbXByZXNzZWRPYmplY3QgdGhlIGNvbXByZXNzZWQgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IHRoZSBjdXJyZW50IG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgemlwIGZpbGUuXG5cdCAqIEByZXR1cm4ge29iamVjdH0gdGhlIHppcCBwYXJ0cy5cblx0ICovXG5cdHZhciBnZW5lcmF0ZVppcFBhcnRzID0gZnVuY3Rpb24obmFtZSwgZmlsZSwgY29tcHJlc3NlZE9iamVjdCwgb2Zmc2V0KSB7XG5cdCAgICB2YXIgZGF0YSA9IGNvbXByZXNzZWRPYmplY3QuY29tcHJlc3NlZENvbnRlbnQsXG5cdCAgICAgICAgdXRmRW5jb2RlZEZpbGVOYW1lID0gdXRpbHMudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgdXRmOC51dGY4ZW5jb2RlKGZpbGUubmFtZSkpLFxuXHQgICAgICAgIGNvbW1lbnQgPSBmaWxlLmNvbW1lbnQgfHwgXCJcIixcblx0ICAgICAgICB1dGZFbmNvZGVkQ29tbWVudCA9IHV0aWxzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHV0ZjgudXRmOGVuY29kZShjb21tZW50KSksXG5cdCAgICAgICAgdXNlVVRGOEZvckZpbGVOYW1lID0gdXRmRW5jb2RlZEZpbGVOYW1lLmxlbmd0aCAhPT0gZmlsZS5uYW1lLmxlbmd0aCxcblx0ICAgICAgICB1c2VVVEY4Rm9yQ29tbWVudCA9IHV0ZkVuY29kZWRDb21tZW50Lmxlbmd0aCAhPT0gY29tbWVudC5sZW5ndGgsXG5cdCAgICAgICAgbyA9IGZpbGUub3B0aW9ucyxcblx0ICAgICAgICBkb3NUaW1lLFxuXHQgICAgICAgIGRvc0RhdGUsXG5cdCAgICAgICAgZXh0cmFGaWVsZHMgPSBcIlwiLFxuXHQgICAgICAgIHVuaWNvZGVQYXRoRXh0cmFGaWVsZCA9IFwiXCIsXG5cdCAgICAgICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkID0gXCJcIixcblx0ICAgICAgICBkaXIsIGRhdGU7XG5cblxuXHQgICAgLy8gaGFuZGxlIHRoZSBkZXByZWNhdGVkIG9wdGlvbnMuZGlyXG5cdCAgICBpZiAoZmlsZS5faW5pdGlhbE1ldGFkYXRhLmRpciAhPT0gZmlsZS5kaXIpIHtcblx0ICAgICAgICBkaXIgPSBmaWxlLmRpcjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZGlyID0gby5kaXI7XG5cdCAgICB9XG5cblx0ICAgIC8vIGhhbmRsZSB0aGUgZGVwcmVjYXRlZCBvcHRpb25zLmRhdGVcblx0ICAgIGlmKGZpbGUuX2luaXRpYWxNZXRhZGF0YS5kYXRlICE9PSBmaWxlLmRhdGUpIHtcblx0ICAgICAgICBkYXRlID0gZmlsZS5kYXRlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBkYXRlID0gby5kYXRlO1xuXHQgICAgfVxuXG5cblx0ICAgIGRvc1RpbWUgPSBkYXRlLmdldEhvdXJzKCk7XG5cdCAgICBkb3NUaW1lID0gZG9zVGltZSA8PCA2O1xuXHQgICAgZG9zVGltZSA9IGRvc1RpbWUgfCBkYXRlLmdldE1pbnV0ZXMoKTtcblx0ICAgIGRvc1RpbWUgPSBkb3NUaW1lIDw8IDU7XG5cdCAgICBkb3NUaW1lID0gZG9zVGltZSB8IGRhdGUuZ2V0U2Vjb25kcygpIC8gMjtcblxuXHQgICAgZG9zRGF0ZSA9IGRhdGUuZ2V0RnVsbFllYXIoKSAtIDE5ODA7XG5cdCAgICBkb3NEYXRlID0gZG9zRGF0ZSA8PCA0O1xuXHQgICAgZG9zRGF0ZSA9IGRvc0RhdGUgfCAoZGF0ZS5nZXRNb250aCgpICsgMSk7XG5cdCAgICBkb3NEYXRlID0gZG9zRGF0ZSA8PCA1O1xuXHQgICAgZG9zRGF0ZSA9IGRvc0RhdGUgfCBkYXRlLmdldERhdGUoKTtcblxuXHQgICAgaWYgKHVzZVVURjhGb3JGaWxlTmFtZSkge1xuXHQgICAgICAgIC8vIHNldCB0aGUgdW5pY29kZSBwYXRoIGV4dHJhIGZpZWxkLiB1bnppcCBuZWVkcyBhdCBsZWFzdCBvbmUgZXh0cmFcblx0ICAgICAgICAvLyBmaWVsZCB0byBjb3JyZWN0bHkgaGFuZGxlIHVuaWNvZGUgcGF0aCwgc28gdXNpbmcgdGhlIHBhdGggaXMgYXMgZ29vZFxuXHQgICAgICAgIC8vIGFzIGFueSBvdGhlciBpbmZvcm1hdGlvbi4gVGhpcyBjb3VsZCBpbXByb3ZlIHRoZSBzaXR1YXRpb24gd2l0aFxuXHQgICAgICAgIC8vIG90aGVyIGFyY2hpdmUgbWFuYWdlcnMgdG9vLlxuXHQgICAgICAgIC8vIFRoaXMgZmllbGQgaXMgdXN1YWxseSB1c2VkIHdpdGhvdXQgdGhlIHV0ZjggZmxhZywgd2l0aCBhIG5vblxuXHQgICAgICAgIC8vIHVuaWNvZGUgcGF0aCBpbiB0aGUgaGVhZGVyICh3aW5yYXIsIHdpbnppcCkuIFRoaXMgaGVscHMgKGEgYml0KVxuXHQgICAgICAgIC8vIHdpdGggdGhlIG1lc3N5IFdpbmRvd3MnIGRlZmF1bHQgY29tcHJlc3NlZCBmb2xkZXJzIGZlYXR1cmUgYnV0XG5cdCAgICAgICAgLy8gYnJlYWtzIG9uIHA3emlwIHdoaWNoIGRvZXNuJ3Qgc2VlayB0aGUgdW5pY29kZSBwYXRoIGV4dHJhIGZpZWxkLlxuXHQgICAgICAgIC8vIFNvIGZvciBub3csIFVURi04IGV2ZXJ5d2hlcmUgIVxuXHQgICAgICAgIHVuaWNvZGVQYXRoRXh0cmFGaWVsZCA9XG5cdCAgICAgICAgICAgIC8vIFZlcnNpb25cblx0ICAgICAgICAgICAgZGVjVG9IZXgoMSwgMSkgK1xuXHQgICAgICAgICAgICAvLyBOYW1lQ1JDMzJcblx0ICAgICAgICAgICAgZGVjVG9IZXgoY3JjMzIodXRmRW5jb2RlZEZpbGVOYW1lKSwgNCkgK1xuXHQgICAgICAgICAgICAvLyBVbmljb2RlTmFtZVxuXHQgICAgICAgICAgICB1dGZFbmNvZGVkRmlsZU5hbWU7XG5cblx0ICAgICAgICBleHRyYUZpZWxkcyArPVxuXHQgICAgICAgICAgICAvLyBJbmZvLVpJUCBVbmljb2RlIFBhdGggRXh0cmEgRmllbGRcblx0ICAgICAgICAgICAgXCJcXHg3NVxceDcwXCIgK1xuXHQgICAgICAgICAgICAvLyBzaXplXG5cdCAgICAgICAgICAgIGRlY1RvSGV4KHVuaWNvZGVQYXRoRXh0cmFGaWVsZC5sZW5ndGgsIDIpICtcblx0ICAgICAgICAgICAgLy8gY29udGVudFxuXHQgICAgICAgICAgICB1bmljb2RlUGF0aEV4dHJhRmllbGQ7XG5cdCAgICB9XG5cblx0ICAgIGlmKHVzZVVURjhGb3JDb21tZW50KSB7XG5cblx0ICAgICAgICB1bmljb2RlQ29tbWVudEV4dHJhRmllbGQgPVxuXHQgICAgICAgICAgICAvLyBWZXJzaW9uXG5cdCAgICAgICAgICAgIGRlY1RvSGV4KDEsIDEpICtcblx0ICAgICAgICAgICAgLy8gQ29tbWVudENSQzMyXG5cdCAgICAgICAgICAgIGRlY1RvSGV4KHRoaXMuY3JjMzIodXRmRW5jb2RlZENvbW1lbnQpLCA0KSArXG5cdCAgICAgICAgICAgIC8vIFVuaWNvZGVOYW1lXG5cdCAgICAgICAgICAgIHV0ZkVuY29kZWRDb21tZW50O1xuXG5cdCAgICAgICAgZXh0cmFGaWVsZHMgKz1cblx0ICAgICAgICAgICAgLy8gSW5mby1aSVAgVW5pY29kZSBQYXRoIEV4dHJhIEZpZWxkXG5cdCAgICAgICAgICAgIFwiXFx4NzVcXHg2M1wiICtcblx0ICAgICAgICAgICAgLy8gc2l6ZVxuXHQgICAgICAgICAgICBkZWNUb0hleCh1bmljb2RlQ29tbWVudEV4dHJhRmllbGQubGVuZ3RoLCAyKSArXG5cdCAgICAgICAgICAgIC8vIGNvbnRlbnRcblx0ICAgICAgICAgICAgdW5pY29kZUNvbW1lbnRFeHRyYUZpZWxkO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgaGVhZGVyID0gXCJcIjtcblxuXHQgICAgLy8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxuXHQgICAgaGVhZGVyICs9IFwiXFx4MEFcXHgwMFwiO1xuXHQgICAgLy8gZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnXG5cdCAgICAvLyBzZXQgYml0IDExIGlmIHV0Zjhcblx0ICAgIGhlYWRlciArPSAodXNlVVRGOEZvckZpbGVOYW1lIHx8IHVzZVVURjhGb3JDb21tZW50KSA/IFwiXFx4MDBcXHgwOFwiIDogXCJcXHgwMFxceDAwXCI7XG5cdCAgICAvLyBjb21wcmVzc2lvbiBtZXRob2Rcblx0ICAgIGhlYWRlciArPSBjb21wcmVzc2VkT2JqZWN0LmNvbXByZXNzaW9uTWV0aG9kO1xuXHQgICAgLy8gbGFzdCBtb2QgZmlsZSB0aW1lXG5cdCAgICBoZWFkZXIgKz0gZGVjVG9IZXgoZG9zVGltZSwgMik7XG5cdCAgICAvLyBsYXN0IG1vZCBmaWxlIGRhdGVcblx0ICAgIGhlYWRlciArPSBkZWNUb0hleChkb3NEYXRlLCAyKTtcblx0ICAgIC8vIGNyYy0zMlxuXHQgICAgaGVhZGVyICs9IGRlY1RvSGV4KGNvbXByZXNzZWRPYmplY3QuY3JjMzIsIDQpO1xuXHQgICAgLy8gY29tcHJlc3NlZCBzaXplXG5cdCAgICBoZWFkZXIgKz0gZGVjVG9IZXgoY29tcHJlc3NlZE9iamVjdC5jb21wcmVzc2VkU2l6ZSwgNCk7XG5cdCAgICAvLyB1bmNvbXByZXNzZWQgc2l6ZVxuXHQgICAgaGVhZGVyICs9IGRlY1RvSGV4KGNvbXByZXNzZWRPYmplY3QudW5jb21wcmVzc2VkU2l6ZSwgNCk7XG5cdCAgICAvLyBmaWxlIG5hbWUgbGVuZ3RoXG5cdCAgICBoZWFkZXIgKz0gZGVjVG9IZXgodXRmRW5jb2RlZEZpbGVOYW1lLmxlbmd0aCwgMik7XG5cdCAgICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcblx0ICAgIGhlYWRlciArPSBkZWNUb0hleChleHRyYUZpZWxkcy5sZW5ndGgsIDIpO1xuXG5cblx0ICAgIHZhciBmaWxlUmVjb3JkID0gc2lnbmF0dXJlLkxPQ0FMX0ZJTEVfSEVBREVSICsgaGVhZGVyICsgdXRmRW5jb2RlZEZpbGVOYW1lICsgZXh0cmFGaWVsZHM7XG5cblx0ICAgIHZhciBkaXJSZWNvcmQgPSBzaWduYXR1cmUuQ0VOVFJBTF9GSUxFX0hFQURFUiArXG5cdCAgICAvLyB2ZXJzaW9uIG1hZGUgYnkgKDAwOiBET1MpXG5cdCAgICBcIlxceDE0XFx4MDBcIiArXG5cdCAgICAvLyBmaWxlIGhlYWRlciAoY29tbW9uIHRvIGZpbGUgYW5kIGNlbnRyYWwgZGlyZWN0b3J5KVxuXHQgICAgaGVhZGVyICtcblx0ICAgIC8vIGZpbGUgY29tbWVudCBsZW5ndGhcblx0ICAgIGRlY1RvSGV4KHV0ZkVuY29kZWRDb21tZW50Lmxlbmd0aCwgMikgK1xuXHQgICAgLy8gZGlzayBudW1iZXIgc3RhcnRcblx0ICAgIFwiXFx4MDBcXHgwMFwiICtcblx0ICAgIC8vIGludGVybmFsIGZpbGUgYXR0cmlidXRlcyBUT0RPXG5cdCAgICBcIlxceDAwXFx4MDBcIiArXG5cdCAgICAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXNcblx0ICAgIChkaXIgPT09IHRydWUgPyBcIlxceDEwXFx4MDBcXHgwMFxceDAwXCIgOiBcIlxceDAwXFx4MDBcXHgwMFxceDAwXCIpICtcblx0ICAgIC8vIHJlbGF0aXZlIG9mZnNldCBvZiBsb2NhbCBoZWFkZXJcblx0ICAgIGRlY1RvSGV4KG9mZnNldCwgNCkgK1xuXHQgICAgLy8gZmlsZSBuYW1lXG5cdCAgICB1dGZFbmNvZGVkRmlsZU5hbWUgK1xuXHQgICAgLy8gZXh0cmEgZmllbGRcblx0ICAgIGV4dHJhRmllbGRzICtcblx0ICAgIC8vIGZpbGUgY29tbWVudFxuXHQgICAgdXRmRW5jb2RlZENvbW1lbnQ7XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgZmlsZVJlY29yZDogZmlsZVJlY29yZCxcblx0ICAgICAgICBkaXJSZWNvcmQ6IGRpclJlY29yZCxcblx0ICAgICAgICBjb21wcmVzc2VkT2JqZWN0OiBjb21wcmVzc2VkT2JqZWN0XG5cdCAgICB9O1xuXHR9O1xuXG5cblx0Ly8gcmV0dXJuIHRoZSBhY3R1YWwgcHJvdG90eXBlIG9mIEpTWmlwXG5cdHZhciBvdXQgPSB7XG5cdCAgICAvKipcblx0ICAgICAqIFJlYWQgYW4gZXhpc3RpbmcgemlwIGFuZCBtZXJnZSB0aGUgZGF0YSBpbiB0aGUgY3VycmVudCBKU1ppcCBvYmplY3QuXG5cdCAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gaXMgaW4ganN6aXAtbG9hZC5qcywgZG9uJ3QgZm9yZ2V0IHRvIGluY2x1ZGUgaXQuXG5cdCAgICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gc3RyZWFtICBUaGUgc3RyZWFtIHRvIGxvYWRcblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgZm9yIGxvYWRpbmcgdGhlIHN0cmVhbS5cblx0ICAgICAqICBvcHRpb25zLmJhc2U2NCA6IGlzIHRoZSBzdHJlYW0gaW4gYmFzZTY0ID8gZGVmYXVsdCA6IGZhbHNlXG5cdCAgICAgKiBAcmV0dXJuIHtKU1ppcH0gdGhlIGN1cnJlbnQgSlNaaXAgb2JqZWN0XG5cdCAgICAgKi9cblx0ICAgIGxvYWQ6IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvYWQgbWV0aG9kIGlzIG5vdCBkZWZpbmVkLiBJcyB0aGUgZmlsZSBqc3ppcC1sb2FkLmpzIGluY2x1ZGVkID9cIik7XG5cdCAgICB9LFxuXG5cdCAgICAvKipcblx0ICAgICAqIEZpbHRlciBuZXN0ZWQgZmlsZXMvZm9sZGVycyB3aXRoIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uXG5cdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWFyY2ggdGhlIHByZWRpY2F0ZSB0byB1c2UgOlxuXHQgICAgICogZnVuY3Rpb24gKHJlbGF0aXZlUGF0aCwgZmlsZSkgey4uLn1cblx0ICAgICAqIEl0IHRha2VzIDIgYXJndW1lbnRzIDogdGhlIHJlbGF0aXZlIHBhdGggYW5kIHRoZSBmaWxlLlxuXHQgICAgICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIG1hdGNoaW5nIGVsZW1lbnRzLlxuXHQgICAgICovXG5cdCAgICBmaWx0ZXI6IGZ1bmN0aW9uKHNlYXJjaCkge1xuXHQgICAgICAgIHZhciByZXN1bHQgPSBbXSxcblx0ICAgICAgICAgICAgZmlsZW5hbWUsIHJlbGF0aXZlUGF0aCwgZmlsZSwgZmlsZUNsb25lO1xuXHQgICAgICAgIGZvciAoZmlsZW5hbWUgaW4gdGhpcy5maWxlcykge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuZmlsZXMuaGFzT3duUHJvcGVydHkoZmlsZW5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBmaWxlID0gdGhpcy5maWxlc1tmaWxlbmFtZV07XG5cdCAgICAgICAgICAgIC8vIHJldHVybiBhIG5ldyBvYmplY3QsIGRvbid0IGxldCB0aGUgdXNlciBtZXNzIHdpdGggb3VyIGludGVybmFsIG9iamVjdHMgOilcblx0ICAgICAgICAgICAgZmlsZUNsb25lID0gbmV3IFppcE9iamVjdChmaWxlLm5hbWUsIGZpbGUuX2RhdGEsIGV4dGVuZChmaWxlLm9wdGlvbnMpKTtcblx0ICAgICAgICAgICAgcmVsYXRpdmVQYXRoID0gZmlsZW5hbWUuc2xpY2UodGhpcy5yb290Lmxlbmd0aCwgZmlsZW5hbWUubGVuZ3RoKTtcblx0ICAgICAgICAgICAgaWYgKGZpbGVuYW1lLnNsaWNlKDAsIHRoaXMucm9vdC5sZW5ndGgpID09PSB0aGlzLnJvb3QgJiYgLy8gdGhlIGZpbGUgaXMgaW4gdGhlIGN1cnJlbnQgcm9vdFxuXHQgICAgICAgICAgICBzZWFyY2gocmVsYXRpdmVQYXRoLCBmaWxlQ2xvbmUpKSB7IC8vIGFuZCB0aGUgZmlsZSBtYXRjaGVzIHRoZSBmdW5jdGlvblxuXHQgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZmlsZUNsb25lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfSxcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBZGQgYSBmaWxlIHRvIHRoZSB6aXAgZmlsZSwgb3Igc2VhcmNoIGEgZmlsZS5cblx0ICAgICAqIEBwYXJhbSAgIHtzdHJpbmd8UmVnRXhwfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIGFkZCAoaWYgZGF0YSBpcyBkZWZpbmVkKSxcblx0ICAgICAqIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIGZpbmQgKGlmIG5vIGRhdGEpIG9yIGEgcmVnZXggdG8gbWF0Y2ggZmlsZXMuXG5cdCAgICAgKiBAcGFyYW0gICB7U3RyaW5nfEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBkYXRhICBUaGUgZmlsZSBkYXRhLCBlaXRoZXIgcmF3IG9yIGJhc2U2NCBlbmNvZGVkXG5cdCAgICAgKiBAcGFyYW0gICB7T2JqZWN0fSBvICAgICBGaWxlIG9wdGlvbnNcblx0ICAgICAqIEByZXR1cm4gIHtKU1ppcHxPYmplY3R8QXJyYXl9IHRoaXMgSlNaaXAgb2JqZWN0ICh3aGVuIGFkZGluZyBhIGZpbGUpLFxuXHQgICAgICogYSBmaWxlICh3aGVuIHNlYXJjaGluZyBieSBzdHJpbmcpIG9yIGFuIGFycmF5IG9mIGZpbGVzICh3aGVuIHNlYXJjaGluZyBieSByZWdleCkuXG5cdCAgICAgKi9cblx0ICAgIGZpbGU6IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG8pIHtcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuYW1lO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHJlbGF0aXZlUGF0aCwgZmlsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZmlsZS5kaXIgJiYgcmVnZXhwLnRlc3QocmVsYXRpdmVQYXRoKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgeyAvLyB0ZXh0XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24ocmVsYXRpdmVQYXRoLCBmaWxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFmaWxlLmRpciAmJiByZWxhdGl2ZVBhdGggPT09IG5hbWU7XG5cdCAgICAgICAgICAgICAgICB9KVswXSB8fCBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgeyAvLyBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IDogd2UgaGF2ZSBkYXRhICFcblx0ICAgICAgICAgICAgbmFtZSA9IHRoaXMucm9vdCArIG5hbWU7XG5cdCAgICAgICAgICAgIGZpbGVBZGQuY2FsbCh0aGlzLCBuYW1lLCBkYXRhLCBvKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9LFxuXG5cdCAgICAvKipcblx0ICAgICAqIEFkZCBhIGRpcmVjdG9yeSB0byB0aGUgemlwIGZpbGUsIG9yIHNlYXJjaC5cblx0ICAgICAqIEBwYXJhbSAgIHtTdHJpbmd8UmVnRXhwfSBhcmcgVGhlIG5hbWUgb2YgdGhlIGRpcmVjdG9yeSB0byBhZGQsIG9yIGEgcmVnZXggdG8gc2VhcmNoIGZvbGRlcnMuXG5cdCAgICAgKiBAcmV0dXJuICB7SlNaaXB9IGFuIG9iamVjdCB3aXRoIHRoZSBuZXcgZGlyZWN0b3J5IGFzIHRoZSByb290LCBvciBhbiBhcnJheSBjb250YWluaW5nIG1hdGNoaW5nIGZvbGRlcnMuXG5cdCAgICAgKi9cblx0ICAgIGZvbGRlcjogZnVuY3Rpb24oYXJnKSB7XG5cdCAgICAgICAgaWYgKCFhcmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKGFyZykpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKHJlbGF0aXZlUGF0aCwgZmlsZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGUuZGlyICYmIGFyZy50ZXN0KHJlbGF0aXZlUGF0aCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIGVsc2UsIG5hbWUgaXMgYSBuZXcgZm9sZGVyXG5cdCAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnJvb3QgKyBhcmc7XG5cdCAgICAgICAgdmFyIG5ld0ZvbGRlciA9IGZvbGRlckFkZC5jYWxsKHRoaXMsIG5hbWUpO1xuXG5cdCAgICAgICAgLy8gQWxsb3cgY2hhaW5pbmcgYnkgcmV0dXJuaW5nIGEgbmV3IG9iamVjdCB3aXRoIHRoaXMgZm9sZGVyIGFzIHRoZSByb290XG5cdCAgICAgICAgdmFyIHJldCA9IHRoaXMuY2xvbmUoKTtcblx0ICAgICAgICByZXQucm9vdCA9IG5ld0ZvbGRlci5uYW1lO1xuXHQgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICB9LFxuXG5cdCAgICAvKipcblx0ICAgICAqIERlbGV0ZSBhIGZpbGUsIG9yIGEgZGlyZWN0b3J5IGFuZCBhbGwgc3ViLWZpbGVzLCBmcm9tIHRoZSB6aXBcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIGRlbGV0ZVxuXHQgICAgICogQHJldHVybiB7SlNaaXB9IHRoaXMgSlNaaXAgb2JqZWN0XG5cdCAgICAgKi9cblx0ICAgIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIG5hbWUgPSB0aGlzLnJvb3QgKyBuYW1lO1xuXHQgICAgICAgIHZhciBmaWxlID0gdGhpcy5maWxlc1tuYW1lXTtcblx0ICAgICAgICBpZiAoIWZpbGUpIHtcblx0ICAgICAgICAgICAgLy8gTG9vayBmb3IgYW55IGZvbGRlcnNcblx0ICAgICAgICAgICAgaWYgKG5hbWUuc2xpY2UoLTEpICE9IFwiL1wiKSB7XG5cdCAgICAgICAgICAgICAgICBuYW1lICs9IFwiL1wiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGZpbGUgPSB0aGlzLmZpbGVzW25hbWVdO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChmaWxlICYmICFmaWxlLmRpcikge1xuXHQgICAgICAgICAgICAvLyBmaWxlXG5cdCAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmZpbGVzW25hbWVdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIG1heWJlIGEgZm9sZGVyLCBkZWxldGUgcmVjdXJzaXZlbHlcblx0ICAgICAgICAgICAgdmFyIGtpZHMgPSB0aGlzLmZpbHRlcihmdW5jdGlvbihyZWxhdGl2ZVBhdGgsIGZpbGUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLm5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGgpID09PSBuYW1lO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBraWRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5maWxlc1traWRzW2ldLm5hbWVdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9LFxuXG5cdCAgICAvKipcblx0ICAgICAqIEdlbmVyYXRlIHRoZSBjb21wbGV0ZSB6aXAgZmlsZVxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIG9wdGlvbnMgdG8gZ2VuZXJhdGUgdGhlIHppcCBmaWxlIDpcblx0ICAgICAqIC0gYmFzZTY0LCAoZGVwcmVjYXRlZCwgdXNlIHR5cGUgaW5zdGVhZCkgdHJ1ZSB0byBnZW5lcmF0ZSBiYXNlNjQuXG5cdCAgICAgKiAtIGNvbXByZXNzaW9uLCBcIlNUT1JFXCIgYnkgZGVmYXVsdC5cblx0ICAgICAqIC0gdHlwZSwgXCJiYXNlNjRcIiBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlIDogc3RyaW5nLCBiYXNlNjQsIHVpbnQ4YXJyYXksIGFycmF5YnVmZmVyLCBibG9iLlxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfFVpbnQ4QXJyYXl8QXJyYXlCdWZmZXJ8QnVmZmVyfEJsb2J9IHRoZSB6aXAgZmlsZVxuXHQgICAgICovXG5cdCAgICBnZW5lcmF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuXHQgICAgICAgIG9wdGlvbnMgPSBleHRlbmQob3B0aW9ucyB8fCB7fSwge1xuXHQgICAgICAgICAgICBiYXNlNjQ6IHRydWUsXG5cdCAgICAgICAgICAgIGNvbXByZXNzaW9uOiBcIlNUT1JFXCIsXG5cdCAgICAgICAgICAgIHR5cGU6IFwiYmFzZTY0XCIsXG5cdCAgICAgICAgICAgIGNvbW1lbnQ6IG51bGxcblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHV0aWxzLmNoZWNrU3VwcG9ydChvcHRpb25zLnR5cGUpO1xuXG5cdCAgICAgICAgdmFyIHppcERhdGEgPSBbXSxcblx0ICAgICAgICAgICAgbG9jYWxEaXJMZW5ndGggPSAwLFxuXHQgICAgICAgICAgICBjZW50cmFsRGlyTGVuZ3RoID0gMCxcblx0ICAgICAgICAgICAgd3JpdGVyLCBpLFxuXHQgICAgICAgICAgICB1dGZFbmNvZGVkQ29tbWVudCA9IHV0aWxzLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsIHRoaXMudXRmOGVuY29kZShvcHRpb25zLmNvbW1lbnQgfHwgdGhpcy5jb21tZW50IHx8IFwiXCIpKTtcblxuXHQgICAgICAgIC8vIGZpcnN0LCBnZW5lcmF0ZSBhbGwgdGhlIHppcCBwYXJ0cy5cblx0ICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuZmlsZXMpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmZpbGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgZmlsZSA9IHRoaXMuZmlsZXNbbmFtZV07XG5cblx0ICAgICAgICAgICAgdmFyIGNvbXByZXNzaW9uTmFtZSA9IGZpbGUub3B0aW9ucy5jb21wcmVzc2lvbiB8fCBvcHRpb25zLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCk7XG5cdCAgICAgICAgICAgIHZhciBjb21wcmVzc2lvbiA9IGNvbXByZXNzaW9uc1tjb21wcmVzc2lvbk5hbWVdO1xuXHQgICAgICAgICAgICBpZiAoIWNvbXByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcHJlc3Npb25OYW1lICsgXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICB2YXIgY29tcHJlc3NlZE9iamVjdCA9IGdlbmVyYXRlQ29tcHJlc3NlZE9iamVjdEZyb20uY2FsbCh0aGlzLCBmaWxlLCBjb21wcmVzc2lvbik7XG5cblx0ICAgICAgICAgICAgdmFyIHppcFBhcnQgPSBnZW5lcmF0ZVppcFBhcnRzLmNhbGwodGhpcywgbmFtZSwgZmlsZSwgY29tcHJlc3NlZE9iamVjdCwgbG9jYWxEaXJMZW5ndGgpO1xuXHQgICAgICAgICAgICBsb2NhbERpckxlbmd0aCArPSB6aXBQYXJ0LmZpbGVSZWNvcmQubGVuZ3RoICsgY29tcHJlc3NlZE9iamVjdC5jb21wcmVzc2VkU2l6ZTtcblx0ICAgICAgICAgICAgY2VudHJhbERpckxlbmd0aCArPSB6aXBQYXJ0LmRpclJlY29yZC5sZW5ndGg7XG5cdCAgICAgICAgICAgIHppcERhdGEucHVzaCh6aXBQYXJ0KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgZGlyRW5kID0gXCJcIjtcblxuXHQgICAgICAgIC8vIGVuZCBvZiBjZW50cmFsIGRpciBzaWduYXR1cmVcblx0ICAgICAgICBkaXJFbmQgPSBzaWduYXR1cmUuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EICtcblx0ICAgICAgICAvLyBudW1iZXIgb2YgdGhpcyBkaXNrXG5cdCAgICAgICAgXCJcXHgwMFxceDAwXCIgK1xuXHQgICAgICAgIC8vIG51bWJlciBvZiB0aGUgZGlzayB3aXRoIHRoZSBzdGFydCBvZiB0aGUgY2VudHJhbCBkaXJlY3Rvcnlcblx0ICAgICAgICBcIlxceDAwXFx4MDBcIiArXG5cdCAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5IG9uIHRoaXMgZGlza1xuXHQgICAgICAgIGRlY1RvSGV4KHppcERhdGEubGVuZ3RoLCAyKSArXG5cdCAgICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5XG5cdCAgICAgICAgZGVjVG9IZXgoemlwRGF0YS5sZW5ndGgsIDIpICtcblx0ICAgICAgICAvLyBzaXplIG9mIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAgIDQgYnl0ZXNcblx0ICAgICAgICBkZWNUb0hleChjZW50cmFsRGlyTGVuZ3RoLCA0KSArXG5cdCAgICAgICAgLy8gb2Zmc2V0IG9mIHN0YXJ0IG9mIGNlbnRyYWwgZGlyZWN0b3J5IHdpdGggcmVzcGVjdCB0byB0aGUgc3RhcnRpbmcgZGlzayBudW1iZXJcblx0ICAgICAgICBkZWNUb0hleChsb2NhbERpckxlbmd0aCwgNCkgK1xuXHQgICAgICAgIC8vIC5aSVAgZmlsZSBjb21tZW50IGxlbmd0aFxuXHQgICAgICAgIGRlY1RvSGV4KHV0ZkVuY29kZWRDb21tZW50Lmxlbmd0aCwgMikgK1xuXHQgICAgICAgIC8vIC5aSVAgZmlsZSBjb21tZW50XG5cdCAgICAgICAgdXRmRW5jb2RlZENvbW1lbnQ7XG5cblxuXHQgICAgICAgIC8vIHdlIGhhdmUgYWxsIHRoZSBwYXJ0cyAoYW5kIHRoZSB0b3RhbCBsZW5ndGgpXG5cdCAgICAgICAgLy8gdGltZSB0byBjcmVhdGUgYSB3cml0ZXIgIVxuXHQgICAgICAgIHZhciB0eXBlTmFtZSA9IG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgIGlmKHR5cGVOYW1lPT09XCJ1aW50OGFycmF5XCJ8fHR5cGVOYW1lPT09XCJhcnJheWJ1ZmZlclwifHx0eXBlTmFtZT09PVwiYmxvYlwifHx0eXBlTmFtZT09PVwibm9kZWJ1ZmZlclwiKSB7XG5cdCAgICAgICAgICAgIHdyaXRlciA9IG5ldyBVaW50OEFycmF5V3JpdGVyKGxvY2FsRGlyTGVuZ3RoICsgY2VudHJhbERpckxlbmd0aCArIGRpckVuZC5sZW5ndGgpO1xuXHQgICAgICAgIH1lbHNle1xuXHQgICAgICAgICAgICB3cml0ZXIgPSBuZXcgU3RyaW5nV3JpdGVyKGxvY2FsRGlyTGVuZ3RoICsgY2VudHJhbERpckxlbmd0aCArIGRpckVuZC5sZW5ndGgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCB6aXBEYXRhLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHdyaXRlci5hcHBlbmQoemlwRGF0YVtpXS5maWxlUmVjb3JkKTtcblx0ICAgICAgICAgICAgd3JpdGVyLmFwcGVuZCh6aXBEYXRhW2ldLmNvbXByZXNzZWRPYmplY3QuY29tcHJlc3NlZENvbnRlbnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgemlwRGF0YS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB3cml0ZXIuYXBwZW5kKHppcERhdGFbaV0uZGlyUmVjb3JkKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB3cml0ZXIuYXBwZW5kKGRpckVuZCk7XG5cblx0ICAgICAgICB2YXIgemlwID0gd3JpdGVyLmZpbmFsaXplKCk7XG5cblxuXG5cdCAgICAgICAgc3dpdGNoKG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpKSB7XG5cdCAgICAgICAgICAgIC8vIGNhc2UgXCJ6aXAgaXMgYW4gVWludDhBcnJheVwiXG5cdCAgICAgICAgICAgIGNhc2UgXCJ1aW50OGFycmF5XCIgOlxuXHQgICAgICAgICAgICBjYXNlIFwiYXJyYXlidWZmZXJcIiA6XG5cdCAgICAgICAgICAgIGNhc2UgXCJub2RlYnVmZmVyXCIgOlxuXHQgICAgICAgICAgICAgICByZXR1cm4gdXRpbHMudHJhbnNmb3JtVG8ob3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCksIHppcCk7XG5cdCAgICAgICAgICAgIGNhc2UgXCJibG9iXCIgOlxuXHQgICAgICAgICAgICAgICByZXR1cm4gdXRpbHMuYXJyYXlCdWZmZXIyQmxvYih1dGlscy50cmFuc2Zvcm1UbyhcImFycmF5YnVmZmVyXCIsIHppcCkpO1xuXHQgICAgICAgICAgICAvLyBjYXNlIFwiemlwIGlzIGEgc3RyaW5nXCJcblx0ICAgICAgICAgICAgY2FzZSBcImJhc2U2NFwiIDpcblx0ICAgICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zLmJhc2U2NCkgPyBiYXNlNjQuZW5jb2RlKHppcCkgOiB6aXA7XG5cdCAgICAgICAgICAgIGRlZmF1bHQgOiAvLyBjYXNlIFwic3RyaW5nXCIgOlxuXHQgICAgICAgICAgICAgICByZXR1cm4gemlwO1xuXHQgICAgICAgICB9XG5cblx0ICAgIH0sXG5cblx0ICAgIC8qKlxuXHQgICAgICogQGRlcHJlY2F0ZWRcblx0ICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAgICAgKi9cblx0ICAgIGNyYzMyOiBmdW5jdGlvbiAoaW5wdXQsIGNyYykge1xuXHQgICAgICAgIHJldHVybiBjcmMzMihpbnB1dCwgY3JjKTtcblx0ICAgIH0sXG5cblx0ICAgIC8qKlxuXHQgICAgICogQGRlcHJlY2F0ZWRcblx0ICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIHdpdGhvdXQgcmVwbGFjZW1lbnQuXG5cdCAgICAgKi9cblx0ICAgIHV0ZjhlbmNvZGU6IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0ICAgICAgICByZXR1cm4gdXRpbHMudHJhbnNmb3JtVG8oXCJzdHJpbmdcIiwgdXRmOC51dGY4ZW5jb2RlKHN0cmluZykpO1xuXHQgICAgfSxcblxuXHQgICAgLyoqXG5cdCAgICAgKiBAZGVwcmVjYXRlZFxuXHQgICAgICogVGhpcyBtZXRob2Qgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24gd2l0aG91dCByZXBsYWNlbWVudC5cblx0ICAgICAqL1xuXHQgICAgdXRmOGRlY29kZTogZnVuY3Rpb24gKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIHV0ZjgudXRmOGRlY29kZShpbnB1dCk7XG5cdCAgICB9XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gb3V0O1xuXG5cdH0se1wiLi9iYXNlNjRcIjoxLFwiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vY29tcHJlc3Npb25zXCI6MyxcIi4vY3JjMzJcIjo0LFwiLi9kZWZhdWx0c1wiOjYsXCIuL25vZGVCdWZmZXJcIjoxMSxcIi4vc2lnbmF0dXJlXCI6MTQsXCIuL3N0cmluZ1dyaXRlclwiOjE2LFwiLi9zdXBwb3J0XCI6MTcsXCIuL3VpbnQ4QXJyYXlXcml0ZXJcIjoxOSxcIi4vdXRmOFwiOjIwLFwiLi91dGlsc1wiOjIxfV0sMTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdGV4cG9ydHMuTE9DQUxfRklMRV9IRUFERVIgPSBcIlBLXFx4MDNcXHgwNFwiO1xuXHRleHBvcnRzLkNFTlRSQUxfRklMRV9IRUFERVIgPSBcIlBLXFx4MDFcXHgwMlwiO1xuXHRleHBvcnRzLkNFTlRSQUxfRElSRUNUT1JZX0VORCA9IFwiUEtcXHgwNVxceDA2XCI7XG5cdGV4cG9ydHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUiA9IFwiUEtcXHgwNlxceDA3XCI7XG5cdGV4cG9ydHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EID0gXCJQS1xceDA2XFx4MDZcIjtcblx0ZXhwb3J0cy5EQVRBX0RFU0NSSVBUT1IgPSBcIlBLXFx4MDdcXHgwOFwiO1xuXG5cdH0se31dLDE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgRGF0YVJlYWRlciA9IF9kZXJlcV8oJy4vZGF0YVJlYWRlcicpO1xuXHR2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzJyk7XG5cblx0ZnVuY3Rpb24gU3RyaW5nUmVhZGVyKGRhdGEsIG9wdGltaXplZEJpbmFyeVN0cmluZykge1xuXHQgICAgdGhpcy5kYXRhID0gZGF0YTtcblx0ICAgIGlmICghb3B0aW1pemVkQmluYXJ5U3RyaW5nKSB7XG5cdCAgICAgICAgdGhpcy5kYXRhID0gdXRpbHMuc3RyaW5nMmJpbmFyeSh0aGlzLmRhdGEpO1xuXHQgICAgfVxuXHQgICAgdGhpcy5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuXHQgICAgdGhpcy5pbmRleCA9IDA7XG5cdH1cblx0U3RyaW5nUmVhZGVyLnByb3RvdHlwZSA9IG5ldyBEYXRhUmVhZGVyKCk7XG5cdC8qKlxuXHQgKiBAc2VlIERhdGFSZWFkZXIuYnl0ZUF0XG5cdCAqL1xuXHRTdHJpbmdSZWFkZXIucHJvdG90eXBlLmJ5dGVBdCA9IGZ1bmN0aW9uKGkpIHtcblx0ICAgIHJldHVybiB0aGlzLmRhdGEuY2hhckNvZGVBdChpKTtcblx0fTtcblx0LyoqXG5cdCAqIEBzZWUgRGF0YVJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZVxuXHQgKi9cblx0U3RyaW5nUmVhZGVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZSA9IGZ1bmN0aW9uKHNpZykge1xuXHQgICAgcmV0dXJuIHRoaXMuZGF0YS5sYXN0SW5kZXhPZihzaWcpO1xuXHR9O1xuXHQvKipcblx0ICogQHNlZSBEYXRhUmVhZGVyLnJlYWREYXRhXG5cdCAqL1xuXHRTdHJpbmdSZWFkZXIucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcblx0ICAgIC8vIHRoaXMgd2lsbCB3b3JrIGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9yIGFwcGxpZWQgdGhlIFwiJiAweGZmXCIgbWFzay5cblx0ICAgIHZhciByZXN1bHQgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy5pbmRleCwgdGhpcy5pbmRleCArIHNpemUpO1xuXHQgICAgdGhpcy5pbmRleCArPSBzaXplO1xuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdSZWFkZXI7XG5cblx0fSx7XCIuL2RhdGFSZWFkZXJcIjo1LFwiLi91dGlsc1wiOjIxfV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi91dGlscycpO1xuXG5cdC8qKlxuXHQgKiBBbiBvYmplY3QgdG8gd3JpdGUgYW55IGNvbnRlbnQgdG8gYSBzdHJpbmcuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0dmFyIFN0cmluZ1dyaXRlciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5kYXRhID0gW107XG5cdH07XG5cdFN0cmluZ1dyaXRlci5wcm90b3R5cGUgPSB7XG5cdCAgICAvKipcblx0ICAgICAqIEFwcGVuZCBhbnkgY29udGVudCB0byB0aGUgY3VycmVudCBzdHJpbmcuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXQgdGhlIGNvbnRlbnQgdG8gYWRkLlxuXHQgICAgICovXG5cdCAgICBhcHBlbmQ6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgaW5wdXQgPSB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCBpbnB1dCk7XG5cdCAgICAgICAgdGhpcy5kYXRhLnB1c2goaW5wdXQpO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogRmluYWxpemUgdGhlIGNvbnN0cnVjdGlvbiBhbiByZXR1cm4gdGhlIHJlc3VsdC5cblx0ICAgICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGdlbmVyYXRlZCBzdHJpbmcuXG5cdCAgICAgKi9cblx0ICAgIGZpbmFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmpvaW4oXCJcIik7XG5cdCAgICB9XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdXcml0ZXI7XG5cblx0fSx7XCIuL3V0aWxzXCI6MjF9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdChmdW5jdGlvbiAoQnVmZmVyKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRleHBvcnRzLmJhc2U2NCA9IHRydWU7XG5cdGV4cG9ydHMuYXJyYXkgPSB0cnVlO1xuXHRleHBvcnRzLnN0cmluZyA9IHRydWU7XG5cdGV4cG9ydHMuYXJyYXlidWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCI7XG5cdC8vIGNvbnRhaW5zIHRydWUgaWYgSlNaaXAgY2FuIHJlYWQvZ2VuZXJhdGUgbm9kZWpzIEJ1ZmZlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQvLyBCcm93c2VyaWZ5IHdpbGwgcHJvdmlkZSBhIEJ1ZmZlciBpbXBsZW1lbnRhdGlvbiBmb3IgYnJvd3NlcnMsIHdoaWNoIGlzXG5cdC8vIGFuIGF1Z21lbnRlZCBVaW50OEFycmF5IChpLmUuLCBjYW4gYmUgdXNlZCBhcyBlaXRoZXIgQnVmZmVyIG9yIFU4KS5cblx0ZXhwb3J0cy5ub2RlYnVmZmVyID0gdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIjtcblx0Ly8gY29udGFpbnMgdHJ1ZSBpZiBKU1ppcCBjYW4gcmVhZC9nZW5lcmF0ZSBVaW50OEFycmF5LCBmYWxzZSBvdGhlcndpc2UuXG5cdGV4cG9ydHMudWludDhhcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiO1xuXG5cdGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0ICAgIGV4cG9ydHMuYmxvYiA9IGZhbHNlO1xuXHR9XG5cdGVsc2Uge1xuXHQgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgZXhwb3J0cy5ibG9iID0gbmV3IEJsb2IoW2J1ZmZlcl0sIHtcblx0ICAgICAgICAgICAgdHlwZTogXCJhcHBsaWNhdGlvbi96aXBcIlxuXHQgICAgICAgIH0pLnNpemUgPT09IDA7XG5cdCAgICB9XG5cdCAgICBjYXRjaCAoZSkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHZhciBCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cdCAgICAgICAgICAgIHZhciBidWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcblx0ICAgICAgICAgICAgYnVpbGRlci5hcHBlbmQoYnVmZmVyKTtcblx0ICAgICAgICAgICAgZXhwb3J0cy5ibG9iID0gYnVpbGRlci5nZXRCbG9iKCdhcHBsaWNhdGlvbi96aXAnKS5zaXplID09PSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICBleHBvcnRzLmJsb2IgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHR9KS5jYWxsKHRoaXMsKHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgPyBCdWZmZXIgOiB1bmRlZmluZWQpKVxuXHR9LHt9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIERhdGFSZWFkZXIgPSBfZGVyZXFfKCcuL2RhdGFSZWFkZXInKTtcblxuXHRmdW5jdGlvbiBVaW50OEFycmF5UmVhZGVyKGRhdGEpIHtcblx0ICAgIGlmIChkYXRhKSB7XG5cdCAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcblx0ICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuZGF0YS5sZW5ndGg7XG5cdCAgICAgICAgdGhpcy5pbmRleCA9IDA7XG5cdCAgICB9XG5cdH1cblx0VWludDhBcnJheVJlYWRlci5wcm90b3R5cGUgPSBuZXcgRGF0YVJlYWRlcigpO1xuXHQvKipcblx0ICogQHNlZSBEYXRhUmVhZGVyLmJ5dGVBdFxuXHQgKi9cblx0VWludDhBcnJheVJlYWRlci5wcm90b3R5cGUuYnl0ZUF0ID0gZnVuY3Rpb24oaSkge1xuXHQgICAgcmV0dXJuIHRoaXMuZGF0YVtpXTtcblx0fTtcblx0LyoqXG5cdCAqIEBzZWUgRGF0YVJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZVxuXHQgKi9cblx0VWludDhBcnJheVJlYWRlci5wcm90b3R5cGUubGFzdEluZGV4T2ZTaWduYXR1cmUgPSBmdW5jdGlvbihzaWcpIHtcblx0ICAgIHZhciBzaWcwID0gc2lnLmNoYXJDb2RlQXQoMCksXG5cdCAgICAgICAgc2lnMSA9IHNpZy5jaGFyQ29kZUF0KDEpLFxuXHQgICAgICAgIHNpZzIgPSBzaWcuY2hhckNvZGVBdCgyKSxcblx0ICAgICAgICBzaWczID0gc2lnLmNoYXJDb2RlQXQoMyk7XG5cdCAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSA0OyBpID49IDA7IC0taSkge1xuXHQgICAgICAgIGlmICh0aGlzLmRhdGFbaV0gPT09IHNpZzAgJiYgdGhpcy5kYXRhW2kgKyAxXSA9PT0gc2lnMSAmJiB0aGlzLmRhdGFbaSArIDJdID09PSBzaWcyICYmIHRoaXMuZGF0YVtpICsgM10gPT09IHNpZzMpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gLTE7XG5cdH07XG5cdC8qKlxuXHQgKiBAc2VlIERhdGFSZWFkZXIucmVhZERhdGFcblx0ICovXG5cdFVpbnQ4QXJyYXlSZWFkZXIucHJvdG90eXBlLnJlYWREYXRhID0gZnVuY3Rpb24oc2l6ZSkge1xuXHQgICAgdGhpcy5jaGVja09mZnNldChzaXplKTtcblx0ICAgIGlmKHNpemUgPT09IDApIHtcblx0ICAgICAgICAvLyBpbiBJRTEwLCB3aGVuIHVzaW5nIHN1YmFycmF5KGlkeCwgaWR4KSwgd2UgZ2V0IHRoZSBhcnJheSBbMHgwMF0gaW5zdGVhZCBvZiBbXS5cblx0ICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG5cdCAgICB9XG5cdCAgICB2YXIgcmVzdWx0ID0gdGhpcy5kYXRhLnN1YmFycmF5KHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyBzaXplKTtcblx0ICAgIHRoaXMuaW5kZXggKz0gc2l6ZTtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cdG1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheVJlYWRlcjtcblxuXHR9LHtcIi4vZGF0YVJlYWRlclwiOjV9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzJyk7XG5cblx0LyoqXG5cdCAqIEFuIG9iamVjdCB0byB3cml0ZSBhbnkgY29udGVudCB0byBhbiBVaW50OEFycmF5LlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgbGVuZ3RoIG9mIHRoZSBhcnJheS5cblx0ICovXG5cdHZhciBVaW50OEFycmF5V3JpdGVyID0gZnVuY3Rpb24obGVuZ3RoKSB7XG5cdCAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXHQgICAgdGhpcy5pbmRleCA9IDA7XG5cdH07XG5cdFVpbnQ4QXJyYXlXcml0ZXIucHJvdG90eXBlID0ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBBcHBlbmQgYW55IGNvbnRlbnQgdG8gdGhlIGN1cnJlbnQgYXJyYXkuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXQgdGhlIGNvbnRlbnQgdG8gYWRkLlxuXHQgICAgICovXG5cdCAgICBhcHBlbmQ6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCAhPT0gMCkge1xuXHQgICAgICAgICAgICAvLyB3aXRoIGFuIGVtcHR5IFVpbnQ4QXJyYXksIE9wZXJhIGZhaWxzIHdpdGggYSBcIk9mZnNldCBsYXJnZXIgdGhhbiBhcnJheSBzaXplXCJcblx0ICAgICAgICAgICAgaW5wdXQgPSB1dGlscy50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIiwgaW5wdXQpO1xuXHQgICAgICAgICAgICB0aGlzLmRhdGEuc2V0KGlucHV0LCB0aGlzLmluZGV4KTtcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCArPSBpbnB1dC5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogRmluYWxpemUgdGhlIGNvbnN0cnVjdGlvbiBhbiByZXR1cm4gdGhlIHJlc3VsdC5cblx0ICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSBnZW5lcmF0ZWQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIGZpbmFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuXHQgICAgfVxuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheVdyaXRlcjtcblxuXHR9LHtcIi4vdXRpbHNcIjoyMX1dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciB1dGlscyA9IF9kZXJlcV8oJy4vdXRpbHMnKTtcblx0dmFyIHN1cHBvcnQgPSBfZGVyZXFfKCcuL3N1cHBvcnQnKTtcblx0dmFyIG5vZGVCdWZmZXIgPSBfZGVyZXFfKCcuL25vZGVCdWZmZXInKTtcblxuXHQvKipcblx0ICogVGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgY29tZSBmcm9tIHBha28sIGZyb20gcGFrby9saWIvdXRpbHMvc3RyaW5nc1xuXHQgKiByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UsIHNlZSBwYWtvIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrby9cblx0ICovXG5cblx0Ly8gVGFibGUgd2l0aCB1dGY4IGxlbmd0aHMgKGNhbGN1bGF0ZWQgYnkgZmlyc3QgYnl0ZSBvZiBzZXF1ZW5jZSlcblx0Ly8gTm90ZSwgdGhhdCA1ICYgNi1ieXRlIHZhbHVlcyBhbmQgc29tZSA0LWJ5dGUgdmFsdWVzIGNhbiBub3QgYmUgcmVwcmVzZW50ZWQgaW4gSlMsXG5cdC8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxuXHR2YXIgX3V0ZjhsZW4gPSBuZXcgQXJyYXkoMjU2KTtcblx0Zm9yICh2YXIgaT0wOyBpPDI1NjsgaSsrKSB7XG5cdCAgX3V0ZjhsZW5baV0gPSAoaSA+PSAyNTIgPyA2IDogaSA+PSAyNDggPyA1IDogaSA+PSAyNDAgPyA0IDogaSA+PSAyMjQgPyAzIDogaSA+PSAxOTIgPyAyIDogMSk7XG5cdH1cblx0X3V0ZjhsZW5bMjU0XT1fdXRmOGxlblsyNTRdPTE7IC8vIEludmFsaWQgc2VxdWVuY2Ugc3RhcnRcblxuXHQvLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5cdHZhciBzdHJpbmcyYnVmID0gZnVuY3Rpb24gKHN0cikge1xuXHQgICAgdmFyIGJ1ZiwgYywgYzIsIG1fcG9zLCBpLCBzdHJfbGVuID0gc3RyLmxlbmd0aCwgYnVmX2xlbiA9IDA7XG5cblx0ICAgIC8vIGNvdW50IGJpbmFyeSBzaXplXG5cdCAgICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7XG5cdCAgICAgICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcblx0ICAgICAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zKzEgPCBzdHJfbGVuKSkge1xuXHQgICAgICAgICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKzEpO1xuXHQgICAgICAgICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG5cdCAgICAgICAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcblx0ICAgICAgICAgICAgICAgIG1fcG9zKys7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgYnVmX2xlbiArPSBjIDwgMHg4MCA/IDEgOiBjIDwgMHg4MDAgPyAyIDogYyA8IDB4MTAwMDAgPyAzIDogNDtcblx0ICAgIH1cblxuXHQgICAgLy8gYWxsb2NhdGUgYnVmZmVyXG5cdCAgICBpZiAoc3VwcG9ydC51aW50OGFycmF5KSB7XG5cdCAgICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmX2xlbik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIGJ1ZiA9IG5ldyBBcnJheShidWZfbGVuKTtcblx0ICAgIH1cblxuXHQgICAgLy8gY29udmVydFxuXHQgICAgZm9yIChpPTAsIG1fcG9zID0gMDsgaSA8IGJ1Zl9sZW47IG1fcG9zKyspIHtcblx0ICAgICAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuXHQgICAgICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MrMSA8IHN0cl9sZW4pKSB7XG5cdCAgICAgICAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MrMSk7XG5cdCAgICAgICAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcblx0ICAgICAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuXHQgICAgICAgICAgICAgICAgbV9wb3MrKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoYyA8IDB4ODApIHtcblx0ICAgICAgICAgICAgLyogb25lIGJ5dGUgKi9cblx0ICAgICAgICAgICAgYnVmW2krK10gPSBjO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG5cdCAgICAgICAgICAgIC8qIHR3byBieXRlcyAqL1xuXHQgICAgICAgICAgICBidWZbaSsrXSA9IDB4QzAgfCAoYyA+Pj4gNik7XG5cdCAgICAgICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG5cdCAgICAgICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuXHQgICAgICAgICAgICAvKiB0aHJlZSBieXRlcyAqL1xuXHQgICAgICAgICAgICBidWZbaSsrXSA9IDB4RTAgfCAoYyA+Pj4gMTIpO1xuXHQgICAgICAgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuXHQgICAgICAgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8qIGZvdXIgYnl0ZXMgKi9cblx0ICAgICAgICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcblx0ICAgICAgICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDEyICYgMHgzZik7XG5cdCAgICAgICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiA2ICYgMHgzZik7XG5cdCAgICAgICAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gYnVmO1xuXHR9O1xuXG5cdC8vIENhbGN1bGF0ZSBtYXggcG9zc2libGUgcG9zaXRpb24gaW4gdXRmOCBidWZmZXIsXG5cdC8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcblx0Ly8gLSAodmVyeSBzbWFsbCBsaW1pdHMpIHJldHVybiBtYXggc2l6ZSBhcyBpcy5cblx0Ly9cblx0Ly8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG5cdC8vIG1heCAgIC0gbGVuZ3RoIGxpbWl0IChtYW5kYXRvcnkpO1xuXHR2YXIgdXRmOGJvcmRlciA9IGZ1bmN0aW9uKGJ1ZiwgbWF4KSB7XG5cdCAgICB2YXIgcG9zO1xuXG5cdCAgICBtYXggPSBtYXggfHwgYnVmLmxlbmd0aDtcblx0ICAgIGlmIChtYXggPiBidWYubGVuZ3RoKSB7IG1heCA9IGJ1Zi5sZW5ndGg7IH1cblxuXHQgICAgLy8gZ28gYmFjayBmcm9tIGxhc3QgcG9zaXRpb24sIHVudGlsIHN0YXJ0IG9mIHNlcXVlbmNlIGZvdW5kXG5cdCAgICBwb3MgPSBtYXgtMTtcblx0ICAgIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG5cdCAgICAvLyBGdWNrdXAgLSB2ZXJ5IHNtYWxsIGFuZCBicm9rZW4gc2VxdWVuY2UsXG5cdCAgICAvLyByZXR1cm4gbWF4LCBiZWNhdXNlIHdlIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGFueXdheS5cblx0ICAgIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuXHQgICAgLy8gSWYgd2UgY2FtZSB0byBzdGFydCBvZiBidWZmZXIgLSB0aGF0IG1lYW5zIHZ1ZmZlciBpcyB0b28gc21hbGwsXG5cdCAgICAvLyByZXR1cm4gbWF4IHRvby5cblx0ICAgIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG5cdCAgICByZXR1cm4gKHBvcyArIF91dGY4bGVuW2J1Zltwb3NdXSA+IG1heCkgPyBwb3MgOiBtYXg7XG5cdH07XG5cblx0Ly8gY29udmVydCBhcnJheSB0byBzdHJpbmdcblx0dmFyIGJ1ZjJzdHJpbmcgPSBmdW5jdGlvbiAoYnVmKSB7XG5cdCAgICB2YXIgc3RyLCBpLCBvdXQsIGMsIGNfbGVuO1xuXHQgICAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGg7XG5cblx0ICAgIC8vIFJlc2VydmUgbWF4IHBvc3NpYmxlIGxlbmd0aCAoMiB3b3JkcyBwZXIgY2hhcilcblx0ICAgIC8vIE5COiBieSB1bmtub3duIHJlYXNvbnMsIEFycmF5IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIGZvclxuXHQgICAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cblx0ICAgIHZhciB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4qMik7XG5cblx0ICAgIGZvciAob3V0PTAsIGk9MDsgaTxsZW47KSB7XG5cdCAgICAgICAgYyA9IGJ1ZltpKytdO1xuXHQgICAgICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcblx0ICAgICAgICBpZiAoYyA8IDB4ODApIHsgdXRmMTZidWZbb3V0KytdID0gYzsgY29udGludWU7IH1cblxuXHQgICAgICAgIGNfbGVuID0gX3V0ZjhsZW5bY107XG5cdCAgICAgICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG5cdCAgICAgICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4tMTsgY29udGludWU7IH1cblxuXHQgICAgICAgIC8vIGFwcGx5IG1hc2sgb24gZmlyc3QgYnl0ZVxuXHQgICAgICAgIGMgJj0gY19sZW4gPT09IDIgPyAweDFmIDogY19sZW4gPT09IDMgPyAweDBmIDogMHgwNztcblx0ICAgICAgICAvLyBqb2luIHRoZSByZXN0XG5cdCAgICAgICAgd2hpbGUgKGNfbGVuID4gMSAmJiBpIDwgbGVuKSB7XG5cdCAgICAgICAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuXHQgICAgICAgICAgICBjX2xlbi0tO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIHRlcm1pbmF0ZWQgYnkgZW5kIG9mIHN0cmluZz9cblx0ICAgICAgICBpZiAoY19sZW4gPiAxKSB7IHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsgY29udGludWU7IH1cblxuXHQgICAgICAgIGlmIChjIDwgMHgxMDAwMCkge1xuXHQgICAgICAgICAgICB1dGYxNmJ1ZltvdXQrK10gPSBjO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGMgLT0gMHgxMDAwMDtcblx0ICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkODAwIHwgKChjID4+IDEwKSAmIDB4M2ZmKTtcblx0ICAgICAgICAgICAgdXRmMTZidWZbb3V0KytdID0gMHhkYzAwIHwgKGMgJiAweDNmZik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyBzaHJpbmtCdWYodXRmMTZidWYsIG91dClcblx0ICAgIGlmICh1dGYxNmJ1Zi5sZW5ndGggIT09IG91dCkge1xuXHQgICAgICAgIGlmKHV0ZjE2YnVmLnN1YmFycmF5KSB7XG5cdCAgICAgICAgICAgIHV0ZjE2YnVmID0gdXRmMTZidWYuc3ViYXJyYXkoMCwgb3V0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB1dGYxNmJ1Zi5sZW5ndGggPSBvdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvLyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1dGYxNmJ1Zik7XG5cdCAgICByZXR1cm4gdXRpbHMuYXBwbHlGcm9tQ2hhckNvZGUodXRmMTZidWYpO1xuXHR9O1xuXG5cblx0Ly8gVGhhdCdzIGFsbCBmb3IgdGhlIHBha28gZnVuY3Rpb25zLlxuXG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybSBhIGphdmFzY3JpcHQgc3RyaW5nIGludG8gYW4gYXJyYXkgKHR5cGVkIGlmIHBvc3NpYmxlKSBvZiBieXRlcyxcblx0ICogVVRGLTggZW5jb2RlZC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIGVuY29kZVxuXHQgKiBAcmV0dXJuIHtBcnJheXxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIFVURi04IGVuY29kZWQgc3RyaW5nLlxuXHQgKi9cblx0ZXhwb3J0cy51dGY4ZW5jb2RlID0gZnVuY3Rpb24gdXRmOGVuY29kZShzdHIpIHtcblx0ICAgIGlmIChzdXBwb3J0Lm5vZGVidWZmZXIpIHtcblx0ICAgICAgICByZXR1cm4gbm9kZUJ1ZmZlcihzdHIsIFwidXRmLThcIik7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBzdHJpbmcyYnVmKHN0cik7XG5cdH07XG5cblxuXHQvKipcblx0ICogVHJhbnNmb3JtIGEgYnl0ZXMgYXJyYXkgKG9yIGEgcmVwcmVzZW50YXRpb24pIHJlcHJlc2VudGluZyBhbiBVVEYtOCBlbmNvZGVkXG5cdCAqIHN0cmluZyBpbnRvIGEgamF2YXNjcmlwdCBzdHJpbmcuXG5cdCAqIEBwYXJhbSB7QXJyYXl8VWludDhBcnJheXxCdWZmZXJ9IGJ1ZiB0aGUgZGF0YSBkZSBkZWNvZGVcblx0ICogQHJldHVybiB7U3RyaW5nfSB0aGUgZGVjb2RlZCBzdHJpbmcuXG5cdCAqL1xuXHRleHBvcnRzLnV0ZjhkZWNvZGUgPSBmdW5jdGlvbiB1dGY4ZGVjb2RlKGJ1Zikge1xuXHQgICAgaWYgKHN1cHBvcnQubm9kZWJ1ZmZlcikge1xuXHQgICAgICAgIHJldHVybiB1dGlscy50cmFuc2Zvcm1UbyhcIm5vZGVidWZmZXJcIiwgYnVmKS50b1N0cmluZyhcInV0Zi04XCIpO1xuXHQgICAgfVxuXG5cdCAgICBidWYgPSB1dGlscy50cmFuc2Zvcm1UbyhzdXBwb3J0LnVpbnQ4YXJyYXkgPyBcInVpbnQ4YXJyYXlcIiA6IFwiYXJyYXlcIiwgYnVmKTtcblxuXHQgICAgLy8gcmV0dXJuIGJ1ZjJzdHJpbmcoYnVmKTtcblx0ICAgIC8vIENocm9tZSBwcmVmZXJzIHRvIHdvcmsgd2l0aCBcInNtYWxsXCIgY2h1bmtzIG9mIGRhdGFcblx0ICAgIC8vIGZvciB0aGUgbWV0aG9kIGJ1ZjJzdHJpbmcuXG5cdCAgICAvLyBGaXJlZm94IGFuZCBDaHJvbWUgaGFzIHRoZWlyIG93biBzaG9ydGN1dCwgSUUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSBjYXJlLlxuXHQgICAgdmFyIHJlc3VsdCA9IFtdLCBrID0gMCwgbGVuID0gYnVmLmxlbmd0aCwgY2h1bmsgPSA2NTUzNjtcblx0ICAgIHdoaWxlIChrIDwgbGVuKSB7XG5cdCAgICAgICAgdmFyIG5leHRCb3VuZGFyeSA9IHV0Zjhib3JkZXIoYnVmLCBNYXRoLm1pbihrICsgY2h1bmssIGxlbikpO1xuXHQgICAgICAgIGlmIChzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcblx0ICAgICAgICAgICAgcmVzdWx0LnB1c2goYnVmMnN0cmluZyhidWYuc3ViYXJyYXkoaywgbmV4dEJvdW5kYXJ5KSkpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJ1ZjJzdHJpbmcoYnVmLnNsaWNlKGssIG5leHRCb3VuZGFyeSkpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgayA9IG5leHRCb3VuZGFyeTtcblx0ICAgIH1cblx0ICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcblxuXHR9O1xuXHQvLyB2aW06IHNldCBzaGlmdHdpZHRoPTQgc29mdHRhYnN0b3A9NDpcblxuXHR9LHtcIi4vbm9kZUJ1ZmZlclwiOjExLFwiLi9zdXBwb3J0XCI6MTcsXCIuL3V0aWxzXCI6MjF9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHN1cHBvcnQgPSBfZGVyZXFfKCcuL3N1cHBvcnQnKTtcblx0dmFyIGNvbXByZXNzaW9ucyA9IF9kZXJlcV8oJy4vY29tcHJlc3Npb25zJyk7XG5cdHZhciBub2RlQnVmZmVyID0gX2RlcmVxXygnLi9ub2RlQnVmZmVyJyk7XG5cdC8qKlxuXHQgKiBDb252ZXJ0IGEgc3RyaW5nIHRvIGEgXCJiaW5hcnkgc3RyaW5nXCIgOiBhIHN0cmluZyBjb250YWluaW5nIG9ubHkgY2hhciBjb2RlcyBiZXR3ZWVuIDAgYW5kIDI1NS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIHRyYW5zZm9ybS5cblx0ICogQHJldHVybiB7U3RyaW5nfSB0aGUgYmluYXJ5IHN0cmluZy5cblx0ICovXG5cdGV4cG9ydHMuc3RyaW5nMmJpbmFyeSA9IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZik7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXHRleHBvcnRzLmFycmF5QnVmZmVyMkJsb2IgPSBmdW5jdGlvbihidWZmZXIpIHtcblx0ICAgIGV4cG9ydHMuY2hlY2tTdXBwb3J0KFwiYmxvYlwiKTtcblxuXHQgICAgdHJ5IHtcblx0ICAgICAgICAvLyBCbG9iIGNvbnN0cnVjdG9yXG5cdCAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZmZXJdLCB7XG5cdCAgICAgICAgICAgIHR5cGU6IFwiYXBwbGljYXRpb24vemlwXCJcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0ICAgIGNhdGNoIChlKSB7XG5cblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAvLyBkZXByZWNhdGVkLCBicm93c2VyIG9ubHksIG9sZCB3YXlcblx0ICAgICAgICAgICAgdmFyIEJ1aWxkZXIgPSB3aW5kb3cuQmxvYkJ1aWxkZXIgfHwgd2luZG93LldlYktpdEJsb2JCdWlsZGVyIHx8IHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fCB3aW5kb3cuTVNCbG9iQnVpbGRlcjtcblx0ICAgICAgICAgICAgdmFyIGJ1aWxkZXIgPSBuZXcgQnVpbGRlcigpO1xuXHQgICAgICAgICAgICBidWlsZGVyLmFwcGVuZChidWZmZXIpO1xuXHQgICAgICAgICAgICByZXR1cm4gYnVpbGRlci5nZXRCbG9iKCdhcHBsaWNhdGlvbi96aXAnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2F0Y2ggKGUpIHtcblxuXHQgICAgICAgICAgICAvLyB3ZWxsLCBmdWNrID8hXG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyA6IGNhbid0IGNvbnN0cnVjdCB0aGUgQmxvYi5cIik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cblx0fTtcblx0LyoqXG5cdCAqIFRoZSBpZGVudGl0eSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IGlucHV0IHRoZSBpbnB1dC5cblx0ICogQHJldHVybiB7T2JqZWN0fSB0aGUgc2FtZSBpbnB1dC5cblx0ICovXG5cdGZ1bmN0aW9uIGlkZW50aXR5KGlucHV0KSB7XG5cdCAgICByZXR1cm4gaW5wdXQ7XG5cdH1cblxuXHQvKipcblx0ICogRmlsbCBpbiBhbiBhcnJheSB3aXRoIGEgc3RyaW5nLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gdXNlLlxuXHQgKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJheSB0aGUgYXJyYXkgdG8gZmlsbCBpbiAod2lsbCBiZSBtdXRhdGVkKS5cblx0ICogQHJldHVybiB7QXJyYXl8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IHRoZSB1cGRhdGVkIGFycmF5LlxuXHQgKi9cblx0ZnVuY3Rpb24gc3RyaW5nVG9BcnJheUxpa2Uoc3RyLCBhcnJheSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICBhcnJheVtpXSA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnJheTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm0gYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYSBzdHJpbmcuXG5cdCAqIEBwYXJhbSB7QXJyYXl8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGFycmF5IHRoZSBhcnJheSB0byB0cmFuc2Zvcm0uXG5cdCAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHJlc3VsdC5cblx0ICovXG5cdGZ1bmN0aW9uIGFycmF5TGlrZVRvU3RyaW5nKGFycmF5KSB7XG5cdCAgICAvLyBQZXJmb3JtYW5jZXMgbm90ZXMgOlxuXHQgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0ICAgIC8vIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkpIGlzIHRoZSBmYXN0ZXN0LCBzZWVcblx0ICAgIC8vIHNlZSBodHRwOi8vanNwZXJmLmNvbS9jb252ZXJ0aW5nLWEtdWludDhhcnJheS10by1hLXN0cmluZy8yXG5cdCAgICAvLyBidXQgdGhlIHN0YWNrIGlzIGxpbWl0ZWQgKGFuZCB3ZSBjYW4gZ2V0IGh1Z2UgYXJyYXlzICEpLlxuXHQgICAgLy9cblx0ICAgIC8vIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGFycmF5W2ldKTsgZ2VuZXJhdGUgdG9vIG1hbnkgc3RyaW5ncyAhXG5cdCAgICAvL1xuXHQgICAgLy8gVGhpcyBjb2RlIGlzIGluc3BpcmVkIGJ5IGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5YnVmZmVyLXRvLXN0cmluZy1hcHBseS1wZXJmb3JtYW5jZS8yXG5cdCAgICB2YXIgY2h1bmsgPSA2NTUzNjtcblx0ICAgIHZhciByZXN1bHQgPSBbXSxcblx0ICAgICAgICBsZW4gPSBhcnJheS5sZW5ndGgsXG5cdCAgICAgICAgdHlwZSA9IGV4cG9ydHMuZ2V0VHlwZU9mKGFycmF5KSxcblx0ICAgICAgICBrID0gMCxcblx0ICAgICAgICBjYW5Vc2VBcHBseSA9IHRydWU7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgIHN3aXRjaCh0eXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2UgXCJ1aW50OGFycmF5XCI6XG5cdCAgICAgICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoMCkpO1xuXHQgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBcIm5vZGVidWZmZXJcIjpcblx0ICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBub2RlQnVmZmVyKDApKTtcblx0ICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgIH1cblx0ICAgICAgfSBjYXRjaChlKSB7XG5cdCAgICAgICAgIGNhblVzZUFwcGx5ID0gZmFsc2U7XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBubyBhcHBseSA6IHNsb3cgYW5kIHBhaW5mdWwgYWxnb3JpdGhtXG5cdCAgICAgIC8vIGRlZmF1bHQgYnJvd3NlciBvbiBhbmRyb2lkIDQuKlxuXHQgICAgICBpZiAoIWNhblVzZUFwcGx5KSB7XG5cdCAgICAgICAgIHZhciByZXN1bHRTdHIgPSBcIlwiO1xuXHQgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoO2krKykge1xuXHQgICAgICAgICAgICByZXN1bHRTdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShhcnJheVtpXSk7XG5cdCAgICAgICAgIH1cblx0ICAgIHJldHVybiByZXN1bHRTdHI7XG5cdCAgICB9XG5cdCAgICB3aGlsZSAoayA8IGxlbiAmJiBjaHVuayA+IDEpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhcnJheVwiIHx8IHR5cGUgPT09IFwibm9kZWJ1ZmZlclwiKSB7XG5cdCAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGFycmF5LnNsaWNlKGssIE1hdGgubWluKGsgKyBjaHVuaywgbGVuKSkpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkuc3ViYXJyYXkoaywgTWF0aC5taW4oayArIGNodW5rLCBsZW4pKSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGsgKz0gY2h1bms7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGNodW5rID0gTWF0aC5mbG9vcihjaHVuayAvIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcblx0fVxuXG5cdGV4cG9ydHMuYXBwbHlGcm9tQ2hhckNvZGUgPSBhcnJheUxpa2VUb1N0cmluZztcblxuXG5cdC8qKlxuXHQgKiBDb3B5IHRoZSBkYXRhIGZyb20gYW4gYXJyYXktbGlrZSB0byBhbiBvdGhlciBhcnJheS1saWtlLlxuXHQgKiBAcGFyYW0ge0FycmF5fEFycmF5QnVmZmVyfFVpbnQ4QXJyYXl8QnVmZmVyfSBhcnJheUZyb20gdGhlIG9yaWdpbiBhcnJheS5cblx0ICogQHBhcmFtIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gYXJyYXlUbyB0aGUgZGVzdGluYXRpb24gYXJyYXkgd2hpY2ggd2lsbCBiZSBtdXRhdGVkLlxuXHQgKiBAcmV0dXJuIHtBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gdGhlIHVwZGF0ZWQgZGVzdGluYXRpb24gYXJyYXkuXG5cdCAqL1xuXHRmdW5jdGlvbiBhcnJheUxpa2VUb0FycmF5TGlrZShhcnJheUZyb20sIGFycmF5VG8pIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlGcm9tLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgYXJyYXlUb1tpXSA9IGFycmF5RnJvbVtpXTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnJheVRvO1xuXHR9XG5cblx0Ly8gYSBtYXRyaXggY29udGFpbmluZyBmdW5jdGlvbnMgdG8gdHJhbnNmb3JtIGV2ZXJ5dGhpbmcgaW50byBldmVyeXRoaW5nLlxuXHR2YXIgdHJhbnNmb3JtID0ge307XG5cblx0Ly8gc3RyaW5nIHRvID9cblx0dHJhbnNmb3JtW1wic3RyaW5nXCJdID0ge1xuXHQgICAgXCJzdHJpbmdcIjogaWRlbnRpdHksXG5cdCAgICBcImFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIHN0cmluZ1RvQXJyYXlMaWtlKGlucHV0LCBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoKSk7XG5cdCAgICB9LFxuXHQgICAgXCJhcnJheWJ1ZmZlclwiOiBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgICAgIHJldHVybiB0cmFuc2Zvcm1bXCJzdHJpbmdcIl1bXCJ1aW50OGFycmF5XCJdKGlucHV0KS5idWZmZXI7XG5cdCAgICB9LFxuXHQgICAgXCJ1aW50OGFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIHN0cmluZ1RvQXJyYXlMaWtlKGlucHV0LCBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGgpKTtcblx0ICAgIH0sXG5cdCAgICBcIm5vZGVidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gc3RyaW5nVG9BcnJheUxpa2UoaW5wdXQsIG5vZGVCdWZmZXIoaW5wdXQubGVuZ3RoKSk7XG5cdCAgICB9XG5cdH07XG5cblx0Ly8gYXJyYXkgdG8gP1xuXHR0cmFuc2Zvcm1bXCJhcnJheVwiXSA9IHtcblx0ICAgIFwic3RyaW5nXCI6IGFycmF5TGlrZVRvU3RyaW5nLFxuXHQgICAgXCJhcnJheVwiOiBpZGVudGl0eSxcblx0ICAgIFwiYXJyYXlidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gKG5ldyBVaW50OEFycmF5KGlucHV0KSkuYnVmZmVyO1xuXHQgICAgfSxcblx0ICAgIFwidWludDhhcnJheVwiOiBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShpbnB1dCk7XG5cdCAgICB9LFxuXHQgICAgXCJub2RlYnVmZmVyXCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIG5vZGVCdWZmZXIoaW5wdXQpO1xuXHQgICAgfVxuXHR9O1xuXG5cdC8vIGFycmF5YnVmZmVyIHRvID9cblx0dHJhbnNmb3JtW1wiYXJyYXlidWZmZXJcIl0gPSB7XG5cdCAgICBcInN0cmluZ1wiOiBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgICAgIHJldHVybiBhcnJheUxpa2VUb1N0cmluZyhuZXcgVWludDhBcnJheShpbnB1dCkpO1xuXHQgICAgfSxcblx0ICAgIFwiYXJyYXlcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UobmV3IFVpbnQ4QXJyYXkoaW5wdXQpLCBuZXcgQXJyYXkoaW5wdXQuYnl0ZUxlbmd0aCkpO1xuXHQgICAgfSxcblx0ICAgIFwiYXJyYXlidWZmZXJcIjogaWRlbnRpdHksXG5cdCAgICBcInVpbnQ4YXJyYXlcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xuXHQgICAgfSxcblx0ICAgIFwibm9kZWJ1ZmZlclwiOiBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgICAgIHJldHVybiBub2RlQnVmZmVyKG5ldyBVaW50OEFycmF5KGlucHV0KSk7XG5cdCAgICB9XG5cdH07XG5cblx0Ly8gdWludDhhcnJheSB0byA/XG5cdHRyYW5zZm9ybVtcInVpbnQ4YXJyYXlcIl0gPSB7XG5cdCAgICBcInN0cmluZ1wiOiBhcnJheUxpa2VUb1N0cmluZyxcblx0ICAgIFwiYXJyYXlcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UoaW5wdXQsIG5ldyBBcnJheShpbnB1dC5sZW5ndGgpKTtcblx0ICAgIH0sXG5cdCAgICBcImFycmF5YnVmZmVyXCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0LmJ1ZmZlcjtcblx0ICAgIH0sXG5cdCAgICBcInVpbnQ4YXJyYXlcIjogaWRlbnRpdHksXG5cdCAgICBcIm5vZGVidWZmZXJcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gbm9kZUJ1ZmZlcihpbnB1dCk7XG5cdCAgICB9XG5cdH07XG5cblx0Ly8gbm9kZWJ1ZmZlciB0byA/XG5cdHRyYW5zZm9ybVtcIm5vZGVidWZmZXJcIl0gPSB7XG5cdCAgICBcInN0cmluZ1wiOiBhcnJheUxpa2VUb1N0cmluZyxcblx0ICAgIFwiYXJyYXlcIjogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgICAgICByZXR1cm4gYXJyYXlMaWtlVG9BcnJheUxpa2UoaW5wdXQsIG5ldyBBcnJheShpbnB1dC5sZW5ndGgpKTtcblx0ICAgIH0sXG5cdCAgICBcImFycmF5YnVmZmVyXCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIHRyYW5zZm9ybVtcIm5vZGVidWZmZXJcIl1bXCJ1aW50OGFycmF5XCJdKGlucHV0KS5idWZmZXI7XG5cdCAgICB9LFxuXHQgICAgXCJ1aW50OGFycmF5XCI6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICAgICAgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXlMaWtlKGlucHV0LCBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGgpKTtcblx0ICAgIH0sXG5cdCAgICBcIm5vZGVidWZmZXJcIjogaWRlbnRpdHlcblx0fTtcblxuXHQvKipcblx0ICogVHJhbnNmb3JtIGFuIGlucHV0IGludG8gYW55IHR5cGUuXG5cdCAqIFRoZSBzdXBwb3J0ZWQgb3V0cHV0IHR5cGUgYXJlIDogc3RyaW5nLCBhcnJheSwgdWludDhhcnJheSwgYXJyYXlidWZmZXIsIG5vZGVidWZmZXIuXG5cdCAqIElmIG5vIG91dHB1dCB0eXBlIGlzIHNwZWNpZmllZCwgdGhlIHVubW9kaWZpZWQgaW5wdXQgd2lsbCBiZSByZXR1cm5lZC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IG91dHB1dFR5cGUgdGhlIG91dHB1dCB0eXBlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ3xBcnJheXxBcnJheUJ1ZmZlcnxVaW50OEFycmF5fEJ1ZmZlcn0gaW5wdXQgdGhlIGlucHV0IHRvIGNvbnZlcnQuXG5cdCAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIHJlcXVlc3RlZCBvdXRwdXQgdHlwZS5cblx0ICovXG5cdGV4cG9ydHMudHJhbnNmb3JtVG8gPSBmdW5jdGlvbihvdXRwdXRUeXBlLCBpbnB1dCkge1xuXHQgICAgaWYgKCFpbnB1dCkge1xuXHQgICAgICAgIC8vIHVuZGVmaW5lZCwgbnVsbCwgZXRjXG5cdCAgICAgICAgLy8gYW4gZW1wdHkgc3RyaW5nIHdvbid0IGhhcm0uXG5cdCAgICAgICAgaW5wdXQgPSBcIlwiO1xuXHQgICAgfVxuXHQgICAgaWYgKCFvdXRwdXRUeXBlKSB7XG5cdCAgICAgICAgcmV0dXJuIGlucHV0O1xuXHQgICAgfVxuXHQgICAgZXhwb3J0cy5jaGVja1N1cHBvcnQob3V0cHV0VHlwZSk7XG5cdCAgICB2YXIgaW5wdXRUeXBlID0gZXhwb3J0cy5nZXRUeXBlT2YoaW5wdXQpO1xuXHQgICAgdmFyIHJlc3VsdCA9IHRyYW5zZm9ybVtpbnB1dFR5cGVdW291dHB1dFR5cGVdKGlucHV0KTtcblx0ICAgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybiB0aGUgdHlwZSBvZiB0aGUgaW5wdXQuXG5cdCAqIFRoZSB0eXBlIHdpbGwgYmUgaW4gYSBmb3JtYXQgdmFsaWQgZm9yIEpTWmlwLnV0aWxzLnRyYW5zZm9ybVRvIDogc3RyaW5nLCBhcnJheSwgdWludDhhcnJheSwgYXJyYXlidWZmZXIuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCB0aGUgaW5wdXQgdG8gaWRlbnRpZnkuXG5cdCAqIEByZXR1cm4ge1N0cmluZ30gdGhlIChsb3dlcmNhc2UpIHR5cGUgb2YgdGhlIGlucHV0LlxuXHQgKi9cblx0ZXhwb3J0cy5nZXRUeXBlT2YgPSBmdW5jdGlvbihpbnB1dCkge1xuXHQgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuXHQgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuXHQgICAgfVxuXHQgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09IFwiW29iamVjdCBBcnJheV1cIikge1xuXHQgICAgICAgIHJldHVybiBcImFycmF5XCI7XG5cdCAgICB9XG5cdCAgICBpZiAoc3VwcG9ydC5ub2RlYnVmZmVyICYmIG5vZGVCdWZmZXIudGVzdChpbnB1dCkpIHtcblx0ICAgICAgICByZXR1cm4gXCJub2RlYnVmZmVyXCI7XG5cdCAgICB9XG5cdCAgICBpZiAoc3VwcG9ydC51aW50OGFycmF5ICYmIGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHQgICAgICAgIHJldHVybiBcInVpbnQ4YXJyYXlcIjtcblx0ICAgIH1cblx0ICAgIGlmIChzdXBwb3J0LmFycmF5YnVmZmVyICYmIGlucHV0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0ICAgICAgICByZXR1cm4gXCJhcnJheWJ1ZmZlclwiO1xuXHQgICAgfVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaHJvdyBhbiBleGNlcHRpb24gaWYgdGhlIHR5cGUgaXMgbm90IHN1cHBvcnRlZC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgdGhlIHR5cGUgdG8gY2hlY2suXG5cdCAqIEB0aHJvd3Mge0Vycm9yfSBhbiBFcnJvciBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIHJlcXVlc3RlZCB0eXBlLlxuXHQgKi9cblx0ZXhwb3J0cy5jaGVja1N1cHBvcnQgPSBmdW5jdGlvbih0eXBlKSB7XG5cdCAgICB2YXIgc3VwcG9ydGVkID0gc3VwcG9ydFt0eXBlLnRvTG93ZXJDYXNlKCldO1xuXHQgICAgaWYgKCFzdXBwb3J0ZWQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IodHlwZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXCIpO1xuXHQgICAgfVxuXHR9O1xuXHRleHBvcnRzLk1BWF9WQUxVRV8xNkJJVFMgPSA2NTUzNTtcblx0ZXhwb3J0cy5NQVhfVkFMVUVfMzJCSVRTID0gLTE7IC8vIHdlbGwsIFwiXFx4RkZcXHhGRlxceEZGXFx4RkZcXHhGRlxceEZGXFx4RkZcXHhGRlwiIGlzIHBhcnNlZCBhcyAtMVxuXG5cdC8qKlxuXHQgKiBQcmV0dGlmeSBhIHN0cmluZyByZWFkIGFzIGJpbmFyeS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0ciB0aGUgc3RyaW5nIHRvIHByZXR0aWZ5LlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IGEgcHJldHR5IHN0cmluZy5cblx0ICovXG5cdGV4cG9ydHMucHJldHR5ID0gZnVuY3Rpb24oc3RyKSB7XG5cdCAgICB2YXIgcmVzID0gJycsXG5cdCAgICAgICAgY29kZSwgaTtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCAoc3RyIHx8IFwiXCIpLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuXHQgICAgICAgIHJlcyArPSAnXFxcXHgnICsgKGNvZGUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlcztcblx0fTtcblxuXHQvKipcblx0ICogRmluZCBhIGNvbXByZXNzaW9uIHJlZ2lzdGVyZWQgaW4gSlNaaXAuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBjb21wcmVzc2lvbk1ldGhvZCB0aGUgbWV0aG9kIG1hZ2ljIHRvIGZpbmQuXG5cdCAqIEByZXR1cm4ge09iamVjdHxudWxsfSB0aGUgSlNaaXAgY29tcHJlc3Npb24gb2JqZWN0LCBudWxsIGlmIG5vbmUgZm91bmQuXG5cdCAqL1xuXHRleHBvcnRzLmZpbmRDb21wcmVzc2lvbiA9IGZ1bmN0aW9uKGNvbXByZXNzaW9uTWV0aG9kKSB7XG5cdCAgICBmb3IgKHZhciBtZXRob2QgaW4gY29tcHJlc3Npb25zKSB7XG5cdCAgICAgICAgaWYgKCFjb21wcmVzc2lvbnMuaGFzT3duUHJvcGVydHkobWV0aG9kKSkge1xuXHQgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNvbXByZXNzaW9uc1ttZXRob2RdLm1hZ2ljID09PSBjb21wcmVzc2lvbk1ldGhvZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gY29tcHJlc3Npb25zW21ldGhvZF07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdH07XG5cdC8qKlxuXHQqIENyb3NzLXdpbmRvdywgY3Jvc3MtTm9kZS1jb250ZXh0IHJlZ3VsYXIgZXhwcmVzc2lvbiBkZXRlY3Rpb25cblx0KiBAcGFyYW0gIHtPYmplY3R9ICBvYmplY3QgQW55dGhpbmdcblx0KiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgcmVndWxhciBleHByZXNzaW9uLFxuXHQqIGZhbHNlIG90aGVyd2lzZVxuXHQqL1xuXHRleHBvcnRzLmlzUmVnRXhwID0gZnVuY3Rpb24gKG9iamVjdCkge1xuXHQgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSBcIltvYmplY3QgUmVnRXhwXVwiO1xuXHR9O1xuXG5cblx0fSx7XCIuL2NvbXByZXNzaW9uc1wiOjMsXCIuL25vZGVCdWZmZXJcIjoxMSxcIi4vc3VwcG9ydFwiOjE3fV0sMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBTdHJpbmdSZWFkZXIgPSBfZGVyZXFfKCcuL3N0cmluZ1JlYWRlcicpO1xuXHR2YXIgTm9kZUJ1ZmZlclJlYWRlciA9IF9kZXJlcV8oJy4vbm9kZUJ1ZmZlclJlYWRlcicpO1xuXHR2YXIgVWludDhBcnJheVJlYWRlciA9IF9kZXJlcV8oJy4vdWludDhBcnJheVJlYWRlcicpO1xuXHR2YXIgdXRpbHMgPSBfZGVyZXFfKCcuL3V0aWxzJyk7XG5cdHZhciBzaWcgPSBfZGVyZXFfKCcuL3NpZ25hdHVyZScpO1xuXHR2YXIgWmlwRW50cnkgPSBfZGVyZXFfKCcuL3ppcEVudHJ5Jyk7XG5cdHZhciBzdXBwb3J0ID0gX2RlcmVxXygnLi9zdXBwb3J0Jyk7XG5cdHZhciBqc3ppcFByb3RvID0gX2RlcmVxXygnLi9vYmplY3QnKTtcblx0Ly8gIGNsYXNzIFppcEVudHJpZXMge3t7XG5cdC8qKlxuXHQgKiBBbGwgdGhlIGVudHJpZXMgaW4gdGhlIHppcCBmaWxlLlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheX0gZGF0YSB0aGUgYmluYXJ5IHN0cmVhbSB0byBsb2FkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbG9hZE9wdGlvbnMgT3B0aW9ucyBmb3IgbG9hZGluZyB0aGUgc3RyZWFtLlxuXHQgKi9cblx0ZnVuY3Rpb24gWmlwRW50cmllcyhkYXRhLCBsb2FkT3B0aW9ucykge1xuXHQgICAgdGhpcy5maWxlcyA9IFtdO1xuXHQgICAgdGhpcy5sb2FkT3B0aW9ucyA9IGxvYWRPcHRpb25zO1xuXHQgICAgaWYgKGRhdGEpIHtcblx0ICAgICAgICB0aGlzLmxvYWQoZGF0YSk7XG5cdCAgICB9XG5cdH1cblx0WmlwRW50cmllcy5wcm90b3R5cGUgPSB7XG5cdCAgICAvKipcblx0ICAgICAqIENoZWNrIHRoYXQgdGhlIHJlYWRlciBpcyBvbiB0aGUgc3BlZmljaWVkIHNpZ25hdHVyZS5cblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHBlY3RlZFNpZ25hdHVyZSB0aGUgZXhwZWN0ZWQgc2lnbmF0dXJlLlxuXHQgICAgICogQHRocm93cyB7RXJyb3J9IGlmIGl0IGlzIGFuIG90aGVyIHNpZ25hdHVyZS5cblx0ICAgICAqL1xuXHQgICAgY2hlY2tTaWduYXR1cmU6IGZ1bmN0aW9uKGV4cGVjdGVkU2lnbmF0dXJlKSB7XG5cdCAgICAgICAgdmFyIHNpZ25hdHVyZSA9IHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCk7XG5cdCAgICAgICAgaWYgKHNpZ25hdHVyZSAhPT0gZXhwZWN0ZWRTaWduYXR1cmUpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWcgOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSBcIiArIFwiKFwiICsgdXRpbHMucHJldHR5KHNpZ25hdHVyZSkgKyBcIiwgZXhwZWN0ZWQgXCIgKyB1dGlscy5wcmV0dHkoZXhwZWN0ZWRTaWduYXR1cmUpICsgXCIpXCIpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFJlYWQgdGhlIGVuZCBvZiB0aGUgY2VudHJhbCBkaXJlY3RvcnkuXG5cdCAgICAgKi9cblx0ICAgIHJlYWRCbG9ja0VuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdGhpcy5kaXNrTnVtYmVyID0gdGhpcy5yZWFkZXIucmVhZEludCgyKTtcblx0ICAgICAgICB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID0gdGhpcy5yZWFkZXIucmVhZEludCgyKTtcblx0ICAgICAgICB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyU2l6ZSA9IHRoaXMucmVhZGVyLnJlYWRJbnQoNCk7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcblxuXHQgICAgICAgIHRoaXMuemlwQ29tbWVudExlbmd0aCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgLy8gd2FybmluZyA6IHRoZSBlbmNvZGluZyBkZXBlbmRzIG9mIHRoZSBzeXN0ZW0gbG9jYWxlXG5cdCAgICAgICAgLy8gT24gYSBsaW51eCBtYWNoaW5lIHdpdGggTEFORz1lbl9VUy51dGY4LCB0aGlzIGZpZWxkIGlzIHV0ZjggZW5jb2RlZC5cblx0ICAgICAgICAvLyBPbiBhIHdpbmRvd3MgbWFjaGluZSwgdGhpcyBmaWVsZCBpcyBlbmNvZGVkIHdpdGggdGhlIGxvY2FsaXplZCB3aW5kb3dzIGNvZGUgcGFnZS5cblx0ICAgICAgICB0aGlzLnppcENvbW1lbnQgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKHRoaXMuemlwQ29tbWVudExlbmd0aCk7XG5cdCAgICAgICAgLy8gVG8gZ2V0IGNvbnNpc3RlbnQgYmVoYXZpb3Igd2l0aCB0aGUgZ2VuZXJhdGlvbiBwYXJ0LCB3ZSB3aWxsIGFzc3VtZSB0aGF0XG5cdCAgICAgICAgLy8gdGhpcyBpcyB1dGY4IGVuY29kZWQuXG5cdCAgICAgICAgdGhpcy56aXBDb21tZW50ID0ganN6aXBQcm90by51dGY4ZGVjb2RlKHRoaXMuemlwQ29tbWVudCk7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWFkIHRoZSBlbmQgb2YgdGhlIFppcCA2NCBjZW50cmFsIGRpcmVjdG9yeS5cblx0ICAgICAqIE5vdCBtZXJnZWQgd2l0aCB0aGUgbWV0aG9kIHJlYWRFbmRPZkNlbnRyYWwgOlxuXHQgICAgICogVGhlIGVuZCBvZiBjZW50cmFsIGNhbiBjb2V4aXN0IHdpdGggaXRzIFppcDY0IGJyb3RoZXIsXG5cdCAgICAgKiBJIGRvbid0IHdhbnQgdG8gcmVhZCB0aGUgd3JvbmcgbnVtYmVyIG9mIGJ5dGVzICFcblx0ICAgICAqL1xuXHQgICAgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWw6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHRoaXMuemlwNjRFbmRPZkNlbnRyYWxTaXplID0gdGhpcy5yZWFkZXIucmVhZEludCg4KTtcblx0ICAgICAgICB0aGlzLnZlcnNpb25NYWRlQnkgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKDIpO1xuXHQgICAgICAgIHRoaXMudmVyc2lvbk5lZWRlZCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5kaXNrTnVtYmVyID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcblx0ICAgICAgICB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcblx0ICAgICAgICB0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzayA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyUmVjb3JkcyA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyU2l6ZSA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG5cdCAgICAgICAgdGhpcy5jZW50cmFsRGlyT2Zmc2V0ID0gdGhpcy5yZWFkZXIucmVhZEludCg4KTtcblxuXHQgICAgICAgIHRoaXMuemlwNjRFeHRlbnNpYmxlRGF0YSA9IHt9O1xuXHQgICAgICAgIHZhciBleHRyYURhdGFTaXplID0gdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUgLSA0NCxcblx0ICAgICAgICAgICAgaW5kZXggPSAwLFxuXHQgICAgICAgICAgICBleHRyYUZpZWxkSWQsXG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRMZW5ndGgsXG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRWYWx1ZTtcblx0ICAgICAgICB3aGlsZSAoaW5kZXggPCBleHRyYURhdGFTaXplKSB7XG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRJZCA9IHRoaXMucmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRMZW5ndGggPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpO1xuXHQgICAgICAgICAgICBleHRyYUZpZWxkVmFsdWUgPSB0aGlzLnJlYWRlci5yZWFkU3RyaW5nKGV4dHJhRmllbGRMZW5ndGgpO1xuXHQgICAgICAgICAgICB0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbZXh0cmFGaWVsZElkXSA9IHtcblx0ICAgICAgICAgICAgICAgIGlkOiBleHRyYUZpZWxkSWQsXG5cdCAgICAgICAgICAgICAgICBsZW5ndGg6IGV4dHJhRmllbGRMZW5ndGgsXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogZXh0cmFGaWVsZFZhbHVlXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogUmVhZCB0aGUgZW5kIG9mIHRoZSBaaXAgNjQgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvci5cblx0ICAgICAqL1xuXHQgICAgcmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGlzLmRpc2tXaXRoWmlwNjRDZW50cmFsRGlyU3RhcnQgPSB0aGlzLnJlYWRlci5yZWFkSW50KDQpO1xuXHQgICAgICAgIHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciA9IHRoaXMucmVhZGVyLnJlYWRJbnQoOCk7XG5cdCAgICAgICAgdGhpcy5kaXNrc0NvdW50ID0gdGhpcy5yZWFkZXIucmVhZEludCg0KTtcblx0ICAgICAgICBpZiAodGhpcy5kaXNrc0NvdW50ID4gMSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdWx0aS12b2x1bWVzIHppcCBhcmUgbm90IHN1cHBvcnRlZFwiKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWFkIHRoZSBsb2NhbCBmaWxlcywgYmFzZWQgb24gdGhlIG9mZnNldCByZWFkIGluIHRoZSBjZW50cmFsIHBhcnQuXG5cdCAgICAgKi9cblx0ICAgIHJlYWRMb2NhbEZpbGVzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgaSwgZmlsZTtcblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBmaWxlID0gdGhpcy5maWxlc1tpXTtcblx0ICAgICAgICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgoZmlsZS5sb2NhbEhlYWRlck9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuY2hlY2tTaWduYXR1cmUoc2lnLkxPQ0FMX0ZJTEVfSEVBREVSKTtcblx0ICAgICAgICAgICAgZmlsZS5yZWFkTG9jYWxQYXJ0KHRoaXMucmVhZGVyKTtcblx0ICAgICAgICAgICAgZmlsZS5oYW5kbGVVVEY4KCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogUmVhZCB0aGUgY2VudHJhbCBkaXJlY3RvcnkuXG5cdCAgICAgKi9cblx0ICAgIHJlYWRDZW50cmFsRGlyOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgZmlsZTtcblxuXHQgICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMuY2VudHJhbERpck9mZnNldCk7XG5cdCAgICAgICAgd2hpbGUgKHRoaXMucmVhZGVyLnJlYWRTdHJpbmcoNCkgPT09IHNpZy5DRU5UUkFMX0ZJTEVfSEVBREVSKSB7XG5cdCAgICAgICAgICAgIGZpbGUgPSBuZXcgWmlwRW50cnkoe1xuXHQgICAgICAgICAgICAgICAgemlwNjQ6IHRoaXMuemlwNjRcblx0ICAgICAgICAgICAgfSwgdGhpcy5sb2FkT3B0aW9ucyk7XG5cdCAgICAgICAgICAgIGZpbGUucmVhZENlbnRyYWxQYXJ0KHRoaXMucmVhZGVyKTtcblx0ICAgICAgICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFJlYWQgdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeS5cblx0ICAgICAqL1xuXHQgICAgcmVhZEVuZE9mQ2VudHJhbDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO1xuXHQgICAgICAgIGlmIChvZmZzZXQgPT09IC0xKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5yZWFkZXIuc2V0SW5kZXgob2Zmc2V0KTtcblx0ICAgICAgICB0aGlzLmNoZWNrU2lnbmF0dXJlKHNpZy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpO1xuXHQgICAgICAgIHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCk7XG5cblxuXHQgICAgICAgIC8qIGV4dHJhY3QgZnJvbSB0aGUgemlwIHNwZWMgOlxuXHQgICAgICAgICAgICA0KSAgSWYgb25lIG9mIHRoZSBmaWVsZHMgaW4gdGhlIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVxuXHQgICAgICAgICAgICAgICAgcmVjb3JkIGlzIHRvbyBzbWFsbCB0byBob2xkIHJlcXVpcmVkIGRhdGEsIHRoZSBmaWVsZFxuXHQgICAgICAgICAgICAgICAgc2hvdWxkIGJlIHNldCB0byAtMSAoMHhGRkZGIG9yIDB4RkZGRkZGRkYpIGFuZCB0aGVcblx0ICAgICAgICAgICAgICAgIFpJUDY0IGZvcm1hdCByZWNvcmQgc2hvdWxkIGJlIGNyZWF0ZWQuXG5cdCAgICAgICAgICAgIDUpICBUaGUgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IHJlY29yZCBhbmQgdGhlXG5cdCAgICAgICAgICAgICAgICBaaXA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvciByZWNvcmQgbXVzdFxuXHQgICAgICAgICAgICAgICAgcmVzaWRlIG9uIHRoZSBzYW1lIGRpc2sgd2hlbiBzcGxpdHRpbmcgb3Igc3Bhbm5pbmdcblx0ICAgICAgICAgICAgICAgIGFuIGFyY2hpdmUuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaWYgKHRoaXMuZGlza051bWJlciA9PT0gdXRpbHMuTUFYX1ZBTFVFXzE2QklUUyB8fCB0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0ID09PSB1dGlscy5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclJlY29yZHNPblRoaXNEaXNrID09PSB1dGlscy5NQVhfVkFMVUVfMTZCSVRTIHx8IHRoaXMuY2VudHJhbERpclJlY29yZHMgPT09IHV0aWxzLk1BWF9WQUxVRV8xNkJJVFMgfHwgdGhpcy5jZW50cmFsRGlyU2l6ZSA9PT0gdXRpbHMuTUFYX1ZBTFVFXzMyQklUUyB8fCB0aGlzLmNlbnRyYWxEaXJPZmZzZXQgPT09IHV0aWxzLk1BWF9WQUxVRV8zMkJJVFMpIHtcblx0ICAgICAgICAgICAgdGhpcy56aXA2NCA9IHRydWU7XG5cblx0ICAgICAgICAgICAgLypcblx0ICAgICAgICAgICAgV2FybmluZyA6IHRoZSB6aXA2NCBleHRlbnNpb24gaXMgc3VwcG9ydGVkLCBidXQgT05MWSBpZiB0aGUgNjRiaXRzIGludGVnZXIgcmVhZCBmcm9tXG5cdCAgICAgICAgICAgIHRoZSB6aXAgZmlsZSBjYW4gZml0IGludG8gYSAzMmJpdHMgaW50ZWdlci4gVGhpcyBjYW5ub3QgYmUgc29sdmVkIDogSmF2YXNjcmlwdCByZXByZXNlbnRzXG5cdCAgICAgICAgICAgIGFsbCBudW1iZXJzIGFzIDY0LWJpdCBkb3VibGUgcHJlY2lzaW9uIElFRUUgNzU0IGZsb2F0aW5nIHBvaW50IG51bWJlcnMuXG5cdCAgICAgICAgICAgIFNvLCB3ZSBoYXZlIDUzYml0cyBmb3IgaW50ZWdlcnMgYW5kIGJpdHdpc2Ugb3BlcmF0aW9ucyB0cmVhdCBldmVyeXRoaW5nIGFzIDMyYml0cy5cblx0ICAgICAgICAgICAgc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0JpdHdpc2VfT3BlcmF0b3JzXG5cdCAgICAgICAgICAgIGFuZCBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvcHVibGljYXRpb25zL2ZpbGVzL0VDTUEtU1QvRUNNQS0yNjIucGRmIHNlY3Rpb24gOC41XG5cdCAgICAgICAgICAgICovXG5cblx0ICAgICAgICAgICAgLy8gc2hvdWxkIGxvb2sgZm9yIGEgemlwNjQgRU9DRCBsb2NhdG9yXG5cdCAgICAgICAgICAgIG9mZnNldCA9IHRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKTtcblx0ICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBjYW4ndCBmaW5kIHRoZSBaSVA2NCBlbmQgb2YgY2VudHJhbCBkaXJlY3RvcnkgbG9jYXRvclwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnJlYWRlci5zZXRJbmRleChvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLmNoZWNrU2lnbmF0dXJlKHNpZy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SKTtcblx0ICAgICAgICAgICAgdGhpcy5yZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IoKTtcblxuXHQgICAgICAgICAgICAvLyBub3cgdGhlIHppcDY0IEVPQ0QgcmVjb3JkXG5cdCAgICAgICAgICAgIHRoaXMucmVhZGVyLnNldEluZGV4KHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcik7XG5cdCAgICAgICAgICAgIHRoaXMuY2hlY2tTaWduYXR1cmUoc2lnLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCk7XG5cdCAgICAgICAgICAgIHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgcHJlcGFyZVJlYWRlcjogZnVuY3Rpb24oZGF0YSkge1xuXHQgICAgICAgIHZhciB0eXBlID0gdXRpbHMuZ2V0VHlwZU9mKGRhdGEpO1xuXHQgICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmICFzdXBwb3J0LnVpbnQ4YXJyYXkpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZWFkZXIgPSBuZXcgU3RyaW5nUmVhZGVyKGRhdGEsIHRoaXMubG9hZE9wdGlvbnMub3B0aW1pemVkQmluYXJ5U3RyaW5nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gXCJub2RlYnVmZmVyXCIpIHtcblx0ICAgICAgICAgICAgdGhpcy5yZWFkZXIgPSBuZXcgTm9kZUJ1ZmZlclJlYWRlcihkYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMucmVhZGVyID0gbmV3IFVpbnQ4QXJyYXlSZWFkZXIodXRpbHMudHJhbnNmb3JtVG8oXCJ1aW50OGFycmF5XCIsIGRhdGEpKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWFkIGEgemlwIGZpbGUgYW5kIGNyZWF0ZSBaaXBFbnRyaWVzLlxuXHQgICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXlCdWZmZXJ8VWludDhBcnJheXxCdWZmZXJ9IGRhdGEgdGhlIGJpbmFyeSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgemlwIGZpbGUuXG5cdCAgICAgKi9cblx0ICAgIGxvYWQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgICAgICB0aGlzLnByZXBhcmVSZWFkZXIoZGF0YSk7XG5cdCAgICAgICAgdGhpcy5yZWFkRW5kT2ZDZW50cmFsKCk7XG5cdCAgICAgICAgdGhpcy5yZWFkQ2VudHJhbERpcigpO1xuXHQgICAgICAgIHRoaXMucmVhZExvY2FsRmlsZXMoKTtcblx0ICAgIH1cblx0fTtcblx0Ly8gfX19IGVuZCBvZiBaaXBFbnRyaWVzXG5cdG1vZHVsZS5leHBvcnRzID0gWmlwRW50cmllcztcblxuXHR9LHtcIi4vbm9kZUJ1ZmZlclJlYWRlclwiOjEyLFwiLi9vYmplY3RcIjoxMyxcIi4vc2lnbmF0dXJlXCI6MTQsXCIuL3N0cmluZ1JlYWRlclwiOjE1LFwiLi9zdXBwb3J0XCI6MTcsXCIuL3VpbnQ4QXJyYXlSZWFkZXJcIjoxOCxcIi4vdXRpbHNcIjoyMSxcIi4vemlwRW50cnlcIjoyM31dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgU3RyaW5nUmVhZGVyID0gX2RlcmVxXygnLi9zdHJpbmdSZWFkZXInKTtcblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi91dGlscycpO1xuXHR2YXIgQ29tcHJlc3NlZE9iamVjdCA9IF9kZXJlcV8oJy4vY29tcHJlc3NlZE9iamVjdCcpO1xuXHR2YXIganN6aXBQcm90byA9IF9kZXJlcV8oJy4vb2JqZWN0Jyk7XG5cdC8vIGNsYXNzIFppcEVudHJ5IHt7e1xuXHQvKipcblx0ICogQW4gZW50cnkgaW4gdGhlIHppcCBmaWxlLlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvZiB0aGUgY3VycmVudCBmaWxlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gbG9hZE9wdGlvbnMgT3B0aW9ucyBmb3IgbG9hZGluZyB0aGUgc3RyZWFtLlxuXHQgKi9cblx0ZnVuY3Rpb24gWmlwRW50cnkob3B0aW9ucywgbG9hZE9wdGlvbnMpIHtcblx0ICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICB0aGlzLmxvYWRPcHRpb25zID0gbG9hZE9wdGlvbnM7XG5cdH1cblx0WmlwRW50cnkucHJvdG90eXBlID0ge1xuXHQgICAgLyoqXG5cdCAgICAgKiBzYXkgaWYgdGhlIGZpbGUgaXMgZW5jcnlwdGVkLlxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZmlsZSBpcyBlbmNyeXB0ZWQsIGZhbHNlIG90aGVyd2lzZS5cblx0ICAgICAqL1xuXHQgICAgaXNFbmNyeXB0ZWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIC8vIGJpdCAxIGlzIHNldFxuXHQgICAgICAgIHJldHVybiAodGhpcy5iaXRGbGFnICYgMHgwMDAxKSA9PT0gMHgwMDAxO1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogc2F5IGlmIHRoZSBmaWxlIGhhcyB1dGYtOCBmaWxlbmFtZS9jb21tZW50LlxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZmlsZW5hbWUvY29tbWVudCBpcyBpbiB1dGYtOCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgICAgICovXG5cdCAgICB1c2VVVEY4OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAvLyBiaXQgMTEgaXMgc2V0XG5cdCAgICAgICAgcmV0dXJuICh0aGlzLmJpdEZsYWcgJiAweDA4MDApID09PSAweDA4MDA7XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBQcmVwYXJlIHRoZSBmdW5jdGlvbiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjb21wcmVzc2VkIGNvbnRlbnQgZnJvbSB0aGlzIFppcEZpbGUuXG5cdCAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tIHRoZSBvZmZzZXQgZnJvbSB3aGVyZSB3ZSBzaG91bGQgcmVhZCB0aGUgZGF0YS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggdGhlIGxlbmd0aCBvZiB0aGUgZGF0YSB0byByZWFkLlxuXHQgICAgICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBnZXQgdGhlIGNvbXByZXNzZWQgY29udGVudCAodGhlIHR5cGUgZGVwZW5kcyBvZiB0aGUgRGF0YVJlYWRlciBjbGFzcykuXG5cdCAgICAgKi9cblx0ICAgIHByZXBhcmVDb21wcmVzc2VkQ29udGVudDogZnVuY3Rpb24ocmVhZGVyLCBmcm9tLCBsZW5ndGgpIHtcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0luZGV4ID0gcmVhZGVyLmluZGV4O1xuXHQgICAgICAgICAgICByZWFkZXIuc2V0SW5kZXgoZnJvbSk7XG5cdCAgICAgICAgICAgIHZhciBjb21wcmVzc2VkRmlsZURhdGEgPSByZWFkZXIucmVhZERhdGEobGVuZ3RoKTtcblx0ICAgICAgICAgICAgcmVhZGVyLnNldEluZGV4KHByZXZpb3VzSW5kZXgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjb21wcmVzc2VkRmlsZURhdGE7XG5cdCAgICAgICAgfTtcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFByZXBhcmUgdGhlIGZ1bmN0aW9uIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHVuY29tcHJlc3NlZCBjb250ZW50IGZyb20gdGhpcyBaaXBGaWxlLlxuXHQgICAgICogQHBhcmFtIHtEYXRhUmVhZGVyfSByZWFkZXIgdGhlIHJlYWRlciB0byB1c2UuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbSB0aGUgb2Zmc2V0IGZyb20gd2hlcmUgd2Ugc2hvdWxkIHJlYWQgdGhlIGRhdGEuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIHRoZSBsZW5ndGggb2YgdGhlIGRhdGEgdG8gcmVhZC5cblx0ICAgICAqIEBwYXJhbSB7SlNaaXAuY29tcHJlc3Npb259IGNvbXByZXNzaW9uIHRoZSBjb21wcmVzc2lvbiB1c2VkIG9uIHRoaXMgZmlsZS5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1bmNvbXByZXNzZWRTaXplIHRoZSB1bmNvbXByZXNzZWQgc2l6ZSB0byBleHBlY3QuXG5cdCAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGdldCB0aGUgdW5jb21wcmVzc2VkIGNvbnRlbnQgKHRoZSB0eXBlIGRlcGVuZHMgb2YgdGhlIERhdGFSZWFkZXIgY2xhc3MpLlxuXHQgICAgICovXG5cdCAgICBwcmVwYXJlQ29udGVudDogZnVuY3Rpb24ocmVhZGVyLCBmcm9tLCBsZW5ndGgsIGNvbXByZXNzaW9uLCB1bmNvbXByZXNzZWRTaXplKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXG5cdCAgICAgICAgICAgIHZhciBjb21wcmVzc2VkRmlsZURhdGEgPSB1dGlscy50cmFuc2Zvcm1Ubyhjb21wcmVzc2lvbi51bmNvbXByZXNzSW5wdXRUeXBlLCB0aGlzLmdldENvbXByZXNzZWRDb250ZW50KCkpO1xuXHQgICAgICAgICAgICB2YXIgdW5jb21wcmVzc2VkRmlsZURhdGEgPSBjb21wcmVzc2lvbi51bmNvbXByZXNzKGNvbXByZXNzZWRGaWxlRGF0YSk7XG5cblx0ICAgICAgICAgICAgaWYgKHVuY29tcHJlc3NlZEZpbGVEYXRhLmxlbmd0aCAhPT0gdW5jb21wcmVzc2VkU2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogdW5jb21wcmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaFwiKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB1bmNvbXByZXNzZWRGaWxlRGF0YTtcblx0ICAgICAgICB9O1xuXHQgICAgfSxcblx0ICAgIC8qKlxuXHQgICAgICogUmVhZCB0aGUgbG9jYWwgcGFydCBvZiBhIHppcCBmaWxlIGFuZCBhZGQgdGhlIGluZm8gaW4gdGhpcyBvYmplY3QuXG5cdCAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cblx0ICAgICAqL1xuXHQgICAgcmVhZExvY2FsUGFydDogZnVuY3Rpb24ocmVhZGVyKSB7XG5cdCAgICAgICAgdmFyIGNvbXByZXNzaW9uLCBsb2NhbEV4dHJhRmllbGRzTGVuZ3RoO1xuXG5cdCAgICAgICAgLy8gd2UgYWxyZWFkeSBrbm93IGV2ZXJ5dGhpbmcgZnJvbSB0aGUgY2VudHJhbCBkaXIgIVxuXHQgICAgICAgIC8vIElmIHRoZSBjZW50cmFsIGRpciBkYXRhIGFyZSBmYWxzZSwgd2UgYXJlIGRvb21lZC5cblx0ICAgICAgICAvLyBPbiB0aGUgYnJpZ2h0IHNpZGUsIHRoZSBsb2NhbCBwYXJ0IGlzIHNjYXJ5ICA6IHppcDY0LCBkYXRhIGRlc2NyaXB0b3JzLCBib3RoLCBldGMuXG5cdCAgICAgICAgLy8gVGhlIGxlc3MgZGF0YSB3ZSBnZXQgaGVyZSwgdGhlIG1vcmUgcmVsaWFibGUgdGhpcyBzaG91bGQgYmUuXG5cdCAgICAgICAgLy8gTGV0J3Mgc2tpcCB0aGUgd2hvbGUgaGVhZGVyIGFuZCBkYXNoIHRvIHRoZSBkYXRhICFcblx0ICAgICAgICByZWFkZXIuc2tpcCgyMik7XG5cdCAgICAgICAgLy8gaW4gc29tZSB6aXAgY3JlYXRlZCBvbiB3aW5kb3dzLCB0aGUgZmlsZW5hbWUgc3RvcmVkIGluIHRoZSBjZW50cmFsIGRpciBjb250YWlucyBcXCBpbnN0ZWFkIG9mIC8uXG5cdCAgICAgICAgLy8gU3RyYW5nZWx5LCB0aGUgZmlsZW5hbWUgaGVyZSBpcyBPSy5cblx0ICAgICAgICAvLyBJIHdvdWxkIGxvdmUgdG8gdHJlYXQgdGhlc2UgemlwIGZpbGVzIGFzIGNvcnJ1cHRlZCAoc2VlIGh0dHA6Ly93d3cuaW5mby16aXAub3JnL0ZBUS5odG1sI2JhY2tzbGFzaGVzXG5cdCAgICAgICAgLy8gb3IgQVBQTk9URSM0LjQuMTcuMSwgXCJBbGwgc2xhc2hlcyBNVVNUIGJlIGZvcndhcmQgc2xhc2hlcyAnLydcIikgYnV0IHRoZXJlIGFyZSBhIGxvdCBvZiBiYWQgemlwIGdlbmVyYXRvcnMuLi5cblx0ICAgICAgICAvLyBTZWFyY2ggXCJ1bnppcCBtaXNtYXRjaGluZyBcImxvY2FsXCIgZmlsZW5hbWUgY29udGludWluZyB3aXRoIFwiY2VudHJhbFwiIGZpbGVuYW1lIHZlcnNpb25cIiBvblxuXHQgICAgICAgIC8vIHRoZSBpbnRlcm5ldC5cblx0ICAgICAgICAvL1xuXHQgICAgICAgIC8vIEkgdGhpbmsgSSBzZWUgdGhlIGxvZ2ljIGhlcmUgOiB0aGUgY2VudHJhbCBkaXJlY3RvcnkgaXMgdXNlZCB0byBkaXNwbGF5XG5cdCAgICAgICAgLy8gY29udGVudCBhbmQgdGhlIGxvY2FsIGRpcmVjdG9yeSBpcyB1c2VkIHRvIGV4dHJhY3QgdGhlIGZpbGVzLiBNaXhpbmcgLyBhbmQgXFxcblx0ICAgICAgICAvLyBtYXkgYmUgdXNlZCB0byBkaXNwbGF5IFxcIHRvIHdpbmRvd3MgdXNlcnMgYW5kIHVzZSAvIHdoZW4gZXh0cmFjdGluZyB0aGUgZmlsZXMuXG5cdCAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgdGhpcyBsZWFkIGFsc28gdG8gc29tZSBpc3N1ZXMgOiBodHRwOi8vc2VjbGlzdHMub3JnL2Z1bGxkaXNjbG9zdXJlLzIwMDkvU2VwLzM5NFxuXHQgICAgICAgIHRoaXMuZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTtcblx0ICAgICAgICBsb2NhbEV4dHJhRmllbGRzTGVuZ3RoID0gcmVhZGVyLnJlYWRJbnQoMik7IC8vIGNhbid0IGJlIHN1cmUgdGhpcyB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSBjZW50cmFsIGRpclxuXHQgICAgICAgIHRoaXMuZmlsZU5hbWUgPSByZWFkZXIucmVhZFN0cmluZyh0aGlzLmZpbGVOYW1lTGVuZ3RoKTtcblx0ICAgICAgICByZWFkZXIuc2tpcChsb2NhbEV4dHJhRmllbGRzTGVuZ3RoKTtcblxuXHQgICAgICAgIGlmICh0aGlzLmNvbXByZXNzZWRTaXplID09IC0xIHx8IHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9PSAtMSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWcgb3IgY29ycnVwdGVkIHppcCA6IGRpZG4ndCBnZXQgZW5vdWdoIGluZm9ybWF0aW9ucyBmcm9tIHRoZSBjZW50cmFsIGRpcmVjdG9yeSBcIiArIFwiKGNvbXByZXNzZWRTaXplID09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT0gLTEpXCIpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGNvbXByZXNzaW9uID0gdXRpbHMuZmluZENvbXByZXNzaW9uKHRoaXMuY29tcHJlc3Npb25NZXRob2QpO1xuXHQgICAgICAgIGlmIChjb21wcmVzc2lvbiA9PT0gbnVsbCkgeyAvLyBubyBjb21wcmVzc2lvbiBmb3VuZFxuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogY29tcHJlc3Npb24gXCIgKyB1dGlscy5wcmV0dHkodGhpcy5jb21wcmVzc2lvbk1ldGhvZCkgKyBcIiB1bmtub3duIChpbm5lciBmaWxlIDogXCIgKyB0aGlzLmZpbGVOYW1lICsgXCIpXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmRlY29tcHJlc3NlZCA9IG5ldyBDb21wcmVzc2VkT2JqZWN0KCk7XG5cdCAgICAgICAgdGhpcy5kZWNvbXByZXNzZWQuY29tcHJlc3NlZFNpemUgPSB0aGlzLmNvbXByZXNzZWRTaXplO1xuXHQgICAgICAgIHRoaXMuZGVjb21wcmVzc2VkLnVuY29tcHJlc3NlZFNpemUgPSB0aGlzLnVuY29tcHJlc3NlZFNpemU7XG5cdCAgICAgICAgdGhpcy5kZWNvbXByZXNzZWQuY3JjMzIgPSB0aGlzLmNyYzMyO1xuXHQgICAgICAgIHRoaXMuZGVjb21wcmVzc2VkLmNvbXByZXNzaW9uTWV0aG9kID0gdGhpcy5jb21wcmVzc2lvbk1ldGhvZDtcblx0ICAgICAgICB0aGlzLmRlY29tcHJlc3NlZC5nZXRDb21wcmVzc2VkQ29udGVudCA9IHRoaXMucHJlcGFyZUNvbXByZXNzZWRDb250ZW50KHJlYWRlciwgcmVhZGVyLmluZGV4LCB0aGlzLmNvbXByZXNzZWRTaXplLCBjb21wcmVzc2lvbik7XG5cdCAgICAgICAgdGhpcy5kZWNvbXByZXNzZWQuZ2V0Q29udGVudCA9IHRoaXMucHJlcGFyZUNvbnRlbnQocmVhZGVyLCByZWFkZXIuaW5kZXgsIHRoaXMuY29tcHJlc3NlZFNpemUsIGNvbXByZXNzaW9uLCB0aGlzLnVuY29tcHJlc3NlZFNpemUpO1xuXG5cdCAgICAgICAgLy8gd2UgbmVlZCB0byBjb21wdXRlIHRoZSBjcmMzMi4uLlxuXHQgICAgICAgIGlmICh0aGlzLmxvYWRPcHRpb25zLmNoZWNrQ1JDMzIpIHtcblx0ICAgICAgICAgICAgdGhpcy5kZWNvbXByZXNzZWQgPSB1dGlscy50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLCB0aGlzLmRlY29tcHJlc3NlZC5nZXRDb250ZW50KCkpO1xuXHQgICAgICAgICAgICBpZiAoanN6aXBQcm90by5jcmMzMih0aGlzLmRlY29tcHJlc3NlZCkgIT09IHRoaXMuY3JjMzIpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBDUkMzMiBtaXNtYXRjaFwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cblx0ICAgIC8qKlxuXHQgICAgICogUmVhZCB0aGUgY2VudHJhbCBwYXJ0IG9mIGEgemlwIGZpbGUgYW5kIGFkZCB0aGUgaW5mbyBpbiB0aGlzIG9iamVjdC5cblx0ICAgICAqIEBwYXJhbSB7RGF0YVJlYWRlcn0gcmVhZGVyIHRoZSByZWFkZXIgdG8gdXNlLlxuXHQgICAgICovXG5cdCAgICByZWFkQ2VudHJhbFBhcnQ6IGZ1bmN0aW9uKHJlYWRlcikge1xuXHQgICAgICAgIHRoaXMudmVyc2lvbk1hZGVCeSA9IHJlYWRlci5yZWFkU3RyaW5nKDIpO1xuXHQgICAgICAgIHRoaXMudmVyc2lvbk5lZWRlZCA9IHJlYWRlci5yZWFkSW50KDIpO1xuXHQgICAgICAgIHRoaXMuYml0RmxhZyA9IHJlYWRlci5yZWFkSW50KDIpO1xuXHQgICAgICAgIHRoaXMuY29tcHJlc3Npb25NZXRob2QgPSByZWFkZXIucmVhZFN0cmluZygyKTtcblx0ICAgICAgICB0aGlzLmRhdGUgPSByZWFkZXIucmVhZERhdGUoKTtcblx0ICAgICAgICB0aGlzLmNyYzMyID0gcmVhZGVyLnJlYWRJbnQoNCk7XG5cdCAgICAgICAgdGhpcy5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5yZWFkSW50KDQpO1xuXHQgICAgICAgIHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9IHJlYWRlci5yZWFkSW50KDQpO1xuXHQgICAgICAgIHRoaXMuZmlsZU5hbWVMZW5ndGggPSByZWFkZXIucmVhZEludCgyKTtcblx0ICAgICAgICB0aGlzLmV4dHJhRmllbGRzTGVuZ3RoID0gcmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5maWxlQ29tbWVudExlbmd0aCA9IHJlYWRlci5yZWFkSW50KDIpO1xuXHQgICAgICAgIHRoaXMuZGlza051bWJlclN0YXJ0ID0gcmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5pbnRlcm5hbEZpbGVBdHRyaWJ1dGVzID0gcmVhZGVyLnJlYWRJbnQoMik7XG5cdCAgICAgICAgdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzID0gcmVhZGVyLnJlYWRJbnQoNCk7XG5cdCAgICAgICAgdGhpcy5sb2NhbEhlYWRlck9mZnNldCA9IHJlYWRlci5yZWFkSW50KDQpO1xuXG5cdCAgICAgICAgaWYgKHRoaXMuaXNFbmNyeXB0ZWQoKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbmNyeXB0ZWQgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMuZmlsZU5hbWUgPSByZWFkZXIucmVhZFN0cmluZyh0aGlzLmZpbGVOYW1lTGVuZ3RoKTtcblx0ICAgICAgICB0aGlzLnJlYWRFeHRyYUZpZWxkcyhyZWFkZXIpO1xuXHQgICAgICAgIHRoaXMucGFyc2VaSVA2NEV4dHJhRmllbGQocmVhZGVyKTtcblx0ICAgICAgICB0aGlzLmZpbGVDb21tZW50ID0gcmVhZGVyLnJlYWRTdHJpbmcodGhpcy5maWxlQ29tbWVudExlbmd0aCk7XG5cblx0ICAgICAgICAvLyB3YXJuaW5nLCB0aGlzIGlzIHRydWUgb25seSBmb3IgemlwIHdpdGggbWFkZUJ5ID09IERPUyAocGxhdGVmb3JtIGRlcGVuZGVudCBmZWF0dXJlKVxuXHQgICAgICAgIHRoaXMuZGlyID0gdGhpcy5leHRlcm5hbEZpbGVBdHRyaWJ1dGVzICYgMHgwMDAwMDAxMCA/IHRydWUgOiBmYWxzZTtcblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIFBhcnNlIHRoZSBaSVA2NCBleHRyYSBmaWVsZCBhbmQgbWVyZ2UgdGhlIGluZm8gaW4gdGhlIGN1cnJlbnQgWmlwRW50cnkuXG5cdCAgICAgKiBAcGFyYW0ge0RhdGFSZWFkZXJ9IHJlYWRlciB0aGUgcmVhZGVyIHRvIHVzZS5cblx0ICAgICAqL1xuXHQgICAgcGFyc2VaSVA2NEV4dHJhRmllbGQ6IGZ1bmN0aW9uKHJlYWRlcikge1xuXG5cdCAgICAgICAgaWYgKCF0aGlzLmV4dHJhRmllbGRzWzB4MDAwMV0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIHNob3VsZCBiZSBzb21ldGhpbmcsIHByZXBhcmluZyB0aGUgZXh0cmEgcmVhZGVyXG5cdCAgICAgICAgdmFyIGV4dHJhUmVhZGVyID0gbmV3IFN0cmluZ1JlYWRlcih0aGlzLmV4dHJhRmllbGRzWzB4MDAwMV0udmFsdWUpO1xuXG5cdCAgICAgICAgLy8gSSByZWFsbHkgaG9wZSB0aGF0IHRoZXNlIDY0Yml0cyBpbnRlZ2VyIGNhbiBmaXQgaW4gMzIgYml0cyBpbnRlZ2VyLCBiZWNhdXNlIGpzXG5cdCAgICAgICAgLy8gd29uJ3QgbGV0IHVzIGhhdmUgbW9yZS5cblx0ICAgICAgICBpZiAodGhpcy51bmNvbXByZXNzZWRTaXplID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG5cdCAgICAgICAgICAgIHRoaXMudW5jb21wcmVzc2VkU2l6ZSA9IGV4dHJhUmVhZGVyLnJlYWRJbnQoOCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmNvbXByZXNzZWRTaXplID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY29tcHJlc3NlZFNpemUgPSBleHRyYVJlYWRlci5yZWFkSW50KDgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5sb2NhbEhlYWRlck9mZnNldCA9PT0gdXRpbHMuTUFYX1ZBTFVFXzMyQklUUykge1xuXHQgICAgICAgICAgICB0aGlzLmxvY2FsSGVhZGVyT2Zmc2V0ID0gZXh0cmFSZWFkZXIucmVhZEludCg4KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuZGlza051bWJlclN0YXJ0ID09PSB1dGlscy5NQVhfVkFMVUVfMzJCSVRTKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZGlza051bWJlclN0YXJ0ID0gZXh0cmFSZWFkZXIucmVhZEludCg0KTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXHQgICAgLyoqXG5cdCAgICAgKiBSZWFkIHRoZSBjZW50cmFsIHBhcnQgb2YgYSB6aXAgZmlsZSBhbmQgYWRkIHRoZSBpbmZvIGluIHRoaXMgb2JqZWN0LlxuXHQgICAgICogQHBhcmFtIHtEYXRhUmVhZGVyfSByZWFkZXIgdGhlIHJlYWRlciB0byB1c2UuXG5cdCAgICAgKi9cblx0ICAgIHJlYWRFeHRyYUZpZWxkczogZnVuY3Rpb24ocmVhZGVyKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gcmVhZGVyLmluZGV4LFxuXHQgICAgICAgICAgICBleHRyYUZpZWxkSWQsXG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRMZW5ndGgsXG5cdCAgICAgICAgICAgIGV4dHJhRmllbGRWYWx1ZTtcblxuXHQgICAgICAgIHRoaXMuZXh0cmFGaWVsZHMgPSB0aGlzLmV4dHJhRmllbGRzIHx8IHt9O1xuXG5cdCAgICAgICAgd2hpbGUgKHJlYWRlci5pbmRleCA8IHN0YXJ0ICsgdGhpcy5leHRyYUZpZWxkc0xlbmd0aCkge1xuXHQgICAgICAgICAgICBleHRyYUZpZWxkSWQgPSByZWFkZXIucmVhZEludCgyKTtcblx0ICAgICAgICAgICAgZXh0cmFGaWVsZExlbmd0aCA9IHJlYWRlci5yZWFkSW50KDIpO1xuXHQgICAgICAgICAgICBleHRyYUZpZWxkVmFsdWUgPSByZWFkZXIucmVhZFN0cmluZyhleHRyYUZpZWxkTGVuZ3RoKTtcblxuXHQgICAgICAgICAgICB0aGlzLmV4dHJhRmllbGRzW2V4dHJhRmllbGRJZF0gPSB7XG5cdCAgICAgICAgICAgICAgICBpZDogZXh0cmFGaWVsZElkLFxuXHQgICAgICAgICAgICAgICAgbGVuZ3RoOiBleHRyYUZpZWxkTGVuZ3RoLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGV4dHJhRmllbGRWYWx1ZVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cdCAgICAvKipcblx0ICAgICAqIEFwcGx5IGFuIFVURjggdHJhbnNmb3JtYXRpb24gaWYgbmVlZGVkLlxuXHQgICAgICovXG5cdCAgICBoYW5kbGVVVEY4OiBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZiAodGhpcy51c2VVVEY4KCkpIHtcblx0ICAgICAgICAgICAgdGhpcy5maWxlTmFtZSA9IGpzemlwUHJvdG8udXRmOGRlY29kZSh0aGlzLmZpbGVOYW1lKTtcblx0ICAgICAgICAgICAgdGhpcy5maWxlQ29tbWVudCA9IGpzemlwUHJvdG8udXRmOGRlY29kZSh0aGlzLmZpbGVDb21tZW50KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgdXBhdGggPSB0aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGgoKTtcblx0ICAgICAgICAgICAgaWYgKHVwYXRoICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmZpbGVOYW1lID0gdXBhdGg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHVjb21tZW50ID0gdGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVDb21tZW50KCk7XG5cdCAgICAgICAgICAgIGlmICh1Y29tbWVudCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5maWxlQ29tbWVudCA9IHVjb21tZW50O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgLyoqXG5cdCAgICAgKiBGaW5kIHRoZSB1bmljb2RlIHBhdGggZGVjbGFyZWQgaW4gdGhlIGV4dHJhIGZpZWxkLCBpZiBhbnkuXG5cdCAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSB1bmljb2RlIHBhdGgsIG51bGwgb3RoZXJ3aXNlLlxuXHQgICAgICovXG5cdCAgICBmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgdXBhdGhGaWVsZCA9IHRoaXMuZXh0cmFGaWVsZHNbMHg3MDc1XTtcblx0ICAgICAgICBpZiAodXBhdGhGaWVsZCkge1xuXHQgICAgICAgICAgICB2YXIgZXh0cmFSZWFkZXIgPSBuZXcgU3RyaW5nUmVhZGVyKHVwYXRoRmllbGQudmFsdWUpO1xuXG5cdCAgICAgICAgICAgIC8vIHdyb25nIHZlcnNpb25cblx0ICAgICAgICAgICAgaWYgKGV4dHJhUmVhZGVyLnJlYWRJbnQoMSkgIT09IDEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gdGhlIGNyYyBvZiB0aGUgZmlsZW5hbWUgY2hhbmdlZCwgdGhpcyBmaWVsZCBpcyBvdXQgb2YgZGF0ZS5cblx0ICAgICAgICAgICAgaWYgKGpzemlwUHJvdG8uY3JjMzIodGhpcy5maWxlTmFtZSkgIT09IGV4dHJhUmVhZGVyLnJlYWRJbnQoNCkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGpzemlwUHJvdG8udXRmOGRlY29kZShleHRyYVJlYWRlci5yZWFkU3RyaW5nKHVwYXRoRmllbGQubGVuZ3RoIC0gNSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH0sXG5cblx0ICAgIC8qKlxuXHQgICAgICogRmluZCB0aGUgdW5pY29kZSBjb21tZW50IGRlY2xhcmVkIGluIHRoZSBleHRyYSBmaWVsZCwgaWYgYW55LlxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgdW5pY29kZSBjb21tZW50LCBudWxsIG90aGVyd2lzZS5cblx0ICAgICAqL1xuXHQgICAgZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHVjb21tZW50RmllbGQgPSB0aGlzLmV4dHJhRmllbGRzWzB4NjM3NV07XG5cdCAgICAgICAgaWYgKHVjb21tZW50RmllbGQpIHtcblx0ICAgICAgICAgICAgdmFyIGV4dHJhUmVhZGVyID0gbmV3IFN0cmluZ1JlYWRlcih1Y29tbWVudEZpZWxkLnZhbHVlKTtcblxuXHQgICAgICAgICAgICAvLyB3cm9uZyB2ZXJzaW9uXG5cdCAgICAgICAgICAgIGlmIChleHRyYVJlYWRlci5yZWFkSW50KDEpICE9PSAxKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIHRoZSBjcmMgb2YgdGhlIGNvbW1lbnQgY2hhbmdlZCwgdGhpcyBmaWVsZCBpcyBvdXQgb2YgZGF0ZS5cblx0ICAgICAgICAgICAgaWYgKGpzemlwUHJvdG8uY3JjMzIodGhpcy5maWxlQ29tbWVudCkgIT09IGV4dHJhUmVhZGVyLnJlYWRJbnQoNCkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGpzemlwUHJvdG8udXRmOGRlY29kZShleHRyYVJlYWRlci5yZWFkU3RyaW5nKHVjb21tZW50RmllbGQubGVuZ3RoIC0gNSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH1cblx0fTtcblx0bW9kdWxlLmV4cG9ydHMgPSBaaXBFbnRyeTtcblxuXHR9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL29iamVjdFwiOjEzLFwiLi9zdHJpbmdSZWFkZXJcIjoxNSxcIi4vdXRpbHNcIjoyMX1dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0Ly8gVG9wIGxldmVsIGZpbGUgaXMganVzdCBhIG1peGluIG9mIHN1Ym1vZHVsZXMgJiBjb25zdGFudHNcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBhc3NpZ24gICAgPSBfZGVyZXFfKCcuL2xpYi91dGlscy9jb21tb24nKS5hc3NpZ247XG5cblx0dmFyIGRlZmxhdGUgICA9IF9kZXJlcV8oJy4vbGliL2RlZmxhdGUnKTtcblx0dmFyIGluZmxhdGUgICA9IF9kZXJlcV8oJy4vbGliL2luZmxhdGUnKTtcblx0dmFyIGNvbnN0YW50cyA9IF9kZXJlcV8oJy4vbGliL3psaWIvY29uc3RhbnRzJyk7XG5cblx0dmFyIHBha28gPSB7fTtcblxuXHRhc3NpZ24ocGFrbywgZGVmbGF0ZSwgaW5mbGF0ZSwgY29uc3RhbnRzKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHBha287XG5cdH0se1wiLi9saWIvZGVmbGF0ZVwiOjI1LFwiLi9saWIvaW5mbGF0ZVwiOjI2LFwiLi9saWIvdXRpbHMvY29tbW9uXCI6MjcsXCIuL2xpYi96bGliL2NvbnN0YW50c1wiOjMwfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblxuXHR2YXIgemxpYl9kZWZsYXRlID0gX2RlcmVxXygnLi96bGliL2RlZmxhdGUuanMnKTtcblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi91dGlscy9jb21tb24nKTtcblx0dmFyIHN0cmluZ3MgPSBfZGVyZXFfKCcuL3V0aWxzL3N0cmluZ3MnKTtcblx0dmFyIG1zZyA9IF9kZXJlcV8oJy4vemxpYi9tZXNzYWdlcycpO1xuXHR2YXIgenN0cmVhbSA9IF9kZXJlcV8oJy4vemxpYi96c3RyZWFtJyk7XG5cblxuXHQvKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cdHZhciBaX05PX0ZMVVNIICAgICAgPSAwO1xuXHR2YXIgWl9GSU5JU0ggICAgICAgID0gNDtcblxuXHR2YXIgWl9PSyAgICAgICAgICAgID0gMDtcblx0dmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG5cblx0dmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cdHZhciBaX0RFRkFVTFRfU1RSQVRFR1kgICAgPSAwO1xuXG5cdHZhciBaX0RFRkxBVEVEICA9IDg7XG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cdC8qKlxuXHQgKiBjbGFzcyBEZWZsYXRlXG5cdCAqXG5cdCAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcblx0ICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbZGVmbGF0ZV1dLFxuXHQgKiBbW2RlZmxhdGVSYXddXSBhbmQgW1tnemlwXV0uXG5cdCAqKi9cblxuXHQvKiBpbnRlcm5hbFxuXHQgKiBEZWZsYXRlLmNodW5rcyAtPiBBcnJheVxuXHQgKlxuXHQgKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbRGVmbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGVuLlxuXHQgKiovXG5cblx0LyoqXG5cdCAqIERlZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXl8QXJyYXlcblx0ICpcblx0ICogQ29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbRGVmbGF0ZSNvbkRhdGFdXVxuXHQgKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG5cdCAqIChjYWxsIFtbRGVmbGF0ZSNwdXNoXV0gd2l0aCBgWl9GSU5JU0hgIC8gYHRydWVgIHBhcmFtKS5cblx0ICoqL1xuXG5cdC8qKlxuXHQgKiBEZWZsYXRlLmVyciAtPiBOdW1iZXJcblx0ICpcblx0ICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuXHQgKiBZb3Ugd2lsbCBub3QgbmVlZCBpdCBpbiByZWFsIGxpZmUsIGJlY2F1c2UgZGVmbGF0ZSBlcnJvcnNcblx0ICogYXJlIHBvc3NpYmxlIG9ubHkgb24gd3Jvbmcgb3B0aW9ucyBvciBiYWQgYG9uRGF0YWAgLyBgb25FbmRgXG5cdCAqIGN1c3RvbSBoYW5kbGVycy5cblx0ICoqL1xuXG5cdC8qKlxuXHQgKiBEZWZsYXRlLm1zZyAtPiBTdHJpbmdcblx0ICpcblx0ICogRXJyb3IgbWVzc2FnZSwgaWYgW1tEZWZsYXRlLmVycl1dICE9IDBcblx0ICoqL1xuXG5cblx0LyoqXG5cdCAqIG5ldyBEZWZsYXRlKG9wdGlvbnMpXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIENyZWF0ZXMgbmV3IGRlZmxhdG9yIGluc3RhbmNlIHdpdGggc3BlY2lmaWVkIHBhcmFtcy4gVGhyb3dzIGV4Y2VwdGlvblxuXHQgKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcblx0ICpcblx0ICogLSBgbGV2ZWxgXG5cdCAqIC0gYHdpbmRvd0JpdHNgXG5cdCAqIC0gYG1lbUxldmVsYFxuXHQgKiAtIGBzdHJhdGVneWBcblx0ICpcblx0ICogW2h0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZF0oaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkKVxuXHQgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cblx0ICpcblx0ICogQWRkaXRpb25hbCBvcHRpb25zLCBmb3IgaW50ZXJuYWwgbmVlZHM6XG5cdCAqXG5cdCAqIC0gYGNodW5rU2l6ZWAgLSBzaXplIG9mIGdlbmVyYXRlZCBkYXRhIGNodW5rcyAoMTZLIGJ5IGRlZmF1bHQpXG5cdCAqIC0gYHJhd2AgKEJvb2xlYW4pIC0gZG8gcmF3IGRlZmxhdGVcblx0ICogLSBgZ3ppcGAgKEJvb2xlYW4pIC0gY3JlYXRlIGd6aXAgd3JhcHBlclxuXHQgKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBcImJpbmFyeSBzdHJpbmdcIlxuXHQgKiAgICAoZWFjaCBjaGFyIGNvZGUgWzAuLjI1NV0pXG5cdCAqIC0gYGhlYWRlcmAgKE9iamVjdCkgLSBjdXN0b20gaGVhZGVyIGZvciBnemlwXG5cdCAqICAgLSBgdGV4dGAgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dFxuXHQgKiAgIC0gYHRpbWVgIChOdW1iZXIpIC0gbW9kaWZpY2F0aW9uIHRpbWUsIHVuaXggdGltZXN0YW1wXG5cdCAqICAgLSBgb3NgIChOdW1iZXIpIC0gb3BlcmF0aW9uIHN5c3RlbSBjb2RlXG5cdCAqICAgLSBgZXh0cmFgIChBcnJheSkgLSBhcnJheSBvZiBieXRlcyB3aXRoIGV4dHJhIGRhdGEgKG1heCA2NTUzNilcblx0ICogICAtIGBuYW1lYCAoU3RyaW5nKSAtIGZpbGUgbmFtZSAoYmluYXJ5IHN0cmluZylcblx0ICogICAtIGBjb21tZW50YCAoU3RyaW5nKSAtIGNvbW1lbnQgKGJpbmFyeSBzdHJpbmcpXG5cdCAqICAgLSBgaGNyY2AgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBoZWFkZXIgY3JjIHNob3VsZCBiZSBhZGRlZFxuXHQgKlxuXHQgKiAjIyMjIyBFeGFtcGxlOlxuXHQgKlxuXHQgKiBgYGBqYXZhc2NyaXB0XG5cdCAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG5cdCAqICAgLCBjaHVuazEgPSBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG5cdCAqICAgLCBjaHVuazIgPSBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuXHQgKlxuXHQgKiB2YXIgZGVmbGF0ZSA9IG5ldyBwYWtvLkRlZmxhdGUoeyBsZXZlbDogM30pO1xuXHQgKlxuXHQgKiBkZWZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG5cdCAqIGRlZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG5cdCAqXG5cdCAqIGlmIChkZWZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoZGVmbGF0ZS5lcnIpOyB9XG5cdCAqXG5cdCAqIGNvbnNvbGUubG9nKGRlZmxhdGUucmVzdWx0KTtcblx0ICogYGBgXG5cdCAqKi9cblx0dmFyIERlZmxhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cblx0ICB0aGlzLm9wdGlvbnMgPSB1dGlscy5hc3NpZ24oe1xuXHQgICAgbGV2ZWw6IFpfREVGQVVMVF9DT01QUkVTU0lPTixcblx0ICAgIG1ldGhvZDogWl9ERUZMQVRFRCxcblx0ICAgIGNodW5rU2l6ZTogMTYzODQsXG5cdCAgICB3aW5kb3dCaXRzOiAxNSxcblx0ICAgIG1lbUxldmVsOiA4LFxuXHQgICAgc3RyYXRlZ3k6IFpfREVGQVVMVF9TVFJBVEVHWSxcblx0ICAgIHRvOiAnJ1xuXHQgIH0sIG9wdGlvbnMgfHwge30pO1xuXG5cdCAgdmFyIG9wdCA9IHRoaXMub3B0aW9ucztcblxuXHQgIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+IDApKSB7XG5cdCAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcblx0ICB9XG5cblx0ICBlbHNlIGlmIChvcHQuZ3ppcCAmJiAob3B0LndpbmRvd0JpdHMgPiAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcblx0ICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuXHQgIH1cblxuXHQgIHRoaXMuZXJyICAgID0gMDsgICAgICAvLyBlcnJvciBjb2RlLCBpZiBoYXBwZW5zICgwID0gWl9PSylcblx0ICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuXHQgIHRoaXMuZW5kZWQgID0gZmFsc2U7ICAvLyB1c2VkIHRvIGF2b2lkIG11bHRpcGxlIG9uRW5kKCkgY2FsbHNcblx0ICB0aGlzLmNodW5rcyA9IFtdOyAgICAgLy8gY2h1bmtzIG9mIGNvbXByZXNzZWQgZGF0YVxuXG5cdCAgdGhpcy5zdHJtID0gbmV3IHpzdHJlYW0oKTtcblx0ICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuXHQgIHZhciBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZUluaXQyKFxuXHQgICAgdGhpcy5zdHJtLFxuXHQgICAgb3B0LmxldmVsLFxuXHQgICAgb3B0Lm1ldGhvZCxcblx0ICAgIG9wdC53aW5kb3dCaXRzLFxuXHQgICAgb3B0Lm1lbUxldmVsLFxuXHQgICAgb3B0LnN0cmF0ZWd5XG5cdCAgKTtcblxuXHQgIGlmIChzdGF0dXMgIT09IFpfT0spIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG5cdCAgfVxuXG5cdCAgaWYgKG9wdC5oZWFkZXIpIHtcblx0ICAgIHpsaWJfZGVmbGF0ZS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSwgb3B0LmhlYWRlcik7XG5cdCAgfVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZsYXRlI3B1c2goZGF0YVssIG1vZGVdKSAtPiBCb29sZWFuXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhLiBTdHJpbmdzIHdpbGwgYmUgY29udmVydGVkIHRvXG5cdCAqICAgdXRmOCBieXRlIHNlcXVlbmNlLlxuXHQgKiAtIG1vZGUgKE51bWJlcnxCb29sZWFuKTogMC4uNiBmb3IgY29ycmVzcG9uZGluZyBaX05PX0ZMVVNILi5aX1RSRUUgbW9kZXMuXG5cdCAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFuc2ggWl9GSU5JU0guXG5cdCAqXG5cdCAqIFNlbmRzIGlucHV0IGRhdGEgdG8gZGVmbGF0ZSBwaXBlLCBnZW5lcmF0aW5nIFtbRGVmbGF0ZSNvbkRhdGFdXSBjYWxscyB3aXRoXG5cdCAqIG5ldyBjb21wcmVzc2VkIGNodW5rcy4gUmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzcy4gVGhlIGxhc3QgZGF0YSBibG9jayBtdXN0IGhhdmVcblx0ICogbW9kZSBaX0ZJTklTSCAob3IgYHRydWVgKS4gVGhhdCBmbHVzaCBpbnRlcm5hbCBwZW5kaW5nIGJ1ZmZlcnMgYW5kIGNhbGxcblx0ICogW1tEZWZsYXRlI29uRW5kXV0uXG5cdCAqXG5cdCAqIE9uIGZhaWwgY2FsbCBbW0RlZmxhdGUjb25FbmRdXSB3aXRoIGVycm9yIGNvZGUgYW5kIHJldHVybiBmYWxzZS5cblx0ICpcblx0ICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHRvIHVzZSBgVWludDhBcnJheWAgb24gaW5wdXQgZm9yIGJlc3Qgc3BlZWQgKG91dHB1dFxuXHQgKiBhcnJheSBmb3JtYXQgaXMgZGV0ZWN0ZWQgYXV0b21hdGljYWxseSkuIEFsc28sIGRvbid0IHNraXAgbGFzdCBwYXJhbSBhbmQgYWx3YXlzXG5cdCAqIHVzZSB0aGUgc2FtZSB0eXBlIGluIHlvdXIgY29kZSAoYm9vbGVhbiBvciBudW1iZXIpLiBUaGF0IHdpbGwgaW1wcm92ZSBKUyBzcGVlZC5cblx0ICpcblx0ICogRm9yIHJlZ3VsYXIgYEFycmF5YC1zIG1ha2Ugc3VyZSBhbGwgZWxlbWVudHMgYXJlIFswLi4yNTVdLlxuXHQgKlxuXHQgKiAjIyMjIyBFeGFtcGxlXG5cdCAqXG5cdCAqIGBgYGphdmFzY3JpcHRcblx0ICogcHVzaChjaHVuaywgZmFsc2UpOyAvLyBwdXNoIG9uZSBvZiBkYXRhIGNodW5rc1xuXHQgKiAuLi5cblx0ICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcblx0ICogYGBgXG5cdCAqKi9cblx0RGVmbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGRhdGEsIG1vZGUpIHtcblx0ICB2YXIgc3RybSA9IHRoaXMuc3RybTtcblx0ICB2YXIgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcblx0ICB2YXIgc3RhdHVzLCBfbW9kZTtcblxuXHQgIGlmICh0aGlzLmVuZGVkKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdCAgX21vZGUgPSAobW9kZSA9PT0gfn5tb2RlKSA/IG1vZGUgOiAoKG1vZGUgPT09IHRydWUpID8gWl9GSU5JU0ggOiBaX05PX0ZMVVNIKTtcblxuXHQgIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcblx0ICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAvLyBJZiB3ZSBuZWVkIHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LlxuXHQgICAgc3RybS5pbnB1dCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihkYXRhKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgc3RybS5pbnB1dCA9IGRhdGE7XG5cdCAgfVxuXG5cdCAgc3RybS5uZXh0X2luID0gMDtcblx0ICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cblx0ICBkbyB7XG5cdCAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgc3RybS5vdXRwdXQgPSBuZXcgdXRpbHMuQnVmOChjaHVua1NpemUpO1xuXHQgICAgICBzdHJtLm5leHRfb3V0ID0gMDtcblx0ICAgICAgc3RybS5hdmFpbF9vdXQgPSBjaHVua1NpemU7XG5cdCAgICB9XG5cdCAgICBzdGF0dXMgPSB6bGliX2RlZmxhdGUuZGVmbGF0ZShzdHJtLCBfbW9kZSk7ICAgIC8qIG5vIGJhZCByZXR1cm4gdmFsdWUgKi9cblxuXHQgICAgaWYgKHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gWl9PSykge1xuXHQgICAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG5cdCAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgICBpZiAoc3RybS5hdmFpbF9vdXQgPT09IDAgfHwgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgX21vZGUgPT09IFpfRklOSVNIKSkge1xuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHRoaXMub25EYXRhKHN0cmluZ3MuYnVmMmJpbnN0cmluZyh1dGlscy5zaHJpbmtCdWYoc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQpKSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5vbkRhdGEodXRpbHMuc2hyaW5rQnVmKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IHdoaWxlICgoc3RybS5hdmFpbF9pbiA+IDAgfHwgc3RybS5hdmFpbF9vdXQgPT09IDApICYmIHN0YXR1cyAhPT0gWl9TVFJFQU1fRU5EKTtcblxuXHQgIC8vIEZpbmFsaXplIG9uIHRoZSBsYXN0IGNodW5rLlxuXHQgIGlmIChfbW9kZSA9PT0gWl9GSU5JU0gpIHtcblx0ICAgIHN0YXR1cyA9IHpsaWJfZGVmbGF0ZS5kZWZsYXRlRW5kKHRoaXMuc3RybSk7XG5cdCAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG5cdCAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcblx0ICAgIHJldHVybiBzdGF0dXMgPT09IFpfT0s7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRydWU7XG5cdH07XG5cblxuXHQvKipcblx0ICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcblx0ICogLSBjaHVuayAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBvdXB1dCBkYXRhLiBUeXBlIG9mIGFycmF5IGRlcGVuZHNcblx0ICogICBvbiBqcyBlbmdpbmUgc3VwcG9ydC4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCwgZWFjaCBjaHVua1xuXHQgKiAgIHdpbGwgYmUgc3RyaW5nLlxuXHQgKlxuXHQgKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuXHQgKiB0aG9zZSBpbiBgb25FbmRgLiBPdmVycmlkZSB0aGlzIGhhbmRsZXIsIGlmIHlvdSBuZWVkIGFub3RoZXIgYmVoYXZpb3VyLlxuXHQgKiovXG5cdERlZmxhdGUucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uKGNodW5rKSB7XG5cdCAgdGhpcy5jaHVua3MucHVzaChjaHVuayk7XG5cdH07XG5cblxuXHQvKipcblx0ICogRGVmbGF0ZSNvbkVuZChzdGF0dXMpIC0+IFZvaWRcblx0ICogLSBzdGF0dXMgKE51bWJlcik6IGRlZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuXHQgKiAgIG90aGVyIGlmIG5vdC5cblx0ICpcblx0ICogQ2FsbGVkIG9uY2UgYWZ0ZXIgeW91IHRlbGwgZGVmbGF0ZSB0aGF0IGlucHV0IHN0cmVhbSBjb21wbGV0ZVxuXHQgKiBvciBlcnJvciBoYXBwZW5uZWQuIEJ5IGRlZmF1bHQgLSBqb2luIGNvbGxlY3RlZCBjaHVua3MsXG5cdCAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG5cdCAqKi9cblx0RGVmbGF0ZS5wcm90b3R5cGUub25FbmQgPSBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAvLyBPbiBzdWNjZXNzIC0gam9pblxuXHQgIGlmIChzdGF0dXMgPT09IFpfT0spIHtcblx0ICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0aGlzLnJlc3VsdCA9IHV0aWxzLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuXHQgICAgfVxuXHQgIH1cblx0ICB0aGlzLmNodW5rcyA9IFtdO1xuXHQgIHRoaXMuZXJyID0gc3RhdHVzO1xuXHQgIHRoaXMubXNnID0gdGhpcy5zdHJtLm1zZztcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBkZWZsYXRlKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcblx0ICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIENvbXByZXNzIGBkYXRhYCB3aXRoIGRlZmxhdGUgYWxyb3J5dGhtIGFuZCBgb3B0aW9uc2AuXG5cdCAqXG5cdCAqIFN1cHBvcnRlZCBvcHRpb25zIGFyZTpcblx0ICpcblx0ICogLSBsZXZlbFxuXHQgKiAtIHdpbmRvd0JpdHNcblx0ICogLSBtZW1MZXZlbFxuXHQgKiAtIHN0cmF0ZWd5XG5cdCAqXG5cdCAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcblx0ICogZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhlc2UuXG5cdCAqXG5cdCAqIFN1Z2FyIChvcHRpb25zKTpcblx0ICpcblx0ICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuXHQgKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cblx0ICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgXCJiaW5hcnkgc3RyaW5nXCJcblx0ICogICAgKGVhY2ggY2hhciBjb2RlIFswLi4yNTVdKVxuXHQgKlxuXHQgKiAjIyMjIyBFeGFtcGxlOlxuXHQgKlxuXHQgKiBgYGBqYXZhc2NyaXB0XG5cdCAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG5cdCAqICAgLCBkYXRhID0gVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKTtcblx0ICpcblx0ICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcblx0ICogYGBgXG5cdCAqKi9cblx0ZnVuY3Rpb24gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucykge1xuXHQgIHZhciBkZWZsYXRvciA9IG5ldyBEZWZsYXRlKG9wdGlvbnMpO1xuXG5cdCAgZGVmbGF0b3IucHVzaChpbnB1dCwgdHJ1ZSk7XG5cblx0ICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuXHQgIGlmIChkZWZsYXRvci5lcnIpIHsgdGhyb3cgZGVmbGF0b3IubXNnOyB9XG5cblx0ICByZXR1cm4gZGVmbGF0b3IucmVzdWx0O1xuXHR9XG5cblxuXHQvKipcblx0ICogZGVmbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGNvbXByZXNzLlxuXHQgKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgZGVmbGF0ZSBvcHRpb25zLlxuXHQgKlxuXHQgKiBUaGUgc2FtZSBhcyBbW2RlZmxhdGVdXSwgYnV0IGNyZWF0ZXMgcmF3IGRhdGEsIHdpdGhvdXQgd3JhcHBlclxuXHQgKiAoaGVhZGVyIGFuZCBhZGxlcjMyIGNyYykuXG5cdCAqKi9cblx0ZnVuY3Rpb24gZGVmbGF0ZVJhdyhpbnB1dCwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIG9wdGlvbnMucmF3ID0gdHJ1ZTtcblx0ICByZXR1cm4gZGVmbGF0ZShpbnB1dCwgb3B0aW9ucyk7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBnemlwKGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcblx0ICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IGlucHV0IGRhdGEgdG8gY29tcHJlc3MuXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIFRoZSBzYW1lIGFzIFtbZGVmbGF0ZV1dLCBidXQgY3JlYXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkIG9mXG5cdCAqIGRlZmxhdGUgb25lLlxuXHQgKiovXG5cdGZ1bmN0aW9uIGd6aXAoaW5wdXQsIG9wdGlvbnMpIHtcblx0ICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuXHQgIHJldHVybiBkZWZsYXRlKGlucHV0LCBvcHRpb25zKTtcblx0fVxuXG5cblx0ZXhwb3J0cy5EZWZsYXRlID0gRGVmbGF0ZTtcblx0ZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcblx0ZXhwb3J0cy5kZWZsYXRlUmF3ID0gZGVmbGF0ZVJhdztcblx0ZXhwb3J0cy5nemlwID0gZ3ppcDtcblx0fSx7XCIuL3V0aWxzL2NvbW1vblwiOjI3LFwiLi91dGlscy9zdHJpbmdzXCI6MjgsXCIuL3psaWIvZGVmbGF0ZS5qc1wiOjMyLFwiLi96bGliL21lc3NhZ2VzXCI6MzcsXCIuL3psaWIvenN0cmVhbVwiOjM5fV0sMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblxuXHR2YXIgemxpYl9pbmZsYXRlID0gX2RlcmVxXygnLi96bGliL2luZmxhdGUuanMnKTtcblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi91dGlscy9jb21tb24nKTtcblx0dmFyIHN0cmluZ3MgPSBfZGVyZXFfKCcuL3V0aWxzL3N0cmluZ3MnKTtcblx0dmFyIGMgPSBfZGVyZXFfKCcuL3psaWIvY29uc3RhbnRzJyk7XG5cdHZhciBtc2cgPSBfZGVyZXFfKCcuL3psaWIvbWVzc2FnZXMnKTtcblx0dmFyIHpzdHJlYW0gPSBfZGVyZXFfKCcuL3psaWIvenN0cmVhbScpO1xuXHR2YXIgZ3poZWFkZXIgPSBfZGVyZXFfKCcuL3psaWIvZ3poZWFkZXInKTtcblxuXG5cdC8qKlxuXHQgKiBjbGFzcyBJbmZsYXRlXG5cdCAqXG5cdCAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcblx0ICogc3RyZWFtaW5nIGJlaGF2aW91ciAtIHVzZSBtb3JlIHNpbXBsZSBmdW5jdGlvbnM6IFtbaW5mbGF0ZV1dXG5cdCAqIGFuZCBbW2luZmxhdGVSYXddXS5cblx0ICoqL1xuXG5cdC8qIGludGVybmFsXG5cdCAqIGluZmxhdGUuY2h1bmtzIC0+IEFycmF5XG5cdCAqXG5cdCAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tJbmZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZW4uXG5cdCAqKi9cblxuXHQvKipcblx0ICogSW5mbGF0ZS5yZXN1bHQgLT4gVWludDhBcnJheXxBcnJheXxTdHJpbmdcblx0ICpcblx0ICogVW5jb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tJbmZsYXRlI29uRGF0YV1dXG5cdCAqIGFuZCBbW0luZmxhdGUjb25FbmRdXSBoYW5kbGVycy4gRmlsbGVkIGFmdGVyIHlvdSBwdXNoIGxhc3QgY2h1bmtcblx0ICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuXHQgKiovXG5cblx0LyoqXG5cdCAqIEluZmxhdGUuZXJyIC0+IE51bWJlclxuXHQgKlxuXHQgKiBFcnJvciBjb2RlIGFmdGVyIGluZmxhdGUgZmluaXNoZWQuIDAgKFpfT0spIG9uIHN1Y2Nlc3MuXG5cdCAqIFNob3VsZCBiZSBjaGVja2VkIGlmIGJyb2tlbiBkYXRhIHBvc3NpYmxlLlxuXHQgKiovXG5cblx0LyoqXG5cdCAqIEluZmxhdGUubXNnIC0+IFN0cmluZ1xuXHQgKlxuXHQgKiBFcnJvciBtZXNzYWdlLCBpZiBbW0luZmxhdGUuZXJyXV0gIT0gMFxuXHQgKiovXG5cblxuXHQvKipcblx0ICogbmV3IEluZmxhdGUob3B0aW9ucylcblx0ICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cblx0ICpcblx0ICogQ3JlYXRlcyBuZXcgaW5mbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG5cdCAqIG9uIGJhZCBwYXJhbXMuIFN1cHBvcnRlZCBvcHRpb25zOlxuXHQgKlxuXHQgKiAtIGB3aW5kb3dCaXRzYFxuXHQgKlxuXHQgKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG5cdCAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLlxuXHQgKlxuXHQgKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcblx0ICpcblx0ICogLSBgY2h1bmtTaXplYCAtIHNpemUgb2YgZ2VuZXJhdGVkIGRhdGEgY2h1bmtzICgxNksgYnkgZGVmYXVsdClcblx0ICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgaW5mbGF0ZVxuXHQgKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBjb252ZXJ0ZWRcblx0ICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcblx0ICogICBjaHVuayBsZW5ndGggY2FuIGRpZmZlciBmcm9tIGBjaHVua1NpemVgLCBkZXBlbmRpbmcgb24gY29udGVudC5cblx0ICpcblx0ICogQnkgZGVmYXVsdCwgd2hlbiBubyBvcHRpb25zIHNldCwgYXV0b2RldGVjdCBkZWZsYXRlL2d6aXAgZGF0YSBmb3JtYXQgdmlhXG5cdCAqIHdyYXBwZXIgaGVhZGVyLlxuXHQgKlxuXHQgKiAjIyMjIyBFeGFtcGxlOlxuXHQgKlxuXHQgKiBgYGBqYXZhc2NyaXB0XG5cdCAqIHZhciBwYWtvID0gcmVxdWlyZSgncGFrbycpXG5cdCAqICAgLCBjaHVuazEgPSBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG5cdCAqICAgLCBjaHVuazIgPSBVaW50OEFycmF5KFsxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOV0pO1xuXHQgKlxuXHQgKiB2YXIgaW5mbGF0ZSA9IG5ldyBwYWtvLkluZmxhdGUoeyBsZXZlbDogM30pO1xuXHQgKlxuXHQgKiBpbmZsYXRlLnB1c2goY2h1bmsxLCBmYWxzZSk7XG5cdCAqIGluZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG5cdCAqXG5cdCAqIGlmIChpbmZsYXRlLmVycikgeyB0aHJvdyBuZXcgRXJyb3IoaW5mbGF0ZS5lcnIpOyB9XG5cdCAqXG5cdCAqIGNvbnNvbGUubG9nKGluZmxhdGUucmVzdWx0KTtcblx0ICogYGBgXG5cdCAqKi9cblx0dmFyIEluZmxhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cblx0ICB0aGlzLm9wdGlvbnMgPSB1dGlscy5hc3NpZ24oe1xuXHQgICAgY2h1bmtTaXplOiAxNjM4NCxcblx0ICAgIHdpbmRvd0JpdHM6IDAsXG5cdCAgICB0bzogJydcblx0ICB9LCBvcHRpb25zIHx8IHt9KTtcblxuXHQgIHZhciBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cblx0ICAvLyBGb3JjZSB3aW5kb3cgc2l6ZSBmb3IgYHJhd2AgZGF0YSwgaWYgbm90IHNldCBkaXJlY3RseSxcblx0ICAvLyBiZWNhdXNlIHdlIGhhdmUgbm8gaGVhZGVyIGZvciBhdXRvZGV0ZWN0LlxuXHQgIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcblx0ICAgIG9wdC53aW5kb3dCaXRzID0gLW9wdC53aW5kb3dCaXRzO1xuXHQgICAgaWYgKG9wdC53aW5kb3dCaXRzID09PSAwKSB7IG9wdC53aW5kb3dCaXRzID0gLTE1OyB9XG5cdCAgfVxuXG5cdCAgLy8gSWYgYHdpbmRvd0JpdHNgIG5vdCBkZWZpbmVkIChhbmQgbW9kZSBub3QgcmF3KSAtIHNldCBhdXRvZGV0ZWN0IGZsYWcgZm9yIGd6aXAvZGVmbGF0ZVxuXHQgIGlmICgob3B0LndpbmRvd0JpdHMgPj0gMCkgJiYgKG9wdC53aW5kb3dCaXRzIDwgMTYpICYmXG5cdCAgICAgICEob3B0aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7XG5cdCAgICBvcHQud2luZG93Qml0cyArPSAzMjtcblx0ICB9XG5cblx0ICAvLyBHemlwIGhlYWRlciBoYXMgbm8gaW5mbyBhYm91dCB3aW5kb3dzIHNpemUsIHdlIGNhbiBkbyBhdXRvZGV0ZWN0IG9ubHlcblx0ICAvLyBmb3IgZGVmbGF0ZS4gU28sIGlmIHdpbmRvdyBzaXplIG5vdCBzZXQsIGZvcmNlIGl0IHRvIG1heCB3aGVuIGd6aXAgcG9zc2libGVcblx0ICBpZiAoKG9wdC53aW5kb3dCaXRzID4gMTUpICYmIChvcHQud2luZG93Qml0cyA8IDQ4KSkge1xuXHQgICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRhdGFcblx0ICAgIC8vIGJpdCA0ICgzMikgLT4gYXV0b2RldGVjdCBnemlwL2RlZmxhdGVcblx0ICAgIGlmICgob3B0LndpbmRvd0JpdHMgJiAxNSkgPT09IDApIHtcblx0ICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuXHQgIHRoaXMubXNnICAgID0gJyc7ICAgICAvLyBlcnJvciBtZXNzYWdlXG5cdCAgdGhpcy5lbmRlZCAgPSBmYWxzZTsgIC8vIHVzZWQgdG8gYXZvaWQgbXVsdGlwbGUgb25FbmQoKSBjYWxsc1xuXHQgIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cblx0ICB0aGlzLnN0cm0gICA9IG5ldyB6c3RyZWFtKCk7XG5cdCAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cblx0ICB2YXIgc3RhdHVzICA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlSW5pdDIoXG5cdCAgICB0aGlzLnN0cm0sXG5cdCAgICBvcHQud2luZG93Qml0c1xuXHQgICk7XG5cblx0ICBpZiAoc3RhdHVzICE9PSBjLlpfT0spIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcihtc2dbc3RhdHVzXSk7XG5cdCAgfVxuXG5cdCAgdGhpcy5oZWFkZXIgPSBuZXcgZ3poZWFkZXIoKTtcblxuXHQgIHpsaWJfaW5mbGF0ZS5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSwgdGhpcy5oZWFkZXIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbmZsYXRlI3B1c2goZGF0YVssIG1vZGVdKSAtPiBCb29sZWFuXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhXG5cdCAqIC0gbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cblx0ICogICBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCwgYHRydWVgIG1lYW5zaCBaX0ZJTklTSC5cblx0ICpcblx0ICogU2VuZHMgaW5wdXQgZGF0YSB0byBpbmZsYXRlIHBpcGUsIGdlbmVyYXRpbmcgW1tJbmZsYXRlI29uRGF0YV1dIGNhbGxzIHdpdGhcblx0ICogbmV3IG91dHB1dCBjaHVua3MuIFJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3MuIFRoZSBsYXN0IGRhdGEgYmxvY2sgbXVzdCBoYXZlXG5cdCAqIG1vZGUgWl9GSU5JU0ggKG9yIGB0cnVlYCkuIFRoYXQgZmx1c2ggaW50ZXJuYWwgcGVuZGluZyBidWZmZXJzIGFuZCBjYWxsXG5cdCAqIFtbSW5mbGF0ZSNvbkVuZF1dLlxuXHQgKlxuXHQgKiBPbiBmYWlsIGNhbGwgW1tJbmZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG5cdCAqXG5cdCAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgYFVpbnQ4QXJyYXlgIG9uIGlucHV0IGZvciBiZXN0IHNwZWVkIChvdXRwdXRcblx0ICogZm9ybWF0IGlzIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkpLiBBbHNvLCBkb24ndCBza2lwIGxhc3QgcGFyYW0gYW5kIGFsd2F5c1xuXHQgKiB1c2UgdGhlIHNhbWUgdHlwZSBpbiB5b3VyIGNvZGUgKGJvb2xlYW4gb3IgbnVtYmVyKS4gVGhhdCB3aWxsIGltcHJvdmUgSlMgc3BlZWQuXG5cdCAqXG5cdCAqIEZvciByZWd1bGFyIGBBcnJheWAtcyBtYWtlIHN1cmUgYWxsIGVsZW1lbnRzIGFyZSBbMC4uMjU1XS5cblx0ICpcblx0ICogIyMjIyMgRXhhbXBsZVxuXHQgKlxuXHQgKiBgYGBqYXZhc2NyaXB0XG5cdCAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3Ncblx0ICogLi4uXG5cdCAqIHB1c2goY2h1bmssIHRydWUpOyAgLy8gcHVzaCBsYXN0IGNodW5rXG5cdCAqIGBgYFxuXHQgKiovXG5cdEluZmxhdGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihkYXRhLCBtb2RlKSB7XG5cdCAgdmFyIHN0cm0gPSB0aGlzLnN0cm07XG5cdCAgdmFyIGNodW5rU2l6ZSA9IHRoaXMub3B0aW9ucy5jaHVua1NpemU7XG5cdCAgdmFyIHN0YXR1cywgX21vZGU7XG5cdCAgdmFyIG5leHRfb3V0X3V0ZjgsIHRhaWwsIHV0ZjhzdHI7XG5cblx0ICBpZiAodGhpcy5lbmRlZCkgeyByZXR1cm4gZmFsc2U7IH1cblx0ICBfbW9kZSA9IChtb2RlID09PSB+fm1vZGUpID8gbW9kZSA6ICgobW9kZSA9PT0gdHJ1ZSkgPyBjLlpfRklOSVNIIDogYy5aX05PX0ZMVVNIKTtcblxuXHQgIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcblx0ICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAvLyBPbmx5IGJpbmFyeSBzdHJpbmdzIGNhbiBiZSBkZWNvbXByZXNzZWQgb24gcHJhY3RpY2Vcblx0ICAgIHN0cm0uaW5wdXQgPSBzdHJpbmdzLmJpbnN0cmluZzJidWYoZGF0YSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHN0cm0uaW5wdXQgPSBkYXRhO1xuXHQgIH1cblxuXHQgIHN0cm0ubmV4dF9pbiA9IDA7XG5cdCAgc3RybS5hdmFpbF9pbiA9IHN0cm0uaW5wdXQubGVuZ3RoO1xuXG5cdCAgZG8ge1xuXHQgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIHN0cm0ub3V0cHV0ID0gbmV3IHV0aWxzLkJ1ZjgoY2h1bmtTaXplKTtcblx0ICAgICAgc3RybS5uZXh0X291dCA9IDA7XG5cdCAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuXHQgICAgfVxuXG5cdCAgICBzdGF0dXMgPSB6bGliX2luZmxhdGUuaW5mbGF0ZShzdHJtLCBjLlpfTk9fRkxVU0gpOyAgICAvKiBubyBiYWQgcmV0dXJuIHZhbHVlICovXG5cblx0ICAgIGlmIChzdGF0dXMgIT09IGMuWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPT0gYy5aX09LKSB7XG5cdCAgICAgIHRoaXMub25FbmQoc3RhdHVzKTtcblx0ICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHN0cm0ubmV4dF9vdXQpIHtcblx0ICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwIHx8IHN0YXR1cyA9PT0gYy5aX1NUUkVBTV9FTkQgfHwgKHN0cm0uYXZhaWxfaW4gPT09IDAgJiYgX21vZGUgPT09IGMuWl9GSU5JU0gpKSB7XG5cblx0ICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuXG5cdCAgICAgICAgICBuZXh0X291dF91dGY4ID0gc3RyaW5ncy51dGY4Ym9yZGVyKHN0cm0ub3V0cHV0LCBzdHJtLm5leHRfb3V0KTtcblxuXHQgICAgICAgICAgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuXHQgICAgICAgICAgdXRmOHN0ciA9IHN0cmluZ3MuYnVmMnN0cmluZyhzdHJtLm91dHB1dCwgbmV4dF9vdXRfdXRmOCk7XG5cblx0ICAgICAgICAgIC8vIG1vdmUgdGFpbFxuXHQgICAgICAgICAgc3RybS5uZXh0X291dCA9IHRhaWw7XG5cdCAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZSAtIHRhaWw7XG5cdCAgICAgICAgICBpZiAodGFpbCkgeyB1dGlscy5hcnJheVNldChzdHJtLm91dHB1dCwgc3RybS5vdXRwdXQsIG5leHRfb3V0X3V0ZjgsIHRhaWwsIDApOyB9XG5cblx0ICAgICAgICAgIHRoaXMub25EYXRhKHV0ZjhzdHIpO1xuXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRoaXMub25EYXRhKHV0aWxzLnNocmlua0J1ZihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gd2hpbGUgKChzdHJtLmF2YWlsX2luID4gMCkgJiYgc3RhdHVzICE9PSBjLlpfU1RSRUFNX0VORCk7XG5cblx0ICBpZiAoc3RhdHVzID09PSBjLlpfU1RSRUFNX0VORCkge1xuXHQgICAgX21vZGUgPSBjLlpfRklOSVNIO1xuXHQgIH1cblx0ICAvLyBGaW5hbGl6ZSBvbiB0aGUgbGFzdCBjaHVuay5cblx0ICBpZiAoX21vZGUgPT09IGMuWl9GSU5JU0gpIHtcblx0ICAgIHN0YXR1cyA9IHpsaWJfaW5mbGF0ZS5pbmZsYXRlRW5kKHRoaXMuc3RybSk7XG5cdCAgICB0aGlzLm9uRW5kKHN0YXR1cyk7XG5cdCAgICB0aGlzLmVuZGVkID0gdHJ1ZTtcblx0ICAgIHJldHVybiBzdGF0dXMgPT09IGMuWl9PSztcblx0ICB9XG5cblx0ICByZXR1cm4gdHJ1ZTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBJbmZsYXRlI29uRGF0YShjaHVuaykgLT4gVm9pZFxuXHQgKiAtIGNodW5rIChVaW50OEFycmF5fEFycmF5fFN0cmluZyk6IG91cHV0IGRhdGEuIFR5cGUgb2YgYXJyYXkgZGVwZW5kc1xuXHQgKiAgIG9uIGpzIGVuZ2luZSBzdXBwb3J0LiBXaGVuIHN0cmluZyBvdXRwdXQgcmVxdWVzdGVkLCBlYWNoIGNodW5rXG5cdCAqICAgd2lsbCBiZSBzdHJpbmcuXG5cdCAqXG5cdCAqIEJ5IGRlZmF1bHQsIHN0b3JlcyBkYXRhIGJsb2NrcyBpbiBgY2h1bmtzW11gIHByb3BlcnR5IGFuZCBnbHVlXG5cdCAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG5cdCAqKi9cblx0SW5mbGF0ZS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24oY2h1bmspIHtcblx0ICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBJbmZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuXHQgKiAtIHN0YXR1cyAoTnVtYmVyKTogaW5mbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG5cdCAqICAgb3RoZXIgaWYgbm90LlxuXHQgKlxuXHQgKiBDYWxsZWQgb25jZSBhZnRlciB5b3UgdGVsbCBpbmZsYXRlIHRoYXQgaW5wdXQgc3RyZWFtIGNvbXBsZXRlXG5cdCAqIG9yIGVycm9yIGhhcHBlbm5lZC4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcblx0ICogZnJlZSBtZW1vcnkgYW5kIGZpbGwgYHJlc3VsdHNgIC8gYGVycmAgcHJvcGVydGllcy5cblx0ICoqL1xuXHRJbmZsYXRlLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgIC8vIE9uIHN1Y2Nlc3MgLSBqb2luXG5cdCAgaWYgKHN0YXR1cyA9PT0gYy5aX09LKSB7XG5cdCAgICBpZiAodGhpcy5vcHRpb25zLnRvID09PSAnc3RyaW5nJykge1xuXHQgICAgICAvLyBHbHVlICYgY29udmVydCBoZXJlLCB1bnRpbCB3ZSB0ZWFjaCBwYWtvIHRvIHNlbmRcblx0ICAgICAgLy8gdXRmOCBhbGxpZ25lZCBzdHJpbmdzIHRvIG9uRGF0YVxuXHQgICAgICB0aGlzLnJlc3VsdCA9IHRoaXMuY2h1bmtzLmpvaW4oJycpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy5yZXN1bHQgPSB1dGlscy5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTtcblx0ICAgIH1cblx0ICB9XG5cdCAgdGhpcy5jaHVua3MgPSBbXTtcblx0ICB0aGlzLmVyciA9IHN0YXR1cztcblx0ICB0aGlzLm1zZyA9IHRoaXMuc3RybS5tc2c7XG5cdH07XG5cblxuXHQvKipcblx0ICogaW5mbGF0ZShkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIERlY29tcHJlc3MgYGRhdGFgIHdpdGggaW5mbGF0ZS91bmd6aXAgYW5kIGBvcHRpb25zYC4gQXV0b2RldGVjdFxuXHQgKiBmb3JtYXQgdmlhIHdyYXBwZXIgaGVhZGVyIGJ5IGRlZmF1bHQuIFRoYXQncyB3aHkgd2UgZG9uJ3QgcHJvdmlkZVxuXHQgKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG5cdCAqXG5cdCAqIFN1cHBvcnRlZCBvcHRpb25zIGFyZTpcblx0ICpcblx0ICogLSB3aW5kb3dCaXRzXG5cdCAqXG5cdCAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcblx0ICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cdCAqXG5cdCAqIFN1Z2FyIChvcHRpb25zKTpcblx0ICpcblx0ICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuXHQgKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cblx0ICogLSBgdG9gIChTdHJpbmcpIC0gaWYgZXF1YWwgdG8gJ3N0cmluZycsIHRoZW4gcmVzdWx0IHdpbGwgYmUgY29udmVydGVkXG5cdCAqICAgZnJvbSB1dGY4IHRvIHV0ZjE2IChqYXZhc2NyaXB0KSBzdHJpbmcuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG5cdCAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG5cdCAqXG5cdCAqXG5cdCAqICMjIyMjIEV4YW1wbGU6XG5cdCAqXG5cdCAqIGBgYGphdmFzY3JpcHRcblx0ICogdmFyIHBha28gPSByZXF1aXJlKCdwYWtvJylcblx0ICogICAsIGlucHV0ID0gcGFrby5kZWZsYXRlKFsxLDIsMyw0LDUsNiw3LDgsOV0pXG5cdCAqICAgLCBvdXRwdXQ7XG5cdCAqXG5cdCAqIHRyeSB7XG5cdCAqICAgb3V0cHV0ID0gcGFrby5pbmZsYXRlKGlucHV0KTtcblx0ICogfSBjYXRjaCAoZXJyKVxuXHQgKiAgIGNvbnNvbGUubG9nKGVycik7XG5cdCAqIH1cblx0ICogYGBgXG5cdCAqKi9cblx0ZnVuY3Rpb24gaW5mbGF0ZShpbnB1dCwgb3B0aW9ucykge1xuXHQgIHZhciBpbmZsYXRvciA9IG5ldyBJbmZsYXRlKG9wdGlvbnMpO1xuXG5cdCAgaW5mbGF0b3IucHVzaChpbnB1dCwgdHJ1ZSk7XG5cblx0ICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuXHQgIGlmIChpbmZsYXRvci5lcnIpIHsgdGhyb3cgaW5mbGF0b3IubXNnOyB9XG5cblx0ICByZXR1cm4gaW5mbGF0b3IucmVzdWx0O1xuXHR9XG5cblxuXHQvKipcblx0ICogaW5mbGF0ZVJhdyhkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIFRoZSBzYW1lIGFzIFtbaW5mbGF0ZV1dLCBidXQgY3JlYXRlcyByYXcgZGF0YSwgd2l0aG91dCB3cmFwcGVyXG5cdCAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cblx0ICoqL1xuXHRmdW5jdGlvbiBpbmZsYXRlUmF3KGlucHV0LCBvcHRpb25zKSB7XG5cdCAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuXHQgIHJldHVybiBpbmZsYXRlKGlucHV0LCBvcHRpb25zKTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIHVuZ3ppcChkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nXG5cdCAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheXxTdHJpbmcpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG5cdCAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG5cdCAqXG5cdCAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG5cdCAqIGJ5IGhlYWRlci5jb250ZW50LiBEb25lIGZvciBjb252ZW5pZW5jZS5cblx0ICoqL1xuXG5cblx0ZXhwb3J0cy5JbmZsYXRlID0gSW5mbGF0ZTtcblx0ZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcblx0ZXhwb3J0cy5pbmZsYXRlUmF3ID0gaW5mbGF0ZVJhdztcblx0ZXhwb3J0cy51bmd6aXAgID0gaW5mbGF0ZTtcblxuXHR9LHtcIi4vdXRpbHMvY29tbW9uXCI6MjcsXCIuL3V0aWxzL3N0cmluZ3NcIjoyOCxcIi4vemxpYi9jb25zdGFudHNcIjozMCxcIi4vemxpYi9nemhlYWRlclwiOjMzLFwiLi96bGliL2luZmxhdGUuanNcIjozNSxcIi4vemxpYi9tZXNzYWdlc1wiOjM3LFwiLi96bGliL3pzdHJlYW1cIjozOX1dLDI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIFRZUEVEX09LID0gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXG5cdCAgICAgICAgICAgICAgICAodHlwZW9mIFVpbnQxNkFycmF5ICE9PSAndW5kZWZpbmVkJykgJiZcblx0ICAgICAgICAgICAgICAgICh0eXBlb2YgSW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpO1xuXG5cblx0ZXhwb3J0cy5hc3NpZ24gPSBmdW5jdGlvbiAob2JqIC8qZnJvbTEsIGZyb20yLCBmcm9tMywgLi4uKi8pIHtcblx0ICB2YXIgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgd2hpbGUgKHNvdXJjZXMubGVuZ3RoKSB7XG5cdCAgICB2YXIgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xuXHQgICAgaWYgKCFzb3VyY2UpIHsgY29udGludWU7IH1cblxuXHQgICAgaWYgKHR5cGVvZihzb3VyY2UpICE9PSAnb2JqZWN0Jykge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHNvdXJjZSArICdtdXN0IGJlIG5vbi1vYmplY3QnKTtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgcCBpbiBzb3VyY2UpIHtcblx0ICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwKSkge1xuXHQgICAgICAgIG9ialtwXSA9IHNvdXJjZVtwXTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBvYmo7XG5cdH07XG5cblxuXHQvLyByZWR1Y2UgYnVmZmVyIHNpemUsIGF2b2lkaW5nIG1lbSBjb3B5XG5cdGV4cG9ydHMuc2hyaW5rQnVmID0gZnVuY3Rpb24gKGJ1Ziwgc2l6ZSkge1xuXHQgIGlmIChidWYubGVuZ3RoID09PSBzaXplKSB7IHJldHVybiBidWY7IH1cblx0ICBpZiAoYnVmLnN1YmFycmF5KSB7IHJldHVybiBidWYuc3ViYXJyYXkoMCwgc2l6ZSk7IH1cblx0ICBidWYubGVuZ3RoID0gc2l6ZTtcblx0ICByZXR1cm4gYnVmO1xuXHR9O1xuXG5cblx0dmFyIGZuVHlwZWQgPSB7XG5cdCAgYXJyYXlTZXQ6IGZ1bmN0aW9uIChkZXN0LCBzcmMsIHNyY19vZmZzLCBsZW4sIGRlc3Rfb2Zmcykge1xuXHQgICAgaWYgKHNyYy5zdWJhcnJheSAmJiBkZXN0LnN1YmFycmF5KSB7XG5cdCAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNfb2Zmcywgc3JjX29mZnMrbGVuKSwgZGVzdF9vZmZzKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgLy8gRmFsbGJhY2sgdG8gb3JkaW5hcnkgYXJyYXlcblx0ICAgIGZvcih2YXIgaT0wOyBpPGxlbjsgaSsrKSB7XG5cdCAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cblx0ICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbihjaHVua3MpIHtcblx0ICAgIHZhciBpLCBsLCBsZW4sIHBvcywgY2h1bmssIHJlc3VsdDtcblxuXHQgICAgLy8gY2FsY3VsYXRlIGRhdGEgbGVuZ3RoXG5cdCAgICBsZW4gPSAwO1xuXHQgICAgZm9yIChpPTAsIGw9Y2h1bmtzLmxlbmd0aDsgaTxsOyBpKyspIHtcblx0ICAgICAgbGVuICs9IGNodW5rc1tpXS5sZW5ndGg7XG5cdCAgICB9XG5cblx0ICAgIC8vIGpvaW4gY2h1bmtzXG5cdCAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuXHQgICAgcG9zID0gMDtcblx0ICAgIGZvciAoaT0wLCBsPWNodW5rcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG5cdCAgICAgIGNodW5rID0gY2h1bmtzW2ldO1xuXHQgICAgICByZXN1bHQuc2V0KGNodW5rLCBwb3MpO1xuXHQgICAgICBwb3MgKz0gY2h1bmsubGVuZ3RoO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH1cblx0fTtcblxuXHR2YXIgZm5VbnR5cGVkID0ge1xuXHQgIGFycmF5U2V0OiBmdW5jdGlvbiAoZGVzdCwgc3JjLCBzcmNfb2ZmcywgbGVuLCBkZXN0X29mZnMpIHtcblx0ICAgIGZvcih2YXIgaT0wOyBpPGxlbjsgaSsrKSB7XG5cdCAgICAgIGRlc3RbZGVzdF9vZmZzICsgaV0gPSBzcmNbc3JjX29mZnMgKyBpXTtcblx0ICAgIH1cblx0ICB9LFxuXHQgIC8vIEpvaW4gYXJyYXkgb2YgY2h1bmtzIHRvIHNpbmdsZSBhcnJheS5cblx0ICBmbGF0dGVuQ2h1bmtzOiBmdW5jdGlvbihjaHVua3MpIHtcblx0ICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNodW5rcyk7XG5cdCAgfVxuXHR9O1xuXG5cblx0Ly8gRW5hYmxlL0Rpc2FibGUgdHlwZWQgYXJyYXlzIHVzZSwgZm9yIHRlc3Rpbmdcblx0Ly9cblx0ZXhwb3J0cy5zZXRUeXBlZCA9IGZ1bmN0aW9uIChvbikge1xuXHQgIGlmIChvbikge1xuXHQgICAgZXhwb3J0cy5CdWY4ICA9IFVpbnQ4QXJyYXk7XG5cdCAgICBleHBvcnRzLkJ1ZjE2ID0gVWludDE2QXJyYXk7XG5cdCAgICBleHBvcnRzLkJ1ZjMyID0gSW50MzJBcnJheTtcblx0ICAgIGV4cG9ydHMuYXNzaWduKGV4cG9ydHMsIGZuVHlwZWQpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBleHBvcnRzLkJ1ZjggID0gQXJyYXk7XG5cdCAgICBleHBvcnRzLkJ1ZjE2ID0gQXJyYXk7XG5cdCAgICBleHBvcnRzLkJ1ZjMyID0gQXJyYXk7XG5cdCAgICBleHBvcnRzLmFzc2lnbihleHBvcnRzLCBmblVudHlwZWQpO1xuXHQgIH1cblx0fTtcblxuXHRleHBvcnRzLnNldFR5cGVkKFRZUEVEX09LKTtcblx0fSx7fV0sMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQvLyBTdHJpbmcgZW5jb2RlL2RlY29kZSBoZWxwZXJzXG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHZhciB1dGlscyA9IF9kZXJlcV8oJy4vY29tbW9uJyk7XG5cblxuXHQvLyBRdWljayBjaGVjayBpZiB3ZSBjYW4gdXNlIGZhc3QgYXJyYXkgdG8gYmluIHN0cmluZyBjb252ZXJzaW9uXG5cdC8vXG5cdC8vIC0gYXBwbHkoQXJyYXkpIGNhbiBmYWlsIG9uIEFuZHJvaWQgMi4yXG5cdC8vIC0gYXBwbHkoVWludDhBcnJheSkgY2FuIGZhaWwgb24gaU9TIDUuMSBTYWZhcnlcblx0Ly9cblx0dmFyIFNUUl9BUFBMWV9PSyA9IHRydWU7XG5cdHZhciBTVFJfQVBQTFlfVUlBX09LID0gdHJ1ZTtcblxuXHR0cnkgeyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIFswXSk7IH0gY2F0Y2goX18pIHsgU1RSX0FQUExZX09LID0gZmFsc2U7IH1cblx0dHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2goX18pIHsgU1RSX0FQUExZX1VJQV9PSyA9IGZhbHNlOyB9XG5cblxuXHQvLyBUYWJsZSB3aXRoIHV0ZjggbGVuZ3RocyAoY2FsY3VsYXRlZCBieSBmaXJzdCBieXRlIG9mIHNlcXVlbmNlKVxuXHQvLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcblx0Ly8gYmVjYXVzZSBtYXggcG9zc2libGUgY29kZXBvaW50IGlzIDB4MTBmZmZmXG5cdHZhciBfdXRmOGxlbiA9IG5ldyB1dGlscy5CdWY4KDI1Nik7XG5cdGZvciAodmFyIGk9MDsgaTwyNTY7IGkrKykge1xuXHQgIF91dGY4bGVuW2ldID0gKGkgPj0gMjUyID8gNiA6IGkgPj0gMjQ4ID8gNSA6IGkgPj0gMjQwID8gNCA6IGkgPj0gMjI0ID8gMyA6IGkgPj0gMTkyID8gMiA6IDEpO1xuXHR9XG5cdF91dGY4bGVuWzI1NF09X3V0ZjhsZW5bMjU0XT0xOyAvLyBJbnZhbGlkIHNlcXVlbmNlIHN0YXJ0XG5cblxuXHQvLyBjb252ZXJ0IHN0cmluZyB0byBhcnJheSAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5cdGV4cG9ydHMuc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uIChzdHIpIHtcblx0ICB2YXIgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuXHQgIC8vIGNvdW50IGJpbmFyeSBzaXplXG5cdCAgZm9yIChtX3BvcyA9IDA7IG1fcG9zIDwgc3RyX2xlbjsgbV9wb3MrKykge1xuXHQgICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcblx0ICAgIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJiAobV9wb3MrMSA8IHN0cl9sZW4pKSB7XG5cdCAgICAgIGMyID0gc3RyLmNoYXJDb2RlQXQobV9wb3MrMSk7XG5cdCAgICAgIGlmICgoYzIgJiAweGZjMDApID09PSAweGRjMDApIHtcblx0ICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcblx0ICAgICAgICBtX3BvcysrO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuXHQgIH1cblxuXHQgIC8vIGFsbG9jYXRlIGJ1ZmZlclxuXHQgIGJ1ZiA9IG5ldyB1dGlscy5CdWY4KGJ1Zl9sZW4pO1xuXG5cdCAgLy8gY29udmVydFxuXHQgIGZvciAoaT0wLCBtX3BvcyA9IDA7IGkgPCBidWZfbGVuOyBtX3BvcysrKSB7XG5cdCAgICBjID0gc3RyLmNoYXJDb2RlQXQobV9wb3MpO1xuXHQgICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcysxIDwgc3RyX2xlbikpIHtcblx0ICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcysxKTtcblx0ICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuXHQgICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuXHQgICAgICAgIG1fcG9zKys7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIGlmIChjIDwgMHg4MCkge1xuXHQgICAgICAvKiBvbmUgYnl0ZSAqL1xuXHQgICAgICBidWZbaSsrXSA9IGM7XG5cdCAgICB9IGVsc2UgaWYgKGMgPCAweDgwMCkge1xuXHQgICAgICAvKiB0d28gYnl0ZXMgKi9cblx0ICAgICAgYnVmW2krK10gPSAweEMwIHwgKGMgPj4+IDYpO1xuXHQgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuXHQgICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuXHQgICAgICAvKiB0aHJlZSBieXRlcyAqL1xuXHQgICAgICBidWZbaSsrXSA9IDB4RTAgfCAoYyA+Pj4gMTIpO1xuXHQgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuXHQgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyAmIDB4M2YpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLyogZm91ciBieXRlcyAqL1xuXHQgICAgICBidWZbaSsrXSA9IDB4ZjAgfCAoYyA+Pj4gMTgpO1xuXHQgICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gMTIgJiAweDNmKTtcblx0ICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcblx0ICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gYnVmO1xuXHR9O1xuXG5cdC8vIEhlbHBlciAodXNlZCBpbiAyIHBsYWNlcylcblx0ZnVuY3Rpb24gYnVmMmJpbnN0cmluZyhidWYsIGxlbikge1xuXHQgIC8vIHVzZSBmYWxsYmFjayBmb3IgYmlnIGFycmF5cyB0byBhdm9pZCBzdGFjayBvdmVyZmxvd1xuXHQgIGlmIChsZW4gPCA2NTUzNykge1xuXHQgICAgaWYgKChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSykgfHwgKCFidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX09LKSkge1xuXHQgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1dGlscy5zaHJpbmtCdWYoYnVmLCBsZW4pKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICB2YXIgcmVzdWx0ID0gJyc7XG5cdCAgZm9yKHZhciBpPTA7IGkgPCBsZW47IGkrKykge1xuXHQgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKTtcblx0ICB9XG5cdCAgcmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cblx0Ly8gQ29udmVydCBieXRlIGFycmF5IHRvIGJpbmFyeSBzdHJpbmdcblx0ZXhwb3J0cy5idWYyYmluc3RyaW5nID0gZnVuY3Rpb24oYnVmKSB7XG5cdCAgcmV0dXJuIGJ1ZjJiaW5zdHJpbmcoYnVmLCBidWYubGVuZ3RoKTtcblx0fTtcblxuXG5cdC8vIENvbnZlcnQgYmluYXJ5IHN0cmluZyAodHlwZWQsIHdoZW4gcG9zc2libGUpXG5cdGV4cG9ydHMuYmluc3RyaW5nMmJ1ZiA9IGZ1bmN0aW9uKHN0cikge1xuXHQgIHZhciBidWYgPSBuZXcgdXRpbHMuQnVmOChzdHIubGVuZ3RoKTtcblx0ICBmb3IodmFyIGk9MCwgbGVuPWJ1Zi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgYnVmW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cdCAgfVxuXHQgIHJldHVybiBidWY7XG5cdH07XG5cblxuXHQvLyBjb252ZXJ0IGFycmF5IHRvIHN0cmluZ1xuXHRleHBvcnRzLmJ1ZjJzdHJpbmcgPSBmdW5jdGlvbiAoYnVmLCBtYXgpIHtcblx0ICB2YXIgaSwgb3V0LCBjLCBjX2xlbjtcblx0ICB2YXIgbGVuID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG5cblx0ICAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpXG5cdCAgLy8gTkI6IGJ5IHVua25vd24gcmVhc29ucywgQXJyYXkgaXMgc2lnbmlmaWNhbnRseSBmYXN0ZXIgZm9yXG5cdCAgLy8gICAgIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkgdGhhbiBVaW50MTZBcnJheS5cblx0ICB2YXIgdXRmMTZidWYgPSBuZXcgQXJyYXkobGVuKjIpO1xuXG5cdCAgZm9yIChvdXQ9MCwgaT0wOyBpPGxlbjspIHtcblx0ICAgIGMgPSBidWZbaSsrXTtcblx0ICAgIC8vIHF1aWNrIHByb2Nlc3MgYXNjaWlcblx0ICAgIGlmIChjIDwgMHg4MCkgeyB1dGYxNmJ1ZltvdXQrK10gPSBjOyBjb250aW51ZTsgfVxuXG5cdCAgICBjX2xlbiA9IF91dGY4bGVuW2NdO1xuXHQgICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG5cdCAgICBpZiAoY19sZW4gPiA0KSB7IHV0ZjE2YnVmW291dCsrXSA9IDB4ZmZmZDsgaSArPSBjX2xlbi0xOyBjb250aW51ZTsgfVxuXG5cdCAgICAvLyBhcHBseSBtYXNrIG9uIGZpcnN0IGJ5dGVcblx0ICAgIGMgJj0gY19sZW4gPT09IDIgPyAweDFmIDogY19sZW4gPT09IDMgPyAweDBmIDogMHgwNztcblx0ICAgIC8vIGpvaW4gdGhlIHJlc3Rcblx0ICAgIHdoaWxlIChjX2xlbiA+IDEgJiYgaSA8IGxlbikge1xuXHQgICAgICBjID0gKGMgPDwgNikgfCAoYnVmW2krK10gJiAweDNmKTtcblx0ICAgICAgY19sZW4tLTtcblx0ICAgIH1cblxuXHQgICAgLy8gdGVybWluYXRlZCBieSBlbmQgb2Ygc3RyaW5nP1xuXHQgICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cblx0ICAgIGlmIChjIDwgMHgxMDAwMCkge1xuXHQgICAgICB1dGYxNmJ1ZltvdXQrK10gPSBjO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgYyAtPSAweDEwMDAwO1xuXHQgICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGQ4MDAgfCAoKGMgPj4gMTApICYgMHgzZmYpO1xuXHQgICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcblx0fTtcblxuXG5cdC8vIENhbGN1bGF0ZSBtYXggcG9zc2libGUgcG9zaXRpb24gaW4gdXRmOCBidWZmZXIsXG5cdC8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcblx0Ly8gLSAodmVyeSBzbWFsbCBsaW1pdHMpIHJldHVybiBtYXggc2l6ZSBhcyBpcy5cblx0Ly9cblx0Ly8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG5cdC8vIG1heCAgIC0gbGVuZ3RoIGxpbWl0IChtYW5kYXRvcnkpO1xuXHRleHBvcnRzLnV0Zjhib3JkZXIgPSBmdW5jdGlvbihidWYsIG1heCkge1xuXHQgIHZhciBwb3M7XG5cblx0ICBtYXggPSBtYXggfHwgYnVmLmxlbmd0aDtcblx0ICBpZiAobWF4ID4gYnVmLmxlbmd0aCkgeyBtYXggPSBidWYubGVuZ3RoOyB9XG5cblx0ICAvLyBnbyBiYWNrIGZyb20gbGFzdCBwb3NpdGlvbiwgdW50aWwgc3RhcnQgb2Ygc2VxdWVuY2UgZm91bmRcblx0ICBwb3MgPSBtYXgtMTtcblx0ICB3aGlsZSAocG9zID49IDAgJiYgKGJ1Zltwb3NdICYgMHhDMCkgPT09IDB4ODApIHsgcG9zLS07IH1cblxuXHQgIC8vIEZ1Y2t1cCAtIHZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcblx0ICAvLyByZXR1cm4gbWF4LCBiZWNhdXNlIHdlIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGFueXdheS5cblx0ICBpZiAocG9zIDwgMCkgeyByZXR1cm4gbWF4OyB9XG5cblx0ICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgdnVmZmVyIGlzIHRvbyBzbWFsbCxcblx0ICAvLyByZXR1cm4gbWF4IHRvby5cblx0ICBpZiAocG9zID09PSAwKSB7IHJldHVybiBtYXg7IH1cblxuXHQgIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcblx0fTtcblxuXHR9LHtcIi4vY29tbW9uXCI6Mjd9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvLyBOb3RlOiBhZGxlcjMyIHRha2VzIDEyJSBmb3IgbGV2ZWwgMCBhbmQgMiUgZm9yIGxldmVsIDYuXG5cdC8vIEl0IGRvZXNuJ3Qgd29ydGggdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbmEgYXMgaW4gb3JpZ2luYWwuXG5cdC8vIFNtYWxsIHNpemUgaXMgcHJlZmVyYWJsZS5cblxuXHRmdW5jdGlvbiBhZGxlcjMyKGFkbGVyLCBidWYsIGxlbiwgcG9zKSB7XG5cdCAgdmFyIHMxID0gKGFkbGVyICYgMHhmZmZmKSB8MFxuXHQgICAgLCBzMiA9ICgoYWRsZXIgPj4+IDE2KSAmIDB4ZmZmZikgfDBcblx0ICAgICwgbiA9IDA7XG5cblx0ICB3aGlsZSAobGVuICE9PSAwKSB7XG5cdCAgICAvLyBTZXQgbGltaXQgfiB0d2ljZSBsZXNzIHRoYW4gNTU1MiwgdG8ga2VlcFxuXHQgICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cblx0ICAgIC8vIGluIG90aGVyIGNhc2UgJT0gd2lsbCBmYWlsLlxuXHQgICAgbiA9IGxlbiA+IDIwMDAgPyAyMDAwIDogbGVuO1xuXHQgICAgbGVuIC09IG47XG5cblx0ICAgIGRvIHtcblx0ICAgICAgczEgPSAoczEgKyBidWZbcG9zKytdKSB8MDtcblx0ICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG5cdCAgICB9IHdoaWxlICgtLW4pO1xuXG5cdCAgICBzMSAlPSA2NTUyMTtcblx0ICAgIHMyICU9IDY1NTIxO1xuXHQgIH1cblxuXHQgIHJldHVybiAoczEgfCAoczIgPDwgMTYpKSB8MDtcblx0fVxuXG5cblx0bW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuXHR9LHt9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXG5cdCAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuXHQgIFpfTk9fRkxVU0g6ICAgICAgICAgMCxcblx0ICBaX1BBUlRJQUxfRkxVU0g6ICAgIDEsXG5cdCAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuXHQgIFpfRlVMTF9GTFVTSDogICAgICAgMyxcblx0ICBaX0ZJTklTSDogICAgICAgICAgIDQsXG5cdCAgWl9CTE9DSzogICAgICAgICAgICA1LFxuXHQgIFpfVFJFRVM6ICAgICAgICAgICAgNixcblxuXHQgIC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcblx0ICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cblx0ICAqL1xuXHQgIFpfT0s6ICAgICAgICAgICAgICAgMCxcblx0ICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG5cdCAgWl9ORUVEX0RJQ1Q6ICAgICAgICAyLFxuXHQgIFpfRVJSTk86ICAgICAgICAgICAtMSxcblx0ICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG5cdCAgWl9EQVRBX0VSUk9SOiAgICAgIC0zLFxuXHQgIC8vWl9NRU1fRVJST1I6ICAgICAtNCxcblx0ICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG5cdCAgLy9aX1ZFUlNJT05fRVJST1I6IC02LFxuXG5cdCAgLyogY29tcHJlc3Npb24gbGV2ZWxzICovXG5cdCAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuXHQgIFpfQkVTVF9TUEVFRDogICAgICAgICAgICAgMSxcblx0ICBaX0JFU1RfQ09NUFJFU1NJT046ICAgICAgIDksXG5cdCAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cblx0ICBaX0ZJTFRFUkVEOiAgICAgICAgICAgICAgIDEsXG5cdCAgWl9IVUZGTUFOX09OTFk6ICAgICAgICAgICAyLFxuXHQgIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcblx0ICBaX0ZJWEVEOiAgICAgICAgICAgICAgICAgIDQsXG5cdCAgWl9ERUZBVUxUX1NUUkFURUdZOiAgICAgICAwLFxuXG5cdCAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuXHQgIFpfQklOQVJZOiAgICAgICAgICAgICAgICAgMCxcblx0ICBaX1RFWFQ6ICAgICAgICAgICAgICAgICAgIDEsXG5cdCAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcblx0ICBaX1VOS05PV046ICAgICAgICAgICAgICAgIDIsXG5cblx0ICAvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cblx0ICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcblx0ICAvL1pfTlVMTDogICAgICAgICAgICAgICAgIG51bGwgLy8gVXNlIC0xIG9yIG51bGwgaW5saW5lLCBkZXBlbmRpbmcgb24gdmFyIHR5cGVcblx0fTtcblx0fSx7fV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0Ly8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG5cdC8vIFNvIHdyaXRlIGNvZGUgdG8gbWluaW1pemUgc2l6ZSAtIG5vIHByZWdlbmVyYXRlZCB0YWJsZXNcblx0Ly8gYW5kIGFycmF5IHRvb2xzIGRlcGVuZGVuY2llcy5cblxuXG5cdC8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5cdGZ1bmN0aW9uIG1ha2VUYWJsZSgpIHtcblx0ICB2YXIgYywgdGFibGUgPSBbXTtcblxuXHQgIGZvcih2YXIgbiA9MDsgbiA8IDI1NjsgbisrKXtcblx0ICAgIGMgPSBuO1xuXHQgICAgZm9yKHZhciBrID0wOyBrIDwgODsgaysrKXtcblx0ICAgICAgYyA9ICgoYyYxKSA/ICgweEVEQjg4MzIwIF4gKGMgPj4+IDEpKSA6IChjID4+PiAxKSk7XG5cdCAgICB9XG5cdCAgICB0YWJsZVtuXSA9IGM7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRhYmxlO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cblx0dmFyIGNyY1RhYmxlID0gbWFrZVRhYmxlKCk7XG5cblxuXHRmdW5jdGlvbiBjcmMzMihjcmMsIGJ1ZiwgbGVuLCBwb3MpIHtcblx0ICB2YXIgdCA9IGNyY1RhYmxlXG5cdCAgICAsIGVuZCA9IHBvcyArIGxlbjtcblxuXHQgIGNyYyA9IGNyYyBeICgtMSk7XG5cblx0ICBmb3IgKHZhciBpID0gcG9zOyBpIDwgZW5kOyBpKysgKSB7XG5cdCAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRbKGNyYyBeIGJ1ZltpXSkgJiAweEZGXTtcblx0ICB9XG5cblx0ICByZXR1cm4gKGNyYyBeICgtMSkpOyAvLyA+Pj4gMDtcblx0fVxuXG5cblx0bW9kdWxlLmV4cG9ydHMgPSBjcmMzMjtcblx0fSx7fV0sMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIHV0aWxzICAgPSBfZGVyZXFfKCcuLi91dGlscy9jb21tb24nKTtcblx0dmFyIHRyZWVzICAgPSBfZGVyZXFfKCcuL3RyZWVzJyk7XG5cdHZhciBhZGxlcjMyID0gX2RlcmVxXygnLi9hZGxlcjMyJyk7XG5cdHZhciBjcmMzMiAgID0gX2RlcmVxXygnLi9jcmMzMicpO1xuXHR2YXIgbXNnICAgPSBfZGVyZXFfKCcuL21lc3NhZ2VzJyk7XG5cblx0LyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cdC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cblx0dmFyIFpfTk9fRkxVU0ggICAgICA9IDA7XG5cdHZhciBaX1BBUlRJQUxfRkxVU0ggPSAxO1xuXHQvL3ZhciBaX1NZTkNfRkxVU0ggICAgPSAyO1xuXHR2YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcblx0dmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG5cdHZhciBaX0JMT0NLICAgICAgICAgPSA1O1xuXHQvL3ZhciBaX1RSRUVTICAgICAgICAgPSA2O1xuXG5cblx0LyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuXHQgKiBhcmUgZXJyb3JzLCBwb3NpdGl2ZSB2YWx1ZXMgYXJlIHVzZWQgZm9yIHNwZWNpYWwgYnV0IG5vcm1hbCBldmVudHMuXG5cdCAqL1xuXHR2YXIgWl9PSyAgICAgICAgICAgID0gMDtcblx0dmFyIFpfU1RSRUFNX0VORCAgICA9IDE7XG5cdC8vdmFyIFpfTkVFRF9ESUNUICAgICA9IDI7XG5cdC8vdmFyIFpfRVJSTk8gICAgICAgICA9IC0xO1xuXHR2YXIgWl9TVFJFQU1fRVJST1IgID0gLTI7XG5cdHZhciBaX0RBVEFfRVJST1IgICAgPSAtMztcblx0Ly92YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG5cdHZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcblx0Ly92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7XG5cblxuXHQvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cblx0Ly92YXIgWl9OT19DT01QUkVTU0lPTiAgICAgID0gMDtcblx0Ly92YXIgWl9CRVNUX1NQRUVEICAgICAgICAgID0gMTtcblx0Ly92YXIgWl9CRVNUX0NPTVBSRVNTSU9OICAgID0gOTtcblx0dmFyIFpfREVGQVVMVF9DT01QUkVTU0lPTiA9IC0xO1xuXG5cblx0dmFyIFpfRklMVEVSRUQgICAgICAgICAgICA9IDE7XG5cdHZhciBaX0hVRkZNQU5fT05MWSAgICAgICAgPSAyO1xuXHR2YXIgWl9STEUgICAgICAgICAgICAgICAgID0gMztcblx0dmFyIFpfRklYRUQgICAgICAgICAgICAgICA9IDQ7XG5cdHZhciBaX0RFRkFVTFRfU1RSQVRFR1kgICAgPSAwO1xuXG5cdC8qIFBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgZGF0YV90eXBlIGZpZWxkICh0aG91Z2ggc2VlIGluZmxhdGUoKSkgKi9cblx0Ly92YXIgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcblx0Ly92YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcblx0Ly92YXIgWl9BU0NJSSAgICAgICAgICAgICAgID0gMTsgLy8gPSBaX1RFWFRcblx0dmFyIFpfVU5LTk9XTiAgICAgICAgICAgICA9IDI7XG5cblxuXHQvKiBUaGUgZGVmbGF0ZSBjb21wcmVzc2lvbiBtZXRob2QgKi9cblx0dmFyIFpfREVGTEFURUQgID0gODtcblxuXHQvKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblx0dmFyIE1BWF9NRU1fTEVWRUwgPSA5O1xuXHQvKiBNYXhpbXVtIHZhbHVlIGZvciBtZW1MZXZlbCBpbiBkZWZsYXRlSW5pdDIgKi9cblx0dmFyIE1BWF9XQklUUyA9IDE1O1xuXHQvKiAzMksgTFo3NyB3aW5kb3cgKi9cblx0dmFyIERFRl9NRU1fTEVWRUwgPSA4O1xuXG5cblx0dmFyIExFTkdUSF9DT0RFUyAgPSAyOTtcblx0LyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG5cdHZhciBMSVRFUkFMUyAgICAgID0gMjU2O1xuXHQvKiBudW1iZXIgb2YgbGl0ZXJhbCBieXRlcyAwLi4yNTUgKi9cblx0dmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG5cdC8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXHR2YXIgRF9DT0RFUyAgICAgICA9IDMwO1xuXHQvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cblx0dmFyIEJMX0NPREVTICAgICAgPSAxOTtcblx0LyogbnVtYmVyIG9mIGNvZGVzIHVzZWQgdG8gdHJhbnNmZXIgdGhlIGJpdCBsZW5ndGhzICovXG5cdHZhciBIRUFQX1NJWkUgICAgID0gMipMX0NPREVTICsgMTtcblx0LyogbWF4aW11bSBoZWFwIHNpemUgKi9cblx0dmFyIE1BWF9CSVRTICA9IDE1O1xuXHQvKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxuXHR2YXIgTUlOX01BVENIID0gMztcblx0dmFyIE1BWF9NQVRDSCA9IDI1ODtcblx0dmFyIE1JTl9MT09LQUhFQUQgPSAoTUFYX01BVENIICsgTUlOX01BVENIICsgMSk7XG5cblx0dmFyIFBSRVNFVF9ESUNUID0gMHgyMDtcblxuXHR2YXIgSU5JVF9TVEFURSA9IDQyO1xuXHR2YXIgRVhUUkFfU1RBVEUgPSA2OTtcblx0dmFyIE5BTUVfU1RBVEUgPSA3Mztcblx0dmFyIENPTU1FTlRfU1RBVEUgPSA5MTtcblx0dmFyIEhDUkNfU1RBVEUgPSAxMDM7XG5cdHZhciBCVVNZX1NUQVRFID0gMTEzO1xuXHR2YXIgRklOSVNIX1NUQVRFID0gNjY2O1xuXG5cdHZhciBCU19ORUVEX01PUkUgICAgICA9IDE7IC8qIGJsb2NrIG5vdCBjb21wbGV0ZWQsIG5lZWQgbW9yZSBpbnB1dCBvciBtb3JlIG91dHB1dCAqL1xuXHR2YXIgQlNfQkxPQ0tfRE9ORSAgICAgPSAyOyAvKiBibG9jayBmbHVzaCBwZXJmb3JtZWQgKi9cblx0dmFyIEJTX0ZJTklTSF9TVEFSVEVEID0gMzsgLyogZmluaXNoIHN0YXJ0ZWQsIG5lZWQgb25seSBtb3JlIG91dHB1dCBhdCBuZXh0IGRlZmxhdGUgKi9cblx0dmFyIEJTX0ZJTklTSF9ET05FICAgID0gNDsgLyogZmluaXNoIGRvbmUsIGFjY2VwdCBubyBtb3JlIGlucHV0IG9yIG91dHB1dCAqL1xuXG5cdHZhciBPU19DT0RFID0gMHgwMzsgLy8gVW5peCA6KSAuIERvbid0IGRldGVjdCwgdXNlIHRoaXMgZGVmYXVsdC5cblxuXHRmdW5jdGlvbiBlcnIoc3RybSwgZXJyb3JDb2RlKSB7XG5cdCAgc3RybS5tc2cgPSBtc2dbZXJyb3JDb2RlXTtcblx0ICByZXR1cm4gZXJyb3JDb2RlO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmFuayhmKSB7XG5cdCAgcmV0dXJuICgoZikgPDwgMSkgLSAoKGYpID4gNCA/IDkgOiAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHplcm8oYnVmKSB7IHZhciBsZW4gPSBidWYubGVuZ3RoOyB3aGlsZSAoLS1sZW4gPj0gMCkgeyBidWZbbGVuXSA9IDA7IH0gfVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBGbHVzaCBhcyBtdWNoIHBlbmRpbmcgb3V0cHV0IGFzIHBvc3NpYmxlLiBBbGwgZGVmbGF0ZSgpIG91dHB1dCBnb2VzXG5cdCAqIHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXRcblx0ICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cblx0ICogKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuXHQgKi9cblx0ZnVuY3Rpb24gZmx1c2hfcGVuZGluZyhzdHJtKSB7XG5cdCAgdmFyIHMgPSBzdHJtLnN0YXRlO1xuXG5cdCAgLy9fdHJfZmx1c2hfYml0cyhzKTtcblx0ICB2YXIgbGVuID0gcy5wZW5kaW5nO1xuXHQgIGlmIChsZW4gPiBzdHJtLmF2YWlsX291dCkge1xuXHQgICAgbGVuID0gc3RybS5hdmFpbF9vdXQ7XG5cdCAgfVxuXHQgIGlmIChsZW4gPT09IDApIHsgcmV0dXJuOyB9XG5cblx0ICB1dGlscy5hcnJheVNldChzdHJtLm91dHB1dCwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nX291dCwgbGVuLCBzdHJtLm5leHRfb3V0KTtcblx0ICBzdHJtLm5leHRfb3V0ICs9IGxlbjtcblx0ICBzLnBlbmRpbmdfb3V0ICs9IGxlbjtcblx0ICBzdHJtLnRvdGFsX291dCArPSBsZW47XG5cdCAgc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xuXHQgIHMucGVuZGluZyAtPSBsZW47XG5cdCAgaWYgKHMucGVuZGluZyA9PT0gMCkge1xuXHQgICAgcy5wZW5kaW5nX291dCA9IDA7XG5cdCAgfVxuXHR9XG5cblxuXHRmdW5jdGlvbiBmbHVzaF9ibG9ja19vbmx5IChzLCBsYXN0KSB7XG5cdCAgdHJlZXMuX3RyX2ZsdXNoX2Jsb2NrKHMsIChzLmJsb2NrX3N0YXJ0ID49IDAgPyBzLmJsb2NrX3N0YXJ0IDogLTEpLCBzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCwgbGFzdCk7XG5cdCAgcy5ibG9ja19zdGFydCA9IHMuc3Ryc3RhcnQ7XG5cdCAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBwdXRfYnl0ZShzLCBiKSB7XG5cdCAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFB1dCBhIHNob3J0IGluIHRoZSBwZW5kaW5nIGJ1ZmZlci4gVGhlIDE2LWJpdCB2YWx1ZSBpcyBwdXQgaW4gTVNCIG9yZGVyLlxuXHQgKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cblx0ICogcGVuZGluZ19idWYuXG5cdCAqL1xuXHRmdW5jdGlvbiBwdXRTaG9ydE1TQihzLCBiKSB7XG5cdC8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiA+PiA4KSk7XG5cdC8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTtcblx0ICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IChiID4+PiA4KSAmIDB4ZmY7XG5cdCAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBiICYgMHhmZjtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcblx0ICogYW5kIHRvdGFsIG51bWJlciBvZiBieXRlcyByZWFkLiAgQWxsIGRlZmxhdGUoKSBpbnB1dCBnb2VzIHRocm91Z2hcblx0ICogdGhpcyBmdW5jdGlvbiBzbyBzb21lIGFwcGxpY2F0aW9ucyBtYXkgd2lzaCB0byBtb2RpZnkgaXQgdG8gYXZvaWRcblx0ICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuXHQgKiAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS5cblx0ICovXG5cdGZ1bmN0aW9uIHJlYWRfYnVmKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpIHtcblx0ICB2YXIgbGVuID0gc3RybS5hdmFpbF9pbjtcblxuXHQgIGlmIChsZW4gPiBzaXplKSB7IGxlbiA9IHNpemU7IH1cblx0ICBpZiAobGVuID09PSAwKSB7IHJldHVybiAwOyB9XG5cblx0ICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuXHQgIHV0aWxzLmFycmF5U2V0KGJ1Ziwgc3RybS5pbnB1dCwgc3RybS5uZXh0X2luLCBsZW4sIHN0YXJ0KTtcblx0ICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG5cdCAgICBzdHJtLmFkbGVyID0gYWRsZXIzMihzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuXHQgIH1cblxuXHQgIGVsc2UgaWYgKHN0cm0uc3RhdGUud3JhcCA9PT0gMikge1xuXHQgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIGJ1ZiwgbGVuLCBzdGFydCk7XG5cdCAgfVxuXG5cdCAgc3RybS5uZXh0X2luICs9IGxlbjtcblx0ICBzdHJtLnRvdGFsX2luICs9IGxlbjtcblxuXHQgIHJldHVybiBsZW47XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBTZXQgbWF0Y2hfc3RhcnQgdG8gdGhlIGxvbmdlc3QgbWF0Y2ggc3RhcnRpbmcgYXQgdGhlIGdpdmVuIHN0cmluZyBhbmRcblx0ICogcmV0dXJuIGl0cyBsZW5ndGguIE1hdGNoZXMgc2hvcnRlciBvciBlcXVhbCB0byBwcmV2X2xlbmd0aCBhcmUgZGlzY2FyZGVkLFxuXHQgKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzXG5cdCAqIGdhcmJhZ2UuXG5cdCAqIElOIGFzc2VydGlvbnM6IGN1cl9tYXRjaCBpcyB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiBmb3IgdGhlIGN1cnJlbnRcblx0ICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMVxuXHQgKiBPVVQgYXNzZXJ0aW9uOiB0aGUgbWF0Y2ggbGVuZ3RoIGlzIG5vdCBncmVhdGVyIHRoYW4gcy0+bG9va2FoZWFkLlxuXHQgKi9cblx0ZnVuY3Rpb24gbG9uZ2VzdF9tYXRjaChzLCBjdXJfbWF0Y2gpIHtcblx0ICB2YXIgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuXHQgIHZhciBzY2FuID0gcy5zdHJzdGFydDsgLyogY3VycmVudCBzdHJpbmcgKi9cblx0ICB2YXIgbWF0Y2g7ICAgICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaGVkIHN0cmluZyAqL1xuXHQgIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cblx0ICB2YXIgYmVzdF9sZW4gPSBzLnByZXZfbGVuZ3RoOyAgICAgICAgICAgICAgLyogYmVzdCBtYXRjaCBsZW5ndGggc28gZmFyICovXG5cdCAgdmFyIG5pY2VfbWF0Y2ggPSBzLm5pY2VfbWF0Y2g7ICAgICAgICAgICAgIC8qIHN0b3AgaWYgbWF0Y2ggbG9uZyBlbm91Z2ggKi9cblx0ICB2YXIgbGltaXQgPSAocy5zdHJzdGFydCA+IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSA/XG5cdCAgICAgIHMuc3Ryc3RhcnQgLSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA6IDAvKk5JTCovO1xuXG5cdCAgdmFyIF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcblxuXHQgIHZhciB3bWFzayA9IHMud19tYXNrO1xuXHQgIHZhciBwcmV2ICA9IHMucHJldjtcblxuXHQgIC8qIFN0b3Agd2hlbiBjdXJfbWF0Y2ggYmVjb21lcyA8PSBsaW1pdC4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsXG5cdCAgICogd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZyBvZiB3aW5kb3cgaW5kZXggMC5cblx0ICAgKi9cblxuXHQgIHZhciBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuXHQgIHZhciBzY2FuX2VuZDEgID0gX3dpbltzY2FuICsgYmVzdF9sZW4gLSAxXTtcblx0ICB2YXIgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcblxuXHQgIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuXHQgICAqIEl0IGlzIGVhc3kgdG8gZ2V0IHJpZCBvZiB0aGlzIG9wdGltaXphdGlvbiBpZiBuZWNlc3NhcnkuXG5cdCAgICovXG5cdCAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG5cdCAgLyogRG8gbm90IHdhc3RlIHRvbyBtdWNoIHRpbWUgaWYgd2UgYWxyZWFkeSBoYXZlIGEgZ29vZCBtYXRjaDogKi9cblx0ICBpZiAocy5wcmV2X2xlbmd0aCA+PSBzLmdvb2RfbWF0Y2gpIHtcblx0ICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcblx0ICB9XG5cdCAgLyogRG8gbm90IGxvb2sgZm9yIG1hdGNoZXMgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGlucHV0LiBUaGlzIGlzIG5lY2Vzc2FyeVxuXHQgICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuXHQgICAqL1xuXHQgIGlmIChuaWNlX21hdGNoID4gcy5sb29rYWhlYWQpIHsgbmljZV9tYXRjaCA9IHMubG9va2FoZWFkOyB9XG5cblx0ICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG5cdCAgZG8ge1xuXHQgICAgLy8gQXNzZXJ0KGN1cl9tYXRjaCA8IHMtPnN0cnN0YXJ0LCBcIm5vIGZ1dHVyZVwiKTtcblx0ICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG5cdCAgICAvKiBTa2lwIHRvIG5leHQgbWF0Y2ggaWYgdGhlIG1hdGNoIGxlbmd0aCBjYW5ub3QgaW5jcmVhc2Vcblx0ICAgICAqIG9yIGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbGVzcyB0aGFuIDIuICBOb3RlIHRoYXQgdGhlIGNoZWNrcyBiZWxvd1xuXHQgICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG5cdCAgICAgKiByZWFzb25zLiAgVGhlcmVmb3JlIHVuaW5pdGlhbGl6ZWQgbWVtb3J5IHdpbGwgYmUgYWNjZXNzZWQsIGFuZFxuXHQgICAgICogY29uZGl0aW9uYWwganVtcHMgd2lsbCBiZSBtYWRlIHRoYXQgZGVwZW5kIG9uIHRob3NlIHZhbHVlcy5cblx0ICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuXHQgICAgICogdGhlIG91dHB1dCBvZiBkZWZsYXRlIGlzIG5vdCBhZmZlY3RlZCBieSB0aGUgdW5pbml0aWFsaXplZCB2YWx1ZXMuXG5cdCAgICAgKi9cblxuXHQgICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcblx0ICAgICAgICBfd2luW21hdGNoICsgYmVzdF9sZW4gLSAxXSAhPT0gc2Nhbl9lbmQxIHx8XG5cdCAgICAgICAgX3dpblttYXRjaF0gICAgICAgICAgICAgICAgIT09IF93aW5bc2Nhbl0gfHxcblx0ICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcblx0ICAgICAgY29udGludWU7XG5cdCAgICB9XG5cblx0ICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG5cdCAgICAgKiBhZ2FpbiBsYXRlci4gKFRoaXMgaGV1cmlzdGljIGlzIG5vdCBhbHdheXMgYSB3aW4uKVxuXHQgICAgICogSXQgaXMgbm90IG5lY2Vzc2FyeSB0byBjb21wYXJlIHNjYW5bMl0gYW5kIG1hdGNoWzJdIHNpbmNlIHRoZXlcblx0ICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcblx0ICAgICAqIHRoZSBoYXNoIGtleXMgYXJlIGVxdWFsIGFuZCB0aGF0IEhBU0hfQklUUyA+PSA4LlxuXHQgICAgICovXG5cdCAgICBzY2FuICs9IDI7XG5cdCAgICBtYXRjaCsrO1xuXHQgICAgLy8gQXNzZXJ0KCpzY2FuID09ICptYXRjaCwgXCJtYXRjaFsyXT9cIik7XG5cblx0ICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG5cdCAgICAgKiB0aGUgMjU2dGggY2hlY2sgd2lsbCBiZSBtYWRlIGF0IHN0cnN0YXJ0KzI1OC5cblx0ICAgICAqL1xuXHQgICAgZG8ge1xuXHQgICAgICAvKmpzaGludCBub2VtcHR5OmZhbHNlKi9cblx0ICAgIH0gd2hpbGUgKF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcblx0ICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcblx0ICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcblx0ICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcblx0ICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG5cdCAgICAvLyBBc3NlcnQoc2NhbiA8PSBzLT53aW5kb3crKHVuc2lnbmVkKShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG5cblx0ICAgIGxlbiA9IE1BWF9NQVRDSCAtIChzdHJlbmQgLSBzY2FuKTtcblx0ICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0g7XG5cblx0ICAgIGlmIChsZW4gPiBiZXN0X2xlbikge1xuXHQgICAgICBzLm1hdGNoX3N0YXJ0ID0gY3VyX21hdGNoO1xuXHQgICAgICBiZXN0X2xlbiA9IGxlbjtcblx0ICAgICAgaWYgKGxlbiA+PSBuaWNlX21hdGNoKSB7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG5cdCAgICAgIHNjYW5fZW5kICAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbl07XG5cdCAgICB9XG5cdCAgfSB3aGlsZSAoKGN1cl9tYXRjaCA9IHByZXZbY3VyX21hdGNoICYgd21hc2tdKSA+IGxpbWl0ICYmIC0tY2hhaW5fbGVuZ3RoICE9PSAwKTtcblxuXHQgIGlmIChiZXN0X2xlbiA8PSBzLmxvb2thaGVhZCkge1xuXHQgICAgcmV0dXJuIGJlc3RfbGVuO1xuXHQgIH1cblx0ICByZXR1cm4gcy5sb29rYWhlYWQ7XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBGaWxsIHRoZSB3aW5kb3cgd2hlbiB0aGUgbG9va2FoZWFkIGJlY29tZXMgaW5zdWZmaWNpZW50LlxuXHQgKiBVcGRhdGVzIHN0cnN0YXJ0IGFuZCBsb29rYWhlYWQuXG5cdCAqXG5cdCAqIElOIGFzc2VydGlvbjogbG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRFxuXHQgKiBPVVQgYXNzZXJ0aW9uczogc3Ryc3RhcnQgPD0gd2luZG93X3NpemUtTUlOX0xPT0tBSEVBRFxuXHQgKiAgICBBdCBsZWFzdCBvbmUgYnl0ZSBoYXMgYmVlbiByZWFkLCBvciBhdmFpbF9pbiA9PSAwOyByZWFkcyBhcmVcblx0ICogICAgcGVyZm9ybWVkIGZvciBhdCBsZWFzdCB0d28gYnl0ZXMgKHJlcXVpcmVkIGZvciB0aGUgemlwIHRyYW5zbGF0ZV9lb2xcblx0ICogICAgb3B0aW9uIC0tIG5vdCBzdXBwb3J0ZWQgaGVyZSkuXG5cdCAqL1xuXHRmdW5jdGlvbiBmaWxsX3dpbmRvdyhzKSB7XG5cdCAgdmFyIF93X3NpemUgPSBzLndfc2l6ZTtcblx0ICB2YXIgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG5cdCAgLy9Bc3NlcnQocy0+bG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRCwgXCJhbHJlYWR5IGVub3VnaCBsb29rYWhlYWRcIik7XG5cblx0ICBkbyB7XG5cdCAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuXHQgICAgLy8gSlMgaW50cyBoYXZlIDMyIGJpdCwgYmxvY2sgYmVsb3cgbm90IG5lZWRlZFxuXHQgICAgLyogRGVhbCB3aXRoICFAIyQlIDY0SyBsaW1pdDogKi9cblx0ICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcblx0ICAgIC8vICAgIGlmIChtb3JlID09IDAgJiYgcy0+c3Ryc3RhcnQgPT0gMCAmJiBzLT5sb29rYWhlYWQgPT0gMCkge1xuXHQgICAgLy8gICAgICAgIG1vcmUgPSB3c2l6ZTtcblx0ICAgIC8vXG5cdCAgICAvLyAgfSBlbHNlIGlmIChtb3JlID09ICh1bnNpZ25lZCkoLTEpKSB7XG5cdCAgICAvLyAgICAgICAgLyogVmVyeSB1bmxpa2VseSwgYnV0IHBvc3NpYmxlIG9uIDE2IGJpdCBtYWNoaW5lIGlmXG5cdCAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcblx0ICAgIC8vICAgICAgICAgKi9cblx0ICAgIC8vICAgICAgICBtb3JlLS07XG5cdCAgICAvLyAgICB9XG5cdCAgICAvL31cblxuXG5cdCAgICAvKiBJZiB0aGUgd2luZG93IGlzIGFsbW9zdCBmdWxsIGFuZCB0aGVyZSBpcyBpbnN1ZmZpY2llbnQgbG9va2FoZWFkLFxuXHQgICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cblx0ICAgICAqL1xuXHQgICAgaWYgKHMuc3Ryc3RhcnQgPj0gX3dfc2l6ZSArIChfd19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcblxuXHQgICAgICB1dGlscy5hcnJheVNldChzLndpbmRvdywgcy53aW5kb3csIF93X3NpemUsIF93X3NpemUsIDApO1xuXHQgICAgICBzLm1hdGNoX3N0YXJ0IC09IF93X3NpemU7XG5cdCAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTtcblx0ICAgICAgLyogd2Ugbm93IGhhdmUgc3Ryc3RhcnQgPj0gTUFYX0RJU1QgKi9cblx0ICAgICAgcy5ibG9ja19zdGFydCAtPSBfd19zaXplO1xuXG5cdCAgICAgIC8qIFNsaWRlIHRoZSBoYXNoIHRhYmxlIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzIgYml0IHZhbHVlc1xuXHQgICAgICAgYXQgdGhlIGV4cGVuc2Ugb2YgbWVtb3J5IHVzYWdlKS4gV2Ugc2xpZGUgZXZlbiB3aGVuIGxldmVsID09IDBcblx0ICAgICAgIHRvIGtlZXAgdGhlIGhhc2ggdGFibGUgY29uc2lzdGVudCBpZiB3ZSBzd2l0Y2ggYmFjayB0byBsZXZlbCA+IDBcblx0ICAgICAgIGxhdGVyLiAoVXNpbmcgbGV2ZWwgMCBwZXJtYW5lbnRseSBpcyBub3QgYW4gb3B0aW1hbCB1c2FnZSBvZlxuXHQgICAgICAgemxpYiwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCB0aGlzIHBhdGhvbG9naWNhbCBjYXNlLilcblx0ICAgICAgICovXG5cblx0ICAgICAgbiA9IHMuaGFzaF9zaXplO1xuXHQgICAgICBwID0gbjtcblx0ICAgICAgZG8ge1xuXHQgICAgICAgIG0gPSBzLmhlYWRbLS1wXTtcblx0ICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcblx0ICAgICAgfSB3aGlsZSAoLS1uKTtcblxuXHQgICAgICBuID0gX3dfc2l6ZTtcblx0ICAgICAgcCA9IG47XG5cdCAgICAgIGRvIHtcblx0ICAgICAgICBtID0gcy5wcmV2Wy0tcF07XG5cdCAgICAgICAgcy5wcmV2W3BdID0gKG0gPj0gX3dfc2l6ZSA/IG0gLSBfd19zaXplIDogMCk7XG5cdCAgICAgICAgLyogSWYgbiBpcyBub3Qgb24gYW55IGhhc2ggY2hhaW4sIHByZXZbbl0gaXMgZ2FyYmFnZSBidXRcblx0ICAgICAgICAgKiBpdHMgdmFsdWUgd2lsbCBuZXZlciBiZSB1c2VkLlxuXHQgICAgICAgICAqL1xuXHQgICAgICB9IHdoaWxlICgtLW4pO1xuXG5cdCAgICAgIG1vcmUgKz0gX3dfc2l6ZTtcblx0ICAgIH1cblx0ICAgIGlmIChzLnN0cm0uYXZhaWxfaW4gPT09IDApIHtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cblx0ICAgIC8qIElmIHRoZXJlIHdhcyBubyBzbGlkaW5nOlxuXHQgICAgICogICAgc3Ryc3RhcnQgPD0gV1NJWkUrTUFYX0RJU1QtMSAmJiBsb29rYWhlYWQgPD0gTUlOX0xPT0tBSEVBRCAtIDEgJiZcblx0ICAgICAqICAgIG1vcmUgPT0gd2luZG93X3NpemUgLSBsb29rYWhlYWQgLSBzdHJzdGFydFxuXHQgICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIChNSU5fTE9PS0FIRUFELTEgKyBXU0laRSArIE1BWF9ESVNULTEpXG5cdCAgICAgKiA9PiBtb3JlID49IHdpbmRvd19zaXplIC0gMipXU0laRSArIDJcblx0ICAgICAqIEluIHRoZSBCSUdfTUVNIG9yIE1NQVAgY2FzZSAobm90IHlldCBzdXBwb3J0ZWQpLFxuXHQgICAgICogICB3aW5kb3dfc2l6ZSA9PSBpbnB1dF9zaXplICsgTUlOX0xPT0tBSEVBRCAgJiZcblx0ICAgICAqICAgc3Ryc3RhcnQgKyBzLT5sb29rYWhlYWQgPD0gaW5wdXRfc2l6ZSA9PiBtb3JlID49IE1JTl9MT09LQUhFQUQuXG5cdCAgICAgKiBPdGhlcndpc2UsIHdpbmRvd19zaXplID09IDIqV1NJWkUgc28gbW9yZSA+PSAyLlxuXHQgICAgICogSWYgdGhlcmUgd2FzIHNsaWRpbmcsIG1vcmUgPj0gV1NJWkUuIFNvIGluIGFsbCBjYXNlcywgbW9yZSA+PSAyLlxuXHQgICAgICovXG5cdCAgICAvL0Fzc2VydChtb3JlID49IDIsIFwibW9yZSA8IDJcIik7XG5cdCAgICBuID0gcmVhZF9idWYocy5zdHJtLCBzLndpbmRvdywgcy5zdHJzdGFydCArIHMubG9va2FoZWFkLCBtb3JlKTtcblx0ICAgIHMubG9va2FoZWFkICs9IG47XG5cblx0ICAgIC8qIEluaXRpYWxpemUgdGhlIGhhc2ggdmFsdWUgbm93IHRoYXQgd2UgaGF2ZSBzb21lIGlucHV0OiAqL1xuXHQgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPj0gTUlOX01BVENIKSB7XG5cdCAgICAgIHN0ciA9IHMuc3Ryc3RhcnQgLSBzLmluc2VydDtcblx0ICAgICAgcy5pbnNfaCA9IHMud2luZG93W3N0cl07XG5cblx0ICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXG5cdCAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXHQvLyNpZiBNSU5fTUFUQ0ggIT0gM1xuXHQvLyAgICAgICAgQ2FsbCB1cGRhdGVfaGFzaCgpIE1JTl9NQVRDSC0zIG1vcmUgdGltZXNcblx0Ly8jZW5kaWZcblx0ICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG5cdCAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuXHQgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3N0ciArIE1JTl9NQVRDSC0xXSkgJiBzLmhhc2hfbWFzaztcblxuXHQgICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cdCAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gc3RyO1xuXHQgICAgICAgIHN0cisrO1xuXHQgICAgICAgIHMuaW5zZXJ0LS07XG5cdCAgICAgICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPCBNSU5fTUFUQ0gpIHtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyogSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpcyBnYXJiYWdlLFxuXHQgICAgICogYnV0IHRoaXMgaXMgbm90IGltcG9ydGFudCBzaW5jZSBvbmx5IGxpdGVyYWwgYnl0ZXMgd2lsbCBiZSBlbWl0dGVkLlxuXHQgICAgICovXG5cblx0ICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcblxuXHQgIC8qIElmIHRoZSBXSU5fSU5JVCBieXRlcyBhZnRlciB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IGRhdGEgaGF2ZSBuZXZlciBiZWVuXG5cdCAgICogd3JpdHRlbiwgdGhlbiB6ZXJvIHRob3NlIGJ5dGVzIGluIG9yZGVyIHRvIGF2b2lkIG1lbW9yeSBjaGVjayByZXBvcnRzIG9mXG5cdCAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5XG5cdCAgICogdGhlIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMuICBVcGRhdGUgdGhlIGhpZ2ggd2F0ZXIgbWFyayBmb3IgdGhlIG5leHRcblx0ICAgKiB0aW1lIHRocm91Z2ggaGVyZS4gIFdJTl9JTklUIGlzIHNldCB0byBNQVhfTUFUQ0ggc2luY2UgdGhlIGxvbmdlc3QgbWF0Y2hcblx0ICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLlxuXHQgICAqL1xuXHQvLyAgaWYgKHMuaGlnaF93YXRlciA8IHMud2luZG93X3NpemUpIHtcblx0Ly8gICAgdmFyIGN1cnIgPSBzLnN0cnN0YXJ0ICsgcy5sb29rYWhlYWQ7XG5cdC8vICAgIHZhciBpbml0ID0gMDtcblx0Ly9cblx0Ly8gICAgaWYgKHMuaGlnaF93YXRlciA8IGN1cnIpIHtcblx0Ly8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcblx0Ly8gICAgICAgKiBieXRlcyBvciB1cCB0byBlbmQgb2Ygd2luZG93LCB3aGljaGV2ZXIgaXMgbGVzcy5cblx0Ly8gICAgICAgKi9cblx0Ly8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG5cdC8vICAgICAgaWYgKGluaXQgPiBXSU5fSU5JVClcblx0Ly8gICAgICAgIGluaXQgPSBXSU5fSU5JVDtcblx0Ly8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG5cdC8vICAgICAgcy0+aGlnaF93YXRlciA9IGN1cnIgKyBpbml0O1xuXHQvLyAgICB9XG5cdC8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuXHQvLyAgICAgIC8qIEhpZ2ggd2F0ZXIgbWFyayBhdCBvciBhYm92ZSBjdXJyZW50IGRhdGEsIGJ1dCBiZWxvdyBjdXJyZW50IGRhdGFcblx0Ly8gICAgICAgKiBwbHVzIFdJTl9JTklUIC0tIHplcm8gb3V0IHRvIGN1cnJlbnQgZGF0YSBwbHVzIFdJTl9JTklULCBvciB1cFxuXHQvLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuXHQvLyAgICAgICAqL1xuXHQvLyAgICAgIGluaXQgPSAodWxnKWN1cnIgKyBXSU5fSU5JVCAtIHMtPmhpZ2hfd2F0ZXI7XG5cdC8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG5cdC8vICAgICAgICBpbml0ID0gcy0+d2luZG93X3NpemUgLSBzLT5oaWdoX3dhdGVyO1xuXHQvLyAgICAgIHptZW16ZXJvKHMtPndpbmRvdyArIHMtPmhpZ2hfd2F0ZXIsICh1bnNpZ25lZClpbml0KTtcblx0Ly8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG5cdC8vICAgIH1cblx0Ly8gIH1cblx0Ly9cblx0Ly8gIEFzc2VydCgodWxnKXMtPnN0cnN0YXJ0IDw9IHMtPndpbmRvd19zaXplIC0gTUlOX0xPT0tBSEVBRCxcblx0Ly8gICAgXCJub3QgZW5vdWdoIHJvb20gZm9yIHNlYXJjaFwiKTtcblx0fVxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuXHQgKiB0aGUgY3VycmVudCBibG9jayBzdGF0ZS5cblx0ICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBpbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgc2luY2Vcblx0ICogdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcblx0ICogb25seSBmb3IgdGhlIGxldmVsPTAgY29tcHJlc3Npb24gb3B0aW9uLlxuXHQgKiBOT1RFOiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBvcHRpbWl6ZWQgdG8gYXZvaWQgZXh0cmEgY29weWluZyBmcm9tXG5cdCAqIHdpbmRvdyB0byBwZW5kaW5nX2J1Zi5cblx0ICovXG5cdGZ1bmN0aW9uIGRlZmxhdGVfc3RvcmVkKHMsIGZsdXNoKSB7XG5cdCAgLyogU3RvcmVkIGJsb2NrcyBhcmUgbGltaXRlZCB0byAweGZmZmYgYnl0ZXMsIHBlbmRpbmdfYnVmIGlzIGxpbWl0ZWRcblx0ICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjpcblx0ICAgKi9cblx0ICB2YXIgbWF4X2Jsb2NrX3NpemUgPSAweGZmZmY7XG5cblx0ICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG5cdCAgICBtYXhfYmxvY2tfc2l6ZSA9IHMucGVuZGluZ19idWZfc2l6ZSAtIDU7XG5cdCAgfVxuXG5cdCAgLyogQ29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gaW5wdXQgdG8gb3V0cHV0OiAqL1xuXHQgIGZvciAoOzspIHtcblx0ICAgIC8qIEZpbGwgdGhlIHdpbmRvdyBhcyBtdWNoIGFzIHBvc3NpYmxlOiAqL1xuXHQgICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHtcblxuXHQgICAgICAvL0Fzc2VydChzLT5zdHJzdGFydCA8IHMtPndfc2l6ZStNQVhfRElTVChzKSB8fFxuXHQgICAgICAvLyAgcy0+YmxvY2tfc3RhcnQgPj0gKGxvbmcpcy0+d19zaXplLCBcInNsaWRlIHRvbyBsYXRlXCIpO1xuXHQvLyAgICAgIGlmICghKHMuc3Ryc3RhcnQgPCBzLndfc2l6ZSArIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHx8XG5cdC8vICAgICAgICBzLmJsb2NrX3N0YXJ0ID49IHMud19zaXplKSkge1xuXHQvLyAgICAgICAgdGhyb3cgIG5ldyBFcnJvcihcInNsaWRlIHRvbyBsYXRlXCIpO1xuXHQvLyAgICAgIH1cblxuXHQgICAgICBmaWxsX3dpbmRvdyhzKTtcblx0ICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG5cdCAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG5cdCAgICB9XG5cdCAgICAvL0Fzc2VydChzLT5ibG9ja19zdGFydCA+PSAwTCwgXCJibG9jayBnb25lXCIpO1xuXHQvLyAgICBpZiAocy5ibG9ja19zdGFydCA8IDApIHRocm93IG5ldyBFcnJvcihcImJsb2NrIGdvbmVcIik7XG5cblx0ICAgIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG5cdCAgICBzLmxvb2thaGVhZCA9IDA7XG5cblx0ICAgIC8qIEVtaXQgYSBzdG9yZWQgYmxvY2sgaWYgcGVuZGluZ19idWYgd2lsbCBiZSBmdWxsOiAqL1xuXHQgICAgdmFyIG1heF9zdGFydCA9IHMuYmxvY2tfc3RhcnQgKyBtYXhfYmxvY2tfc2l6ZTtcblxuXHQgICAgaWYgKHMuc3Ryc3RhcnQgPT09IDAgfHwgcy5zdHJzdGFydCA+PSBtYXhfc3RhcnQpIHtcblx0ICAgICAgLyogc3Ryc3RhcnQgPT0gMCBpcyBwb3NzaWJsZSB3aGVuIHdyYXBhcm91bmQgb24gMTYtYml0IG1hY2hpbmUgKi9cblx0ICAgICAgcy5sb29rYWhlYWQgPSBzLnN0cnN0YXJ0IC0gbWF4X3N0YXJ0O1xuXHQgICAgICBzLnN0cnN0YXJ0ID0gbWF4X3N0YXJ0O1xuXHQgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG5cdCAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICAgIH1cblx0ICAgICAgLyoqKi9cblxuXG5cdCAgICB9XG5cdCAgICAvKiBGbHVzaCBpZiB3ZSBtYXkgaGF2ZSB0byBzbGlkZSwgb3RoZXJ3aXNlIGJsb2NrX3N0YXJ0IG1heSBiZWNvbWVcblx0ICAgICAqIG5lZ2F0aXZlIGFuZCB0aGUgZGF0YSB3aWxsIGJlIGdvbmU6XG5cdCAgICAgKi9cblx0ICAgIGlmIChzLnN0cnN0YXJ0IC0gcy5ibG9ja19zdGFydCA+PSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXHQgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG5cdCAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICAgIH1cblx0ICAgICAgLyoqKi9cblx0ICAgIH1cblx0ICB9XG5cblx0ICBzLmluc2VydCA9IDA7XG5cblx0ICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG5cdCAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG5cdCAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuXHQgICAgfVxuXHQgICAgLyoqKi9cblx0ICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcblx0ICB9XG5cblx0ICBpZiAocy5zdHJzdGFydCA+IHMuYmxvY2tfc3RhcnQpIHtcblx0ICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cblx0ICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgIH1cblx0ICAgIC8qKiovXG5cdCAgfVxuXG5cdCAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0fVxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb21wcmVzcyBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gdGhlIGlucHV0IHN0cmVhbSwgcmV0dXJuIHRoZSBjdXJyZW50XG5cdCAqIGJsb2NrIHN0YXRlLlxuXHQgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcblx0ICogbmV3IHN0cmluZ3MgaW4gdGhlIGRpY3Rpb25hcnkgb25seSBmb3IgdW5tYXRjaGVkIHN0cmluZ3Mgb3IgZm9yIHNob3J0XG5cdCAqIG1hdGNoZXMuIEl0IGlzIHVzZWQgb25seSBmb3IgdGhlIGZhc3QgY29tcHJlc3Npb24gb3B0aW9ucy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlZmxhdGVfZmFzdChzLCBmbHVzaCkge1xuXHQgIHZhciBoYXNoX2hlYWQ7ICAgICAgICAvKiBoZWFkIG9mIHRoZSBoYXNoIGNoYWluICovXG5cdCAgdmFyIGJmbHVzaDsgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG5cdCAgZm9yICg7Oykge1xuXHQgICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG5cdCAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuXHQgICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG5cdCAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuXHQgICAgICovXG5cdCAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG5cdCAgICAgIGZpbGxfd2luZG93KHMpO1xuXHQgICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG5cdCAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcblx0ICAgICAgICBicmVhazsgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvKiBJbnNlcnQgdGhlIHN0cmluZyB3aW5kb3dbc3Ryc3RhcnQgLi4gc3Ryc3RhcnQrMl0gaW4gdGhlXG5cdCAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcblx0ICAgICAqL1xuXHQgICAgaGFzaF9oZWFkID0gMC8qTklMKi87XG5cdCAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG5cdCAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG5cdCAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcblx0ICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG5cdCAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG5cdCAgICAgIC8qKiovXG5cdCAgICB9XG5cblx0ICAgIC8qIEZpbmQgdGhlIGxvbmdlc3QgbWF0Y2gsIGRpc2NhcmRpbmcgdGhvc2UgPD0gcHJldl9sZW5ndGguXG5cdCAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuXHQgICAgICovXG5cdCAgICBpZiAoaGFzaF9oZWFkICE9PSAwLypOSUwqLyAmJiAoKHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQpIDw9IChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpKSkge1xuXHQgICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuXHQgICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcblx0ICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuXHQgICAgICAgKi9cblx0ICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG5cdCAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cdCAgICB9XG5cdCAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG5cdCAgICAgIC8vIGNoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQsIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoKTsgLy8gZm9yIGRlYnVnIG9ubHlcblxuXHQgICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuXHQgICAgICAgICAgICAgICAgICAgICBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuXHQgICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuXHQgICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuXHQgICAgICAvKiBJbnNlcnQgbmV3IHN0cmluZ3MgaW4gdGhlIGhhc2ggdGFibGUgb25seSBpZiB0aGUgbWF0Y2ggbGVuZ3RoXG5cdCAgICAgICAqIGlzIG5vdCB0b28gbGFyZ2UuIFRoaXMgc2F2ZXMgdGltZSBidXQgZGVncmFkZXMgY29tcHJlc3Npb24uXG5cdCAgICAgICAqL1xuXHQgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gcy5tYXhfbGF6eV9tYXRjaC8qbWF4X2luc2VydF9sZW5ndGgqLyAmJiBzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcblx0ICAgICAgICBzLm1hdGNoX2xlbmd0aC0tOyAvKiBzdHJpbmcgYXQgc3Ryc3RhcnQgYWxyZWFkeSBpbiB0YWJsZSAqL1xuXHQgICAgICAgIGRvIHtcblx0ICAgICAgICAgIHMuc3Ryc3RhcnQrKztcblx0ICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG5cdCAgICAgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cdCAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcblx0ICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG5cdCAgICAgICAgICAvKioqL1xuXHQgICAgICAgICAgLyogc3Ryc3RhcnQgbmV2ZXIgZXhjZWVkcyBXU0laRS1NQVhfTUFUQ0gsIHNvIHRoZXJlIGFyZVxuXHQgICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cblx0ICAgICAgICAgICAqL1xuXHQgICAgICAgIH0gd2hpbGUgKC0tcy5tYXRjaF9sZW5ndGggIT09IDApO1xuXHQgICAgICAgIHMuc3Ryc3RhcnQrKztcblx0ICAgICAgfSBlbHNlXG5cdCAgICAgIHtcblx0ICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuXHQgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcblx0ICAgICAgICBzLmluc19oID0gcy53aW5kb3dbcy5zdHJzdGFydF07XG5cdCAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG5cdCAgICAgICAgcy5pbnNfaCA9ICgocy5pbnNfaCA8PCBzLmhhc2hfc2hpZnQpIF4gcy53aW5kb3dbcy5zdHJzdGFydCArIDFdKSAmIHMuaGFzaF9tYXNrO1xuXG5cdC8vI2lmIE1JTl9NQVRDSCAhPSAzXG5cdC8vICAgICAgICAgICAgICAgIENhbGwgVVBEQVRFX0hBU0goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG5cdC8vI2VuZGlmXG5cdCAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3Rcblx0ICAgICAgICAgKiBtYXR0ZXIgc2luY2UgaXQgd2lsbCBiZSByZWNvbXB1dGVkIGF0IG5leHQgZGVmbGF0ZSBjYWxsLlxuXHQgICAgICAgICAqL1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG5cdCAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcblx0ICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG5cdCAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG5cblx0ICAgICAgcy5sb29rYWhlYWQtLTtcblx0ICAgICAgcy5zdHJzdGFydCsrO1xuXHQgICAgfVxuXHQgICAgaWYgKGJmbHVzaCkge1xuXHQgICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG5cdCAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICAgIH1cblx0ICAgICAgLyoqKi9cblx0ICAgIH1cblx0ICB9XG5cdCAgcy5pbnNlcnQgPSAoKHMuc3Ryc3RhcnQgPCAoTUlOX01BVENILTEpKSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0gtMSk7XG5cdCAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuXHQgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuXHQgICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcblx0ICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcblx0ICAgIH1cblx0ICAgIC8qKiovXG5cdCAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG5cdCAgfVxuXHQgIGlmIChzLmxhc3RfbGl0KSB7XG5cdCAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG5cdCAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcblx0ICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICB9XG5cdCAgICAvKioqL1xuXHQgIH1cblx0ICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcblx0fVxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBTYW1lIGFzIGFib3ZlLCBidXQgYWNoaWV2ZXMgYmV0dGVyIGNvbXByZXNzaW9uLiBXZSB1c2UgYSBsYXp5XG5cdCAqIGV2YWx1YXRpb24gZm9yIG1hdGNoZXM6IGEgbWF0Y2ggaXMgZmluYWxseSBhZG9wdGVkIG9ubHkgaWYgdGhlcmUgaXNcblx0ICogbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbmRvdyBwb3NpdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIGRlZmxhdGVfc2xvdyhzLCBmbHVzaCkge1xuXHQgIHZhciBoYXNoX2hlYWQ7ICAgICAgICAgIC8qIGhlYWQgb2YgaGFzaCBjaGFpbiAqL1xuXHQgIHZhciBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuXHQgIHZhciBtYXhfaW5zZXJ0O1xuXG5cdCAgLyogUHJvY2VzcyB0aGUgaW5wdXQgYmxvY2suICovXG5cdCAgZm9yICg7Oykge1xuXHQgICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgYWx3YXlzIGhhdmUgZW5vdWdoIGxvb2thaGVhZCwgZXhjZXB0XG5cdCAgICAgKiBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCBmaWxlLiBXZSBuZWVkIE1BWF9NQVRDSCBieXRlc1xuXHQgICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG5cdCAgICAgKiBzdHJpbmcgZm9sbG93aW5nIHRoZSBuZXh0IG1hdGNoLlxuXHQgICAgICovXG5cdCAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG5cdCAgICAgIGZpbGxfd2luZG93KHMpO1xuXHQgICAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEICYmIGZsdXNoID09PSBaX05PX0ZMVVNIKSB7XG5cdCAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cblx0ICAgIH1cblxuXHQgICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuXHQgICAgICogZGljdGlvbmFyeSwgYW5kIHNldCBoYXNoX2hlYWQgdG8gdGhlIGhlYWQgb2YgdGhlIGhhc2ggY2hhaW46XG5cdCAgICAgKi9cblx0ICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuXHQgICAgaWYgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuXHQgICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuXHQgICAgICBzLmluc19oID0gKChzLmluc19oIDw8IHMuaGFzaF9zaGlmdCkgXiBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pICYgcy5oYXNoX21hc2s7XG5cdCAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXHQgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuXHQgICAgICAvKioqL1xuXHQgICAgfVxuXG5cdCAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuXHQgICAgICovXG5cdCAgICBzLnByZXZfbGVuZ3RoID0gcy5tYXRjaF9sZW5ndGg7XG5cdCAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuXHQgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0gtMTtcblxuXHQgICAgaWYgKGhhc2hfaGVhZCAhPT0gMC8qTklMKi8gJiYgcy5wcmV2X2xlbmd0aCA8IHMubWF4X2xhenlfbWF0Y2ggJiZcblx0ICAgICAgICBzLnN0cnN0YXJ0IC0gaGFzaF9oZWFkIDw9IChzLndfc2l6ZS1NSU5fTE9PS0FIRUFEKS8qTUFYX0RJU1QocykqLykge1xuXHQgICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuXHQgICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcblx0ICAgICAgICogb2YgdGhlIHN0cmluZyB3aXRoIGl0c2VsZiBhdCB0aGUgc3RhcnQgb2YgdGhlIGlucHV0IGZpbGUpLlxuXHQgICAgICAgKi9cblx0ICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG5cdCAgICAgIC8qIGxvbmdlc3RfbWF0Y2goKSBzZXRzIG1hdGNoX3N0YXJ0ICovXG5cblx0ICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IDUgJiZcblx0ICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xuXG5cdCAgICAgICAgLyogSWYgcHJldl9tYXRjaCBpcyBhbHNvIE1JTl9NQVRDSCwgbWF0Y2hfc3RhcnQgaXMgZ2FyYmFnZVxuXHQgICAgICAgICAqIGJ1dCB3ZSB3aWxsIGlnbm9yZSB0aGUgY3VycmVudCBtYXRjaCBhbnl3YXkuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcy5tYXRjaF9sZW5ndGggPSBNSU5fTUFUQ0gtMTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG5cdCAgICAgKiBtYXRjaCBpcyBub3QgYmV0dGVyLCBvdXRwdXQgdGhlIHByZXZpb3VzIG1hdGNoOlxuXHQgICAgICovXG5cdCAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuXHQgICAgICBtYXhfaW5zZXJ0ID0gcy5zdHJzdGFydCArIHMubG9va2FoZWFkIC0gTUlOX01BVENIO1xuXHQgICAgICAvKiBEbyBub3QgaW5zZXJ0IHN0cmluZ3MgaW4gaGFzaCB0YWJsZSBiZXlvbmQgdGhpcy4gKi9cblxuXHQgICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuXHQgICAgICAvKioqX3RyX3RhbGx5X2Rpc3Qocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsXG5cdCAgICAgICAgICAgICAgICAgICAgIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7KioqL1xuXHQgICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEtIHMucHJldl9tYXRjaCwgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cdCAgICAgIC8qIEluc2VydCBpbiBoYXNoIHRhYmxlIGFsbCBzdHJpbmdzIHVwIHRvIHRoZSBlbmQgb2YgdGhlIG1hdGNoLlxuXHQgICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG5cdCAgICAgICAqIGVub3VnaCBsb29rYWhlYWQsIHRoZSBsYXN0IHR3byBzdHJpbmdzIGFyZSBub3QgaW5zZXJ0ZWQgaW5cblx0ICAgICAgICogdGhlIGhhc2ggdGFibGUuXG5cdCAgICAgICAqL1xuXHQgICAgICBzLmxvb2thaGVhZCAtPSBzLnByZXZfbGVuZ3RoLTE7XG5cdCAgICAgIHMucHJldl9sZW5ndGggLT0gMjtcblx0ICAgICAgZG8ge1xuXHQgICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuXHQgICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cblx0ICAgICAgICAgIHMuaW5zX2ggPSAoKHMuaW5zX2ggPDwgcy5oYXNoX3NoaWZ0KSBeIHMud2luZG93W3Muc3Ryc3RhcnQgKyBNSU5fTUFUQ0ggLSAxXSkgJiBzLmhhc2hfbWFzaztcblx0ICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXHQgICAgICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcblx0ICAgICAgICAgIC8qKiovXG5cdCAgICAgICAgfVxuXHQgICAgICB9IHdoaWxlICgtLXMucHJldl9sZW5ndGggIT09IDApO1xuXHQgICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG5cdCAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENILTE7XG5cdCAgICAgIHMuc3Ryc3RhcnQrKztcblxuXHQgICAgICBpZiAoYmZsdXNoKSB7XG5cdCAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuXHQgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvKioqL1xuXHQgICAgICB9XG5cblx0ICAgIH0gZWxzZSBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcblx0ICAgICAgLyogSWYgdGhlcmUgd2FzIG5vIG1hdGNoIGF0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiwgb3V0cHV0IGFcblx0ICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuXHQgICAgICAgKiBpcyBsb25nZXIsIHRydW5jYXRlIHRoZSBwcmV2aW91cyBtYXRjaCB0byBhIHNpbmdsZSBsaXRlcmFsLlxuXHQgICAgICAgKi9cblx0ICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcblx0ICAgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0sIGJmbHVzaCk7ICoqKi9cblx0ICAgICAgYmZsdXNoID0gdHJlZXMuX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQtMV0pO1xuXG5cdCAgICAgIGlmIChiZmx1c2gpIHtcblx0ICAgICAgICAvKioqIEZMVVNIX0JMT0NLX09OTFkocywgMCkgKioqL1xuXHQgICAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgICAgIC8qKiovXG5cdCAgICAgIH1cblx0ICAgICAgcy5zdHJzdGFydCsrO1xuXHQgICAgICBzLmxvb2thaGVhZC0tO1xuXHQgICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuXHQgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8qIFRoZXJlIGlzIG5vIHByZXZpb3VzIG1hdGNoIHRvIGNvbXBhcmUgd2l0aCwgd2FpdCBmb3Jcblx0ICAgICAgICogdGhlIG5leHQgc3RlcCB0byBkZWNpZGUuXG5cdCAgICAgICAqL1xuXHQgICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDE7XG5cdCAgICAgIHMuc3Ryc3RhcnQrKztcblx0ICAgICAgcy5sb29rYWhlYWQtLTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy9Bc3NlcnQgKGZsdXNoICE9IFpfTk9fRkxVU0gsIFwibm8gZmx1c2g/XCIpO1xuXHQgIGlmIChzLm1hdGNoX2F2YWlsYWJsZSkge1xuXHQgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcblx0ICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG5cdCAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydC0xXSk7XG5cblx0ICAgIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcblx0ICB9XG5cdCAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENILTEgPyBzLnN0cnN0YXJ0IDogTUlOX01BVENILTE7XG5cdCAgaWYgKGZsdXNoID09PSBaX0ZJTklTSCkge1xuXHQgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAxKTsgKioqL1xuXHQgICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcblx0ICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBCU19GSU5JU0hfU1RBUlRFRDtcblx0ICAgIH1cblx0ICAgIC8qKiovXG5cdCAgICByZXR1cm4gQlNfRklOSVNIX0RPTkU7XG5cdCAgfVxuXHQgIGlmIChzLmxhc3RfbGl0KSB7XG5cdCAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG5cdCAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcblx0ICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICB9XG5cdCAgICAvKioqL1xuXHQgIH1cblxuXHQgIHJldHVybiBCU19CTE9DS19ET05FO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogRm9yIFpfUkxFLCBzaW1wbHkgbG9vayBmb3IgcnVucyBvZiBieXRlcywgZ2VuZXJhdGUgbWF0Y2hlcyBvbmx5IG9mIGRpc3RhbmNlXG5cdCAqIG9uZS4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuICAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZlxuXHQgKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pXG5cdCAqL1xuXHRmdW5jdGlvbiBkZWZsYXRlX3JsZShzLCBmbHVzaCkge1xuXHQgIHZhciBiZmx1c2g7ICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cdCAgdmFyIHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuXHQgIHZhciBzY2FuLCBzdHJlbmQ7ICAgICAgLyogc2NhbiBnb2VzIHVwIHRvIHN0cmVuZCBmb3IgbGVuZ3RoIG9mIHJ1biAqL1xuXG5cdCAgdmFyIF93aW4gPSBzLndpbmRvdztcblxuXHQgIGZvciAoOzspIHtcblx0ICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuXHQgICAgICogYXQgdGhlIGVuZCBvZiB0aGUgaW5wdXQgZmlsZS4gV2UgbmVlZCBNQVhfTUFUQ0ggYnl0ZXNcblx0ICAgICAqIGZvciB0aGUgbG9uZ2VzdCBydW4sIHBsdXMgb25lIGZvciB0aGUgdW5yb2xsZWQgbG9vcC5cblx0ICAgICAqL1xuXHQgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCkge1xuXHQgICAgICBmaWxsX3dpbmRvdyhzKTtcblx0ICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuXHQgICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG5cdCAgICB9XG5cblx0ICAgIC8qIFNlZSBob3cgbWFueSB0aW1lcyB0aGUgcHJldmlvdXMgYnl0ZSByZXBlYXRzICovXG5cdCAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG5cdCAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgPiAwKSB7XG5cdCAgICAgIHNjYW4gPSBzLnN0cnN0YXJ0IC0gMTtcblx0ICAgICAgcHJldiA9IF93aW5bc2Nhbl07XG5cdCAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkge1xuXHQgICAgICAgIHN0cmVuZCA9IHMuc3Ryc3RhcnQgKyBNQVhfTUFUQ0g7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG5cdCAgICAgICAgfSB3aGlsZSAocHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuXHQgICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcblx0ICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG5cdCAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuXHQgICAgICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXHQgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuXHQgICAgICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+IHMubG9va2FoZWFkKSB7XG5cdCAgICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IHMubG9va2FoZWFkO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICAvL0Fzc2VydChzY2FuIDw9IHMtPndpbmRvdysodUludCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXHQgICAgfVxuXG5cdCAgICAvKiBFbWl0IG1hdGNoIGlmIGhhdmUgcnVuIG9mIE1JTl9NQVRDSCBvciBsb25nZXIsIGVsc2UgZW1pdCBsaXRlcmFsICovXG5cdCAgICBpZiAocy5tYXRjaF9sZW5ndGggPj0gTUlOX01BVENIKSB7XG5cdCAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuXHQgICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENILCBiZmx1c2gpOyAqKiovXG5cdCAgICAgIGJmbHVzaCA9IHRyZWVzLl90cl90YWxseShzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCk7XG5cblx0ICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG5cdCAgICAgIHMuc3Ryc3RhcnQgKz0gcy5tYXRjaF9sZW5ndGg7XG5cdCAgICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cblx0ICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnRdKSk7XG5cdCAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuXHQgICAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXG5cdCAgICAgIHMubG9va2FoZWFkLS07XG5cdCAgICAgIHMuc3Ryc3RhcnQrKztcblx0ICAgIH1cblx0ICAgIGlmIChiZmx1c2gpIHtcblx0ICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuXHQgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcblx0ICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuXHQgICAgICB9XG5cdCAgICAgIC8qKiovXG5cdCAgICB9XG5cdCAgfVxuXHQgIHMuaW5zZXJ0ID0gMDtcblx0ICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG5cdCAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG5cdCAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuXHQgICAgfVxuXHQgICAgLyoqKi9cblx0ICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcblx0ICB9XG5cdCAgaWYgKHMubGFzdF9saXQpIHtcblx0ICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cblx0ICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgIH1cblx0ICAgIC8qKiovXG5cdCAgfVxuXHQgIHJldHVybiBCU19CTE9DS19ET05FO1xuXHR9XG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIEZvciBaX0hVRkZNQU5fT05MWSwgZG8gbm90IGxvb2sgZm9yIG1hdGNoZXMuICBEbyBub3QgbWFpbnRhaW4gYSBoYXNoIHRhYmxlLlxuXHQgKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcblx0ICovXG5cdGZ1bmN0aW9uIGRlZmxhdGVfaHVmZihzLCBmbHVzaCkge1xuXHQgIHZhciBiZmx1c2g7ICAgICAgICAgICAgIC8qIHNldCBpZiBjdXJyZW50IGJsb2NrIG11c3QgYmUgZmx1c2hlZCAqL1xuXG5cdCAgZm9yICg7Oykge1xuXHQgICAgLyogTWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBhIGxpdGVyYWwgdG8gd3JpdGUuICovXG5cdCAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcblx0ICAgICAgZmlsbF93aW5kb3cocyk7XG5cdCAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuXHQgICAgICAgIGlmIChmbHVzaCA9PT0gWl9OT19GTFVTSCkge1xuXHQgICAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgYnJlYWs7ICAgICAgLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICAvKiBPdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cblx0ICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcblx0ICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuXHQgICAgLyoqKiBfdHJfdGFsbHlfbGl0KHMsIHMud2luZG93W3Muc3Ryc3RhcnRdLCBiZmx1c2gpOyAqKiovXG5cdCAgICBiZmx1c2ggPSB0cmVlcy5fdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydF0pO1xuXHQgICAgcy5sb29rYWhlYWQtLTtcblx0ICAgIHMuc3Ryc3RhcnQrKztcblx0ICAgIGlmIChiZmx1c2gpIHtcblx0ICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuXHQgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcblx0ICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuXHQgICAgICB9XG5cdCAgICAgIC8qKiovXG5cdCAgICB9XG5cdCAgfVxuXHQgIHMuaW5zZXJ0ID0gMDtcblx0ICBpZiAoZmx1c2ggPT09IFpfRklOSVNIKSB7XG5cdCAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG5cdCAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuXHQgICAgfVxuXHQgICAgLyoqKi9cblx0ICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcblx0ICB9XG5cdCAgaWYgKHMubGFzdF9saXQpIHtcblx0ICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cblx0ICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuXHQgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcblx0ICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcblx0ICAgIH1cblx0ICAgIC8qKiovXG5cdCAgfVxuXHQgIHJldHVybiBCU19CTE9DS19ET05FO1xuXHR9XG5cblx0LyogVmFsdWVzIGZvciBtYXhfbGF6eV9tYXRjaCwgZ29vZF9tYXRjaCBhbmQgbWF4X2NoYWluX2xlbmd0aCwgZGVwZW5kaW5nIG9uXG5cdCAqIHRoZSBkZXNpcmVkIHBhY2sgbGV2ZWwgKDAuLjkpLiBUaGUgdmFsdWVzIGdpdmVuIGJlbG93IGhhdmUgYmVlbiB0dW5lZCB0b1xuXHQgKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcblx0ICogZm91bmQgZm9yIHNwZWNpZmljIGZpbGVzLlxuXHQgKi9cblx0dmFyIENvbmZpZyA9IGZ1bmN0aW9uIChnb29kX2xlbmd0aCwgbWF4X2xhenksIG5pY2VfbGVuZ3RoLCBtYXhfY2hhaW4sIGZ1bmMpIHtcblx0ICB0aGlzLmdvb2RfbGVuZ3RoID0gZ29vZF9sZW5ndGg7XG5cdCAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuXHQgIHRoaXMubmljZV9sZW5ndGggPSBuaWNlX2xlbmd0aDtcblx0ICB0aGlzLm1heF9jaGFpbiA9IG1heF9jaGFpbjtcblx0ICB0aGlzLmZ1bmMgPSBmdW5jO1xuXHR9O1xuXG5cdHZhciBjb25maWd1cmF0aW9uX3RhYmxlO1xuXG5cdGNvbmZpZ3VyYXRpb25fdGFibGUgPSBbXG5cdCAgLyogICAgICBnb29kIGxhenkgbmljZSBjaGFpbiAqL1xuXHQgIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cblx0ICBuZXcgQ29uZmlnKDQsIDQsIDgsIDQsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAgLyogMSBtYXggc3BlZWQsIG5vIGxhenkgbWF0Y2hlcyAqL1xuXHQgIG5ldyBDb25maWcoNCwgNSwgMTYsIDgsIGRlZmxhdGVfZmFzdCksICAgICAgICAgICAvKiAyICovXG5cdCAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuXHQgIG5ldyBDb25maWcoNCwgNCwgMTYsIDE2LCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgICAvKiA0IGxhenkgbWF0Y2hlcyAqL1xuXHQgIG5ldyBDb25maWcoOCwgMTYsIDMyLCAzMiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAvKiA1ICovXG5cdCAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cblx0ICBuZXcgQ29uZmlnKDgsIDMyLCAxMjgsIDI1NiwgZGVmbGF0ZV9zbG93KSwgICAgICAgLyogNyAqL1xuXHQgIG5ldyBDb25maWcoMzIsIDEyOCwgMjU4LCAxMDI0LCBkZWZsYXRlX3Nsb3cpLCAgICAvKiA4ICovXG5cdCAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5cdF07XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG5cdCAqL1xuXHRmdW5jdGlvbiBsbV9pbml0KHMpIHtcblx0ICBzLndpbmRvd19zaXplID0gMiAqIHMud19zaXplO1xuXG5cdCAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG5cdCAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG5cdCAgLyogU2V0IHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyczpcblx0ICAgKi9cblx0ICBzLm1heF9sYXp5X21hdGNoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfbGF6eTtcblx0ICBzLmdvb2RfbWF0Y2ggPSBjb25maWd1cmF0aW9uX3RhYmxlW3MubGV2ZWxdLmdvb2RfbGVuZ3RoO1xuXHQgIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG5cdCAgcy5tYXhfY2hhaW5fbGVuZ3RoID0gY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5tYXhfY2hhaW47XG5cblx0ICBzLnN0cnN0YXJ0ID0gMDtcblx0ICBzLmJsb2NrX3N0YXJ0ID0gMDtcblx0ICBzLmxvb2thaGVhZCA9IDA7XG5cdCAgcy5pbnNlcnQgPSAwO1xuXHQgIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG5cdCAgcy5tYXRjaF9hdmFpbGFibGUgPSAwO1xuXHQgIHMuaW5zX2ggPSAwO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBEZWZsYXRlU3RhdGUoKSB7XG5cdCAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuXHQgIHRoaXMuc3RhdHVzID0gMDsgICAgICAgICAgICAvKiBhcyB0aGUgbmFtZSBpbXBsaWVzICovXG5cdCAgdGhpcy5wZW5kaW5nX2J1ZiA9IG51bGw7ICAgICAgLyogb3V0cHV0IHN0aWxsIHBlbmRpbmcgKi9cblx0ICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuXHQgIHRoaXMucGVuZGluZ19vdXQgPSAwOyAgICAgICAvKiBuZXh0IHBlbmRpbmcgYnl0ZSB0byBvdXRwdXQgdG8gdGhlIHN0cmVhbSAqL1xuXHQgIHRoaXMucGVuZGluZyA9IDA7ICAgICAgICAgICAvKiBuYiBvZiBieXRlcyBpbiB0aGUgcGVuZGluZyBidWZmZXIgKi9cblx0ICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuXHQgIHRoaXMuZ3poZWFkID0gbnVsbDsgICAgICAgICAvKiBnemlwIGhlYWRlciBpbmZvcm1hdGlvbiB0byB3cml0ZSAqL1xuXHQgIHRoaXMuZ3ppbmRleCA9IDA7ICAgICAgICAgICAvKiB3aGVyZSBpbiBleHRyYSwgbmFtZSwgb3IgY29tbWVudCAqL1xuXHQgIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRDsgLyogY2FuIG9ubHkgYmUgREVGTEFURUQgKi9cblx0ICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cblx0ICB0aGlzLndfc2l6ZSA9IDA7ICAvKiBMWjc3IHdpbmRvdyBzaXplICgzMksgYnkgZGVmYXVsdCkgKi9cblx0ICB0aGlzLndfYml0cyA9IDA7ICAvKiBsb2cyKHdfc2l6ZSkgICg4Li4xNikgKi9cblx0ICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cblx0ICB0aGlzLndpbmRvdyA9IG51bGw7XG5cdCAgLyogU2xpZGluZyB3aW5kb3cuIElucHV0IGJ5dGVzIGFyZSByZWFkIGludG8gdGhlIHNlY29uZCBoYWxmIG9mIHRoZSB3aW5kb3csXG5cdCAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcblx0ICAgKiBieXRlcy4gV2l0aCB0aGlzIG9yZ2FuaXphdGlvbiwgbWF0Y2hlcyBhcmUgbGltaXRlZCB0byBhIGRpc3RhbmNlIG9mXG5cdCAgICogd1NpemUtTUFYX01BVENIIGJ5dGVzLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgSU8gaXMgYWx3YXlzXG5cdCAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG5cdCAgICovXG5cblx0ICB0aGlzLndpbmRvd19zaXplID0gMDtcblx0ICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuXHQgICAqIGlzIGRpcmVjdGx5IHVzZWQgYXMgc2xpZGluZyB3aW5kb3cuXG5cdCAgICovXG5cblx0ICB0aGlzLnByZXYgPSBudWxsO1xuXHQgIC8qIExpbmsgdG8gb2xkZXIgc3RyaW5nIHdpdGggc2FtZSBoYXNoIGluZGV4LiBUbyBsaW1pdCB0aGUgc2l6ZSBvZiB0aGlzXG5cdCAgICogYXJyYXkgdG8gNjRLLCB0aGlzIGxpbmsgaXMgbWFpbnRhaW5lZCBvbmx5IGZvciB0aGUgbGFzdCAzMksgc3RyaW5ncy5cblx0ICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cblx0ICAgKi9cblxuXHQgIHRoaXMuaGVhZCA9IG51bGw7ICAgLyogSGVhZHMgb2YgdGhlIGhhc2ggY2hhaW5zIG9yIE5JTC4gKi9cblxuXHQgIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuXHQgIHRoaXMuaGFzaF9zaXplID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgaW4gaGFzaCB0YWJsZSAqL1xuXHQgIHRoaXMuaGFzaF9iaXRzID0gMDsgICAvKiBsb2cyKGhhc2hfc2l6ZSkgKi9cblx0ICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuXHQgIHRoaXMuaGFzaF9zaGlmdCA9IDA7XG5cdCAgLyogTnVtYmVyIG9mIGJpdHMgYnkgd2hpY2ggaW5zX2ggbXVzdCBiZSBzaGlmdGVkIGF0IGVhY2ggaW5wdXRcblx0ICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3Rcblx0ICAgKiBieXRlIG5vIGxvbmdlciB0YWtlcyBwYXJ0IGluIHRoZSBoYXNoIGtleSwgdGhhdCBpczpcblx0ICAgKiAgIGhhc2hfc2hpZnQgKiBNSU5fTUFUQ0ggPj0gaGFzaF9iaXRzXG5cdCAgICovXG5cblx0ICB0aGlzLmJsb2NrX3N0YXJ0ID0gMDtcblx0ICAvKiBXaW5kb3cgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY3VycmVudCBvdXRwdXQgYmxvY2suIEdldHNcblx0ICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuXHQgICAqL1xuXG5cdCAgdGhpcy5tYXRjaF9sZW5ndGggPSAwOyAgICAgIC8qIGxlbmd0aCBvZiBiZXN0IG1hdGNoICovXG5cdCAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG5cdCAgdGhpcy5tYXRjaF9hdmFpbGFibGUgPSAwOyAgIC8qIHNldCBpZiBwcmV2aW91cyBtYXRjaCBleGlzdHMgKi9cblx0ICB0aGlzLnN0cnN0YXJ0ID0gMDsgICAgICAgICAgLyogc3RhcnQgb2Ygc3RyaW5nIHRvIGluc2VydCAqL1xuXHQgIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cblx0ICB0aGlzLmxvb2thaGVhZCA9IDA7ICAgICAgICAgLyogbnVtYmVyIG9mIHZhbGlkIGJ5dGVzIGFoZWFkIGluIHdpbmRvdyAqL1xuXG5cdCAgdGhpcy5wcmV2X2xlbmd0aCA9IDA7XG5cdCAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG5cdCAgICogYXJlIGRpc2NhcmRlZC4gVGhpcyBpcyB1c2VkIGluIHRoZSBsYXp5IG1hdGNoIGV2YWx1YXRpb24uXG5cdCAgICovXG5cblx0ICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuXHQgIC8qIFRvIHNwZWVkIHVwIGRlZmxhdGlvbiwgaGFzaCBjaGFpbnMgYXJlIG5ldmVyIHNlYXJjaGVkIGJleW9uZCB0aGlzXG5cdCAgICogbGVuZ3RoLiAgQSBoaWdoZXIgbGltaXQgaW1wcm92ZXMgY29tcHJlc3Npb24gcmF0aW8gYnV0IGRlZ3JhZGVzIHRoZVxuXHQgICAqIHNwZWVkLlxuXHQgICAqL1xuXG5cdCAgdGhpcy5tYXhfbGF6eV9tYXRjaCA9IDA7XG5cdCAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuXHQgICAqIHNtYWxsZXIgdGhhbiB0aGlzIHZhbHVlLiBUaGlzIG1lY2hhbmlzbSBpcyB1c2VkIG9ubHkgZm9yIGNvbXByZXNzaW9uXG5cdCAgICogbGV2ZWxzID49IDQuXG5cdCAgICovXG5cdCAgLy8gVGhhdCdzIGFsaWFzIHRvIG1heF9sYXp5X21hdGNoLCBkb24ndCB1c2UgZGlyZWN0bHlcblx0ICAvL3RoaXMubWF4X2luc2VydF9sZW5ndGggPSAwO1xuXHQgIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG5cdCAgICogZ3JlYXRlciB0aGFuIHRoaXMgbGVuZ3RoLiBUaGlzIHNhdmVzIHRpbWUgYnV0IGRlZ3JhZGVzIGNvbXByZXNzaW9uLlxuXHQgICAqIG1heF9pbnNlcnRfbGVuZ3RoIGlzIHVzZWQgb25seSBmb3IgY29tcHJlc3Npb24gbGV2ZWxzIDw9IDMuXG5cdCAgICovXG5cblx0ICB0aGlzLmxldmVsID0gMDsgICAgIC8qIGNvbXByZXNzaW9uIGxldmVsICgxLi45KSAqL1xuXHQgIHRoaXMuc3RyYXRlZ3kgPSAwOyAgLyogZmF2b3Igb3IgZm9yY2UgSHVmZm1hbiBjb2RpbmcqL1xuXG5cdCAgdGhpcy5nb29kX21hdGNoID0gMDtcblx0ICAvKiBVc2UgYSBmYXN0ZXIgc2VhcmNoIHdoZW4gdGhlIHByZXZpb3VzIG1hdGNoIGlzIGxvbmdlciB0aGFuIHRoaXMgKi9cblxuXHQgIHRoaXMubmljZV9tYXRjaCA9IDA7IC8qIFN0b3Agc2VhcmNoaW5nIHdoZW4gY3VycmVudCBtYXRjaCBleGNlZWRzIHRoaXMgKi9cblxuXHQgICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuXHQgIC8qIERpZG4ndCB1c2UgY3RfZGF0YSB0eXBlZGVmIGJlbG93IHRvIHN1cHByZXNzIGNvbXBpbGVyIHdhcm5pbmcgKi9cblxuXHQgIC8vIHN0cnVjdCBjdF9kYXRhX3MgZHluX2x0cmVlW0hFQVBfU0laRV07ICAgLyogbGl0ZXJhbCBhbmQgbGVuZ3RoIHRyZWUgKi9cblx0ICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cblx0ICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGJsX3RyZWVbMipCTF9DT0RFUysxXTsgIC8qIEh1ZmZtYW4gdHJlZSBmb3IgYml0IGxlbmd0aHMgKi9cblxuXHQgIC8vIFVzZSBmbGF0IGFycmF5IG9mIERPVUJMRSBzaXplLCB3aXRoIGludGVybGVhdmVkIGZhdGEsXG5cdCAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuXHQgIHRoaXMuZHluX2x0cmVlICA9IG5ldyB1dGlscy5CdWYxNihIRUFQX1NJWkUgKiAyKTtcblx0ICB0aGlzLmR5bl9kdHJlZSAgPSBuZXcgdXRpbHMuQnVmMTYoKDIqRF9DT0RFUysxKSAqIDIpO1xuXHQgIHRoaXMuYmxfdHJlZSAgICA9IG5ldyB1dGlscy5CdWYxNigoMipCTF9DT0RFUysxKSAqIDIpO1xuXHQgIHplcm8odGhpcy5keW5fbHRyZWUpO1xuXHQgIHplcm8odGhpcy5keW5fZHRyZWUpO1xuXHQgIHplcm8odGhpcy5ibF90cmVlKTtcblxuXHQgIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cblx0ICB0aGlzLmRfZGVzYyAgID0gbnVsbDsgICAgICAgICAvKiBkZXNjLiBmb3IgZGlzdGFuY2UgdHJlZSAqL1xuXHQgIHRoaXMuYmxfZGVzYyAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBiaXQgbGVuZ3RoIHRyZWUgKi9cblxuXHQgIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuXHQgIHRoaXMuYmxfY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYX0JJVFMrMSk7XG5cdCAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCBmb3IgYW4gb3B0aW1hbCB0cmVlICovXG5cblx0ICAvL2ludCBoZWFwWzIqTF9DT0RFUysxXTsgICAgICAvKiBoZWFwIHVzZWQgdG8gYnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgKi9cblx0ICB0aGlzLmhlYXAgPSBuZXcgdXRpbHMuQnVmMTYoMipMX0NPREVTKzEpOyAgLyogaGVhcCB1c2VkIHRvIGJ1aWxkIHRoZSBIdWZmbWFuIHRyZWVzICovXG5cdCAgemVybyh0aGlzLmhlYXApO1xuXG5cdCAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG5cdCAgdGhpcy5oZWFwX21heCA9IDA7ICAgICAgICAgICAgICAgLyogZWxlbWVudCBvZiBsYXJnZXN0IGZyZXF1ZW5jeSAqL1xuXHQgIC8qIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uIGhlYXBbMF0gaXMgbm90IHVzZWQuXG5cdCAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cblx0ICAgKi9cblxuXHQgIHRoaXMuZGVwdGggPSBuZXcgdXRpbHMuQnVmMTYoMipMX0NPREVTKzEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG5cdCAgemVybyh0aGlzLmRlcHRoKTtcblx0ICAvKiBEZXB0aCBvZiBlYWNoIHN1YnRyZWUgdXNlZCBhcyB0aWUgYnJlYWtlciBmb3IgdHJlZXMgb2YgZXF1YWwgZnJlcXVlbmN5XG5cdCAgICovXG5cblx0ICB0aGlzLmxfYnVmID0gMDsgICAgICAgICAgLyogYnVmZmVyIGluZGV4IGZvciBsaXRlcmFscyBvciBsZW5ndGhzICovXG5cblx0ICB0aGlzLmxpdF9idWZzaXplID0gMDtcblx0ICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG5cdCAgICogbGltaXRpbmcgbGl0X2J1ZnNpemUgdG8gNjRLOlxuXHQgICAqICAgLSBmcmVxdWVuY2llcyBjYW4gYmUga2VwdCBpbiAxNiBiaXQgY291bnRlcnNcblx0ICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG5cdCAgICogICAgIGRhdGEgaXMgc3RpbGwgaW4gdGhlIHdpbmRvdyBzbyB3ZSBjYW4gc3RpbGwgZW1pdCBhIHN0b3JlZCBibG9jayBldmVuXG5cdCAgICogICAgIHdoZW4gaW5wdXQgY29tZXMgZnJvbSBzdGFuZGFyZCBpbnB1dC4gIChUaGlzIGNhbiBhbHNvIGJlIGRvbmUgZm9yXG5cdCAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuXHQgICAqICAgLSBpZiBjb21wcmVzc2lvbiBpcyBub3Qgc3VjY2Vzc2Z1bCBmb3IgYSBmaWxlIHNtYWxsZXIgdGhhbiA2NEssIHdlIGNhblxuXHQgICAqICAgICBldmVuIGVtaXQgYSBzdG9yZWQgZmlsZSBpbnN0ZWFkIG9mIGEgc3RvcmVkIGJsb2NrIChzYXZpbmcgNSBieXRlcykuXG5cdCAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuXHQgICAqICAgLSBjcmVhdGluZyBuZXcgSHVmZm1hbiB0cmVlcyBsZXNzIGZyZXF1ZW50bHkgbWF5IG5vdCBwcm92aWRlIGZhc3Rcblx0ICAgKiAgICAgYWRhcHRhdGlvbiB0byBjaGFuZ2VzIGluIHRoZSBpbnB1dCBkYXRhIHN0YXRpc3RpY3MuIChUYWtlIGZvclxuXHQgICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcblx0ICAgKiAgICAgYSBoaWdobHkgY29tcHJlc3NpYmxlIHN0cmluZyB0YWJsZS4pIFNtYWxsZXIgYnVmZmVyIHNpemVzIGdpdmVcblx0ICAgKiAgICAgZmFzdCBhZGFwdGF0aW9uIGJ1dCBoYXZlIG9mIGNvdXJzZSB0aGUgb3ZlcmhlYWQgb2YgdHJhbnNtaXR0aW5nXG5cdCAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cblx0ICAgKiAgIC0gSSBjYW4ndCBjb3VudCBhYm92ZSA0XG5cdCAgICovXG5cblx0ICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cblx0ICB0aGlzLmRfYnVmID0gMDtcblx0ICAvKiBCdWZmZXIgaW5kZXggZm9yIGRpc3RhbmNlcy4gVG8gc2ltcGxpZnkgdGhlIGNvZGUsIGRfYnVmIGFuZCBsX2J1ZiBoYXZlXG5cdCAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcblx0ICAgKiBhcnJheSB3b3VsZCBiZSBuZWNlc3NhcnkuXG5cdCAgICovXG5cblx0ICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG5cdCAgdGhpcy5zdGF0aWNfbGVuID0gMDsgICAgLyogYml0IGxlbmd0aCBvZiBjdXJyZW50IGJsb2NrIHdpdGggc3RhdGljIHRyZWVzICovXG5cdCAgdGhpcy5tYXRjaGVzID0gMDsgICAgICAgLyogbnVtYmVyIG9mIHN0cmluZyBtYXRjaGVzIGluIGN1cnJlbnQgYmxvY2sgKi9cblx0ICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuXHQgIHRoaXMuYmlfYnVmID0gMDtcblx0ICAvKiBPdXRwdXQgYnVmZmVyLiBiaXRzIGFyZSBpbnNlcnRlZCBzdGFydGluZyBhdCB0aGUgYm90dG9tIChsZWFzdFxuXHQgICAqIHNpZ25pZmljYW50IGJpdHMpLlxuXHQgICAqL1xuXHQgIHRoaXMuYmlfdmFsaWQgPSAwO1xuXHQgIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuXHQgICAqIGFyZSBhbHdheXMgemVyby5cblx0ICAgKi9cblxuXHQgIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcblx0ICAvLyBzZW5zZSBvbmx5IGZvciBwb2ludGVycyBhbmQgbWVtb3J5IGNoZWNrIHRvb2xzLlxuXHQgIC8vdGhpcy5oaWdoX3dhdGVyID0gMDtcblx0ICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcblx0ICAgKiB0aGlzIGFyZSBzZXQgdG8gemVybyBpbiBvcmRlciB0byBhdm9pZCBtZW1vcnkgY2hlY2sgd2FybmluZ3Mgd2hlblxuXHQgICAqIGxvbmdlc3QgbWF0Y2ggcm91dGluZXMgYWNjZXNzIGJ5dGVzIHBhc3QgdGhlIGlucHV0LiAgVGhpcyBpcyB0aGVuXG5cdCAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cblx0ICAgKi9cblx0fVxuXG5cblx0ZnVuY3Rpb24gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKSB7XG5cdCAgdmFyIHM7XG5cblx0ICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHtcblx0ICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IpO1xuXHQgIH1cblxuXHQgIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG5cdCAgc3RybS5kYXRhX3R5cGUgPSBaX1VOS05PV047XG5cblx0ICBzID0gc3RybS5zdGF0ZTtcblx0ICBzLnBlbmRpbmcgPSAwO1xuXHQgIHMucGVuZGluZ19vdXQgPSAwO1xuXG5cdCAgaWYgKHMud3JhcCA8IDApIHtcblx0ICAgIHMud3JhcCA9IC1zLndyYXA7XG5cdCAgICAvKiB3YXMgbWFkZSBuZWdhdGl2ZSBieSBkZWZsYXRlKC4uLiwgWl9GSU5JU0gpOyAqL1xuXHQgIH1cblx0ICBzLnN0YXR1cyA9IChzLndyYXAgPyBJTklUX1NUQVRFIDogQlVTWV9TVEFURSk7XG5cdCAgc3RybS5hZGxlciA9IChzLndyYXAgPT09IDIpID9cblx0ICAgIDAgIC8vIGNyYzMyKDAsIFpfTlVMTCwgMClcblx0ICA6XG5cdCAgICAxOyAvLyBhZGxlcjMyKDAsIFpfTlVMTCwgMClcblx0ICBzLmxhc3RfZmx1c2ggPSBaX05PX0ZMVVNIO1xuXHQgIHRyZWVzLl90cl9pbml0KHMpO1xuXHQgIHJldHVybiBaX09LO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBkZWZsYXRlUmVzZXQoc3RybSkge1xuXHQgIHZhciByZXQgPSBkZWZsYXRlUmVzZXRLZWVwKHN0cm0pO1xuXHQgIGlmIChyZXQgPT09IFpfT0spIHtcblx0ICAgIGxtX2luaXQoc3RybS5zdGF0ZSk7XG5cdCAgfVxuXHQgIHJldHVybiByZXQ7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIGRlZmxhdGVTZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuXHQgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblx0ICBpZiAoc3RybS5zdGF0ZS53cmFwICE9PSAyKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuXHQgIHN0cm0uc3RhdGUuZ3poZWFkID0gaGVhZDtcblx0ICByZXR1cm4gWl9PSztcblx0fVxuXG5cblx0ZnVuY3Rpb24gZGVmbGF0ZUluaXQyKHN0cm0sIGxldmVsLCBtZXRob2QsIHdpbmRvd0JpdHMsIG1lbUxldmVsLCBzdHJhdGVneSkge1xuXHQgIGlmICghc3RybSkgeyAvLyA9PT0gWl9OVUxMXG5cdCAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdCAgfVxuXHQgIHZhciB3cmFwID0gMTtcblxuXHQgIGlmIChsZXZlbCA9PT0gWl9ERUZBVUxUX0NPTVBSRVNTSU9OKSB7XG5cdCAgICBsZXZlbCA9IDY7XG5cdCAgfVxuXG5cdCAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuXHQgICAgd3JhcCA9IDA7XG5cdCAgICB3aW5kb3dCaXRzID0gLXdpbmRvd0JpdHM7XG5cdCAgfVxuXG5cdCAgZWxzZSBpZiAod2luZG93Qml0cyA+IDE1KSB7XG5cdCAgICB3cmFwID0gMjsgICAgICAgICAgIC8qIHdyaXRlIGd6aXAgd3JhcHBlciBpbnN0ZWFkICovXG5cdCAgICB3aW5kb3dCaXRzIC09IDE2O1xuXHQgIH1cblxuXG5cdCAgaWYgKG1lbUxldmVsIDwgMSB8fCBtZW1MZXZlbCA+IE1BWF9NRU1fTEVWRUwgfHwgbWV0aG9kICE9PSBaX0RFRkxBVEVEIHx8XG5cdCAgICB3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUgfHwgbGV2ZWwgPCAwIHx8IGxldmVsID4gOSB8fFxuXHQgICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCkge1xuXHQgICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG5cdCAgfVxuXG5cblx0ICBpZiAod2luZG93Qml0cyA9PT0gOCkge1xuXHQgICAgd2luZG93Qml0cyA9IDk7XG5cdCAgfVxuXHQgIC8qIHVudGlsIDI1Ni1ieXRlIHdpbmRvdyBidWcgZml4ZWQgKi9cblxuXHQgIHZhciBzID0gbmV3IERlZmxhdGVTdGF0ZSgpO1xuXG5cdCAgc3RybS5zdGF0ZSA9IHM7XG5cdCAgcy5zdHJtID0gc3RybTtcblxuXHQgIHMud3JhcCA9IHdyYXA7XG5cdCAgcy5nemhlYWQgPSBudWxsO1xuXHQgIHMud19iaXRzID0gd2luZG93Qml0cztcblx0ICBzLndfc2l6ZSA9IDEgPDwgcy53X2JpdHM7XG5cdCAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cblx0ICBzLmhhc2hfYml0cyA9IG1lbUxldmVsICsgNztcblx0ICBzLmhhc2hfc2l6ZSA9IDEgPDwgcy5oYXNoX2JpdHM7XG5cdCAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG5cdCAgcy5oYXNoX3NoaWZ0ID0gfn4oKHMuaGFzaF9iaXRzICsgTUlOX01BVENIIC0gMSkgLyBNSU5fTUFUQ0gpO1xuXG5cdCAgcy53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzLndfc2l6ZSAqIDIpO1xuXHQgIHMuaGVhZCA9IG5ldyB1dGlscy5CdWYxNihzLmhhc2hfc2l6ZSk7XG5cdCAgcy5wcmV2ID0gbmV3IHV0aWxzLkJ1ZjE2KHMud19zaXplKTtcblxuXHQgIC8vIERvbid0IG5lZWQgbWVtIGluaXQgbWFnaWMgZm9yIEpTLlxuXHQgIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cblx0ICBzLmxpdF9idWZzaXplID0gMSA8PCAobWVtTGV2ZWwgKyA2KTsgLyogMTZLIGVsZW1lbnRzIGJ5IGRlZmF1bHQgKi9cblxuXHQgIHMucGVuZGluZ19idWZfc2l6ZSA9IHMubGl0X2J1ZnNpemUgKiA0O1xuXHQgIHMucGVuZGluZ19idWYgPSBuZXcgdXRpbHMuQnVmOChzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG5cdCAgcy5kX2J1ZiA9IHMubGl0X2J1ZnNpemUgPj4gMTtcblx0ICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cblx0ICBzLmxldmVsID0gbGV2ZWw7XG5cdCAgcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuXHQgIHMubWV0aG9kID0gbWV0aG9kO1xuXG5cdCAgcmV0dXJuIGRlZmxhdGVSZXNldChzdHJtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlZmxhdGVJbml0KHN0cm0sIGxldmVsKSB7XG5cdCAgcmV0dXJuIGRlZmxhdGVJbml0MihzdHJtLCBsZXZlbCwgWl9ERUZMQVRFRCwgTUFYX1dCSVRTLCBERUZfTUVNX0xFVkVMLCBaX0RFRkFVTFRfU1RSQVRFR1kpO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBkZWZsYXRlKHN0cm0sIGZsdXNoKSB7XG5cdCAgdmFyIG9sZF9mbHVzaCwgcztcblx0ICB2YXIgYmVnLCB2YWw7IC8vIGZvciBnemlwIGhlYWRlciB3cml0ZSBvbmx5XG5cblx0ICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHxcblx0ICAgIGZsdXNoID4gWl9CTE9DSyB8fCBmbHVzaCA8IDApIHtcblx0ICAgIHJldHVybiBzdHJtID8gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SKSA6IFpfU1RSRUFNX0VSUk9SO1xuXHQgIH1cblxuXHQgIHMgPSBzdHJtLnN0YXRlO1xuXG5cdCAgaWYgKCFzdHJtLm91dHB1dCB8fFxuXHQgICAgICAoIXN0cm0uaW5wdXQgJiYgc3RybS5hdmFpbF9pbiAhPT0gMCkgfHxcblx0ICAgICAgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT09IFpfRklOSVNIKSkge1xuXHQgICAgcmV0dXJuIGVycihzdHJtLCAoc3RybS5hdmFpbF9vdXQgPT09IDApID8gWl9CVUZfRVJST1IgOiBaX1NUUkVBTV9FUlJPUik7XG5cdCAgfVxuXG5cdCAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXG5cdCAgb2xkX2ZsdXNoID0gcy5sYXN0X2ZsdXNoO1xuXHQgIHMubGFzdF9mbHVzaCA9IGZsdXNoO1xuXG5cdCAgLyogV3JpdGUgdGhlIGhlYWRlciAqL1xuXHQgIGlmIChzLnN0YXR1cyA9PT0gSU5JVF9TVEFURSkge1xuXG5cdCAgICBpZiAocy53cmFwID09PSAyKSB7IC8vIEdaSVAgaGVhZGVyXG5cdCAgICAgIHN0cm0uYWRsZXIgPSAwOyAgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcblx0ICAgICAgcHV0X2J5dGUocywgMzEpO1xuXHQgICAgICBwdXRfYnl0ZShzLCAxMzkpO1xuXHQgICAgICBwdXRfYnl0ZShzLCA4KTtcblx0ICAgICAgaWYgKCFzLmd6aGVhZCkgeyAvLyBzLT5nemhlYWQgPT0gWl9OVUxMXG5cdCAgICAgICAgcHV0X2J5dGUocywgMCk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgMCk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgMCk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgMCk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgMCk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuXHQgICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cblx0ICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcblx0ICAgICAgICBwdXRfYnl0ZShzLCBPU19DT0RFKTtcblx0ICAgICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG5cdCAgICAgIH1cblx0ICAgICAgZWxzZSB7XG5cdCAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRleHQgPyAxIDogMCkgK1xuXHQgICAgICAgICAgICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcblx0ICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLmV4dHJhID8gMCA6IDQpICtcblx0ICAgICAgICAgICAgICAgICAgICAoIXMuZ3poZWFkLm5hbWUgPyAwIDogOCkgK1xuXHQgICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpO1xuXHQgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC50aW1lID4+IDgpICYgMHhmZik7XG5cdCAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMTYpICYgMHhmZik7XG5cdCAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7XG5cdCAgICAgICAgcHV0X2J5dGUocywgcy5sZXZlbCA9PT0gOSA/IDIgOlxuXHQgICAgICAgICAgICAgICAgICAgIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyID9cblx0ICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcblx0ICAgICAgICBwdXRfYnl0ZShzLCBzLmd6aGVhZC5vcyAmIDB4ZmYpO1xuXHQgICAgICAgIGlmIChzLmd6aGVhZC5leHRyYSAmJiBzLmd6aGVhZC5leHRyYS5sZW5ndGgpIHtcblx0ICAgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmYpO1xuXHQgICAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCA+PiA4KSAmIDB4ZmYpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAocy5nemhlYWQuaGNyYykge1xuXHQgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHMuZ3ppbmRleCA9IDA7XG5cdCAgICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSAvLyBERUZMQVRFIGhlYWRlclxuXHQgICAge1xuXHQgICAgICB2YXIgaGVhZGVyID0gKFpfREVGTEFURUQgKyAoKHMud19iaXRzIC0gOCkgPDwgNCkpIDw8IDg7XG5cdCAgICAgIHZhciBsZXZlbF9mbGFncyA9IC0xO1xuXG5cdCAgICAgIGlmIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyKSB7XG5cdCAgICAgICAgbGV2ZWxfZmxhZ3MgPSAwO1xuXHQgICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPCA2KSB7XG5cdCAgICAgICAgbGV2ZWxfZmxhZ3MgPSAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHMubGV2ZWwgPT09IDYpIHtcblx0ICAgICAgICBsZXZlbF9mbGFncyA9IDI7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbGV2ZWxfZmxhZ3MgPSAzO1xuXHQgICAgICB9XG5cdCAgICAgIGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG5cdCAgICAgIGlmIChzLnN0cnN0YXJ0ICE9PSAwKSB7IGhlYWRlciB8PSBQUkVTRVRfRElDVDsgfVxuXHQgICAgICBoZWFkZXIgKz0gMzEgLSAoaGVhZGVyICUgMzEpO1xuXG5cdCAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcblx0ICAgICAgcHV0U2hvcnRNU0IocywgaGVhZGVyKTtcblxuXHQgICAgICAvKiBTYXZlIHRoZSBhZGxlcjMyIG9mIHRoZSBwcmVzZXQgZGljdGlvbmFyeTogKi9cblx0ICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHtcblx0ICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG5cdCAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciAmIDB4ZmZmZik7XG5cdCAgICAgIH1cblx0ICAgICAgc3RybS5hZGxlciA9IDE7IC8vIGFkbGVyMzIoMEwsIFpfTlVMTCwgMCk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdC8vI2lmZGVmIEdaSVBcblx0ICBpZiAocy5zdGF0dXMgPT09IEVYVFJBX1NUQVRFKSB7XG5cdCAgICBpZiAocy5nemhlYWQuZXh0cmEvKiAhPSBaX05VTEwqLykge1xuXHQgICAgICBiZWcgPSBzLnBlbmRpbmc7ICAvKiBzdGFydCBvZiBieXRlcyB0byB1cGRhdGUgY3JjICovXG5cblx0ICAgICAgd2hpbGUgKHMuZ3ppbmRleCA8IChzLmd6aGVhZC5leHRyYS5sZW5ndGggJiAweGZmZmYpKSB7XG5cdCAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG5cdCAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcblx0ICAgICAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG5cdCAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG5cdCAgICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTtcblx0ICAgICAgICBzLmd6aW5kZXgrKztcblx0ICAgICAgfVxuXHQgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcblx0ICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzLmd6aW5kZXggPT09IHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuXHQgICAgICAgIHMuZ3ppbmRleCA9IDA7XG5cdCAgICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgcy5zdGF0dXMgPSBOQU1FX1NUQVRFO1xuXHQgICAgfVxuXHQgIH1cblx0ICBpZiAocy5zdGF0dXMgPT09IE5BTUVfU1RBVEUpIHtcblx0ICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcblx0ICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuXHQgICAgICAvL2ludCB2YWw7XG5cblx0ICAgICAgZG8ge1xuXHQgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuXHQgICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG5cdCAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuXHQgICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuXHQgICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG5cdCAgICAgICAgICAgIHZhbCA9IDE7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBKUyBzcGVjaWZpYzogbGl0dGxlIG1hZ2ljIHRvIGFkZCB6ZXJvIHRlcm1pbmF0b3IgdG8gZW5kIG9mIHN0cmluZ1xuXHQgICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5uYW1lLmxlbmd0aCkge1xuXHQgICAgICAgICAgdmFsID0gcy5nemhlYWQubmFtZS5jaGFyQ29kZUF0KHMuZ3ppbmRleCsrKSAmIDB4ZmY7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZhbCA9IDA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHB1dF9ieXRlKHMsIHZhbCk7XG5cdCAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cblx0ICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKXtcblx0ICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICh2YWwgPT09IDApIHtcblx0ICAgICAgICBzLmd6aW5kZXggPSAwO1xuXHQgICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKHMuc3RhdHVzID09PSBDT01NRU5UX1NUQVRFKSB7XG5cdCAgICBpZiAocy5nemhlYWQuY29tbWVudC8qICE9IFpfTlVMTCovKSB7XG5cdCAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cblx0ICAgICAgLy9pbnQgdmFsO1xuXG5cdCAgICAgIGRvIHtcblx0ICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcblx0ICAgICAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuXHQgICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzIoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcblx0ICAgICAgICAgIGJlZyA9IHMucGVuZGluZztcblx0ICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuXHQgICAgICAgICAgICB2YWwgPSAxO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gSlMgc3BlY2lmaWM6IGxpdHRsZSBtYWdpYyB0byBhZGQgemVybyB0ZXJtaW5hdG9yIHRvIGVuZCBvZiBzdHJpbmdcblx0ICAgICAgICBpZiAocy5nemluZGV4IDwgcy5nemhlYWQuY29tbWVudC5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YWwgPSAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBwdXRfYnl0ZShzLCB2YWwpO1xuXHQgICAgICB9IHdoaWxlICh2YWwgIT09IDApO1xuXG5cdCAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuXHQgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMihzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHZhbCA9PT0gMCkge1xuXHQgICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcblx0ICAgIH1cblx0ICB9XG5cdCAgaWYgKHMuc3RhdHVzID09PSBIQ1JDX1NUQVRFKSB7XG5cdCAgICBpZiAocy5nemhlYWQuaGNyYykge1xuXHQgICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuXHQgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHMucGVuZGluZyArIDIgPD0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG5cdCAgICAgICAgcHV0X2J5dGUocywgc3RybS5hZGxlciAmIDB4ZmYpO1xuXHQgICAgICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG5cdCAgICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG5cdCAgICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgcy5zdGF0dXMgPSBCVVNZX1NUQVRFO1xuXHQgICAgfVxuXHQgIH1cblx0Ly8jZW5kaWZcblxuXHQgIC8qIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUgKi9cblx0ICBpZiAocy5wZW5kaW5nICE9PSAwKSB7XG5cdCAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuXHQgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgIC8qIFNpbmNlIGF2YWlsX291dCBpcyAwLCBkZWZsYXRlIHdpbGwgYmUgY2FsbGVkIGFnYWluIHdpdGhcblx0ICAgICAgICogbW9yZSBvdXRwdXQgc3BhY2UsIGJ1dCBwb3NzaWJseSB3aXRoIGJvdGggcGVuZGluZyBhbmRcblx0ICAgICAgICogYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG5cdCAgICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBhbiBlcnJvciBzaXR1YXRpb24gc28gbWFrZSBzdXJlIHdlXG5cdCAgICAgICAqIHJldHVybiBPSyBpbnN0ZWFkIG9mIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwgb2YgZGVmbGF0ZTpcblx0ICAgICAgICovXG5cdCAgICAgIHMubGFzdF9mbHVzaCA9IC0xO1xuXHQgICAgICByZXR1cm4gWl9PSztcblx0ICAgIH1cblxuXHQgICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG5cdCAgICAgKiBmbHVzaGVzLiBGb3IgcmVwZWF0ZWQgYW5kIHVzZWxlc3MgY2FsbHMgd2l0aCBaX0ZJTklTSCwgd2Uga2VlcFxuXHQgICAgICogcmV0dXJuaW5nIFpfU1RSRUFNX0VORCBpbnN0ZWFkIG9mIFpfQlVGX0VSUk9SLlxuXHQgICAgICovXG5cdCAgfSBlbHNlIGlmIChzdHJtLmF2YWlsX2luID09PSAwICYmIHJhbmsoZmx1c2gpIDw9IHJhbmsob2xkX2ZsdXNoKSAmJlxuXHQgICAgZmx1c2ggIT09IFpfRklOSVNIKSB7XG5cdCAgICByZXR1cm4gZXJyKHN0cm0sIFpfQlVGX0VSUk9SKTtcblx0ICB9XG5cblx0ICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xuXHQgIGlmIChzLnN0YXR1cyA9PT0gRklOSVNIX1NUQVRFICYmIHN0cm0uYXZhaWxfaW4gIT09IDApIHtcblx0ICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IpO1xuXHQgIH1cblxuXHQgIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cblx0ICAgKi9cblx0ICBpZiAoc3RybS5hdmFpbF9pbiAhPT0gMCB8fCBzLmxvb2thaGVhZCAhPT0gMCB8fFxuXHQgICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIICYmIHMuc3RhdHVzICE9PSBGSU5JU0hfU1RBVEUpKSB7XG5cdCAgICB2YXIgYnN0YXRlID0gKHMuc3RyYXRlZ3kgPT09IFpfSFVGRk1BTl9PTkxZKSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOlxuXHQgICAgICAocy5zdHJhdGVneSA9PT0gWl9STEUgPyBkZWZsYXRlX3JsZShzLCBmbHVzaCkgOlxuXHQgICAgICAgIGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZnVuYyhzLCBmbHVzaCkpO1xuXG5cdCAgICBpZiAoYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9ET05FKSB7XG5cdCAgICAgIHMuc3RhdHVzID0gRklOSVNIX1NUQVRFO1xuXHQgICAgfVxuXHQgICAgaWYgKGJzdGF0ZSA9PT0gQlNfTkVFRF9NT1JFIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQpIHtcblx0ICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7XG5cdCAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIFpfT0s7XG5cdCAgICAgIC8qIElmIGZsdXNoICE9IFpfTk9fRkxVU0ggJiYgYXZhaWxfb3V0ID09IDAsIHRoZSBuZXh0IGNhbGxcblx0ICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmVcblx0ICAgICAgICogdGhhdCB0aGUgZmx1c2ggaXMgY29tcGxldGUuIFNvIHdlIGRvbid0IGhhdmUgdG8gb3V0cHV0IGFuXG5cdCAgICAgICAqIGVtcHR5IGJsb2NrIGhlcmUsIHRoaXMgd2lsbCBiZSBkb25lIGF0IG5leHQgY2FsbC4gVGhpcyBhbHNvXG5cdCAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdFxuXHQgICAgICAgKiBvbmUgZW1wdHkgYmxvY2suXG5cdCAgICAgICAqL1xuXHQgICAgfVxuXHQgICAgaWYgKGJzdGF0ZSA9PT0gQlNfQkxPQ0tfRE9ORSkge1xuXHQgICAgICBpZiAoZmx1c2ggPT09IFpfUEFSVElBTF9GTFVTSCkge1xuXHQgICAgICAgIHRyZWVzLl90cl9hbGlnbihzKTtcblx0ICAgICAgfVxuXHQgICAgICBlbHNlIGlmIChmbHVzaCAhPT0gWl9CTE9DSykgeyAvKiBGVUxMX0ZMVVNIIG9yIFNZTkNfRkxVU0ggKi9cblxuXHQgICAgICAgIHRyZWVzLl90cl9zdG9yZWRfYmxvY2socywgMCwgMCwgZmFsc2UpO1xuXHQgICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG5cdCAgICAgICAgICogYXMgYSBzcGVjaWFsIG1hcmtlciBieSBpbmZsYXRlX3N5bmMoKS5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCkge1xuXHQgICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXG5cdCAgICAgICAgICB6ZXJvKHMuaGVhZCk7IC8vIEZpbGwgd2l0aCBOSUwgKD0gMCk7XG5cblx0ICAgICAgICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuXHQgICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDtcblx0ICAgICAgICAgICAgcy5ibG9ja19zdGFydCA9IDA7XG5cdCAgICAgICAgICAgIHMuaW5zZXJ0ID0gMDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcblx0ICAgICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG5cdCAgICAgICAgcy5sYXN0X2ZsdXNoID0gLTE7IC8qIGF2b2lkIEJVRl9FUlJPUiBhdCBuZXh0IGNhbGwsIHNlZSBhYm92ZSAqL1xuXHQgICAgICAgIHJldHVybiBaX09LO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8vQXNzZXJ0KHN0cm0tPmF2YWlsX291dCA+IDAsIFwiYnVnMlwiKTtcblx0ICAvL2lmIChzdHJtLmF2YWlsX291dCA8PSAwKSB7IHRocm93IG5ldyBFcnJvcihcImJ1ZzJcIik7fVxuXG5cdCAgaWYgKGZsdXNoICE9PSBaX0ZJTklTSCkgeyByZXR1cm4gWl9PSzsgfVxuXHQgIGlmIChzLndyYXAgPD0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRU5EOyB9XG5cblx0ICAvKiBXcml0ZSB0aGUgdHJhaWxlciAqL1xuXHQgIGlmIChzLndyYXAgPT09IDIpIHtcblx0ICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcblx0ICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDgpICYgMHhmZik7XG5cdCAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiAxNikgJiAweGZmKTtcblx0ICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xuXHQgICAgcHV0X2J5dGUocywgc3RybS50b3RhbF9pbiAmIDB4ZmYpO1xuXHQgICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gOCkgJiAweGZmKTtcblx0ICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xuXHQgICAgcHV0X2J5dGUocywgKHN0cm0udG90YWxfaW4gPj4gMjQpICYgMHhmZik7XG5cdCAgfVxuXHQgIGVsc2Vcblx0ICB7XG5cdCAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyID4+PiAxNik7XG5cdCAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcblx0ICB9XG5cblx0ICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuXHQgIC8qIElmIGF2YWlsX291dCBpcyB6ZXJvLCB0aGUgYXBwbGljYXRpb24gd2lsbCBjYWxsIGRlZmxhdGUgYWdhaW5cblx0ICAgKiB0byBmbHVzaCB0aGUgcmVzdC5cblx0ICAgKi9cblx0ICBpZiAocy53cmFwID4gMCkgeyBzLndyYXAgPSAtcy53cmFwOyB9XG5cdCAgLyogd3JpdGUgdGhlIHRyYWlsZXIgb25seSBvbmNlISAqL1xuXHQgIHJldHVybiBzLnBlbmRpbmcgIT09IDAgPyBaX09LIDogWl9TVFJFQU1fRU5EO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVmbGF0ZUVuZChzdHJtKSB7XG5cdCAgdmFyIHN0YXR1cztcblxuXHQgIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG5cdCAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdCAgfVxuXG5cdCAgc3RhdHVzID0gc3RybS5zdGF0ZS5zdGF0dXM7XG5cdCAgaWYgKHN0YXR1cyAhPT0gSU5JVF9TVEFURSAmJlxuXHQgICAgc3RhdHVzICE9PSBFWFRSQV9TVEFURSAmJlxuXHQgICAgc3RhdHVzICE9PSBOQU1FX1NUQVRFICYmXG5cdCAgICBzdGF0dXMgIT09IENPTU1FTlRfU1RBVEUgJiZcblx0ICAgIHN0YXR1cyAhPT0gSENSQ19TVEFURSAmJlxuXHQgICAgc3RhdHVzICE9PSBCVVNZX1NUQVRFICYmXG5cdCAgICBzdGF0dXMgIT09IEZJTklTSF9TVEFURVxuXHQgICkge1xuXHQgICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUik7XG5cdCAgfVxuXG5cdCAgc3RybS5zdGF0ZSA9IG51bGw7XG5cblx0ICByZXR1cm4gc3RhdHVzID09PSBCVVNZX1NUQVRFID8gZXJyKHN0cm0sIFpfREFUQV9FUlJPUikgOiBaX09LO1xuXHR9XG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb3B5IHRoZSBzb3VyY2Ugc3RhdGUgdG8gdGhlIGRlc3RpbmF0aW9uIHN0YXRlXG5cdCAqL1xuXHQvL2Z1bmN0aW9uIGRlZmxhdGVDb3B5KGRlc3QsIHNvdXJjZSkge1xuXHQvL1xuXHQvL31cblxuXHRleHBvcnRzLmRlZmxhdGVJbml0ID0gZGVmbGF0ZUluaXQ7XG5cdGV4cG9ydHMuZGVmbGF0ZUluaXQyID0gZGVmbGF0ZUluaXQyO1xuXHRleHBvcnRzLmRlZmxhdGVSZXNldCA9IGRlZmxhdGVSZXNldDtcblx0ZXhwb3J0cy5kZWZsYXRlUmVzZXRLZWVwID0gZGVmbGF0ZVJlc2V0S2VlcDtcblx0ZXhwb3J0cy5kZWZsYXRlU2V0SGVhZGVyID0gZGVmbGF0ZVNldEhlYWRlcjtcblx0ZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcblx0ZXhwb3J0cy5kZWZsYXRlRW5kID0gZGVmbGF0ZUVuZDtcblx0ZXhwb3J0cy5kZWZsYXRlSW5mbyA9ICdwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuXHQvKiBOb3QgaW1wbGVtZW50ZWRcblx0ZXhwb3J0cy5kZWZsYXRlQm91bmQgPSBkZWZsYXRlQm91bmQ7XG5cdGV4cG9ydHMuZGVmbGF0ZUNvcHkgPSBkZWZsYXRlQ29weTtcblx0ZXhwb3J0cy5kZWZsYXRlU2V0RGljdGlvbmFyeSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5O1xuXHRleHBvcnRzLmRlZmxhdGVQYXJhbXMgPSBkZWZsYXRlUGFyYW1zO1xuXHRleHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5cdGV4cG9ydHMuZGVmbGF0ZVByaW1lID0gZGVmbGF0ZVByaW1lO1xuXHRleHBvcnRzLmRlZmxhdGVUdW5lID0gZGVmbGF0ZVR1bmU7XG5cdCovXG5cdH0se1wiLi4vdXRpbHMvY29tbW9uXCI6MjcsXCIuL2FkbGVyMzJcIjoyOSxcIi4vY3JjMzJcIjozMSxcIi4vbWVzc2FnZXNcIjozNyxcIi4vdHJlZXNcIjozOH1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0ZnVuY3Rpb24gR1poZWFkZXIoKSB7XG5cdCAgLyogdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dCAqL1xuXHQgIHRoaXMudGV4dCAgICAgICA9IDA7XG5cdCAgLyogbW9kaWZpY2F0aW9uIHRpbWUgKi9cblx0ICB0aGlzLnRpbWUgICAgICAgPSAwO1xuXHQgIC8qIGV4dHJhIGZsYWdzIChub3QgdXNlZCB3aGVuIHdyaXRpbmcgYSBnemlwIGZpbGUpICovXG5cdCAgdGhpcy54ZmxhZ3MgICAgID0gMDtcblx0ICAvKiBvcGVyYXRpbmcgc3lzdGVtICovXG5cdCAgdGhpcy5vcyAgICAgICAgID0gMDtcblx0ICAvKiBwb2ludGVyIHRvIGV4dHJhIGZpZWxkIG9yIFpfTlVMTCBpZiBub25lICovXG5cdCAgdGhpcy5leHRyYSAgICAgID0gbnVsbDtcblx0ICAvKiBleHRyYSBmaWVsZCBsZW5ndGggKHZhbGlkIGlmIGV4dHJhICE9IFpfTlVMTCkgKi9cblx0ICB0aGlzLmV4dHJhX2xlbiAgPSAwOyAvLyBBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCBpdCBpbiBKUyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgbGVhdmUgZm9yIGZldyBjb2RlIG1vZGlmaWNhdGlvbnNcblxuXHQgIC8vXG5cdCAgLy8gU2V0dXAgbGltaXRzIGlzIG5vdCBuZWNlc3NhcnkgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeVxuXHQgIC8vIGZvciBpbmZsYXRlIHVzZSBjb25zdGFudCBsaW1pdCBpbiA2NTUzNiBieXRlc1xuXHQgIC8vXG5cblx0ICAvKiBzcGFjZSBhdCBleHRyYSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuXHQgIC8vIHRoaXMuZXh0cmFfbWF4ICA9IDA7XG5cdCAgLyogcG9pbnRlciB0byB6ZXJvLXRlcm1pbmF0ZWQgZmlsZSBuYW1lIG9yIFpfTlVMTCAqL1xuXHQgIHRoaXMubmFtZSAgICAgICA9ICcnO1xuXHQgIC8qIHNwYWNlIGF0IG5hbWUgKG9ubHkgd2hlbiByZWFkaW5nIGhlYWRlcikgKi9cblx0ICAvLyB0aGlzLm5hbWVfbWF4ICAgPSAwO1xuXHQgIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGNvbW1lbnQgb3IgWl9OVUxMICovXG5cdCAgdGhpcy5jb21tZW50ICAgID0gJyc7XG5cdCAgLyogc3BhY2UgYXQgY29tbWVudCAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuXHQgIC8vIHRoaXMuY29tbV9tYXggICA9IDA7XG5cdCAgLyogdHJ1ZSBpZiB0aGVyZSB3YXMgb3Igd2lsbCBiZSBhIGhlYWRlciBjcmMgKi9cblx0ICB0aGlzLmhjcmMgICAgICAgPSAwO1xuXHQgIC8qIHRydWUgd2hlbiBkb25lIHJlYWRpbmcgZ3ppcCBoZWFkZXIgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cblx0ICB0aGlzLmRvbmUgICAgICAgPSBmYWxzZTtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gR1poZWFkZXI7XG5cdH0se31dLDM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xuXHR2YXIgQkFEID0gMzA7ICAgICAgIC8qIGdvdCBhIGRhdGEgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cblx0dmFyIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cblx0Lypcblx0ICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xuXHQgICBsaXRlcmFsIGFuZCBtYXRjaCBieXRlcyB1bnRpbCBlaXRoZXIgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgaXNcblx0ICAgYXZhaWxhYmxlLCBhbiBlbmQtb2YtYmxvY2sgaXMgZW5jb3VudGVyZWQsIG9yIGEgZGF0YSBlcnJvciBpcyBlbmNvdW50ZXJlZC5cblx0ICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxuXHQgICBleGFtcGxlLCBhIDE2SyBpbnB1dCBidWZmZXIgYW5kIGEgNjRLIG91dHB1dCBidWZmZXIsIG1vcmUgdGhhbiA5NSUgb2YgdGhlXG5cdCAgIGluZmxhdGUgZXhlY3V0aW9uIHRpbWUgaXMgc3BlbnQgaW4gdGhpcyByb3V0aW5lLlxuXG5cdCAgIEVudHJ5IGFzc3VtcHRpb25zOlxuXG5cdCAgICAgICAgc3RhdGUubW9kZSA9PT0gTEVOXG5cdCAgICAgICAgc3RybS5hdmFpbF9pbiA+PSA2XG5cdCAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4XG5cdCAgICAgICAgc3RhcnQgPj0gc3RybS5hdmFpbF9vdXRcblx0ICAgICAgICBzdGF0ZS5iaXRzIDwgOFxuXG5cdCAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XG5cblx0ICAgICAgICBMRU4gLS0gcmFuIG91dCBvZiBlbm91Z2ggb3V0cHV0IHNwYWNlIG9yIGVub3VnaCBhdmFpbGFibGUgaW5wdXRcblx0ICAgICAgICBUWVBFIC0tIHJlYWNoZWQgZW5kIG9mIGJsb2NrIGNvZGUsIGluZmxhdGUoKSB0byBpbnRlcnByZXQgbmV4dCBibG9ja1xuXHQgICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXG5cblx0ICAgTm90ZXM6XG5cblx0ICAgIC0gVGhlIG1heGltdW0gaW5wdXQgYml0cyB1c2VkIGJ5IGEgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgaXMgMTUgYml0cyBmb3IgdGhlXG5cdCAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxuXHQgICAgICBhbmQgMTMgYml0cyBmb3IgdGhlIGRpc3RhbmNlIGV4dHJhLiAgVGhpcyB0b3RhbHMgNDggYml0cywgb3Igc2l4IGJ5dGVzLlxuXHQgICAgICBUaGVyZWZvcmUgaWYgc3RybS5hdmFpbF9pbiA+PSA2LCB0aGVuIHRoZXJlIGlzIGVub3VnaCBpbnB1dCB0byBhdm9pZFxuXHQgICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxuXG5cdCAgICAtIFRoZSBtYXhpbXVtIGJ5dGVzIHRoYXQgYSBzaW5nbGUgbGVuZ3RoL2Rpc3RhbmNlIHBhaXIgY2FuIG91dHB1dCBpcyAyNThcblx0ICAgICAgYnl0ZXMsIHdoaWNoIGlzIHRoZSBtYXhpbXVtIGxlbmd0aCB0aGF0IGNhbiBiZSBjb2RlZC4gIGluZmxhdGVfZmFzdCgpXG5cdCAgICAgIHJlcXVpcmVzIHN0cm0uYXZhaWxfb3V0ID49IDI1OCBmb3IgZWFjaCBsb29wIHRvIGF2b2lkIGNoZWNraW5nIGZvclxuXHQgICAgICBvdXRwdXQgc3BhY2UuXG5cdCAqL1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLCBzdGFydCkge1xuXHQgIHZhciBzdGF0ZTtcblx0ICB2YXIgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuXHQgIHZhciBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBoYXZlIGVub3VnaCBpbnB1dCB3aGlsZSBpbiA8IGxhc3QgKi9cblx0ICB2YXIgX291dDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5vdXRwdXQgKi9cblx0ICB2YXIgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuXHQgIHZhciBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB3aGlsZSBvdXQgPCBlbmQsIGVub3VnaCBzcGFjZSBhdmFpbGFibGUgKi9cblx0Ly8jaWZkZWYgSU5GTEFURV9TVFJJQ1Rcblx0ICB2YXIgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG5cdC8vI2VuZGlmXG5cdCAgdmFyIHdzaXplOyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuXHQgIHZhciB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG5cdCAgdmFyIHduZXh0OyAgICAgICAgICAgICAgICAgIC8qIHdpbmRvdyB3cml0ZSBpbmRleCAqL1xuXHQgIHZhciB3aW5kb3c7ICAgICAgICAgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIHdzaXplICE9IDAgKi9cblx0ICB2YXIgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG5cdCAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0uYml0cyAqL1xuXHQgIHZhciBsY29kZTsgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmxlbmNvZGUgKi9cblx0ICB2YXIgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuXHQgIHZhciBsbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBsZW5ndGggY29kZXMgKi9cblx0ICB2YXIgZG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgZGlzdGFuY2UgY29kZXMgKi9cblx0ICB2YXIgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG5cdCAgdmFyIG9wOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgYml0cywgb3BlcmF0aW9uLCBleHRyYSBiaXRzLCBvciAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAgd2luZG93IHBvc2l0aW9uLCB3aW5kb3cgYnl0ZXMgdG8gY29weSAqL1xuXHQgIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuXHQgIHZhciBkaXN0OyAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBkaXN0YW5jZSAqL1xuXHQgIHZhciBmcm9tOyAgICAgICAgICAgICAgICAgICAvKiB3aGVyZSB0byBjb3B5IG1hdGNoIGZyb20gKi9cblx0ICB2YXIgZnJvbV9zb3VyY2U7XG5cblxuXHQgIHZhciBpbnB1dCwgb3V0cHV0OyAvLyBKUyBzcGVjaWZpYywgYmVjYXVzZSB3ZSBoYXZlIG5vIHBvaW50ZXJzXG5cblx0ICAvKiBjb3B5IHN0YXRlIHRvIGxvY2FsIHZhcmlhYmxlcyAqL1xuXHQgIHN0YXRlID0gc3RybS5zdGF0ZTtcblx0ICAvL2hlcmUgPSBzdGF0ZS5oZXJlO1xuXHQgIF9pbiA9IHN0cm0ubmV4dF9pbjtcblx0ICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG5cdCAgbGFzdCA9IF9pbiArIChzdHJtLmF2YWlsX2luIC0gNSk7XG5cdCAgX291dCA9IHN0cm0ubmV4dF9vdXQ7XG5cdCAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG5cdCAgYmVnID0gX291dCAtIChzdGFydCAtIHN0cm0uYXZhaWxfb3V0KTtcblx0ICBlbmQgPSBfb3V0ICsgKHN0cm0uYXZhaWxfb3V0IC0gMjU3KTtcblx0Ly8jaWZkZWYgSU5GTEFURV9TVFJJQ1Rcblx0ICBkbWF4ID0gc3RhdGUuZG1heDtcblx0Ly8jZW5kaWZcblx0ICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuXHQgIHdoYXZlID0gc3RhdGUud2hhdmU7XG5cdCAgd25leHQgPSBzdGF0ZS53bmV4dDtcblx0ICB3aW5kb3cgPSBzdGF0ZS53aW5kb3c7XG5cdCAgaG9sZCA9IHN0YXRlLmhvbGQ7XG5cdCAgYml0cyA9IHN0YXRlLmJpdHM7XG5cdCAgbGNvZGUgPSBzdGF0ZS5sZW5jb2RlO1xuXHQgIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG5cdCAgbG1hc2sgPSAoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDE7XG5cdCAgZG1hc2sgPSAoMSA8PCBzdGF0ZS5kaXN0Yml0cykgLSAxO1xuXG5cblx0ICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcblx0ICAgICBpbnB1dCBkYXRhIG9yIG91dHB1dCBzcGFjZSAqL1xuXG5cdCAgdG9wOlxuXHQgIGRvIHtcblx0ICAgIGlmIChiaXRzIDwgMTUpIHtcblx0ICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcblx0ICAgICAgYml0cyArPSA4O1xuXHQgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuXHQgICAgICBiaXRzICs9IDg7XG5cdCAgICB9XG5cblx0ICAgIGhlcmUgPSBsY29kZVtob2xkICYgbG1hc2tdO1xuXG5cdCAgICBkb2xlbjpcblx0ICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cblx0ICAgICAgb3AgPSBoZXJlID4+PiAyNC8qaGVyZS5iaXRzKi87XG5cdCAgICAgIGhvbGQgPj4+PSBvcDtcblx0ICAgICAgYml0cyAtPSBvcDtcblx0ICAgICAgb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZi8qaGVyZS5vcCovO1xuXHQgICAgICBpZiAob3AgPT09IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGxpdGVyYWwgKi9cblx0ICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuXHQgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAnJWMnXFxuXCIgOlxuXHQgICAgICAgIC8vICAgICAgICBcImluZmxhdGU6ICAgICAgICAgbGl0ZXJhbCAweCUwMnhcXG5cIiwgaGVyZS52YWwpKTtcblx0ICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG5cdCAgICAgIH1cblx0ICAgICAgZWxzZSBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBiYXNlICovXG5cdCAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcblx0ICAgICAgICBvcCAmPSAxNTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyAqL1xuXHQgICAgICAgIGlmIChvcCkge1xuXHQgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuXHQgICAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBsZW4gKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcblx0ICAgICAgICAgIGhvbGQgPj4+PSBvcDtcblx0ICAgICAgICAgIGJpdHMgLT0gb3A7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgbGVuZ3RoICV1XFxuXCIsIGxlbikpO1xuXHQgICAgICAgIGlmIChiaXRzIDwgMTUpIHtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG5cdCAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuXHQgICAgICAgIGRvZGlzdDpcblx0ICAgICAgICBmb3IgKDs7KSB7IC8vIGdvdG8gZW11bGF0aW9uXG5cdCAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcblx0ICAgICAgICAgIGhvbGQgPj4+PSBvcDtcblx0ICAgICAgICAgIGJpdHMgLT0gb3A7XG5cdCAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cblx0ICAgICAgICAgIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgIC8qIGRpc3RhbmNlIGJhc2UgKi9cblx0ICAgICAgICAgICAgZGlzdCA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG5cdCAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cblx0ICAgICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuXHQgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG5cdCAgICAgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcblx0ICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbX2luKytdIDw8IGJpdHM7XG5cdCAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcblx0Ly8jaWZkZWYgSU5GTEFURV9TVFJJQ1Rcblx0ICAgICAgICAgICAgaWYgKGRpc3QgPiBkbWF4KSB7XG5cdCAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuXHQgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuXHQgICAgICAgICAgICB9XG5cdC8vI2VuZGlmXG5cdCAgICAgICAgICAgIGhvbGQgPj4+PSBvcDtcblx0ICAgICAgICAgICAgYml0cyAtPSBvcDtcblx0ICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBkaXN0KSk7XG5cdCAgICAgICAgICAgIG9wID0gX291dCAtIGJlZzsgICAgICAgICAgICAgICAgLyogbWF4IGRpc3RhbmNlIGluIG91dHB1dCAqL1xuXHQgICAgICAgICAgICBpZiAoZGlzdCA+IG9wKSB7ICAgICAgICAgICAgICAgIC8qIHNlZSBpZiBjb3B5IGZyb20gd2luZG93ICovXG5cdCAgICAgICAgICAgICAgb3AgPSBkaXN0IC0gb3A7ICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayBpbiB3aW5kb3cgKi9cblx0ICAgICAgICAgICAgICBpZiAob3AgPiB3aGF2ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNhbmUpIHtcblx0ICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuXHQgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuXHQgICAgICAgICAgICAgICAgICBicmVhayB0b3A7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0Ly8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhaWx0cyxcblx0Ly8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuXHQvLyNpZmRlZiBJTkZMQVRFX0FMTE9XX0lOVkFMSURfRElTVEFOQ0VfVE9PRkFSX0FSUlJcblx0Ly8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG5cdC8vICAgICAgICAgICAgICAgICAgZG8ge1xuXHQvLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSAwO1xuXHQvLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcblx0Ly8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG5cdC8vICAgICAgICAgICAgICAgIH1cblx0Ly8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG5cdC8vICAgICAgICAgICAgICAgIGRvIHtcblx0Ly8gICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG5cdC8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG5cdC8vICAgICAgICAgICAgICAgIGlmIChvcCA9PT0gMCkge1xuXHQvLyAgICAgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDtcblx0Ly8gICAgICAgICAgICAgICAgICBkbyB7XG5cdC8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuXHQvLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcblx0Ly8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG5cdC8vICAgICAgICAgICAgICAgIH1cblx0Ly8jZW5kaWZcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgZnJvbSA9IDA7IC8vIHdpbmRvdyBpbmRleFxuXHQgICAgICAgICAgICAgIGZyb21fc291cmNlID0gd2luZG93O1xuXHQgICAgICAgICAgICAgIGlmICh3bmV4dCA9PT0gMCkgeyAgICAgICAgICAgLyogdmVyeSBjb21tb24gY2FzZSAqL1xuXHQgICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuXHQgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuXHQgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG5cdCAgICAgICAgICAgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHdpbmRvd1tmcm9tKytdO1xuXHQgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcblx0ICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuXHQgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuXHQgICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSArIHduZXh0IC0gb3A7XG5cdCAgICAgICAgICAgICAgICBvcCAtPSB3bmV4dDtcblx0ICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG5cdCAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcblx0ICAgICAgICAgICAgICAgICAgZG8ge1xuXHQgICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gd2luZG93W2Zyb20rK107XG5cdCAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuXHQgICAgICAgICAgICAgICAgICBmcm9tID0gMDtcblx0ICAgICAgICAgICAgICAgICAgaWYgKHduZXh0IDwgbGVuKSB7ICAvKiBzb21lIGZyb20gc3RhcnQgb2Ygd2luZG93ICovXG5cdCAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcblx0ICAgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG5cdCAgICAgICAgICAgICAgICAgICAgZG8ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSB3aW5kb3dbZnJvbSsrXTtcblx0ICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcblx0ICAgICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAgICAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGZyb21fc291cmNlID0gb3V0cHV0O1xuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuXHQgICAgICAgICAgICAgICAgZnJvbSArPSB3bmV4dCAtIG9wO1xuXHQgICAgICAgICAgICAgICAgaWYgKG9wIDwgbGVuKSB7ICAgICAgICAgLyogc29tZSBmcm9tIHdpbmRvdyAqL1xuXHQgICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG5cdCAgICAgICAgICAgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IHdpbmRvd1tmcm9tKytdO1xuXHQgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcblx0ICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuXHQgICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IDIpIHtcblx0ICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcblx0ICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcblx0ICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcblx0ICAgICAgICAgICAgICAgIGxlbiAtPSAzO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICBpZiAobGVuKSB7XG5cdCAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG5cdCAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuXHQgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cblx0ICAgICAgICAgICAgICBkbyB7ICAgICAgICAgICAgICAgICAgICAgICAgLyogbWluaW11bSBsZW5ndGggaXMgdGhyZWUgKi9cblx0ICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG5cdCAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuXHQgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcblx0ICAgICAgICAgICAgICAgIGxlbiAtPSAzO1xuXHQgICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuXHQgICAgICAgICAgICAgIGlmIChsZW4pIHtcblx0ICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG5cdCAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuXHQgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG5cdCAgICAgICAgICAgIGhlcmUgPSBkY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuXHQgICAgICAgICAgICBjb250aW51ZSBkb2Rpc3Q7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcblx0ICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICAgICAgYnJlYWsgdG9wO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBlbHNlIGlmICgob3AgJiA2NCkgPT09IDApIHsgICAgICAgICAgICAgIC8qIDJuZCBsZXZlbCBsZW5ndGggY29kZSAqL1xuXHQgICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuXHQgICAgICAgIGNvbnRpbnVlIGRvbGVuO1xuXHQgICAgICB9XG5cdCAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cblx0ICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGVuZCBvZiBibG9ja1xcblwiKSk7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG5cdCAgICAgICAgYnJlYWsgdG9wO1xuXHQgICAgICB9XG5cdCAgICAgIGVsc2Uge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhayB0b3A7XG5cdCAgICAgIH1cblxuXHQgICAgICBicmVhazsgLy8gbmVlZCB0byBlbXVsYXRlIGdvdG8gdmlhIFwiY29udGludWVcIlxuXHQgICAgfVxuXHQgIH0gd2hpbGUgKF9pbiA8IGxhc3QgJiYgX291dCA8IGVuZCk7XG5cblx0ICAvKiByZXR1cm4gdW51c2VkIGJ5dGVzIChvbiBlbnRyeSwgYml0cyA8IDgsIHNvIGluIHdvbid0IGdvIHRvbyBmYXIgYmFjaykgKi9cblx0ICBsZW4gPSBiaXRzID4+IDM7XG5cdCAgX2luIC09IGxlbjtcblx0ICBiaXRzIC09IGxlbiA8PCAzO1xuXHQgIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG5cdCAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXR1cm4gKi9cblx0ICBzdHJtLm5leHRfaW4gPSBfaW47XG5cdCAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG5cdCAgc3RybS5hdmFpbF9pbiA9IChfaW4gPCBsYXN0ID8gNSArIChsYXN0IC0gX2luKSA6IDUgLSAoX2luIC0gbGFzdCkpO1xuXHQgIHN0cm0uYXZhaWxfb3V0ID0gKF9vdXQgPCBlbmQgPyAyNTcgKyAoZW5kIC0gX291dCkgOiAyNTcgLSAoX291dCAtIGVuZCkpO1xuXHQgIHN0YXRlLmhvbGQgPSBob2xkO1xuXHQgIHN0YXRlLmJpdHMgPSBiaXRzO1xuXHQgIHJldHVybjtcblx0fTtcblxuXHR9LHt9XSwzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdHZhciB1dGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL2NvbW1vbicpO1xuXHR2YXIgYWRsZXIzMiA9IF9kZXJlcV8oJy4vYWRsZXIzMicpO1xuXHR2YXIgY3JjMzIgICA9IF9kZXJlcV8oJy4vY3JjMzInKTtcblx0dmFyIGluZmxhdGVfZmFzdCA9IF9kZXJlcV8oJy4vaW5mZmFzdCcpO1xuXHR2YXIgaW5mbGF0ZV90YWJsZSA9IF9kZXJlcV8oJy4vaW5mdHJlZXMnKTtcblxuXHR2YXIgQ09ERVMgPSAwO1xuXHR2YXIgTEVOUyA9IDE7XG5cdHZhciBESVNUUyA9IDI7XG5cblx0LyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cdC8qIEFsbG93ZWQgZmx1c2ggdmFsdWVzOyBzZWUgZGVmbGF0ZSgpIGFuZCBpbmZsYXRlKCkgYmVsb3cgZm9yIGRldGFpbHMgKi9cblx0Ly92YXIgWl9OT19GTFVTSCAgICAgID0gMDtcblx0Ly92YXIgWl9QQVJUSUFMX0ZMVVNIID0gMTtcblx0Ly92YXIgWl9TWU5DX0ZMVVNIICAgID0gMjtcblx0Ly92YXIgWl9GVUxMX0ZMVVNIICAgID0gMztcblx0dmFyIFpfRklOSVNIICAgICAgICA9IDQ7XG5cdHZhciBaX0JMT0NLICAgICAgICAgPSA1O1xuXHR2YXIgWl9UUkVFUyAgICAgICAgID0gNjtcblxuXG5cdC8qIFJldHVybiBjb2RlcyBmb3IgdGhlIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gZnVuY3Rpb25zLiBOZWdhdGl2ZSB2YWx1ZXNcblx0ICogYXJlIGVycm9ycywgcG9zaXRpdmUgdmFsdWVzIGFyZSB1c2VkIGZvciBzcGVjaWFsIGJ1dCBub3JtYWwgZXZlbnRzLlxuXHQgKi9cblx0dmFyIFpfT0sgICAgICAgICAgICA9IDA7XG5cdHZhciBaX1NUUkVBTV9FTkQgICAgPSAxO1xuXHR2YXIgWl9ORUVEX0RJQ1QgICAgID0gMjtcblx0Ly92YXIgWl9FUlJOTyAgICAgICAgID0gLTE7XG5cdHZhciBaX1NUUkVBTV9FUlJPUiAgPSAtMjtcblx0dmFyIFpfREFUQV9FUlJPUiAgICA9IC0zO1xuXHR2YXIgWl9NRU1fRVJST1IgICAgID0gLTQ7XG5cdHZhciBaX0JVRl9FUlJPUiAgICAgPSAtNTtcblx0Ly92YXIgWl9WRVJTSU9OX0VSUk9SID0gLTY7XG5cblx0LyogVGhlIGRlZmxhdGUgY29tcHJlc3Npb24gbWV0aG9kICovXG5cdHZhciBaX0RFRkxBVEVEICA9IDg7XG5cblxuXHQvKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblx0dmFyICAgIEhFQUQgPSAxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtYWdpYyBoZWFkZXIgKi9cblx0dmFyICAgIEZMQUdTID0gMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtZXRob2QgYW5kIGZsYWdzIChnemlwKSAqL1xuXHR2YXIgICAgVElNRSA9IDM7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIG1vZGlmaWNhdGlvbiB0aW1lIChnemlwKSAqL1xuXHR2YXIgICAgT1MgPSA0OyAgICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGZsYWdzIGFuZCBvcGVyYXRpbmcgc3lzdGVtIChnemlwKSAqL1xuXHR2YXIgICAgRVhMRU4gPSA1OyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGV4dHJhIGxlbmd0aCAoZ3ppcCkgKi9cblx0dmFyICAgIEVYVFJBID0gNjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBieXRlcyAoZ3ppcCkgKi9cblx0dmFyICAgIE5BTUUgPSA3OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgZmlsZSBuYW1lIChnemlwKSAqL1xuXHR2YXIgICAgQ09NTUVOVCA9IDg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGVuZCBvZiBjb21tZW50IChnemlwKSAqL1xuXHR2YXIgICAgSENSQyA9IDk7ICAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGhlYWRlciBjcmMgKGd6aXApICovXG5cdHZhciAgICBESUNUSUQgPSAxMDsgICAgLyogaTogd2FpdGluZyBmb3IgZGljdGlvbmFyeSBjaGVjayB2YWx1ZSAqL1xuXHR2YXIgICAgRElDVCA9IDExOyAgICAgIC8qIHdhaXRpbmcgZm9yIGluZmxhdGVTZXREaWN0aW9uYXJ5KCkgY2FsbCAqL1xuXHR2YXIgICAgICAgIFRZUEUgPSAxMjsgICAgICAvKiBpOiB3YWl0aW5nIGZvciB0eXBlIGJpdHMsIGluY2x1ZGluZyBsYXN0LWZsYWcgYml0ICovXG5cdHZhciAgICAgICAgVFlQRURPID0gMTM7ICAgIC8qIGk6IHNhbWUsIGJ1dCBza2lwIGNoZWNrIHRvIGV4aXQgaW5mbGF0ZSBvbiBuZXcgYmxvY2sgKi9cblx0dmFyICAgICAgICBTVE9SRUQgPSAxNDsgICAgLyogaTogd2FpdGluZyBmb3Igc3RvcmVkIHNpemUgKGxlbmd0aCBhbmQgY29tcGxlbWVudCkgKi9cblx0dmFyICAgICAgICBDT1BZXyA9IDE1OyAgICAgLyogaS9vOiBzYW1lIGFzIENPUFkgYmVsb3csIGJ1dCBvbmx5IGZpcnN0IHRpbWUgaW4gKi9cblx0dmFyICAgICAgICBDT1BZID0gMTY7ICAgICAgLyogaS9vOiB3YWl0aW5nIGZvciBpbnB1dCBvciBvdXRwdXQgdG8gY29weSBzdG9yZWQgYmxvY2sgKi9cblx0dmFyICAgICAgICBUQUJMRSA9IDE3OyAgICAgLyogaTogd2FpdGluZyBmb3IgZHluYW1pYyBibG9jayB0YWJsZSBsZW5ndGhzICovXG5cdHZhciAgICAgICAgTEVOTEVOUyA9IDE4OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuXHR2YXIgICAgICAgIENPREVMRU5TID0gMTk7ICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0IGFuZCBkaXN0YW5jZSBjb2RlIGxlbmd0aHMgKi9cblx0dmFyICAgICAgICAgICAgTEVOXyA9IDIwOyAgICAgIC8qIGk6IHNhbWUgYXMgTEVOIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG5cdHZhciAgICAgICAgICAgIExFTiA9IDIxOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGgvbGl0L2VvYiBjb2RlICovXG5cdHZhciAgICAgICAgICAgIExFTkVYVCA9IDIyOyAgICAvKiBpOiB3YWl0aW5nIGZvciBsZW5ndGggZXh0cmEgYml0cyAqL1xuXHR2YXIgICAgICAgICAgICBESVNUID0gMjM7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgY29kZSAqL1xuXHR2YXIgICAgICAgICAgICBESVNURVhUID0gMjQ7ICAgLyogaTogd2FpdGluZyBmb3IgZGlzdGFuY2UgZXh0cmEgYml0cyAqL1xuXHR2YXIgICAgICAgICAgICBNQVRDSCA9IDI1OyAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIGNvcHkgc3RyaW5nICovXG5cdHZhciAgICAgICAgICAgIExJVCA9IDI2OyAgICAgICAvKiBvOiB3YWl0aW5nIGZvciBvdXRwdXQgc3BhY2UgdG8gd3JpdGUgbGl0ZXJhbCAqL1xuXHR2YXIgICAgQ0hFQ0sgPSAyNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBjaGVjayB2YWx1ZSAqL1xuXHR2YXIgICAgTEVOR1RIID0gMjg7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIDMyLWJpdCBsZW5ndGggKGd6aXApICovXG5cdHZhciAgICBET05FID0gMjk7ICAgICAgLyogZmluaXNoZWQgY2hlY2ssIGRvbmUgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cblx0dmFyICAgIEJBRCA9IDMwOyAgICAgICAvKiBnb3QgYSBkYXRhIGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5cdHZhciAgICBNRU0gPSAzMTsgICAgICAgLyogZ290IGFuIGluZmxhdGUoKSBtZW1vcnkgZXJyb3IgLS0gcmVtYWluIGhlcmUgdW50aWwgcmVzZXQgKi9cblx0dmFyICAgIFNZTkMgPSAzMjsgICAgICAvKiBsb29raW5nIGZvciBzeW5jaHJvbml6YXRpb24gYnl0ZXMgdG8gcmVzdGFydCBpbmZsYXRlKCkgKi9cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cblxuXHR2YXIgRU5PVUdIX0xFTlMgPSA4NTI7XG5cdHZhciBFTk9VR0hfRElTVFMgPSA1OTI7XG5cdC8vdmFyIEVOT1VHSCA9ICAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxuXHR2YXIgTUFYX1dCSVRTID0gMTU7XG5cdC8qIDMySyBMWjc3IHdpbmRvdyAqL1xuXHR2YXIgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cblx0ZnVuY3Rpb24gWlNXQVAzMihxKSB7XG5cdCAgcmV0dXJuICAoKChxID4+PiAyNCkgJiAweGZmKSArXG5cdCAgICAgICAgICAoKHEgPj4+IDgpICYgMHhmZjAwKSArXG5cdCAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcblx0ICAgICAgICAgICgocSAmIDB4ZmYpIDw8IDI0KSk7XG5cdH1cblxuXG5cdGZ1bmN0aW9uIEluZmxhdGVTdGF0ZSgpIHtcblx0ICB0aGlzLm1vZGUgPSAwOyAgICAgICAgICAgICAvKiBjdXJyZW50IGluZmxhdGUgbW9kZSAqL1xuXHQgIHRoaXMubGFzdCA9IGZhbHNlOyAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xuXHQgIHRoaXMud3JhcCA9IDA7ICAgICAgICAgICAgICAvKiBiaXQgMCB0cnVlIGZvciB6bGliLCBiaXQgMSB0cnVlIGZvciBnemlwICovXG5cdCAgdGhpcy5oYXZlZGljdCA9IGZhbHNlOyAgICAgIC8qIHRydWUgaWYgZGljdGlvbmFyeSBwcm92aWRlZCAqL1xuXHQgIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXG5cdCAgdGhpcy5kbWF4ID0gMDsgICAgICAgICAgICAgIC8qIHpsaWIgaGVhZGVyIG1heCBkaXN0YW5jZSAoSU5GTEFURV9TVFJJQ1QpICovXG5cdCAgdGhpcy5jaGVjayA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIGNoZWNrIHZhbHVlICovXG5cdCAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xuXHQgIC8vIFRPRE86IG1heSBiZSB7fVxuXHQgIHRoaXMuaGVhZCA9IG51bGw7ICAgICAgICAgICAvKiB3aGVyZSB0byBzYXZlIGd6aXAgaGVhZGVyIGluZm9ybWF0aW9uICovXG5cblx0ICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuXHQgIHRoaXMud2JpdHMgPSAwOyAgICAgICAgICAgICAvKiBsb2cgYmFzZSAyIG9mIHJlcXVlc3RlZCB3aW5kb3cgc2l6ZSAqL1xuXHQgIHRoaXMud3NpemUgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgc2l6ZSBvciB6ZXJvIGlmIG5vdCB1c2luZyB3aW5kb3cgKi9cblx0ICB0aGlzLndoYXZlID0gMDsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuXHQgIHRoaXMud25leHQgPSAwOyAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cblx0ICB0aGlzLndpbmRvdyA9IG51bGw7ICAgICAgICAgLyogYWxsb2NhdGVkIHNsaWRpbmcgd2luZG93LCBpZiBuZWVkZWQgKi9cblxuXHQgIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xuXHQgIHRoaXMuaG9sZCA9IDA7ICAgICAgICAgICAgICAvKiBpbnB1dCBiaXQgYWNjdW11bGF0b3IgKi9cblx0ICB0aGlzLmJpdHMgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGJpdHMgaW4gXCJpblwiICovXG5cblx0ICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xuXHQgIHRoaXMubGVuZ3RoID0gMDsgICAgICAgICAgICAvKiBsaXRlcmFsIG9yIGxlbmd0aCBvZiBkYXRhIHRvIGNvcHkgKi9cblx0ICB0aGlzLm9mZnNldCA9IDA7ICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayB0byBjb3B5IHN0cmluZyBmcm9tICovXG5cblx0ICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi9cblx0ICB0aGlzLmV4dHJhID0gMDsgICAgICAgICAgICAgLyogZXh0cmEgYml0cyBuZWVkZWQgKi9cblxuXHQgIC8qIGZpeGVkIGFuZCBkeW5hbWljIGNvZGUgdGFibGVzICovXG5cdCAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXG5cdCAgdGhpcy5kaXN0Y29kZSA9IG51bGw7ICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzICovXG5cdCAgdGhpcy5sZW5iaXRzID0gMDsgICAgICAgICAgIC8qIGluZGV4IGJpdHMgZm9yIGxlbmNvZGUgKi9cblx0ICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cblxuXHQgIC8qIGR5bmFtaWMgdGFibGUgYnVpbGRpbmcgKi9cblx0ICB0aGlzLm5jb2RlID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuXHQgIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuXHQgIHRoaXMubmRpc3QgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG5cdCAgdGhpcy5oYXZlID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlIGxlbmd0aHMgaW4gbGVuc1tdICovXG5cdCAgdGhpcy5uZXh0ID0gbnVsbDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cblxuXHQgIHRoaXMubGVucyA9IG5ldyB1dGlscy5CdWYxNigzMjApOyAvKiB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3IgY29kZSBsZW5ndGhzICovXG5cdCAgdGhpcy53b3JrID0gbmV3IHV0aWxzLkJ1ZjE2KDI4OCk7IC8qIHdvcmsgYXJlYSBmb3IgY29kZSB0YWJsZSBidWlsZGluZyAqL1xuXG5cdCAgLypcblx0ICAgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHBvaW50ZXJzIGluIGpzLCB3ZSB1c2UgbGVuY29kZSBhbmQgZGlzdGNvZGUgZGlyZWN0bHlcblx0ICAgYXMgYnVmZmVycyBzbyB3ZSBkb24ndCBuZWVkIGNvZGVzXG5cdCAgKi9cblx0ICAvL3RoaXMuY29kZXMgPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXG5cdCAgdGhpcy5sZW5keW4gPSBudWxsOyAgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgbGVuZ3RoL2xpdGVyYWwgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuXHQgIHRoaXMuZGlzdGR5biA9IG51bGw7ICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGRpc3RhbmNlIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cblx0ICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXG5cdCAgdGhpcy5iYWNrID0gMDsgICAgICAgICAgICAgICAgICAgLyogYml0cyBiYWNrIG9mIGxhc3QgdW5wcm9jZXNzZWQgbGVuZ3RoL2xpdCAqL1xuXHQgIHRoaXMud2FzID0gMDsgICAgICAgICAgICAgICAgICAgIC8qIGluaXRpYWwgbGVuZ3RoIG9mIG1hdGNoICovXG5cdH1cblxuXHRmdW5jdGlvbiBpbmZsYXRlUmVzZXRLZWVwKHN0cm0pIHtcblx0ICB2YXIgc3RhdGU7XG5cblx0ICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SOyB9XG5cdCAgc3RhdGUgPSBzdHJtLnN0YXRlO1xuXHQgIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IHN0YXRlLnRvdGFsID0gMDtcblx0ICBzdHJtLm1zZyA9ICcnOyAvKlpfTlVMTCovXG5cdCAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuXHQgICAgc3RybS5hZGxlciA9IHN0YXRlLndyYXAgJiAxO1xuXHQgIH1cblx0ICBzdGF0ZS5tb2RlID0gSEVBRDtcblx0ICBzdGF0ZS5sYXN0ID0gMDtcblx0ICBzdGF0ZS5oYXZlZGljdCA9IDA7XG5cdCAgc3RhdGUuZG1heCA9IDMyNzY4O1xuXHQgIHN0YXRlLmhlYWQgPSBudWxsLypaX05VTEwqLztcblx0ICBzdGF0ZS5ob2xkID0gMDtcblx0ICBzdGF0ZS5iaXRzID0gMDtcblx0ICAvL3N0YXRlLmxlbmNvZGUgPSBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQgPSBzdGF0ZS5jb2Rlcztcblx0ICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluID0gbmV3IHV0aWxzLkJ1ZjMyKEVOT1VHSF9MRU5TKTtcblx0ICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW4gPSBuZXcgdXRpbHMuQnVmMzIoRU5PVUdIX0RJU1RTKTtcblxuXHQgIHN0YXRlLnNhbmUgPSAxO1xuXHQgIHN0YXRlLmJhY2sgPSAtMTtcblx0ICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6IHJlc2V0XFxuXCIpKTtcblx0ICByZXR1cm4gWl9PSztcblx0fVxuXG5cdGZ1bmN0aW9uIGluZmxhdGVSZXNldChzdHJtKSB7XG5cdCAgdmFyIHN0YXRlO1xuXG5cdCAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuXHQgIHN0YXRlID0gc3RybS5zdGF0ZTtcblx0ICBzdGF0ZS53c2l6ZSA9IDA7XG5cdCAgc3RhdGUud2hhdmUgPSAwO1xuXHQgIHN0YXRlLnduZXh0ID0gMDtcblx0ICByZXR1cm4gaW5mbGF0ZVJlc2V0S2VlcChzdHJtKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKSB7XG5cdCAgdmFyIHdyYXA7XG5cdCAgdmFyIHN0YXRlO1xuXG5cdCAgLyogZ2V0IHRoZSBzdGF0ZSAqL1xuXHQgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblx0ICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cblx0ICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG5cdCAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7XG5cdCAgICB3cmFwID0gMDtcblx0ICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcblx0ICB9XG5cdCAgZWxzZSB7XG5cdCAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuXHQgICAgaWYgKHdpbmRvd0JpdHMgPCA0OCkge1xuXHQgICAgICB3aW5kb3dCaXRzICY9IDE1O1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8qIHNldCBudW1iZXIgb2Ygd2luZG93IGJpdHMsIGZyZWUgd2luZG93IGlmIGRpZmZlcmVudCAqL1xuXHQgIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG5cdCAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdCAgfVxuXHQgIGlmIChzdGF0ZS53aW5kb3cgIT09IG51bGwgJiYgc3RhdGUud2JpdHMgIT09IHdpbmRvd0JpdHMpIHtcblx0ICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG5cdCAgfVxuXG5cdCAgLyogdXBkYXRlIHN0YXRlIGFuZCByZXNldCB0aGUgcmVzdCBvZiBpdCAqL1xuXHQgIHN0YXRlLndyYXAgPSB3cmFwO1xuXHQgIHN0YXRlLndiaXRzID0gd2luZG93Qml0cztcblx0ICByZXR1cm4gaW5mbGF0ZVJlc2V0KHN0cm0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5mbGF0ZUluaXQyKHN0cm0sIHdpbmRvd0JpdHMpIHtcblx0ICB2YXIgcmV0O1xuXHQgIHZhciBzdGF0ZTtcblxuXHQgIGlmICghc3RybSkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblx0ICAvL3N0cm0ubXNnID0gWl9OVUxMOyAgICAgICAgICAgICAgICAgLyogaW4gY2FzZSB3ZSByZXR1cm4gYW4gZXJyb3IgKi9cblxuXHQgIHN0YXRlID0gbmV3IEluZmxhdGVTdGF0ZSgpO1xuXG5cdCAgLy9pZiAoc3RhdGUgPT09IFpfTlVMTCkgcmV0dXJuIFpfTUVNX0VSUk9SO1xuXHQgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogYWxsb2NhdGVkXFxuXCIpKTtcblx0ICBzdHJtLnN0YXRlID0gc3RhdGU7XG5cdCAgc3RhdGUud2luZG93ID0gbnVsbC8qWl9OVUxMKi87XG5cdCAgcmV0ID0gaW5mbGF0ZVJlc2V0MihzdHJtLCB3aW5kb3dCaXRzKTtcblx0ICBpZiAocmV0ICE9PSBaX09LKSB7XG5cdCAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XG5cdCAgfVxuXHQgIHJldHVybiByZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBpbmZsYXRlSW5pdChzdHJtKSB7XG5cdCAgcmV0dXJuIGluZmxhdGVJbml0MihzdHJtLCBERUZfV0JJVFMpO1xuXHR9XG5cblxuXHQvKlxuXHQgUmV0dXJuIHN0YXRlIHdpdGggbGVuZ3RoIGFuZCBkaXN0YW5jZSBkZWNvZGluZyB0YWJsZXMgYW5kIGluZGV4IHNpemVzIHNldCB0b1xuXHQgZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxuXHQgSWYgQlVJTERGSVhFRCBpcyBkZWZpbmVkLCB0aGVuIGluc3RlYWQgdGhpcyByb3V0aW5lIGJ1aWxkcyB0aGUgdGFibGVzIHRoZVxuXHQgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHJldHVybnMgdGhvc2UgdGFibGVzIHRoZSBmaXJzdCB0aW1lIGFuZFxuXHQgdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cblx0IGV4Y2hhbmdlIGZvciBhIGxpdHRsZSBleGVjdXRpb24gdGltZS4gIEhvd2V2ZXIsIEJVSUxERklYRUQgc2hvdWxkIG5vdCBiZVxuXHQgdXNlZCBmb3IgdGhyZWFkZWQgYXBwbGljYXRpb25zLCBzaW5jZSB0aGUgcmV3cml0aW5nIG9mIHRoZSB0YWJsZXMgYW5kIHZpcmdpblxuXHQgbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cblx0ICovXG5cdHZhciB2aXJnaW4gPSB0cnVlO1xuXG5cdHZhciBsZW5maXgsIGRpc3RmaXg7IC8vIFdlIGhhdmUgbm8gcG9pbnRlcnMgaW4gSlMsIHNvIGtlZXAgdGFibGVzIHNlcGFyYXRlXG5cblx0ZnVuY3Rpb24gZml4ZWR0YWJsZXMoc3RhdGUpIHtcblx0ICAvKiBidWlsZCBmaXhlZCBodWZmbWFuIHRhYmxlcyBpZiBmaXJzdCBjYWxsIChtYXkgbm90IGJlIHRocmVhZCBzYWZlKSAqL1xuXHQgIGlmICh2aXJnaW4pIHtcblx0ICAgIHZhciBzeW07XG5cblx0ICAgIGxlbmZpeCA9IG5ldyB1dGlscy5CdWYzMig1MTIpO1xuXHQgICAgZGlzdGZpeCA9IG5ldyB1dGlscy5CdWYzMigzMik7XG5cblx0ICAgIC8qIGxpdGVyYWwvbGVuZ3RoIHRhYmxlICovXG5cdCAgICBzeW0gPSAwO1xuXHQgICAgd2hpbGUgKHN5bSA8IDE0NCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblx0ICAgIHdoaWxlIChzeW0gPCAyNTYpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA5OyB9XG5cdCAgICB3aGlsZSAoc3ltIDwgMjgwKSB7IHN0YXRlLmxlbnNbc3ltKytdID0gNzsgfVxuXHQgICAgd2hpbGUgKHN5bSA8IDI4OCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDg7IH1cblxuXHQgICAgaW5mbGF0ZV90YWJsZShMRU5TLCAgc3RhdGUubGVucywgMCwgMjg4LCBsZW5maXgsICAgMCwgc3RhdGUud29yaywge2JpdHM6IDl9KTtcblxuXHQgICAgLyogZGlzdGFuY2UgdGFibGUgKi9cblx0ICAgIHN5bSA9IDA7XG5cdCAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cblx0ICAgIGluZmxhdGVfdGFibGUoRElTVFMsIHN0YXRlLmxlbnMsIDAsIDMyLCAgIGRpc3RmaXgsIDAsIHN0YXRlLndvcmssIHtiaXRzOiA1fSk7XG5cblx0ICAgIC8qIGRvIHRoaXMganVzdCBvbmNlICovXG5cdCAgICB2aXJnaW4gPSBmYWxzZTtcblx0ICB9XG5cblx0ICBzdGF0ZS5sZW5jb2RlID0gbGVuZml4O1xuXHQgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXHQgIHN0YXRlLmRpc3Rjb2RlID0gZGlzdGZpeDtcblx0ICBzdGF0ZS5kaXN0Yml0cyA9IDU7XG5cdH1cblxuXG5cdC8qXG5cdCBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG5cdCByZXR1cm5pbmcuICBJZiB3aW5kb3cgZG9lcyBub3QgZXhpc3QgeWV0LCBjcmVhdGUgaXQuICBUaGlzIGlzIG9ubHkgY2FsbGVkXG5cdCB3aGVuIGEgd2luZG93IGlzIGFscmVhZHkgaW4gdXNlLCBvciB3aGVuIG91dHB1dCBoYXMgYmVlbiB3cml0dGVuIGR1cmluZyB0aGlzXG5cdCBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG5cdCBJdCBpcyBhbHNvIGNhbGxlZCB0byBjcmVhdGUgYSB3aW5kb3cgZm9yIGRpY3Rpb25hcnkgZGF0YSB3aGVuIGEgZGljdGlvbmFyeVxuXHQgaXMgbG9hZGVkLlxuXG5cdCBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG5cdCBhZHZhbnRhZ2UsIHNpbmNlIG9ubHkgdGhlIGxhc3QgMzJLIG9mIG91dHB1dCBpcyBjb3BpZWQgdG8gdGhlIHNsaWRpbmcgd2luZG93XG5cdCB1cG9uIHJldHVybiBmcm9tIGluZmxhdGUoKSwgYW5kIHNpbmNlIGFsbCBkaXN0YW5jZXMgYWZ0ZXIgdGhlIGZpcnN0IDMySyBvZlxuXHQgb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuXHQgVGhlIGFkdmFudGFnZSBtYXkgYmUgZGVwZW5kZW50IG9uIHRoZSBzaXplIG9mIHRoZSBwcm9jZXNzb3IncyBkYXRhIGNhY2hlcy5cblx0ICovXG5cdGZ1bmN0aW9uIHVwZGF0ZXdpbmRvdyhzdHJtLCBzcmMsIGVuZCwgY29weSkge1xuXHQgIHZhciBkaXN0O1xuXHQgIHZhciBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cblx0ICAvKiBpZiBpdCBoYXNuJ3QgYmVlbiBkb25lIGFscmVhZHksIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2luZG93ICovXG5cdCAgaWYgKHN0YXRlLndpbmRvdyA9PT0gbnVsbCkge1xuXHQgICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xuXHQgICAgc3RhdGUud25leHQgPSAwO1xuXHQgICAgc3RhdGUud2hhdmUgPSAwO1xuXG5cdCAgICBzdGF0ZS53aW5kb3cgPSBuZXcgdXRpbHMuQnVmOChzdGF0ZS53c2l6ZSk7XG5cdCAgfVxuXG5cdCAgLyogY29weSBzdGF0ZS0+d3NpemUgb3IgbGVzcyBvdXRwdXQgYnl0ZXMgaW50byB0aGUgY2lyY3VsYXIgd2luZG93ICovXG5cdCAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHtcblx0ICAgIHV0aWxzLmFycmF5U2V0KHN0YXRlLndpbmRvdyxzcmMsIGVuZCAtIHN0YXRlLndzaXplLCBzdGF0ZS53c2l6ZSwgMCk7XG5cdCAgICBzdGF0ZS53bmV4dCA9IDA7XG5cdCAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuXHQgIH1cblx0ICBlbHNlIHtcblx0ICAgIGRpc3QgPSBzdGF0ZS53c2l6ZSAtIHN0YXRlLnduZXh0O1xuXHQgICAgaWYgKGRpc3QgPiBjb3B5KSB7XG5cdCAgICAgIGRpc3QgPSBjb3B5O1xuXHQgICAgfVxuXHQgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpO1xuXHQgICAgdXRpbHMuYXJyYXlTZXQoc3RhdGUud2luZG93LHNyYywgZW5kIC0gY29weSwgZGlzdCwgc3RhdGUud25leHQpO1xuXHQgICAgY29weSAtPSBkaXN0O1xuXHQgICAgaWYgKGNvcHkpIHtcblx0ICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuXHQgICAgICB1dGlscy5hcnJheVNldChzdGF0ZS53aW5kb3csc3JjLCBlbmQgLSBjb3B5LCBjb3B5LCAwKTtcblx0ICAgICAgc3RhdGUud25leHQgPSBjb3B5O1xuXHQgICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG5cdCAgICAgIGlmIChzdGF0ZS53bmV4dCA9PT0gc3RhdGUud3NpemUpIHsgc3RhdGUud25leHQgPSAwOyB9XG5cdCAgICAgIGlmIChzdGF0ZS53aGF2ZSA8IHN0YXRlLndzaXplKSB7IHN0YXRlLndoYXZlICs9IGRpc3Q7IH1cblx0ICAgIH1cblx0ICB9XG5cdCAgcmV0dXJuIDA7XG5cdH1cblxuXHRmdW5jdGlvbiBpbmZsYXRlKHN0cm0sIGZsdXNoKSB7XG5cdCAgdmFyIHN0YXRlO1xuXHQgIHZhciBpbnB1dCwgb3V0cHV0OyAgICAgICAgICAvLyBpbnB1dC9vdXRwdXQgYnVmZmVyc1xuXHQgIHZhciBuZXh0OyAgICAgICAgICAgICAgICAgICAvKiBuZXh0IGlucHV0IElOREVYICovXG5cdCAgdmFyIHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXG5cdCAgdmFyIGhhdmUsIGxlZnQ7ICAgICAgICAgICAgIC8qIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG5cdCAgdmFyIGhvbGQ7ICAgICAgICAgICAgICAgICAgIC8qIGJpdCBidWZmZXIgKi9cblx0ICB2YXIgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG5cdCAgdmFyIF9pbiwgX291dDsgICAgICAgICAgICAgIC8qIHNhdmUgc3RhcnRpbmcgYXZhaWxhYmxlIGlucHV0IGFuZCBvdXRwdXQgKi9cblx0ICB2YXIgY29weTsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHN0b3JlZCBvciBtYXRjaCBieXRlcyB0byBjb3B5ICovXG5cdCAgdmFyIGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xuXHQgIHZhciBmcm9tX3NvdXJjZTtcblx0ICB2YXIgaGVyZSA9IDA7ICAgICAgICAgICAgICAgLyogY3VycmVudCBkZWNvZGluZyB0YWJsZSBlbnRyeSAqL1xuXHQgIHZhciBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuXHQgIC8vdmFyIGxhc3Q7ICAgICAgICAgICAgICAgICAgIC8qIHBhcmVudCB0YWJsZSBlbnRyeSAqL1xuXHQgIHZhciBsYXN0X2JpdHMsIGxhc3Rfb3AsIGxhc3RfdmFsOyAvLyBwYWtlZCBcImxhc3RcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuXHQgIHZhciBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXG5cdCAgdmFyIHJldDsgICAgICAgICAgICAgICAgICAgIC8qIHJldHVybiBjb2RlICovXG5cdCAgdmFyIGhidWYgPSBuZXcgdXRpbHMuQnVmOCg0KTsgICAgLyogYnVmZmVyIGZvciBnemlwIGhlYWRlciBjcmMgY2FsY3VsYXRpb24gKi9cblx0ICB2YXIgb3B0cztcblxuXHQgIHZhciBuOyAvLyB0ZW1wb3JhcnkgdmFyIGZvciBORUVEX0JJVFNcblxuXHQgIHZhciBvcmRlciA9IC8qIHBlcm11dGF0aW9uIG9mIGNvZGUgbGVuZ3RocyAqL1xuXHQgICAgWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xuXG5cblx0ICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUgfHwgIXN0cm0ub3V0cHV0IHx8XG5cdCAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSkge1xuXHQgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHQgIH1cblxuXHQgIHN0YXRlID0gc3RybS5zdGF0ZTtcblx0ICBpZiAoc3RhdGUubW9kZSA9PT0gVFlQRSkgeyBzdGF0ZS5tb2RlID0gVFlQRURPOyB9ICAgIC8qIHNraXAgY2hlY2sgKi9cblxuXG5cdCAgLy8tLS0gTE9BRCgpIC0tLVxuXHQgIHB1dCA9IHN0cm0ubmV4dF9vdXQ7XG5cdCAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG5cdCAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuXHQgIG5leHQgPSBzdHJtLm5leHRfaW47XG5cdCAgaW5wdXQgPSBzdHJtLmlucHV0O1xuXHQgIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuXHQgIGhvbGQgPSBzdGF0ZS5ob2xkO1xuXHQgIGJpdHMgPSBzdGF0ZS5iaXRzO1xuXHQgIC8vLS0tXG5cblx0ICBfaW4gPSBoYXZlO1xuXHQgIF9vdXQgPSBsZWZ0O1xuXHQgIHJldCA9IFpfT0s7XG5cblx0ICBpbmZfbGVhdmU6IC8vIGdvdG8gZW11bGF0aW9uXG5cdCAgZm9yICg7Oykge1xuXHQgICAgc3dpdGNoIChzdGF0ZS5tb2RlKSB7XG5cdCAgICBjYXNlIEhFQUQ6XG5cdCAgICAgIGlmIChzdGF0ZS53cmFwID09PSAwKSB7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IFRZUEVETztcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvLz09PSBORUVEQklUUygxNik7XG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgaWYgKChzdGF0ZS53cmFwICYgMikgJiYgaG9sZCA9PT0gMHg4YjFmKSB7ICAvKiBnemlwIGhlYWRlciAqL1xuXHQgICAgICAgIHN0YXRlLmNoZWNrID0gMC8qY3JjMzIoMEwsIFpfTlVMTCwgMCkqLztcblx0ICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcblx0ICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG5cdCAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG5cdCAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG5cdCAgICAgICAgLy89PT0vL1xuXG5cdCAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcblx0ICAgICAgICBob2xkID0gMDtcblx0ICAgICAgICBiaXRzID0gMDtcblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEZMQUdTO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLmZsYWdzID0gMDsgICAgICAgICAgIC8qIGV4cGVjdCB6bGliIGhlYWRlciAqL1xuXHQgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuXHQgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghKHN0YXRlLndyYXAgJiAxKSB8fCAgIC8qIGNoZWNrIGlmIHpsaWIgaGVhZGVyIGFsbG93ZWQgKi9cblx0ICAgICAgICAoKChob2xkICYgMHhmZikvKkJJVFMoOCkqLyA8PCA4KSArIChob2xkID4+IDgpKSAlIDMxKSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAnaW5jb3JyZWN0IGhlYWRlciBjaGVjayc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICE9PSBaX0RFRkxBVEVEKSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAndW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QnO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgLy8tLS0gRFJPUEJJVFMoNCkgLS0tLy9cblx0ICAgICAgaG9sZCA+Pj49IDQ7XG5cdCAgICAgIGJpdHMgLT0gNDtcblx0ICAgICAgLy8tLS0vL1xuXHQgICAgICBsZW4gPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA4O1xuXHQgICAgICBpZiAoc3RhdGUud2JpdHMgPT09IDApIHtcblx0ICAgICAgICBzdGF0ZS53Yml0cyA9IGxlbjtcblx0ICAgICAgfVxuXHQgICAgICBlbHNlIGlmIChsZW4gPiBzdGF0ZS53Yml0cykge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgd2luZG93IHNpemUnO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUuZG1heCA9IDEgPDwgbGVuO1xuXHQgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcXG5cIikpO1xuXHQgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBob2xkICYgMHgyMDAgPyBESUNUSUQgOiBUWVBFO1xuXHQgICAgICAvLz09PSBJTklUQklUUygpO1xuXHQgICAgICBob2xkID0gMDtcblx0ICAgICAgYml0cyA9IDA7XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgYnJlYWs7XG5cdCAgICBjYXNlIEZMQUdTOlxuXHQgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgc3RhdGUuZmxhZ3MgPSBob2xkO1xuXHQgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQpIHtcblx0ICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweGUwMDApIHtcblx0ICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGhlYWRlciBmbGFncyBzZXQnO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcblx0ICAgICAgICBzdGF0ZS5oZWFkLnRleHQgPSAoKGhvbGQgPj4gOCkgJiAxKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcblx0ICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcblx0ICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG5cdCAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG5cdCAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG5cdCAgICAgICAgLy89PT0vL1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09IElOSVRCSVRTKCk7XG5cdCAgICAgIGhvbGQgPSAwO1xuXHQgICAgICBiaXRzID0gMDtcblx0ICAgICAgLy89PT0vL1xuXHQgICAgICBzdGF0ZS5tb2RlID0gVElNRTtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBUSU1FOlxuXHQgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcblx0ICAgICAgICBzdGF0ZS5oZWFkLnRpbWUgPSBob2xkO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuXHQgICAgICAgIC8vPT09IENSQzQoc3RhdGUuY2hlY2ssIGhvbGQpXG5cdCAgICAgICAgaGJ1ZlswXSA9IGhvbGQgJiAweGZmO1xuXHQgICAgICAgIGhidWZbMV0gPSAoaG9sZCA+Pj4gOCkgJiAweGZmO1xuXHQgICAgICAgIGhidWZbMl0gPSAoaG9sZCA+Pj4gMTYpICYgMHhmZjtcblx0ICAgICAgICBoYnVmWzNdID0gKGhvbGQgPj4+IDI0KSAmIDB4ZmY7XG5cdCAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaGJ1ZiwgNCwgMCk7XG5cdCAgICAgICAgLy89PT1cblx0ICAgICAgfVxuXHQgICAgICAvLz09PSBJTklUQklUUygpO1xuXHQgICAgICBob2xkID0gMDtcblx0ICAgICAgYml0cyA9IDA7XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgc3RhdGUubW9kZSA9IE9TO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIE9TOlxuXHQgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcblx0ICAgICAgICBzdGF0ZS5oZWFkLnhmbGFncyA9IChob2xkICYgMHhmZik7XG5cdCAgICAgICAgc3RhdGUuaGVhZC5vcyA9IChob2xkID4+IDgpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuXHQgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuXHQgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcblx0ICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcblx0ICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgIH1cblx0ICAgICAgLy89PT0gSU5JVEJJVFMoKTtcblx0ICAgICAgaG9sZCA9IDA7XG5cdCAgICAgIGJpdHMgPSAwO1xuXHQgICAgICAvLz09PS8vXG5cdCAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBFWExFTjpcblx0ICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG5cdCAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuXHQgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcblx0ICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vPT09Ly9cblx0ICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkO1xuXHQgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG5cdCAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuXHQgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG5cdCAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG5cdCAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcblx0ICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuXHQgICAgICAgICAgLy89PT0vL1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLz09PSBJTklUQklUUygpO1xuXHQgICAgICAgIGhvbGQgPSAwO1xuXHQgICAgICAgIGJpdHMgPSAwO1xuXHQgICAgICAgIC8vPT09Ly9cblx0ICAgICAgfVxuXHQgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG5cdCAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG51bGwvKlpfTlVMTCovO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBFWFRSQTtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBFWFRSQTpcblx0ICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG5cdCAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcblx0ICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cblx0ICAgICAgICBpZiAoY29weSkge1xuXHQgICAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcblx0ICAgICAgICAgICAgbGVuID0gc3RhdGUuaGVhZC5leHRyYV9sZW4gLSBzdGF0ZS5sZW5ndGg7XG5cdCAgICAgICAgICAgIGlmICghc3RhdGUuaGVhZC5leHRyYSkge1xuXHQgICAgICAgICAgICAgIC8vIFVzZSB1bnR5cGVkIGFycmF5IGZvciBtb3JlIGNvbnZlbmllbmQgcHJvY2Vzc2luZyBsYXRlclxuXHQgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEgPSBuZXcgQXJyYXkoc3RhdGUuaGVhZC5leHRyYV9sZW4pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHV0aWxzLmFycmF5U2V0KFxuXHQgICAgICAgICAgICAgIHN0YXRlLmhlYWQuZXh0cmEsXG5cdCAgICAgICAgICAgICAgaW5wdXQsXG5cdCAgICAgICAgICAgICAgbmV4dCxcblx0ICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzXG5cdCAgICAgICAgICAgICAgLy8gLSBubyBuZWVkIGZvciBhZGRpdGlvbmFsIHNpemUgY2hlY2tcblx0ICAgICAgICAgICAgICBjb3B5LFxuXHQgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovXG5cdCAgICAgICAgICAgICAgbGVuXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LFxuXHQgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cblx0ICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcblx0ICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaGF2ZSAtPSBjb3B5O1xuXHQgICAgICAgICAgbmV4dCArPSBjb3B5O1xuXHQgICAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzdGF0ZS5sZW5ndGgpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUubGVuZ3RoID0gMDtcblx0ICAgICAgc3RhdGUubW9kZSA9IE5BTUU7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgTkFNRTpcblx0ICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwODAwKSB7XG5cdCAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgY29weSA9IDA7XG5cdCAgICAgICAgZG8ge1xuXHQgICAgICAgICAgLy8gVE9ETzogMiBvciAxIGJ5dGVzP1xuXHQgICAgICAgICAgbGVuID0gaW5wdXRbbmV4dCArIGNvcHkrK107XG5cdCAgICAgICAgICAvKiB1c2UgY29uc3RhbnQgbGltaXQgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeSAqL1xuXHQgICAgICAgICAgaWYgKHN0YXRlLmhlYWQgJiYgbGVuICYmXG5cdCAgICAgICAgICAgICAgKHN0YXRlLmxlbmd0aCA8IDY1NTM2IC8qc3RhdGUuaGVhZC5uYW1lX21heCovKSkge1xuXHQgICAgICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShsZW4pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gd2hpbGUgKGxlbiAmJiBjb3B5IDwgaGF2ZSk7XG5cblx0ICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcblx0ICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzIoc3RhdGUuY2hlY2ssIGlucHV0LCBjb3B5LCBuZXh0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaGF2ZSAtPSBjb3B5O1xuXHQgICAgICAgIG5leHQgKz0gY29weTtcblx0ICAgICAgICBpZiAobGVuKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICB9XG5cdCAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcblx0ICAgICAgICBzdGF0ZS5oZWFkLm5hbWUgPSBudWxsO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLmxlbmd0aCA9IDA7XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBDT01NRU5UO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIENPTU1FTlQ6XG5cdCAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MTAwMCkge1xuXHQgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgIGNvcHkgPSAwO1xuXHQgICAgICAgIGRvIHtcblx0ICAgICAgICAgIGxlbiA9IGlucHV0W25leHQgKyBjb3B5KytdO1xuXHQgICAgICAgICAgLyogdXNlIGNvbnN0YW50IGxpbWl0IGJlY2F1c2UgaW4ganMgd2Ugc2hvdWxkIG5vdCBwcmVhbGxvY2F0ZSBtZW1vcnkgKi9cblx0ICAgICAgICAgIGlmIChzdGF0ZS5oZWFkICYmIGxlbiAmJlxuXHQgICAgICAgICAgICAgIChzdGF0ZS5sZW5ndGggPCA2NTUzNiAvKnN0YXRlLmhlYWQuY29tbV9tYXgqLykpIHtcblx0ICAgICAgICAgICAgc3RhdGUuaGVhZC5jb21tZW50ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUobGVuKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IHdoaWxlIChsZW4gJiYgY29weSA8IGhhdmUpO1xuXHQgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuXHQgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMihzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBoYXZlIC09IGNvcHk7XG5cdCAgICAgICAgbmV4dCArPSBjb3B5O1xuXHQgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgIH1cblx0ICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuXHQgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XG5cdCAgICAgIH1cblx0ICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgSENSQzpcblx0ICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG5cdCAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuXHQgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcblx0ICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vPT09Ly9cblx0ICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuXHQgICAgICAgICAgc3RybS5tc2cgPSAnaGVhZGVyIGNyYyBtaXNtYXRjaCc7XG5cdCAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG5cdCAgICAgICAgaG9sZCA9IDA7XG5cdCAgICAgICAgYml0cyA9IDA7XG5cdCAgICAgICAgLy89PT0vL1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG5cdCAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gKChzdGF0ZS5mbGFncyA+PiA5KSAmIDEpO1xuXHQgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMCAvKmNyYzMyKDBMLCBaX05VTEwsIDApKi87XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgRElDVElEOlxuXHQgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gWlNXQVAzMihob2xkKTtcblx0ICAgICAgLy89PT0gSU5JVEJJVFMoKTtcblx0ICAgICAgaG9sZCA9IDA7XG5cdCAgICAgIGJpdHMgPSAwO1xuXHQgICAgICAvLz09PS8vXG5cdCAgICAgIHN0YXRlLm1vZGUgPSBESUNUO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIERJQ1Q6XG5cdCAgICAgIGlmIChzdGF0ZS5oYXZlZGljdCA9PT0gMCkge1xuXHQgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cblx0ICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuXHQgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcblx0ICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuXHQgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuXHQgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuXHQgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuXHQgICAgICAgIC8vLS0tXG5cdCAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuXHQgICAgICB9XG5cdCAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9IDEvKmFkbGVyMzIoMEwsIFpfTlVMTCwgMCkqLztcblx0ICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgVFlQRTpcblx0ICAgICAgaWYgKGZsdXNoID09PSBaX0JMT0NLIHx8IGZsdXNoID09PSBaX1RSRUVTKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIFRZUEVETzpcblx0ICAgICAgaWYgKHN0YXRlLmxhc3QpIHtcblx0ICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vXG5cdCAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuXHQgICAgICAgIGJpdHMgLT0gYml0cyAmIDc7XG5cdCAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBDSEVDSztcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvLz09PSBORUVEQklUUygzKTsgKi9cblx0ICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG5cdCAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgIGJpdHMgKz0gODtcblx0ICAgICAgfVxuXHQgICAgICAvLz09PS8vXG5cdCAgICAgIHN0YXRlLmxhc3QgPSAoaG9sZCAmIDB4MDEpLypCSVRTKDEpKi87XG5cdCAgICAgIC8vLS0tIERST1BCSVRTKDEpIC0tLS8vXG5cdCAgICAgIGhvbGQgPj4+PSAxO1xuXHQgICAgICBiaXRzIC09IDE7XG5cdCAgICAgIC8vLS0tLy9cblxuXHQgICAgICBzd2l0Y2ggKChob2xkICYgMHgwMykvKkJJVFMoMikqLykge1xuXHQgICAgICBjYXNlIDA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi9cblx0ICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBzdG9yZWQgYmxvY2slc1xcblwiLFxuXHQgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4ZWQgYmxvY2sgKi9cblx0ICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG5cdCAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZml4ZWQgY29kZXMgYmxvY2slc1xcblwiLFxuXHQgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IExFTl87ICAgICAgICAgICAgIC8qIGRlY29kZSBjb2RlcyAqL1xuXHQgICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykge1xuXHQgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cblx0ICAgICAgICAgIGhvbGQgPj4+PSAyO1xuXHQgICAgICAgICAgYml0cyAtPSAyO1xuXHQgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBicmVhaztcblx0ICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xuXHQgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIGR5bmFtaWMgY29kZXMgYmxvY2slc1xcblwiLFxuXHQgICAgICAgIC8vICAgICAgICBzdGF0ZS5sYXN0ID8gXCIgKGxhc3QpXCIgOiBcIlwiKSk7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlIDM6XG5cdCAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJztcblx0ICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuXHQgICAgICB9XG5cdCAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG5cdCAgICAgIGhvbGQgPj4+PSAyO1xuXHQgICAgICBiaXRzIC09IDI7XG5cdCAgICAgIC8vLS0tLy9cblx0ICAgICAgYnJlYWs7XG5cdCAgICBjYXNlIFNUT1JFRDpcblx0ICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vLyAvKiBnbyB0byBieXRlIGJvdW5kYXJ5ICovXG5cdCAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcblx0ICAgICAgYml0cyAtPSBiaXRzICYgNztcblx0ICAgICAgLy8tLS0vL1xuXHQgICAgICAvLz09PSBORUVEQklUUygzMik7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgaWYgKChob2xkICYgMHhmZmZmKSAhPT0gKChob2xkID4+PiAxNikgXiAweGZmZmYpKSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Rocyc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkICYgMHhmZmZmO1xuXHQgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBsZW5ndGggJXVcXG5cIixcblx0ICAgICAgLy8gICAgICAgIHN0YXRlLmxlbmd0aCkpO1xuXHQgICAgICAvLz09PSBJTklUQklUUygpO1xuXHQgICAgICBob2xkID0gMDtcblx0ICAgICAgYml0cyA9IDA7XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgc3RhdGUubW9kZSA9IENPUFlfO1xuXHQgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgQ09QWV86XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBDT1BZO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIENPUFk6XG5cdCAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG5cdCAgICAgIGlmIChjb3B5KSB7XG5cdCAgICAgICAgaWYgKGNvcHkgPiBoYXZlKSB7IGNvcHkgPSBoYXZlOyB9XG5cdCAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG5cdCAgICAgICAgaWYgKGNvcHkgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgLy8tLS0gem1lbWNweShwdXQsIG5leHQsIGNvcHkpOyAtLS1cblx0ICAgICAgICB1dGlscy5hcnJheVNldChvdXRwdXQsIGlucHV0LCBuZXh0LCBjb3B5LCBwdXQpO1xuXHQgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICBoYXZlIC09IGNvcHk7XG5cdCAgICAgICAgbmV4dCArPSBjb3B5O1xuXHQgICAgICAgIGxlZnQgLT0gY29weTtcblx0ICAgICAgICBwdXQgKz0gY29weTtcblx0ICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuXHQgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcblx0ICAgICAgYnJlYWs7XG5cdCAgICBjYXNlIFRBQkxFOlxuXHQgICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG5cdCAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcblx0ICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICB9XG5cdCAgICAgIC8vPT09Ly9cblx0ICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDI1Nztcblx0ICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cblx0ICAgICAgaG9sZCA+Pj49IDU7XG5cdCAgICAgIGJpdHMgLT0gNTtcblx0ICAgICAgLy8tLS0vL1xuXHQgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDE7XG5cdCAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG5cdCAgICAgIGhvbGQgPj4+PSA1O1xuXHQgICAgICBiaXRzIC09IDU7XG5cdCAgICAgIC8vLS0tLy9cblx0ICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA0O1xuXHQgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuXHQgICAgICBob2xkID4+Pj0gNDtcblx0ICAgICAgYml0cyAtPSA0O1xuXHQgICAgICAvLy0tLS8vXG5cdC8vI2lmbmRlZiBQS1pJUF9CVUdfV09SS0FST1VORFxuXHQgICAgICBpZiAoc3RhdGUubmxlbiA+IDI4NiB8fCBzdGF0ZS5uZGlzdCA+IDMwKSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAndG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMnO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0Ly8jZW5kaWZcblx0ICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICB0YWJsZSBzaXplcyBva1xcblwiKSk7XG5cdCAgICAgIHN0YXRlLmhhdmUgPSAwO1xuXHQgICAgICBzdGF0ZS5tb2RlID0gTEVOTEVOUztcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBMRU5MRU5TOlxuXHQgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IHN0YXRlLm5jb2RlKSB7XG5cdCAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7XG5cdCAgICAgICAgd2hpbGUgKGJpdHMgPCAzKSB7XG5cdCAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuXHQgICAgICAgIC8vLS0tIERST1BCSVRTKDMpIC0tLS8vXG5cdCAgICAgICAgaG9sZCA+Pj49IDM7XG5cdCAgICAgICAgYml0cyAtPSAzO1xuXHQgICAgICAgIC8vLS0tLy9cblx0ICAgICAgfVxuXHQgICAgICB3aGlsZSAoc3RhdGUuaGF2ZSA8IDE5KSB7XG5cdCAgICAgICAgc3RhdGUubGVuc1tvcmRlcltzdGF0ZS5oYXZlKytdXSA9IDA7XG5cdCAgICAgIH1cblx0ICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cblx0ICAgICAgLy9zdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG5cdCAgICAgIC8vc3RhdGUubGVuY29kZSA9IHN0YXRlLm5leHQ7XG5cdCAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuXHQgICAgICBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubGVuZHluO1xuXHQgICAgICBzdGF0ZS5sZW5iaXRzID0gNztcblxuXHQgICAgICBvcHRzID0ge2JpdHM6IHN0YXRlLmxlbmJpdHN9O1xuXHQgICAgICByZXQgPSBpbmZsYXRlX3RhYmxlKENPREVTLCBzdGF0ZS5sZW5zLCAwLCAxOSwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG5cdCAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG5cblx0ICAgICAgaWYgKHJldCkge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSBsZW5ndGhzIHNldCc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIGNvZGUgbGVuZ3RocyBva1xcblwiKSk7XG5cdCAgICAgIHN0YXRlLmhhdmUgPSAwO1xuXHQgICAgICBzdGF0ZS5tb2RlID0gQ09ERUxFTlM7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgQ09ERUxFTlM6XG5cdCAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG5cdCAgICAgICAgZm9yICg7Oykge1xuXHQgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsvKkJJVFMoc3RhdGUubGVuYml0cykqL1xuXHQgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG5cdCAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG5cdCAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cblx0ICAgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG5cdCAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG5cdCAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoaGVyZV92YWwgPCAxNikge1xuXHQgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuXHQgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcblx0ICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuXHQgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gaGVyZV92YWw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgaWYgKGhlcmVfdmFsID09PSAxNikge1xuXHQgICAgICAgICAgICAvLz09PSBORUVEQklUUyhoZXJlLmJpdHMgKyAyKTtcblx0ICAgICAgICAgICAgbiA9IGhlcmVfYml0cyArIDI7XG5cdCAgICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuXHQgICAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcblx0ICAgICAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy89PT0vL1xuXHQgICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG5cdCAgICAgICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG5cdCAgICAgICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuXHQgICAgICAgICAgICAvLy0tLS8vXG5cdCAgICAgICAgICAgIGlmIChzdGF0ZS5oYXZlID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCc7XG5cdCAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBsZW4gPSBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUgLSAxXTtcblx0ICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDMpOy8vQklUUygyKTtcblx0ICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cblx0ICAgICAgICAgICAgaG9sZCA+Pj49IDI7XG5cdCAgICAgICAgICAgIGJpdHMgLT0gMjtcblx0ICAgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZWxzZSBpZiAoaGVyZV92YWwgPT09IDE3KSB7XG5cdCAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDMpO1xuXHQgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMztcblx0ICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgICAgIGJpdHMgKz0gODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cblx0ICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcblx0ICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG5cdCAgICAgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICAgICAgbGVuID0gMDtcblx0ICAgICAgICAgICAgY29weSA9IDMgKyAoaG9sZCAmIDB4MDcpOy8vQklUUygzKTtcblx0ICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cblx0ICAgICAgICAgICAgaG9sZCA+Pj49IDM7XG5cdCAgICAgICAgICAgIGJpdHMgLT0gMztcblx0ICAgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDcpO1xuXHQgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgNztcblx0ICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgICAgIGJpdHMgKz0gODtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cblx0ICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcblx0ICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG5cdCAgICAgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICAgICAgbGVuID0gMDtcblx0ICAgICAgICAgICAgY29weSA9IDExICsgKGhvbGQgJiAweDdmKTsvL0JJVFMoNyk7XG5cdCAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDcpIC0tLS8vXG5cdCAgICAgICAgICAgIGhvbGQgPj4+PSA3O1xuXHQgICAgICAgICAgICBiaXRzIC09IDc7XG5cdCAgICAgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGlmIChzdGF0ZS5oYXZlICsgY29weSA+IHN0YXRlLm5sZW4gKyBzdGF0ZS5uZGlzdCkge1xuXHQgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0Jztcblx0ICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICB3aGlsZSAoY29weS0tKSB7XG5cdCAgICAgICAgICAgIHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSsrXSA9IGxlbjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICAvKiBoYW5kbGUgZXJyb3IgYnJlYWtzIGluIHdoaWxlICovXG5cdCAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBCQUQpIHsgYnJlYWs7IH1cblxuXHQgICAgICAvKiBjaGVjayBmb3IgZW5kLW9mLWJsb2NrIGNvZGUgKGJldHRlciBoYXZlIG9uZSkgKi9cblx0ICAgICAgaWYgKHN0YXRlLmxlbnNbMjU2XSA9PT0gMCkge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9jayc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXG5cdCAgICAgIC8qIGJ1aWxkIGNvZGUgdGFibGVzIC0tIG5vdGU6IGRvIG5vdCBjaGFuZ2UgdGhlIGxlbmJpdHMgb3IgZGlzdGJpdHNcblx0ICAgICAgICAgdmFsdWVzIGhlcmUgKDkgYW5kIDYpIHdpdGhvdXQgcmVhZGluZyB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuXHQgICAgICAgICBjb25jZXJuaW5nIHRoZSBFTk9VR0ggY29uc3RhbnRzLCB3aGljaCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzICovXG5cdCAgICAgIHN0YXRlLmxlbmJpdHMgPSA5O1xuXG5cdCAgICAgIG9wdHMgPSB7Yml0czogc3RhdGUubGVuYml0c307XG5cdCAgICAgIHJldCA9IGluZmxhdGVfdGFibGUoTEVOUywgc3RhdGUubGVucywgMCwgc3RhdGUubmxlbiwgc3RhdGUubGVuY29kZSwgMCwgc3RhdGUud29yaywgb3B0cyk7XG5cdCAgICAgIC8vIFdlIGhhdmUgc2VwYXJhdGUgdGFibGVzICYgbm8gcG9pbnRlcnMuIDIgY29tbWVudGVkIGxpbmVzIGJlbG93IG5vdCBuZWVkZWQuXG5cdCAgICAgIC8vIHN0YXRlLm5leHRfaW5kZXggPSBvcHRzLnRhYmxlX2luZGV4O1xuXHQgICAgICBzdGF0ZS5sZW5iaXRzID0gb3B0cy5iaXRzO1xuXHQgICAgICAvLyBzdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcblxuXHQgICAgICBpZiAocmV0KSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0Jztcblx0ICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cblx0ICAgICAgc3RhdGUuZGlzdGJpdHMgPSA2O1xuXHQgICAgICAvL3N0YXRlLmRpc3Rjb2RlLmNvcHkoc3RhdGUuY29kZXMpO1xuXHQgICAgICAvLyBTd2l0Y2ggdG8gdXNlIGR5bmFtaWMgdGFibGVcblx0ICAgICAgc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5kaXN0ZHluO1xuXHQgICAgICBvcHRzID0ge2JpdHM6IHN0YXRlLmRpc3RiaXRzfTtcblx0ICAgICAgcmV0ID0gaW5mbGF0ZV90YWJsZShESVNUUywgc3RhdGUubGVucywgc3RhdGUubmxlbiwgc3RhdGUubmRpc3QsIHN0YXRlLmRpc3Rjb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcblx0ICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cblx0ICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG5cdCAgICAgIHN0YXRlLmRpc3RiaXRzID0gb3B0cy5iaXRzO1xuXHQgICAgICAvLyBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLm5leHQ7XG5cblx0ICAgICAgaWYgKHJldCkge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2VzIHNldCc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICAvL1RyYWNldigoc3RkZXJyLCAnaW5mbGF0ZTogICAgICAgY29kZXMgb2tcXG4nKSk7XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBMRU5fO1xuXHQgICAgICBpZiAoZmx1c2ggPT09IFpfVFJFRVMpIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgTEVOXzpcblx0ICAgICAgc3RhdGUubW9kZSA9IExFTjtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBMRU46XG5cdCAgICAgIGlmIChoYXZlID49IDYgJiYgbGVmdCA+PSAyNTgpIHtcblx0ICAgICAgICAvLy0tLSBSRVNUT1JFKCkgLS0tXG5cdCAgICAgICAgc3RybS5uZXh0X291dCA9IHB1dDtcblx0ICAgICAgICBzdHJtLmF2YWlsX291dCA9IGxlZnQ7XG5cdCAgICAgICAgc3RybS5uZXh0X2luID0gbmV4dDtcblx0ICAgICAgICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcblx0ICAgICAgICBzdGF0ZS5ob2xkID0gaG9sZDtcblx0ICAgICAgICBzdGF0ZS5iaXRzID0gYml0cztcblx0ICAgICAgICAvLy0tLVxuXHQgICAgICAgIGluZmxhdGVfZmFzdChzdHJtLCBfb3V0KTtcblx0ICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG5cdCAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDtcblx0ICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcblx0ICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG5cdCAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcblx0ICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG5cdCAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG5cdCAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG5cdCAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG5cdCAgICAgICAgLy8tLS1cblxuXHQgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7XG5cdCAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLmJhY2sgPSAwO1xuXHQgICAgICBmb3IgKDs7KSB7XG5cdCAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtMSldOyAgLypCSVRTKHN0YXRlLmxlbmJpdHMpKi9cblx0ICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcblx0ICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG5cdCAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG5cdCAgICAgICAgaWYgKGhlcmVfYml0cyA8PSBiaXRzKSB7IGJyZWFrOyB9XG5cdCAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuXHQgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcblx0ICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgLy8tLS0vL1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChoZXJlX29wICYmIChoZXJlX29wICYgMHhmMCkgPT09IDApIHtcblx0ICAgICAgICBsYXN0X2JpdHMgPSBoZXJlX2JpdHM7XG5cdCAgICAgICAgbGFzdF9vcCA9IGhlcmVfb3A7XG5cdCAgICAgICAgbGFzdF92YWwgPSBoZXJlX3ZhbDtcblx0ICAgICAgICBmb3IgKDs7KSB7XG5cdCAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtsYXN0X3ZhbCArXG5cdCAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0xKSkvKkJJVFMobGFzdC5iaXRzICsgbGFzdC5vcCkqLyA+PiBsYXN0X2JpdHMpXTtcblx0ICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuXHQgICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuXHQgICAgICAgICAgaGVyZV92YWwgPSBoZXJlICYgMHhmZmZmO1xuXG5cdCAgICAgICAgICBpZiAoKGxhc3RfYml0cyArIGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuXHQgICAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuXHQgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG5cdCAgICAgICAgICBoYXZlLS07XG5cdCAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcblx0ICAgICAgICAgIGJpdHMgKz0gODtcblx0ICAgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8tLS0gRFJPUEJJVFMobGFzdC5iaXRzKSAtLS0vL1xuXHQgICAgICAgIGhvbGQgPj4+PSBsYXN0X2JpdHM7XG5cdCAgICAgICAgYml0cyAtPSBsYXN0X2JpdHM7XG5cdCAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgIHN0YXRlLmJhY2sgKz0gbGFzdF9iaXRzO1xuXHQgICAgICB9XG5cdCAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cblx0ICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcblx0ICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG5cdCAgICAgIC8vLS0tLy9cblx0ICAgICAgc3RhdGUuYmFjayArPSBoZXJlX2JpdHM7XG5cdCAgICAgIHN0YXRlLmxlbmd0aCA9IGhlcmVfdmFsO1xuXHQgICAgICBpZiAoaGVyZV9vcCA9PT0gMCkge1xuXHQgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBoZXJlLnZhbCA+PSAweDIwICYmIGhlcmUudmFsIDwgMHg3ZiA/XG5cdCAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsICclYydcXG5cIiA6XG5cdCAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBMSVQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGhlcmVfb3AgJiAzMikge1xuXHQgICAgICAgIC8vVHJhY2V2digoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgICAgZW5kIG9mIGJsb2NrXFxuXCIpKTtcblx0ICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBzdGF0ZS5leHRyYSA9IGhlcmVfb3AgJiAxNTtcblx0ICAgICAgc3RhdGUubW9kZSA9IExFTkVYVDtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBMRU5FWFQ6XG5cdCAgICAgIGlmIChzdGF0ZS5leHRyYSkge1xuXHQgICAgICAgIC8vPT09IE5FRURCSVRTKHN0YXRlLmV4dHJhKTtcblx0ICAgICAgICBuID0gc3RhdGUuZXh0cmE7XG5cdCAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG5cdCAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgc3RhdGUubGVuZ3RoICs9IGhvbGQgJiAoKDEgPDwgc3RhdGUuZXh0cmEpIC0xKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcblx0ICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cblx0ICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG5cdCAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcblx0ICAgICAgICAvLy0tLS8vXG5cdCAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcblx0ICAgICAgfVxuXHQgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcblx0ICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuXHQgICAgICBzdGF0ZS5tb2RlID0gRElTVDtcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgY2FzZSBESVNUOlxuXHQgICAgICBmb3IgKDs7KSB7XG5cdCAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0xKV07LypCSVRTKHN0YXRlLmRpc3RiaXRzKSovXG5cdCAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG5cdCAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuXHQgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuXHQgICAgICAgIGlmICgoaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG5cdCAgICAgICAgLy8tLS0gUFVMTEJZVEUoKSAtLS0vL1xuXHQgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcblx0ICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgLy8tLS0vL1xuXHQgICAgICB9XG5cdCAgICAgIGlmICgoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG5cdCAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuXHQgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuXHQgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG5cdCAgICAgICAgZm9yICg7Oykge1xuXHQgICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2xhc3RfdmFsICtcblx0ICAgICAgICAgICAgICAgICAgKChob2xkICYgKCgxIDw8IChsYXN0X2JpdHMgKyBsYXN0X29wKSkgLTEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuXHQgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG5cdCAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG5cdCAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cblx0ICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG5cdCAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG5cdCAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgICAgLy8tLS0vL1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG5cdCAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcblx0ICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcblx0ICAgICAgICAvLy0tLS8vXG5cdCAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG5cdCAgICAgIH1cblx0ICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuXHQgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuXHQgICAgICBiaXRzIC09IGhlcmVfYml0cztcblx0ICAgICAgLy8tLS0vL1xuXHQgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcblx0ICAgICAgaWYgKGhlcmVfb3AgJiA2NCkge1xuXHQgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgY29kZSc7XG5cdCAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXHQgICAgICBzdGF0ZS5vZmZzZXQgPSBoZXJlX3ZhbDtcblx0ICAgICAgc3RhdGUuZXh0cmEgPSAoaGVyZV9vcCkgJiAxNTtcblx0ICAgICAgc3RhdGUubW9kZSA9IERJU1RFWFQ7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgRElTVEVYVDpcblx0ICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG5cdCAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuXHQgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcblx0ICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcblx0ICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG5cdCAgICAgICAgICBiaXRzICs9IDg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vPT09Ly9cblx0ICAgICAgICBzdGF0ZS5vZmZzZXQgKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLTEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuXHQgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuXHQgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcblx0ICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuXHQgICAgICAgIC8vLS0tLy9cblx0ICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuXHQgICAgICB9XG5cdC8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG5cdCAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBzdGF0ZS5kbWF4KSB7XG5cdCAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuXHQgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0Ly8jZW5kaWZcblx0ICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBzdGF0ZS5vZmZzZXQpKTtcblx0ICAgICAgc3RhdGUubW9kZSA9IE1BVENIO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIE1BVENIOlxuXHQgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgY29weSA9IF9vdXQgLSBsZWZ0O1xuXHQgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gY29weSkgeyAgICAgICAgIC8qIGNvcHkgZnJvbSB3aW5kb3cgKi9cblx0ICAgICAgICBjb3B5ID0gc3RhdGUub2Zmc2V0IC0gY29weTtcblx0ICAgICAgICBpZiAoY29weSA+IHN0YXRlLndoYXZlKSB7XG5cdCAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuXHQgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayc7XG5cdCAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXHQvLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmFpbHRzLFxuXHQvLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cdC8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuXHQvLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcblx0Ly8gICAgICAgICAgY29weSAtPSBzdGF0ZS53aGF2ZTtcblx0Ly8gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuXHQvLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cblx0Ly8gICAgICAgICAgbGVmdCAtPSBjb3B5O1xuXHQvLyAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcblx0Ly8gICAgICAgICAgZG8ge1xuXHQvLyAgICAgICAgICAgIG91dHB1dFtwdXQrK10gPSAwO1xuXHQvLyAgICAgICAgICB9IHdoaWxlICgtLWNvcHkpO1xuXHQvLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cblx0Ly8gICAgICAgICAgYnJlYWs7XG5cdC8vI2VuZGlmXG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud25leHQpIHtcblx0ICAgICAgICAgIGNvcHkgLT0gc3RhdGUud25leHQ7XG5cdCAgICAgICAgICBmcm9tID0gc3RhdGUud3NpemUgLSBjb3B5O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgIGZyb20gPSBzdGF0ZS53bmV4dCAtIGNvcHk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjb3B5ID4gc3RhdGUubGVuZ3RoKSB7IGNvcHkgPSBzdGF0ZS5sZW5ndGg7IH1cblx0ICAgICAgICBmcm9tX3NvdXJjZSA9IHN0YXRlLndpbmRvdztcblx0ICAgICAgfVxuXHQgICAgICBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjb3B5IGZyb20gb3V0cHV0ICovXG5cdCAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG5cdCAgICAgICAgZnJvbSA9IHB1dCAtIHN0YXRlLm9mZnNldDtcblx0ICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChjb3B5ID4gbGVmdCkgeyBjb3B5ID0gbGVmdDsgfVxuXHQgICAgICBsZWZ0IC09IGNvcHk7XG5cdCAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuXHQgICAgICBkbyB7XG5cdCAgICAgICAgb3V0cHV0W3B1dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG5cdCAgICAgIH0gd2hpbGUgKC0tY29weSk7XG5cdCAgICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsgc3RhdGUubW9kZSA9IExFTjsgfVxuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgTElUOlxuXHQgICAgICBpZiAobGVmdCA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgb3V0cHV0W3B1dCsrXSA9IHN0YXRlLmxlbmd0aDtcblx0ICAgICAgbGVmdC0tO1xuXHQgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuXHQgICAgICBicmVhaztcblx0ICAgIGNhc2UgQ0hFQ0s6XG5cdCAgICAgIGlmIChzdGF0ZS53cmFwKSB7XG5cdCAgICAgICAgLy89PT0gTkVFREJJVFMoMzIpO1xuXHQgICAgICAgIHdoaWxlIChiaXRzIDwgMzIpIHtcblx0ICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuXHQgICAgICAgICAgaGF2ZS0tO1xuXHQgICAgICAgICAgLy8gVXNlICd8JyBpbnNkZWFkIG9mICcrJyB0byBtYWtlIHN1cmUgdGhhdCByZXN1bHQgaXMgc2lnbmVkXG5cdCAgICAgICAgICBob2xkIHw9IGlucHV0W25leHQrK10gPDwgYml0cztcblx0ICAgICAgICAgIGJpdHMgKz0gODtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy89PT0vL1xuXHQgICAgICAgIF9vdXQgLT0gbGVmdDtcblx0ICAgICAgICBzdHJtLnRvdGFsX291dCArPSBfb3V0O1xuXHQgICAgICAgIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG5cdCAgICAgICAgaWYgKF9vdXQpIHtcblx0ICAgICAgICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS5jaGVjayA9XG5cdCAgICAgICAgICAgICAgLypVUERBVEUoc3RhdGUuY2hlY2ssIHB1dCAtIF9vdXQsIF9vdXQpOyovXG5cdCAgICAgICAgICAgICAgKHN0YXRlLmZsYWdzID8gY3JjMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgcHV0IC0gX291dCkgOiBhZGxlcjMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuXHQgICAgICAgIH1cblx0ICAgICAgICBfb3V0ID0gbGVmdDtcblx0ICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCBaU1dBUDMyIHJldHVybnMgc2lnbmVkIHRvb1xuXHQgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogWlNXQVAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XG5cdCAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG5cdCAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG5cdCAgICAgICAgaG9sZCA9IDA7XG5cdCAgICAgICAgYml0cyA9IDA7XG5cdCAgICAgICAgLy89PT0vL1xuXHQgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7XG5cdCAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblx0ICAgIGNhc2UgTEVOR1RIOlxuXHQgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xuXHQgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcblx0ICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG5cdCAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cblx0ICAgICAgICAgIGhhdmUtLTtcblx0ICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuXHQgICAgICAgICAgYml0cyArPSA4O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7XG5cdCAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrJztcblx0ICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcblx0ICAgICAgICBob2xkID0gMDtcblx0ICAgICAgICBiaXRzID0gMDtcblx0ICAgICAgICAvLz09PS8vXG5cdCAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGxlbmd0aCBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuXHQgICAgICB9XG5cdCAgICAgIHN0YXRlLm1vZGUgPSBET05FO1xuXHQgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cdCAgICBjYXNlIERPTkU6XG5cdCAgICAgIHJldCA9IFpfU1RSRUFNX0VORDtcblx0ICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuXHQgICAgY2FzZSBCQUQ6XG5cdCAgICAgIHJldCA9IFpfREFUQV9FUlJPUjtcblx0ICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuXHQgICAgY2FzZSBNRU06XG5cdCAgICAgIHJldHVybiBaX01FTV9FUlJPUjtcblx0ICAgIGNhc2UgU1lOQzpcblx0ICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuXHQgICAgZGVmYXVsdDpcblx0ICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8vIGluZl9sZWF2ZSA8LSBoZXJlIGlzIHJlYWwgcGxhY2UgZm9yIFwiZ290byBpbmZfbGVhdmVcIiwgZW11bGF0ZWQgdmlhIFwiYnJlYWsgaW5mX2xlYXZlXCJcblxuXHQgIC8qXG5cdCAgICAgUmV0dXJuIGZyb20gaW5mbGF0ZSgpLCB1cGRhdGluZyB0aGUgdG90YWwgY291bnRzIGFuZCB0aGUgY2hlY2sgdmFsdWUuXG5cdCAgICAgSWYgdGhlcmUgd2FzIG5vIHByb2dyZXNzIGR1cmluZyB0aGUgaW5mbGF0ZSgpIGNhbGwsIHJldHVybiBhIGJ1ZmZlclxuXHQgICAgIGVycm9yLiAgQ2FsbCB1cGRhdGV3aW5kb3coKSB0byBjcmVhdGUgYW5kL29yIHVwZGF0ZSB0aGUgd2luZG93IHN0YXRlLlxuXHQgICAgIE5vdGU6IGEgbWVtb3J5IGVycm9yIGZyb20gaW5mbGF0ZSgpIGlzIG5vbi1yZWNvdmVyYWJsZS5cblx0ICAgKi9cblxuXHQgIC8vLS0tIFJFU1RPUkUoKSAtLS1cblx0ICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuXHQgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcblx0ICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuXHQgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuXHQgIHN0YXRlLmhvbGQgPSBob2xkO1xuXHQgIHN0YXRlLmJpdHMgPSBiaXRzO1xuXHQgIC8vLS0tXG5cblx0ICBpZiAoc3RhdGUud3NpemUgfHwgKF9vdXQgIT09IHN0cm0uYXZhaWxfb3V0ICYmIHN0YXRlLm1vZGUgPCBCQUQgJiZcblx0ICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIKSkpIHtcblx0ICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIHtcblx0ICAgICAgc3RhdGUubW9kZSA9IE1FTTtcblx0ICAgICAgcmV0dXJuIFpfTUVNX0VSUk9SO1xuXHQgICAgfVxuXHQgIH1cblx0ICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcblx0ICBfb3V0IC09IHN0cm0uYXZhaWxfb3V0O1xuXHQgIHN0cm0udG90YWxfaW4gKz0gX2luO1xuXHQgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG5cdCAgc3RhdGUudG90YWwgKz0gX291dDtcblx0ICBpZiAoc3RhdGUud3JhcCAmJiBfb3V0KSB7XG5cdCAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG5cdCAgICAgIChzdGF0ZS5mbGFncyA/IGNyYzMyKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzIoc3RhdGUuY2hlY2ssIG91dHB1dCwgX291dCwgc3RybS5uZXh0X291dCAtIF9vdXQpKTtcblx0ICB9XG5cdCAgc3RybS5kYXRhX3R5cGUgPSBzdGF0ZS5iaXRzICsgKHN0YXRlLmxhc3QgPyA2NCA6IDApICtcblx0ICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gVFlQRSA/IDEyOCA6IDApICtcblx0ICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuXHQgIGlmICgoKF9pbiA9PT0gMCAmJiBfb3V0ID09PSAwKSB8fCBmbHVzaCA9PT0gWl9GSU5JU0gpICYmIHJldCA9PT0gWl9PSykge1xuXHQgICAgcmV0ID0gWl9CVUZfRVJST1I7XG5cdCAgfVxuXHQgIHJldHVybiByZXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBpbmZsYXRlRW5kKHN0cm0pIHtcblxuXHQgIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSAvKnx8IHN0cm0tPnpmcmVlID09IChmcmVlX2Z1bmMpMCovKSB7XG5cdCAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cdCAgfVxuXG5cdCAgdmFyIHN0YXRlID0gc3RybS5zdGF0ZTtcblx0ICBpZiAoc3RhdGUud2luZG93KSB7XG5cdCAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuXHQgIH1cblx0ICBzdHJtLnN0YXRlID0gbnVsbDtcblx0ICByZXR1cm4gWl9PSztcblx0fVxuXG5cdGZ1bmN0aW9uIGluZmxhdGVHZXRIZWFkZXIoc3RybSwgaGVhZCkge1xuXHQgIHZhciBzdGF0ZTtcblxuXHQgIC8qIGNoZWNrIHN0YXRlICovXG5cdCAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUjsgfVxuXHQgIHN0YXRlID0gc3RybS5zdGF0ZTtcblx0ICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1I7IH1cblxuXHQgIC8qIHNhdmUgaGVhZGVyIHN0cnVjdHVyZSAqL1xuXHQgIHN0YXRlLmhlYWQgPSBoZWFkO1xuXHQgIGhlYWQuZG9uZSA9IGZhbHNlO1xuXHQgIHJldHVybiBaX09LO1xuXHR9XG5cblxuXHRleHBvcnRzLmluZmxhdGVSZXNldCA9IGluZmxhdGVSZXNldDtcblx0ZXhwb3J0cy5pbmZsYXRlUmVzZXQyID0gaW5mbGF0ZVJlc2V0Mjtcblx0ZXhwb3J0cy5pbmZsYXRlUmVzZXRLZWVwID0gaW5mbGF0ZVJlc2V0S2VlcDtcblx0ZXhwb3J0cy5pbmZsYXRlSW5pdCA9IGluZmxhdGVJbml0O1xuXHRleHBvcnRzLmluZmxhdGVJbml0MiA9IGluZmxhdGVJbml0Mjtcblx0ZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcblx0ZXhwb3J0cy5pbmZsYXRlRW5kID0gaW5mbGF0ZUVuZDtcblx0ZXhwb3J0cy5pbmZsYXRlR2V0SGVhZGVyID0gaW5mbGF0ZUdldEhlYWRlcjtcblx0ZXhwb3J0cy5pbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuXHQvKiBOb3QgaW1wbGVtZW50ZWRcblx0ZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5O1xuXHRleHBvcnRzLmluZmxhdGVHZXREaWN0aW9uYXJ5ID0gaW5mbGF0ZUdldERpY3Rpb25hcnk7XG5cdGV4cG9ydHMuaW5mbGF0ZU1hcmsgPSBpbmZsYXRlTWFyaztcblx0ZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7XG5cdGV4cG9ydHMuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcblx0ZXhwb3J0cy5pbmZsYXRlU3luYyA9IGluZmxhdGVTeW5jO1xuXHRleHBvcnRzLmluZmxhdGVTeW5jUG9pbnQgPSBpbmZsYXRlU3luY1BvaW50O1xuXHRleHBvcnRzLmluZmxhdGVVbmRlcm1pbmUgPSBpbmZsYXRlVW5kZXJtaW5lO1xuXHQqL1xuXHR9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjI3LFwiLi9hZGxlcjMyXCI6MjksXCIuL2NyYzMyXCI6MzEsXCIuL2luZmZhc3RcIjozNCxcIi4vaW5mdHJlZXNcIjozNn1dLDM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvY29tbW9uJyk7XG5cblx0dmFyIE1BWEJJVFMgPSAxNTtcblx0dmFyIEVOT1VHSF9MRU5TID0gODUyO1xuXHR2YXIgRU5PVUdIX0RJU1RTID0gNTkyO1xuXHQvL3ZhciBFTk9VR0ggPSAoRU5PVUdIX0xFTlMrRU5PVUdIX0RJU1RTKTtcblxuXHR2YXIgQ09ERVMgPSAwO1xuXHR2YXIgTEVOUyA9IDE7XG5cdHZhciBESVNUUyA9IDI7XG5cblx0dmFyIGxiYXNlID0gWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuXHQgIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTMsIDE1LCAxNywgMTksIDIzLCAyNywgMzEsXG5cdCAgMzUsIDQzLCA1MSwgNTksIDY3LCA4MywgOTksIDExNSwgMTMxLCAxNjMsIDE5NSwgMjI3LCAyNTgsIDAsIDBcblx0XTtcblxuXHR2YXIgbGV4dCA9IFsgLyogTGVuZ3RoIGNvZGVzIDI1Ny4uMjg1IGV4dHJhICovXG5cdCAgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE3LCAxNywgMTgsIDE4LCAxOCwgMTgsXG5cdCAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuXHRdO1xuXG5cdHZhciBkYmFzZSA9IFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuXHQgIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5Myxcblx0ICAyNTcsIDM4NSwgNTEzLCA3NjksIDEwMjUsIDE1MzcsIDIwNDksIDMwNzMsIDQwOTcsIDYxNDUsXG5cdCAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXHRdO1xuXG5cdHZhciBkZXh0ID0gWyAvKiBEaXN0YW5jZSBjb2RlcyAwLi4yOSBleHRyYSAqL1xuXHQgIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuXHQgIDIzLCAyMywgMjQsIDI0LCAyNSwgMjUsIDI2LCAyNiwgMjcsIDI3LFxuXHQgIDI4LCAyOCwgMjksIDI5LCA2NCwgNjRcblx0XTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZmxhdGVfdGFibGUodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cylcblx0e1xuXHQgIHZhciBiaXRzID0gb3B0cy5iaXRzO1xuXHQgICAgICAvL2hlcmUgPSBvcHRzLmhlcmU7IC8qIHRhYmxlIGVudHJ5IGZvciBkdXBsaWNhdGlvbiAqL1xuXG5cdCAgdmFyIGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cblx0ICB2YXIgc3ltID0gMDsgICAgICAgICAgICAgICAvKiBpbmRleCBvZiBjb2RlIHN5bWJvbHMgKi9cblx0ICB2YXIgbWluID0gMCwgbWF4ID0gMDsgICAgICAgICAgLyogbWluaW11bSBhbmQgbWF4aW11bSBjb2RlIGxlbmd0aHMgKi9cblx0ICB2YXIgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuXHQgIHZhciBjdXJyID0gMDsgICAgICAgICAgICAgIC8qIG51bWJlciBvZiBpbmRleCBiaXRzIGZvciBjdXJyZW50IHRhYmxlICovXG5cdCAgdmFyIGRyb3AgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBiaXRzIHRvIGRyb3AgZm9yIHN1Yi10YWJsZSAqL1xuXHQgIHZhciBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cblx0ICB2YXIgdXNlZCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGVudHJpZXMgaW4gdGFibGUgdXNlZCAqL1xuXHQgIHZhciBodWZmID0gMDsgICAgICAgICAgICAgIC8qIEh1ZmZtYW4gY29kZSAqL1xuXHQgIHZhciBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuXHQgIHZhciBmaWxsOyAgICAgICAgICAgICAgLyogaW5kZXggZm9yIHJlcGxpY2F0aW5nIGVudHJpZXMgKi9cblx0ICB2YXIgbG93OyAgICAgICAgICAgICAgIC8qIGxvdyBiaXRzIGZvciBjdXJyZW50IHJvb3QgZW50cnkgKi9cblx0ICB2YXIgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cblx0ICB2YXIgbmV4dDsgICAgICAgICAgICAgLyogbmV4dCBhdmFpbGFibGUgc3BhY2UgaW4gdGFibGUgKi9cblx0ICB2YXIgYmFzZSA9IG51bGw7ICAgICAvKiBiYXNlIHZhbHVlIHRhYmxlIHRvIHVzZSAqL1xuXHQgIHZhciBiYXNlX2luZGV4ID0gMDtcblx0Ly8gIHZhciBzaG9leHRyYTsgICAgLyogZXh0cmEgYml0cyB0YWJsZSB0byB1c2UgKi9cblx0ICB2YXIgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogdXNlIGJhc2UgYW5kIGV4dHJhIGZvciBzeW1ib2wgPiBlbmQgKi9cblx0ICB2YXIgY291bnQgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUysxKTsgLy9bTUFYQklUUysxXTsgICAgLyogbnVtYmVyIG9mIGNvZGVzIG9mIGVhY2ggbGVuZ3RoICovXG5cdCAgdmFyIG9mZnMgPSBuZXcgdXRpbHMuQnVmMTYoTUFYQklUUysxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG5cdCAgdmFyIGV4dHJhID0gbnVsbDtcblx0ICB2YXIgZXh0cmFfaW5kZXggPSAwO1xuXG5cdCAgdmFyIGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XG5cblx0ICAvKlxuXHQgICBQcm9jZXNzIGEgc2V0IG9mIGNvZGUgbGVuZ3RocyB0byBjcmVhdGUgYSBjYW5vbmljYWwgSHVmZm1hbiBjb2RlLiAgVGhlXG5cdCAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxuXHQgICBzeW1ib2xzIDAuLmNvZGVzLTEuICBUaGUgSHVmZm1hbiBjb2RlIGlzIGdlbmVyYXRlZCBieSBmaXJzdCBzb3J0aW5nIHRoZVxuXHQgICBzeW1ib2xzIGJ5IGxlbmd0aCBmcm9tIHNob3J0IHRvIGxvbmcsIGFuZCByZXRhaW5pbmcgdGhlIHN5bWJvbCBvcmRlclxuXHQgICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXG5cdCAgIGZvciB0aGUgZmlyc3QgY29kZSBvZiB0aGUgc2hvcnRlc3QgbGVuZ3RoLCBhbmQgdGhlIGNvZGVzIGFyZSBpbnRlZ2VyXG5cdCAgIGluY3JlbWVudHMgZm9yIHRoZSBzYW1lIGxlbmd0aCwgYW5kIHplcm9zIGFyZSBhcHBlbmRlZCBhcyB0aGUgbGVuZ3RoXG5cdCAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcblx0ICAgZnJvbSB0aGVpciBtb3JlIG5hdHVyYWwgaW50ZWdlciBpbmNyZW1lbnQgb3JkZXJpbmcsIGFuZCBzbyB3aGVuIHRoZVxuXHQgICBkZWNvZGluZyB0YWJsZXMgYXJlIGJ1aWx0IGluIHRoZSBsYXJnZSBsb29wIGJlbG93LCB0aGUgaW50ZWdlciBjb2Rlc1xuXHQgICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxuXG5cdCAgIFRoaXMgcm91dGluZSBhc3N1bWVzLCBidXQgZG9lcyBub3QgY2hlY2ssIHRoYXQgYWxsIG9mIHRoZSBlbnRyaWVzIGluXG5cdCAgIGxlbnNbXSBhcmUgaW4gdGhlIHJhbmdlIDAuLk1BWEJJVFMuICBUaGUgY2FsbGVyIG11c3QgYXNzdXJlIHRoaXMuXG5cdCAgIDEuLk1BWEJJVFMgaXMgaW50ZXJwcmV0ZWQgYXMgdGhhdCBjb2RlIGxlbmd0aC4gIHplcm8gbWVhbnMgdGhhdCB0aGF0XG5cdCAgIHN5bWJvbCBkb2VzIG5vdCBvY2N1ciBpbiB0aGlzIGNvZGUuXG5cblx0ICAgVGhlIGNvZGVzIGFyZSBzb3J0ZWQgYnkgY29tcHV0aW5nIGEgY291bnQgb2YgY29kZXMgZm9yIGVhY2ggbGVuZ3RoLFxuXHQgICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcblx0ICAgc29ydGVkIHRhYmxlLCBhbmQgdGhlbiBlbnRlcmluZyB0aGUgc3ltYm9scyBpbiBvcmRlciBpbiB0aGUgc29ydGVkXG5cdCAgIHRhYmxlLiAgVGhlIHNvcnRlZCB0YWJsZSBpcyB3b3JrW10sIHdpdGggdGhhdCBzcGFjZSBiZWluZyBwcm92aWRlZCBieVxuXHQgICB0aGUgY2FsbGVyLlxuXG5cdCAgIFRoZSBsZW5ndGggY291bnRzIGFyZSB1c2VkIGZvciBvdGhlciBwdXJwb3NlcyBhcyB3ZWxsLCBpLmUuIGZpbmRpbmdcblx0ICAgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gbGVuZ3RoIGNvZGVzLCBkZXRlcm1pbmluZyBpZiB0aGVyZSBhcmUgYW55XG5cdCAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXG5cdCAgIGF0IGxlbmd0aCBjb3VudHMgdG8gZGV0ZXJtaW5lIHN1Yi10YWJsZSBzaXplcyB3aGVuIGJ1aWxkaW5nIHRoZVxuXHQgICBkZWNvZGluZyB0YWJsZXMuXG5cdCAgICovXG5cblx0ICAvKiBhY2N1bXVsYXRlIGxlbmd0aHMgZm9yIGNvZGVzIChhc3N1bWVzIGxlbnNbXSBhbGwgaW4gMC4uTUFYQklUUykgKi9cblx0ICBmb3IgKGxlbiA9IDA7IGxlbiA8PSBNQVhCSVRTOyBsZW4rKykge1xuXHQgICAgY291bnRbbGVuXSA9IDA7XG5cdCAgfVxuXHQgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG5cdCAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrO1xuXHQgIH1cblxuXHQgIC8qIGJvdW5kIGNvZGUgbGVuZ3RocywgZm9yY2Ugcm9vdCB0byBiZSB3aXRoaW4gY29kZSBsZW5ndGhzICovXG5cdCAgcm9vdCA9IGJpdHM7XG5cdCAgZm9yIChtYXggPSBNQVhCSVRTOyBtYXggPj0gMTsgbWF4LS0pIHtcblx0ICAgIGlmIChjb3VudFttYXhdICE9PSAwKSB7IGJyZWFrOyB9XG5cdCAgfVxuXHQgIGlmIChyb290ID4gbWF4KSB7XG5cdCAgICByb290ID0gbWF4O1xuXHQgIH1cblx0ICBpZiAobWF4ID09PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgLyogbm8gc3ltYm9scyB0byBjb2RlIGF0IGFsbCAqL1xuXHQgICAgLy90YWJsZS5vcFtvcHRzLnRhYmxlX2luZGV4XSA9IDY0OyAgLy9oZXJlLm9wID0gKHZhciBjaGFyKTY0OyAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG5cdCAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxOyAgIC8vaGVyZS5iaXRzID0gKHZhciBjaGFyKTE7XG5cdCAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDsgICAvL2hlcmUudmFsID0gKHZhciBzaG9ydCkwO1xuXHQgICAgdGFibGVbdGFibGVfaW5kZXgrK10gPSAoMSA8PCAyNCkgfCAoNjQgPDwgMTYpIHwgMDtcblxuXG5cdCAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7XG5cdCAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxO1xuXHQgICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7XG5cdCAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG5cdCAgICBvcHRzLmJpdHMgPSAxO1xuXHQgICAgcmV0dXJuIDA7ICAgICAvKiBubyBzeW1ib2xzLCBidXQgd2FpdCBmb3IgZGVjb2RpbmcgdG8gcmVwb3J0IGVycm9yICovXG5cdCAgfVxuXHQgIGZvciAobWluID0gMTsgbWluIDwgbWF4OyBtaW4rKykge1xuXHQgICAgaWYgKGNvdW50W21pbl0gIT09IDApIHsgYnJlYWs7IH1cblx0ICB9XG5cdCAgaWYgKHJvb3QgPCBtaW4pIHtcblx0ICAgIHJvb3QgPSBtaW47XG5cdCAgfVxuXG5cdCAgLyogY2hlY2sgZm9yIGFuIG92ZXItc3Vic2NyaWJlZCBvciBpbmNvbXBsZXRlIHNldCBvZiBsZW5ndGhzICovXG5cdCAgbGVmdCA9IDE7XG5cdCAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcblx0ICAgIGxlZnQgPDw9IDE7XG5cdCAgICBsZWZ0IC09IGNvdW50W2xlbl07XG5cdCAgICBpZiAobGVmdCA8IDApIHtcblx0ICAgICAgcmV0dXJuIC0xO1xuXHQgICAgfSAgICAgICAgLyogb3Zlci1zdWJzY3JpYmVkICovXG5cdCAgfVxuXHQgIGlmIChsZWZ0ID4gMCAmJiAodHlwZSA9PT0gQ09ERVMgfHwgbWF4ICE9PSAxKSkge1xuXHQgICAgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAvKiBpbmNvbXBsZXRlIHNldCAqL1xuXHQgIH1cblxuXHQgIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG5cdCAgb2Zmc1sxXSA9IDA7XG5cdCAgZm9yIChsZW4gPSAxOyBsZW4gPCBNQVhCSVRTOyBsZW4rKykge1xuXHQgICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG5cdCAgfVxuXG5cdCAgLyogc29ydCBzeW1ib2xzIGJ5IGxlbmd0aCwgYnkgc3ltYm9sIG9yZGVyIHdpdGhpbiBlYWNoIGxlbmd0aCAqL1xuXHQgIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG5cdCAgICBpZiAobGVuc1tsZW5zX2luZGV4ICsgc3ltXSAhPT0gMCkge1xuXHQgICAgICB3b3JrW29mZnNbbGVuc1tsZW5zX2luZGV4ICsgc3ltXV0rK10gPSBzeW07XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgLypcblx0ICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG5cdCAgIGZpbGxlZCBpcyBhdCBuZXh0IGFuZCBoYXMgY3VyciBpbmRleCBiaXRzLiAgVGhlIGNvZGUgYmVpbmcgdXNlZCBpcyBodWZmXG5cdCAgIHdpdGggbGVuZ3RoIGxlbi4gIFRoYXQgY29kZSBpcyBjb252ZXJ0ZWQgdG8gYW4gaW5kZXggYnkgZHJvcHBpbmcgZHJvcFxuXHQgICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG5cdCAgIHRob3NlIHRvcCBkcm9wICsgY3VyciAtIGxlbiBiaXRzIGFyZSBpbmNyZW1lbnRlZCB0aHJvdWdoIGFsbCB2YWx1ZXMgdG9cblx0ICAgZmlsbCB0aGUgdGFibGUgd2l0aCByZXBsaWNhdGVkIGVudHJpZXMuXG5cblx0ICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuXHQgICByb290LCBzdWItdGFibGVzIGFyZSBjcmVhdGVkIHBvaW50ZWQgdG8gYnkgdGhlIHJvb3QgZW50cnkgd2l0aCBhbiBpbmRleFxuXHQgICBvZiB0aGUgbG93IHJvb3QgYml0cyBvZiBodWZmLiAgVGhpcyBpcyBzYXZlZCBpbiBsb3cgdG8gY2hlY2sgZm9yIHdoZW4gYVxuXHQgICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcblx0ICAgYmVpbmcgZmlsbGVkLCBhbmQgZHJvcCBpcyByb290IHdoZW4gc3ViLXRhYmxlcyBhcmUgYmVpbmcgZmlsbGVkLlxuXG5cdCAgIFdoZW4gYSBuZXcgc3ViLXRhYmxlIGlzIG5lZWRlZCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGxvb2sgYWhlYWQgaW4gdGhlXG5cdCAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG5cdCAgIGNvdW50cyBhcmUgdXNlZCBmb3IgdGhpcywgYW5kIHNvIGNvdW50W10gaXMgZGVjcmVtZW50ZWQgYXMgY29kZXMgYXJlXG5cdCAgIGVudGVyZWQgaW4gdGhlIHRhYmxlcy5cblxuXHQgICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuXHQgICBwcm92aWRlZCAqdGFibGUgc3BhY2UuICBJdCBpcyBjaGVja2VkIGZvciBMRU5TIGFuZCBESVNUIHRhYmxlcyBhZ2FpbnN0XG5cdCAgIHRoZSBjb25zdGFudHMgRU5PVUdIX0xFTlMgYW5kIEVOT1VHSF9ESVNUUyB0byBndWFyZCBhZ2FpbnN0IGNoYW5nZXMgaW5cblx0ICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuXHQgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuXHQgICBzeW0gaW5jcmVtZW50cyB0aHJvdWdoIGFsbCBzeW1ib2xzLCBhbmQgdGhlIGxvb3AgdGVybWluYXRlcyB3aGVuXG5cdCAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcblx0ICAgcm91dGluZSBwZXJtaXRzIGluY29tcGxldGUgY29kZXMsIHNvIGFub3RoZXIgbG9vcCBhZnRlciB0aGlzIG9uZSBmaWxsc1xuXHQgICBpbiB0aGUgcmVzdCBvZiB0aGUgZGVjb2RpbmcgdGFibGVzIHdpdGggaW52YWxpZCBjb2RlIG1hcmtlcnMuXG5cdCAgICovXG5cblx0ICAvKiBzZXQgdXAgZm9yIGNvZGUgdHlwZSAqL1xuXHQgIC8vIHBvb3IgbWFuIG9wdGltaXphdGlvbiAtIHVzZSBpZi1lbHNlIGluc3RlYWQgb2Ygc3dpdGNoLFxuXHQgIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcblx0ICBpZiAodHlwZSA9PT0gQ09ERVMpIHtcblx0ICAgICAgYmFzZSA9IGV4dHJhID0gd29yazsgICAgLyogZHVtbXkgdmFsdWUtLW5vdCB1c2VkICovXG5cdCAgICAgIGVuZCA9IDE5O1xuXHQgIH0gZWxzZSBpZiAodHlwZSA9PT0gTEVOUykge1xuXHQgICAgICBiYXNlID0gbGJhc2U7XG5cdCAgICAgIGJhc2VfaW5kZXggLT0gMjU3O1xuXHQgICAgICBleHRyYSA9IGxleHQ7XG5cdCAgICAgIGV4dHJhX2luZGV4IC09IDI1Nztcblx0ICAgICAgZW5kID0gMjU2O1xuXHQgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAvKiBESVNUUyAqL1xuXHQgICAgICBiYXNlID0gZGJhc2U7XG5cdCAgICAgIGV4dHJhID0gZGV4dDtcblx0ICAgICAgZW5kID0gLTE7XG5cdCAgfVxuXG5cdCAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG5cdCAgaHVmZiA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIHN0YXJ0aW5nIGNvZGUgKi9cblx0ICBzeW0gPSAwOyAgICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBzeW1ib2wgKi9cblx0ICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cblx0ICBuZXh0ID0gdGFibGVfaW5kZXg7ICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIHRvIGZpbGwgaW4gKi9cblx0ICBjdXJyID0gcm9vdDsgICAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSBpbmRleCBiaXRzICovXG5cdCAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cblx0ICBsb3cgPSAtMTsgICAgICAgICAgICAgICAgICAgLyogdHJpZ2dlciBuZXcgc3ViLXRhYmxlIHdoZW4gbGVuID4gcm9vdCAqL1xuXHQgIHVzZWQgPSAxIDw8IHJvb3Q7ICAgICAgICAgIC8qIHVzZSByb290IHRhYmxlIGVudHJpZXMgKi9cblx0ICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG5cdCAgLyogY2hlY2sgYXZhaWxhYmxlIHRhYmxlIHNwYWNlICovXG5cdCAgaWYgKCh0eXBlID09PSBMRU5TICYmIHVzZWQgPiBFTk9VR0hfTEVOUykgfHxcblx0ICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuXHQgICAgcmV0dXJuIDE7XG5cdCAgfVxuXG5cdCAgdmFyIGk9MDtcblx0ICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG5cdCAgZm9yICg7Oykge1xuXHQgICAgaSsrO1xuXHQgICAgLyogY3JlYXRlIHRhYmxlIGVudHJ5ICovXG5cdCAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuXHQgICAgaWYgKHdvcmtbc3ltXSA8IGVuZCkge1xuXHQgICAgICBoZXJlX29wID0gMDtcblx0ICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmICh3b3JrW3N5bV0gPiBlbmQpIHtcblx0ICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcblx0ICAgICAgaGVyZV92YWwgPSBiYXNlW2Jhc2VfaW5kZXggKyB3b3JrW3N5bV1dO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgIGhlcmVfb3AgPSAzMiArIDY0OyAgICAgICAgIC8qIGVuZCBvZiBibG9jayAqL1xuXHQgICAgICBoZXJlX3ZhbCA9IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qIHJlcGxpY2F0ZSBmb3IgdGhvc2UgaW5kaWNlcyB3aXRoIGxvdyBsZW4gYml0cyBlcXVhbCB0byBodWZmICovXG5cdCAgICBpbmNyID0gMSA8PCAobGVuIC0gZHJvcCk7XG5cdCAgICBmaWxsID0gMSA8PCBjdXJyO1xuXHQgICAgbWluID0gZmlsbDsgICAgICAgICAgICAgICAgIC8qIHNhdmUgb2Zmc2V0IHRvIG5leHQgdGFibGUgKi9cblx0ICAgIGRvIHtcblx0ICAgICAgZmlsbCAtPSBpbmNyO1xuXHQgICAgICB0YWJsZVtuZXh0ICsgKGh1ZmYgPj4gZHJvcCkgKyBmaWxsXSA9IChoZXJlX2JpdHMgPDwgMjQpIHwgKGhlcmVfb3AgPDwgMTYpIHwgaGVyZV92YWwgfDA7XG5cdCAgICB9IHdoaWxlIChmaWxsICE9PSAwKTtcblxuXHQgICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cblx0ICAgIGluY3IgPSAxIDw8IChsZW4gLSAxKTtcblx0ICAgIHdoaWxlIChodWZmICYgaW5jcikge1xuXHQgICAgICBpbmNyID4+PSAxO1xuXHQgICAgfVxuXHQgICAgaWYgKGluY3IgIT09IDApIHtcblx0ICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcblx0ICAgICAgaHVmZiArPSBpbmNyO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaHVmZiA9IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qIGdvIHRvIG5leHQgc3ltYm9sLCB1cGRhdGUgY291bnQsIGxlbiAqL1xuXHQgICAgc3ltKys7XG5cdCAgICBpZiAoLS1jb3VudFtsZW5dID09PSAwKSB7XG5cdCAgICAgIGlmIChsZW4gPT09IG1heCkgeyBicmVhazsgfVxuXHQgICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuXHQgICAgfVxuXG5cdCAgICAvKiBjcmVhdGUgbmV3IHN1Yi10YWJsZSBpZiBuZWVkZWQgKi9cblx0ICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuXHQgICAgICAvKiBpZiBmaXJzdCB0aW1lLCB0cmFuc2l0aW9uIHRvIHN1Yi10YWJsZXMgKi9cblx0ICAgICAgaWYgKGRyb3AgPT09IDApIHtcblx0ICAgICAgICBkcm9wID0gcm9vdDtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8qIGluY3JlbWVudCBwYXN0IGxhc3QgdGFibGUgKi9cblx0ICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cblx0ICAgICAgLyogZGV0ZXJtaW5lIGxlbmd0aCBvZiBuZXh0IHRhYmxlICovXG5cdCAgICAgIGN1cnIgPSBsZW4gLSBkcm9wO1xuXHQgICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuXHQgICAgICB3aGlsZSAoY3VyciArIGRyb3AgPCBtYXgpIHtcblx0ICAgICAgICBsZWZ0IC09IGNvdW50W2N1cnIgKyBkcm9wXTtcblx0ICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG5cdCAgICAgICAgY3VycisrO1xuXHQgICAgICAgIGxlZnQgPDw9IDE7XG5cdCAgICAgIH1cblxuXHQgICAgICAvKiBjaGVjayBmb3IgZW5vdWdoIHNwYWNlICovXG5cdCAgICAgIHVzZWQgKz0gMSA8PCBjdXJyO1xuXHQgICAgICBpZiAoKHR5cGUgPT09IExFTlMgJiYgdXNlZCA+IEVOT1VHSF9MRU5TKSB8fFxuXHQgICAgICAgICh0eXBlID09PSBESVNUUyAmJiB1c2VkID4gRU5PVUdIX0RJU1RTKSkge1xuXHQgICAgICAgIHJldHVybiAxO1xuXHQgICAgICB9XG5cblx0ICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cblx0ICAgICAgbG93ID0gaHVmZiAmIG1hc2s7XG5cdCAgICAgIC8qdGFibGUub3BbbG93XSA9IGN1cnI7XG5cdCAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG5cdCAgICAgIHRhYmxlLnZhbFtsb3ddID0gbmV4dCAtIG9wdHMudGFibGVfaW5kZXg7Ki9cblx0ICAgICAgdGFibGVbbG93XSA9IChyb290IDw8IDI0KSB8IChjdXJyIDw8IDE2KSB8IChuZXh0IC0gdGFibGVfaW5kZXgpIHwwO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8qIGZpbGwgaW4gcmVtYWluaW5nIHRhYmxlIGVudHJ5IGlmIGNvZGUgaXMgaW5jb21wbGV0ZSAoZ3VhcmFudGVlZCB0byBoYXZlXG5cdCAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG5cdCAgIG1heGltdW0gY29kZSBsZW5ndGggdGhhdCB3YXMgYWxsb3dlZCB0byBnZXQgdGhpcyBmYXIgaXMgb25lIGJpdCkgKi9cblx0ICBpZiAoaHVmZiAhPT0gMCkge1xuXHQgICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG5cdCAgICAvL3RhYmxlLmJpdHNbbmV4dCArIGh1ZmZdID0gbGVuIC0gZHJvcDtcblx0ICAgIC8vdGFibGUudmFsW25leHQgKyBodWZmXSA9IDA7XG5cdCAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG5cdCAgfVxuXG5cdCAgLyogc2V0IHJldHVybiBwYXJhbWV0ZXJzICovXG5cdCAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG5cdCAgb3B0cy5iaXRzID0gcm9vdDtcblx0ICByZXR1cm4gMDtcblx0fTtcblxuXHR9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjI3fV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XG5cdCAgJzInOiAgICAnbmVlZCBkaWN0aW9uYXJ5JywgICAgIC8qIFpfTkVFRF9ESUNUICAgICAgIDIgICovXG5cdCAgJzEnOiAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG5cdCAgJzAnOiAgICAnJywgICAgICAgICAgICAgICAgICAgIC8qIFpfT0sgICAgICAgICAgICAgIDAgICovXG5cdCAgJy0xJzogICAnZmlsZSBlcnJvcicsICAgICAgICAgIC8qIFpfRVJSTk8gICAgICAgICAoLTEpICovXG5cdCAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG5cdCAgJy0zJzogICAnZGF0YSBlcnJvcicsICAgICAgICAgIC8qIFpfREFUQV9FUlJPUiAgICAoLTMpICovXG5cdCAgJy00JzogICAnaW5zdWZmaWNpZW50IG1lbW9yeScsIC8qIFpfTUVNX0VSUk9SICAgICAoLTQpICovXG5cdCAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG5cdCAgJy02JzogICAnaW5jb21wYXRpYmxlIHZlcnNpb24nIC8qIFpfVkVSU0lPTl9FUlJPUiAoLTYpICovXG5cdH07XG5cdH0se31dLDM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cblx0dmFyIHV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvY29tbW9uJyk7XG5cblx0LyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5cdC8vdmFyIFpfRklMVEVSRUQgICAgICAgICAgPSAxO1xuXHQvL3ZhciBaX0hVRkZNQU5fT05MWSAgICAgID0gMjtcblx0Ly92YXIgWl9STEUgICAgICAgICAgICAgICA9IDM7XG5cdHZhciBaX0ZJWEVEICAgICAgICAgICAgICAgPSA0O1xuXHQvL3ZhciBaX0RFRkFVTFRfU1RSQVRFR1kgID0gMDtcblxuXHQvKiBQb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIGRhdGFfdHlwZSBmaWVsZCAodGhvdWdoIHNlZSBpbmZsYXRlKCkpICovXG5cdHZhciBaX0JJTkFSWSAgICAgICAgICAgICAgPSAwO1xuXHR2YXIgWl9URVhUICAgICAgICAgICAgICAgID0gMTtcblx0Ly92YXIgWl9BU0NJSSAgICAgICAgICAgICA9IDE7IC8vID0gWl9URVhUXG5cdHZhciBaX1VOS05PV04gICAgICAgICAgICAgPSAyO1xuXG5cdC8qPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXHRmdW5jdGlvbiB6ZXJvKGJ1ZikgeyB2YXIgbGVuID0gYnVmLmxlbmd0aDsgd2hpbGUgKC0tbGVuID49IDApIHsgYnVmW2xlbl0gPSAwOyB9IH1cblxuXHQvLyBGcm9tIHp1dGlsLmhcblxuXHR2YXIgU1RPUkVEX0JMT0NLID0gMDtcblx0dmFyIFNUQVRJQ19UUkVFUyA9IDE7XG5cdHZhciBEWU5fVFJFRVMgICAgPSAyO1xuXHQvKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG5cdHZhciBNSU5fTUFUQ0ggICAgPSAzO1xuXHR2YXIgTUFYX01BVENIICAgID0gMjU4O1xuXHQvKiBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBtYXRjaCBsZW5ndGhzICovXG5cblx0Ly8gRnJvbSBkZWZsYXRlLmhcblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIEludGVybmFsIGNvbXByZXNzaW9uIHN0YXRlLlxuXHQgKi9cblxuXHR2YXIgTEVOR1RIX0NPREVTICA9IDI5O1xuXHQvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxuXHR2YXIgTElURVJBTFMgICAgICA9IDI1Njtcblx0LyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5cblx0dmFyIExfQ09ERVMgICAgICAgPSBMSVRFUkFMUyArIDEgKyBMRU5HVEhfQ09ERVM7XG5cdC8qIG51bWJlciBvZiBMaXRlcmFsIG9yIExlbmd0aCBjb2RlcywgaW5jbHVkaW5nIHRoZSBFTkRfQkxPQ0sgY29kZSAqL1xuXG5cdHZhciBEX0NPREVTICAgICAgID0gMzA7XG5cdC8qIG51bWJlciBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuXG5cdHZhciBCTF9DT0RFUyAgICAgID0gMTk7XG5cdC8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xuXG5cdHZhciBIRUFQX1NJWkUgICAgID0gMipMX0NPREVTICsgMTtcblx0LyogbWF4aW11bSBoZWFwIHNpemUgKi9cblxuXHR2YXIgTUFYX0JJVFMgICAgICA9IDE1O1xuXHQvKiBBbGwgY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CSVRTIGJpdHMgKi9cblxuXHR2YXIgQnVmX3NpemUgICAgICA9IDE2O1xuXHQvKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogQ29uc3RhbnRzXG5cdCAqL1xuXG5cdHZhciBNQVhfQkxfQklUUyA9IDc7XG5cdC8qIEJpdCBsZW5ndGggY29kZXMgbXVzdCBub3QgZXhjZWVkIE1BWF9CTF9CSVRTIGJpdHMgKi9cblxuXHR2YXIgRU5EX0JMT0NLICAgPSAyNTY7XG5cdC8qIGVuZCBvZiBibG9jayBsaXRlcmFsIGNvZGUgKi9cblxuXHR2YXIgUkVQXzNfNiAgICAgPSAxNjtcblx0LyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG5cdHZhciBSRVBaXzNfMTAgICA9IDE3O1xuXHQvKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAzLTEwIHRpbWVzICAoMyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxuXHR2YXIgUkVQWl8xMV8xMzggPSAxODtcblx0LyogcmVwZWF0IGEgemVybyBsZW5ndGggMTEtMTM4IHRpbWVzICAoNyBiaXRzIG9mIHJlcGVhdCBjb3VudCkgKi9cblxuXHR2YXIgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cblx0ICBbMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXTtcblxuXHR2YXIgZXh0cmFfZGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggZGlzdGFuY2UgY29kZSAqL1xuXHQgIFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXTtcblxuXHR2YXIgZXh0cmFfYmxiaXRzID0gIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggYml0IGxlbmd0aCBjb2RlICovXG5cdCAgWzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddO1xuXG5cdHZhciBibF9vcmRlciA9XG5cdCAgWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO1xuXHQvKiBUaGUgbGVuZ3RocyBvZiB0aGUgYml0IGxlbmd0aCBjb2RlcyBhcmUgc2VudCBpbiBvcmRlciBvZiBkZWNyZWFzaW5nXG5cdCAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuXHQgKi9cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cblx0ICovXG5cblx0Ly8gV2UgcHJlLWZpbGwgYXJyYXlzIHdpdGggMCB0byBhdm9pZCB1bmluaXRpYWxpemVkIGdhcHNcblxuXHR2YXIgRElTVF9DT0RFX0xFTiA9IDUxMjsgLyogc2VlIGRlZmluaXRpb24gb2YgYXJyYXkgZGlzdF9jb2RlIGJlbG93ICovXG5cblx0Ly8gISEhISBVc2UgZmxhdCBhcnJheSBpbnNkZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcblx0dmFyIHN0YXRpY19sdHJlZSAgPSBuZXcgQXJyYXkoKExfQ09ERVMrMikgKiAyKTtcblx0emVybyhzdGF0aWNfbHRyZWUpO1xuXHQvKiBUaGUgc3RhdGljIGxpdGVyYWwgdHJlZS4gU2luY2UgdGhlIGJpdCBsZW5ndGhzIGFyZSBpbXBvc2VkLCB0aGVyZSBpcyBub1xuXHQgKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuXHQgKiBUaGUgY29kZXMgMjg2IGFuZCAyODcgYXJlIG5lZWRlZCB0byBidWlsZCBhIGNhbm9uaWNhbCB0cmVlIChzZWUgX3RyX2luaXRcblx0ICogYmVsb3cpLlxuXHQgKi9cblxuXHR2YXIgc3RhdGljX2R0cmVlICA9IG5ldyBBcnJheShEX0NPREVTICogMik7XG5cdHplcm8oc3RhdGljX2R0cmVlKTtcblx0LyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuXHQgKiA1IGJpdHMuKVxuXHQgKi9cblxuXHR2YXIgX2Rpc3RfY29kZSAgICA9IG5ldyBBcnJheShESVNUX0NPREVfTEVOKTtcblx0emVybyhfZGlzdF9jb2RlKTtcblx0LyogRGlzdGFuY2UgY29kZXMuIFRoZSBmaXJzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIGRpc3RhbmNlc1xuXHQgKiAzIC4uIDI1OCwgdGhlIGxhc3QgMjU2IHZhbHVlcyBjb3JyZXNwb25kIHRvIHRoZSB0b3AgOCBiaXRzIG9mXG5cdCAqIHRoZSAxNSBiaXQgZGlzdGFuY2VzLlxuXHQgKi9cblxuXHR2YXIgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0gtTUlOX01BVENIKzEpO1xuXHR6ZXJvKF9sZW5ndGhfY29kZSk7XG5cdC8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxuXHR2YXIgYmFzZV9sZW5ndGggICA9IG5ldyBBcnJheShMRU5HVEhfQ09ERVMpO1xuXHR6ZXJvKGJhc2VfbGVuZ3RoKTtcblx0LyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxuXHR2YXIgYmFzZV9kaXN0ICAgICA9IG5ldyBBcnJheShEX0NPREVTKTtcblx0emVybyhiYXNlX2Rpc3QpO1xuXHQvKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cblx0dmFyIFN0YXRpY1RyZWVEZXNjID0gZnVuY3Rpb24gKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG5cdCAgdGhpcy5zdGF0aWNfdHJlZSAgPSBzdGF0aWNfdHJlZTsgIC8qIHN0YXRpYyB0cmVlIG9yIE5VTEwgKi9cblx0ICB0aGlzLmV4dHJhX2JpdHMgICA9IGV4dHJhX2JpdHM7ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBjb2RlIG9yIE5VTEwgKi9cblx0ICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuXHQgIHRoaXMuZWxlbXMgICAgICAgID0gZWxlbXM7ICAgICAgICAvKiBtYXggbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSB0cmVlICovXG5cdCAgdGhpcy5tYXhfbGVuZ3RoICAgPSBtYXhfbGVuZ3RoOyAgIC8qIG1heCBiaXQgbGVuZ3RoIGZvciB0aGUgY29kZXMgKi9cblxuXHQgIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuXHQgIHRoaXMuaGFzX3N0cmVlICAgID0gc3RhdGljX3RyZWUgJiYgc3RhdGljX3RyZWUubGVuZ3RoO1xuXHR9O1xuXG5cblx0dmFyIHN0YXRpY19sX2Rlc2M7XG5cdHZhciBzdGF0aWNfZF9kZXNjO1xuXHR2YXIgc3RhdGljX2JsX2Rlc2M7XG5cblxuXHR2YXIgVHJlZURlc2MgPSBmdW5jdGlvbihkeW5fdHJlZSwgc3RhdF9kZXNjKSB7XG5cdCAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuXHQgIHRoaXMubWF4X2NvZGUgPSAwOyAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuXHQgIHRoaXMuc3RhdF9kZXNjID0gc3RhdF9kZXNjOyAgIC8qIHRoZSBjb3JyZXNwb25kaW5nIHN0YXRpYyB0cmVlICovXG5cdH07XG5cblxuXG5cdGZ1bmN0aW9uIGRfY29kZShkaXN0KSB7XG5cdCAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogT3V0cHV0IGEgc2hvcnQgTFNCIGZpcnN0IG9uIHRoZSBzdHJlYW0uXG5cdCAqIElOIGFzc2VydGlvbjogdGhlcmUgaXMgZW5vdWdoIHJvb20gaW4gcGVuZGluZ0J1Zi5cblx0ICovXG5cdGZ1bmN0aW9uIHB1dF9zaG9ydCAocywgdykge1xuXHQvLyAgICBwdXRfYnl0ZShzLCAodWNoKSgodykgJiAweGZmKSk7XG5cdC8vICAgIHB1dF9ieXRlKHMsICh1Y2gpKCh1c2gpKHcpID4+IDgpKTtcblx0ICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG5cdCAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAodyA+Pj4gOCkgJiAweGZmO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogU2VuZCBhIHZhbHVlIG9uIGEgZ2l2ZW4gbnVtYmVyIG9mIGJpdHMuXG5cdCAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gc2VuZF9iaXRzKHMsIHZhbHVlLCBsZW5ndGgpIHtcblx0ICBpZiAocy5iaV92YWxpZCA+IChCdWZfc2l6ZSAtIGxlbmd0aCkpIHtcblx0ICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcblx0ICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG5cdCAgICBzLmJpX2J1ZiA9IHZhbHVlID4+IChCdWZfc2l6ZSAtIHMuYmlfdmFsaWQpO1xuXHQgICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcy5iaV9idWYgfD0gKHZhbHVlIDw8IHMuYmlfdmFsaWQpICYgMHhmZmZmO1xuXHQgICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG5cdCAgfVxuXHR9XG5cblxuXHRmdW5jdGlvbiBzZW5kX2NvZGUocywgYywgdHJlZSkge1xuXHQgIHNlbmRfYml0cyhzLCB0cmVlW2MqMl0vKi5Db2RlKi8sIHRyZWVbYyoyICsgMV0vKi5MZW4qLyk7XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuXHQgKiBtZXRob2Qgd291bGQgdXNlIGEgdGFibGUpXG5cdCAqIElOIGFzc2VydGlvbjogMSA8PSBsZW4gPD0gMTVcblx0ICovXG5cdGZ1bmN0aW9uIGJpX3JldmVyc2UoY29kZSwgbGVuKSB7XG5cdCAgdmFyIHJlcyA9IDA7XG5cdCAgZG8ge1xuXHQgICAgcmVzIHw9IGNvZGUgJiAxO1xuXHQgICAgY29kZSA+Pj49IDE7XG5cdCAgICByZXMgPDw9IDE7XG5cdCAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcblx0ICByZXR1cm4gcmVzID4+PiAxO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogRmx1c2ggdGhlIGJpdCBidWZmZXIsIGtlZXBpbmcgYXQgbW9zdCA3IGJpdHMgaW4gaXQuXG5cdCAqL1xuXHRmdW5jdGlvbiBiaV9mbHVzaChzKSB7XG5cdCAgaWYgKHMuYmlfdmFsaWQgPT09IDE2KSB7XG5cdCAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuXHQgICAgcy5iaV9idWYgPSAwO1xuXHQgICAgcy5iaV92YWxpZCA9IDA7XG5cblx0ICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPj0gOCkge1xuXHQgICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG5cdCAgICBzLmJpX2J1ZiA+Pj0gODtcblx0ICAgIHMuYmlfdmFsaWQgLT0gODtcblx0ICB9XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzIGZvciBhIHRyZWUgYW5kIHVwZGF0ZSB0aGUgdG90YWwgYml0IGxlbmd0aFxuXHQgKiBmb3IgdGhlIGN1cnJlbnQgYmxvY2suXG5cdCAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG5cdCAqICAgIGFib3ZlIGFyZSB0aGUgdHJlZSBub2RlcyBzb3J0ZWQgYnkgaW5jcmVhc2luZyBmcmVxdWVuY3kuXG5cdCAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGQgbGVuIGlzIHNldCB0byB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RoLCB0aGVcblx0ICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuXHQgKiAgICAgVGhlIGxlbmd0aCBvcHRfbGVuIGlzIHVwZGF0ZWQ7IHN0YXRpY19sZW4gaXMgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzXG5cdCAqICAgICBub3QgbnVsbC5cblx0ICovXG5cdGZ1bmN0aW9uIGdlbl9iaXRsZW4ocywgZGVzYylcblx0Ly8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcblx0Ly8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG5cdHtcblx0ICB2YXIgdHJlZSAgICAgICAgICAgID0gZGVzYy5keW5fdHJlZTtcblx0ICB2YXIgbWF4X2NvZGUgICAgICAgID0gZGVzYy5tYXhfY29kZTtcblx0ICB2YXIgc3RyZWUgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2Muc3RhdGljX3RyZWU7XG5cdCAgdmFyIGhhc19zdHJlZSAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmhhc19zdHJlZTtcblx0ICB2YXIgZXh0cmEgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYml0cztcblx0ICB2YXIgYmFzZSAgICAgICAgICAgID0gZGVzYy5zdGF0X2Rlc2MuZXh0cmFfYmFzZTtcblx0ICB2YXIgbWF4X2xlbmd0aCAgICAgID0gZGVzYy5zdGF0X2Rlc2MubWF4X2xlbmd0aDtcblx0ICB2YXIgaDsgICAgICAgICAgICAgIC8qIGhlYXAgaW5kZXggKi9cblx0ICB2YXIgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuXHQgIHZhciBiaXRzOyAgICAgICAgICAgLyogYml0IGxlbmd0aCAqL1xuXHQgIHZhciB4Yml0czsgICAgICAgICAgLyogZXh0cmEgYml0cyAqL1xuXHQgIHZhciBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG5cdCAgdmFyIG92ZXJmbG93ID0gMDsgICAvKiBudW1iZXIgb2YgZWxlbWVudHMgd2l0aCBiaXQgbGVuZ3RoIHRvbyBsYXJnZSAqL1xuXG5cdCAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG5cdCAgICBzLmJsX2NvdW50W2JpdHNdID0gMDtcblx0ICB9XG5cblx0ICAvKiBJbiBhIGZpcnN0IHBhc3MsIGNvbXB1dGUgdGhlIG9wdGltYWwgYml0IGxlbmd0aHMgKHdoaWNoIG1heVxuXHQgICAqIG92ZXJmbG93IGluIHRoZSBjYXNlIG9mIHRoZSBiaXQgbGVuZ3RoIHRyZWUpLlxuXHQgICAqL1xuXHQgIHRyZWVbcy5oZWFwW3MuaGVhcF9tYXhdKjIgKyAxXS8qLkxlbiovID0gMDsgLyogcm9vdCBvZiB0aGUgaGVhcCAqL1xuXG5cdCAgZm9yIChoID0gcy5oZWFwX21heCsxOyBoIDwgSEVBUF9TSVpFOyBoKyspIHtcblx0ICAgIG4gPSBzLmhlYXBbaF07XG5cdCAgICBiaXRzID0gdHJlZVt0cmVlW24qMiArMV0vKi5EYWQqLyAqIDIgKyAxXS8qLkxlbiovICsgMTtcblx0ICAgIGlmIChiaXRzID4gbWF4X2xlbmd0aCkge1xuXHQgICAgICBiaXRzID0gbWF4X2xlbmd0aDtcblx0ICAgICAgb3ZlcmZsb3crKztcblx0ICAgIH1cblx0ICAgIHRyZWVbbioyICsgMV0vKi5MZW4qLyA9IGJpdHM7XG5cdCAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG5cdCAgICBpZiAobiA+IG1heF9jb2RlKSB7IGNvbnRpbnVlOyB9IC8qIG5vdCBhIGxlYWYgbm9kZSAqL1xuXG5cdCAgICBzLmJsX2NvdW50W2JpdHNdKys7XG5cdCAgICB4Yml0cyA9IDA7XG5cdCAgICBpZiAobiA+PSBiYXNlKSB7XG5cdCAgICAgIHhiaXRzID0gZXh0cmFbbi1iYXNlXTtcblx0ICAgIH1cblx0ICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcblx0ICAgIHMub3B0X2xlbiArPSBmICogKGJpdHMgKyB4Yml0cyk7XG5cdCAgICBpZiAoaGFzX3N0cmVlKSB7XG5cdCAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24qMiArIDFdLyouTGVuKi8gKyB4Yml0cyk7XG5cdCAgICB9XG5cdCAgfVxuXHQgIGlmIChvdmVyZmxvdyA9PT0gMCkgeyByZXR1cm47IH1cblxuXHQgIC8vIFRyYWNlKChzdGRlcnIsXCJcXG5iaXQgbGVuZ3RoIG92ZXJmbG93XFxuXCIpKTtcblx0ICAvKiBUaGlzIGhhcHBlbnMgZm9yIGV4YW1wbGUgb24gb2JqMiBhbmQgcGljIG9mIHRoZSBDYWxnYXJ5IGNvcnB1cyAqL1xuXG5cdCAgLyogRmluZCB0aGUgZmlyc3QgYml0IGxlbmd0aCB3aGljaCBjb3VsZCBpbmNyZWFzZTogKi9cblx0ICBkbyB7XG5cdCAgICBiaXRzID0gbWF4X2xlbmd0aC0xO1xuXHQgICAgd2hpbGUgKHMuYmxfY291bnRbYml0c10gPT09IDApIHsgYml0cy0tOyB9XG5cdCAgICBzLmJsX2NvdW50W2JpdHNdLS07ICAgICAgLyogbW92ZSBvbmUgbGVhZiBkb3duIHRoZSB0cmVlICovXG5cdCAgICBzLmJsX2NvdW50W2JpdHMrMV0gKz0gMjsgLyogbW92ZSBvbmUgb3ZlcmZsb3cgaXRlbSBhcyBpdHMgYnJvdGhlciAqL1xuXHQgICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuXHQgICAgLyogVGhlIGJyb3RoZXIgb2YgdGhlIG92ZXJmbG93IGl0ZW0gYWxzbyBtb3ZlcyBvbmUgc3RlcCB1cCxcblx0ICAgICAqIGJ1dCB0aGlzIGRvZXMgbm90IGFmZmVjdCBibF9jb3VudFttYXhfbGVuZ3RoXVxuXHQgICAgICovXG5cdCAgICBvdmVyZmxvdyAtPSAyO1xuXHQgIH0gd2hpbGUgKG92ZXJmbG93ID4gMCk7XG5cblx0ICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG5cdCAgICogaCBpcyBzdGlsbCBlcXVhbCB0byBIRUFQX1NJWkUuIChJdCBpcyBzaW1wbGVyIHRvIHJlY29uc3RydWN0IGFsbFxuXHQgICAqIGxlbmd0aHMgaW5zdGVhZCBvZiBmaXhpbmcgb25seSB0aGUgd3Jvbmcgb25lcy4gVGhpcyBpZGVhIGlzIHRha2VuXG5cdCAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG5cdCAgICovXG5cdCAgZm9yIChiaXRzID0gbWF4X2xlbmd0aDsgYml0cyAhPT0gMDsgYml0cy0tKSB7XG5cdCAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcblx0ICAgIHdoaWxlIChuICE9PSAwKSB7XG5cdCAgICAgIG0gPSBzLmhlYXBbLS1oXTtcblx0ICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxuXHQgICAgICBpZiAodHJlZVttKjIgKyAxXS8qLkxlbiovICE9PSBiaXRzKSB7XG5cdCAgICAgICAgLy8gVHJhY2UoKHN0ZGVycixcImNvZGUgJWQgYml0cyAlZC0+JWRcXG5cIiwgbSwgdHJlZVttXS5MZW4sIGJpdHMpKTtcblx0ICAgICAgICBzLm9wdF9sZW4gKz0gKGJpdHMgLSB0cmVlW20qMiArIDFdLyouTGVuKi8pKnRyZWVbbSoyXS8qLkZyZXEqLztcblx0ICAgICAgICB0cmVlW20qMiArIDFdLyouTGVuKi8gPSBiaXRzO1xuXHQgICAgICB9XG5cdCAgICAgIG4tLTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBHZW5lcmF0ZSB0aGUgY29kZXMgZm9yIGEgZ2l2ZW4gdHJlZSBhbmQgYml0IGNvdW50cyAod2hpY2ggbmVlZCBub3QgYmVcblx0ICogb3B0aW1hbCkuXG5cdCAqIElOIGFzc2VydGlvbjogdGhlIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBiaXQgbGVuZ3RoIHN0YXRpc3RpY3MgZm9yXG5cdCAqIHRoZSBnaXZlbiB0cmVlIGFuZCB0aGUgZmllbGQgbGVuIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG5cdCAqIE9VVCBhc3NlcnRpb246IHRoZSBmaWVsZCBjb2RlIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMgb2Ygbm9uXG5cdCAqICAgICB6ZXJvIGNvZGUgbGVuZ3RoLlxuXHQgKi9cblx0ZnVuY3Rpb24gZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBibF9jb3VudClcblx0Ly8gICAgY3RfZGF0YSAqdHJlZTsgICAgICAgICAgICAgLyogdGhlIHRyZWUgdG8gZGVjb3JhdGUgKi9cblx0Ly8gICAgaW50IG1heF9jb2RlOyAgICAgICAgICAgICAgLyogbGFyZ2VzdCBjb2RlIHdpdGggbm9uIHplcm8gZnJlcXVlbmN5ICovXG5cdC8vICAgIHVzaGYgKmJsX2NvdW50OyAgICAgICAgICAgIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggKi9cblx0e1xuXHQgIHZhciBuZXh0X2NvZGUgPSBuZXcgQXJyYXkoTUFYX0JJVFMrMSk7IC8qIG5leHQgY29kZSB2YWx1ZSBmb3IgZWFjaCBiaXQgbGVuZ3RoICovXG5cdCAgdmFyIGNvZGUgPSAwOyAgICAgICAgICAgICAgLyogcnVubmluZyBjb2RlIHZhbHVlICovXG5cdCAgdmFyIGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG5cdCAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogY29kZSBpbmRleCAqL1xuXG5cdCAgLyogVGhlIGRpc3RyaWJ1dGlvbiBjb3VudHMgYXJlIGZpcnN0IHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGNvZGUgdmFsdWVzXG5cdCAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG5cdCAgICovXG5cdCAgZm9yIChiaXRzID0gMTsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG5cdCAgICBuZXh0X2NvZGVbYml0c10gPSBjb2RlID0gKGNvZGUgKyBibF9jb3VudFtiaXRzLTFdKSA8PCAxO1xuXHQgIH1cblx0ICAvKiBDaGVjayB0aGF0IHRoZSBiaXQgY291bnRzIGluIGJsX2NvdW50IGFyZSBjb25zaXN0ZW50LiBUaGUgbGFzdCBjb2RlXG5cdCAgICogbXVzdCBiZSBhbGwgb25lcy5cblx0ICAgKi9cblx0ICAvL0Fzc2VydCAoY29kZSArIGJsX2NvdW50W01BWF9CSVRTXS0xID09ICgxPDxNQVhfQklUUyktMSxcblx0ICAvLyAgICAgICAgXCJpbmNvbnNpc3RlbnQgYml0IGNvdW50c1wiKTtcblx0ICAvL1RyYWNldigoc3RkZXJyLFwiXFxuZ2VuX2NvZGVzOiBtYXhfY29kZSAlZCBcIiwgbWF4X2NvZGUpKTtcblxuXHQgIGZvciAobiA9IDA7ICBuIDw9IG1heF9jb2RlOyBuKyspIHtcblx0ICAgIHZhciBsZW4gPSB0cmVlW24qMiArIDFdLyouTGVuKi87XG5cdCAgICBpZiAobGVuID09PSAwKSB7IGNvbnRpbnVlOyB9XG5cdCAgICAvKiBOb3cgcmV2ZXJzZSB0aGUgYml0cyAqL1xuXHQgICAgdHJlZVtuKjJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuZXh0X2NvZGVbbGVuXSsrLCBsZW4pO1xuXG5cdCAgICAvL1RyYWNlY3YodHJlZSAhPSBzdGF0aWNfbHRyZWUsIChzdGRlcnIsXCJcXG5uICUzZCAlYyBsICUyZCBjICU0eCAoJXgpIFwiLFxuXHQgICAgLy8gICAgIG4sIChpc2dyYXBoKG4pID8gbiA6ICcgJyksIGxlbiwgdHJlZVtuXS5Db2RlLCBuZXh0X2NvZGVbbGVuXS0xKSk7XG5cdCAgfVxuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRyX3N0YXRpY19pbml0KCkge1xuXHQgIHZhciBuOyAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG5cdCAgdmFyIGJpdHM7ICAgICAvKiBiaXQgY291bnRlciAqL1xuXHQgIHZhciBsZW5ndGg7ICAgLyogbGVuZ3RoIHZhbHVlICovXG5cdCAgdmFyIGNvZGU7ICAgICAvKiBjb2RlIHZhbHVlICovXG5cdCAgdmFyIGRpc3Q7ICAgICAvKiBkaXN0YW5jZSBpbmRleCAqL1xuXHQgIHZhciBibF9jb3VudCA9IG5ldyBBcnJheShNQVhfQklUUysxKTtcblx0ICAvKiBudW1iZXIgb2YgY29kZXMgYXQgZWFjaCBiaXQgbGVuZ3RoIGZvciBhbiBvcHRpbWFsIHRyZWUgKi9cblxuXHQgIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcblx0ICAvL2lmIChzdGF0aWNfaW5pdF9kb25lKSByZXR1cm47XG5cblx0ICAvKiBGb3Igc29tZSBlbWJlZGRlZCB0YXJnZXRzLCBnbG9iYWwgdmFyaWFibGVzIGFyZSBub3QgaW5pdGlhbGl6ZWQ6ICovXG5cdC8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG5cdCAgc3RhdGljX2xfZGVzYy5zdGF0aWNfdHJlZSA9IHN0YXRpY19sdHJlZTtcblx0ICBzdGF0aWNfbF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9sYml0cztcblx0ICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuXHQgIHN0YXRpY19kX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2RiaXRzO1xuXHQgIHN0YXRpY19ibF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9ibGJpdHM7XG5cdCNlbmRpZiovXG5cblx0ICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGxlbmd0aCAoMC4uMjU1KSAtPiBsZW5ndGggY29kZSAoMC4uMjgpICovXG5cdCAgbGVuZ3RoID0gMDtcblx0ICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTLTE7IGNvZGUrKykge1xuXHQgICAgYmFzZV9sZW5ndGhbY29kZV0gPSBsZW5ndGg7XG5cdCAgICBmb3IgKG4gPSAwOyBuIDwgKDE8PGV4dHJhX2xiaXRzW2NvZGVdKTsgbisrKSB7XG5cdCAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuXHQgICAgfVxuXHQgIH1cblx0ICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcblx0ICAvKiBOb3RlIHRoYXQgdGhlIGxlbmd0aCAyNTUgKG1hdGNoIGxlbmd0aCAyNTgpIGNhbiBiZSByZXByZXNlbnRlZFxuXHQgICAqIGluIHR3byBkaWZmZXJlbnQgd2F5czogY29kZSAyODQgKyA1IGJpdHMgb3IgY29kZSAyODUsIHNvIHdlXG5cdCAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuXHQgICAqL1xuXHQgIF9sZW5ndGhfY29kZVtsZW5ndGgtMV0gPSBjb2RlO1xuXG5cdCAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBkaXN0ICgwLi4zMkspIC0+IGRpc3QgY29kZSAoMC4uMjkpICovXG5cdCAgZGlzdCA9IDA7XG5cdCAgZm9yIChjb2RlID0gMCA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG5cdCAgICBiYXNlX2Rpc3RbY29kZV0gPSBkaXN0O1xuXHQgICAgZm9yIChuID0gMDsgbiA8ICgxPDxleHRyYV9kYml0c1tjb2RlXSk7IG4rKykge1xuXHQgICAgICBfZGlzdF9jb2RlW2Rpc3QrK10gPSBjb2RlO1xuXHQgICAgfVxuXHQgIH1cblx0ICAvL0Fzc2VydCAoZGlzdCA9PSAyNTYsIFwidHJfc3RhdGljX2luaXQ6IGRpc3QgIT0gMjU2XCIpO1xuXHQgIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuXHQgIGZvciAoIDsgY29kZSA8IERfQ09ERVM7IGNvZGUrKykge1xuXHQgICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdCA8PCA3O1xuXHQgICAgZm9yIChuID0gMDsgbiA8ICgxPDwoZXh0cmFfZGJpdHNbY29kZV0tNykpOyBuKyspIHtcblx0ICAgICAgX2Rpc3RfY29kZVsyNTYgKyBkaXN0KytdID0gY29kZTtcblx0ICAgIH1cblx0ICB9XG5cdCAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTJcIik7XG5cblx0ICAvKiBDb25zdHJ1Y3QgdGhlIGNvZGVzIG9mIHRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlICovXG5cdCAgZm9yIChiaXRzID0gMDsgYml0cyA8PSBNQVhfQklUUzsgYml0cysrKSB7XG5cdCAgICBibF9jb3VudFtiaXRzXSA9IDA7XG5cdCAgfVxuXG5cdCAgbiA9IDA7XG5cdCAgd2hpbGUgKG4gPD0gMTQzKSB7XG5cdCAgICBzdGF0aWNfbHRyZWVbbioyICsgMV0vKi5MZW4qLyA9IDg7XG5cdCAgICBuKys7XG5cdCAgICBibF9jb3VudFs4XSsrO1xuXHQgIH1cblx0ICB3aGlsZSAobiA8PSAyNTUpIHtcblx0ICAgIHN0YXRpY19sdHJlZVtuKjIgKyAxXS8qLkxlbiovID0gOTtcblx0ICAgIG4rKztcblx0ICAgIGJsX2NvdW50WzldKys7XG5cdCAgfVxuXHQgIHdoaWxlIChuIDw9IDI3OSkge1xuXHQgICAgc3RhdGljX2x0cmVlW24qMiArIDFdLyouTGVuKi8gPSA3O1xuXHQgICAgbisrO1xuXHQgICAgYmxfY291bnRbN10rKztcblx0ICB9XG5cdCAgd2hpbGUgKG4gPD0gMjg3KSB7XG5cdCAgICBzdGF0aWNfbHRyZWVbbioyICsgMV0vKi5MZW4qLyA9IDg7XG5cdCAgICBuKys7XG5cdCAgICBibF9jb3VudFs4XSsrO1xuXHQgIH1cblx0ICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcblx0ICAgKiB0cmVlIGNvbnN0cnVjdGlvbiB0byBnZXQgYSBjYW5vbmljYWwgSHVmZm1hbiB0cmVlIChsb25nZXN0IGNvZGVcblx0ICAgKiBhbGwgb25lcylcblx0ICAgKi9cblx0ICBnZW5fY29kZXMoc3RhdGljX2x0cmVlLCBMX0NPREVTKzEsIGJsX2NvdW50KTtcblxuXHQgIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqL1xuXHQgIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyBuKyspIHtcblx0ICAgIHN0YXRpY19kdHJlZVtuKjIgKyAxXS8qLkxlbiovID0gNTtcblx0ICAgIHN0YXRpY19kdHJlZVtuKjJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTtcblx0ICB9XG5cblx0ICAvLyBOb3cgZGF0YSByZWFkeSBhbmQgd2UgY2FuIGluaXQgc3RhdGljIHRyZWVzXG5cdCAgc3RhdGljX2xfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfbHRyZWUsIGV4dHJhX2xiaXRzLCBMSVRFUkFMUysxLCBMX0NPREVTLCBNQVhfQklUUyk7XG5cdCAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCAgICAgICAgICBEX0NPREVTLCBNQVhfQklUUyk7XG5cdCAgc3RhdGljX2JsX2Rlc2MgPW5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgICAgICAgICBCTF9DT0RFUywgTUFYX0JMX0JJVFMpO1xuXG5cdCAgLy9zdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIEluaXRpYWxpemUgYSBuZXcgYmxvY2suXG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0X2Jsb2NrKHMpIHtcblx0ICB2YXIgbjsgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG5cblx0ICAvKiBJbml0aWFsaXplIHRoZSB0cmVlcy4gKi9cblx0ICBmb3IgKG4gPSAwOyBuIDwgTF9DT0RFUzsgIG4rKykgeyBzLmR5bl9sdHJlZVtuKjJdLyouRnJlcSovID0gMDsgfVxuXHQgIGZvciAobiA9IDA7IG4gPCBEX0NPREVTOyAgbisrKSB7IHMuZHluX2R0cmVlW24qMl0vKi5GcmVxKi8gPSAwOyB9XG5cdCAgZm9yIChuID0gMDsgbiA8IEJMX0NPREVTOyBuKyspIHsgcy5ibF90cmVlW24qMl0vKi5GcmVxKi8gPSAwOyB9XG5cblx0ICBzLmR5bl9sdHJlZVtFTkRfQkxPQ0sqMl0vKi5GcmVxKi8gPSAxO1xuXHQgIHMub3B0X2xlbiA9IHMuc3RhdGljX2xlbiA9IDA7XG5cdCAgcy5sYXN0X2xpdCA9IHMubWF0Y2hlcyA9IDA7XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciBhbmQgYWxpZ24gdGhlIG91dHB1dCBvbiBhIGJ5dGUgYm91bmRhcnlcblx0ICovXG5cdGZ1bmN0aW9uIGJpX3dpbmR1cChzKVxuXHR7XG5cdCAgaWYgKHMuYmlfdmFsaWQgPiA4KSB7XG5cdCAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuXHQgIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+IDApIHtcblx0ICAgIC8vcHV0X2J5dGUocywgKEJ5dGUpcy0+YmlfYnVmKTtcblx0ICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWY7XG5cdCAgfVxuXHQgIHMuYmlfYnVmID0gMDtcblx0ICBzLmJpX3ZhbGlkID0gMDtcblx0fVxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb3B5IGEgc3RvcmVkIGJsb2NrLCBzdG9yaW5nIGZpcnN0IHRoZSBsZW5ndGggYW5kIGl0c1xuXHQgKiBvbmUncyBjb21wbGVtZW50IGlmIHJlcXVlc3RlZC5cblx0ICovXG5cdGZ1bmN0aW9uIGNvcHlfYmxvY2socywgYnVmLCBsZW4sIGhlYWRlcilcblx0Ly9EZWZsYXRlU3RhdGUgKnM7XG5cdC8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cblx0Ly91bnNpZ25lZCBsZW47ICAgICAvKiBpdHMgbGVuZ3RoICovXG5cdC8vaW50ICAgICAgaGVhZGVyOyAgLyogdHJ1ZSBpZiBibG9jayBoZWFkZXIgbXVzdCBiZSB3cml0dGVuICovXG5cdHtcblx0ICBiaV93aW5kdXAocyk7ICAgICAgICAvKiBhbGlnbiBvbiBieXRlIGJvdW5kYXJ5ICovXG5cblx0ICBpZiAoaGVhZGVyKSB7XG5cdCAgICBwdXRfc2hvcnQocywgbGVuKTtcblx0ICAgIHB1dF9zaG9ydChzLCB+bGVuKTtcblx0ICB9XG5cdC8vICB3aGlsZSAobGVuLS0pIHtcblx0Ly8gICAgcHV0X2J5dGUocywgKmJ1ZisrKTtcblx0Ly8gIH1cblx0ICB1dGlscy5hcnJheVNldChzLnBlbmRpbmdfYnVmLCBzLndpbmRvdywgYnVmLCBsZW4sIHMucGVuZGluZyk7XG5cdCAgcy5wZW5kaW5nICs9IGxlbjtcblx0fVxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb21wYXJlcyB0byBzdWJ0cmVlcywgdXNpbmcgdGhlIHRyZWUgZGVwdGggYXMgdGllIGJyZWFrZXIgd2hlblxuXHQgKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cblx0ICovXG5cdGZ1bmN0aW9uIHNtYWxsZXIodHJlZSwgbiwgbSwgZGVwdGgpIHtcblx0ICB2YXIgX24yID0gbioyO1xuXHQgIHZhciBfbTIgPSBtKjI7XG5cdCAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcblx0ICAgICAgICAgKHRyZWVbX24yXS8qLkZyZXEqLyA9PT0gdHJlZVtfbTJdLyouRnJlcSovICYmIGRlcHRoW25dIDw9IGRlcHRoW21dKSk7XG5cdH1cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogUmVzdG9yZSB0aGUgaGVhcCBwcm9wZXJ0eSBieSBtb3ZpbmcgZG93biB0aGUgdHJlZSBzdGFydGluZyBhdCBub2RlIGssXG5cdCAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXG5cdCAqIHdoZW4gdGhlIGhlYXAgcHJvcGVydHkgaXMgcmUtZXN0YWJsaXNoZWQgKGVhY2ggZmF0aGVyIHNtYWxsZXIgdGhhbiBpdHNcblx0ICogdHdvIHNvbnMpLlxuXHQgKi9cblx0ZnVuY3Rpb24gcHFkb3duaGVhcChzLCB0cmVlLCBrKVxuXHQvLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuXHQvLyAgICBjdF9kYXRhICp0cmVlOyAgLyogdGhlIHRyZWUgdG8gcmVzdG9yZSAqL1xuXHQvLyAgICBpbnQgazsgICAgICAgICAgICAgICAvKiBub2RlIHRvIG1vdmUgZG93biAqL1xuXHR7XG5cdCAgdmFyIHYgPSBzLmhlYXBba107XG5cdCAgdmFyIGogPSBrIDw8IDE7ICAvKiBsZWZ0IHNvbiBvZiBrICovXG5cdCAgd2hpbGUgKGogPD0gcy5oZWFwX2xlbikge1xuXHQgICAgLyogU2V0IGogdG8gdGhlIHNtYWxsZXN0IG9mIHRoZSB0d28gc29uczogKi9cblx0ICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJlxuXHQgICAgICBzbWFsbGVyKHRyZWUsIHMuaGVhcFtqKzFdLCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7XG5cdCAgICAgIGorKztcblx0ICAgIH1cblx0ICAgIC8qIEV4aXQgaWYgdiBpcyBzbWFsbGVyIHRoYW4gYm90aCBzb25zICovXG5cdCAgICBpZiAoc21hbGxlcih0cmVlLCB2LCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7IGJyZWFrOyB9XG5cblx0ICAgIC8qIEV4Y2hhbmdlIHYgd2l0aCB0aGUgc21hbGxlc3Qgc29uICovXG5cdCAgICBzLmhlYXBba10gPSBzLmhlYXBbal07XG5cdCAgICBrID0gajtcblxuXHQgICAgLyogQW5kIGNvbnRpbnVlIGRvd24gdGhlIHRyZWUsIHNldHRpbmcgaiB0byB0aGUgbGVmdCBzb24gb2YgayAqL1xuXHQgICAgaiA8PD0gMTtcblx0ICB9XG5cdCAgcy5oZWFwW2tdID0gdjtcblx0fVxuXG5cblx0Ly8gaW5saW5lZCBtYW51YWxseVxuXHQvLyB2YXIgU01BTExFU1QgPSAxO1xuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBTZW5kIHRoZSBibG9jayBkYXRhIGNvbXByZXNzZWQgdXNpbmcgdGhlIGdpdmVuIEh1ZmZtYW4gdHJlZXNcblx0ICovXG5cdGZ1bmN0aW9uIGNvbXByZXNzX2Jsb2NrKHMsIGx0cmVlLCBkdHJlZSlcblx0Ly8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcblx0Ly8gICAgY29uc3QgY3RfZGF0YSAqbHRyZWU7IC8qIGxpdGVyYWwgdHJlZSAqL1xuXHQvLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuXHR7XG5cdCAgdmFyIGRpc3Q7ICAgICAgICAgICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuXHQgIHZhciBsYzsgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXG5cdCAgdmFyIGx4ID0gMDsgICAgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cdCAgdmFyIGNvZGU7ICAgICAgICAgICAvKiB0aGUgY29kZSB0byBzZW5kICovXG5cdCAgdmFyIGV4dHJhOyAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXG5cblx0ICBpZiAocy5sYXN0X2xpdCAhPT0gMCkge1xuXHQgICAgZG8ge1xuXHQgICAgICBkaXN0ID0gKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4KjJdIDw8IDgpIHwgKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4KjIgKyAxXSk7XG5cdCAgICAgIGxjID0gcy5wZW5kaW5nX2J1ZltzLmxfYnVmICsgbHhdO1xuXHQgICAgICBseCsrO1xuXG5cdCAgICAgIGlmIChkaXN0ID09PSAwKSB7XG5cdCAgICAgICAgc2VuZF9jb2RlKHMsIGxjLCBsdHJlZSk7IC8qIHNlbmQgYSBsaXRlcmFsIGJ5dGUgKi9cblx0ICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvKiBIZXJlLCBsYyBpcyB0aGUgbWF0Y2ggbGVuZ3RoIC0gTUlOX01BVENIICovXG5cdCAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG5cdCAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUrTElURVJBTFMrMSwgbHRyZWUpOyAvKiBzZW5kIHRoZSBsZW5ndGggY29kZSAqL1xuXHQgICAgICAgIGV4dHJhID0gZXh0cmFfbGJpdHNbY29kZV07XG5cdCAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG5cdCAgICAgICAgICBsYyAtPSBiYXNlX2xlbmd0aFtjb2RlXTtcblx0ICAgICAgICAgIHNlbmRfYml0cyhzLCBsYywgZXh0cmEpOyAgICAgICAvKiBzZW5kIHRoZSBleHRyYSBsZW5ndGggYml0cyAqL1xuXHQgICAgICAgIH1cblx0ICAgICAgICBkaXN0LS07IC8qIGRpc3QgaXMgbm93IHRoZSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cblx0ICAgICAgICBjb2RlID0gZF9jb2RlKGRpc3QpO1xuXHQgICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG5cdCAgICAgICAgc2VuZF9jb2RlKHMsIGNvZGUsIGR0cmVlKTsgICAgICAgLyogc2VuZCB0aGUgZGlzdGFuY2UgY29kZSAqL1xuXHQgICAgICAgIGV4dHJhID0gZXh0cmFfZGJpdHNbY29kZV07XG5cdCAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG5cdCAgICAgICAgICBkaXN0IC09IGJhc2VfZGlzdFtjb2RlXTtcblx0ICAgICAgICAgIHNlbmRfYml0cyhzLCBkaXN0LCBleHRyYSk7ICAgLyogc2VuZCB0aGUgZXh0cmEgZGlzdGFuY2UgYml0cyAqL1xuXHQgICAgICAgIH1cblx0ICAgICAgfSAvKiBsaXRlcmFsIG9yIG1hdGNoIHBhaXIgPyAqL1xuXG5cdCAgICAgIC8qIENoZWNrIHRoYXQgdGhlIG92ZXJsYXkgYmV0d2VlbiBwZW5kaW5nX2J1ZiBhbmQgZF9idWYrbF9idWYgaXMgb2s6ICovXG5cdCAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcblx0ICAgICAgLy8gICAgICAgXCJwZW5kaW5nQnVmIG92ZXJmbG93XCIpO1xuXG5cdCAgICB9IHdoaWxlIChseCA8IHMubGFzdF9saXQpO1xuXHQgIH1cblxuXHQgIHNlbmRfY29kZShzLCBFTkRfQkxPQ0ssIGx0cmVlKTtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIENvbnN0cnVjdCBvbmUgSHVmZm1hbiB0cmVlIGFuZCBhc3NpZ25zIHRoZSBjb2RlIGJpdCBzdHJpbmdzIGFuZCBsZW5ndGhzLlxuXHQgKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuXHQgKiBJTiBhc3NlcnRpb246IHRoZSBmaWVsZCBmcmVxIGlzIHNldCBmb3IgYWxsIHRyZWUgZWxlbWVudHMuXG5cdCAqIE9VVCBhc3NlcnRpb25zOiB0aGUgZmllbGRzIGxlbiBhbmQgY29kZSBhcmUgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhcblx0ICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXG5cdCAqICAgICBhbHNvIHVwZGF0ZWQgaWYgc3RyZWUgaXMgbm90IG51bGwuIFRoZSBmaWVsZCBtYXhfY29kZSBpcyBzZXQuXG5cdCAqL1xuXHRmdW5jdGlvbiBidWlsZF90cmVlKHMsIGRlc2MpXG5cdC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG5cdC8vICAgIHRyZWVfZGVzYyAqZGVzYzsgLyogdGhlIHRyZWUgZGVzY3JpcHRvciAqL1xuXHR7XG5cdCAgdmFyIHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcblx0ICB2YXIgc3RyZWUgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcblx0ICB2YXIgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuXHQgIHZhciBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuXHQgIHZhciBuLCBtOyAgICAgICAgICAvKiBpdGVyYXRlIG92ZXIgaGVhcCBlbGVtZW50cyAqL1xuXHQgIHZhciBtYXhfY29kZSA9IC0xOyAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cblx0ICB2YXIgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG5cdCAgLyogQ29uc3RydWN0IHRoZSBpbml0aWFsIGhlYXAsIHdpdGggbGVhc3QgZnJlcXVlbnQgZWxlbWVudCBpblxuXHQgICAqIGhlYXBbU01BTExFU1RdLiBUaGUgc29ucyBvZiBoZWFwW25dIGFyZSBoZWFwWzIqbl0gYW5kIGhlYXBbMipuKzFdLlxuXHQgICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG5cdCAgICovXG5cdCAgcy5oZWFwX2xlbiA9IDA7XG5cdCAgcy5oZWFwX21heCA9IEhFQVBfU0laRTtcblxuXHQgIGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG5cdCAgICBpZiAodHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcblx0ICAgICAgcy5oZWFwWysrcy5oZWFwX2xlbl0gPSBtYXhfY29kZSA9IG47XG5cdCAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB0cmVlW24qMiArIDFdLyouTGVuKi8gPSAwO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8qIFRoZSBwa3ppcCBmb3JtYXQgcmVxdWlyZXMgdGhhdCBhdCBsZWFzdCBvbmUgZGlzdGFuY2UgY29kZSBleGlzdHMsXG5cdCAgICogYW5kIHRoYXQgYXQgbGVhc3Qgb25lIGJpdCBzaG91bGQgYmUgc2VudCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lXG5cdCAgICogcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3Rcblx0ICAgKiB0d28gY29kZXMgb2Ygbm9uIHplcm8gZnJlcXVlbmN5LlxuXHQgICAqL1xuXHQgIHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuXHQgICAgbm9kZSA9IHMuaGVhcFsrK3MuaGVhcF9sZW5dID0gKG1heF9jb2RlIDwgMiA/ICsrbWF4X2NvZGUgOiAwKTtcblx0ICAgIHRyZWVbbm9kZSAqIDJdLyouRnJlcSovID0gMTtcblx0ICAgIHMuZGVwdGhbbm9kZV0gPSAwO1xuXHQgICAgcy5vcHRfbGVuLS07XG5cblx0ICAgIGlmIChoYXNfc3RyZWUpIHtcblx0ICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUqMiArIDFdLyouTGVuKi87XG5cdCAgICB9XG5cdCAgICAvKiBub2RlIGlzIDAgb3IgMSBzbyBpdCBkb2VzIG5vdCBoYXZlIGV4dHJhIGJpdHMgKi9cblx0ICB9XG5cdCAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG5cdCAgLyogVGhlIGVsZW1lbnRzIGhlYXBbaGVhcF9sZW4vMisxIC4uIGhlYXBfbGVuXSBhcmUgbGVhdmVzIG9mIHRoZSB0cmVlLFxuXHQgICAqIGVzdGFibGlzaCBzdWItaGVhcHMgb2YgaW5jcmVhc2luZyBsZW5ndGhzOlxuXHQgICAqL1xuXHQgIGZvciAobiA9IChzLmhlYXBfbGVuID4+IDEvKmludCAvMiovKTsgbiA+PSAxOyBuLS0pIHsgcHFkb3duaGVhcChzLCB0cmVlLCBuKTsgfVxuXG5cdCAgLyogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgYnkgcmVwZWF0ZWRseSBjb21iaW5pbmcgdGhlIGxlYXN0IHR3b1xuXHQgICAqIGZyZXF1ZW50IG5vZGVzLlxuXHQgICAqL1xuXHQgIG5vZGUgPSBlbGVtczsgICAgICAgICAgICAgIC8qIG5leHQgaW50ZXJuYWwgbm9kZSBvZiB0aGUgdHJlZSAqL1xuXHQgIGRvIHtcblx0ICAgIC8vcHFyZW1vdmUocywgdHJlZSwgbik7ICAvKiBuID0gbm9kZSBvZiBsZWFzdCBmcmVxdWVuY3kgKi9cblx0ICAgIC8qKiogcHFyZW1vdmUgKioqL1xuXHQgICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcblx0ICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IHMuaGVhcFtzLmhlYXBfbGVuLS1dO1xuXHQgICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcblx0ICAgIC8qKiovXG5cblx0ICAgIG0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107IC8qIG0gPSBub2RlIG9mIG5leHQgbGVhc3QgZnJlcXVlbmN5ICovXG5cblx0ICAgIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gbjsgLyoga2VlcCB0aGUgbm9kZXMgc29ydGVkIGJ5IGZyZXF1ZW5jeSAqL1xuXHQgICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG5cdCAgICAvKiBDcmVhdGUgYSBuZXcgbm9kZSBmYXRoZXIgb2YgbiBhbmQgbSAqL1xuXHQgICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSB0cmVlW24gKiAyXS8qLkZyZXEqLyArIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuXHQgICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xuXHQgICAgdHJlZVtuKjIgKyAxXS8qLkRhZCovID0gdHJlZVttKjIgKyAxXS8qLkRhZCovID0gbm9kZTtcblxuXHQgICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cblx0ICAgIHMuaGVhcFsxLypTTUFMTEVTVCovXSA9IG5vZGUrKztcblx0ICAgIHBxZG93bmhlYXAocywgdHJlZSwgMS8qU01BTExFU1QqLyk7XG5cblx0ICB9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG5cdCAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBzLmhlYXBbMS8qU01BTExFU1QqL107XG5cblx0ICAvKiBBdCB0aGlzIHBvaW50LCB0aGUgZmllbGRzIGZyZXEgYW5kIGRhZCBhcmUgc2V0LiBXZSBjYW4gbm93XG5cdCAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuXHQgICAqL1xuXHQgIGdlbl9iaXRsZW4ocywgZGVzYyk7XG5cblx0ICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG5cdCAgZ2VuX2NvZGVzKHRyZWUsIG1heF9jb2RlLCBzLmJsX2NvdW50KTtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFNjYW4gYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgdG8gZGV0ZXJtaW5lIHRoZSBmcmVxdWVuY2llcyBvZiB0aGUgY29kZXNcblx0ICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cblx0ICovXG5cdGZ1bmN0aW9uIHNjYW5fdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcblx0Ly8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcblx0Ly8gICAgY3RfZGF0YSAqdHJlZTsgICAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG5cdC8vICAgIGludCBtYXhfY29kZTsgICAgLyogYW5kIGl0cyBsYXJnZXN0IGNvZGUgb2Ygbm9uIHplcm8gZnJlcXVlbmN5ICovXG5cdHtcblx0ICB2YXIgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG5cdCAgdmFyIHByZXZsZW4gPSAtMTsgICAgICAgICAgLyogbGFzdCBlbWl0dGVkIGxlbmd0aCAqL1xuXHQgIHZhciBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuXHQgIHZhciBuZXh0bGVuID0gdHJlZVswKjIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cblx0ICB2YXIgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuXHQgIHZhciBtYXhfY291bnQgPSA3OyAgICAgICAgIC8qIG1heCByZXBlYXQgY291bnQgKi9cblx0ICB2YXIgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cblx0ICBpZiAobmV4dGxlbiA9PT0gMCkge1xuXHQgICAgbWF4X2NvdW50ID0gMTM4O1xuXHQgICAgbWluX2NvdW50ID0gMztcblx0ICB9XG5cdCAgdHJlZVsobWF4X2NvZGUrMSkqMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cblx0ICBmb3IgKG4gPSAwOyBuIDw9IG1heF9jb2RlOyBuKyspIHtcblx0ICAgIGN1cmxlbiA9IG5leHRsZW47XG5cdCAgICBuZXh0bGVuID0gdHJlZVsobisxKSoyICsgMV0vKi5MZW4qLztcblxuXHQgICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG5cdCAgICAgIGNvbnRpbnVlO1xuXG5cdCAgICB9IGVsc2UgaWYgKGNvdW50IDwgbWluX2NvdW50KSB7XG5cdCAgICAgIHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLyArPSBjb3VudDtcblxuXHQgICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuXHQgICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7IHMuYmxfdHJlZVtjdXJsZW4gKiAyXS8qLkZyZXEqLysrOyB9XG5cdCAgICAgIHMuYmxfdHJlZVtSRVBfM182KjJdLyouRnJlcSovKys7XG5cblx0ICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcblx0ICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCoyXS8qLkZyZXEqLysrO1xuXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBzLmJsX3RyZWVbUkVQWl8xMV8xMzgqMl0vKi5GcmVxKi8rKztcblx0ICAgIH1cblxuXHQgICAgY291bnQgPSAwO1xuXHQgICAgcHJldmxlbiA9IGN1cmxlbjtcblxuXHQgICAgaWYgKG5leHRsZW4gPT09IDApIHtcblx0ICAgICAgbWF4X2NvdW50ID0gMTM4O1xuXHQgICAgICBtaW5fY291bnQgPSAzO1xuXG5cdCAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuXHQgICAgICBtYXhfY291bnQgPSA2O1xuXHQgICAgICBtaW5fY291bnQgPSAzO1xuXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBtYXhfY291bnQgPSA3O1xuXHQgICAgICBtaW5fY291bnQgPSA0O1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cblx0ICogYmxfdHJlZS5cblx0ICovXG5cdGZ1bmN0aW9uIHNlbmRfdHJlZShzLCB0cmVlLCBtYXhfY29kZSlcblx0Ly8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcblx0Ly8gICAgY3RfZGF0YSAqdHJlZTsgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuXHQvLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuXHR7XG5cdCAgdmFyIG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuXHQgIHZhciBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cblx0ICB2YXIgY3VybGVuOyAgICAgICAgICAgICAgICAvKiBsZW5ndGggb2YgY3VycmVudCBjb2RlICovXG5cblx0ICB2YXIgbmV4dGxlbiA9IHRyZWVbMCoyICsgMV0vKi5MZW4qLzsgLyogbGVuZ3RoIG9mIG5leHQgY29kZSAqL1xuXG5cdCAgdmFyIGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cblx0ICB2YXIgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG5cdCAgdmFyIG1pbl9jb3VudCA9IDQ7ICAgICAgICAgLyogbWluIHJlcGVhdCBjb3VudCAqL1xuXG5cdCAgLyogdHJlZVttYXhfY29kZSsxXS5MZW4gPSAtMTsgKi8gIC8qIGd1YXJkIGFscmVhZHkgc2V0ICovXG5cdCAgaWYgKG5leHRsZW4gPT09IDApIHtcblx0ICAgIG1heF9jb3VudCA9IDEzODtcblx0ICAgIG1pbl9jb3VudCA9IDM7XG5cdCAgfVxuXG5cdCAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG5cdCAgICBjdXJsZW4gPSBuZXh0bGVuO1xuXHQgICAgbmV4dGxlbiA9IHRyZWVbKG4rMSkqMiArIDFdLyouTGVuKi87XG5cblx0ICAgIGlmICgrK2NvdW50IDwgbWF4X2NvdW50ICYmIGN1cmxlbiA9PT0gbmV4dGxlbikge1xuXHQgICAgICBjb250aW51ZTtcblxuXHQgICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuXHQgICAgICBkbyB7IHNlbmRfY29kZShzLCBjdXJsZW4sIHMuYmxfdHJlZSk7IH0gd2hpbGUgKC0tY291bnQgIT09IDApO1xuXG5cdCAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuXHQgICAgICBpZiAoY3VybGVuICE9PSBwcmV2bGVuKSB7XG5cdCAgICAgICAgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTtcblx0ICAgICAgICBjb3VudC0tO1xuXHQgICAgICB9XG5cdCAgICAgIC8vQXNzZXJ0KGNvdW50ID49IDMgJiYgY291bnQgPD0gNiwgXCIgM182P1wiKTtcblx0ICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG5cdCAgICAgIHNlbmRfYml0cyhzLCBjb3VudC0zLCAyKTtcblxuXHQgICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuXHQgICAgICBzZW5kX2NvZGUocywgUkVQWl8zXzEwLCBzLmJsX3RyZWUpO1xuXHQgICAgICBzZW5kX2JpdHMocywgY291bnQtMywgMyk7XG5cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHNlbmRfY29kZShzLCBSRVBaXzExXzEzOCwgcy5ibF90cmVlKTtcblx0ICAgICAgc2VuZF9iaXRzKHMsIGNvdW50LTExLCA3KTtcblx0ICAgIH1cblxuXHQgICAgY291bnQgPSAwO1xuXHQgICAgcHJldmxlbiA9IGN1cmxlbjtcblx0ICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG5cdCAgICAgIG1heF9jb3VudCA9IDEzODtcblx0ICAgICAgbWluX2NvdW50ID0gMztcblxuXHQgICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcblx0ICAgICAgbWF4X2NvdW50ID0gNjtcblx0ICAgICAgbWluX2NvdW50ID0gMztcblxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgbWF4X2NvdW50ID0gNztcblx0ICAgICAgbWluX2NvdW50ID0gNDtcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBmb3IgdGhlIGJpdCBsZW5ndGhzIGFuZCByZXR1cm4gdGhlIGluZGV4IGluXG5cdCAqIGJsX29yZGVyIG9mIHRoZSBsYXN0IGJpdCBsZW5ndGggY29kZSB0byBzZW5kLlxuXHQgKi9cblx0ZnVuY3Rpb24gYnVpbGRfYmxfdHJlZShzKSB7XG5cdCAgdmFyIG1heF9ibGluZGV4OyAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG5cdCAgLyogRGV0ZXJtaW5lIHRoZSBiaXQgbGVuZ3RoIGZyZXF1ZW5jaWVzIGZvciBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xuXHQgIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuXHQgIHNjYW5fdHJlZShzLCBzLmR5bl9kdHJlZSwgcy5kX2Rlc2MubWF4X2NvZGUpO1xuXG5cdCAgLyogQnVpbGQgdGhlIGJpdCBsZW5ndGggdHJlZTogKi9cblx0ICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG5cdCAgLyogb3B0X2xlbiBub3cgaW5jbHVkZXMgdGhlIGxlbmd0aCBvZiB0aGUgdHJlZSByZXByZXNlbnRhdGlvbnMsIGV4Y2VwdFxuXHQgICAqIHRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RocyBjb2RlcyBhbmQgdGhlIDUrNSs0IGJpdHMgZm9yIHRoZSBjb3VudHMuXG5cdCAgICovXG5cblx0ICAvKiBEZXRlcm1pbmUgdGhlIG51bWJlciBvZiBiaXQgbGVuZ3RoIGNvZGVzIHRvIHNlbmQuIFRoZSBwa3ppcCBmb3JtYXRcblx0ICAgKiByZXF1aXJlcyB0aGF0IGF0IGxlYXN0IDQgYml0IGxlbmd0aCBjb2RlcyBiZSBzZW50LiAoYXBwbm90ZS50eHQgc2F5c1xuXHQgICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0Lilcblx0ICAgKi9cblx0ICBmb3IgKG1heF9ibGluZGV4ID0gQkxfQ09ERVMtMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuXHQgICAgaWYgKHMuYmxfdHJlZVtibF9vcmRlclttYXhfYmxpbmRleF0qMiArIDFdLyouTGVuKi8gIT09IDApIHtcblx0ICAgICAgYnJlYWs7XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8qIFVwZGF0ZSBvcHRfbGVuIHRvIGluY2x1ZGUgdGhlIGJpdCBsZW5ndGggdHJlZSBhbmQgY291bnRzICovXG5cdCAgcy5vcHRfbGVuICs9IDMqKG1heF9ibGluZGV4KzEpICsgNSs1KzQ7XG5cdCAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5keW4gdHJlZXM6IGR5biAlbGQsIHN0YXQgJWxkXCIsXG5cdCAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuXHQgIHJldHVybiBtYXhfYmxpbmRleDtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFNlbmQgdGhlIGhlYWRlciBmb3IgYSBibG9jayB1c2luZyBkeW5hbWljIEh1ZmZtYW4gdHJlZXM6IHRoZSBjb3VudHMsIHRoZVxuXHQgKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cblx0ICogSU4gYXNzZXJ0aW9uOiBsY29kZXMgPj0gMjU3LCBkY29kZXMgPj0gMSwgYmxjb2RlcyA+PSA0LlxuXHQgKi9cblx0ZnVuY3Rpb24gc2VuZF9hbGxfdHJlZXMocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpXG5cdC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG5cdC8vICAgIGludCBsY29kZXMsIGRjb2RlcywgYmxjb2RlczsgLyogbnVtYmVyIG9mIGNvZGVzIGZvciBlYWNoIHRyZWUgKi9cblx0e1xuXHQgIHZhciByYW5rOyAgICAgICAgICAgICAgICAgICAgLyogaW5kZXggaW4gYmxfb3JkZXIgKi9cblxuXHQgIC8vQXNzZXJ0IChsY29kZXMgPj0gMjU3ICYmIGRjb2RlcyA+PSAxICYmIGJsY29kZXMgPj0gNCwgXCJub3QgZW5vdWdoIGNvZGVzXCIpO1xuXHQgIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLFxuXHQgIC8vICAgICAgICBcInRvbyBtYW55IGNvZGVzXCIpO1xuXHQgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY291bnRzOiBcIikpO1xuXHQgIHNlbmRfYml0cyhzLCBsY29kZXMtMjU3LCA1KTsgLyogbm90ICsyNTUgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG5cdCAgc2VuZF9iaXRzKHMsIGRjb2Rlcy0xLCAgIDUpO1xuXHQgIHNlbmRfYml0cyhzLCBibGNvZGVzLTQsICA0KTsgLyogbm90IC0zIGFzIHN0YXRlZCBpbiBhcHBub3RlLnR4dCAqL1xuXHQgIGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcblx0ICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiXFxuYmwgY29kZSAlMmQgXCIsIGJsX29yZGVyW3JhbmtdKSk7XG5cdCAgICBzZW5kX2JpdHMocywgcy5ibF90cmVlW2JsX29yZGVyW3JhbmtdKjIgKyAxXS8qLkxlbiovLCAzKTtcblx0ICB9XG5cdCAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuXHQgIHNlbmRfdHJlZShzLCBzLmR5bl9sdHJlZSwgbGNvZGVzLTEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cblx0ICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmxpdCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuXHQgIHNlbmRfdHJlZShzLCBzLmR5bl9kdHJlZSwgZGNvZGVzLTEpOyAvKiBkaXN0YW5jZSB0cmVlICovXG5cdCAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5kaXN0IHRyZWU6IHNlbnQgJWxkXCIsIHMtPmJpdHNfc2VudCkpO1xuXHR9XG5cblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogQ2hlY2sgaWYgdGhlIGRhdGEgdHlwZSBpcyBURVhUIG9yIEJJTkFSWSwgdXNpbmcgdGhlIGZvbGxvd2luZyBhbGdvcml0aG06XG5cdCAqIC0gVEVYVCBpZiB0aGUgdHdvIGNvbmRpdGlvbnMgYmVsb3cgYXJlIHNhdGlzZmllZDpcblx0ICogICAgYSkgVGhlcmUgYXJlIG5vIG5vbi1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgYmVsb25naW5nIHRvIHRoZVxuXHQgKiAgICAgICBcImJsYWNrIGxpc3RcIiAoMC4uNiwgMTQuLjI1LCAyOC4uMzEpLlxuXHQgKiAgICBiKSBUaGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJpbnRhYmxlIGNoYXJhY3RlciBiZWxvbmdpbmcgdG8gdGhlXG5cdCAqICAgICAgIFwid2hpdGUgbGlzdFwiICg5IHtUQUJ9LCAxMCB7TEZ9LCAxMyB7Q1J9LCAzMi4uMjU1KS5cblx0ICogLSBCSU5BUlkgb3RoZXJ3aXNlLlxuXHQgKiAtIFRoZSBmb2xsb3dpbmcgcGFydGlhbGx5LXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBmb3JtIGFcblx0ICogICBcImdyYXkgbGlzdFwiIHRoYXQgaXMgaWdub3JlZCBpbiB0aGlzIGRldGVjdGlvbiBhbGdvcml0aG06XG5cdCAqICAgKDcge0JFTH0sIDgge0JTfSwgMTEge1ZUfSwgMTIge0ZGfSwgMjYge1NVQn0sIDI3IHtFU0N9KS5cblx0ICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGRzIEZyZXEgb2YgZHluX2x0cmVlIGFyZSBzZXQuXG5cdCAqL1xuXHRmdW5jdGlvbiBkZXRlY3RfZGF0YV90eXBlKHMpIHtcblx0ICAvKiBibGFja19tYXNrIGlzIHRoZSBiaXQgbWFzayBvZiBibGFjay1saXN0ZWQgYnl0ZXNcblx0ICAgKiBzZXQgYml0cyAwLi42LCAxNC4uMjUsIGFuZCAyOC4uMzFcblx0ICAgKiAweGYzZmZjMDdmID0gYmluYXJ5IDExMTEwMDExMTExMTExMTExMTAwMDAwMDAxMTExMTExXG5cdCAgICovXG5cdCAgdmFyIGJsYWNrX21hc2sgPSAweGYzZmZjMDdmO1xuXHQgIHZhciBuO1xuXG5cdCAgLyogQ2hlY2sgZm9yIG5vbi10ZXh0dWFsIChcImJsYWNrLWxpc3RlZFwiKSBieXRlcy4gKi9cblx0ICBmb3IgKG4gPSAwOyBuIDw9IDMxOyBuKyssIGJsYWNrX21hc2sgPj4+PSAxKSB7XG5cdCAgICBpZiAoKGJsYWNrX21hc2sgJiAxKSAmJiAocy5keW5fbHRyZWVbbioyXS8qLkZyZXEqLyAhPT0gMCkpIHtcblx0ICAgICAgcmV0dXJuIFpfQklOQVJZO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIC8qIENoZWNrIGZvciB0ZXh0dWFsIChcIndoaXRlLWxpc3RlZFwiKSBieXRlcy4gKi9cblx0ICBpZiAocy5keW5fbHRyZWVbOSAqIDJdLyouRnJlcSovICE9PSAwIHx8IHMuZHluX2x0cmVlWzEwICogMl0vKi5GcmVxKi8gIT09IDAgfHxcblx0ICAgICAgcy5keW5fbHRyZWVbMTMgKiAyXS8qLkZyZXEqLyAhPT0gMCkge1xuXHQgICAgcmV0dXJuIFpfVEVYVDtcblx0ICB9XG5cdCAgZm9yIChuID0gMzI7IG4gPCBMSVRFUkFMUzsgbisrKSB7XG5cdCAgICBpZiAocy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG5cdCAgICAgIHJldHVybiBaX1RFWFQ7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgLyogVGhlcmUgYXJlIG5vIFwiYmxhY2stbGlzdGVkXCIgb3IgXCJ3aGl0ZS1saXN0ZWRcIiBieXRlczpcblx0ICAgKiB0aGlzIHN0cmVhbSBlaXRoZXIgaXMgZW1wdHkgb3IgaGFzIHRvbGVyYXRlZCAoXCJncmF5LWxpc3RlZFwiKSBieXRlcyBvbmx5LlxuXHQgICAqL1xuXHQgIHJldHVybiBaX0JJTkFSWTtcblx0fVxuXG5cblx0dmFyIHN0YXRpY19pbml0X2RvbmUgPSBmYWxzZTtcblxuXHQvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0ICogSW5pdGlhbGl6ZSB0aGUgdHJlZSBkYXRhIHN0cnVjdHVyZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtLlxuXHQgKi9cblx0ZnVuY3Rpb24gX3RyX2luaXQocylcblx0e1xuXG5cdCAgaWYgKCFzdGF0aWNfaW5pdF9kb25lKSB7XG5cdCAgICB0cl9zdGF0aWNfaW5pdCgpO1xuXHQgICAgc3RhdGljX2luaXRfZG9uZSA9IHRydWU7XG5cdCAgfVxuXG5cdCAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcblx0ICBzLmRfZGVzYyAgPSBuZXcgVHJlZURlc2Mocy5keW5fZHRyZWUsIHN0YXRpY19kX2Rlc2MpO1xuXHQgIHMuYmxfZGVzYyA9IG5ldyBUcmVlRGVzYyhzLmJsX3RyZWUsIHN0YXRpY19ibF9kZXNjKTtcblxuXHQgIHMuYmlfYnVmID0gMDtcblx0ICBzLmJpX3ZhbGlkID0gMDtcblxuXHQgIC8qIEluaXRpYWxpemUgdGhlIGZpcnN0IGJsb2NrIG9mIHRoZSBmaXJzdCBmaWxlOiAqL1xuXHQgIGluaXRfYmxvY2socyk7XG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBTZW5kIGEgc3RvcmVkIGJsb2NrXG5cdCAqL1xuXHRmdW5jdGlvbiBfdHJfc3RvcmVkX2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgbGFzdClcblx0Ly9EZWZsYXRlU3RhdGUgKnM7XG5cdC8vY2hhcmYgKmJ1ZjsgICAgICAgLyogaW5wdXQgYmxvY2sgKi9cblx0Ly91bGcgc3RvcmVkX2xlbjsgICAvKiBsZW5ndGggb2YgaW5wdXQgYmxvY2sgKi9cblx0Ly9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG5cdHtcblx0ICBzZW5kX2JpdHMocywgKFNUT1JFRF9CTE9DSzw8MSkrKGxhc3QgPyAxIDogMCksIDMpOyAgICAvKiBzZW5kIGJsb2NrIHR5cGUgKi9cblx0ICBjb3B5X2Jsb2NrKHMsIGJ1Ziwgc3RvcmVkX2xlbiwgdHJ1ZSk7IC8qIHdpdGggaGVhZGVyICovXG5cdH1cblxuXG5cdC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQgKiBTZW5kIG9uZSBlbXB0eSBzdGF0aWMgYmxvY2sgdG8gZ2l2ZSBlbm91Z2ggbG9va2FoZWFkIGZvciBpbmZsYXRlLlxuXHQgKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cblx0ICovXG5cdGZ1bmN0aW9uIF90cl9hbGlnbihzKSB7XG5cdCAgc2VuZF9iaXRzKHMsIFNUQVRJQ19UUkVFUzw8MSwgMyk7XG5cdCAgc2VuZF9jb2RlKHMsIEVORF9CTE9DSywgc3RhdGljX2x0cmVlKTtcblx0ICBiaV9mbHVzaChzKTtcblx0fVxuXG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIERldGVybWluZSB0aGUgYmVzdCBlbmNvZGluZyBmb3IgdGhlIGN1cnJlbnQgYmxvY2s6IGR5bmFtaWMgdHJlZXMsIHN0YXRpY1xuXHQgKiB0cmVlcyBvciBzdG9yZSwgYW5kIG91dHB1dCB0aGUgZW5jb2RlZCBibG9jayB0byB0aGUgemlwIGZpbGUuXG5cdCAqL1xuXHRmdW5jdGlvbiBfdHJfZmx1c2hfYmxvY2socywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KVxuXHQvL0RlZmxhdGVTdGF0ZSAqcztcblx0Ly9jaGFyZiAqYnVmOyAgICAgICAvKiBpbnB1dCBibG9jaywgb3IgTlVMTCBpZiB0b28gb2xkICovXG5cdC8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG5cdC8vaW50IGxhc3Q7ICAgICAgICAgLyogb25lIGlmIHRoaXMgaXMgdGhlIGxhc3QgYmxvY2sgZm9yIGEgZmlsZSAqL1xuXHR7XG5cdCAgdmFyIG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cblx0ICB2YXIgbWF4X2JsaW5kZXggPSAwOyAgICAgICAgLyogaW5kZXggb2YgbGFzdCBiaXQgbGVuZ3RoIGNvZGUgb2Ygbm9uIHplcm8gZnJlcSAqL1xuXG5cdCAgLyogQnVpbGQgdGhlIEh1ZmZtYW4gdHJlZXMgdW5sZXNzIGEgc3RvcmVkIGJsb2NrIGlzIGZvcmNlZCAqL1xuXHQgIGlmIChzLmxldmVsID4gMCkge1xuXG5cdCAgICAvKiBDaGVjayBpZiB0aGUgZmlsZSBpcyBiaW5hcnkgb3IgdGV4dCAqL1xuXHQgICAgaWYgKHMuc3RybS5kYXRhX3R5cGUgPT09IFpfVU5LTk9XTikge1xuXHQgICAgICBzLnN0cm0uZGF0YV90eXBlID0gZGV0ZWN0X2RhdGFfdHlwZShzKTtcblx0ICAgIH1cblxuXHQgICAgLyogQ29uc3RydWN0IHRoZSBsaXRlcmFsIGFuZCBkaXN0YW5jZSB0cmVlcyAqL1xuXHQgICAgYnVpbGRfdHJlZShzLCBzLmxfZGVzYyk7XG5cdCAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcblx0ICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG5cblx0ICAgIGJ1aWxkX3RyZWUocywgcy5kX2Rlc2MpO1xuXHQgICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuXHQgICAgLy8gICAgICAgIHMtPnN0YXRpY19sZW4pKTtcblx0ICAgIC8qIEF0IHRoaXMgcG9pbnQsIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gYXJlIHRoZSB0b3RhbCBiaXQgbGVuZ3RocyBvZlxuXHQgICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cblx0ICAgICAqL1xuXG5cdCAgICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlIGZvciB0aGUgYWJvdmUgdHdvIHRyZWVzLCBhbmQgZ2V0IHRoZSBpbmRleFxuXHQgICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG5cdCAgICAgKi9cblx0ICAgIG1heF9ibGluZGV4ID0gYnVpbGRfYmxfdHJlZShzKTtcblxuXHQgICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuXHQgICAgb3B0X2xlbmIgPSAocy5vcHRfbGVuKzMrNykgPj4+IDM7XG5cdCAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4rMys3KSA+Pj4gMztcblxuXHQgICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxub3B0ICVsdSglbHUpIHN0YXQgJWx1KCVsdSkgc3RvcmVkICVsdSBsaXQgJXUgXCIsXG5cdCAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuXHQgICAgLy8gICAgICAgIHMtPmxhc3RfbGl0KSk7XG5cblx0ICAgIGlmIChzdGF0aWNfbGVuYiA8PSBvcHRfbGVuYikgeyBvcHRfbGVuYiA9IHN0YXRpY19sZW5iOyB9XG5cblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gQXNzZXJ0KGJ1ZiAhPSAoY2hhciopMCwgXCJsb3N0IGJ1ZlwiKTtcblx0ICAgIG9wdF9sZW5iID0gc3RhdGljX2xlbmIgPSBzdG9yZWRfbGVuICsgNTsgLyogZm9yY2UgYSBzdG9yZWQgYmxvY2sgKi9cblx0ICB9XG5cblx0ICBpZiAoKHN0b3JlZF9sZW4rNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG5cdCAgICAvKiA0OiB0d28gd29yZHMgZm9yIHRoZSBsZW5ndGhzICovXG5cblx0ICAgIC8qIFRoZSB0ZXN0IGJ1ZiAhPSBOVUxMIGlzIG9ubHkgbmVjZXNzYXJ5IGlmIExJVF9CVUZTSVpFID4gV1NJWkUuXG5cdCAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG5cdCAgICAgKiB0aGUgbGFzdCBibG9jayBmbHVzaCwgYmVjYXVzZSBjb21wcmVzc2lvbiB3b3VsZCBoYXZlIGJlZW5cblx0ICAgICAqIHN1Y2Nlc3NmdWwuIElmIExJVF9CVUZTSVpFIDw9IFdTSVpFLCBpdCBpcyBuZXZlciB0b28gbGF0ZSB0b1xuXHQgICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cblx0ICAgICAqL1xuXHQgICAgX3RyX3N0b3JlZF9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIGxhc3QpO1xuXG5cdCAgfSBlbHNlIGlmIChzLnN0cmF0ZWd5ID09PSBaX0ZJWEVEIHx8IHN0YXRpY19sZW5iID09PSBvcHRfbGVuYikge1xuXG5cdCAgICBzZW5kX2JpdHMocywgKFNUQVRJQ19UUkVFUzw8MSkgKyAobGFzdCA/IDEgOiAwKSwgMyk7XG5cdCAgICBjb21wcmVzc19ibG9jayhzLCBzdGF0aWNfbHRyZWUsIHN0YXRpY19kdHJlZSk7XG5cblx0ICB9IGVsc2Uge1xuXHQgICAgc2VuZF9iaXRzKHMsIChEWU5fVFJFRVM8PDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuXHQgICAgc2VuZF9hbGxfdHJlZXMocywgcy5sX2Rlc2MubWF4X2NvZGUrMSwgcy5kX2Rlc2MubWF4X2NvZGUrMSwgbWF4X2JsaW5kZXgrMSk7XG5cdCAgICBjb21wcmVzc19ibG9jayhzLCBzLmR5bl9sdHJlZSwgcy5keW5fZHRyZWUpO1xuXHQgIH1cblx0ICAvLyBBc3NlcnQgKHMtPmNvbXByZXNzZWRfbGVuID09IHMtPmJpdHNfc2VudCwgXCJiYWQgY29tcHJlc3NlZCBzaXplXCIpO1xuXHQgIC8qIFRoZSBhYm92ZSBjaGVjayBpcyBtYWRlIG1vZCAyXjMyLCBmb3IgZmlsZXMgbGFyZ2VyIHRoYW4gNTEyIE1CXG5cdCAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG5cdCAgICovXG5cdCAgaW5pdF9ibG9jayhzKTtcblxuXHQgIGlmIChsYXN0KSB7XG5cdCAgICBiaV93aW5kdXAocyk7XG5cdCAgfVxuXHQgIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuXHQgIC8vICAgICAgIHMtPmNvbXByZXNzZWRfbGVuLTcqbGFzdCkpO1xuXHR9XG5cblx0LyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdCAqIFNhdmUgdGhlIG1hdGNoIGluZm8gYW5kIHRhbGx5IHRoZSBmcmVxdWVuY3kgY291bnRzLiBSZXR1cm4gdHJ1ZSBpZlxuXHQgKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuXG5cdCAqL1xuXHRmdW5jdGlvbiBfdHJfdGFsbHkocywgZGlzdCwgbGMpXG5cdC8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG5cdC8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuXHQvLyAgICB1bnNpZ25lZCBsYzsgICAgLyogbWF0Y2ggbGVuZ3RoLU1JTl9NQVRDSCBvciB1bm1hdGNoZWQgY2hhciAoaWYgZGlzdD09MCkgKi9cblx0e1xuXHQgIC8vdmFyIG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cblx0ICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMl0gICAgID0gKGRpc3QgPj4+IDgpICYgMHhmZjtcblx0ICBzLnBlbmRpbmdfYnVmW3MuZF9idWYgKyBzLmxhc3RfbGl0ICogMiArIDFdID0gZGlzdCAmIDB4ZmY7XG5cblx0ICBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBzLmxhc3RfbGl0XSA9IGxjICYgMHhmZjtcblx0ICBzLmxhc3RfbGl0Kys7XG5cblx0ICBpZiAoZGlzdCA9PT0gMCkge1xuXHQgICAgLyogbGMgaXMgdGhlIHVubWF0Y2hlZCBjaGFyICovXG5cdCAgICBzLmR5bl9sdHJlZVtsYyoyXS8qLkZyZXEqLysrO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBzLm1hdGNoZXMrKztcblx0ICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cblx0ICAgIGRpc3QtLTsgICAgICAgICAgICAgLyogZGlzdCA9IG1hdGNoIGRpc3RhbmNlIC0gMSAqL1xuXHQgICAgLy9Bc3NlcnQoKHVzaClkaXN0IDwgKHVzaClNQVhfRElTVChzKSAmJlxuXHQgICAgLy8gICAgICAgKHVzaClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJlxuXHQgICAgLy8gICAgICAgKHVzaClkX2NvZGUoZGlzdCkgPCAodXNoKURfQ09ERVMsICBcIl90cl90YWxseTogYmFkIG1hdGNoXCIpO1xuXG5cdCAgICBzLmR5bl9sdHJlZVsoX2xlbmd0aF9jb2RlW2xjXStMSVRFUkFMUysxKSAqIDJdLyouRnJlcSovKys7XG5cdCAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuXHQgIH1cblxuXHQvLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmFpbHRzLFxuXHQvLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cblx0Ly8jaWZkZWYgVFJVTkNBVEVfQkxPQ0tcblx0Ly8gIC8qIFRyeSB0byBndWVzcyBpZiBpdCBpcyBwcm9maXRhYmxlIHRvIHN0b3AgdGhlIGN1cnJlbnQgYmxvY2sgaGVyZSAqL1xuXHQvLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuXHQvLyAgICAvKiBDb21wdXRlIGFuIHVwcGVyIGJvdW5kIGZvciB0aGUgY29tcHJlc3NlZCBsZW5ndGggKi9cblx0Ly8gICAgb3V0X2xlbmd0aCA9IHMubGFzdF9saXQqODtcblx0Ly8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG5cdC8vXG5cdC8vICAgIGZvciAoZGNvZGUgPSAwOyBkY29kZSA8IERfQ09ERVM7IGRjb2RlKyspIHtcblx0Ly8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuXHQvLyAgICB9XG5cdC8vICAgIG91dF9sZW5ndGggPj4+PSAzO1xuXHQvLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuXHQvLyAgICAvLyAgICAgICBzLT5sYXN0X2xpdCwgaW5fbGVuZ3RoLCBvdXRfbGVuZ3RoLFxuXHQvLyAgICAvLyAgICAgICAxMDBMIC0gb3V0X2xlbmd0aCoxMDBML2luX2xlbmd0aCkpO1xuXHQvLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG5cdC8vICAgICAgcmV0dXJuIHRydWU7XG5cdC8vICAgIH1cblx0Ly8gIH1cblx0Ly8jZW5kaWZcblxuXHQgIHJldHVybiAocy5sYXN0X2xpdCA9PT0gcy5saXRfYnVmc2l6ZS0xKTtcblx0ICAvKiBXZSBhdm9pZCBlcXVhbGl0eSB3aXRoIGxpdF9idWZzaXplIGJlY2F1c2Ugb2Ygd3JhcGFyb3VuZCBhdCA2NEtcblx0ICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuXHQgICAqIDY0Sy0xIGJ5dGVzLlxuXHQgICAqL1xuXHR9XG5cblx0ZXhwb3J0cy5fdHJfaW5pdCAgPSBfdHJfaW5pdDtcblx0ZXhwb3J0cy5fdHJfc3RvcmVkX2Jsb2NrID0gX3RyX3N0b3JlZF9ibG9jaztcblx0ZXhwb3J0cy5fdHJfZmx1c2hfYmxvY2sgID0gX3RyX2ZsdXNoX2Jsb2NrO1xuXHRleHBvcnRzLl90cl90YWxseSA9IF90cl90YWxseTtcblx0ZXhwb3J0cy5fdHJfYWxpZ24gPSBfdHJfYWxpZ247XG5cdH0se1wiLi4vdXRpbHMvY29tbW9uXCI6Mjd9XSwzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cdGZ1bmN0aW9uIFpTdHJlYW0oKSB7XG5cdCAgLyogbmV4dCBpbnB1dCBieXRlICovXG5cdCAgdGhpcy5pbnB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblx0ICB0aGlzLm5leHRfaW4gPSAwO1xuXHQgIC8qIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUgYXQgaW5wdXQgKi9cblx0ICB0aGlzLmF2YWlsX2luID0gMDtcblx0ICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi9cblx0ICB0aGlzLnRvdGFsX2luID0gMDtcblx0ICAvKiBuZXh0IG91dHB1dCBieXRlIHNob3VsZCBiZSBwdXQgdGhlcmUgKi9cblx0ICB0aGlzLm91dHB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcblx0ICB0aGlzLm5leHRfb3V0ID0gMDtcblx0ICAvKiByZW1haW5pbmcgZnJlZSBzcGFjZSBhdCBvdXRwdXQgKi9cblx0ICB0aGlzLmF2YWlsX291dCA9IDA7XG5cdCAgLyogdG90YWwgbnVtYmVyIG9mIGJ5dGVzIG91dHB1dCBzbyBmYXIgKi9cblx0ICB0aGlzLnRvdGFsX291dCA9IDA7XG5cdCAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBOVUxMIGlmIG5vIGVycm9yICovXG5cdCAgdGhpcy5tc2cgPSAnJy8qWl9OVUxMKi87XG5cdCAgLyogbm90IHZpc2libGUgYnkgYXBwbGljYXRpb25zICovXG5cdCAgdGhpcy5zdGF0ZSA9IG51bGw7XG5cdCAgLyogYmVzdCBndWVzcyBhYm91dCB0aGUgZGF0YSB0eXBlOiBiaW5hcnkgb3IgdGV4dCAqL1xuXHQgIHRoaXMuZGF0YV90eXBlID0gMi8qWl9VTktOT1dOKi87XG5cdCAgLyogYWRsZXIzMiB2YWx1ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGRhdGEgKi9cblx0ICB0aGlzLmFkbGVyID0gMDtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gWlN0cmVhbTtcblx0fSx7fV19LHt9LFs5XSlcblx0KDkpXG5cdH0pO1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7IiwiaW1wb3J0ICogYXMgWExTWCBmcm9tICd0cy14bHN4JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhc3luY0xvYWRKU09ORmlsZShmaWxlLCBjYWxsYmFjaykge1xyXG4gICAgbGV0IHJhd0ZpbGUgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHJhd0ZpbGUub3ZlcnJpZGVNaW1lVHlwZShcImFwcGxpY2F0aW9uL2pzb25cIik7XHJcbiAgICByYXdGaWxlLm9wZW4oXCJHRVRcIiwgZmlsZSwgdHJ1ZSk7XHJcbiAgICByYXdGaWxlLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAocmF3RmlsZS5yZWFkeVN0YXRlID09PSA0ICYmIHJhd0ZpbGUuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICBhd2FpdCBjYWxsYmFjayhyYXdGaWxlLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmF3RmlsZS5zZW5kKG51bGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZEV4Y2VsRmlsZShmaWxlIDogc3RyaW5nKVxyXG57XHJcbiAgICBsZXQgd2I6IFhMU1guSVdvcmtCb29rID0gWExTWC5yZWFkRmlsZShmaWxlKTtcclxuICAgIGxldCBmaXJzdF9zaGVldF9uYW1lID0gd2IuU2hlZXROYW1lc1swXTtcclxuICAgIGxldCBzaGVldDogWExTWC5JV29ya1NoZWV0ID0gd2IuU2hlZXRzW2ZpcnN0X3NoZWV0X25hbWVdO1xyXG4gICAgbGV0IGRhdGEgPSBYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24oc2hlZXQpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuLy9mdW5jdGlvbiBsb2FkRXhjZWxGaWxlKGZpbGUsIGNhbGxiYWNrKSB7XHJcbi8vICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBleGNlbCBmaWxlXCIpO1xyXG4vLyAgICBsZXQgd2I6IFdvcmtib29rID0gbmV3IFdvcmtib29rKCk7XHJcbi8vICAgIGxldCByZXN1bHQgPSBudWxsO1xyXG4vLyAgICB0cnkge1xyXG4vLyAgICAgICAgLy9jb25zb2xlLmxvZyhcInN0YXJ0XCIpO1xyXG4vLyAgICAgICAgd2IueGxzeC5yZWFkRmlsZShmaWxlKS50aGVuKCgpID0+IHtcclxuLy8gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVuZFwiKTtcclxuLy8gICAgICAgICAgICBsZXQgc2hlZXQ6IFdvcmtzaGVldCA9IHdiLmdldFdvcmtzaGVldChcIlNoZWV0MVwiKTtcclxuLy8gICAgICAgICAgICBsZXQgaGVhZGVycyA9IHNoZWV0LmdldFJvdygwKTtcclxuLy8gICAgICAgICAgICBsZXQgcm93SWQgPSAxO1xyXG4vLyAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBBcnJheSgpO1xyXG4vLyAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbi8vICAgICAgICAgICAgICAgIGxldCByb3dEYXRhID0gc2hlZXQuZ2V0Um93KHJvd0lkKTtcclxuLy8gICAgICAgICAgICAgICAgaWYgKHJvd0RhdGEuaGFzVmFsdWVzKSB7XHJcbi8vICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyb3dEYXRhKTsgcm93SWQrKztcclxuLy8gICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICBlbHNlIGJyZWFrO1xyXG4vLyAgICAgICAgICAgIH07XHJcbi8vICAgICAgICB9KVxyXG4vLyAgICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgICAgcmV0dXJuIG51bGw7XHJcbi8vICAgIH1cclxuLy8gICAgcmV0dXJuIHJlc3VsdDtcclxuLy99IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY3J5cHRvXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTsiXSwic291cmNlUm9vdCI6IiJ9